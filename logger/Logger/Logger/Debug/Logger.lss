
Logger.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000017e  00800100  00005386  0000541a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005386  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000004c2  0080027e  0080027e  00005598  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00005598  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000055c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000009a8  00000000  00000000  00005608  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00016404  00000000  00000000  00005fb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002d81  00000000  00000000  0001c3b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00006b28  00000000  00000000  0001f135  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001ffc  00000000  00000000  00025c60  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000401a  00000000  00000000  00027c5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0001076d  00000000  00000000  0002bc76  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000b98  00000000  00000000  0003c3e3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 09 04 	jmp	0x812	; 0x812 <__ctors_end>
       4:	0c 94 26 04 	jmp	0x84c	; 0x84c <__bad_interrupt>
       8:	0c 94 26 04 	jmp	0x84c	; 0x84c <__bad_interrupt>
       c:	0c 94 26 04 	jmp	0x84c	; 0x84c <__bad_interrupt>
      10:	0c 94 26 04 	jmp	0x84c	; 0x84c <__bad_interrupt>
      14:	0c 94 26 04 	jmp	0x84c	; 0x84c <__bad_interrupt>
      18:	0c 94 26 04 	jmp	0x84c	; 0x84c <__bad_interrupt>
      1c:	0c 94 26 04 	jmp	0x84c	; 0x84c <__bad_interrupt>
      20:	0c 94 26 04 	jmp	0x84c	; 0x84c <__bad_interrupt>
      24:	0c 94 26 04 	jmp	0x84c	; 0x84c <__bad_interrupt>
      28:	0c 94 26 04 	jmp	0x84c	; 0x84c <__bad_interrupt>
      2c:	0c 94 ba 17 	jmp	0x2f74	; 0x2f74 <__vector_11>
      30:	0c 94 26 04 	jmp	0x84c	; 0x84c <__bad_interrupt>
      34:	0c 94 26 04 	jmp	0x84c	; 0x84c <__bad_interrupt>
      38:	0c 94 96 17 	jmp	0x2f2c	; 0x2f2c <__vector_14>
      3c:	0c 94 26 04 	jmp	0x84c	; 0x84c <__bad_interrupt>
      40:	0c 94 26 04 	jmp	0x84c	; 0x84c <__bad_interrupt>
      44:	0c 94 26 04 	jmp	0x84c	; 0x84c <__bad_interrupt>
      48:	0c 94 f9 16 	jmp	0x2df2	; 0x2df2 <__vector_18>
      4c:	0c 94 26 04 	jmp	0x84c	; 0x84c <__bad_interrupt>
      50:	0c 94 26 04 	jmp	0x84c	; 0x84c <__bad_interrupt>
      54:	0c 94 26 04 	jmp	0x84c	; 0x84c <__bad_interrupt>
      58:	0c 94 26 04 	jmp	0x84c	; 0x84c <__bad_interrupt>
      5c:	0c 94 26 04 	jmp	0x84c	; 0x84c <__bad_interrupt>
      60:	0c 94 26 04 	jmp	0x84c	; 0x84c <__bad_interrupt>
      64:	0c 94 26 04 	jmp	0x84c	; 0x84c <__bad_interrupt>
      68:	4b 22       	and	r4, r27
      6a:	6c 22       	and	r6, r28
      6c:	6e 22       	and	r6, r30
      6e:	79 22       	and	r7, r25
      70:	7b 22       	and	r7, r27
      72:	7f 22       	and	r7, r31
      74:	88 22       	and	r8, r24

00000076 <__trampolines_end>:
      76:	00 00       	nop
      78:	25 00       	.word	0x0025	; ????
      7a:	28 00       	.word	0x0028	; ????
      7c:	2b 00       	.word	0x002b	; ????

0000007e <u8g_avr_ddr_P>:
      7e:	00 00 24 00 27 00 2a 00                             ..$.'.*.

00000086 <u8g_dev_ssd13xx_sleep_off>:
      86:	ff e0 ff d1 af ff 32 ff d0 ff fe                    ......2....

00000091 <u8g_dev_ssd13xx_sleep_on>:
      91:	ff e0 ff d1 ae ff d0 ff fe                          .........

0000009a <u8g_dev_ssd1306_128x64_data_start>:
      9a:	ff e0 ff d1 10 00 ff fe                             ........

000000a2 <u8g_dev_ssd1306_128x64_adafruit2_init_seq>:
      a2:	ff d0 ff e0 ff c1 ff d1 ae d5 80 a8 3f d3 00 40     ............?..@
      b2:	8d 14 20 00 a1 c8 da 12 81 cf d9 f1 db 40 2e a4     .. ..........@..
      c2:	a6 af ff d0 ff fe                                   ......

000000c8 <u8g_font_6x10>:
      c8:	01 06 0a 00 fe 07 01 36 02 68 20 ff fe 08 fe 07     .......6.h .....
      d8:	fe 0a 00 60 22 17 67 80 80 80 80 80 00 80 16 33     ...`".g........3
      e8:	63 a0 a0 a0 02 57 67 50 50 f8 50 f8 50 50 02 57     c....WgPP.P.PP.W
      f8:	67 20 70 a0 70 28 70 20 02 57 67 48 a8 50 20 50     g p.p(p .WgH.P P
     108:	a8 90 02 57 67 40 a0 a0 40 a8 90 68 26 13 63 80     ...Wg@..@..h&.c.
     118:	80 80 12 37 67 20 40 80 80 80 40 20 12 37 67 80     ...7g @...@ .7g.
     128:	40 20 20 20 40 80 03 55 65 88 50 f8 50 88 03 55     @   @..Ue.P.P..U
     138:	65 20 20 f8 20 20 11 33 63 60 40 80 05 51 61 f8     e  .  .3c`@..Qa.
     148:	11 33 63 40 e0 40 02 57 67 08 08 10 20 40 80 80     .3c@.@.Wg... @..
     158:	02 57 67 20 50 88 88 88 50 20 02 57 67 20 60 a0     .Wg P...P .Wg `.
     168:	20 20 20 f8 02 57 67 70 88 08 30 40 80 f8 02 57        ..Wgp..0@...W
     178:	67 f8 08 10 30 08 88 70 02 57 67 10 30 50 90 f8     g...0..p.Wg.0P..
     188:	10 10 02 57 67 f8 80 b0 c8 08 88 70 02 57 67 30     ...Wg......p.Wg0
     198:	40 80 b0 c8 88 70 02 57 67 f8 08 10 10 20 40 40     @....p.Wg.... @@
     1a8:	02 57 67 70 88 88 70 88 88 70 02 57 67 70 88 98     .Wgp..p..p.Wgp..
     1b8:	68 08 10 60 11 37 67 40 e0 40 00 40 e0 40 11 37     h..`.7g@.@.@.@.7
     1c8:	67 40 e0 40 00 60 40 80 12 47 67 10 20 40 80 40     g@.@.`@..Gg. @.@
     1d8:	20 10 04 53 63 f8 00 f8 12 47 67 80 40 20 10 20      ..Sc....Gg.@ . 
     1e8:	40 80 02 57 67 70 88 10 20 20 00 20 02 57 67 70     @..Wgp..  . .Wgp
     1f8:	88 98 a8 b0 80 70 02 57 67 20 50 88 88 f8 88 88     .....p.Wg P.....
     208:	02 57 67 f0 48 48 70 48 48 f0 02 57 67 70 88 80     .Wg.HHpHH..Wgp..
     218:	80 80 88 70 02 57 67 f0 48 48 48 48 48 f0 02 57     ...p.Wg.HHHHH..W
     228:	67 f8 80 80 f0 80 80 f8 02 57 67 f8 80 80 f0 80     g........Wg.....
     238:	80 80 02 57 67 70 88 80 80 98 88 70 02 57 67 88     ...Wgp.....p.Wg.
     248:	88 88 f8 88 88 88 12 37 67 e0 40 40 40 40 40 e0     .......7g.@@@@@.
     258:	02 57 67 38 10 10 10 10 90 60 02 57 67 88 90 a0     .Wg8.....`.Wg...
     268:	c0 a0 90 88 02 57 67 80 80 80 80 80 80 f8 02 57     .....Wg........W
     278:	67 88 88 d8 a8 88 88 88 02 57 67 88 88 c8 a8 98     g........Wg.....
     288:	88 88 02 57 67 70 88 88 88 88 88 70 02 57 67 f0     ...Wgp.....p.Wg.
     298:	88 88 f0 80 80 80 01 58 68 70 88 88 88 88 a8 70     .......Xhp.....p
     2a8:	08 02 57 67 f0 88 88 f0 a0 90 88 02 57 67 70 88     ..Wg........Wgp.
     2b8:	80 70 08 88 70 02 57 67 f8 20 20 20 20 20 20 02     .p..p.Wg.      .
     2c8:	57 67 88 88 88 88 88 88 70 02 57 67 88 88 88 50     Wg......p.Wg...P
     2d8:	50 50 20 02 57 67 88 88 88 a8 a8 d8 88 02 57 67     PP .Wg........Wg
     2e8:	88 88 50 20 50 88 88 02 57 67 88 88 50 20 20 20     ..P P...Wg..P   
     2f8:	20 02 57 67 f8 08 10 20 40 80 f8 12 37 67 e0 80      .Wg... @...7g..
     308:	80 80 80 80 e0 02 57 67 80 80 40 20 10 08 08 12     ......Wg..@ ....
     318:	37 67 e0 20 20 20 20 20 e0 06 53 63 20 50 88 01     7g.     ..Sc P..
     328:	51 61 f8 28 22 62 80 40 02 55 65 70 08 78 88 78     Qa.("b.@.Uep.x.x
     338:	02 57 67 80 80 b0 c8 88 c8 b0 02 55 65 70 88 80     .Wg........Uep..
     348:	88 70 02 57 67 08 08 68 98 88 98 68 02 55 65 70     .p.Wg..h...h.Uep
     358:	88 f8 80 70 02 57 67 30 48 40 f0 40 40 40 00 57     ...p.Wg0H@.@@@.W
     368:	67 78 88 88 78 08 88 70 02 57 67 80 80 b0 c8 88     gx..x..p.Wg.....
     378:	88 88 12 37 67 40 00 c0 40 40 40 e0 10 49 69 10     ...7g@..@@@..Ii.
     388:	00 30 10 10 10 90 90 60 02 57 67 80 80 88 90 e0     .0.....`.Wg.....
     398:	90 88 12 37 67 c0 40 40 40 40 40 e0 02 55 65 d0     ...7g.@@@@@..Ue.
     3a8:	a8 a8 a8 88 02 55 65 b0 c8 88 88 88 02 55 65 70     .....Ue......Uep
     3b8:	88 88 88 70 00 57 67 b0 c8 88 c8 b0 80 80 00 57     ...p.Wg........W
     3c8:	67 68 98 88 98 68 08 08 02 55 65 b0 c8 80 80 80     gh...h...Ue.....
     3d8:	02 55 65 70 80 70 08 f0 02 57 67 40 40 f0 40 40     .Uep.p...Wg@@.@@
     3e8:	48 30 02 55 65 88 88 88 98 68 02 55 65 88 88 50     H0.Ue....h.Ue..P
     3f8:	50 20 02 55 65 88 88 a8 a8 50 02 55 65 88 50 20     P .Ue....P.Ue.P 
     408:	50 88 00 57 67 88 88 98 68 08 88 70 02 55 65 f8     P..Wg...h..p.Ue.
     418:	10 20 40 f8 12 47 67 30 40 20 c0 20 40 30 22 17     . @..Gg0@ . @0".
     428:	67 80 80 80 80 80 80 80 12 47 67 c0 20 40 30 40     g........Gg. @0@
     438:	20 c0 06 53 63 48 a8 90 ff ff ff ff ff ff ff ff      ..ScH..........
     448:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     458:	ff ff ff ff ff ff ff ff ff 0a 00 60 22 17 67 80     ...........`".g.
     468:	00 80 80 80 80 80 01 57 67 20 78 a0 a0 a0 78 20     .......Wg x...x 
     478:	02 57 67 30 48 40 e0 40 48 b0 02 55 65 88 70 50     .Wg0H@.@H..Ue.pP
     488:	70 88 01 58 68 88 88 50 20 f8 20 20 20 22 17 67     p..Xh..P .   ".g
     498:	80 80 80 00 80 80 80 01 58 68 70 80 e0 90 48 38     ........Xhp...H8
     4a8:	08 70 19 31 61 a0 02 57 67 70 88 a8 c8 a8 88 70     .p.1a..Wgp.....p
     4b8:	13 46 66 70 90 b0 50 00 f0 02 65 65 24 48 90 48     .Ffp..P...ee$H.H
     4c8:	24 14 42 62 f0 10 15 41 61 f0 02 57 67 70 88 e8     $.Bb...Aa..Wgp..
     4d8:	c8 c8 88 70 09 51 61 f8 16 33 63 40 a0 40 02 56     ...p.Qa..3c@.@.V
     4e8:	66 20 20 f8 20 20 f8 15 45 65 60 90 20 40 f0 15     f  .  ..Ee`. @..
     4f8:	45 65 e0 10 60 10 e0 28 22 62 40 80 01 56 66 88     Ee..`..("b@..Vf.
     508:	88 88 c8 b0 80 02 57 67 78 e8 e8 68 28 28 28 25     ......Wgx..h(((%
     518:	11 61 80 20 22 62 40 80 15 35 65 40 c0 40 40 e0     .a. "b@..5e@.@@.
     528:	13 46 66 60 90 90 60 00 f0 02 65 65 90 48 24 48     .Ff`..`...ee.H$H
     538:	90 01 69 69 40 c0 40 40 e4 0c 14 3c 04 01 69 69     ..ii@.@@...<..ii
     548:	40 c0 40 40 e8 14 04 08 1c 01 59 69 c0 20 40 20     @.@@......Yi. @ 
     558:	c8 18 28 78 08 02 57 67 20 00 20 20 40 88 70 02     ..(x..Wg .  @.p.
     568:	58 68 40 20 70 88 88 f8 88 88 02 58 68 10 20 70     Xh@ p......Xh. p
     578:	88 88 f8 88 88 02 58 68 20 50 70 88 88 f8 88 88     ......Xh Pp.....
     588:	02 58 68 48 b0 70 88 88 f8 88 88 02 58 68 50 00     .XhH.p......XhP.
     598:	70 88 88 f8 88 88 02 58 68 20 50 70 88 88 f8 88     p......Xh Pp....
     5a8:	88 02 67 67 3c 50 90 9c f0 90 9c 00 59 69 70 88     ..gg<P......Yip.
     5b8:	80 80 80 88 70 20 40 02 58 68 40 f8 80 80 f0 80     ....p @.Xh@.....
     5c8:	80 f8 02 58 68 10 f8 80 80 f0 80 80 f8 02 58 68     ...Xh.........Xh
     5d8:	20 f8 80 80 f0 80 80 f8 02 58 68 50 f8 80 80 f0      ........XhP....
     5e8:	80 80 f8 12 38 68 80 40 e0 40 40 40 40 e0 12 38     ....8h.@.@@@@..8
     5f8:	68 20 40 e0 40 40 40 40 e0 12 38 68 40 a0 e0 40     h @.@@@@..8h@..@
     608:	40 40 40 e0 12 38 68 a0 00 e0 40 40 40 40 e0 02     @@@..8h...@@@@..
     618:	57 67 f0 48 48 e8 48 48 f0 02 58 68 28 50 88 c8     Wg.HH.HH..Xh(P..
     628:	a8 98 88 88 02 58 68 40 20 70 88 88 88 88 70 02     .....Xh@ p....p.
     638:	58 68 10 20 70 88 88 88 88 70 02 58 68 20 50 70     Xh. p....p.Xh Pp
     648:	88 88 88 88 70 02 58 68 28 50 70 88 88 88 88 70     ....p.Xh(Pp....p
     658:	02 58 68 50 00 70 88 88 88 88 70 02 55 65 88 50     .XhP.p....p.Ue.P
     668:	20 50 88 02 57 67 70 98 98 a8 c8 c8 70 02 58 68      P..Wgp.....p.Xh
     678:	40 20 88 88 88 88 88 70 02 58 68 10 20 88 88 88     @ .....p.Xh. ...
     688:	88 88 70 02 58 68 20 50 00 88 88 88 88 70 02 58     ..p.Xh P.....p.X
     698:	68 50 00 88 88 88 88 88 70 02 58 68 10 20 88 88     hP......p.Xh. ..
     6a8:	50 20 20 20 02 57 67 80 f0 88 f0 80 80 80 02 57     P   .Wg........W
     6b8:	67 70 88 90 a0 90 88 b0 02 58 68 40 20 00 70 08     gp.......Xh@ .p.
     6c8:	78 88 78 02 58 68 10 20 00 70 08 78 88 78 02 58     x.x.Xh. .p.x.x.X
     6d8:	68 20 50 00 70 08 78 88 78 02 58 68 28 50 00 70     h P.p.x.x.Xh(P.p
     6e8:	08 78 88 78 02 57 67 50 00 70 08 78 88 78 02 58     .x.x.WgP.p.x.x.X
     6f8:	68 20 50 20 70 08 78 88 78 02 65 65 78 14 7c 90     h P p.x.x.eex.|.
     708:	7c 00 57 67 70 88 80 88 70 20 40 02 58 68 40 20     |.Wgp...p @.Xh@ 
     718:	00 70 88 f8 80 70 02 58 68 10 20 00 70 88 f8 80     .p...p.Xh. .p...
     728:	70 02 58 68 20 50 00 70 88 f8 80 70 02 57 67 50     p.Xh P.p...p.WgP
     738:	00 70 88 f8 80 70 12 38 68 80 40 00 c0 40 40 40     .p...p.8h.@..@@@
     748:	e0 12 38 68 40 80 00 c0 40 40 40 e0 12 38 68 40     ..8h@...@@@..8h@
     758:	a0 00 c0 40 40 40 e0 12 37 67 a0 00 c0 40 40 40     ...@@@..7g...@@@
     768:	e0 02 57 67 c0 30 70 88 88 88 70 02 58 68 28 50     ..Wg.0p...p.Xh(P
     778:	00 b0 c8 88 88 88 02 58 68 40 20 00 70 88 88 88     .......Xh@ .p...
     788:	70 02 58 68 10 20 00 70 88 88 88 70 02 58 68 20     p.Xh. .p...p.Xh 
     798:	50 00 70 88 88 88 70 02 58 68 28 50 00 70 88 88     P.p...p.Xh(P.p..
     7a8:	88 70 02 57 67 50 00 70 88 88 88 70 03 55 65 20     .p.WgP.p...p.Ue 
     7b8:	00 f8 00 20 02 55 65 78 98 a8 c8 f0 02 58 68 40     ... .Uex.....Xh@
     7c8:	20 00 88 88 88 98 68 02 58 68 10 20 00 88 88 88      .....h.Xh. ....
     7d8:	98 68 02 58 68 20 50 00 88 88 88 98 68 02 57 67     .h.Xh P.....h.Wg
     7e8:	50 00 88 88 88 98 68 00 59 69 10 20 88 88 98 68     P.....h.Yi. ...h
     7f8:	08 88 70 00 58 68 80 f0 88 88 88 f0 80 80 00 59     ..p.Xh.........Y
     808:	69 50 00 88 88 98 68 08 88 70                       iP....h..p

00000812 <__ctors_end>:
     812:	11 24       	eor	r1, r1
     814:	1f be       	out	0x3f, r1	; 63
     816:	cf ef       	ldi	r28, 0xFF	; 255
     818:	d8 e0       	ldi	r29, 0x08	; 8
     81a:	de bf       	out	0x3e, r29	; 62
     81c:	cd bf       	out	0x3d, r28	; 61

0000081e <__do_copy_data>:
     81e:	12 e0       	ldi	r17, 0x02	; 2
     820:	a0 e0       	ldi	r26, 0x00	; 0
     822:	b1 e0       	ldi	r27, 0x01	; 1
     824:	e6 e8       	ldi	r30, 0x86	; 134
     826:	f3 e5       	ldi	r31, 0x53	; 83
     828:	02 c0       	rjmp	.+4      	; 0x82e <__do_copy_data+0x10>
     82a:	05 90       	lpm	r0, Z+
     82c:	0d 92       	st	X+, r0
     82e:	ae 37       	cpi	r26, 0x7E	; 126
     830:	b1 07       	cpc	r27, r17
     832:	d9 f7       	brne	.-10     	; 0x82a <__do_copy_data+0xc>

00000834 <__do_clear_bss>:
     834:	27 e0       	ldi	r18, 0x07	; 7
     836:	ae e7       	ldi	r26, 0x7E	; 126
     838:	b2 e0       	ldi	r27, 0x02	; 2
     83a:	01 c0       	rjmp	.+2      	; 0x83e <.do_clear_bss_start>

0000083c <.do_clear_bss_loop>:
     83c:	1d 92       	st	X+, r1

0000083e <.do_clear_bss_start>:
     83e:	a0 34       	cpi	r26, 0x40	; 64
     840:	b2 07       	cpc	r27, r18
     842:	e1 f7       	brne	.-8      	; 0x83c <.do_clear_bss_loop>
     844:	0e 94 b2 19 	call	0x3364	; 0x3364 <main>
     848:	0c 94 c1 29 	jmp	0x5382	; 0x5382 <_exit>

0000084c <__bad_interrupt>:
     84c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000850 <ld_dword>:


	putc_init(&pb, fp);
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
	return putc_flush(&pb);
}
     850:	fc 01       	movw	r30, r24
     852:	62 81       	ldd	r22, Z+2	; 0x02
     854:	73 81       	ldd	r23, Z+3	; 0x03
     856:	cb 01       	movw	r24, r22
     858:	a0 e0       	ldi	r26, 0x00	; 0
     85a:	b0 e0       	ldi	r27, 0x00	; 0
     85c:	ba 2f       	mov	r27, r26
     85e:	a9 2f       	mov	r26, r25
     860:	98 2f       	mov	r25, r24
     862:	88 27       	eor	r24, r24
     864:	21 81       	ldd	r18, Z+1	; 0x01
     866:	82 2b       	or	r24, r18
     868:	ba 2f       	mov	r27, r26
     86a:	a9 2f       	mov	r26, r25
     86c:	98 2f       	mov	r25, r24
     86e:	88 27       	eor	r24, r24
     870:	20 81       	ld	r18, Z
     872:	bc 01       	movw	r22, r24
     874:	cd 01       	movw	r24, r26
     876:	62 2b       	or	r22, r18
     878:	08 95       	ret

0000087a <st_dword>:
     87a:	fc 01       	movw	r30, r24
     87c:	40 83       	st	Z, r20
     87e:	51 83       	std	Z+1, r21	; 0x01
     880:	62 83       	std	Z+2, r22	; 0x02
     882:	73 83       	std	Z+3, r23	; 0x03
     884:	08 95       	ret

00000886 <clst2sect>:
     886:	0f 93       	push	r16
     888:	1f 93       	push	r17
     88a:	fc 01       	movw	r30, r24
     88c:	9a 01       	movw	r18, r20
     88e:	ab 01       	movw	r20, r22
     890:	22 50       	subi	r18, 0x02	; 2
     892:	31 09       	sbc	r19, r1
     894:	41 09       	sbc	r20, r1
     896:	51 09       	sbc	r21, r1
     898:	87 89       	ldd	r24, Z+23	; 0x17
     89a:	90 8d       	ldd	r25, Z+24	; 0x18
     89c:	a1 8d       	ldd	r26, Z+25	; 0x19
     89e:	b2 8d       	ldd	r27, Z+26	; 0x1a
     8a0:	02 97       	sbiw	r24, 0x02	; 2
     8a2:	a1 09       	sbc	r26, r1
     8a4:	b1 09       	sbc	r27, r1
     8a6:	28 17       	cp	r18, r24
     8a8:	39 07       	cpc	r19, r25
     8aa:	4a 07       	cpc	r20, r26
     8ac:	5b 07       	cpc	r21, r27
     8ae:	68 f4       	brcc	.+26     	; 0x8ca <clst2sect+0x44>
     8b0:	a1 85       	ldd	r26, Z+9	; 0x09
     8b2:	b2 85       	ldd	r27, Z+10	; 0x0a
     8b4:	0e 94 76 28 	call	0x50ec	; 0x50ec <__muluhisi3>
     8b8:	03 a5       	ldd	r16, Z+43	; 0x2b
     8ba:	14 a5       	ldd	r17, Z+44	; 0x2c
     8bc:	25 a5       	ldd	r18, Z+45	; 0x2d
     8be:	36 a5       	ldd	r19, Z+46	; 0x2e
     8c0:	60 0f       	add	r22, r16
     8c2:	71 1f       	adc	r23, r17
     8c4:	82 1f       	adc	r24, r18
     8c6:	93 1f       	adc	r25, r19
     8c8:	03 c0       	rjmp	.+6      	; 0x8d0 <clst2sect+0x4a>
     8ca:	60 e0       	ldi	r22, 0x00	; 0
     8cc:	70 e0       	ldi	r23, 0x00	; 0
     8ce:	cb 01       	movw	r24, r22
     8d0:	1f 91       	pop	r17
     8d2:	0f 91       	pop	r16
     8d4:	08 95       	ret

000008d6 <get_ldnumber>:
     8d6:	cf 93       	push	r28
     8d8:	df 93       	push	r29
     8da:	dc 01       	movw	r26, r24
     8dc:	ed 91       	ld	r30, X+
     8de:	fc 91       	ld	r31, X
     8e0:	11 97       	sbiw	r26, 0x01	; 1
     8e2:	30 97       	sbiw	r30, 0x00	; 0
     8e4:	f9 f0       	breq	.+62     	; 0x924 <__stack+0x25>
     8e6:	9f 01       	movw	r18, r30
     8e8:	2f 5f       	subi	r18, 0xFF	; 255
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	e9 01       	movw	r28, r18
     8ee:	21 97       	sbiw	r28, 0x01	; 1
     8f0:	88 81       	ld	r24, Y
     8f2:	81 32       	cpi	r24, 0x21	; 33
     8f4:	18 f0       	brcs	.+6      	; 0x8fc <get_ldnumber+0x26>
     8f6:	8a 33       	cpi	r24, 0x3A	; 58
     8f8:	b9 f7       	brne	.-18     	; 0x8e8 <get_ldnumber+0x12>
     8fa:	04 c0       	rjmp	.+8      	; 0x904 <__stack+0x5>
     8fc:	80 91 7e 02 	lds	r24, 0x027E	; 0x80027e <__data_end>
     900:	90 e0       	ldi	r25, 0x00	; 0
     902:	12 c0       	rjmp	.+36     	; 0x928 <__stack+0x29>
     904:	90 81       	ld	r25, Z
     906:	80 ed       	ldi	r24, 0xD0	; 208
     908:	89 0f       	add	r24, r25
     90a:	8a 30       	cpi	r24, 0x0A	; 10
     90c:	58 f4       	brcc	.+22     	; 0x924 <__stack+0x25>
     90e:	32 96       	adiw	r30, 0x02	; 2
     910:	2e 17       	cp	r18, r30
     912:	3f 07       	cpc	r19, r31
     914:	39 f4       	brne	.+14     	; 0x924 <__stack+0x25>
     916:	90 33       	cpi	r25, 0x30	; 48
     918:	29 f4       	brne	.+10     	; 0x924 <__stack+0x25>
     91a:	2d 93       	st	X+, r18
     91c:	3c 93       	st	X, r19
     91e:	80 e0       	ldi	r24, 0x00	; 0
     920:	90 e0       	ldi	r25, 0x00	; 0
     922:	02 c0       	rjmp	.+4      	; 0x928 <__stack+0x29>
     924:	8f ef       	ldi	r24, 0xFF	; 255
     926:	9f ef       	ldi	r25, 0xFF	; 255
     928:	df 91       	pop	r29
     92a:	cf 91       	pop	r28
     92c:	08 95       	ret

0000092e <validate>:
     92e:	0f 93       	push	r16
     930:	1f 93       	push	r17
     932:	cf 93       	push	r28
     934:	df 93       	push	r29
     936:	ec 01       	movw	r28, r24
     938:	8b 01       	movw	r16, r22
     93a:	89 2b       	or	r24, r25
     93c:	f1 f0       	breq	.+60     	; 0x97a <validate+0x4c>
     93e:	e8 81       	ld	r30, Y
     940:	f9 81       	ldd	r31, Y+1	; 0x01
     942:	30 97       	sbiw	r30, 0x00	; 0
     944:	d1 f0       	breq	.+52     	; 0x97a <validate+0x4c>
     946:	80 81       	ld	r24, Z
     948:	88 23       	and	r24, r24
     94a:	b9 f0       	breq	.+46     	; 0x97a <validate+0x4c>
     94c:	2a 81       	ldd	r18, Y+2	; 0x02
     94e:	3b 81       	ldd	r19, Y+3	; 0x03
     950:	85 81       	ldd	r24, Z+5	; 0x05
     952:	96 81       	ldd	r25, Z+6	; 0x06
     954:	28 17       	cp	r18, r24
     956:	39 07       	cpc	r19, r25
     958:	81 f4       	brne	.+32     	; 0x97a <validate+0x4c>
     95a:	81 81       	ldd	r24, Z+1	; 0x01
     95c:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <disk_status>
     960:	80 fd       	sbrc	r24, 0
     962:	0b c0       	rjmp	.+22     	; 0x97a <validate+0x4c>
     964:	28 81       	ld	r18, Y
     966:	39 81       	ldd	r19, Y+1	; 0x01
     968:	80 e0       	ldi	r24, 0x00	; 0
     96a:	f8 01       	movw	r30, r16
     96c:	31 83       	std	Z+1, r19	; 0x01
     96e:	20 83       	st	Z, r18
     970:	df 91       	pop	r29
     972:	cf 91       	pop	r28
     974:	1f 91       	pop	r17
     976:	0f 91       	pop	r16
     978:	08 95       	ret
     97a:	89 e0       	ldi	r24, 0x09	; 9
     97c:	20 e0       	ldi	r18, 0x00	; 0
     97e:	30 e0       	ldi	r19, 0x00	; 0
     980:	f4 cf       	rjmp	.-24     	; 0x96a <validate+0x3c>

00000982 <ld_clust.isra.2>:
     982:	fb 01       	movw	r30, r22
     984:	42 8d       	ldd	r20, Z+26	; 0x1a
     986:	53 8d       	ldd	r21, Z+27	; 0x1b
     988:	60 e0       	ldi	r22, 0x00	; 0
     98a:	70 e0       	ldi	r23, 0x00	; 0
     98c:	83 30       	cpi	r24, 0x03	; 3
     98e:	59 f4       	brne	.+22     	; 0x9a6 <ld_clust.isra.2+0x24>
     990:	84 89       	ldd	r24, Z+20	; 0x14
     992:	95 89       	ldd	r25, Z+21	; 0x15
     994:	a0 e0       	ldi	r26, 0x00	; 0
     996:	b0 e0       	ldi	r27, 0x00	; 0
     998:	dc 01       	movw	r26, r24
     99a:	99 27       	eor	r25, r25
     99c:	88 27       	eor	r24, r24
     99e:	48 2b       	or	r20, r24
     9a0:	59 2b       	or	r21, r25
     9a2:	6a 2b       	or	r22, r26
     9a4:	7b 2b       	or	r23, r27
     9a6:	cb 01       	movw	r24, r22
     9a8:	ba 01       	movw	r22, r20
     9aa:	08 95       	ret

000009ac <st_clust.isra.3>:
     9ac:	fb 01       	movw	r30, r22
     9ae:	22 8f       	std	Z+26, r18	; 0x1a
     9b0:	33 8f       	std	Z+27, r19	; 0x1b
     9b2:	dc 01       	movw	r26, r24
     9b4:	8c 91       	ld	r24, X
     9b6:	83 30       	cpi	r24, 0x03	; 3
     9b8:	29 f4       	brne	.+10     	; 0x9c4 <st_clust.isra.3+0x18>
     9ba:	ca 01       	movw	r24, r20
     9bc:	aa 27       	eor	r26, r26
     9be:	bb 27       	eor	r27, r27
     9c0:	84 8b       	std	Z+20, r24	; 0x14
     9c2:	95 8b       	std	Z+21, r25	; 0x15
     9c4:	08 95       	ret

000009c6 <sync_window>:
     9c6:	8f 92       	push	r8
     9c8:	9f 92       	push	r9
     9ca:	af 92       	push	r10
     9cc:	bf 92       	push	r11
     9ce:	ef 92       	push	r14
     9d0:	ff 92       	push	r15
     9d2:	0f 93       	push	r16
     9d4:	1f 93       	push	r17
     9d6:	cf 93       	push	r28
     9d8:	df 93       	push	r29
     9da:	fc 01       	movw	r30, r24
     9dc:	23 81       	ldd	r18, Z+3	; 0x03
     9de:	22 23       	and	r18, r18
     9e0:	c1 f1       	breq	.+112    	; 0xa52 <sync_window+0x8c>
     9e2:	ec 01       	movw	r28, r24
     9e4:	7c 01       	movw	r14, r24
     9e6:	f3 e3       	ldi	r31, 0x33	; 51
     9e8:	ef 0e       	add	r14, r31
     9ea:	f1 1c       	adc	r15, r1
     9ec:	2f a5       	ldd	r18, Y+47	; 0x2f
     9ee:	38 a9       	ldd	r19, Y+48	; 0x30
     9f0:	49 a9       	ldd	r20, Y+49	; 0x31
     9f2:	5a a9       	ldd	r21, Y+50	; 0x32
     9f4:	01 e0       	ldi	r16, 0x01	; 1
     9f6:	10 e0       	ldi	r17, 0x00	; 0
     9f8:	b7 01       	movw	r22, r14
     9fa:	89 81       	ldd	r24, Y+1	; 0x01
     9fc:	0e 94 e7 1d 	call	0x3bce	; 0x3bce <disk_write>
     a00:	81 11       	cpse	r24, r1
     a02:	29 c0       	rjmp	.+82     	; 0xa56 <sync_window+0x90>
     a04:	1b 82       	std	Y+3, r1	; 0x03
     a06:	0f a5       	ldd	r16, Y+47	; 0x2f
     a08:	18 a9       	ldd	r17, Y+48	; 0x30
     a0a:	29 a9       	ldd	r18, Y+49	; 0x31
     a0c:	3a a9       	ldd	r19, Y+50	; 0x32
     a0e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     a10:	9c 8d       	ldd	r25, Y+28	; 0x1c
     a12:	ad 8d       	ldd	r26, Y+29	; 0x1d
     a14:	be 8d       	ldd	r27, Y+30	; 0x1e
     a16:	8b a0       	ldd	r8, Y+35	; 0x23
     a18:	9c a0       	ldd	r9, Y+36	; 0x24
     a1a:	ad a0       	ldd	r10, Y+37	; 0x25
     a1c:	be a0       	ldd	r11, Y+38	; 0x26
     a1e:	b9 01       	movw	r22, r18
     a20:	a8 01       	movw	r20, r16
     a22:	48 19       	sub	r20, r8
     a24:	59 09       	sbc	r21, r9
     a26:	6a 09       	sbc	r22, r10
     a28:	7b 09       	sbc	r23, r11
     a2a:	48 17       	cp	r20, r24
     a2c:	59 07       	cpc	r21, r25
     a2e:	6a 07       	cpc	r22, r26
     a30:	7b 07       	cpc	r23, r27
     a32:	78 f4       	brcc	.+30     	; 0xa52 <sync_window+0x8c>
     a34:	6a 81       	ldd	r22, Y+2	; 0x02
     a36:	62 30       	cpi	r22, 0x02	; 2
     a38:	61 f4       	brne	.+24     	; 0xa52 <sync_window+0x8c>
     a3a:	a9 01       	movw	r20, r18
     a3c:	98 01       	movw	r18, r16
     a3e:	28 0f       	add	r18, r24
     a40:	39 1f       	adc	r19, r25
     a42:	4a 1f       	adc	r20, r26
     a44:	5b 1f       	adc	r21, r27
     a46:	01 e0       	ldi	r16, 0x01	; 1
     a48:	10 e0       	ldi	r17, 0x00	; 0
     a4a:	b7 01       	movw	r22, r14
     a4c:	89 81       	ldd	r24, Y+1	; 0x01
     a4e:	0e 94 e7 1d 	call	0x3bce	; 0x3bce <disk_write>
     a52:	80 e0       	ldi	r24, 0x00	; 0
     a54:	01 c0       	rjmp	.+2      	; 0xa58 <sync_window+0x92>
     a56:	81 e0       	ldi	r24, 0x01	; 1
     a58:	df 91       	pop	r29
     a5a:	cf 91       	pop	r28
     a5c:	1f 91       	pop	r17
     a5e:	0f 91       	pop	r16
     a60:	ff 90       	pop	r15
     a62:	ef 90       	pop	r14
     a64:	bf 90       	pop	r11
     a66:	af 90       	pop	r10
     a68:	9f 90       	pop	r9
     a6a:	8f 90       	pop	r8
     a6c:	08 95       	ret

00000a6e <sync_fs>:
     a6e:	ef 92       	push	r14
     a70:	ff 92       	push	r15
     a72:	0f 93       	push	r16
     a74:	1f 93       	push	r17
     a76:	cf 93       	push	r28
     a78:	df 93       	push	r29
     a7a:	ec 01       	movw	r28, r24
     a7c:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <sync_window>
     a80:	98 2f       	mov	r25, r24
     a82:	81 11       	cpse	r24, r1
     a84:	5d c0       	rjmp	.+186    	; 0xb40 <sync_fs+0xd2>
     a86:	88 81       	ld	r24, Y
     a88:	83 30       	cpi	r24, 0x03	; 3
     a8a:	09 f0       	breq	.+2      	; 0xa8e <sync_fs+0x20>
     a8c:	4f c0       	rjmp	.+158    	; 0xb2c <sync_fs+0xbe>
     a8e:	8c 81       	ldd	r24, Y+4	; 0x04
     a90:	81 30       	cpi	r24, 0x01	; 1
     a92:	09 f0       	breq	.+2      	; 0xa96 <sync_fs+0x28>
     a94:	4b c0       	rjmp	.+150    	; 0xb2c <sync_fs+0xbe>
     a96:	80 e0       	ldi	r24, 0x00	; 0
     a98:	92 e0       	ldi	r25, 0x02	; 2
     a9a:	7e 01       	movw	r14, r28
     a9c:	23 e3       	ldi	r18, 0x33	; 51
     a9e:	e2 0e       	add	r14, r18
     aa0:	f1 1c       	adc	r15, r1
     aa2:	f7 01       	movw	r30, r14
     aa4:	9c 01       	movw	r18, r24
     aa6:	11 92       	st	Z+, r1
     aa8:	21 50       	subi	r18, 0x01	; 1
     aaa:	30 40       	sbci	r19, 0x00	; 0
     aac:	e1 f7       	brne	.-8      	; 0xaa6 <sync_fs+0x38>
     aae:	85 e5       	ldi	r24, 0x55	; 85
     ab0:	fe 01       	movw	r30, r28
     ab2:	ef 5c       	subi	r30, 0xCF	; 207
     ab4:	fd 4f       	sbci	r31, 0xFD	; 253
     ab6:	80 83       	st	Z, r24
     ab8:	8a ea       	ldi	r24, 0xAA	; 170
     aba:	31 96       	adiw	r30, 0x01	; 1
     abc:	80 83       	st	Z, r24
     abe:	82 e5       	ldi	r24, 0x52	; 82
     ac0:	8b ab       	std	Y+51, r24	; 0x33
     ac2:	8c ab       	std	Y+52, r24	; 0x34
     ac4:	81 e6       	ldi	r24, 0x61	; 97
     ac6:	8d ab       	std	Y+53, r24	; 0x35
     ac8:	91 e4       	ldi	r25, 0x41	; 65
     aca:	9e ab       	std	Y+54, r25	; 0x36
     acc:	22 e7       	ldi	r18, 0x72	; 114
     ace:	7b 97       	sbiw	r30, 0x1b	; 27
     ad0:	20 83       	st	Z, r18
     ad2:	31 96       	adiw	r30, 0x01	; 1
     ad4:	20 83       	st	Z, r18
     ad6:	31 96       	adiw	r30, 0x01	; 1
     ad8:	90 83       	st	Z, r25
     ada:	31 96       	adiw	r30, 0x01	; 1
     adc:	80 83       	st	Z, r24
     ade:	4f 85       	ldd	r20, Y+15	; 0x0f
     ae0:	58 89       	ldd	r21, Y+16	; 0x10
     ae2:	69 89       	ldd	r22, Y+17	; 0x11
     ae4:	7a 89       	ldd	r23, Y+18	; 0x12
     ae6:	ce 01       	movw	r24, r28
     ae8:	85 5e       	subi	r24, 0xE5	; 229
     aea:	9d 4f       	sbci	r25, 0xFD	; 253
     aec:	0e 94 3d 04 	call	0x87a	; 0x87a <st_dword>
     af0:	4b 85       	ldd	r20, Y+11	; 0x0b
     af2:	5c 85       	ldd	r21, Y+12	; 0x0c
     af4:	6d 85       	ldd	r22, Y+13	; 0x0d
     af6:	7e 85       	ldd	r23, Y+14	; 0x0e
     af8:	ce 01       	movw	r24, r28
     afa:	81 5e       	subi	r24, 0xE1	; 225
     afc:	9d 4f       	sbci	r25, 0xFD	; 253
     afe:	0e 94 3d 04 	call	0x87a	; 0x87a <st_dword>
     b02:	8f 8d       	ldd	r24, Y+31	; 0x1f
     b04:	98 a1       	ldd	r25, Y+32	; 0x20
     b06:	a9 a1       	ldd	r26, Y+33	; 0x21
     b08:	ba a1       	ldd	r27, Y+34	; 0x22
     b0a:	9c 01       	movw	r18, r24
     b0c:	ad 01       	movw	r20, r26
     b0e:	2f 5f       	subi	r18, 0xFF	; 255
     b10:	3f 4f       	sbci	r19, 0xFF	; 255
     b12:	4f 4f       	sbci	r20, 0xFF	; 255
     b14:	5f 4f       	sbci	r21, 0xFF	; 255
     b16:	2f a7       	std	Y+47, r18	; 0x2f
     b18:	38 ab       	std	Y+48, r19	; 0x30
     b1a:	49 ab       	std	Y+49, r20	; 0x31
     b1c:	5a ab       	std	Y+50, r21	; 0x32
     b1e:	01 e0       	ldi	r16, 0x01	; 1
     b20:	10 e0       	ldi	r17, 0x00	; 0
     b22:	b7 01       	movw	r22, r14
     b24:	89 81       	ldd	r24, Y+1	; 0x01
     b26:	0e 94 e7 1d 	call	0x3bce	; 0x3bce <disk_write>
     b2a:	1c 82       	std	Y+4, r1	; 0x04
     b2c:	40 e0       	ldi	r20, 0x00	; 0
     b2e:	50 e0       	ldi	r21, 0x00	; 0
     b30:	60 e0       	ldi	r22, 0x00	; 0
     b32:	89 81       	ldd	r24, Y+1	; 0x01
     b34:	0e 94 53 1e 	call	0x3ca6	; 0x3ca6 <disk_ioctl>
     b38:	91 e0       	ldi	r25, 0x01	; 1
     b3a:	81 11       	cpse	r24, r1
     b3c:	01 c0       	rjmp	.+2      	; 0xb40 <sync_fs+0xd2>
     b3e:	90 e0       	ldi	r25, 0x00	; 0
     b40:	89 2f       	mov	r24, r25
     b42:	cd b7       	in	r28, 0x3d	; 61
     b44:	de b7       	in	r29, 0x3e	; 62
     b46:	e6 e0       	ldi	r30, 0x06	; 6
     b48:	0c 94 08 29 	jmp	0x5210	; 0x5210 <__epilogue_restores__+0x18>

00000b4c <move_window.part.6>:
     b4c:	8f 92       	push	r8
     b4e:	9f 92       	push	r9
     b50:	af 92       	push	r10
     b52:	bf 92       	push	r11
     b54:	ff 92       	push	r15
     b56:	0f 93       	push	r16
     b58:	1f 93       	push	r17
     b5a:	cf 93       	push	r28
     b5c:	df 93       	push	r29
     b5e:	ec 01       	movw	r28, r24
     b60:	4a 01       	movw	r8, r20
     b62:	5b 01       	movw	r10, r22
     b64:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <sync_window>
     b68:	f8 2e       	mov	r15, r24
     b6a:	81 11       	cpse	r24, r1
     b6c:	16 c0       	rjmp	.+44     	; 0xb9a <move_window.part.6+0x4e>
     b6e:	01 e0       	ldi	r16, 0x01	; 1
     b70:	10 e0       	ldi	r17, 0x00	; 0
     b72:	a5 01       	movw	r20, r10
     b74:	94 01       	movw	r18, r8
     b76:	be 01       	movw	r22, r28
     b78:	6d 5c       	subi	r22, 0xCD	; 205
     b7a:	7f 4f       	sbci	r23, 0xFF	; 255
     b7c:	89 81       	ldd	r24, Y+1	; 0x01
     b7e:	0e 94 9c 1d 	call	0x3b38	; 0x3b38 <disk_read>
     b82:	88 23       	and	r24, r24
     b84:	31 f0       	breq	.+12     	; 0xb92 <move_window.part.6+0x46>
     b86:	ff 24       	eor	r15, r15
     b88:	f3 94       	inc	r15
     b8a:	88 24       	eor	r8, r8
     b8c:	8a 94       	dec	r8
     b8e:	98 2c       	mov	r9, r8
     b90:	54 01       	movw	r10, r8
     b92:	8f a6       	std	Y+47, r8	; 0x2f
     b94:	98 aa       	std	Y+48, r9	; 0x30
     b96:	a9 aa       	std	Y+49, r10	; 0x31
     b98:	ba aa       	std	Y+50, r11	; 0x32
     b9a:	8f 2d       	mov	r24, r15
     b9c:	df 91       	pop	r29
     b9e:	cf 91       	pop	r28
     ba0:	1f 91       	pop	r17
     ba2:	0f 91       	pop	r16
     ba4:	ff 90       	pop	r15
     ba6:	bf 90       	pop	r11
     ba8:	af 90       	pop	r10
     baa:	9f 90       	pop	r9
     bac:	8f 90       	pop	r8
     bae:	08 95       	ret

00000bb0 <move_window>:
     bb0:	0f 93       	push	r16
     bb2:	1f 93       	push	r17
     bb4:	fc 01       	movw	r30, r24
     bb6:	07 a5       	ldd	r16, Z+47	; 0x2f
     bb8:	10 a9       	ldd	r17, Z+48	; 0x30
     bba:	21 a9       	ldd	r18, Z+49	; 0x31
     bbc:	32 a9       	ldd	r19, Z+50	; 0x32
     bbe:	04 17       	cp	r16, r20
     bc0:	15 07       	cpc	r17, r21
     bc2:	26 07       	cpc	r18, r22
     bc4:	37 07       	cpc	r19, r23
     bc6:	19 f0       	breq	.+6      	; 0xbce <move_window+0x1e>
     bc8:	0e 94 a6 05 	call	0xb4c	; 0xb4c <move_window.part.6>
     bcc:	01 c0       	rjmp	.+2      	; 0xbd0 <move_window+0x20>
     bce:	80 e0       	ldi	r24, 0x00	; 0
     bd0:	1f 91       	pop	r17
     bd2:	0f 91       	pop	r16
     bd4:	08 95       	ret

00000bd6 <check_fs.part.7>:
     bd6:	ef 92       	push	r14
     bd8:	ff 92       	push	r15
     bda:	0f 93       	push	r16
     bdc:	1f 93       	push	r17
     bde:	cf 93       	push	r28
     be0:	df 93       	push	r29
     be2:	ec 01       	movw	r28, r24
     be4:	fc 01       	movw	r30, r24
     be6:	ef 5c       	subi	r30, 0xCF	; 207
     be8:	fd 4f       	sbci	r31, 0xFD	; 253
     bea:	e0 80       	ld	r14, Z
     bec:	f1 80       	ldd	r15, Z+1	; 0x01
     bee:	9b a9       	ldd	r25, Y+51	; 0x33
     bf0:	9b 3e       	cpi	r25, 0xEB	; 235
     bf2:	21 f0       	breq	.+8      	; 0xbfc <check_fs.part.7+0x26>
     bf4:	98 5e       	subi	r25, 0xE8	; 232
     bf6:	92 30       	cpi	r25, 0x02	; 2
     bf8:	08 f0       	brcs	.+2      	; 0xbfc <check_fs.part.7+0x26>
     bfa:	52 c0       	rjmp	.+164    	; 0xca0 <check_fs.part.7+0xca>
     bfc:	25 e5       	ldi	r18, 0x55	; 85
     bfe:	e2 16       	cp	r14, r18
     c00:	2a ea       	ldi	r18, 0xAA	; 170
     c02:	f2 06       	cpc	r15, r18
     c04:	61 f4       	brne	.+24     	; 0xc1e <check_fs.part.7+0x48>
     c06:	48 e0       	ldi	r20, 0x08	; 8
     c08:	50 e0       	ldi	r21, 0x00	; 0
     c0a:	63 e4       	ldi	r22, 0x43	; 67
     c0c:	71 e0       	ldi	r23, 0x01	; 1
     c0e:	ce 01       	movw	r24, r28
     c10:	8b 57       	subi	r24, 0x7B	; 123
     c12:	9f 4f       	sbci	r25, 0xFF	; 255
     c14:	0e 94 62 29 	call	0x52c4	; 0x52c4 <memcmp>
     c18:	89 2b       	or	r24, r25
     c1a:	09 f4       	brne	.+2      	; 0xc1e <check_fs.part.7+0x48>
     c1c:	49 c0       	rjmp	.+146    	; 0xcb0 <check_fs.part.7+0xda>
     c1e:	8e ad       	ldd	r24, Y+62	; 0x3e
     c20:	9f ad       	ldd	r25, Y+63	; 0x3f
     c22:	8c 01       	movw	r16, r24
     c24:	01 50       	subi	r16, 0x01	; 1
     c26:	11 09       	sbc	r17, r1
     c28:	08 23       	and	r16, r24
     c2a:	19 23       	and	r17, r25
     c2c:	01 15       	cp	r16, r1
     c2e:	11 05       	cpc	r17, r1
     c30:	b9 f5       	brne	.+110    	; 0xca0 <check_fs.part.7+0xca>
     c32:	81 15       	cp	r24, r1
     c34:	92 40       	sbci	r25, 0x02	; 2
     c36:	a1 f5       	brne	.+104    	; 0xca0 <check_fs.part.7+0xca>
     c38:	fe 01       	movw	r30, r28
     c3a:	e0 5c       	subi	r30, 0xC0	; 192
     c3c:	ff 4f       	sbci	r31, 0xFF	; 255
     c3e:	80 81       	ld	r24, Z
     c40:	88 23       	and	r24, r24
     c42:	71 f1       	breq	.+92     	; 0xca0 <check_fs.part.7+0xca>
     c44:	90 e0       	ldi	r25, 0x00	; 0
     c46:	9c 01       	movw	r18, r24
     c48:	21 50       	subi	r18, 0x01	; 1
     c4a:	31 09       	sbc	r19, r1
     c4c:	82 23       	and	r24, r18
     c4e:	93 23       	and	r25, r19
     c50:	89 2b       	or	r24, r25
     c52:	31 f5       	brne	.+76     	; 0xca0 <check_fs.part.7+0xca>
     c54:	31 96       	adiw	r30, 0x01	; 1
     c56:	80 81       	ld	r24, Z
     c58:	91 81       	ldd	r25, Z+1	; 0x01
     c5a:	89 2b       	or	r24, r25
     c5c:	09 f1       	breq	.+66     	; 0xca0 <check_fs.part.7+0xca>
     c5e:	32 96       	adiw	r30, 0x02	; 2
     c60:	80 81       	ld	r24, Z
     c62:	90 e0       	ldi	r25, 0x00	; 0
     c64:	01 97       	sbiw	r24, 0x01	; 1
     c66:	02 97       	sbiw	r24, 0x02	; 2
     c68:	d8 f4       	brcc	.+54     	; 0xca0 <check_fs.part.7+0xca>
     c6a:	31 96       	adiw	r30, 0x01	; 1
     c6c:	80 81       	ld	r24, Z
     c6e:	91 81       	ldd	r25, Z+1	; 0x01
     c70:	89 2b       	or	r24, r25
     c72:	b1 f0       	breq	.+44     	; 0xca0 <check_fs.part.7+0xca>
     c74:	32 96       	adiw	r30, 0x02	; 2
     c76:	80 81       	ld	r24, Z
     c78:	91 81       	ldd	r25, Z+1	; 0x01
     c7a:	80 38       	cpi	r24, 0x80	; 128
     c7c:	91 05       	cpc	r25, r1
     c7e:	50 f4       	brcc	.+20     	; 0xc94 <check_fs.part.7+0xbe>
     c80:	ce 01       	movw	r24, r28
     c82:	8d 5a       	subi	r24, 0xAD	; 173
     c84:	9f 4f       	sbci	r25, 0xFF	; 255
     c86:	0e 94 28 04 	call	0x850	; 0x850 <ld_dword>
     c8a:	61 15       	cp	r22, r1
     c8c:	71 05       	cpc	r23, r1
     c8e:	81 40       	sbci	r24, 0x01	; 1
     c90:	91 05       	cpc	r25, r1
     c92:	30 f0       	brcs	.+12     	; 0xca0 <check_fs.part.7+0xca>
     c94:	c7 5b       	subi	r28, 0xB7	; 183
     c96:	df 4f       	sbci	r29, 0xFF	; 255
     c98:	88 81       	ld	r24, Y
     c9a:	99 81       	ldd	r25, Y+1	; 0x01
     c9c:	89 2b       	or	r24, r25
     c9e:	69 f4       	brne	.+26     	; 0xcba <check_fs.part.7+0xe4>
     ca0:	85 e5       	ldi	r24, 0x55	; 85
     ca2:	e8 16       	cp	r14, r24
     ca4:	8a ea       	ldi	r24, 0xAA	; 170
     ca6:	f8 06       	cpc	r15, r24
     ca8:	31 f0       	breq	.+12     	; 0xcb6 <check_fs.part.7+0xe0>
     caa:	03 e0       	ldi	r16, 0x03	; 3
     cac:	10 e0       	ldi	r17, 0x00	; 0
     cae:	05 c0       	rjmp	.+10     	; 0xcba <check_fs.part.7+0xe4>
     cb0:	00 e0       	ldi	r16, 0x00	; 0
     cb2:	10 e0       	ldi	r17, 0x00	; 0
     cb4:	02 c0       	rjmp	.+4      	; 0xcba <check_fs.part.7+0xe4>
     cb6:	02 e0       	ldi	r16, 0x02	; 2
     cb8:	10 e0       	ldi	r17, 0x00	; 0
     cba:	c8 01       	movw	r24, r16
     cbc:	cd b7       	in	r28, 0x3d	; 61
     cbe:	de b7       	in	r29, 0x3e	; 62
     cc0:	e6 e0       	ldi	r30, 0x06	; 6
     cc2:	0c 94 08 29 	jmp	0x5210	; 0x5210 <__epilogue_restores__+0x18>

00000cc6 <put_fat>:
     cc6:	a4 e0       	ldi	r26, 0x04	; 4
     cc8:	b0 e0       	ldi	r27, 0x00	; 0
     cca:	e9 e6       	ldi	r30, 0x69	; 105
     ccc:	f6 e0       	ldi	r31, 0x06	; 6
     cce:	0c 94 e0 28 	jmp	0x51c0	; 0x51c0 <__prologue_saves__>
     cd2:	42 30       	cpi	r20, 0x02	; 2
     cd4:	51 05       	cpc	r21, r1
     cd6:	61 05       	cpc	r22, r1
     cd8:	71 05       	cpc	r23, r1
     cda:	08 f4       	brcc	.+2      	; 0xcde <put_fat+0x18>
     cdc:	e7 c0       	rjmp	.+462    	; 0xeac <put_fat+0x1e6>
     cde:	fc 01       	movw	r30, r24
     ce0:	c7 88       	ldd	r12, Z+23	; 0x17
     ce2:	d0 8c       	ldd	r13, Z+24	; 0x18
     ce4:	e1 8c       	ldd	r14, Z+25	; 0x19
     ce6:	f2 8c       	ldd	r15, Z+26	; 0x1a
     ce8:	4c 15       	cp	r20, r12
     cea:	5d 05       	cpc	r21, r13
     cec:	6e 05       	cpc	r22, r14
     cee:	7f 05       	cpc	r23, r15
     cf0:	08 f0       	brcs	.+2      	; 0xcf4 <put_fat+0x2e>
     cf2:	dc c0       	rjmp	.+440    	; 0xeac <put_fat+0x1e6>
     cf4:	28 01       	movw	r4, r16
     cf6:	39 01       	movw	r6, r18
     cf8:	6a 01       	movw	r12, r20
     cfa:	7b 01       	movw	r14, r22
     cfc:	9c 83       	std	Y+4, r25	; 0x04
     cfe:	8b 83       	std	Y+3, r24	; 0x03
     d00:	80 81       	ld	r24, Z
     d02:	82 30       	cpi	r24, 0x02	; 2
     d04:	09 f4       	brne	.+2      	; 0xd08 <put_fat+0x42>
     d06:	72 c0       	rjmp	.+228    	; 0xdec <put_fat+0x126>
     d08:	83 30       	cpi	r24, 0x03	; 3
     d0a:	09 f4       	brne	.+2      	; 0xd0e <put_fat+0x48>
     d0c:	91 c0       	rjmp	.+290    	; 0xe30 <put_fat+0x16a>
     d0e:	81 30       	cpi	r24, 0x01	; 1
     d10:	09 f0       	breq	.+2      	; 0xd14 <put_fat+0x4e>
     d12:	cc c0       	rjmp	.+408    	; 0xeac <put_fat+0x1e6>
     d14:	5a 01       	movw	r10, r20
     d16:	b6 94       	lsr	r11
     d18:	a7 94       	ror	r10
     d1a:	a4 0e       	add	r10, r20
     d1c:	b5 1e       	adc	r11, r21
     d1e:	c5 01       	movw	r24, r10
     d20:	89 2f       	mov	r24, r25
     d22:	99 27       	eor	r25, r25
     d24:	86 95       	lsr	r24
     d26:	43 a1       	ldd	r20, Z+35	; 0x23
     d28:	54 a1       	ldd	r21, Z+36	; 0x24
     d2a:	65 a1       	ldd	r22, Z+37	; 0x25
     d2c:	76 a1       	ldd	r23, Z+38	; 0x26
     d2e:	48 0f       	add	r20, r24
     d30:	59 1f       	adc	r21, r25
     d32:	61 1d       	adc	r22, r1
     d34:	71 1d       	adc	r23, r1
     d36:	cf 01       	movw	r24, r30
     d38:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <move_window>
     d3c:	18 2f       	mov	r17, r24
     d3e:	81 11       	cpse	r24, r1
     d40:	b6 c0       	rjmp	.+364    	; 0xeae <put_fat+0x1e8>
     d42:	2b 81       	ldd	r18, Y+3	; 0x03
     d44:	3c 81       	ldd	r19, Y+4	; 0x04
     d46:	2d 5c       	subi	r18, 0xCD	; 205
     d48:	3f 4f       	sbci	r19, 0xFF	; 255
     d4a:	3a 83       	std	Y+2, r19	; 0x02
     d4c:	29 83       	std	Y+1, r18	; 0x01
     d4e:	15 01       	movw	r2, r10
     d50:	3f ef       	ldi	r19, 0xFF	; 255
     d52:	23 1a       	sub	r2, r19
     d54:	33 0a       	sbc	r3, r19
     d56:	81 e0       	ldi	r24, 0x01	; 1
     d58:	b8 22       	and	r11, r24
     d5a:	e9 81       	ldd	r30, Y+1	; 0x01
     d5c:	fa 81       	ldd	r31, Y+2	; 0x02
     d5e:	ea 0d       	add	r30, r10
     d60:	fb 1d       	adc	r31, r11
     d62:	46 01       	movw	r8, r12
     d64:	57 01       	movw	r10, r14
     d66:	91 e0       	ldi	r25, 0x01	; 1
     d68:	89 22       	and	r8, r25
     d6a:	99 24       	eor	r9, r9
     d6c:	aa 24       	eor	r10, r10
     d6e:	bb 24       	eor	r11, r11
     d70:	c0 fe       	sbrs	r12, 0
     d72:	09 c0       	rjmp	.+18     	; 0xd86 <put_fat+0xc0>
     d74:	80 81       	ld	r24, Z
     d76:	28 2f       	mov	r18, r24
     d78:	2f 70       	andi	r18, 0x0F	; 15
     d7a:	30 e1       	ldi	r19, 0x10	; 16
     d7c:	43 9e       	mul	r4, r19
     d7e:	c0 01       	movw	r24, r0
     d80:	11 24       	eor	r1, r1
     d82:	82 2b       	or	r24, r18
     d84:	01 c0       	rjmp	.+2      	; 0xd88 <put_fat+0xc2>
     d86:	84 2d       	mov	r24, r4
     d88:	80 83       	st	Z, r24
     d8a:	81 e0       	ldi	r24, 0x01	; 1
     d8c:	eb 81       	ldd	r30, Y+3	; 0x03
     d8e:	fc 81       	ldd	r31, Y+4	; 0x04
     d90:	83 83       	std	Z+3, r24	; 0x03
     d92:	43 a1       	ldd	r20, Z+35	; 0x23
     d94:	54 a1       	ldd	r21, Z+36	; 0x24
     d96:	65 a1       	ldd	r22, Z+37	; 0x25
     d98:	76 a1       	ldd	r23, Z+38	; 0x26
     d9a:	c1 01       	movw	r24, r2
     d9c:	89 2f       	mov	r24, r25
     d9e:	99 27       	eor	r25, r25
     da0:	86 95       	lsr	r24
     da2:	48 0f       	add	r20, r24
     da4:	59 1f       	adc	r21, r25
     da6:	61 1d       	adc	r22, r1
     da8:	71 1d       	adc	r23, r1
     daa:	cf 01       	movw	r24, r30
     dac:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <move_window>
     db0:	18 2f       	mov	r17, r24
     db2:	81 11       	cpse	r24, r1
     db4:	7c c0       	rjmp	.+248    	; 0xeae <put_fat+0x1e8>
     db6:	f1 e0       	ldi	r31, 0x01	; 1
     db8:	3f 22       	and	r3, r31
     dba:	e9 81       	ldd	r30, Y+1	; 0x01
     dbc:	fa 81       	ldd	r31, Y+2	; 0x02
     dbe:	e2 0d       	add	r30, r2
     dc0:	f3 1d       	adc	r31, r3
     dc2:	81 14       	cp	r8, r1
     dc4:	91 04       	cpc	r9, r1
     dc6:	a1 04       	cpc	r10, r1
     dc8:	b1 04       	cpc	r11, r1
     dca:	41 f0       	breq	.+16     	; 0xddc <put_fat+0x116>
     dcc:	54 e0       	ldi	r21, 0x04	; 4
     dce:	76 94       	lsr	r7
     dd0:	67 94       	ror	r6
     dd2:	57 94       	ror	r5
     dd4:	47 94       	ror	r4
     dd6:	5a 95       	dec	r21
     dd8:	d1 f7       	brne	.-12     	; 0xdce <put_fat+0x108>
     dda:	06 c0       	rjmp	.+12     	; 0xde8 <put_fat+0x122>
     ddc:	00 81       	ld	r16, Z
     dde:	00 7f       	andi	r16, 0xF0	; 240
     de0:	85 2d       	mov	r24, r5
     de2:	8f 70       	andi	r24, 0x0F	; 15
     de4:	40 2e       	mov	r4, r16
     de6:	48 2a       	or	r4, r24
     de8:	40 82       	st	Z, r4
     dea:	5b c0       	rjmp	.+182    	; 0xea2 <put_fat+0x1dc>
     dec:	77 27       	eor	r23, r23
     dee:	6f 2d       	mov	r22, r15
     df0:	5e 2d       	mov	r21, r14
     df2:	4d 2d       	mov	r20, r13
     df4:	eb 81       	ldd	r30, Y+3	; 0x03
     df6:	fc 81       	ldd	r31, Y+4	; 0x04
     df8:	83 a1       	ldd	r24, Z+35	; 0x23
     dfa:	94 a1       	ldd	r25, Z+36	; 0x24
     dfc:	a5 a1       	ldd	r26, Z+37	; 0x25
     dfe:	b6 a1       	ldd	r27, Z+38	; 0x26
     e00:	48 0f       	add	r20, r24
     e02:	59 1f       	adc	r21, r25
     e04:	6a 1f       	adc	r22, r26
     e06:	7b 1f       	adc	r23, r27
     e08:	cf 01       	movw	r24, r30
     e0a:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <move_window>
     e0e:	18 2f       	mov	r17, r24
     e10:	81 11       	cpse	r24, r1
     e12:	4d c0       	rjmp	.+154    	; 0xeae <put_fat+0x1e8>
     e14:	eb 81       	ldd	r30, Y+3	; 0x03
     e16:	fc 81       	ldd	r31, Y+4	; 0x04
     e18:	f3 96       	adiw	r30, 0x33	; 51
     e1a:	cc 0c       	add	r12, r12
     e1c:	dd 1c       	adc	r13, r13
     e1e:	e8 94       	clt
     e20:	c0 f8       	bld	r12, 0
     e22:	21 e0       	ldi	r18, 0x01	; 1
     e24:	d2 22       	and	r13, r18
     e26:	ec 0d       	add	r30, r12
     e28:	fd 1d       	adc	r31, r13
     e2a:	40 82       	st	Z, r4
     e2c:	51 82       	std	Z+1, r5	; 0x01
     e2e:	39 c0       	rjmp	.+114    	; 0xea2 <put_fat+0x1dc>
     e30:	eb 81       	ldd	r30, Y+3	; 0x03
     e32:	fc 81       	ldd	r31, Y+4	; 0x04
     e34:	83 a1       	ldd	r24, Z+35	; 0x23
     e36:	94 a1       	ldd	r25, Z+36	; 0x24
     e38:	a5 a1       	ldd	r26, Z+37	; 0x25
     e3a:	b6 a1       	ldd	r27, Z+38	; 0x26
     e3c:	27 e0       	ldi	r18, 0x07	; 7
     e3e:	76 95       	lsr	r23
     e40:	67 95       	ror	r22
     e42:	57 95       	ror	r21
     e44:	47 95       	ror	r20
     e46:	2a 95       	dec	r18
     e48:	d1 f7       	brne	.-12     	; 0xe3e <put_fat+0x178>
     e4a:	48 0f       	add	r20, r24
     e4c:	59 1f       	adc	r21, r25
     e4e:	6a 1f       	adc	r22, r26
     e50:	7b 1f       	adc	r23, r27
     e52:	cf 01       	movw	r24, r30
     e54:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <move_window>
     e58:	18 2f       	mov	r17, r24
     e5a:	81 11       	cpse	r24, r1
     e5c:	28 c0       	rjmp	.+80     	; 0xeae <put_fat+0x1e8>
     e5e:	4b 81       	ldd	r20, Y+3	; 0x03
     e60:	5c 81       	ldd	r21, Y+4	; 0x04
     e62:	4d 5c       	subi	r20, 0xCD	; 205
     e64:	5f 4f       	sbci	r21, 0xFF	; 255
     e66:	cc 0c       	add	r12, r12
     e68:	dd 1c       	adc	r13, r13
     e6a:	cc 0c       	add	r12, r12
     e6c:	dd 1c       	adc	r13, r13
     e6e:	fc ef       	ldi	r31, 0xFC	; 252
     e70:	cf 22       	and	r12, r31
     e72:	f1 e0       	ldi	r31, 0x01	; 1
     e74:	df 22       	and	r13, r31
     e76:	c4 0e       	add	r12, r20
     e78:	d5 1e       	adc	r13, r21
     e7a:	c6 01       	movw	r24, r12
     e7c:	0e 94 28 04 	call	0x850	; 0x850 <ld_dword>
     e80:	2f e0       	ldi	r18, 0x0F	; 15
     e82:	72 22       	and	r7, r18
     e84:	dc 01       	movw	r26, r24
     e86:	cb 01       	movw	r24, r22
     e88:	88 27       	eor	r24, r24
     e8a:	99 27       	eor	r25, r25
     e8c:	aa 27       	eor	r26, r26
     e8e:	b0 7f       	andi	r27, 0xF0	; 240
     e90:	b3 01       	movw	r22, r6
     e92:	a2 01       	movw	r20, r4
     e94:	48 2b       	or	r20, r24
     e96:	59 2b       	or	r21, r25
     e98:	6a 2b       	or	r22, r26
     e9a:	7b 2b       	or	r23, r27
     e9c:	c6 01       	movw	r24, r12
     e9e:	0e 94 3d 04 	call	0x87a	; 0x87a <st_dword>
     ea2:	81 e0       	ldi	r24, 0x01	; 1
     ea4:	eb 81       	ldd	r30, Y+3	; 0x03
     ea6:	fc 81       	ldd	r31, Y+4	; 0x04
     ea8:	83 83       	std	Z+3, r24	; 0x03
     eaa:	01 c0       	rjmp	.+2      	; 0xeae <put_fat+0x1e8>
     eac:	12 e0       	ldi	r17, 0x02	; 2
     eae:	81 2f       	mov	r24, r17
     eb0:	24 96       	adiw	r28, 0x04	; 4
     eb2:	e2 e1       	ldi	r30, 0x12	; 18
     eb4:	0c 94 fc 28 	jmp	0x51f8	; 0x51f8 <__epilogue_restores__>

00000eb8 <get_fat.isra.9>:
     eb8:	a0 e0       	ldi	r26, 0x00	; 0
     eba:	b0 e0       	ldi	r27, 0x00	; 0
     ebc:	e2 e6       	ldi	r30, 0x62	; 98
     ebe:	f7 e0       	ldi	r31, 0x07	; 7
     ec0:	0c 94 e8 28 	jmp	0x51d0	; 0x51d0 <__prologue_saves__+0x10>
     ec4:	42 30       	cpi	r20, 0x02	; 2
     ec6:	51 05       	cpc	r21, r1
     ec8:	61 05       	cpc	r22, r1
     eca:	71 05       	cpc	r23, r1
     ecc:	08 f4       	brcc	.+2      	; 0xed0 <get_fat.isra.9+0x18>
     ece:	a1 c0       	rjmp	.+322    	; 0x1012 <get_fat.isra.9+0x15a>
     ed0:	fc 01       	movw	r30, r24
     ed2:	07 89       	ldd	r16, Z+23	; 0x17
     ed4:	10 8d       	ldd	r17, Z+24	; 0x18
     ed6:	21 8d       	ldd	r18, Z+25	; 0x19
     ed8:	32 8d       	ldd	r19, Z+26	; 0x1a
     eda:	40 17       	cp	r20, r16
     edc:	51 07       	cpc	r21, r17
     ede:	62 07       	cpc	r22, r18
     ee0:	73 07       	cpc	r23, r19
     ee2:	08 f0       	brcs	.+2      	; 0xee6 <get_fat.isra.9+0x2e>
     ee4:	96 c0       	rjmp	.+300    	; 0x1012 <get_fat.isra.9+0x15a>
     ee6:	6a 01       	movw	r12, r20
     ee8:	7b 01       	movw	r14, r22
     eea:	8c 01       	movw	r16, r24
     eec:	80 81       	ld	r24, Z
     eee:	82 30       	cpi	r24, 0x02	; 2
     ef0:	09 f4       	brne	.+2      	; 0xef4 <get_fat.isra.9+0x3c>
     ef2:	4d c0       	rjmp	.+154    	; 0xf8e <get_fat.isra.9+0xd6>
     ef4:	83 30       	cpi	r24, 0x03	; 3
     ef6:	09 f4       	brne	.+2      	; 0xefa <get_fat.isra.9+0x42>
     ef8:	69 c0       	rjmp	.+210    	; 0xfcc <get_fat.isra.9+0x114>
     efa:	81 30       	cpi	r24, 0x01	; 1
     efc:	09 f0       	breq	.+2      	; 0xf00 <get_fat.isra.9+0x48>
     efe:	89 c0       	rjmp	.+274    	; 0x1012 <get_fat.isra.9+0x15a>
     f00:	ea 01       	movw	r28, r20
     f02:	d6 95       	lsr	r29
     f04:	c7 95       	ror	r28
     f06:	cc 0d       	add	r28, r12
     f08:	dd 1d       	adc	r29, r13
     f0a:	ce 01       	movw	r24, r28
     f0c:	89 2f       	mov	r24, r25
     f0e:	99 27       	eor	r25, r25
     f10:	86 95       	lsr	r24
     f12:	43 a1       	ldd	r20, Z+35	; 0x23
     f14:	54 a1       	ldd	r21, Z+36	; 0x24
     f16:	65 a1       	ldd	r22, Z+37	; 0x25
     f18:	76 a1       	ldd	r23, Z+38	; 0x26
     f1a:	48 0f       	add	r20, r24
     f1c:	59 1f       	adc	r21, r25
     f1e:	61 1d       	adc	r22, r1
     f20:	71 1d       	adc	r23, r1
     f22:	cf 01       	movw	r24, r30
     f24:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <move_window>
     f28:	88 23       	and	r24, r24
     f2a:	21 f0       	breq	.+8      	; 0xf34 <get_fat.isra.9+0x7c>
     f2c:	6f ef       	ldi	r22, 0xFF	; 255
     f2e:	7f ef       	ldi	r23, 0xFF	; 255
     f30:	cb 01       	movw	r24, r22
     f32:	73 c0       	rjmp	.+230    	; 0x101a <get_fat.isra.9+0x162>
     f34:	5e 01       	movw	r10, r28
     f36:	ff ef       	ldi	r31, 0xFF	; 255
     f38:	af 1a       	sub	r10, r31
     f3a:	bf 0a       	sbc	r11, r31
     f3c:	d1 70       	andi	r29, 0x01	; 1
     f3e:	c0 0f       	add	r28, r16
     f40:	d1 1f       	adc	r29, r17
     f42:	cb a9       	ldd	r28, Y+51	; 0x33
     f44:	c5 01       	movw	r24, r10
     f46:	89 2f       	mov	r24, r25
     f48:	99 27       	eor	r25, r25
     f4a:	86 95       	lsr	r24
     f4c:	f8 01       	movw	r30, r16
     f4e:	43 a1       	ldd	r20, Z+35	; 0x23
     f50:	54 a1       	ldd	r21, Z+36	; 0x24
     f52:	65 a1       	ldd	r22, Z+37	; 0x25
     f54:	76 a1       	ldd	r23, Z+38	; 0x26
     f56:	48 0f       	add	r20, r24
     f58:	59 1f       	adc	r21, r25
     f5a:	61 1d       	adc	r22, r1
     f5c:	71 1d       	adc	r23, r1
     f5e:	c8 01       	movw	r24, r16
     f60:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <move_window>
     f64:	81 11       	cpse	r24, r1
     f66:	e2 cf       	rjmp	.-60     	; 0xf2c <get_fat.isra.9+0x74>
     f68:	f1 e0       	ldi	r31, 0x01	; 1
     f6a:	bf 22       	and	r11, r31
     f6c:	f8 01       	movw	r30, r16
     f6e:	ea 0d       	add	r30, r10
     f70:	fb 1d       	adc	r31, r11
     f72:	83 a9       	ldd	r24, Z+51	; 0x33
     f74:	6c 2f       	mov	r22, r28
     f76:	70 e0       	ldi	r23, 0x00	; 0
     f78:	78 2b       	or	r23, r24
     f7a:	c0 fe       	sbrs	r12, 0
     f7c:	06 c0       	rjmp	.+12     	; 0xf8a <get_fat.isra.9+0xd2>
     f7e:	54 e0       	ldi	r21, 0x04	; 4
     f80:	76 95       	lsr	r23
     f82:	67 95       	ror	r22
     f84:	5a 95       	dec	r21
     f86:	e1 f7       	brne	.-8      	; 0xf80 <get_fat.isra.9+0xc8>
     f88:	1e c0       	rjmp	.+60     	; 0xfc6 <get_fat.isra.9+0x10e>
     f8a:	7f 70       	andi	r23, 0x0F	; 15
     f8c:	1c c0       	rjmp	.+56     	; 0xfc6 <get_fat.isra.9+0x10e>
     f8e:	77 27       	eor	r23, r23
     f90:	6f 2d       	mov	r22, r15
     f92:	5e 2d       	mov	r21, r14
     f94:	4d 2d       	mov	r20, r13
     f96:	83 a1       	ldd	r24, Z+35	; 0x23
     f98:	94 a1       	ldd	r25, Z+36	; 0x24
     f9a:	a5 a1       	ldd	r26, Z+37	; 0x25
     f9c:	b6 a1       	ldd	r27, Z+38	; 0x26
     f9e:	48 0f       	add	r20, r24
     fa0:	59 1f       	adc	r21, r25
     fa2:	6a 1f       	adc	r22, r26
     fa4:	7b 1f       	adc	r23, r27
     fa6:	cf 01       	movw	r24, r30
     fa8:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <move_window>
     fac:	81 11       	cpse	r24, r1
     fae:	be cf       	rjmp	.-132    	; 0xf2c <get_fat.isra.9+0x74>
     fb0:	cc 0c       	add	r12, r12
     fb2:	dd 1c       	adc	r13, r13
     fb4:	e8 94       	clt
     fb6:	c0 f8       	bld	r12, 0
     fb8:	f1 e0       	ldi	r31, 0x01	; 1
     fba:	df 22       	and	r13, r31
     fbc:	f8 01       	movw	r30, r16
     fbe:	ec 0d       	add	r30, r12
     fc0:	fd 1d       	adc	r31, r13
     fc2:	63 a9       	ldd	r22, Z+51	; 0x33
     fc4:	74 a9       	ldd	r23, Z+52	; 0x34
     fc6:	80 e0       	ldi	r24, 0x00	; 0
     fc8:	90 e0       	ldi	r25, 0x00	; 0
     fca:	27 c0       	rjmp	.+78     	; 0x101a <get_fat.isra.9+0x162>
     fcc:	83 a1       	ldd	r24, Z+35	; 0x23
     fce:	94 a1       	ldd	r25, Z+36	; 0x24
     fd0:	a5 a1       	ldd	r26, Z+37	; 0x25
     fd2:	b6 a1       	ldd	r27, Z+38	; 0x26
     fd4:	27 e0       	ldi	r18, 0x07	; 7
     fd6:	76 95       	lsr	r23
     fd8:	67 95       	ror	r22
     fda:	57 95       	ror	r21
     fdc:	47 95       	ror	r20
     fde:	2a 95       	dec	r18
     fe0:	d1 f7       	brne	.-12     	; 0xfd6 <get_fat.isra.9+0x11e>
     fe2:	48 0f       	add	r20, r24
     fe4:	59 1f       	adc	r21, r25
     fe6:	6a 1f       	adc	r22, r26
     fe8:	7b 1f       	adc	r23, r27
     fea:	cf 01       	movw	r24, r30
     fec:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <move_window>
     ff0:	81 11       	cpse	r24, r1
     ff2:	9c cf       	rjmp	.-200    	; 0xf2c <get_fat.isra.9+0x74>
     ff4:	0d 5c       	subi	r16, 0xCD	; 205
     ff6:	1f 4f       	sbci	r17, 0xFF	; 255
     ff8:	cc 0c       	add	r12, r12
     ffa:	dd 1c       	adc	r13, r13
     ffc:	cc 0c       	add	r12, r12
     ffe:	dd 1c       	adc	r13, r13
    1000:	c6 01       	movw	r24, r12
    1002:	8c 7f       	andi	r24, 0xFC	; 252
    1004:	91 70       	andi	r25, 0x01	; 1
    1006:	80 0f       	add	r24, r16
    1008:	91 1f       	adc	r25, r17
    100a:	0e 94 28 04 	call	0x850	; 0x850 <ld_dword>
    100e:	9f 70       	andi	r25, 0x0F	; 15
    1010:	04 c0       	rjmp	.+8      	; 0x101a <get_fat.isra.9+0x162>
    1012:	61 e0       	ldi	r22, 0x01	; 1
    1014:	70 e0       	ldi	r23, 0x00	; 0
    1016:	80 e0       	ldi	r24, 0x00	; 0
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	cd b7       	in	r28, 0x3d	; 61
    101c:	de b7       	in	r29, 0x3e	; 62
    101e:	ea e0       	ldi	r30, 0x0A	; 10
    1020:	0c 94 04 29 	jmp	0x5208	; 0x5208 <__epilogue_restores__+0x10>

00001024 <dir_sdi>:
    1024:	a0 e0       	ldi	r26, 0x00	; 0
    1026:	b0 e0       	ldi	r27, 0x00	; 0
    1028:	e8 e1       	ldi	r30, 0x18	; 24
    102a:	f8 e0       	ldi	r31, 0x08	; 8
    102c:	0c 94 e2 28 	jmp	0x51c4	; 0x51c4 <__prologue_saves__+0x4>
    1030:	ec 01       	movw	r28, r24
    1032:	6a 01       	movw	r12, r20
    1034:	7b 01       	movw	r14, r22
    1036:	41 15       	cp	r20, r1
    1038:	51 05       	cpc	r21, r1
    103a:	80 e2       	ldi	r24, 0x20	; 32
    103c:	68 07       	cpc	r22, r24
    103e:	71 05       	cpc	r23, r1
    1040:	10 f0       	brcs	.+4      	; 0x1046 <dir_sdi+0x22>
    1042:	82 e0       	ldi	r24, 0x02	; 2
    1044:	a9 c0       	rjmp	.+338    	; 0x1198 <dir_sdi+0x174>
    1046:	db 01       	movw	r26, r22
    1048:	ca 01       	movw	r24, r20
    104a:	8f 71       	andi	r24, 0x1F	; 31
    104c:	99 27       	eor	r25, r25
    104e:	aa 27       	eor	r26, r26
    1050:	bb 27       	eor	r27, r27
    1052:	89 2b       	or	r24, r25
    1054:	8a 2b       	or	r24, r26
    1056:	8b 2b       	or	r24, r27
    1058:	a1 f7       	brne	.-24     	; 0x1042 <dir_sdi+0x1e>
    105a:	08 81       	ld	r16, Y
    105c:	19 81       	ldd	r17, Y+1	; 0x01
    105e:	4e 87       	std	Y+14, r20	; 0x0e
    1060:	5f 87       	std	Y+15, r21	; 0x0f
    1062:	68 8b       	std	Y+16, r22	; 0x10
    1064:	79 8b       	std	Y+17, r23	; 0x11
    1066:	8e 80       	ldd	r8, Y+6	; 0x06
    1068:	9f 80       	ldd	r9, Y+7	; 0x07
    106a:	a8 84       	ldd	r10, Y+8	; 0x08
    106c:	b9 84       	ldd	r11, Y+9	; 0x09
    106e:	81 14       	cp	r8, r1
    1070:	91 04       	cpc	r9, r1
    1072:	a1 04       	cpc	r10, r1
    1074:	b1 04       	cpc	r11, r1
    1076:	51 f5       	brne	.+84     	; 0x10cc <dir_sdi+0xa8>
    1078:	f8 01       	movw	r30, r16
    107a:	80 81       	ld	r24, Z
    107c:	83 30       	cpi	r24, 0x03	; 3
    107e:	40 f0       	brcs	.+16     	; 0x1090 <dir_sdi+0x6c>
    1080:	87 a1       	ldd	r24, Z+39	; 0x27
    1082:	90 a5       	ldd	r25, Z+40	; 0x28
    1084:	a1 a5       	ldd	r26, Z+41	; 0x29
    1086:	b2 a5       	ldd	r27, Z+42	; 0x2a
    1088:	00 97       	sbiw	r24, 0x00	; 0
    108a:	a1 05       	cpc	r26, r1
    108c:	b1 05       	cpc	r27, r1
    108e:	e1 f4       	brne	.+56     	; 0x10c8 <dir_sdi+0xa4>
    1090:	f8 01       	movw	r30, r16
    1092:	87 81       	ldd	r24, Z+7	; 0x07
    1094:	90 85       	ldd	r25, Z+8	; 0x08
    1096:	a0 e0       	ldi	r26, 0x00	; 0
    1098:	b0 e0       	ldi	r27, 0x00	; 0
    109a:	b7 01       	movw	r22, r14
    109c:	a6 01       	movw	r20, r12
    109e:	25 e0       	ldi	r18, 0x05	; 5
    10a0:	76 95       	lsr	r23
    10a2:	67 95       	ror	r22
    10a4:	57 95       	ror	r21
    10a6:	47 95       	ror	r20
    10a8:	2a 95       	dec	r18
    10aa:	d1 f7       	brne	.-12     	; 0x10a0 <dir_sdi+0x7c>
    10ac:	48 17       	cp	r20, r24
    10ae:	59 07       	cpc	r21, r25
    10b0:	6a 07       	cpc	r22, r26
    10b2:	7b 07       	cpc	r23, r27
    10b4:	30 f6       	brcc	.-116    	; 0x1042 <dir_sdi+0x1e>
    10b6:	87 a1       	ldd	r24, Z+39	; 0x27
    10b8:	90 a5       	ldd	r25, Z+40	; 0x28
    10ba:	a1 a5       	ldd	r26, Z+41	; 0x29
    10bc:	b2 a5       	ldd	r27, Z+42	; 0x2a
    10be:	8e 8b       	std	Y+22, r24	; 0x16
    10c0:	9f 8b       	std	Y+23, r25	; 0x17
    10c2:	a8 8f       	std	Y+24, r26	; 0x18
    10c4:	b9 8f       	std	Y+25, r27	; 0x19
    10c6:	3f c0       	rjmp	.+126    	; 0x1146 <dir_sdi+0x122>
    10c8:	4c 01       	movw	r8, r24
    10ca:	5d 01       	movw	r10, r26
    10cc:	f8 01       	movw	r30, r16
    10ce:	41 84       	ldd	r4, Z+9	; 0x09
    10d0:	52 84       	ldd	r5, Z+10	; 0x0a
    10d2:	61 2c       	mov	r6, r1
    10d4:	71 2c       	mov	r7, r1
    10d6:	39 e0       	ldi	r19, 0x09	; 9
    10d8:	44 0c       	add	r4, r4
    10da:	55 1c       	adc	r5, r5
    10dc:	66 1c       	adc	r6, r6
    10de:	77 1c       	adc	r7, r7
    10e0:	3a 95       	dec	r19
    10e2:	d1 f7       	brne	.-12     	; 0x10d8 <dir_sdi+0xb4>
    10e4:	b5 01       	movw	r22, r10
    10e6:	a4 01       	movw	r20, r8
    10e8:	c4 14       	cp	r12, r4
    10ea:	d5 04       	cpc	r13, r5
    10ec:	e6 04       	cpc	r14, r6
    10ee:	f7 04       	cpc	r15, r7
    10f0:	18 f1       	brcs	.+70     	; 0x1138 <dir_sdi+0x114>
    10f2:	88 81       	ld	r24, Y
    10f4:	99 81       	ldd	r25, Y+1	; 0x01
    10f6:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <get_fat.isra.9>
    10fa:	4b 01       	movw	r8, r22
    10fc:	5c 01       	movw	r10, r24
    10fe:	6f 3f       	cpi	r22, 0xFF	; 255
    1100:	7f 4f       	sbci	r23, 0xFF	; 255
    1102:	8f 4f       	sbci	r24, 0xFF	; 255
    1104:	9f 4f       	sbci	r25, 0xFF	; 255
    1106:	09 f4       	brne	.+2      	; 0x110a <dir_sdi+0xe6>
    1108:	46 c0       	rjmp	.+140    	; 0x1196 <dir_sdi+0x172>
    110a:	82 e0       	ldi	r24, 0x02	; 2
    110c:	88 16       	cp	r8, r24
    110e:	91 04       	cpc	r9, r1
    1110:	a1 04       	cpc	r10, r1
    1112:	b1 04       	cpc	r11, r1
    1114:	08 f4       	brcc	.+2      	; 0x1118 <dir_sdi+0xf4>
    1116:	95 cf       	rjmp	.-214    	; 0x1042 <dir_sdi+0x1e>
    1118:	f8 01       	movw	r30, r16
    111a:	87 89       	ldd	r24, Z+23	; 0x17
    111c:	90 8d       	ldd	r25, Z+24	; 0x18
    111e:	a1 8d       	ldd	r26, Z+25	; 0x19
    1120:	b2 8d       	ldd	r27, Z+26	; 0x1a
    1122:	88 16       	cp	r8, r24
    1124:	99 06       	cpc	r9, r25
    1126:	aa 06       	cpc	r10, r26
    1128:	bb 06       	cpc	r11, r27
    112a:	08 f0       	brcs	.+2      	; 0x112e <dir_sdi+0x10a>
    112c:	8a cf       	rjmp	.-236    	; 0x1042 <dir_sdi+0x1e>
    112e:	c4 18       	sub	r12, r4
    1130:	d5 08       	sbc	r13, r5
    1132:	e6 08       	sbc	r14, r6
    1134:	f7 08       	sbc	r15, r7
    1136:	d6 cf       	rjmp	.-84     	; 0x10e4 <dir_sdi+0xc0>
    1138:	c8 01       	movw	r24, r16
    113a:	0e 94 43 04 	call	0x886	; 0x886 <clst2sect>
    113e:	6e 8b       	std	Y+22, r22	; 0x16
    1140:	7f 8b       	std	Y+23, r23	; 0x17
    1142:	88 8f       	std	Y+24, r24	; 0x18
    1144:	99 8f       	std	Y+25, r25	; 0x19
    1146:	8a 8a       	std	Y+18, r8	; 0x12
    1148:	9b 8a       	std	Y+19, r9	; 0x13
    114a:	ac 8a       	std	Y+20, r10	; 0x14
    114c:	bd 8a       	std	Y+21, r11	; 0x15
    114e:	8e 89       	ldd	r24, Y+22	; 0x16
    1150:	9f 89       	ldd	r25, Y+23	; 0x17
    1152:	a8 8d       	ldd	r26, Y+24	; 0x18
    1154:	b9 8d       	ldd	r27, Y+25	; 0x19
    1156:	00 97       	sbiw	r24, 0x00	; 0
    1158:	a1 05       	cpc	r26, r1
    115a:	b1 05       	cpc	r27, r1
    115c:	09 f4       	brne	.+2      	; 0x1160 <dir_sdi+0x13c>
    115e:	71 cf       	rjmp	.-286    	; 0x1042 <dir_sdi+0x1e>
    1160:	b7 01       	movw	r22, r14
    1162:	a6 01       	movw	r20, r12
    1164:	29 e0       	ldi	r18, 0x09	; 9
    1166:	76 95       	lsr	r23
    1168:	67 95       	ror	r22
    116a:	57 95       	ror	r21
    116c:	47 95       	ror	r20
    116e:	2a 95       	dec	r18
    1170:	d1 f7       	brne	.-12     	; 0x1166 <dir_sdi+0x142>
    1172:	84 0f       	add	r24, r20
    1174:	95 1f       	adc	r25, r21
    1176:	a6 1f       	adc	r26, r22
    1178:	b7 1f       	adc	r27, r23
    117a:	8e 8b       	std	Y+22, r24	; 0x16
    117c:	9f 8b       	std	Y+23, r25	; 0x17
    117e:	a8 8f       	std	Y+24, r26	; 0x18
    1180:	b9 8f       	std	Y+25, r27	; 0x19
    1182:	0d 5c       	subi	r16, 0xCD	; 205
    1184:	1f 4f       	sbci	r17, 0xFF	; 255
    1186:	f1 e0       	ldi	r31, 0x01	; 1
    1188:	df 22       	and	r13, r31
    118a:	c0 0e       	add	r12, r16
    118c:	d1 1e       	adc	r13, r17
    118e:	db 8e       	std	Y+27, r13	; 0x1b
    1190:	ca 8e       	std	Y+26, r12	; 0x1a
    1192:	80 e0       	ldi	r24, 0x00	; 0
    1194:	01 c0       	rjmp	.+2      	; 0x1198 <dir_sdi+0x174>
    1196:	81 e0       	ldi	r24, 0x01	; 1
    1198:	cd b7       	in	r28, 0x3d	; 61
    119a:	de b7       	in	r29, 0x3e	; 62
    119c:	e0 e1       	ldi	r30, 0x10	; 16
    119e:	0c 94 fe 28 	jmp	0x51fc	; 0x51fc <__epilogue_restores__+0x4>

000011a2 <create_chain>:
    11a2:	a0 e0       	ldi	r26, 0x00	; 0
    11a4:	b0 e0       	ldi	r27, 0x00	; 0
    11a6:	e7 ed       	ldi	r30, 0xD7	; 215
    11a8:	f8 e0       	ldi	r31, 0x08	; 8
    11aa:	0c 94 e2 28 	jmp	0x51c4	; 0x51c4 <__prologue_saves__+0x4>
    11ae:	8c 01       	movw	r16, r24
    11b0:	2a 01       	movw	r4, r20
    11b2:	3b 01       	movw	r6, r22
    11b4:	fc 01       	movw	r30, r24
    11b6:	c0 81       	ld	r28, Z
    11b8:	d1 81       	ldd	r29, Z+1	; 0x01
    11ba:	41 15       	cp	r20, r1
    11bc:	51 05       	cpc	r21, r1
    11be:	61 05       	cpc	r22, r1
    11c0:	71 05       	cpc	r23, r1
    11c2:	99 f4       	brne	.+38     	; 0x11ea <create_chain+0x48>
    11c4:	8b 84       	ldd	r8, Y+11	; 0x0b
    11c6:	9c 84       	ldd	r9, Y+12	; 0x0c
    11c8:	ad 84       	ldd	r10, Y+13	; 0x0d
    11ca:	be 84       	ldd	r11, Y+14	; 0x0e
    11cc:	81 14       	cp	r8, r1
    11ce:	91 04       	cpc	r9, r1
    11d0:	a1 04       	cpc	r10, r1
    11d2:	b1 04       	cpc	r11, r1
    11d4:	59 f1       	breq	.+86     	; 0x122c <create_chain+0x8a>
    11d6:	8f 89       	ldd	r24, Y+23	; 0x17
    11d8:	98 8d       	ldd	r25, Y+24	; 0x18
    11da:	a9 8d       	ldd	r26, Y+25	; 0x19
    11dc:	ba 8d       	ldd	r27, Y+26	; 0x1a
    11de:	88 16       	cp	r8, r24
    11e0:	99 06       	cpc	r9, r25
    11e2:	aa 06       	cpc	r10, r26
    11e4:	bb 06       	cpc	r11, r27
    11e6:	30 f1       	brcs	.+76     	; 0x1234 <create_chain+0x92>
    11e8:	21 c0       	rjmp	.+66     	; 0x122c <create_chain+0x8a>
    11ea:	ce 01       	movw	r24, r28
    11ec:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <get_fat.isra.9>
    11f0:	62 30       	cpi	r22, 0x02	; 2
    11f2:	71 05       	cpc	r23, r1
    11f4:	81 05       	cpc	r24, r1
    11f6:	91 05       	cpc	r25, r1
    11f8:	08 f4       	brcc	.+2      	; 0x11fc <create_chain+0x5a>
    11fa:	ee c0       	rjmp	.+476    	; 0x13d8 <create_chain+0x236>
    11fc:	6f 3f       	cpi	r22, 0xFF	; 255
    11fe:	ff ef       	ldi	r31, 0xFF	; 255
    1200:	7f 07       	cpc	r23, r31
    1202:	8f 07       	cpc	r24, r31
    1204:	9f 07       	cpc	r25, r31
    1206:	29 f4       	brne	.+10     	; 0x1212 <create_chain+0x70>
    1208:	4f ef       	ldi	r20, 0xFF	; 255
    120a:	3f ef       	ldi	r19, 0xFF	; 255
    120c:	2f ef       	ldi	r18, 0xFF	; 255
    120e:	9f ef       	ldi	r25, 0xFF	; 255
    1210:	eb c0       	rjmp	.+470    	; 0x13e8 <create_chain+0x246>
    1212:	cf 88       	ldd	r12, Y+23	; 0x17
    1214:	d8 8c       	ldd	r13, Y+24	; 0x18
    1216:	e9 8c       	ldd	r14, Y+25	; 0x19
    1218:	fa 8c       	ldd	r15, Y+26	; 0x1a
    121a:	6c 15       	cp	r22, r12
    121c:	7d 05       	cpc	r23, r13
    121e:	8e 05       	cpc	r24, r14
    1220:	9f 05       	cpc	r25, r15
    1222:	08 f4       	brcc	.+2      	; 0x1226 <create_chain+0x84>
    1224:	de c0       	rjmp	.+444    	; 0x13e2 <create_chain+0x240>
    1226:	53 01       	movw	r10, r6
    1228:	42 01       	movw	r8, r4
    122a:	04 c0       	rjmp	.+8      	; 0x1234 <create_chain+0x92>
    122c:	81 2c       	mov	r8, r1
    122e:	91 2c       	mov	r9, r1
    1230:	54 01       	movw	r10, r8
    1232:	83 94       	inc	r8
    1234:	8f 85       	ldd	r24, Y+15	; 0x0f
    1236:	98 89       	ldd	r25, Y+16	; 0x10
    1238:	a9 89       	ldd	r26, Y+17	; 0x11
    123a:	ba 89       	ldd	r27, Y+18	; 0x12
    123c:	89 2b       	or	r24, r25
    123e:	8a 2b       	or	r24, r26
    1240:	8b 2b       	or	r24, r27
    1242:	11 f4       	brne	.+4      	; 0x1248 <create_chain+0xa6>
    1244:	40 e0       	ldi	r20, 0x00	; 0
    1246:	c9 c0       	rjmp	.+402    	; 0x13da <create_chain+0x238>
    1248:	84 14       	cp	r8, r4
    124a:	95 04       	cpc	r9, r5
    124c:	a6 04       	cpc	r10, r6
    124e:	b7 04       	cpc	r11, r7
    1250:	09 f0       	breq	.+2      	; 0x1254 <create_chain+0xb2>
    1252:	47 c0       	rjmp	.+142    	; 0x12e2 <create_chain+0x140>
    1254:	75 01       	movw	r14, r10
    1256:	64 01       	movw	r12, r8
    1258:	2f ef       	ldi	r18, 0xFF	; 255
    125a:	c2 1a       	sub	r12, r18
    125c:	d2 0a       	sbc	r13, r18
    125e:	e2 0a       	sbc	r14, r18
    1260:	f2 0a       	sbc	r15, r18
    1262:	8f 89       	ldd	r24, Y+23	; 0x17
    1264:	98 8d       	ldd	r25, Y+24	; 0x18
    1266:	a9 8d       	ldd	r26, Y+25	; 0x19
    1268:	ba 8d       	ldd	r27, Y+26	; 0x1a
    126a:	c8 16       	cp	r12, r24
    126c:	d9 06       	cpc	r13, r25
    126e:	ea 06       	cpc	r14, r26
    1270:	fb 06       	cpc	r15, r27
    1272:	28 f0       	brcs	.+10     	; 0x127e <create_chain+0xdc>
    1274:	92 e0       	ldi	r25, 0x02	; 2
    1276:	c9 2e       	mov	r12, r25
    1278:	d1 2c       	mov	r13, r1
    127a:	e1 2c       	mov	r14, r1
    127c:	f1 2c       	mov	r15, r1
    127e:	b7 01       	movw	r22, r14
    1280:	a6 01       	movw	r20, r12
    1282:	f8 01       	movw	r30, r16
    1284:	80 81       	ld	r24, Z
    1286:	91 81       	ldd	r25, Z+1	; 0x01
    1288:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <get_fat.isra.9>
    128c:	61 30       	cpi	r22, 0x01	; 1
    128e:	71 05       	cpc	r23, r1
    1290:	81 05       	cpc	r24, r1
    1292:	91 05       	cpc	r25, r1
    1294:	09 f4       	brne	.+2      	; 0x1298 <create_chain+0xf6>
    1296:	a0 c0       	rjmp	.+320    	; 0x13d8 <create_chain+0x236>
    1298:	6f 3f       	cpi	r22, 0xFF	; 255
    129a:	ff ef       	ldi	r31, 0xFF	; 255
    129c:	7f 07       	cpc	r23, r31
    129e:	8f 07       	cpc	r24, r31
    12a0:	9f 07       	cpc	r25, r31
    12a2:	09 f4       	brne	.+2      	; 0x12a6 <create_chain+0x104>
    12a4:	b1 cf       	rjmp	.-158    	; 0x1208 <create_chain+0x66>
    12a6:	67 2b       	or	r22, r23
    12a8:	68 2b       	or	r22, r24
    12aa:	69 2b       	or	r22, r25
    12ac:	a9 f0       	breq	.+42     	; 0x12d8 <create_chain+0x136>
    12ae:	8b 85       	ldd	r24, Y+11	; 0x0b
    12b0:	9c 85       	ldd	r25, Y+12	; 0x0c
    12b2:	ad 85       	ldd	r26, Y+13	; 0x0d
    12b4:	be 85       	ldd	r27, Y+14	; 0x0e
    12b6:	82 30       	cpi	r24, 0x02	; 2
    12b8:	91 05       	cpc	r25, r1
    12ba:	a1 05       	cpc	r26, r1
    12bc:	b1 05       	cpc	r27, r1
    12be:	88 f0       	brcs	.+34     	; 0x12e2 <create_chain+0x140>
    12c0:	4f 89       	ldd	r20, Y+23	; 0x17
    12c2:	58 8d       	ldd	r21, Y+24	; 0x18
    12c4:	69 8d       	ldd	r22, Y+25	; 0x19
    12c6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    12c8:	84 17       	cp	r24, r20
    12ca:	95 07       	cpc	r25, r21
    12cc:	a6 07       	cpc	r26, r22
    12ce:	b7 07       	cpc	r27, r23
    12d0:	40 f4       	brcc	.+16     	; 0x12e2 <create_chain+0x140>
    12d2:	4c 01       	movw	r8, r24
    12d4:	5d 01       	movw	r10, r26
    12d6:	05 c0       	rjmp	.+10     	; 0x12e2 <create_chain+0x140>
    12d8:	c1 14       	cp	r12, r1
    12da:	d1 04       	cpc	r13, r1
    12dc:	e1 04       	cpc	r14, r1
    12de:	f1 04       	cpc	r15, r1
    12e0:	d1 f5       	brne	.+116    	; 0x1356 <create_chain+0x1b4>
    12e2:	75 01       	movw	r14, r10
    12e4:	64 01       	movw	r12, r8
    12e6:	2f ef       	ldi	r18, 0xFF	; 255
    12e8:	c2 1a       	sub	r12, r18
    12ea:	d2 0a       	sbc	r13, r18
    12ec:	e2 0a       	sbc	r14, r18
    12ee:	f2 0a       	sbc	r15, r18
    12f0:	8f 89       	ldd	r24, Y+23	; 0x17
    12f2:	98 8d       	ldd	r25, Y+24	; 0x18
    12f4:	a9 8d       	ldd	r26, Y+25	; 0x19
    12f6:	ba 8d       	ldd	r27, Y+26	; 0x1a
    12f8:	c8 16       	cp	r12, r24
    12fa:	d9 06       	cpc	r13, r25
    12fc:	ea 06       	cpc	r14, r26
    12fe:	fb 06       	cpc	r15, r27
    1300:	60 f0       	brcs	.+24     	; 0x131a <create_chain+0x178>
    1302:	82 e0       	ldi	r24, 0x02	; 2
    1304:	88 16       	cp	r8, r24
    1306:	91 04       	cpc	r9, r1
    1308:	a1 04       	cpc	r10, r1
    130a:	b1 04       	cpc	r11, r1
    130c:	08 f4       	brcc	.+2      	; 0x1310 <create_chain+0x16e>
    130e:	9a cf       	rjmp	.-204    	; 0x1244 <create_chain+0xa2>
    1310:	82 e0       	ldi	r24, 0x02	; 2
    1312:	c8 2e       	mov	r12, r24
    1314:	d1 2c       	mov	r13, r1
    1316:	e1 2c       	mov	r14, r1
    1318:	f1 2c       	mov	r15, r1
    131a:	b7 01       	movw	r22, r14
    131c:	a6 01       	movw	r20, r12
    131e:	f8 01       	movw	r30, r16
    1320:	80 81       	ld	r24, Z
    1322:	91 81       	ldd	r25, Z+1	; 0x01
    1324:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <get_fat.isra.9>
    1328:	61 15       	cp	r22, r1
    132a:	71 05       	cpc	r23, r1
    132c:	81 05       	cpc	r24, r1
    132e:	91 05       	cpc	r25, r1
    1330:	91 f0       	breq	.+36     	; 0x1356 <create_chain+0x1b4>
    1332:	61 30       	cpi	r22, 0x01	; 1
    1334:	71 05       	cpc	r23, r1
    1336:	81 05       	cpc	r24, r1
    1338:	91 05       	cpc	r25, r1
    133a:	09 f4       	brne	.+2      	; 0x133e <create_chain+0x19c>
    133c:	4d c0       	rjmp	.+154    	; 0x13d8 <create_chain+0x236>
    133e:	6f 3f       	cpi	r22, 0xFF	; 255
    1340:	7f 4f       	sbci	r23, 0xFF	; 255
    1342:	8f 4f       	sbci	r24, 0xFF	; 255
    1344:	9f 4f       	sbci	r25, 0xFF	; 255
    1346:	09 f4       	brne	.+2      	; 0x134a <create_chain+0x1a8>
    1348:	5f cf       	rjmp	.-322    	; 0x1208 <create_chain+0x66>
    134a:	c8 14       	cp	r12, r8
    134c:	d9 04       	cpc	r13, r9
    134e:	ea 04       	cpc	r14, r10
    1350:	fb 04       	cpc	r15, r11
    1352:	49 f6       	brne	.-110    	; 0x12e6 <create_chain+0x144>
    1354:	77 cf       	rjmp	.-274    	; 0x1244 <create_chain+0xa2>
    1356:	0f ef       	ldi	r16, 0xFF	; 255
    1358:	1f ef       	ldi	r17, 0xFF	; 255
    135a:	98 01       	movw	r18, r16
    135c:	b7 01       	movw	r22, r14
    135e:	a6 01       	movw	r20, r12
    1360:	ce 01       	movw	r24, r28
    1362:	0e 94 63 06 	call	0xcc6	; 0xcc6 <put_fat>
    1366:	81 11       	cpse	r24, r1
    1368:	34 c0       	rjmp	.+104    	; 0x13d2 <create_chain+0x230>
    136a:	41 14       	cp	r4, r1
    136c:	51 04       	cpc	r5, r1
    136e:	61 04       	cpc	r6, r1
    1370:	71 04       	cpc	r7, r1
    1372:	e9 f4       	brne	.+58     	; 0x13ae <create_chain+0x20c>
    1374:	cb 86       	std	Y+11, r12	; 0x0b
    1376:	dc 86       	std	Y+12, r13	; 0x0c
    1378:	ed 86       	std	Y+13, r14	; 0x0d
    137a:	fe 86       	std	Y+14, r15	; 0x0e
    137c:	8f 85       	ldd	r24, Y+15	; 0x0f
    137e:	98 89       	ldd	r25, Y+16	; 0x10
    1380:	a9 89       	ldd	r26, Y+17	; 0x11
    1382:	ba 89       	ldd	r27, Y+18	; 0x12
    1384:	4f 89       	ldd	r20, Y+23	; 0x17
    1386:	58 8d       	ldd	r21, Y+24	; 0x18
    1388:	69 8d       	ldd	r22, Y+25	; 0x19
    138a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    138c:	42 50       	subi	r20, 0x02	; 2
    138e:	51 09       	sbc	r21, r1
    1390:	61 09       	sbc	r22, r1
    1392:	71 09       	sbc	r23, r1
    1394:	48 17       	cp	r20, r24
    1396:	59 07       	cpc	r21, r25
    1398:	6a 07       	cpc	r22, r26
    139a:	7b 07       	cpc	r23, r27
    139c:	90 f0       	brcs	.+36     	; 0x13c2 <create_chain+0x220>
    139e:	01 97       	sbiw	r24, 0x01	; 1
    13a0:	a1 09       	sbc	r26, r1
    13a2:	b1 09       	sbc	r27, r1
    13a4:	8f 87       	std	Y+15, r24	; 0x0f
    13a6:	98 8b       	std	Y+16, r25	; 0x10
    13a8:	a9 8b       	std	Y+17, r26	; 0x11
    13aa:	ba 8b       	std	Y+18, r27	; 0x12
    13ac:	0a c0       	rjmp	.+20     	; 0x13c2 <create_chain+0x220>
    13ae:	97 01       	movw	r18, r14
    13b0:	86 01       	movw	r16, r12
    13b2:	b3 01       	movw	r22, r6
    13b4:	a2 01       	movw	r20, r4
    13b6:	ce 01       	movw	r24, r28
    13b8:	0e 94 63 06 	call	0xcc6	; 0xcc6 <put_fat>
    13bc:	88 23       	and	r24, r24
    13be:	d1 f2       	breq	.-76     	; 0x1374 <create_chain+0x1d2>
    13c0:	08 c0       	rjmp	.+16     	; 0x13d2 <create_chain+0x230>
    13c2:	8c 81       	ldd	r24, Y+4	; 0x04
    13c4:	81 60       	ori	r24, 0x01	; 1
    13c6:	8c 83       	std	Y+4, r24	; 0x04
    13c8:	4c 2d       	mov	r20, r12
    13ca:	3d 2d       	mov	r19, r13
    13cc:	2e 2d       	mov	r18, r14
    13ce:	9f 2d       	mov	r25, r15
    13d0:	0b c0       	rjmp	.+22     	; 0x13e8 <create_chain+0x246>
    13d2:	81 30       	cpi	r24, 0x01	; 1
    13d4:	09 f4       	brne	.+2      	; 0x13d8 <create_chain+0x236>
    13d6:	18 cf       	rjmp	.-464    	; 0x1208 <create_chain+0x66>
    13d8:	41 e0       	ldi	r20, 0x01	; 1
    13da:	30 e0       	ldi	r19, 0x00	; 0
    13dc:	20 e0       	ldi	r18, 0x00	; 0
    13de:	90 e0       	ldi	r25, 0x00	; 0
    13e0:	03 c0       	rjmp	.+6      	; 0x13e8 <create_chain+0x246>
    13e2:	46 2f       	mov	r20, r22
    13e4:	37 2f       	mov	r19, r23
    13e6:	28 2f       	mov	r18, r24
    13e8:	64 2f       	mov	r22, r20
    13ea:	73 2f       	mov	r23, r19
    13ec:	82 2f       	mov	r24, r18
    13ee:	cd b7       	in	r28, 0x3d	; 61
    13f0:	de b7       	in	r29, 0x3e	; 62
    13f2:	e0 e1       	ldi	r30, 0x10	; 16
    13f4:	0c 94 fe 28 	jmp	0x51fc	; 0x51fc <__epilogue_restores__+0x4>

000013f8 <remove_chain>:
    13f8:	4f 92       	push	r4
    13fa:	5f 92       	push	r5
    13fc:	6f 92       	push	r6
    13fe:	7f 92       	push	r7
    1400:	8f 92       	push	r8
    1402:	9f 92       	push	r9
    1404:	af 92       	push	r10
    1406:	bf 92       	push	r11
    1408:	ef 92       	push	r14
    140a:	ff 92       	push	r15
    140c:	0f 93       	push	r16
    140e:	1f 93       	push	r17
    1410:	cf 93       	push	r28
    1412:	df 93       	push	r29
    1414:	7c 01       	movw	r14, r24
    1416:	4a 01       	movw	r8, r20
    1418:	5b 01       	movw	r10, r22
    141a:	b9 01       	movw	r22, r18
    141c:	a8 01       	movw	r20, r16
    141e:	22 e0       	ldi	r18, 0x02	; 2
    1420:	82 16       	cp	r8, r18
    1422:	91 04       	cpc	r9, r1
    1424:	a1 04       	cpc	r10, r1
    1426:	b1 04       	cpc	r11, r1
    1428:	10 f4       	brcc	.+4      	; 0x142e <remove_chain+0x36>
    142a:	82 e0       	ldi	r24, 0x02	; 2
    142c:	65 c0       	rjmp	.+202    	; 0x14f8 <remove_chain+0x100>
    142e:	fc 01       	movw	r30, r24
    1430:	c0 81       	ld	r28, Z
    1432:	d1 81       	ldd	r29, Z+1	; 0x01
    1434:	8f 89       	ldd	r24, Y+23	; 0x17
    1436:	98 8d       	ldd	r25, Y+24	; 0x18
    1438:	a9 8d       	ldd	r26, Y+25	; 0x19
    143a:	ba 8d       	ldd	r27, Y+26	; 0x1a
    143c:	88 16       	cp	r8, r24
    143e:	99 06       	cpc	r9, r25
    1440:	aa 06       	cpc	r10, r26
    1442:	bb 06       	cpc	r11, r27
    1444:	90 f7       	brcc	.-28     	; 0x142a <remove_chain+0x32>
    1446:	41 15       	cp	r20, r1
    1448:	51 05       	cpc	r21, r1
    144a:	61 05       	cpc	r22, r1
    144c:	71 05       	cpc	r23, r1
    144e:	41 f0       	breq	.+16     	; 0x1460 <remove_chain+0x68>
    1450:	0f ef       	ldi	r16, 0xFF	; 255
    1452:	1f ef       	ldi	r17, 0xFF	; 255
    1454:	98 01       	movw	r18, r16
    1456:	ce 01       	movw	r24, r28
    1458:	0e 94 63 06 	call	0xcc6	; 0xcc6 <put_fat>
    145c:	81 11       	cpse	r24, r1
    145e:	4c c0       	rjmp	.+152    	; 0x14f8 <remove_chain+0x100>
    1460:	b5 01       	movw	r22, r10
    1462:	a4 01       	movw	r20, r8
    1464:	f7 01       	movw	r30, r14
    1466:	80 81       	ld	r24, Z
    1468:	91 81       	ldd	r25, Z+1	; 0x01
    146a:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <get_fat.isra.9>
    146e:	2b 01       	movw	r4, r22
    1470:	3c 01       	movw	r6, r24
    1472:	61 15       	cp	r22, r1
    1474:	71 05       	cpc	r23, r1
    1476:	81 05       	cpc	r24, r1
    1478:	91 05       	cpc	r25, r1
    147a:	11 f4       	brne	.+4      	; 0x1480 <remove_chain+0x88>
    147c:	80 e0       	ldi	r24, 0x00	; 0
    147e:	3c c0       	rjmp	.+120    	; 0x14f8 <remove_chain+0x100>
    1480:	61 30       	cpi	r22, 0x01	; 1
    1482:	71 05       	cpc	r23, r1
    1484:	81 05       	cpc	r24, r1
    1486:	91 05       	cpc	r25, r1
    1488:	81 f2       	breq	.-96     	; 0x142a <remove_chain+0x32>
    148a:	6f 3f       	cpi	r22, 0xFF	; 255
    148c:	7f 4f       	sbci	r23, 0xFF	; 255
    148e:	8f 4f       	sbci	r24, 0xFF	; 255
    1490:	9f 4f       	sbci	r25, 0xFF	; 255
    1492:	89 f1       	breq	.+98     	; 0x14f6 <remove_chain+0xfe>
    1494:	00 e0       	ldi	r16, 0x00	; 0
    1496:	10 e0       	ldi	r17, 0x00	; 0
    1498:	98 01       	movw	r18, r16
    149a:	b5 01       	movw	r22, r10
    149c:	a4 01       	movw	r20, r8
    149e:	ce 01       	movw	r24, r28
    14a0:	0e 94 63 06 	call	0xcc6	; 0xcc6 <put_fat>
    14a4:	81 11       	cpse	r24, r1
    14a6:	28 c0       	rjmp	.+80     	; 0x14f8 <remove_chain+0x100>
    14a8:	8f 85       	ldd	r24, Y+15	; 0x0f
    14aa:	98 89       	ldd	r25, Y+16	; 0x10
    14ac:	a9 89       	ldd	r26, Y+17	; 0x11
    14ae:	ba 89       	ldd	r27, Y+18	; 0x12
    14b0:	4f 89       	ldd	r20, Y+23	; 0x17
    14b2:	58 8d       	ldd	r21, Y+24	; 0x18
    14b4:	69 8d       	ldd	r22, Y+25	; 0x19
    14b6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    14b8:	4a 01       	movw	r8, r20
    14ba:	5b 01       	movw	r10, r22
    14bc:	e2 e0       	ldi	r30, 0x02	; 2
    14be:	8e 1a       	sub	r8, r30
    14c0:	91 08       	sbc	r9, r1
    14c2:	a1 08       	sbc	r10, r1
    14c4:	b1 08       	sbc	r11, r1
    14c6:	88 15       	cp	r24, r8
    14c8:	99 05       	cpc	r25, r9
    14ca:	aa 05       	cpc	r26, r10
    14cc:	bb 05       	cpc	r27, r11
    14ce:	50 f4       	brcc	.+20     	; 0x14e4 <remove_chain+0xec>
    14d0:	01 96       	adiw	r24, 0x01	; 1
    14d2:	a1 1d       	adc	r26, r1
    14d4:	b1 1d       	adc	r27, r1
    14d6:	8f 87       	std	Y+15, r24	; 0x0f
    14d8:	98 8b       	std	Y+16, r25	; 0x10
    14da:	a9 8b       	std	Y+17, r26	; 0x11
    14dc:	ba 8b       	std	Y+18, r27	; 0x12
    14de:	8c 81       	ldd	r24, Y+4	; 0x04
    14e0:	81 60       	ori	r24, 0x01	; 1
    14e2:	8c 83       	std	Y+4, r24	; 0x04
    14e4:	53 01       	movw	r10, r6
    14e6:	42 01       	movw	r8, r4
    14e8:	44 16       	cp	r4, r20
    14ea:	55 06       	cpc	r5, r21
    14ec:	66 06       	cpc	r6, r22
    14ee:	77 06       	cpc	r7, r23
    14f0:	08 f4       	brcc	.+2      	; 0x14f4 <remove_chain+0xfc>
    14f2:	b6 cf       	rjmp	.-148    	; 0x1460 <remove_chain+0x68>
    14f4:	c3 cf       	rjmp	.-122    	; 0x147c <remove_chain+0x84>
    14f6:	81 e0       	ldi	r24, 0x01	; 1
    14f8:	df 91       	pop	r29
    14fa:	cf 91       	pop	r28
    14fc:	1f 91       	pop	r17
    14fe:	0f 91       	pop	r16
    1500:	ff 90       	pop	r15
    1502:	ef 90       	pop	r14
    1504:	bf 90       	pop	r11
    1506:	af 90       	pop	r10
    1508:	9f 90       	pop	r9
    150a:	8f 90       	pop	r8
    150c:	7f 90       	pop	r7
    150e:	6f 90       	pop	r6
    1510:	5f 90       	pop	r5
    1512:	4f 90       	pop	r4
    1514:	08 95       	ret

00001516 <dir_clear>:
    1516:	a0 e0       	ldi	r26, 0x00	; 0
    1518:	b0 e0       	ldi	r27, 0x00	; 0
    151a:	e1 e9       	ldi	r30, 0x91	; 145
    151c:	fa e0       	ldi	r31, 0x0A	; 10
    151e:	0c 94 e6 28 	jmp	0x51cc	; 0x51cc <__prologue_saves__+0xc>
    1522:	ec 01       	movw	r28, r24
    1524:	6a 01       	movw	r12, r20
    1526:	7b 01       	movw	r14, r22
    1528:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <sync_window>
    152c:	81 11       	cpse	r24, r1
    152e:	38 c0       	rjmp	.+112    	; 0x15a0 <dir_clear+0x8a>
    1530:	b7 01       	movw	r22, r14
    1532:	a6 01       	movw	r20, r12
    1534:	ce 01       	movw	r24, r28
    1536:	0e 94 43 04 	call	0x886	; 0x886 <clst2sect>
    153a:	4b 01       	movw	r8, r22
    153c:	5c 01       	movw	r10, r24
    153e:	6f a7       	std	Y+47, r22	; 0x2f
    1540:	78 ab       	std	Y+48, r23	; 0x30
    1542:	89 ab       	std	Y+49, r24	; 0x31
    1544:	9a ab       	std	Y+50, r25	; 0x32
    1546:	6e 01       	movw	r12, r28
    1548:	23 e3       	ldi	r18, 0x33	; 51
    154a:	c2 0e       	add	r12, r18
    154c:	d1 1c       	adc	r13, r1
    154e:	80 e0       	ldi	r24, 0x00	; 0
    1550:	92 e0       	ldi	r25, 0x02	; 2
    1552:	f6 01       	movw	r30, r12
    1554:	9c 01       	movw	r18, r24
    1556:	11 92       	st	Z+, r1
    1558:	21 50       	subi	r18, 0x01	; 1
    155a:	30 40       	sbci	r19, 0x00	; 0
    155c:	e1 f7       	brne	.-8      	; 0x1556 <dir_clear+0x40>
    155e:	e1 2c       	mov	r14, r1
    1560:	f1 2c       	mov	r15, r1
    1562:	89 85       	ldd	r24, Y+9	; 0x09
    1564:	9a 85       	ldd	r25, Y+10	; 0x0a
    1566:	e8 16       	cp	r14, r24
    1568:	f9 06       	cpc	r15, r25
    156a:	40 f0       	brcs	.+16     	; 0x157c <dir_clear+0x66>
    156c:	81 e0       	ldi	r24, 0x01	; 1
    156e:	29 85       	ldd	r18, Y+9	; 0x09
    1570:	3a 85       	ldd	r19, Y+10	; 0x0a
    1572:	2e 15       	cp	r18, r14
    1574:	3f 05       	cpc	r19, r15
    1576:	a9 f4       	brne	.+42     	; 0x15a2 <dir_clear+0x8c>
    1578:	80 e0       	ldi	r24, 0x00	; 0
    157a:	13 c0       	rjmp	.+38     	; 0x15a2 <dir_clear+0x8c>
    157c:	01 e0       	ldi	r16, 0x01	; 1
    157e:	10 e0       	ldi	r17, 0x00	; 0
    1580:	a5 01       	movw	r20, r10
    1582:	94 01       	movw	r18, r8
    1584:	2e 0d       	add	r18, r14
    1586:	3f 1d       	adc	r19, r15
    1588:	41 1d       	adc	r20, r1
    158a:	51 1d       	adc	r21, r1
    158c:	b6 01       	movw	r22, r12
    158e:	89 81       	ldd	r24, Y+1	; 0x01
    1590:	0e 94 e7 1d 	call	0x3bce	; 0x3bce <disk_write>
    1594:	81 11       	cpse	r24, r1
    1596:	ea cf       	rjmp	.-44     	; 0x156c <dir_clear+0x56>
    1598:	3f ef       	ldi	r19, 0xFF	; 255
    159a:	e3 1a       	sub	r14, r19
    159c:	f3 0a       	sbc	r15, r19
    159e:	e1 cf       	rjmp	.-62     	; 0x1562 <dir_clear+0x4c>
    15a0:	81 e0       	ldi	r24, 0x01	; 1
    15a2:	cd b7       	in	r28, 0x3d	; 61
    15a4:	de b7       	in	r29, 0x3e	; 62
    15a6:	ec e0       	ldi	r30, 0x0C	; 12
    15a8:	0c 94 02 29 	jmp	0x5204	; 0x5204 <__epilogue_restores__+0xc>

000015ac <dir_next>:
    15ac:	4f 92       	push	r4
    15ae:	5f 92       	push	r5
    15b0:	6f 92       	push	r6
    15b2:	7f 92       	push	r7
    15b4:	af 92       	push	r10
    15b6:	bf 92       	push	r11
    15b8:	cf 92       	push	r12
    15ba:	df 92       	push	r13
    15bc:	ef 92       	push	r14
    15be:	ff 92       	push	r15
    15c0:	0f 93       	push	r16
    15c2:	1f 93       	push	r17
    15c4:	cf 93       	push	r28
    15c6:	df 93       	push	r29
    15c8:	ec 01       	movw	r28, r24
    15ca:	08 81       	ld	r16, Y
    15cc:	19 81       	ldd	r17, Y+1	; 0x01
    15ce:	ce 84       	ldd	r12, Y+14	; 0x0e
    15d0:	df 84       	ldd	r13, Y+15	; 0x0f
    15d2:	e8 88       	ldd	r14, Y+16	; 0x10
    15d4:	f9 88       	ldd	r15, Y+17	; 0x11
    15d6:	80 e2       	ldi	r24, 0x20	; 32
    15d8:	c8 0e       	add	r12, r24
    15da:	d1 1c       	adc	r13, r1
    15dc:	e1 1c       	adc	r14, r1
    15de:	f1 1c       	adc	r15, r1
    15e0:	c1 14       	cp	r12, r1
    15e2:	d1 04       	cpc	r13, r1
    15e4:	e0 e2       	ldi	r30, 0x20	; 32
    15e6:	ee 06       	cpc	r14, r30
    15e8:	f1 04       	cpc	r15, r1
    15ea:	20 f0       	brcs	.+8      	; 0x15f4 <dir_next+0x48>
    15ec:	1e 8a       	std	Y+22, r1	; 0x16
    15ee:	1f 8a       	std	Y+23, r1	; 0x17
    15f0:	18 8e       	std	Y+24, r1	; 0x18
    15f2:	19 8e       	std	Y+25, r1	; 0x19
    15f4:	8e 89       	ldd	r24, Y+22	; 0x16
    15f6:	9f 89       	ldd	r25, Y+23	; 0x17
    15f8:	a8 8d       	ldd	r26, Y+24	; 0x18
    15fa:	b9 8d       	ldd	r27, Y+25	; 0x19
    15fc:	00 97       	sbiw	r24, 0x00	; 0
    15fe:	a1 05       	cpc	r26, r1
    1600:	b1 05       	cpc	r27, r1
    1602:	09 f4       	brne	.+2      	; 0x1606 <dir_next+0x5a>
    1604:	a6 c0       	rjmp	.+332    	; 0x1752 <dir_next+0x1a6>
    1606:	5b 01       	movw	r10, r22
    1608:	b7 01       	movw	r22, r14
    160a:	a6 01       	movw	r20, r12
    160c:	51 70       	andi	r21, 0x01	; 1
    160e:	66 27       	eor	r22, r22
    1610:	77 27       	eor	r23, r23
    1612:	45 2b       	or	r20, r21
    1614:	46 2b       	or	r20, r22
    1616:	47 2b       	or	r20, r23
    1618:	09 f0       	breq	.+2      	; 0x161c <dir_next+0x70>
    161a:	8d c0       	rjmp	.+282    	; 0x1736 <dir_next+0x18a>
    161c:	01 96       	adiw	r24, 0x01	; 1
    161e:	a1 1d       	adc	r26, r1
    1620:	b1 1d       	adc	r27, r1
    1622:	8e 8b       	std	Y+22, r24	; 0x16
    1624:	9f 8b       	std	Y+23, r25	; 0x17
    1626:	a8 8f       	std	Y+24, r26	; 0x18
    1628:	b9 8f       	std	Y+25, r27	; 0x19
    162a:	4a 89       	ldd	r20, Y+18	; 0x12
    162c:	5b 89       	ldd	r21, Y+19	; 0x13
    162e:	6c 89       	ldd	r22, Y+20	; 0x14
    1630:	7d 89       	ldd	r23, Y+21	; 0x15
    1632:	f8 01       	movw	r30, r16
    1634:	41 15       	cp	r20, r1
    1636:	51 05       	cpc	r21, r1
    1638:	61 05       	cpc	r22, r1
    163a:	71 05       	cpc	r23, r1
    163c:	c1 f4       	brne	.+48     	; 0x166e <dir_next+0xc2>
    163e:	87 81       	ldd	r24, Z+7	; 0x07
    1640:	90 85       	ldd	r25, Z+8	; 0x08
    1642:	a0 e0       	ldi	r26, 0x00	; 0
    1644:	b0 e0       	ldi	r27, 0x00	; 0
    1646:	b7 01       	movw	r22, r14
    1648:	a6 01       	movw	r20, r12
    164a:	35 e0       	ldi	r19, 0x05	; 5
    164c:	76 95       	lsr	r23
    164e:	67 95       	ror	r22
    1650:	57 95       	ror	r21
    1652:	47 95       	ror	r20
    1654:	3a 95       	dec	r19
    1656:	d1 f7       	brne	.-12     	; 0x164c <dir_next+0xa0>
    1658:	48 17       	cp	r20, r24
    165a:	59 07       	cpc	r21, r25
    165c:	6a 07       	cpc	r22, r26
    165e:	7b 07       	cpc	r23, r27
    1660:	08 f4       	brcc	.+2      	; 0x1664 <dir_next+0xb8>
    1662:	69 c0       	rjmp	.+210    	; 0x1736 <dir_next+0x18a>
    1664:	1e 8a       	std	Y+22, r1	; 0x16
    1666:	1f 8a       	std	Y+23, r1	; 0x17
    1668:	18 8e       	std	Y+24, r1	; 0x18
    166a:	19 8e       	std	Y+25, r1	; 0x19
    166c:	72 c0       	rjmp	.+228    	; 0x1752 <dir_next+0x1a6>
    166e:	81 85       	ldd	r24, Z+9	; 0x09
    1670:	92 85       	ldd	r25, Z+10	; 0x0a
    1672:	01 97       	sbiw	r24, 0x01	; 1
    1674:	a0 e0       	ldi	r26, 0x00	; 0
    1676:	b0 e0       	ldi	r27, 0x00	; 0
    1678:	26 01       	movw	r4, r12
    167a:	37 01       	movw	r6, r14
    167c:	29 e0       	ldi	r18, 0x09	; 9
    167e:	76 94       	lsr	r7
    1680:	67 94       	ror	r6
    1682:	57 94       	ror	r5
    1684:	47 94       	ror	r4
    1686:	2a 95       	dec	r18
    1688:	d1 f7       	brne	.-12     	; 0x167e <dir_next+0xd2>
    168a:	84 21       	and	r24, r4
    168c:	95 21       	and	r25, r5
    168e:	a6 21       	and	r26, r6
    1690:	b7 21       	and	r27, r7
    1692:	89 2b       	or	r24, r25
    1694:	8a 2b       	or	r24, r26
    1696:	8b 2b       	or	r24, r27
    1698:	09 f0       	breq	.+2      	; 0x169c <dir_next+0xf0>
    169a:	4d c0       	rjmp	.+154    	; 0x1736 <dir_next+0x18a>
    169c:	c8 01       	movw	r24, r16
    169e:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <get_fat.isra.9>
    16a2:	2b 01       	movw	r4, r22
    16a4:	3c 01       	movw	r6, r24
    16a6:	62 30       	cpi	r22, 0x02	; 2
    16a8:	71 05       	cpc	r23, r1
    16aa:	81 05       	cpc	r24, r1
    16ac:	91 05       	cpc	r25, r1
    16ae:	10 f4       	brcc	.+4      	; 0x16b4 <dir_next+0x108>
    16b0:	82 e0       	ldi	r24, 0x02	; 2
    16b2:	52 c0       	rjmp	.+164    	; 0x1758 <dir_next+0x1ac>
    16b4:	8f ef       	ldi	r24, 0xFF	; 255
    16b6:	48 16       	cp	r4, r24
    16b8:	58 06       	cpc	r5, r24
    16ba:	68 06       	cpc	r6, r24
    16bc:	78 06       	cpc	r7, r24
    16be:	11 f4       	brne	.+4      	; 0x16c4 <dir_next+0x118>
    16c0:	81 e0       	ldi	r24, 0x01	; 1
    16c2:	4a c0       	rjmp	.+148    	; 0x1758 <dir_next+0x1ac>
    16c4:	f8 01       	movw	r30, r16
    16c6:	87 89       	ldd	r24, Z+23	; 0x17
    16c8:	90 8d       	ldd	r25, Z+24	; 0x18
    16ca:	a1 8d       	ldd	r26, Z+25	; 0x19
    16cc:	b2 8d       	ldd	r27, Z+26	; 0x1a
    16ce:	48 16       	cp	r4, r24
    16d0:	59 06       	cpc	r5, r25
    16d2:	6a 06       	cpc	r6, r26
    16d4:	7b 06       	cpc	r7, r27
    16d6:	10 f1       	brcs	.+68     	; 0x171c <dir_next+0x170>
    16d8:	ab 28       	or	r10, r11
    16da:	21 f2       	breq	.-120    	; 0x1664 <dir_next+0xb8>
    16dc:	4a 89       	ldd	r20, Y+18	; 0x12
    16de:	5b 89       	ldd	r21, Y+19	; 0x13
    16e0:	6c 89       	ldd	r22, Y+20	; 0x14
    16e2:	7d 89       	ldd	r23, Y+21	; 0x15
    16e4:	ce 01       	movw	r24, r28
    16e6:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <create_chain>
    16ea:	2b 01       	movw	r4, r22
    16ec:	3c 01       	movw	r6, r24
    16ee:	61 15       	cp	r22, r1
    16f0:	71 05       	cpc	r23, r1
    16f2:	81 05       	cpc	r24, r1
    16f4:	91 05       	cpc	r25, r1
    16f6:	79 f1       	breq	.+94     	; 0x1756 <dir_next+0x1aa>
    16f8:	61 30       	cpi	r22, 0x01	; 1
    16fa:	71 05       	cpc	r23, r1
    16fc:	81 05       	cpc	r24, r1
    16fe:	91 05       	cpc	r25, r1
    1700:	b9 f2       	breq	.-82     	; 0x16b0 <dir_next+0x104>
    1702:	8f ef       	ldi	r24, 0xFF	; 255
    1704:	48 16       	cp	r4, r24
    1706:	58 06       	cpc	r5, r24
    1708:	68 06       	cpc	r6, r24
    170a:	78 06       	cpc	r7, r24
    170c:	c9 f2       	breq	.-78     	; 0x16c0 <dir_next+0x114>
    170e:	b3 01       	movw	r22, r6
    1710:	a2 01       	movw	r20, r4
    1712:	c8 01       	movw	r24, r16
    1714:	0e 94 8b 0a 	call	0x1516	; 0x1516 <dir_clear>
    1718:	81 11       	cpse	r24, r1
    171a:	d2 cf       	rjmp	.-92     	; 0x16c0 <dir_next+0x114>
    171c:	4a 8a       	std	Y+18, r4	; 0x12
    171e:	5b 8a       	std	Y+19, r5	; 0x13
    1720:	6c 8a       	std	Y+20, r6	; 0x14
    1722:	7d 8a       	std	Y+21, r7	; 0x15
    1724:	b3 01       	movw	r22, r6
    1726:	a2 01       	movw	r20, r4
    1728:	c8 01       	movw	r24, r16
    172a:	0e 94 43 04 	call	0x886	; 0x886 <clst2sect>
    172e:	6e 8b       	std	Y+22, r22	; 0x16
    1730:	7f 8b       	std	Y+23, r23	; 0x17
    1732:	88 8f       	std	Y+24, r24	; 0x18
    1734:	99 8f       	std	Y+25, r25	; 0x19
    1736:	ce 86       	std	Y+14, r12	; 0x0e
    1738:	df 86       	std	Y+15, r13	; 0x0f
    173a:	e8 8a       	std	Y+16, r14	; 0x10
    173c:	f9 8a       	std	Y+17, r15	; 0x11
    173e:	0d 5c       	subi	r16, 0xCD	; 205
    1740:	1f 4f       	sbci	r17, 0xFF	; 255
    1742:	e1 e0       	ldi	r30, 0x01	; 1
    1744:	de 22       	and	r13, r30
    1746:	c0 0e       	add	r12, r16
    1748:	d1 1e       	adc	r13, r17
    174a:	db 8e       	std	Y+27, r13	; 0x1b
    174c:	ca 8e       	std	Y+26, r12	; 0x1a
    174e:	80 e0       	ldi	r24, 0x00	; 0
    1750:	03 c0       	rjmp	.+6      	; 0x1758 <dir_next+0x1ac>
    1752:	84 e0       	ldi	r24, 0x04	; 4
    1754:	01 c0       	rjmp	.+2      	; 0x1758 <dir_next+0x1ac>
    1756:	87 e0       	ldi	r24, 0x07	; 7
    1758:	df 91       	pop	r29
    175a:	cf 91       	pop	r28
    175c:	1f 91       	pop	r17
    175e:	0f 91       	pop	r16
    1760:	ff 90       	pop	r15
    1762:	ef 90       	pop	r14
    1764:	df 90       	pop	r13
    1766:	cf 90       	pop	r12
    1768:	bf 90       	pop	r11
    176a:	af 90       	pop	r10
    176c:	7f 90       	pop	r7
    176e:	6f 90       	pop	r6
    1770:	5f 90       	pop	r5
    1772:	4f 90       	pop	r4
    1774:	08 95       	ret

00001776 <follow_path>:
    1776:	a4 e0       	ldi	r26, 0x04	; 4
    1778:	b0 e0       	ldi	r27, 0x00	; 0
    177a:	e1 ec       	ldi	r30, 0xC1	; 193
    177c:	fb e0       	ldi	r31, 0x0B	; 11
    177e:	0c 94 e0 28 	jmp	0x51c0	; 0x51c0 <__prologue_saves__>
    1782:	9c 83       	std	Y+4, r25	; 0x04
    1784:	8b 83       	std	Y+3, r24	; 0x03
    1786:	8b 01       	movw	r16, r22
    1788:	dc 01       	movw	r26, r24
    178a:	ad 90       	ld	r10, X+
    178c:	bc 90       	ld	r11, X
    178e:	fb 01       	movw	r30, r22
    1790:	80 81       	ld	r24, Z
    1792:	8f 32       	cpi	r24, 0x2F	; 47
    1794:	11 f0       	breq	.+4      	; 0x179a <follow_path+0x24>
    1796:	8c 35       	cpi	r24, 0x5C	; 92
    1798:	11 f4       	brne	.+4      	; 0x179e <follow_path+0x28>
    179a:	98 01       	movw	r18, r16
    179c:	0c c0       	rjmp	.+24     	; 0x17b6 <follow_path+0x40>
    179e:	f5 01       	movw	r30, r10
    17a0:	83 89       	ldd	r24, Z+19	; 0x13
    17a2:	94 89       	ldd	r25, Z+20	; 0x14
    17a4:	a5 89       	ldd	r26, Z+21	; 0x15
    17a6:	b6 89       	ldd	r27, Z+22	; 0x16
    17a8:	eb 81       	ldd	r30, Y+3	; 0x03
    17aa:	fc 81       	ldd	r31, Y+4	; 0x04
    17ac:	86 83       	std	Z+6, r24	; 0x06
    17ae:	97 83       	std	Z+7, r25	; 0x07
    17b0:	a0 87       	std	Z+8, r26	; 0x08
    17b2:	b1 87       	std	Z+9, r27	; 0x09
    17b4:	0f c0       	rjmp	.+30     	; 0x17d4 <follow_path+0x5e>
    17b6:	89 01       	movw	r16, r18
    17b8:	d9 01       	movw	r26, r18
    17ba:	8c 91       	ld	r24, X
    17bc:	2f 5f       	subi	r18, 0xFF	; 255
    17be:	3f 4f       	sbci	r19, 0xFF	; 255
    17c0:	8f 32       	cpi	r24, 0x2F	; 47
    17c2:	c9 f3       	breq	.-14     	; 0x17b6 <follow_path+0x40>
    17c4:	8c 35       	cpi	r24, 0x5C	; 92
    17c6:	b9 f3       	breq	.-18     	; 0x17b6 <follow_path+0x40>
    17c8:	eb 81       	ldd	r30, Y+3	; 0x03
    17ca:	fc 81       	ldd	r31, Y+4	; 0x04
    17cc:	16 82       	std	Z+6, r1	; 0x06
    17ce:	17 82       	std	Z+7, r1	; 0x07
    17d0:	10 86       	std	Z+8, r1	; 0x08
    17d2:	11 86       	std	Z+9, r1	; 0x09
    17d4:	d8 01       	movw	r26, r16
    17d6:	8c 91       	ld	r24, X
    17d8:	80 32       	cpi	r24, 0x20	; 32
    17da:	60 f0       	brcs	.+24     	; 0x17f4 <follow_path+0x7e>
    17dc:	cb 80       	ldd	r12, Y+3	; 0x03
    17de:	dc 80       	ldd	r13, Y+4	; 0x04
    17e0:	bc e1       	ldi	r27, 0x1C	; 28
    17e2:	cb 0e       	add	r12, r27
    17e4:	d1 1c       	adc	r13, r1
    17e6:	65 e0       	ldi	r22, 0x05	; 5
    17e8:	26 2e       	mov	r2, r22
    17ea:	f5 01       	movw	r30, r10
    17ec:	f3 96       	adiw	r30, 0x33	; 51
    17ee:	fa 83       	std	Y+2, r31	; 0x02
    17f0:	e9 83       	std	Y+1, r30	; 0x01
    17f2:	5d c0       	rjmp	.+186    	; 0x18ae <follow_path+0x138>
    17f4:	80 e8       	ldi	r24, 0x80	; 128
    17f6:	ab 81       	ldd	r26, Y+3	; 0x03
    17f8:	bc 81       	ldd	r27, Y+4	; 0x04
    17fa:	97 96       	adiw	r26, 0x27	; 39
    17fc:	8c 93       	st	X, r24
    17fe:	97 97       	sbiw	r26, 0x27	; 39
    1800:	40 e0       	ldi	r20, 0x00	; 0
    1802:	50 e0       	ldi	r21, 0x00	; 0
    1804:	ba 01       	movw	r22, r20
    1806:	cd 01       	movw	r24, r26
    1808:	0e 94 12 08 	call	0x1024	; 0x1024 <dir_sdi>
    180c:	98 2e       	mov	r9, r24
    180e:	17 c1       	rjmp	.+558    	; 0x1a3e <follow_path+0x2c8>
    1810:	d8 01       	movw	r26, r16
    1812:	f6 01       	movw	r30, r12
    1814:	20 e0       	ldi	r18, 0x00	; 0
    1816:	30 e0       	ldi	r19, 0x00	; 0
    1818:	2f 5f       	subi	r18, 0xFF	; 255
    181a:	3f 4f       	sbci	r19, 0xFF	; 255
    181c:	8d 91       	ld	r24, X+
    181e:	8e 32       	cpi	r24, 0x2E	; 46
    1820:	09 f4       	brne	.+2      	; 0x1824 <follow_path+0xae>
    1822:	5a c0       	rjmp	.+180    	; 0x18d8 <follow_path+0x162>
    1824:	8f 32       	cpi	r24, 0x2F	; 47
    1826:	09 f0       	breq	.+2      	; 0x182a <follow_path+0xb4>
    1828:	5d c0       	rjmp	.+186    	; 0x18e4 <follow_path+0x16e>
    182a:	02 0f       	add	r16, r18
    182c:	13 1f       	adc	r17, r19
    182e:	81 32       	cpi	r24, 0x21	; 33
    1830:	08 f0       	brcs	.+2      	; 0x1834 <follow_path+0xbe>
    1832:	5f c0       	rjmp	.+190    	; 0x18f2 <follow_path+0x17c>
    1834:	84 e2       	ldi	r24, 0x24	; 36
    1836:	ab 81       	ldd	r26, Y+3	; 0x03
    1838:	bc 81       	ldd	r27, Y+4	; 0x04
    183a:	97 96       	adiw	r26, 0x27	; 39
    183c:	8c 93       	st	X, r24
    183e:	ab 81       	ldd	r26, Y+3	; 0x03
    1840:	bc 81       	ldd	r27, Y+4	; 0x04
    1842:	ed 90       	ld	r14, X+
    1844:	fc 90       	ld	r15, X
    1846:	11 97       	sbiw	r26, 0x01	; 1
    1848:	40 e0       	ldi	r20, 0x00	; 0
    184a:	50 e0       	ldi	r21, 0x00	; 0
    184c:	ba 01       	movw	r22, r20
    184e:	cd 01       	movw	r24, r26
    1850:	0e 94 12 08 	call	0x1024	; 0x1024 <dir_sdi>
    1854:	98 2e       	mov	r9, r24
    1856:	81 11       	cpse	r24, r1
    1858:	0d c0       	rjmp	.+26     	; 0x1874 <follow_path+0xfe>
    185a:	eb 81       	ldd	r30, Y+3	; 0x03
    185c:	fc 81       	ldd	r31, Y+4	; 0x04
    185e:	46 89       	ldd	r20, Z+22	; 0x16
    1860:	57 89       	ldd	r21, Z+23	; 0x17
    1862:	60 8d       	ldd	r22, Z+24	; 0x18
    1864:	71 8d       	ldd	r23, Z+25	; 0x19
    1866:	c7 01       	movw	r24, r14
    1868:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <move_window>
    186c:	98 2e       	mov	r9, r24
    186e:	88 23       	and	r24, r24
    1870:	09 f4       	brne	.+2      	; 0x1874 <follow_path+0xfe>
    1872:	9e c0       	rjmp	.+316    	; 0x19b0 <follow_path+0x23a>
    1874:	eb 81       	ldd	r30, Y+3	; 0x03
    1876:	fc 81       	ldd	r31, Y+4	; 0x04
    1878:	87 a1       	ldd	r24, Z+39	; 0x27
    187a:	91 10       	cpse	r9, r1
    187c:	bc c0       	rjmp	.+376    	; 0x19f6 <follow_path+0x280>
    187e:	82 fd       	sbrc	r24, 2
    1880:	de c0       	rjmp	.+444    	; 0x1a3e <follow_path+0x2c8>
    1882:	eb 81       	ldd	r30, Y+3	; 0x03
    1884:	fc 81       	ldd	r31, Y+4	; 0x04
    1886:	84 81       	ldd	r24, Z+4	; 0x04
    1888:	84 ff       	sbrs	r24, 4
    188a:	c8 c0       	rjmp	.+400    	; 0x1a1c <follow_path+0x2a6>
    188c:	66 85       	ldd	r22, Z+14	; 0x0e
    188e:	77 85       	ldd	r23, Z+15	; 0x0f
    1890:	71 70       	andi	r23, 0x01	; 1
    1892:	89 81       	ldd	r24, Y+1	; 0x01
    1894:	9a 81       	ldd	r25, Y+2	; 0x02
    1896:	68 0f       	add	r22, r24
    1898:	79 1f       	adc	r23, r25
    189a:	d5 01       	movw	r26, r10
    189c:	8c 91       	ld	r24, X
    189e:	0e 94 c1 04 	call	0x982	; 0x982 <ld_clust.isra.2>
    18a2:	eb 81       	ldd	r30, Y+3	; 0x03
    18a4:	fc 81       	ldd	r31, Y+4	; 0x04
    18a6:	66 83       	std	Z+6, r22	; 0x06
    18a8:	77 83       	std	Z+7, r23	; 0x07
    18aa:	80 87       	std	Z+8, r24	; 0x08
    18ac:	91 87       	std	Z+9, r25	; 0x09
    18ae:	4b e0       	ldi	r20, 0x0B	; 11
    18b0:	50 e0       	ldi	r21, 0x00	; 0
    18b2:	60 e2       	ldi	r22, 0x20	; 32
    18b4:	70 e0       	ldi	r23, 0x00	; 0
    18b6:	c6 01       	movw	r24, r12
    18b8:	0e 94 78 29 	call	0x52f0	; 0x52f0 <memset>
    18bc:	f8 01       	movw	r30, r16
    18be:	80 81       	ld	r24, Z
    18c0:	8e 32       	cpi	r24, 0x2E	; 46
    18c2:	09 f4       	brne	.+2      	; 0x18c6 <follow_path+0x150>
    18c4:	a5 cf       	rjmp	.-182    	; 0x1810 <follow_path+0x9a>
    18c6:	28 01       	movw	r4, r16
    18c8:	e1 2c       	mov	r14, r1
    18ca:	f1 2c       	mov	r15, r1
    18cc:	81 2c       	mov	r8, r1
    18ce:	91 2c       	mov	r9, r1
    18d0:	58 e0       	ldi	r21, 0x08	; 8
    18d2:	65 2e       	mov	r6, r21
    18d4:	71 2c       	mov	r7, r1
    18d6:	3b c0       	rjmp	.+118    	; 0x194e <follow_path+0x1d8>
    18d8:	23 30       	cpi	r18, 0x03	; 3
    18da:	31 05       	cpc	r19, r1
    18dc:	09 f4       	brne	.+2      	; 0x18e0 <follow_path+0x16a>
    18de:	a1 c0       	rjmp	.+322    	; 0x1a22 <follow_path+0x2ac>
    18e0:	81 93       	st	Z+, r24
    18e2:	9a cf       	rjmp	.-204    	; 0x1818 <follow_path+0xa2>
    18e4:	8c 35       	cpi	r24, 0x5C	; 92
    18e6:	09 f4       	brne	.+2      	; 0x18ea <follow_path+0x174>
    18e8:	a0 cf       	rjmp	.-192    	; 0x182a <follow_path+0xb4>
    18ea:	81 32       	cpi	r24, 0x21	; 33
    18ec:	08 f4       	brcc	.+2      	; 0x18f0 <follow_path+0x17a>
    18ee:	9d cf       	rjmp	.-198    	; 0x182a <follow_path+0xb4>
    18f0:	98 c0       	rjmp	.+304    	; 0x1a22 <follow_path+0x2ac>
    18f2:	80 e2       	ldi	r24, 0x20	; 32
    18f4:	a0 cf       	rjmp	.-192    	; 0x1836 <follow_path+0xc0>
    18f6:	8f e2       	ldi	r24, 0x2F	; 47
    18f8:	38 16       	cp	r3, r24
    18fa:	99 f1       	breq	.+102    	; 0x1962 <follow_path+0x1ec>
    18fc:	9c e5       	ldi	r25, 0x5C	; 92
    18fe:	39 16       	cp	r3, r25
    1900:	81 f1       	breq	.+96     	; 0x1962 <follow_path+0x1ec>
    1902:	ae e2       	ldi	r26, 0x2E	; 46
    1904:	3a 16       	cp	r3, r26
    1906:	09 f4       	brne	.+2      	; 0x190a <follow_path+0x194>
    1908:	8f c0       	rjmp	.+286    	; 0x1a28 <follow_path+0x2b2>
    190a:	e6 14       	cp	r14, r6
    190c:	f7 04       	cpc	r15, r7
    190e:	08 f0       	brcs	.+2      	; 0x1912 <follow_path+0x19c>
    1910:	88 c0       	rjmp	.+272    	; 0x1a22 <follow_path+0x2ac>
    1912:	37 fe       	sbrs	r3, 7
    1914:	06 c0       	rjmp	.+12     	; 0x1922 <follow_path+0x1ac>
    1916:	e3 2d       	mov	r30, r3
    1918:	ef 77       	andi	r30, 0x7F	; 127
    191a:	f0 e0       	ldi	r31, 0x00	; 0
    191c:	e0 5a       	subi	r30, 0xA0	; 160
    191e:	fe 4f       	sbci	r31, 0xFE	; 254
    1920:	30 80       	ld	r3, Z
    1922:	63 2d       	mov	r22, r3
    1924:	70 e0       	ldi	r23, 0x00	; 0
    1926:	8d e1       	ldi	r24, 0x1D	; 29
    1928:	91 e0       	ldi	r25, 0x01	; 1
    192a:	0e 94 7f 29 	call	0x52fe	; 0x52fe <strchr>
    192e:	89 2b       	or	r24, r25
    1930:	09 f0       	breq	.+2      	; 0x1934 <follow_path+0x1be>
    1932:	77 c0       	rjmp	.+238    	; 0x1a22 <follow_path+0x2ac>
    1934:	8f e9       	ldi	r24, 0x9F	; 159
    1936:	83 0d       	add	r24, r3
    1938:	8a 31       	cpi	r24, 0x1A	; 26
    193a:	10 f4       	brcc	.+4      	; 0x1940 <follow_path+0x1ca>
    193c:	b0 ee       	ldi	r27, 0xE0	; 224
    193e:	3b 0e       	add	r3, r27
    1940:	f6 01       	movw	r30, r12
    1942:	ee 0d       	add	r30, r14
    1944:	ff 1d       	adc	r31, r15
    1946:	30 82       	st	Z, r3
    1948:	f7 01       	movw	r30, r14
    194a:	31 96       	adiw	r30, 0x01	; 1
    194c:	7f 01       	movw	r14, r30
    194e:	bf ef       	ldi	r27, 0xFF	; 255
    1950:	8b 1a       	sub	r8, r27
    1952:	9b 0a       	sbc	r9, r27
    1954:	f2 01       	movw	r30, r4
    1956:	31 90       	ld	r3, Z+
    1958:	2f 01       	movw	r4, r30
    195a:	f0 e2       	ldi	r31, 0x20	; 32
    195c:	f3 15       	cp	r31, r3
    195e:	58 f2       	brcs	.-106    	; 0x18f6 <follow_path+0x180>
    1960:	0d c0       	rjmp	.+26     	; 0x197c <follow_path+0x206>
    1962:	f8 01       	movw	r30, r16
    1964:	e8 0d       	add	r30, r8
    1966:	f9 1d       	adc	r31, r9
    1968:	02 c0       	rjmp	.+4      	; 0x196e <follow_path+0x1f8>
    196a:	8c 35       	cpi	r24, 0x5C	; 92
    196c:	39 f4       	brne	.+14     	; 0x197c <follow_path+0x206>
    196e:	4f 01       	movw	r8, r30
    1970:	80 1a       	sub	r8, r16
    1972:	91 0a       	sbc	r9, r17
    1974:	81 91       	ld	r24, Z+
    1976:	8f 32       	cpi	r24, 0x2F	; 47
    1978:	c1 f7       	brne	.-16     	; 0x196a <follow_path+0x1f4>
    197a:	f9 cf       	rjmp	.-14     	; 0x196e <follow_path+0x1f8>
    197c:	e1 14       	cp	r14, r1
    197e:	f1 04       	cpc	r15, r1
    1980:	09 f4       	brne	.+2      	; 0x1984 <follow_path+0x20e>
    1982:	4f c0       	rjmp	.+158    	; 0x1a22 <follow_path+0x2ac>
    1984:	ab 81       	ldd	r26, Y+3	; 0x03
    1986:	bc 81       	ldd	r27, Y+4	; 0x04
    1988:	5c 96       	adiw	r26, 0x1c	; 28
    198a:	8c 91       	ld	r24, X
    198c:	5c 97       	sbiw	r26, 0x1c	; 28
    198e:	85 3e       	cpi	r24, 0xE5	; 229
    1990:	11 f4       	brne	.+4      	; 0x1996 <follow_path+0x220>
    1992:	5c 96       	adiw	r26, 0x1c	; 28
    1994:	2c 92       	st	X, r2
    1996:	08 0d       	add	r16, r8
    1998:	19 1d       	adc	r17, r9
    199a:	b0 e2       	ldi	r27, 0x20	; 32
    199c:	b3 15       	cp	r27, r3
    199e:	20 f4       	brcc	.+8      	; 0x19a8 <follow_path+0x232>
    19a0:	f8 01       	movw	r30, r16
    19a2:	80 81       	ld	r24, Z
    19a4:	81 32       	cpi	r24, 0x21	; 33
    19a6:	10 f4       	brcc	.+4      	; 0x19ac <follow_path+0x236>
    19a8:	84 e0       	ldi	r24, 0x04	; 4
    19aa:	45 cf       	rjmp	.-374    	; 0x1836 <follow_path+0xc0>
    19ac:	80 e0       	ldi	r24, 0x00	; 0
    19ae:	43 cf       	rjmp	.-378    	; 0x1836 <follow_path+0xc0>
    19b0:	ab 81       	ldd	r26, Y+3	; 0x03
    19b2:	bc 81       	ldd	r27, Y+4	; 0x04
    19b4:	5a 96       	adiw	r26, 0x1a	; 26
    19b6:	ed 91       	ld	r30, X+
    19b8:	fc 91       	ld	r31, X
    19ba:	5b 97       	sbiw	r26, 0x1b	; 27
    19bc:	80 81       	ld	r24, Z
    19be:	88 23       	and	r24, r24
    19c0:	b9 f0       	breq	.+46     	; 0x19f0 <follow_path+0x27a>
    19c2:	83 85       	ldd	r24, Z+11	; 0x0b
    19c4:	8f 73       	andi	r24, 0x3F	; 63
    19c6:	14 96       	adiw	r26, 0x04	; 4
    19c8:	8c 93       	st	X, r24
    19ca:	83 85       	ldd	r24, Z+11	; 0x0b
    19cc:	83 fd       	sbrc	r24, 3
    19ce:	09 c0       	rjmp	.+18     	; 0x19e2 <follow_path+0x26c>
    19d0:	4b e0       	ldi	r20, 0x0B	; 11
    19d2:	50 e0       	ldi	r21, 0x00	; 0
    19d4:	b6 01       	movw	r22, r12
    19d6:	cf 01       	movw	r24, r30
    19d8:	0e 94 62 29 	call	0x52c4	; 0x52c4 <memcmp>
    19dc:	89 2b       	or	r24, r25
    19de:	09 f4       	brne	.+2      	; 0x19e2 <follow_path+0x26c>
    19e0:	49 cf       	rjmp	.-366    	; 0x1874 <follow_path+0xfe>
    19e2:	60 e0       	ldi	r22, 0x00	; 0
    19e4:	70 e0       	ldi	r23, 0x00	; 0
    19e6:	8b 81       	ldd	r24, Y+3	; 0x03
    19e8:	9c 81       	ldd	r25, Y+4	; 0x04
    19ea:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <dir_next>
    19ee:	32 cf       	rjmp	.-412    	; 0x1854 <follow_path+0xde>
    19f0:	44 e0       	ldi	r20, 0x04	; 4
    19f2:	94 2e       	mov	r9, r20
    19f4:	3f cf       	rjmp	.-386    	; 0x1874 <follow_path+0xfe>
    19f6:	f4 e0       	ldi	r31, 0x04	; 4
    19f8:	9f 12       	cpse	r9, r31
    19fa:	21 c0       	rjmp	.+66     	; 0x1a3e <follow_path+0x2c8>
    19fc:	98 2f       	mov	r25, r24
    19fe:	94 70       	andi	r25, 0x04	; 4
    1a00:	85 ff       	sbrs	r24, 5
    1a02:	0a c0       	rjmp	.+20     	; 0x1a18 <follow_path+0x2a2>
    1a04:	99 23       	and	r25, r25
    1a06:	09 f4       	brne	.+2      	; 0x1a0a <follow_path+0x294>
    1a08:	52 cf       	rjmp	.-348    	; 0x18ae <follow_path+0x138>
    1a0a:	80 e8       	ldi	r24, 0x80	; 128
    1a0c:	ab 81       	ldd	r26, Y+3	; 0x03
    1a0e:	bc 81       	ldd	r27, Y+4	; 0x04
    1a10:	97 96       	adiw	r26, 0x27	; 39
    1a12:	8c 93       	st	X, r24
    1a14:	91 2c       	mov	r9, r1
    1a16:	13 c0       	rjmp	.+38     	; 0x1a3e <follow_path+0x2c8>
    1a18:	91 11       	cpse	r25, r1
    1a1a:	11 c0       	rjmp	.+34     	; 0x1a3e <follow_path+0x2c8>
    1a1c:	35 e0       	ldi	r19, 0x05	; 5
    1a1e:	93 2e       	mov	r9, r19
    1a20:	0e c0       	rjmp	.+28     	; 0x1a3e <follow_path+0x2c8>
    1a22:	26 e0       	ldi	r18, 0x06	; 6
    1a24:	92 2e       	mov	r9, r18
    1a26:	0b c0       	rjmp	.+22     	; 0x1a3e <follow_path+0x2c8>
    1a28:	bb e0       	ldi	r27, 0x0B	; 11
    1a2a:	6b 16       	cp	r6, r27
    1a2c:	71 04       	cpc	r7, r1
    1a2e:	c9 f3       	breq	.-14     	; 0x1a22 <follow_path+0x2ac>
    1a30:	88 e0       	ldi	r24, 0x08	; 8
    1a32:	e8 2e       	mov	r14, r24
    1a34:	f1 2c       	mov	r15, r1
    1a36:	9b e0       	ldi	r25, 0x0B	; 11
    1a38:	69 2e       	mov	r6, r25
    1a3a:	71 2c       	mov	r7, r1
    1a3c:	88 cf       	rjmp	.-240    	; 0x194e <follow_path+0x1d8>
    1a3e:	89 2d       	mov	r24, r9
    1a40:	24 96       	adiw	r28, 0x04	; 4
    1a42:	e2 e1       	ldi	r30, 0x12	; 18
    1a44:	0c 94 fc 28 	jmp	0x51f8	; 0x51f8 <__epilogue_restores__>

00001a48 <dir_register>:
    1a48:	0f 93       	push	r16
    1a4a:	1f 93       	push	r17
    1a4c:	cf 93       	push	r28
    1a4e:	df 93       	push	r29
    1a50:	ec 01       	movw	r28, r24
    1a52:	08 81       	ld	r16, Y
    1a54:	19 81       	ldd	r17, Y+1	; 0x01
    1a56:	40 e0       	ldi	r20, 0x00	; 0
    1a58:	50 e0       	ldi	r21, 0x00	; 0
    1a5a:	ba 01       	movw	r22, r20
    1a5c:	0e 94 12 08 	call	0x1024	; 0x1024 <dir_sdi>
    1a60:	81 11       	cpse	r24, r1
    1a62:	33 c0       	rjmp	.+102    	; 0x1aca <dir_register+0x82>
    1a64:	4e 89       	ldd	r20, Y+22	; 0x16
    1a66:	5f 89       	ldd	r21, Y+23	; 0x17
    1a68:	68 8d       	ldd	r22, Y+24	; 0x18
    1a6a:	79 8d       	ldd	r23, Y+25	; 0x19
    1a6c:	c8 01       	movw	r24, r16
    1a6e:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <move_window>
    1a72:	81 11       	cpse	r24, r1
    1a74:	2a c0       	rjmp	.+84     	; 0x1aca <dir_register+0x82>
    1a76:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1a78:	fb 8d       	ldd	r31, Y+27	; 0x1b
    1a7a:	80 81       	ld	r24, Z
    1a7c:	85 3e       	cpi	r24, 0xE5	; 229
    1a7e:	e9 f4       	brne	.+58     	; 0x1aba <dir_register+0x72>
    1a80:	4e 89       	ldd	r20, Y+22	; 0x16
    1a82:	5f 89       	ldd	r21, Y+23	; 0x17
    1a84:	68 8d       	ldd	r22, Y+24	; 0x18
    1a86:	79 8d       	ldd	r23, Y+25	; 0x19
    1a88:	c8 01       	movw	r24, r16
    1a8a:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <move_window>
    1a8e:	81 11       	cpse	r24, r1
    1a90:	1f c0       	rjmp	.+62     	; 0x1ad0 <dir_register+0x88>
    1a92:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1a94:	fb 8d       	ldd	r31, Y+27	; 0x1b
    1a96:	90 e2       	ldi	r25, 0x20	; 32
    1a98:	df 01       	movw	r26, r30
    1a9a:	1d 92       	st	X+, r1
    1a9c:	9a 95       	dec	r25
    1a9e:	e9 f7       	brne	.-6      	; 0x1a9a <dir_register+0x52>
    1aa0:	aa 8d       	ldd	r26, Y+26	; 0x1a
    1aa2:	bb 8d       	ldd	r27, Y+27	; 0x1b
    1aa4:	fe 01       	movw	r30, r28
    1aa6:	7c 96       	adiw	r30, 0x1c	; 28
    1aa8:	9b e0       	ldi	r25, 0x0B	; 11
    1aaa:	01 90       	ld	r0, Z+
    1aac:	0d 92       	st	X+, r0
    1aae:	9a 95       	dec	r25
    1ab0:	e1 f7       	brne	.-8      	; 0x1aaa <dir_register+0x62>
    1ab2:	91 e0       	ldi	r25, 0x01	; 1
    1ab4:	f8 01       	movw	r30, r16
    1ab6:	93 83       	std	Z+3, r25	; 0x03
    1ab8:	0b c0       	rjmp	.+22     	; 0x1ad0 <dir_register+0x88>
    1aba:	88 23       	and	r24, r24
    1abc:	09 f3       	breq	.-62     	; 0x1a80 <dir_register+0x38>
    1abe:	61 e0       	ldi	r22, 0x01	; 1
    1ac0:	70 e0       	ldi	r23, 0x00	; 0
    1ac2:	ce 01       	movw	r24, r28
    1ac4:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <dir_next>
    1ac8:	cb cf       	rjmp	.-106    	; 0x1a60 <dir_register+0x18>
    1aca:	84 30       	cpi	r24, 0x04	; 4
    1acc:	09 f4       	brne	.+2      	; 0x1ad0 <dir_register+0x88>
    1ace:	87 e0       	ldi	r24, 0x07	; 7
    1ad0:	df 91       	pop	r29
    1ad2:	cf 91       	pop	r28
    1ad4:	1f 91       	pop	r17
    1ad6:	0f 91       	pop	r16
    1ad8:	08 95       	ret

00001ada <mount_volume>:
    1ada:	a0 e2       	ldi	r26, 0x20	; 32
    1adc:	b0 e0       	ldi	r27, 0x00	; 0
    1ade:	e3 e7       	ldi	r30, 0x73	; 115
    1ae0:	fd e0       	ldi	r31, 0x0D	; 13
    1ae2:	0c 94 e2 28 	jmp	0x51c4	; 0x51c4 <__prologue_saves__+0x4>
    1ae6:	5b 01       	movw	r10, r22
    1ae8:	f4 2e       	mov	r15, r20
    1aea:	db 01       	movw	r26, r22
    1aec:	1d 92       	st	X+, r1
    1aee:	1c 92       	st	X, r1
    1af0:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <get_ldnumber>
    1af4:	6c 01       	movw	r12, r24
    1af6:	97 fd       	sbrc	r25, 7
    1af8:	6b c2       	rjmp	.+1238   	; 0x1fd0 <mount_volume+0x4f6>
    1afa:	fc 01       	movw	r30, r24
    1afc:	ee 0f       	add	r30, r30
    1afe:	ff 1f       	adc	r31, r31
    1b00:	ef 57       	subi	r30, 0x7F	; 127
    1b02:	fd 4f       	sbci	r31, 0xFD	; 253
    1b04:	00 81       	ld	r16, Z
    1b06:	11 81       	ldd	r17, Z+1	; 0x01
    1b08:	01 15       	cp	r16, r1
    1b0a:	11 05       	cpc	r17, r1
    1b0c:	09 f4       	brne	.+2      	; 0x1b10 <mount_volume+0x36>
    1b0e:	62 c2       	rjmp	.+1220   	; 0x1fd4 <mount_volume+0x4fa>
    1b10:	f5 01       	movw	r30, r10
    1b12:	11 83       	std	Z+1, r17	; 0x01
    1b14:	00 83       	st	Z, r16
    1b16:	ff 2d       	mov	r31, r15
    1b18:	fe 7f       	andi	r31, 0xFE	; 254
    1b1a:	ff 2e       	mov	r15, r31
    1b1c:	d8 01       	movw	r26, r16
    1b1e:	8c 91       	ld	r24, X
    1b20:	88 23       	and	r24, r24
    1b22:	69 f0       	breq	.+26     	; 0x1b3e <mount_volume+0x64>
    1b24:	11 96       	adiw	r26, 0x01	; 1
    1b26:	8c 91       	ld	r24, X
    1b28:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <disk_status>
    1b2c:	80 fd       	sbrc	r24, 0
    1b2e:	07 c0       	rjmp	.+14     	; 0x1b3e <mount_volume+0x64>
    1b30:	ff 20       	and	r15, r15
    1b32:	09 f4       	brne	.+2      	; 0x1b36 <mount_volume+0x5c>
    1b34:	51 c2       	rjmp	.+1186   	; 0x1fd8 <mount_volume+0x4fe>
    1b36:	82 ff       	sbrs	r24, 2
    1b38:	4f c2       	rjmp	.+1182   	; 0x1fd8 <mount_volume+0x4fe>
    1b3a:	8a e0       	ldi	r24, 0x0A	; 10
    1b3c:	59 c2       	rjmp	.+1202   	; 0x1ff0 <mount_volume+0x516>
    1b3e:	f8 01       	movw	r30, r16
    1b40:	10 82       	st	Z, r1
    1b42:	c1 82       	std	Z+1, r12	; 0x01
    1b44:	8c 2d       	mov	r24, r12
    1b46:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <disk_initialize>
    1b4a:	80 fd       	sbrc	r24, 0
    1b4c:	47 c2       	rjmp	.+1166   	; 0x1fdc <mount_volume+0x502>
    1b4e:	ff 20       	and	r15, r15
    1b50:	11 f0       	breq	.+4      	; 0x1b56 <mount_volume+0x7c>
    1b52:	82 fd       	sbrc	r24, 2
    1b54:	f2 cf       	rjmp	.-28     	; 0x1b3a <mount_volume+0x60>
    1b56:	d8 01       	movw	r26, r16
    1b58:	13 96       	adiw	r26, 0x03	; 3
    1b5a:	1c 92       	st	X, r1
    1b5c:	8f ef       	ldi	r24, 0xFF	; 255
    1b5e:	9f ef       	ldi	r25, 0xFF	; 255
    1b60:	dc 01       	movw	r26, r24
    1b62:	f8 01       	movw	r30, r16
    1b64:	87 a7       	std	Z+47, r24	; 0x2f
    1b66:	90 ab       	std	Z+48, r25	; 0x30
    1b68:	a1 ab       	std	Z+49, r26	; 0x31
    1b6a:	b2 ab       	std	Z+50, r27	; 0x32
    1b6c:	40 e0       	ldi	r20, 0x00	; 0
    1b6e:	50 e0       	ldi	r21, 0x00	; 0
    1b70:	ba 01       	movw	r22, r20
    1b72:	c8 01       	movw	r24, r16
    1b74:	0e 94 a6 05 	call	0xb4c	; 0xb4c <move_window.part.6>
    1b78:	81 11       	cpse	r24, r1
    1b7a:	4e c0       	rjmp	.+156    	; 0x1c18 <mount_volume+0x13e>
    1b7c:	c8 01       	movw	r24, r16
    1b7e:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <check_fs.part.7>
    1b82:	82 30       	cpi	r24, 0x02	; 2
    1b84:	91 05       	cpc	r25, r1
    1b86:	09 f0       	breq	.+2      	; 0x1b8a <mount_volume+0xb0>
    1b88:	49 c0       	rjmp	.+146    	; 0x1c1c <mount_volume+0x142>
    1b8a:	68 01       	movw	r12, r16
    1b8c:	f7 e0       	ldi	r31, 0x07	; 7
    1b8e:	cf 1a       	sub	r12, r31
    1b90:	fe ef       	ldi	r31, 0xFE	; 254
    1b92:	df 0a       	sbc	r13, r31
    1b94:	9e 01       	movw	r18, r28
    1b96:	2f 5f       	subi	r18, 0xFF	; 255
    1b98:	3f 4f       	sbci	r19, 0xFF	; 255
    1b9a:	79 01       	movw	r14, r18
    1b9c:	48 01       	movw	r8, r16
    1b9e:	37 ec       	ldi	r19, 0xC7	; 199
    1ba0:	83 1a       	sub	r8, r19
    1ba2:	3d ef       	ldi	r19, 0xFD	; 253
    1ba4:	93 0a       	sbc	r9, r19
    1ba6:	57 01       	movw	r10, r14
    1ba8:	c6 01       	movw	r24, r12
    1baa:	0e 94 28 04 	call	0x850	; 0x850 <ld_dword>
    1bae:	d5 01       	movw	r26, r10
    1bb0:	6d 93       	st	X+, r22
    1bb2:	7d 93       	st	X+, r23
    1bb4:	8d 93       	st	X+, r24
    1bb6:	9d 93       	st	X+, r25
    1bb8:	5d 01       	movw	r10, r26
    1bba:	b0 e1       	ldi	r27, 0x10	; 16
    1bbc:	cb 0e       	add	r12, r27
    1bbe:	d1 1c       	adc	r13, r1
    1bc0:	c8 14       	cp	r12, r8
    1bc2:	d9 04       	cpc	r13, r9
    1bc4:	89 f7       	brne	.-30     	; 0x1ba8 <mount_volume+0xce>
    1bc6:	6e 01       	movw	r12, r28
    1bc8:	e1 e1       	ldi	r30, 0x11	; 17
    1bca:	ce 0e       	add	r12, r30
    1bcc:	d1 1c       	adc	r13, r1
    1bce:	88 24       	eor	r8, r8
    1bd0:	8a 94       	dec	r8
    1bd2:	98 2c       	mov	r9, r8
    1bd4:	54 01       	movw	r10, r8
    1bd6:	d7 01       	movw	r26, r14
    1bd8:	4d 91       	ld	r20, X+
    1bda:	5d 91       	ld	r21, X+
    1bdc:	6d 91       	ld	r22, X+
    1bde:	7d 91       	ld	r23, X+
    1be0:	7d 01       	movw	r14, r26
    1be2:	41 15       	cp	r20, r1
    1be4:	51 05       	cpc	r21, r1
    1be6:	61 05       	cpc	r22, r1
    1be8:	71 05       	cpc	r23, r1
    1bea:	09 f4       	brne	.+2      	; 0x1bee <mount_volume+0x114>
    1bec:	fb c1       	rjmp	.+1014   	; 0x1fe4 <mount_volume+0x50a>
    1bee:	f8 01       	movw	r30, r16
    1bf0:	13 82       	std	Z+3, r1	; 0x03
    1bf2:	87 a6       	std	Z+47, r8	; 0x2f
    1bf4:	90 aa       	std	Z+48, r9	; 0x30
    1bf6:	a1 aa       	std	Z+49, r10	; 0x31
    1bf8:	b2 aa       	std	Z+50, r11	; 0x32
    1bfa:	c8 01       	movw	r24, r16
    1bfc:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <move_window>
    1c00:	81 11       	cpse	r24, r1
    1c02:	f3 c1       	rjmp	.+998    	; 0x1fea <mount_volume+0x510>
    1c04:	c8 01       	movw	r24, r16
    1c06:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <check_fs.part.7>
    1c0a:	82 30       	cpi	r24, 0x02	; 2
    1c0c:	91 05       	cpc	r25, r1
    1c0e:	30 f0       	brcs	.+12     	; 0x1c1c <mount_volume+0x142>
    1c10:	ce 14       	cp	r12, r14
    1c12:	df 04       	cpc	r13, r15
    1c14:	01 f7       	brne	.-64     	; 0x1bd6 <mount_volume+0xfc>
    1c16:	02 c0       	rjmp	.+4      	; 0x1c1c <mount_volume+0x142>
    1c18:	84 e0       	ldi	r24, 0x04	; 4
    1c1a:	90 e0       	ldi	r25, 0x00	; 0
    1c1c:	84 30       	cpi	r24, 0x04	; 4
    1c1e:	91 05       	cpc	r25, r1
    1c20:	09 f4       	brne	.+2      	; 0x1c24 <mount_volume+0x14a>
    1c22:	de c1       	rjmp	.+956    	; 0x1fe0 <mount_volume+0x506>
    1c24:	02 97       	sbiw	r24, 0x02	; 2
    1c26:	10 f0       	brcs	.+4      	; 0x1c2c <mount_volume+0x152>
    1c28:	8d e0       	ldi	r24, 0x0D	; 13
    1c2a:	e2 c1       	rjmp	.+964    	; 0x1ff0 <mount_volume+0x516>
    1c2c:	f8 01       	movw	r30, r16
    1c2e:	86 ad       	ldd	r24, Z+62	; 0x3e
    1c30:	97 ad       	ldd	r25, Z+63	; 0x3f
    1c32:	81 15       	cp	r24, r1
    1c34:	92 40       	sbci	r25, 0x02	; 2
    1c36:	c1 f7       	brne	.-16     	; 0x1c28 <mount_volume+0x14e>
    1c38:	f8 01       	movw	r30, r16
    1c3a:	e7 5b       	subi	r30, 0xB7	; 183
    1c3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c3e:	40 80       	ld	r4, Z
    1c40:	51 80       	ldd	r5, Z+1	; 0x01
    1c42:	41 14       	cp	r4, r1
    1c44:	51 04       	cpc	r5, r1
    1c46:	19 f0       	breq	.+6      	; 0x1c4e <mount_volume+0x174>
    1c48:	61 2c       	mov	r6, r1
    1c4a:	71 2c       	mov	r7, r1
    1c4c:	07 c0       	rjmp	.+14     	; 0x1c5c <mount_volume+0x182>
    1c4e:	c8 01       	movw	r24, r16
    1c50:	89 5a       	subi	r24, 0xA9	; 169
    1c52:	9f 4f       	sbci	r25, 0xFF	; 255
    1c54:	0e 94 28 04 	call	0x850	; 0x850 <ld_dword>
    1c58:	2b 01       	movw	r4, r22
    1c5a:	3c 01       	movw	r6, r24
    1c5c:	d8 01       	movw	r26, r16
    1c5e:	9f 96       	adiw	r26, 0x2f	; 47
    1c60:	2d 91       	ld	r18, X+
    1c62:	3d 91       	ld	r19, X+
    1c64:	4d 91       	ld	r20, X+
    1c66:	5c 91       	ld	r21, X
    1c68:	d2 97       	sbiw	r26, 0x32	; 50
    1c6a:	29 8b       	std	Y+17, r18	; 0x11
    1c6c:	3a 8b       	std	Y+18, r19	; 0x12
    1c6e:	4b 8b       	std	Y+19, r20	; 0x13
    1c70:	5c 8b       	std	Y+20, r21	; 0x14
    1c72:	f8 01       	movw	r30, r16
    1c74:	43 8e       	std	Z+27, r4	; 0x1b
    1c76:	54 8e       	std	Z+28, r5	; 0x1c
    1c78:	65 8e       	std	Z+29, r6	; 0x1d
    1c7a:	76 8e       	std	Z+30, r7	; 0x1e
    1c7c:	ed 5b       	subi	r30, 0xBD	; 189
    1c7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c80:	a0 80       	ld	r10, Z
    1c82:	12 96       	adiw	r26, 0x02	; 2
    1c84:	ac 92       	st	X, r10
    1c86:	12 97       	sbiw	r26, 0x02	; 2
    1c88:	8f ef       	ldi	r24, 0xFF	; 255
    1c8a:	8a 0d       	add	r24, r10
    1c8c:	82 30       	cpi	r24, 0x02	; 2
    1c8e:	60 f6       	brcc	.-104    	; 0x1c28 <mount_volume+0x14e>
    1c90:	33 97       	sbiw	r30, 0x03	; 3
    1c92:	b0 80       	ld	r11, Z
    1c94:	8b 2d       	mov	r24, r11
    1c96:	90 e0       	ldi	r25, 0x00	; 0
    1c98:	f8 01       	movw	r30, r16
    1c9a:	92 87       	std	Z+10, r25	; 0x0a
    1c9c:	81 87       	std	Z+9, r24	; 0x09
    1c9e:	00 97       	sbiw	r24, 0x00	; 0
    1ca0:	19 f2       	breq	.-122    	; 0x1c28 <mount_volume+0x14e>
    1ca2:	9c 01       	movw	r18, r24
    1ca4:	21 50       	subi	r18, 0x01	; 1
    1ca6:	31 09       	sbc	r19, r1
    1ca8:	82 23       	and	r24, r18
    1caa:	93 23       	and	r25, r19
    1cac:	89 2b       	or	r24, r25
    1cae:	09 f0       	breq	.+2      	; 0x1cb2 <mount_volume+0x1d8>
    1cb0:	bb cf       	rjmp	.-138    	; 0x1c28 <mount_volume+0x14e>
    1cb2:	ec 5b       	subi	r30, 0xBC	; 188
    1cb4:	ff 4f       	sbci	r31, 0xFF	; 255
    1cb6:	80 80       	ld	r8, Z
    1cb8:	91 80       	ldd	r9, Z+1	; 0x01
    1cba:	18 96       	adiw	r26, 0x08	; 8
    1cbc:	9c 92       	st	X, r9
    1cbe:	8e 92       	st	-X, r8
    1cc0:	17 97       	sbiw	r26, 0x07	; 7
    1cc2:	c4 01       	movw	r24, r8
    1cc4:	8f 70       	andi	r24, 0x0F	; 15
    1cc6:	99 27       	eor	r25, r25
    1cc8:	89 2b       	or	r24, r25
    1cca:	09 f0       	breq	.+2      	; 0x1cce <mount_volume+0x1f4>
    1ccc:	ad cf       	rjmp	.-166    	; 0x1c28 <mount_volume+0x14e>
    1cce:	32 96       	adiw	r30, 0x02	; 2
    1cd0:	80 81       	ld	r24, Z
    1cd2:	91 81       	ldd	r25, Z+1	; 0x01
    1cd4:	6c 01       	movw	r12, r24
    1cd6:	e1 2c       	mov	r14, r1
    1cd8:	f1 2c       	mov	r15, r1
    1cda:	89 2b       	or	r24, r25
    1cdc:	39 f4       	brne	.+14     	; 0x1cec <mount_volume+0x212>
    1cde:	c8 01       	movw	r24, r16
    1ce0:	8d 5a       	subi	r24, 0xAD	; 173
    1ce2:	9f 4f       	sbci	r25, 0xFF	; 255
    1ce4:	0e 94 28 04 	call	0x850	; 0x850 <ld_dword>
    1ce8:	6b 01       	movw	r12, r22
    1cea:	7c 01       	movw	r14, r24
    1cec:	f8 01       	movw	r30, r16
    1cee:	ef 5b       	subi	r30, 0xBF	; 191
    1cf0:	ff 4f       	sbci	r31, 0xFF	; 255
    1cf2:	01 90       	ld	r0, Z+
    1cf4:	f0 81       	ld	r31, Z
    1cf6:	e0 2d       	mov	r30, r0
    1cf8:	30 97       	sbiw	r30, 0x00	; 0
    1cfa:	09 f4       	brne	.+2      	; 0x1cfe <mount_volume+0x224>
    1cfc:	95 cf       	rjmp	.-214    	; 0x1c28 <mount_volume+0x14e>
    1cfe:	aa 2d       	mov	r26, r10
    1d00:	b0 e0       	ldi	r27, 0x00	; 0
    1d02:	a3 01       	movw	r20, r6
    1d04:	92 01       	movw	r18, r4
    1d06:	0e 94 76 28 	call	0x50ec	; 0x50ec <__muluhisi3>
    1d0a:	69 8f       	std	Y+25, r22	; 0x19
    1d0c:	7a 8f       	std	Y+26, r23	; 0x1a
    1d0e:	8b 8f       	std	Y+27, r24	; 0x1b
    1d10:	9c 8f       	std	Y+28, r25	; 0x1c
    1d12:	9f 01       	movw	r18, r30
    1d14:	40 e0       	ldi	r20, 0x00	; 0
    1d16:	50 e0       	ldi	r21, 0x00	; 0
    1d18:	2d 8f       	std	Y+29, r18	; 0x1d
    1d1a:	3e 8f       	std	Y+30, r19	; 0x1e
    1d1c:	4f 8f       	std	Y+31, r20	; 0x1f
    1d1e:	58 a3       	std	Y+32, r21	; 0x20
    1d20:	c4 01       	movw	r24, r8
    1d22:	f4 e0       	ldi	r31, 0x04	; 4
    1d24:	96 95       	lsr	r25
    1d26:	87 95       	ror	r24
    1d28:	fa 95       	dec	r31
    1d2a:	e1 f7       	brne	.-8      	; 0x1d24 <mount_volume+0x24a>
    1d2c:	28 0f       	add	r18, r24
    1d2e:	39 1f       	adc	r19, r25
    1d30:	41 1d       	adc	r20, r1
    1d32:	51 1d       	adc	r21, r1
    1d34:	da 01       	movw	r26, r20
    1d36:	c9 01       	movw	r24, r18
    1d38:	29 8d       	ldd	r18, Y+25	; 0x19
    1d3a:	3a 8d       	ldd	r19, Y+26	; 0x1a
    1d3c:	4b 8d       	ldd	r20, Y+27	; 0x1b
    1d3e:	5c 8d       	ldd	r21, Y+28	; 0x1c
    1d40:	28 0f       	add	r18, r24
    1d42:	39 1f       	adc	r19, r25
    1d44:	4a 1f       	adc	r20, r26
    1d46:	5b 1f       	adc	r21, r27
    1d48:	2d 8b       	std	Y+21, r18	; 0x15
    1d4a:	3e 8b       	std	Y+22, r19	; 0x16
    1d4c:	4f 8b       	std	Y+23, r20	; 0x17
    1d4e:	58 8f       	std	Y+24, r21	; 0x18
    1d50:	c2 16       	cp	r12, r18
    1d52:	d3 06       	cpc	r13, r19
    1d54:	e4 06       	cpc	r14, r20
    1d56:	f5 06       	cpc	r15, r21
    1d58:	08 f4       	brcc	.+2      	; 0x1d5c <mount_volume+0x282>
    1d5a:	66 cf       	rjmp	.-308    	; 0x1c28 <mount_volume+0x14e>
    1d5c:	c7 01       	movw	r24, r14
    1d5e:	b6 01       	movw	r22, r12
    1d60:	62 1b       	sub	r22, r18
    1d62:	73 0b       	sbc	r23, r19
    1d64:	84 0b       	sbc	r24, r20
    1d66:	95 0b       	sbc	r25, r21
    1d68:	2b 2d       	mov	r18, r11
    1d6a:	30 e0       	ldi	r19, 0x00	; 0
    1d6c:	40 e0       	ldi	r20, 0x00	; 0
    1d6e:	50 e0       	ldi	r21, 0x00	; 0
    1d70:	0e 94 4e 28 	call	0x509c	; 0x509c <__udivmodsi4>
    1d74:	da 01       	movw	r26, r20
    1d76:	c9 01       	movw	r24, r18
    1d78:	01 97       	sbiw	r24, 0x01	; 1
    1d7a:	a1 09       	sbc	r26, r1
    1d7c:	b1 09       	sbc	r27, r1
    1d7e:	85 3f       	cpi	r24, 0xF5	; 245
    1d80:	9f 4f       	sbci	r25, 0xFF	; 255
    1d82:	af 4f       	sbci	r26, 0xFF	; 255
    1d84:	bf 40       	sbci	r27, 0x0F	; 15
    1d86:	08 f0       	brcs	.+2      	; 0x1d8a <mount_volume+0x2b0>
    1d88:	4f cf       	rjmp	.-354    	; 0x1c28 <mount_volume+0x14e>
    1d8a:	26 3f       	cpi	r18, 0xF6	; 246
    1d8c:	8f ef       	ldi	r24, 0xFF	; 255
    1d8e:	38 07       	cpc	r19, r24
    1d90:	41 05       	cpc	r20, r1
    1d92:	51 05       	cpc	r21, r1
    1d94:	50 f4       	brcc	.+20     	; 0x1daa <mount_volume+0x2d0>
    1d96:	26 3f       	cpi	r18, 0xF6	; 246
    1d98:	9f e0       	ldi	r25, 0x0F	; 15
    1d9a:	39 07       	cpc	r19, r25
    1d9c:	41 05       	cpc	r20, r1
    1d9e:	51 05       	cpc	r21, r1
    1da0:	40 f4       	brcc	.+16     	; 0x1db2 <mount_volume+0x2d8>
    1da2:	aa 24       	eor	r10, r10
    1da4:	a3 94       	inc	r10
    1da6:	b1 2c       	mov	r11, r1
    1da8:	07 c0       	rjmp	.+14     	; 0x1db8 <mount_volume+0x2de>
    1daa:	73 e0       	ldi	r23, 0x03	; 3
    1dac:	a7 2e       	mov	r10, r23
    1dae:	b1 2c       	mov	r11, r1
    1db0:	03 c0       	rjmp	.+6      	; 0x1db8 <mount_volume+0x2de>
    1db2:	62 e0       	ldi	r22, 0x02	; 2
    1db4:	a6 2e       	mov	r10, r22
    1db6:	b1 2c       	mov	r11, r1
    1db8:	69 01       	movw	r12, r18
    1dba:	7a 01       	movw	r14, r20
    1dbc:	a2 e0       	ldi	r26, 0x02	; 2
    1dbe:	ca 0e       	add	r12, r26
    1dc0:	d1 1c       	adc	r13, r1
    1dc2:	e1 1c       	adc	r14, r1
    1dc4:	f1 1c       	adc	r15, r1
    1dc6:	f8 01       	movw	r30, r16
    1dc8:	c7 8a       	std	Z+23, r12	; 0x17
    1dca:	d0 8e       	std	Z+24, r13	; 0x18
    1dcc:	e1 8e       	std	Z+25, r14	; 0x19
    1dce:	f2 8e       	std	Z+26, r15	; 0x1a
    1dd0:	29 89       	ldd	r18, Y+17	; 0x11
    1dd2:	3a 89       	ldd	r19, Y+18	; 0x12
    1dd4:	4b 89       	ldd	r20, Y+19	; 0x13
    1dd6:	5c 89       	ldd	r21, Y+20	; 0x14
    1dd8:	27 8f       	std	Z+31, r18	; 0x1f
    1dda:	30 a3       	std	Z+32, r19	; 0x20
    1ddc:	41 a3       	std	Z+33, r20	; 0x21
    1dde:	52 a3       	std	Z+34, r21	; 0x22
    1de0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1de2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1de4:	af 8d       	ldd	r26, Y+31	; 0x1f
    1de6:	b8 a1       	ldd	r27, Y+32	; 0x20
    1de8:	28 0f       	add	r18, r24
    1dea:	39 1f       	adc	r19, r25
    1dec:	4a 1f       	adc	r20, r26
    1dee:	5b 1f       	adc	r21, r27
    1df0:	2d 8f       	std	Y+29, r18	; 0x1d
    1df2:	3e 8f       	std	Y+30, r19	; 0x1e
    1df4:	4f 8f       	std	Y+31, r20	; 0x1f
    1df6:	58 a3       	std	Y+32, r21	; 0x20
    1df8:	23 a3       	std	Z+35, r18	; 0x23
    1dfa:	34 a3       	std	Z+36, r19	; 0x24
    1dfc:	45 a3       	std	Z+37, r20	; 0x25
    1dfe:	56 a3       	std	Z+38, r21	; 0x26
    1e00:	49 89       	ldd	r20, Y+17	; 0x11
    1e02:	5a 89       	ldd	r21, Y+18	; 0x12
    1e04:	6b 89       	ldd	r22, Y+19	; 0x13
    1e06:	7c 89       	ldd	r23, Y+20	; 0x14
    1e08:	8d 89       	ldd	r24, Y+21	; 0x15
    1e0a:	9e 89       	ldd	r25, Y+22	; 0x16
    1e0c:	af 89       	ldd	r26, Y+23	; 0x17
    1e0e:	b8 8d       	ldd	r27, Y+24	; 0x18
    1e10:	48 0f       	add	r20, r24
    1e12:	59 1f       	adc	r21, r25
    1e14:	6a 1f       	adc	r22, r26
    1e16:	7b 1f       	adc	r23, r27
    1e18:	43 a7       	std	Z+43, r20	; 0x2b
    1e1a:	54 a7       	std	Z+44, r21	; 0x2c
    1e1c:	65 a7       	std	Z+45, r22	; 0x2d
    1e1e:	76 a7       	std	Z+46, r23	; 0x2e
    1e20:	b3 e0       	ldi	r27, 0x03	; 3
    1e22:	ab 16       	cp	r10, r27
    1e24:	b1 04       	cpc	r11, r1
    1e26:	e9 f4       	brne	.+58     	; 0x1e62 <mount_volume+0x388>
    1e28:	e3 5a       	subi	r30, 0xA3	; 163
    1e2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e2c:	80 81       	ld	r24, Z
    1e2e:	91 81       	ldd	r25, Z+1	; 0x01
    1e30:	89 2b       	or	r24, r25
    1e32:	09 f0       	breq	.+2      	; 0x1e36 <mount_volume+0x35c>
    1e34:	f9 ce       	rjmp	.-526    	; 0x1c28 <mount_volume+0x14e>
    1e36:	81 14       	cp	r8, r1
    1e38:	91 04       	cpc	r9, r1
    1e3a:	09 f0       	breq	.+2      	; 0x1e3e <mount_volume+0x364>
    1e3c:	f5 ce       	rjmp	.-534    	; 0x1c28 <mount_volume+0x14e>
    1e3e:	c8 01       	movw	r24, r16
    1e40:	81 5a       	subi	r24, 0xA1	; 161
    1e42:	9f 4f       	sbci	r25, 0xFF	; 255
    1e44:	0e 94 28 04 	call	0x850	; 0x850 <ld_dword>
    1e48:	f8 01       	movw	r30, r16
    1e4a:	67 a3       	std	Z+39, r22	; 0x27
    1e4c:	70 a7       	std	Z+40, r23	; 0x28
    1e4e:	81 a7       	std	Z+41, r24	; 0x29
    1e50:	92 a7       	std	Z+42, r25	; 0x2a
    1e52:	42 e0       	ldi	r20, 0x02	; 2
    1e54:	cc 0c       	add	r12, r12
    1e56:	dd 1c       	adc	r13, r13
    1e58:	ee 1c       	adc	r14, r14
    1e5a:	ff 1c       	adc	r15, r15
    1e5c:	4a 95       	dec	r20
    1e5e:	d1 f7       	brne	.-12     	; 0x1e54 <mount_volume+0x37a>
    1e60:	33 c0       	rjmp	.+102    	; 0x1ec8 <mount_volume+0x3ee>
    1e62:	81 14       	cp	r8, r1
    1e64:	91 04       	cpc	r9, r1
    1e66:	09 f4       	brne	.+2      	; 0x1e6a <mount_volume+0x390>
    1e68:	df ce       	rjmp	.-578    	; 0x1c28 <mount_volume+0x14e>
    1e6a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e6c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1e6e:	af 8d       	ldd	r26, Y+31	; 0x1f
    1e70:	b8 a1       	ldd	r27, Y+32	; 0x20
    1e72:	29 8d       	ldd	r18, Y+25	; 0x19
    1e74:	3a 8d       	ldd	r19, Y+26	; 0x1a
    1e76:	4b 8d       	ldd	r20, Y+27	; 0x1b
    1e78:	5c 8d       	ldd	r21, Y+28	; 0x1c
    1e7a:	82 0f       	add	r24, r18
    1e7c:	93 1f       	adc	r25, r19
    1e7e:	a4 1f       	adc	r26, r20
    1e80:	b5 1f       	adc	r27, r21
    1e82:	f8 01       	movw	r30, r16
    1e84:	87 a3       	std	Z+39, r24	; 0x27
    1e86:	90 a7       	std	Z+40, r25	; 0x28
    1e88:	a1 a7       	std	Z+41, r26	; 0x29
    1e8a:	b2 a7       	std	Z+42, r27	; 0x2a
    1e8c:	f2 e0       	ldi	r31, 0x02	; 2
    1e8e:	af 16       	cp	r10, r31
    1e90:	b1 04       	cpc	r11, r1
    1e92:	29 f4       	brne	.+10     	; 0x1e9e <mount_volume+0x3c4>
    1e94:	cc 0c       	add	r12, r12
    1e96:	dd 1c       	adc	r13, r13
    1e98:	ee 1c       	adc	r14, r14
    1e9a:	ff 1c       	adc	r15, r15
    1e9c:	15 c0       	rjmp	.+42     	; 0x1ec8 <mount_volume+0x3ee>
    1e9e:	a3 e0       	ldi	r26, 0x03	; 3
    1ea0:	b0 e0       	ldi	r27, 0x00	; 0
    1ea2:	a7 01       	movw	r20, r14
    1ea4:	96 01       	movw	r18, r12
    1ea6:	0e 94 76 28 	call	0x50ec	; 0x50ec <__muluhisi3>
    1eaa:	dc 01       	movw	r26, r24
    1eac:	cb 01       	movw	r24, r22
    1eae:	b6 95       	lsr	r27
    1eb0:	a7 95       	ror	r26
    1eb2:	97 95       	ror	r25
    1eb4:	87 95       	ror	r24
    1eb6:	21 e0       	ldi	r18, 0x01	; 1
    1eb8:	c2 22       	and	r12, r18
    1eba:	dd 24       	eor	r13, r13
    1ebc:	ee 24       	eor	r14, r14
    1ebe:	ff 24       	eor	r15, r15
    1ec0:	c8 0e       	add	r12, r24
    1ec2:	d9 1e       	adc	r13, r25
    1ec4:	ea 1e       	adc	r14, r26
    1ec6:	fb 1e       	adc	r15, r27
    1ec8:	3f ef       	ldi	r19, 0xFF	; 255
    1eca:	c3 0e       	add	r12, r19
    1ecc:	31 e0       	ldi	r19, 0x01	; 1
    1ece:	d3 1e       	adc	r13, r19
    1ed0:	e1 1c       	adc	r14, r1
    1ed2:	f1 1c       	adc	r15, r1
    1ed4:	89 e0       	ldi	r24, 0x09	; 9
    1ed6:	f6 94       	lsr	r15
    1ed8:	e7 94       	ror	r14
    1eda:	d7 94       	ror	r13
    1edc:	c7 94       	ror	r12
    1ede:	8a 95       	dec	r24
    1ee0:	d1 f7       	brne	.-12     	; 0x1ed6 <mount_volume+0x3fc>
    1ee2:	4c 14       	cp	r4, r12
    1ee4:	5d 04       	cpc	r5, r13
    1ee6:	6e 04       	cpc	r6, r14
    1ee8:	7f 04       	cpc	r7, r15
    1eea:	08 f4       	brcc	.+2      	; 0x1eee <mount_volume+0x414>
    1eec:	9d ce       	rjmp	.-710    	; 0x1c28 <mount_volume+0x14e>
    1eee:	8f ef       	ldi	r24, 0xFF	; 255
    1ef0:	9f ef       	ldi	r25, 0xFF	; 255
    1ef2:	dc 01       	movw	r26, r24
    1ef4:	f8 01       	movw	r30, r16
    1ef6:	87 87       	std	Z+15, r24	; 0x0f
    1ef8:	90 8b       	std	Z+16, r25	; 0x10
    1efa:	a1 8b       	std	Z+17, r26	; 0x11
    1efc:	b2 8b       	std	Z+18, r27	; 0x12
    1efe:	83 87       	std	Z+11, r24	; 0x0b
    1f00:	94 87       	std	Z+12, r25	; 0x0c
    1f02:	a5 87       	std	Z+13, r26	; 0x0d
    1f04:	b6 87       	std	Z+14, r27	; 0x0e
    1f06:	80 e8       	ldi	r24, 0x80	; 128
    1f08:	84 83       	std	Z+4, r24	; 0x04
    1f0a:	f3 e0       	ldi	r31, 0x03	; 3
    1f0c:	af 16       	cp	r10, r31
    1f0e:	b1 04       	cpc	r11, r1
    1f10:	09 f0       	breq	.+2      	; 0x1f14 <mount_volume+0x43a>
    1f12:	49 c0       	rjmp	.+146    	; 0x1fa6 <mount_volume+0x4cc>
    1f14:	f8 01       	movw	r30, r16
    1f16:	ed 59       	subi	r30, 0x9D	; 157
    1f18:	ff 4f       	sbci	r31, 0xFF	; 255
    1f1a:	80 81       	ld	r24, Z
    1f1c:	91 81       	ldd	r25, Z+1	; 0x01
    1f1e:	01 97       	sbiw	r24, 0x01	; 1
    1f20:	09 f0       	breq	.+2      	; 0x1f24 <mount_volume+0x44a>
    1f22:	41 c0       	rjmp	.+130    	; 0x1fa6 <mount_volume+0x4cc>
    1f24:	49 89       	ldd	r20, Y+17	; 0x11
    1f26:	5a 89       	ldd	r21, Y+18	; 0x12
    1f28:	6b 89       	ldd	r22, Y+19	; 0x13
    1f2a:	7c 89       	ldd	r23, Y+20	; 0x14
    1f2c:	4f 5f       	subi	r20, 0xFF	; 255
    1f2e:	5f 4f       	sbci	r21, 0xFF	; 255
    1f30:	6f 4f       	sbci	r22, 0xFF	; 255
    1f32:	7f 4f       	sbci	r23, 0xFF	; 255
    1f34:	c8 01       	movw	r24, r16
    1f36:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <move_window>
    1f3a:	81 11       	cpse	r24, r1
    1f3c:	34 c0       	rjmp	.+104    	; 0x1fa6 <mount_volume+0x4cc>
    1f3e:	d8 01       	movw	r26, r16
    1f40:	14 96       	adiw	r26, 0x04	; 4
    1f42:	1c 92       	st	X, r1
    1f44:	f8 01       	movw	r30, r16
    1f46:	ef 5c       	subi	r30, 0xCF	; 207
    1f48:	fd 4f       	sbci	r31, 0xFD	; 253
    1f4a:	80 81       	ld	r24, Z
    1f4c:	91 81       	ldd	r25, Z+1	; 0x01
    1f4e:	85 35       	cpi	r24, 0x55	; 85
    1f50:	9a 4a       	sbci	r25, 0xAA	; 170
    1f52:	49 f5       	brne	.+82     	; 0x1fa6 <mount_volume+0x4cc>
    1f54:	c8 01       	movw	r24, r16
    1f56:	c3 96       	adiw	r24, 0x33	; 51
    1f58:	0e 94 28 04 	call	0x850	; 0x850 <ld_dword>
    1f5c:	62 35       	cpi	r22, 0x52	; 82
    1f5e:	72 45       	sbci	r23, 0x52	; 82
    1f60:	81 46       	sbci	r24, 0x61	; 97
    1f62:	91 44       	sbci	r25, 0x41	; 65
    1f64:	01 f5       	brne	.+64     	; 0x1fa6 <mount_volume+0x4cc>
    1f66:	c8 01       	movw	r24, r16
    1f68:	89 5e       	subi	r24, 0xE9	; 233
    1f6a:	9d 4f       	sbci	r25, 0xFD	; 253
    1f6c:	0e 94 28 04 	call	0x850	; 0x850 <ld_dword>
    1f70:	62 37       	cpi	r22, 0x72	; 114
    1f72:	72 47       	sbci	r23, 0x72	; 114
    1f74:	81 44       	sbci	r24, 0x41	; 65
    1f76:	91 46       	sbci	r25, 0x61	; 97
    1f78:	b1 f4       	brne	.+44     	; 0x1fa6 <mount_volume+0x4cc>
    1f7a:	c8 01       	movw	r24, r16
    1f7c:	85 5e       	subi	r24, 0xE5	; 229
    1f7e:	9d 4f       	sbci	r25, 0xFD	; 253
    1f80:	0e 94 28 04 	call	0x850	; 0x850 <ld_dword>
    1f84:	d8 01       	movw	r26, r16
    1f86:	1f 96       	adiw	r26, 0x0f	; 15
    1f88:	6d 93       	st	X+, r22
    1f8a:	7d 93       	st	X+, r23
    1f8c:	8d 93       	st	X+, r24
    1f8e:	9c 93       	st	X, r25
    1f90:	52 97       	sbiw	r26, 0x12	; 18
    1f92:	c8 01       	movw	r24, r16
    1f94:	81 5e       	subi	r24, 0xE1	; 225
    1f96:	9d 4f       	sbci	r25, 0xFD	; 253
    1f98:	0e 94 28 04 	call	0x850	; 0x850 <ld_dword>
    1f9c:	f8 01       	movw	r30, r16
    1f9e:	63 87       	std	Z+11, r22	; 0x0b
    1fa0:	74 87       	std	Z+12, r23	; 0x0c
    1fa2:	85 87       	std	Z+13, r24	; 0x0d
    1fa4:	96 87       	std	Z+14, r25	; 0x0e
    1fa6:	d8 01       	movw	r26, r16
    1fa8:	ac 92       	st	X, r10
    1faa:	80 91 7f 02 	lds	r24, 0x027F	; 0x80027f <Fsid>
    1fae:	90 91 80 02 	lds	r25, 0x0280	; 0x800280 <Fsid+0x1>
    1fb2:	01 96       	adiw	r24, 0x01	; 1
    1fb4:	90 93 80 02 	sts	0x0280, r25	; 0x800280 <Fsid+0x1>
    1fb8:	80 93 7f 02 	sts	0x027F, r24	; 0x80027f <Fsid>
    1fbc:	16 96       	adiw	r26, 0x06	; 6
    1fbe:	9c 93       	st	X, r25
    1fc0:	8e 93       	st	-X, r24
    1fc2:	15 97       	sbiw	r26, 0x05	; 5
    1fc4:	f8 01       	movw	r30, r16
    1fc6:	13 8a       	std	Z+19, r1	; 0x13
    1fc8:	14 8a       	std	Z+20, r1	; 0x14
    1fca:	15 8a       	std	Z+21, r1	; 0x15
    1fcc:	16 8a       	std	Z+22, r1	; 0x16
    1fce:	04 c0       	rjmp	.+8      	; 0x1fd8 <mount_volume+0x4fe>
    1fd0:	8b e0       	ldi	r24, 0x0B	; 11
    1fd2:	0e c0       	rjmp	.+28     	; 0x1ff0 <mount_volume+0x516>
    1fd4:	8c e0       	ldi	r24, 0x0C	; 12
    1fd6:	0c c0       	rjmp	.+24     	; 0x1ff0 <mount_volume+0x516>
    1fd8:	80 e0       	ldi	r24, 0x00	; 0
    1fda:	0a c0       	rjmp	.+20     	; 0x1ff0 <mount_volume+0x516>
    1fdc:	83 e0       	ldi	r24, 0x03	; 3
    1fde:	08 c0       	rjmp	.+16     	; 0x1ff0 <mount_volume+0x516>
    1fe0:	81 e0       	ldi	r24, 0x01	; 1
    1fe2:	06 c0       	rjmp	.+12     	; 0x1ff0 <mount_volume+0x516>
    1fe4:	83 e0       	ldi	r24, 0x03	; 3
    1fe6:	90 e0       	ldi	r25, 0x00	; 0
    1fe8:	13 ce       	rjmp	.-986    	; 0x1c10 <mount_volume+0x136>
    1fea:	84 e0       	ldi	r24, 0x04	; 4
    1fec:	90 e0       	ldi	r25, 0x00	; 0
    1fee:	10 ce       	rjmp	.-992    	; 0x1c10 <mount_volume+0x136>
    1ff0:	a0 96       	adiw	r28, 0x20	; 32
    1ff2:	e0 e1       	ldi	r30, 0x10	; 16
    1ff4:	0c 94 fe 28 	jmp	0x51fc	; 0x51fc <__epilogue_restores__+0x4>

00001ff8 <f_mount>:
    1ff8:	a6 e0       	ldi	r26, 0x06	; 6
    1ffa:	b0 e0       	ldi	r27, 0x00	; 0
    1ffc:	e2 e0       	ldi	r30, 0x02	; 2
    1ffe:	f0 e1       	ldi	r31, 0x10	; 16
    2000:	0c 94 ef 28 	jmp	0x51de	; 0x51de <__prologue_saves__+0x1e>
    2004:	9c 83       	std	Y+4, r25	; 0x04
    2006:	8b 83       	std	Y+3, r24	; 0x03
    2008:	7e 83       	std	Y+6, r23	; 0x06
    200a:	6d 83       	std	Y+5, r22	; 0x05
    200c:	14 2f       	mov	r17, r20
    200e:	7a 83       	std	Y+2, r23	; 0x02
    2010:	69 83       	std	Y+1, r22	; 0x01
    2012:	ce 01       	movw	r24, r28
    2014:	01 96       	adiw	r24, 0x01	; 1
    2016:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <get_ldnumber>
    201a:	97 fd       	sbrc	r25, 7
    201c:	20 c0       	rjmp	.+64     	; 0x205e <f_mount+0x66>
    201e:	88 0f       	add	r24, r24
    2020:	99 1f       	adc	r25, r25
    2022:	fc 01       	movw	r30, r24
    2024:	ef 57       	subi	r30, 0x7F	; 127
    2026:	fd 4f       	sbci	r31, 0xFD	; 253
    2028:	01 90       	ld	r0, Z+
    202a:	f0 81       	ld	r31, Z
    202c:	e0 2d       	mov	r30, r0
    202e:	30 97       	sbiw	r30, 0x00	; 0
    2030:	09 f0       	breq	.+2      	; 0x2034 <f_mount+0x3c>
    2032:	10 82       	st	Z, r1
    2034:	eb 81       	ldd	r30, Y+3	; 0x03
    2036:	fc 81       	ldd	r31, Y+4	; 0x04
    2038:	30 97       	sbiw	r30, 0x00	; 0
    203a:	09 f0       	breq	.+2      	; 0x203e <f_mount+0x46>
    203c:	10 82       	st	Z, r1
    203e:	dc 01       	movw	r26, r24
    2040:	af 57       	subi	r26, 0x7F	; 127
    2042:	bd 4f       	sbci	r27, 0xFD	; 253
    2044:	ed 93       	st	X+, r30
    2046:	fc 93       	st	X, r31
    2048:	11 23       	and	r17, r17
    204a:	59 f0       	breq	.+22     	; 0x2062 <f_mount+0x6a>
    204c:	40 e0       	ldi	r20, 0x00	; 0
    204e:	be 01       	movw	r22, r28
    2050:	6d 5f       	subi	r22, 0xFD	; 253
    2052:	7f 4f       	sbci	r23, 0xFF	; 255
    2054:	ce 01       	movw	r24, r28
    2056:	05 96       	adiw	r24, 0x05	; 5
    2058:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <mount_volume>
    205c:	03 c0       	rjmp	.+6      	; 0x2064 <f_mount+0x6c>
    205e:	8b e0       	ldi	r24, 0x0B	; 11
    2060:	01 c0       	rjmp	.+2      	; 0x2064 <f_mount+0x6c>
    2062:	80 e0       	ldi	r24, 0x00	; 0
    2064:	26 96       	adiw	r28, 0x06	; 6
    2066:	e3 e0       	ldi	r30, 0x03	; 3
    2068:	0c 94 0b 29 	jmp	0x5216	; 0x5216 <__epilogue_restores__+0x1e>

0000206c <f_open>:
    206c:	a0 e3       	ldi	r26, 0x30	; 48
    206e:	b0 e0       	ldi	r27, 0x00	; 0
    2070:	ec e3       	ldi	r30, 0x3C	; 60
    2072:	f0 e1       	ldi	r31, 0x10	; 16
    2074:	0c 94 e2 28 	jmp	0x51c4	; 0x51c4 <__prologue_saves__+0x4>
    2078:	7c a7       	std	Y+44, r23	; 0x2c
    207a:	6b a7       	std	Y+43, r22	; 0x2b
    207c:	00 97       	sbiw	r24, 0x00	; 0
    207e:	09 f4       	brne	.+2      	; 0x2082 <f_open+0x16>
    2080:	5b c1       	rjmp	.+694    	; 0x2338 <f_open+0x2cc>
    2082:	14 2f       	mov	r17, r20
    2084:	7c 01       	movw	r14, r24
    2086:	24 2f       	mov	r18, r20
    2088:	2f 73       	andi	r18, 0x3F	; 63
    208a:	c2 2e       	mov	r12, r18
    208c:	42 2f       	mov	r20, r18
    208e:	be 01       	movw	r22, r28
    2090:	67 5d       	subi	r22, 0xD7	; 215
    2092:	7f 4f       	sbci	r23, 0xFF	; 255
    2094:	ce 01       	movw	r24, r28
    2096:	8b 96       	adiw	r24, 0x2b	; 43
    2098:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <mount_volume>
    209c:	d8 2e       	mov	r13, r24
    209e:	81 11       	cpse	r24, r1
    20a0:	58 c1       	rjmp	.+688    	; 0x2352 <f_open+0x2e6>
    20a2:	89 a5       	ldd	r24, Y+41	; 0x29
    20a4:	9a a5       	ldd	r25, Y+42	; 0x2a
    20a6:	9a 83       	std	Y+2, r25	; 0x02
    20a8:	89 83       	std	Y+1, r24	; 0x01
    20aa:	6b a5       	ldd	r22, Y+43	; 0x2b
    20ac:	7c a5       	ldd	r23, Y+44	; 0x2c
    20ae:	ce 01       	movw	r24, r28
    20b0:	01 96       	adiw	r24, 0x01	; 1
    20b2:	0e 94 bb 0b 	call	0x1776	; 0x1776 <follow_path>
    20b6:	81 11       	cpse	r24, r1
    20b8:	03 c0       	rjmp	.+6      	; 0x20c0 <f_open+0x54>
    20ba:	98 a5       	ldd	r25, Y+40	; 0x28
    20bc:	97 fd       	sbrc	r25, 7
    20be:	86 e0       	ldi	r24, 0x06	; 6
    20c0:	91 2f       	mov	r25, r17
    20c2:	9c 71       	andi	r25, 0x1C	; 28
    20c4:	09 f4       	brne	.+2      	; 0x20c8 <f_open+0x5c>
    20c6:	6d c0       	rjmp	.+218    	; 0x21a2 <f_open+0x136>
    20c8:	88 23       	and	r24, r24
    20ca:	61 f0       	breq	.+24     	; 0x20e4 <f_open+0x78>
    20cc:	84 30       	cpi	r24, 0x04	; 4
    20ce:	21 f4       	brne	.+8      	; 0x20d8 <f_open+0x6c>
    20d0:	ce 01       	movw	r24, r28
    20d2:	01 96       	adiw	r24, 0x01	; 1
    20d4:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <dir_register>
    20d8:	3c 2d       	mov	r19, r12
    20da:	38 60       	ori	r19, 0x08	; 8
    20dc:	c3 2e       	mov	r12, r19
    20de:	88 23       	and	r24, r24
    20e0:	39 f0       	breq	.+14     	; 0x20f0 <f_open+0x84>
    20e2:	31 c1       	rjmp	.+610    	; 0x2346 <f_open+0x2da>
    20e4:	8d 81       	ldd	r24, Y+5	; 0x05
    20e6:	81 71       	andi	r24, 0x11	; 17
    20e8:	09 f0       	breq	.+2      	; 0x20ec <f_open+0x80>
    20ea:	2c c1       	rjmp	.+600    	; 0x2344 <f_open+0x2d8>
    20ec:	12 fd       	sbrc	r17, 2
    20ee:	26 c1       	rjmp	.+588    	; 0x233c <f_open+0x2d0>
    20f0:	c3 fe       	sbrs	r12, 3
    20f2:	65 c0       	rjmp	.+202    	; 0x21be <f_open+0x152>
    20f4:	eb 8d       	ldd	r30, Y+27	; 0x1b
    20f6:	fc 8d       	ldd	r31, Y+28	; 0x1c
    20f8:	16 86       	std	Z+14, r1	; 0x0e
    20fa:	17 86       	std	Z+15, r1	; 0x0f
    20fc:	91 e2       	ldi	r25, 0x21	; 33
    20fe:	90 8b       	std	Z+16, r25	; 0x10
    2100:	80 e5       	ldi	r24, 0x50	; 80
    2102:	81 8b       	std	Z+17, r24	; 0x11
    2104:	eb 8d       	ldd	r30, Y+27	; 0x1b
    2106:	fc 8d       	ldd	r31, Y+28	; 0x1c
    2108:	16 8a       	std	Z+22, r1	; 0x16
    210a:	17 8a       	std	Z+23, r1	; 0x17
    210c:	90 8f       	std	Z+24, r25	; 0x18
    210e:	81 8f       	std	Z+25, r24	; 0x19
    2110:	ab 8c       	ldd	r10, Y+27	; 0x1b
    2112:	bc 8c       	ldd	r11, Y+28	; 0x1c
    2114:	09 a5       	ldd	r16, Y+41	; 0x29
    2116:	1a a5       	ldd	r17, Y+42	; 0x2a
    2118:	b5 01       	movw	r22, r10
    211a:	d8 01       	movw	r26, r16
    211c:	8c 91       	ld	r24, X
    211e:	0e 94 c1 04 	call	0x982	; 0x982 <ld_clust.isra.2>
    2122:	2b 01       	movw	r4, r22
    2124:	3c 01       	movw	r6, r24
    2126:	80 e2       	ldi	r24, 0x20	; 32
    2128:	f5 01       	movw	r30, r10
    212a:	83 87       	std	Z+11, r24	; 0x0b
    212c:	eb 8d       	ldd	r30, Y+27	; 0x1b
    212e:	fc 8d       	ldd	r31, Y+28	; 0x1c
    2130:	12 8e       	std	Z+26, r1	; 0x1a
    2132:	13 8e       	std	Z+27, r1	; 0x1b
    2134:	d8 01       	movw	r26, r16
    2136:	8c 91       	ld	r24, X
    2138:	83 30       	cpi	r24, 0x03	; 3
    213a:	11 f4       	brne	.+4      	; 0x2140 <f_open+0xd4>
    213c:	14 8a       	std	Z+20, r1	; 0x14
    213e:	15 8a       	std	Z+21, r1	; 0x15
    2140:	eb 8d       	ldd	r30, Y+27	; 0x1b
    2142:	fc 8d       	ldd	r31, Y+28	; 0x1c
    2144:	14 8e       	std	Z+28, r1	; 0x1c
    2146:	15 8e       	std	Z+29, r1	; 0x1d
    2148:	16 8e       	std	Z+30, r1	; 0x1e
    214a:	17 8e       	std	Z+31, r1	; 0x1f
    214c:	81 e0       	ldi	r24, 0x01	; 1
    214e:	f8 01       	movw	r30, r16
    2150:	83 83       	std	Z+3, r24	; 0x03
    2152:	41 14       	cp	r4, r1
    2154:	51 04       	cpc	r5, r1
    2156:	61 04       	cpc	r6, r1
    2158:	71 04       	cpc	r7, r1
    215a:	71 f1       	breq	.+92     	; 0x21b8 <f_open+0x14c>
    215c:	87 a4       	ldd	r8, Z+47	; 0x2f
    215e:	90 a8       	ldd	r9, Z+48	; 0x30
    2160:	a1 a8       	ldd	r10, Z+49	; 0x31
    2162:	b2 a8       	ldd	r11, Z+50	; 0x32
    2164:	00 e0       	ldi	r16, 0x00	; 0
    2166:	10 e0       	ldi	r17, 0x00	; 0
    2168:	98 01       	movw	r18, r16
    216a:	b3 01       	movw	r22, r6
    216c:	a2 01       	movw	r20, r4
    216e:	ce 01       	movw	r24, r28
    2170:	01 96       	adiw	r24, 0x01	; 1
    2172:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <remove_chain>
    2176:	81 11       	cpse	r24, r1
    2178:	e6 c0       	rjmp	.+460    	; 0x2346 <f_open+0x2da>
    217a:	b5 01       	movw	r22, r10
    217c:	a4 01       	movw	r20, r8
    217e:	89 a5       	ldd	r24, Y+41	; 0x29
    2180:	9a a5       	ldd	r25, Y+42	; 0x2a
    2182:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <move_window>
    2186:	e9 a5       	ldd	r30, Y+41	; 0x29
    2188:	fa a5       	ldd	r31, Y+42	; 0x2a
    218a:	21 e0       	ldi	r18, 0x01	; 1
    218c:	42 1a       	sub	r4, r18
    218e:	51 08       	sbc	r5, r1
    2190:	61 08       	sbc	r6, r1
    2192:	71 08       	sbc	r7, r1
    2194:	43 86       	std	Z+11, r4	; 0x0b
    2196:	54 86       	std	Z+12, r5	; 0x0c
    2198:	65 86       	std	Z+13, r6	; 0x0d
    219a:	76 86       	std	Z+14, r7	; 0x0e
    219c:	88 23       	and	r24, r24
    219e:	51 f0       	breq	.+20     	; 0x21b4 <f_open+0x148>
    21a0:	d2 c0       	rjmp	.+420    	; 0x2346 <f_open+0x2da>
    21a2:	81 11       	cpse	r24, r1
    21a4:	d0 c0       	rjmp	.+416    	; 0x2346 <f_open+0x2da>
    21a6:	8d 81       	ldd	r24, Y+5	; 0x05
    21a8:	84 fd       	sbrc	r24, 4
    21aa:	ca c0       	rjmp	.+404    	; 0x2340 <f_open+0x2d4>
    21ac:	11 ff       	sbrs	r17, 1
    21ae:	02 c0       	rjmp	.+4      	; 0x21b4 <f_open+0x148>
    21b0:	80 fd       	sbrc	r24, 0
    21b2:	c8 c0       	rjmp	.+400    	; 0x2344 <f_open+0x2d8>
    21b4:	c3 fe       	sbrs	r12, 3
    21b6:	03 c0       	rjmp	.+6      	; 0x21be <f_open+0x152>
    21b8:	3c 2d       	mov	r19, r12
    21ba:	30 64       	ori	r19, 0x40	; 64
    21bc:	c3 2e       	mov	r12, r19
    21be:	09 a5       	ldd	r16, Y+41	; 0x29
    21c0:	1a a5       	ldd	r17, Y+42	; 0x2a
    21c2:	f8 01       	movw	r30, r16
    21c4:	87 a5       	ldd	r24, Z+47	; 0x2f
    21c6:	90 a9       	ldd	r25, Z+48	; 0x30
    21c8:	a1 a9       	ldd	r26, Z+49	; 0x31
    21ca:	b2 a9       	ldd	r27, Z+50	; 0x32
    21cc:	f7 01       	movw	r30, r14
    21ce:	84 8f       	std	Z+28, r24	; 0x1c
    21d0:	95 8f       	std	Z+29, r25	; 0x1d
    21d2:	a6 8f       	std	Z+30, r26	; 0x1e
    21d4:	b7 8f       	std	Z+31, r27	; 0x1f
    21d6:	ab 8c       	ldd	r10, Y+27	; 0x1b
    21d8:	bc 8c       	ldd	r11, Y+28	; 0x1c
    21da:	b1 a2       	std	Z+33, r11	; 0x21
    21dc:	a0 a2       	std	Z+32, r10	; 0x20
    21de:	b5 01       	movw	r22, r10
    21e0:	d8 01       	movw	r26, r16
    21e2:	8c 91       	ld	r24, X
    21e4:	0e 94 c1 04 	call	0x982	; 0x982 <ld_clust.isra.2>
    21e8:	2b 01       	movw	r4, r22
    21ea:	3c 01       	movw	r6, r24
    21ec:	f7 01       	movw	r30, r14
    21ee:	66 83       	std	Z+6, r22	; 0x06
    21f0:	77 83       	std	Z+7, r23	; 0x07
    21f2:	80 87       	std	Z+8, r24	; 0x08
    21f4:	91 87       	std	Z+9, r25	; 0x09
    21f6:	c5 01       	movw	r24, r10
    21f8:	4c 96       	adiw	r24, 0x1c	; 28
    21fa:	0e 94 28 04 	call	0x850	; 0x850 <ld_dword>
    21fe:	4b 01       	movw	r8, r22
    2200:	5c 01       	movw	r10, r24
    2202:	d7 01       	movw	r26, r14
    2204:	1a 96       	adiw	r26, 0x0a	; 10
    2206:	6d 93       	st	X+, r22
    2208:	7d 93       	st	X+, r23
    220a:	8d 93       	st	X+, r24
    220c:	9c 93       	st	X, r25
    220e:	1d 97       	sbiw	r26, 0x0d	; 13
    2210:	11 96       	adiw	r26, 0x01	; 1
    2212:	1c 93       	st	X, r17
    2214:	0e 93       	st	-X, r16
    2216:	f8 01       	movw	r30, r16
    2218:	85 81       	ldd	r24, Z+5	; 0x05
    221a:	96 81       	ldd	r25, Z+6	; 0x06
    221c:	13 96       	adiw	r26, 0x03	; 3
    221e:	9c 93       	st	X, r25
    2220:	8e 93       	st	-X, r24
    2222:	12 97       	sbiw	r26, 0x02	; 2
    2224:	1e 96       	adiw	r26, 0x0e	; 14
    2226:	cc 92       	st	X, r12
    2228:	1e 97       	sbiw	r26, 0x0e	; 14
    222a:	1f 96       	adiw	r26, 0x0f	; 15
    222c:	1c 92       	st	X, r1
    222e:	1f 97       	sbiw	r26, 0x0f	; 15
    2230:	58 96       	adiw	r26, 0x18	; 24
    2232:	1d 92       	st	X+, r1
    2234:	1d 92       	st	X+, r1
    2236:	1d 92       	st	X+, r1
    2238:	1c 92       	st	X, r1
    223a:	5b 97       	sbiw	r26, 0x1b	; 27
    223c:	f7 01       	movw	r30, r14
    223e:	10 8a       	std	Z+16, r1	; 0x10
    2240:	11 8a       	std	Z+17, r1	; 0x11
    2242:	12 8a       	std	Z+18, r1	; 0x12
    2244:	13 8a       	std	Z+19, r1	; 0x13
    2246:	c5 fe       	sbrs	r12, 5
    2248:	80 c0       	rjmp	.+256    	; 0x234a <f_open+0x2de>
    224a:	81 14       	cp	r8, r1
    224c:	91 04       	cpc	r9, r1
    224e:	a1 04       	cpc	r10, r1
    2250:	b1 04       	cpc	r11, r1
    2252:	09 f4       	brne	.+2      	; 0x2256 <f_open+0x1ea>
    2254:	7a c0       	rjmp	.+244    	; 0x234a <f_open+0x2de>
    2256:	50 96       	adiw	r26, 0x10	; 16
    2258:	8d 92       	st	X+, r8
    225a:	9d 92       	st	X+, r9
    225c:	ad 92       	st	X+, r10
    225e:	bc 92       	st	X, r11
    2260:	53 97       	sbiw	r26, 0x13	; 19
    2262:	f8 01       	movw	r30, r16
    2264:	81 85       	ldd	r24, Z+9	; 0x09
    2266:	92 85       	ldd	r25, Z+10	; 0x0a
    2268:	a0 e0       	ldi	r26, 0x00	; 0
    226a:	b0 e0       	ldi	r27, 0x00	; 0
    226c:	9c 01       	movw	r18, r24
    226e:	ad 01       	movw	r20, r26
    2270:	69 e0       	ldi	r22, 0x09	; 9
    2272:	22 0f       	add	r18, r18
    2274:	33 1f       	adc	r19, r19
    2276:	44 1f       	adc	r20, r20
    2278:	55 1f       	adc	r21, r21
    227a:	6a 95       	dec	r22
    227c:	d1 f7       	brne	.-12     	; 0x2272 <f_open+0x206>
    227e:	2d a7       	std	Y+45, r18	; 0x2d
    2280:	3e a7       	std	Y+46, r19	; 0x2e
    2282:	4f a7       	std	Y+47, r20	; 0x2f
    2284:	58 ab       	std	Y+48, r21	; 0x30
    2286:	8d a5       	ldd	r24, Y+45	; 0x2d
    2288:	9e a5       	ldd	r25, Y+46	; 0x2e
    228a:	af a5       	ldd	r26, Y+47	; 0x2f
    228c:	b8 a9       	ldd	r27, Y+48	; 0x30
    228e:	88 15       	cp	r24, r8
    2290:	99 05       	cpc	r25, r9
    2292:	aa 05       	cpc	r26, r10
    2294:	bb 05       	cpc	r27, r11
    2296:	00 f5       	brcc	.+64     	; 0x22d8 <f_open+0x26c>
    2298:	b3 01       	movw	r22, r6
    229a:	a2 01       	movw	r20, r4
    229c:	d7 01       	movw	r26, r14
    229e:	8d 91       	ld	r24, X+
    22a0:	9c 91       	ld	r25, X
    22a2:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <get_fat.isra.9>
    22a6:	2b 01       	movw	r4, r22
    22a8:	3c 01       	movw	r6, r24
    22aa:	2d a5       	ldd	r18, Y+45	; 0x2d
    22ac:	3e a5       	ldd	r19, Y+46	; 0x2e
    22ae:	4f a5       	ldd	r20, Y+47	; 0x2f
    22b0:	58 a9       	ldd	r21, Y+48	; 0x30
    22b2:	82 1a       	sub	r8, r18
    22b4:	93 0a       	sbc	r9, r19
    22b6:	a4 0a       	sbc	r10, r20
    22b8:	b5 0a       	sbc	r11, r21
    22ba:	62 30       	cpi	r22, 0x02	; 2
    22bc:	71 05       	cpc	r23, r1
    22be:	81 05       	cpc	r24, r1
    22c0:	91 05       	cpc	r25, r1
    22c2:	40 f0       	brcs	.+16     	; 0x22d4 <f_open+0x268>
    22c4:	6f 3f       	cpi	r22, 0xFF	; 255
    22c6:	7f 4f       	sbci	r23, 0xFF	; 255
    22c8:	8f 4f       	sbci	r24, 0xFF	; 255
    22ca:	9f 4f       	sbci	r25, 0xFF	; 255
    22cc:	e1 f6       	brne	.-72     	; 0x2286 <f_open+0x21a>
    22ce:	dd 24       	eor	r13, r13
    22d0:	d3 94       	inc	r13
    22d2:	02 c0       	rjmp	.+4      	; 0x22d8 <f_open+0x26c>
    22d4:	82 e0       	ldi	r24, 0x02	; 2
    22d6:	d8 2e       	mov	r13, r24
    22d8:	d7 01       	movw	r26, r14
    22da:	54 96       	adiw	r26, 0x14	; 20
    22dc:	4d 92       	st	X+, r4
    22de:	5d 92       	st	X+, r5
    22e0:	6d 92       	st	X+, r6
    22e2:	7c 92       	st	X, r7
    22e4:	57 97       	sbiw	r26, 0x17	; 23
    22e6:	d1 10       	cpse	r13, r1
    22e8:	34 c0       	rjmp	.+104    	; 0x2352 <f_open+0x2e6>
    22ea:	d5 01       	movw	r26, r10
    22ec:	c4 01       	movw	r24, r8
    22ee:	91 70       	andi	r25, 0x01	; 1
    22f0:	aa 27       	eor	r26, r26
    22f2:	bb 27       	eor	r27, r27
    22f4:	89 2b       	or	r24, r25
    22f6:	8a 2b       	or	r24, r26
    22f8:	8b 2b       	or	r24, r27
    22fa:	39 f1       	breq	.+78     	; 0x234a <f_open+0x2de>
    22fc:	b3 01       	movw	r22, r6
    22fe:	a2 01       	movw	r20, r4
    2300:	89 a5       	ldd	r24, Y+41	; 0x29
    2302:	9a a5       	ldd	r25, Y+42	; 0x2a
    2304:	0e 94 43 04 	call	0x886	; 0x886 <clst2sect>
    2308:	61 15       	cp	r22, r1
    230a:	71 05       	cpc	r23, r1
    230c:	81 05       	cpc	r24, r1
    230e:	91 05       	cpc	r25, r1
    2310:	f1 f0       	breq	.+60     	; 0x234e <f_open+0x2e2>
    2312:	29 e0       	ldi	r18, 0x09	; 9
    2314:	b6 94       	lsr	r11
    2316:	a7 94       	ror	r10
    2318:	97 94       	ror	r9
    231a:	87 94       	ror	r8
    231c:	2a 95       	dec	r18
    231e:	d1 f7       	brne	.-12     	; 0x2314 <f_open+0x2a8>
    2320:	dc 01       	movw	r26, r24
    2322:	cb 01       	movw	r24, r22
    2324:	88 0d       	add	r24, r8
    2326:	99 1d       	adc	r25, r9
    2328:	aa 1d       	adc	r26, r10
    232a:	bb 1d       	adc	r27, r11
    232c:	f7 01       	movw	r30, r14
    232e:	80 8f       	std	Z+24, r24	; 0x18
    2330:	91 8f       	std	Z+25, r25	; 0x19
    2332:	a2 8f       	std	Z+26, r26	; 0x1a
    2334:	b3 8f       	std	Z+27, r27	; 0x1b
    2336:	09 c0       	rjmp	.+18     	; 0x234a <f_open+0x2de>
    2338:	89 e0       	ldi	r24, 0x09	; 9
    233a:	0f c0       	rjmp	.+30     	; 0x235a <f_open+0x2ee>
    233c:	88 e0       	ldi	r24, 0x08	; 8
    233e:	03 c0       	rjmp	.+6      	; 0x2346 <f_open+0x2da>
    2340:	84 e0       	ldi	r24, 0x04	; 4
    2342:	01 c0       	rjmp	.+2      	; 0x2346 <f_open+0x2da>
    2344:	87 e0       	ldi	r24, 0x07	; 7
    2346:	d8 2e       	mov	r13, r24
    2348:	04 c0       	rjmp	.+8      	; 0x2352 <f_open+0x2e6>
    234a:	80 e0       	ldi	r24, 0x00	; 0
    234c:	06 c0       	rjmp	.+12     	; 0x235a <f_open+0x2ee>
    234e:	92 e0       	ldi	r25, 0x02	; 2
    2350:	d9 2e       	mov	r13, r25
    2352:	d7 01       	movw	r26, r14
    2354:	1d 92       	st	X+, r1
    2356:	1c 92       	st	X, r1
    2358:	8d 2d       	mov	r24, r13
    235a:	e0 96       	adiw	r28, 0x30	; 48
    235c:	e0 e1       	ldi	r30, 0x10	; 16
    235e:	0c 94 fe 28 	jmp	0x51fc	; 0x51fc <__epilogue_restores__+0x4>

00002362 <f_write>:
    2362:	a4 e0       	ldi	r26, 0x04	; 4
    2364:	b0 e0       	ldi	r27, 0x00	; 0
    2366:	e7 eb       	ldi	r30, 0xB7	; 183
    2368:	f1 e1       	ldi	r31, 0x11	; 17
    236a:	0c 94 e0 28 	jmp	0x51c0	; 0x51c0 <__prologue_saves__>
    236e:	7c 01       	movw	r14, r24
    2370:	4b 01       	movw	r8, r22
    2372:	5a 01       	movw	r10, r20
    2374:	3c 83       	std	Y+4, r19	; 0x04
    2376:	2b 83       	std	Y+3, r18	; 0x03
    2378:	f9 01       	movw	r30, r18
    237a:	11 82       	std	Z+1, r1	; 0x01
    237c:	10 82       	st	Z, r1
    237e:	be 01       	movw	r22, r28
    2380:	6f 5f       	subi	r22, 0xFF	; 255
    2382:	7f 4f       	sbci	r23, 0xFF	; 255
    2384:	0e 94 97 04 	call	0x92e	; 0x92e <validate>
    2388:	81 11       	cpse	r24, r1
    238a:	72 c1       	rjmp	.+740    	; 0x2670 <f_write+0x30e>
    238c:	f7 01       	movw	r30, r14
    238e:	87 85       	ldd	r24, Z+15	; 0x0f
    2390:	81 11       	cpse	r24, r1
    2392:	6e c1       	rjmp	.+732    	; 0x2670 <f_write+0x30e>
    2394:	86 85       	ldd	r24, Z+14	; 0x0e
    2396:	81 ff       	sbrs	r24, 1
    2398:	6a c1       	rjmp	.+724    	; 0x266e <f_write+0x30c>
    239a:	80 89       	ldd	r24, Z+16	; 0x10
    239c:	91 89       	ldd	r25, Z+17	; 0x11
    239e:	a2 89       	ldd	r26, Z+18	; 0x12
    23a0:	b3 89       	ldd	r27, Z+19	; 0x13
    23a2:	ac 01       	movw	r20, r24
    23a4:	bd 01       	movw	r22, r26
    23a6:	4a 0d       	add	r20, r10
    23a8:	5b 1d       	adc	r21, r11
    23aa:	61 1d       	adc	r22, r1
    23ac:	71 1d       	adc	r23, r1
    23ae:	48 17       	cp	r20, r24
    23b0:	59 07       	cpc	r21, r25
    23b2:	6a 07       	cpc	r22, r26
    23b4:	7b 07       	cpc	r23, r27
    23b6:	08 f0       	brcs	.+2      	; 0x23ba <f_write+0x58>
    23b8:	be c0       	rjmp	.+380    	; 0x2536 <f_write+0x1d4>
    23ba:	5c 01       	movw	r10, r24
    23bc:	a0 94       	com	r10
    23be:	b0 94       	com	r11
    23c0:	ba c0       	rjmp	.+372    	; 0x2536 <f_write+0x1d4>
    23c2:	f7 01       	movw	r30, r14
    23c4:	80 89       	ldd	r24, Z+16	; 0x10
    23c6:	91 89       	ldd	r25, Z+17	; 0x11
    23c8:	a2 89       	ldd	r26, Z+18	; 0x12
    23ca:	b3 89       	ldd	r27, Z+19	; 0x13
    23cc:	ac 01       	movw	r20, r24
    23ce:	bd 01       	movw	r22, r26
    23d0:	51 70       	andi	r21, 0x01	; 1
    23d2:	66 27       	eor	r22, r22
    23d4:	77 27       	eor	r23, r23
    23d6:	45 2b       	or	r20, r21
    23d8:	46 2b       	or	r20, r22
    23da:	47 2b       	or	r20, r23
    23dc:	09 f0       	breq	.+2      	; 0x23e0 <f_write+0x7e>
    23de:	1c c1       	rjmp	.+568    	; 0x2618 <f_write+0x2b6>
    23e0:	e9 81       	ldd	r30, Y+1	; 0x01
    23e2:	fa 81       	ldd	r31, Y+2	; 0x02
    23e4:	01 85       	ldd	r16, Z+9	; 0x09
    23e6:	12 85       	ldd	r17, Z+10	; 0x0a
    23e8:	01 50       	subi	r16, 0x01	; 1
    23ea:	11 09       	sbc	r17, r1
    23ec:	ac 01       	movw	r20, r24
    23ee:	bd 01       	movw	r22, r26
    23f0:	e9 e0       	ldi	r30, 0x09	; 9
    23f2:	76 95       	lsr	r23
    23f4:	67 95       	ror	r22
    23f6:	57 95       	ror	r21
    23f8:	47 95       	ror	r20
    23fa:	ea 95       	dec	r30
    23fc:	d1 f7       	brne	.-12     	; 0x23f2 <f_write+0x90>
    23fe:	04 23       	and	r16, r20
    2400:	15 23       	and	r17, r21
    2402:	01 15       	cp	r16, r1
    2404:	11 05       	cpc	r17, r1
    2406:	09 f4       	brne	.+2      	; 0x240a <f_write+0xa8>
    2408:	9b c0       	rjmp	.+310    	; 0x2540 <f_write+0x1de>
    240a:	89 81       	ldd	r24, Y+1	; 0x01
    240c:	9a 81       	ldd	r25, Y+2	; 0x02
    240e:	fc 01       	movw	r30, r24
    2410:	47 a4       	ldd	r4, Z+47	; 0x2f
    2412:	50 a8       	ldd	r5, Z+48	; 0x30
    2414:	61 a8       	ldd	r6, Z+49	; 0x31
    2416:	72 a8       	ldd	r7, Z+50	; 0x32
    2418:	f7 01       	movw	r30, r14
    241a:	40 8d       	ldd	r20, Z+24	; 0x18
    241c:	51 8d       	ldd	r21, Z+25	; 0x19
    241e:	62 8d       	ldd	r22, Z+26	; 0x1a
    2420:	73 8d       	ldd	r23, Z+27	; 0x1b
    2422:	44 16       	cp	r4, r20
    2424:	55 06       	cpc	r5, r21
    2426:	66 06       	cpc	r6, r22
    2428:	77 06       	cpc	r7, r23
    242a:	09 f4       	brne	.+2      	; 0x242e <f_write+0xcc>
    242c:	d1 c0       	rjmp	.+418    	; 0x25d0 <f_write+0x26e>
    242e:	69 80       	ldd	r6, Y+1	; 0x01
    2430:	7a 80       	ldd	r7, Y+2	; 0x02
    2432:	f7 01       	movw	r30, r14
    2434:	44 89       	ldd	r20, Z+20	; 0x14
    2436:	55 89       	ldd	r21, Z+21	; 0x15
    2438:	66 89       	ldd	r22, Z+22	; 0x16
    243a:	77 89       	ldd	r23, Z+23	; 0x17
    243c:	c3 01       	movw	r24, r6
    243e:	0e 94 43 04 	call	0x886	; 0x886 <clst2sect>
    2442:	61 15       	cp	r22, r1
    2444:	71 05       	cpc	r23, r1
    2446:	81 05       	cpc	r24, r1
    2448:	91 05       	cpc	r25, r1
    244a:	09 f4       	brne	.+2      	; 0x244e <f_write+0xec>
    244c:	a2 c0       	rjmp	.+324    	; 0x2592 <f_write+0x230>
    244e:	1b 01       	movw	r2, r22
    2450:	2c 01       	movw	r4, r24
    2452:	20 0e       	add	r2, r16
    2454:	31 1e       	adc	r3, r17
    2456:	41 1c       	adc	r4, r1
    2458:	51 1c       	adc	r5, r1
    245a:	65 01       	movw	r12, r10
    245c:	cd 2c       	mov	r12, r13
    245e:	dd 24       	eor	r13, r13
    2460:	c6 94       	lsr	r12
    2462:	c1 14       	cp	r12, r1
    2464:	d1 04       	cpc	r13, r1
    2466:	09 f4       	brne	.+2      	; 0x246a <f_write+0x108>
    2468:	b9 c0       	rjmp	.+370    	; 0x25dc <f_write+0x27a>
    246a:	f3 01       	movw	r30, r6
    246c:	81 85       	ldd	r24, Z+9	; 0x09
    246e:	92 85       	ldd	r25, Z+10	; 0x0a
    2470:	98 01       	movw	r18, r16
    2472:	2c 0d       	add	r18, r12
    2474:	3d 1d       	adc	r19, r13
    2476:	82 17       	cp	r24, r18
    2478:	93 07       	cpc	r25, r19
    247a:	18 f4       	brcc	.+6      	; 0x2482 <f_write+0x120>
    247c:	6c 01       	movw	r12, r24
    247e:	c0 1a       	sub	r12, r16
    2480:	d1 0a       	sbc	r13, r17
    2482:	86 01       	movw	r16, r12
    2484:	a2 01       	movw	r20, r4
    2486:	91 01       	movw	r18, r2
    2488:	b4 01       	movw	r22, r8
    248a:	f3 01       	movw	r30, r6
    248c:	81 81       	ldd	r24, Z+1	; 0x01
    248e:	0e 94 e7 1d 	call	0x3bce	; 0x3bce <disk_write>
    2492:	81 11       	cpse	r24, r1
    2494:	86 c0       	rjmp	.+268    	; 0x25a2 <f_write+0x240>
    2496:	89 81       	ldd	r24, Y+1	; 0x01
    2498:	9a 81       	ldd	r25, Y+2	; 0x02
    249a:	fc 01       	movw	r30, r24
    249c:	47 a5       	ldd	r20, Z+47	; 0x2f
    249e:	50 a9       	ldd	r21, Z+48	; 0x30
    24a0:	61 a9       	ldd	r22, Z+49	; 0x31
    24a2:	72 a9       	ldd	r23, Z+50	; 0x32
    24a4:	42 19       	sub	r20, r2
    24a6:	53 09       	sbc	r21, r3
    24a8:	64 09       	sbc	r22, r4
    24aa:	75 09       	sbc	r23, r5
    24ac:	86 01       	movw	r16, r12
    24ae:	20 e0       	ldi	r18, 0x00	; 0
    24b0:	30 e0       	ldi	r19, 0x00	; 0
    24b2:	40 17       	cp	r20, r16
    24b4:	51 07       	cpc	r21, r17
    24b6:	62 07       	cpc	r22, r18
    24b8:	73 07       	cpc	r23, r19
    24ba:	88 f4       	brcc	.+34     	; 0x24de <f_write+0x17c>
    24bc:	dc 01       	movw	r26, r24
    24be:	d3 96       	adiw	r26, 0x33	; 51
    24c0:	fa 01       	movw	r30, r20
    24c2:	fe 2f       	mov	r31, r30
    24c4:	ee 27       	eor	r30, r30
    24c6:	ff 0f       	add	r31, r31
    24c8:	e8 0d       	add	r30, r8
    24ca:	f9 1d       	adc	r31, r9
    24cc:	20 e0       	ldi	r18, 0x00	; 0
    24ce:	32 e0       	ldi	r19, 0x02	; 2
    24d0:	01 90       	ld	r0, Z+
    24d2:	0d 92       	st	X+, r0
    24d4:	21 50       	subi	r18, 0x01	; 1
    24d6:	30 40       	sbci	r19, 0x00	; 0
    24d8:	d9 f7       	brne	.-10     	; 0x24d0 <f_write+0x16e>
    24da:	fc 01       	movw	r30, r24
    24dc:	13 82       	std	Z+3, r1	; 0x03
    24de:	dc 2c       	mov	r13, r12
    24e0:	cc 24       	eor	r12, r12
    24e2:	dd 0c       	add	r13, r13
    24e4:	ac 18       	sub	r10, r12
    24e6:	bd 08       	sbc	r11, r13
    24e8:	eb 81       	ldd	r30, Y+3	; 0x03
    24ea:	fc 81       	ldd	r31, Y+4	; 0x04
    24ec:	80 81       	ld	r24, Z
    24ee:	91 81       	ldd	r25, Z+1	; 0x01
    24f0:	8c 0d       	add	r24, r12
    24f2:	9d 1d       	adc	r25, r13
    24f4:	91 83       	std	Z+1, r25	; 0x01
    24f6:	80 83       	st	Z, r24
    24f8:	8c 0c       	add	r8, r12
    24fa:	9d 1c       	adc	r9, r13
    24fc:	f7 01       	movw	r30, r14
    24fe:	80 89       	ldd	r24, Z+16	; 0x10
    2500:	91 89       	ldd	r25, Z+17	; 0x11
    2502:	a2 89       	ldd	r26, Z+18	; 0x12
    2504:	b3 89       	ldd	r27, Z+19	; 0x13
    2506:	8c 0d       	add	r24, r12
    2508:	9d 1d       	adc	r25, r13
    250a:	a1 1d       	adc	r26, r1
    250c:	b1 1d       	adc	r27, r1
    250e:	80 8b       	std	Z+16, r24	; 0x10
    2510:	91 8b       	std	Z+17, r25	; 0x11
    2512:	a2 8b       	std	Z+18, r26	; 0x12
    2514:	b3 8b       	std	Z+19, r27	; 0x13
    2516:	42 85       	ldd	r20, Z+10	; 0x0a
    2518:	53 85       	ldd	r21, Z+11	; 0x0b
    251a:	64 85       	ldd	r22, Z+12	; 0x0c
    251c:	75 85       	ldd	r23, Z+13	; 0x0d
    251e:	48 17       	cp	r20, r24
    2520:	59 07       	cpc	r21, r25
    2522:	6a 07       	cpc	r22, r26
    2524:	7b 07       	cpc	r23, r27
    2526:	10 f4       	brcc	.+4      	; 0x252c <f_write+0x1ca>
    2528:	ac 01       	movw	r20, r24
    252a:	bd 01       	movw	r22, r26
    252c:	f7 01       	movw	r30, r14
    252e:	42 87       	std	Z+10, r20	; 0x0a
    2530:	53 87       	std	Z+11, r21	; 0x0b
    2532:	64 87       	std	Z+12, r22	; 0x0c
    2534:	75 87       	std	Z+13, r23	; 0x0d
    2536:	a1 14       	cp	r10, r1
    2538:	b1 04       	cpc	r11, r1
    253a:	09 f0       	breq	.+2      	; 0x253e <f_write+0x1dc>
    253c:	42 cf       	rjmp	.-380    	; 0x23c2 <f_write+0x60>
    253e:	1e c0       	rjmp	.+60     	; 0x257c <f_write+0x21a>
    2540:	f7 01       	movw	r30, r14
    2542:	89 2b       	or	r24, r25
    2544:	8a 2b       	or	r24, r26
    2546:	8b 2b       	or	r24, r27
    2548:	69 f4       	brne	.+26     	; 0x2564 <f_write+0x202>
    254a:	66 81       	ldd	r22, Z+6	; 0x06
    254c:	77 81       	ldd	r23, Z+7	; 0x07
    254e:	80 85       	ldd	r24, Z+8	; 0x08
    2550:	91 85       	ldd	r25, Z+9	; 0x09
    2552:	61 15       	cp	r22, r1
    2554:	71 05       	cpc	r23, r1
    2556:	81 05       	cpc	r24, r1
    2558:	91 05       	cpc	r25, r1
    255a:	b1 f4       	brne	.+44     	; 0x2588 <f_write+0x226>
    255c:	40 e0       	ldi	r20, 0x00	; 0
    255e:	50 e0       	ldi	r21, 0x00	; 0
    2560:	ba 01       	movw	r22, r20
    2562:	04 c0       	rjmp	.+8      	; 0x256c <f_write+0x20a>
    2564:	44 89       	ldd	r20, Z+20	; 0x14
    2566:	55 89       	ldd	r21, Z+21	; 0x15
    2568:	66 89       	ldd	r22, Z+22	; 0x16
    256a:	77 89       	ldd	r23, Z+23	; 0x17
    256c:	c7 01       	movw	r24, r14
    256e:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <create_chain>
    2572:	61 15       	cp	r22, r1
    2574:	71 05       	cpc	r23, r1
    2576:	81 05       	cpc	r24, r1
    2578:	91 05       	cpc	r25, r1
    257a:	31 f4       	brne	.+12     	; 0x2588 <f_write+0x226>
    257c:	f7 01       	movw	r30, r14
    257e:	86 85       	ldd	r24, Z+14	; 0x0e
    2580:	80 64       	ori	r24, 0x40	; 64
    2582:	86 87       	std	Z+14, r24	; 0x0e
    2584:	80 e0       	ldi	r24, 0x00	; 0
    2586:	74 c0       	rjmp	.+232    	; 0x2670 <f_write+0x30e>
    2588:	61 30       	cpi	r22, 0x01	; 1
    258a:	71 05       	cpc	r23, r1
    258c:	81 05       	cpc	r24, r1
    258e:	91 05       	cpc	r25, r1
    2590:	11 f4       	brne	.+4      	; 0x2596 <f_write+0x234>
    2592:	82 e0       	ldi	r24, 0x02	; 2
    2594:	07 c0       	rjmp	.+14     	; 0x25a4 <f_write+0x242>
    2596:	6f 3f       	cpi	r22, 0xFF	; 255
    2598:	ff ef       	ldi	r31, 0xFF	; 255
    259a:	7f 07       	cpc	r23, r31
    259c:	8f 07       	cpc	r24, r31
    259e:	9f 07       	cpc	r25, r31
    25a0:	21 f4       	brne	.+8      	; 0x25aa <f_write+0x248>
    25a2:	81 e0       	ldi	r24, 0x01	; 1
    25a4:	f7 01       	movw	r30, r14
    25a6:	87 87       	std	Z+15, r24	; 0x0f
    25a8:	63 c0       	rjmp	.+198    	; 0x2670 <f_write+0x30e>
    25aa:	f7 01       	movw	r30, r14
    25ac:	64 8b       	std	Z+20, r22	; 0x14
    25ae:	75 8b       	std	Z+21, r23	; 0x15
    25b0:	86 8b       	std	Z+22, r24	; 0x16
    25b2:	97 8b       	std	Z+23, r25	; 0x17
    25b4:	46 80       	ldd	r4, Z+6	; 0x06
    25b6:	57 80       	ldd	r5, Z+7	; 0x07
    25b8:	60 84       	ldd	r6, Z+8	; 0x08
    25ba:	71 84       	ldd	r7, Z+9	; 0x09
    25bc:	45 28       	or	r4, r5
    25be:	46 28       	or	r4, r6
    25c0:	47 28       	or	r4, r7
    25c2:	09 f0       	breq	.+2      	; 0x25c6 <f_write+0x264>
    25c4:	22 cf       	rjmp	.-444    	; 0x240a <f_write+0xa8>
    25c6:	66 83       	std	Z+6, r22	; 0x06
    25c8:	77 83       	std	Z+7, r23	; 0x07
    25ca:	80 87       	std	Z+8, r24	; 0x08
    25cc:	91 87       	std	Z+9, r25	; 0x09
    25ce:	1d cf       	rjmp	.-454    	; 0x240a <f_write+0xa8>
    25d0:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <sync_window>
    25d4:	88 23       	and	r24, r24
    25d6:	09 f4       	brne	.+2      	; 0x25da <f_write+0x278>
    25d8:	2a cf       	rjmp	.-428    	; 0x242e <f_write+0xcc>
    25da:	e3 cf       	rjmp	.-58     	; 0x25a2 <f_write+0x240>
    25dc:	f7 01       	movw	r30, r14
    25de:	40 89       	ldd	r20, Z+16	; 0x10
    25e0:	51 89       	ldd	r21, Z+17	; 0x11
    25e2:	62 89       	ldd	r22, Z+18	; 0x12
    25e4:	73 89       	ldd	r23, Z+19	; 0x13
    25e6:	82 85       	ldd	r24, Z+10	; 0x0a
    25e8:	93 85       	ldd	r25, Z+11	; 0x0b
    25ea:	a4 85       	ldd	r26, Z+12	; 0x0c
    25ec:	b5 85       	ldd	r27, Z+13	; 0x0d
    25ee:	48 17       	cp	r20, r24
    25f0:	59 07       	cpc	r21, r25
    25f2:	6a 07       	cpc	r22, r26
    25f4:	7b 07       	cpc	r23, r27
    25f6:	58 f0       	brcs	.+22     	; 0x260e <f_write+0x2ac>
    25f8:	c3 01       	movw	r24, r6
    25fa:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <sync_window>
    25fe:	81 11       	cpse	r24, r1
    2600:	d0 cf       	rjmp	.-96     	; 0x25a2 <f_write+0x240>
    2602:	e9 81       	ldd	r30, Y+1	; 0x01
    2604:	fa 81       	ldd	r31, Y+2	; 0x02
    2606:	27 a6       	std	Z+47, r2	; 0x2f
    2608:	30 aa       	std	Z+48, r3	; 0x30
    260a:	41 aa       	std	Z+49, r4	; 0x31
    260c:	52 aa       	std	Z+50, r5	; 0x32
    260e:	f7 01       	movw	r30, r14
    2610:	20 8e       	std	Z+24, r2	; 0x18
    2612:	31 8e       	std	Z+25, r3	; 0x19
    2614:	42 8e       	std	Z+26, r4	; 0x1a
    2616:	53 8e       	std	Z+27, r5	; 0x1b
    2618:	f7 01       	movw	r30, r14
    261a:	80 89       	ldd	r24, Z+16	; 0x10
    261c:	91 89       	ldd	r25, Z+17	; 0x11
    261e:	91 70       	andi	r25, 0x01	; 1
    2620:	20 e0       	ldi	r18, 0x00	; 0
    2622:	32 e0       	ldi	r19, 0x02	; 2
    2624:	28 1b       	sub	r18, r24
    2626:	39 0b       	sbc	r19, r25
    2628:	65 01       	movw	r12, r10
    262a:	2a 15       	cp	r18, r10
    262c:	3b 05       	cpc	r19, r11
    262e:	08 f4       	brcc	.+2      	; 0x2632 <f_write+0x2d0>
    2630:	69 01       	movw	r12, r18
    2632:	f7 01       	movw	r30, r14
    2634:	40 8d       	ldd	r20, Z+24	; 0x18
    2636:	51 8d       	ldd	r21, Z+25	; 0x19
    2638:	62 8d       	ldd	r22, Z+26	; 0x1a
    263a:	73 8d       	ldd	r23, Z+27	; 0x1b
    263c:	89 81       	ldd	r24, Y+1	; 0x01
    263e:	9a 81       	ldd	r25, Y+2	; 0x02
    2640:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <move_window>
    2644:	81 11       	cpse	r24, r1
    2646:	ad cf       	rjmp	.-166    	; 0x25a2 <f_write+0x240>
    2648:	29 81       	ldd	r18, Y+1	; 0x01
    264a:	3a 81       	ldd	r19, Y+2	; 0x02
    264c:	2d 5c       	subi	r18, 0xCD	; 205
    264e:	3f 4f       	sbci	r19, 0xFF	; 255
    2650:	f7 01       	movw	r30, r14
    2652:	80 89       	ldd	r24, Z+16	; 0x10
    2654:	91 89       	ldd	r25, Z+17	; 0x11
    2656:	91 70       	andi	r25, 0x01	; 1
    2658:	a6 01       	movw	r20, r12
    265a:	b4 01       	movw	r22, r8
    265c:	82 0f       	add	r24, r18
    265e:	93 1f       	adc	r25, r19
    2660:	0e 94 6f 29 	call	0x52de	; 0x52de <memcpy>
    2664:	e9 81       	ldd	r30, Y+1	; 0x01
    2666:	fa 81       	ldd	r31, Y+2	; 0x02
    2668:	21 e0       	ldi	r18, 0x01	; 1
    266a:	23 83       	std	Z+3, r18	; 0x03
    266c:	3b cf       	rjmp	.-394    	; 0x24e4 <f_write+0x182>
    266e:	87 e0       	ldi	r24, 0x07	; 7
    2670:	24 96       	adiw	r28, 0x04	; 4
    2672:	e2 e1       	ldi	r30, 0x12	; 18
    2674:	0c 94 fc 28 	jmp	0x51f8	; 0x51f8 <__epilogue_restores__>

00002678 <putc_bfd>:
    2678:	a2 e0       	ldi	r26, 0x02	; 2
    267a:	b0 e0       	ldi	r27, 0x00	; 0
    267c:	e2 e4       	ldi	r30, 0x42	; 66
    267e:	f3 e1       	ldi	r31, 0x13	; 19
    2680:	0c 94 e9 28 	jmp	0x51d2	; 0x51d2 <__prologue_saves__+0x12>
    2684:	8c 01       	movw	r16, r24
    2686:	b6 2e       	mov	r11, r22
    2688:	2a e0       	ldi	r18, 0x0A	; 10
    268a:	62 13       	cpse	r22, r18
    268c:	03 c0       	rjmp	.+6      	; 0x2694 <putc_bfd+0x1c>
    268e:	6d e0       	ldi	r22, 0x0D	; 13
    2690:	0e 94 3c 13 	call	0x2678	; 0x2678 <putc_bfd>
    2694:	f8 01       	movw	r30, r16
    2696:	82 81       	ldd	r24, Z+2	; 0x02
    2698:	93 81       	ldd	r25, Z+3	; 0x03
    269a:	97 fd       	sbrc	r25, 7
    269c:	30 c0       	rjmp	.+96     	; 0x26fe <putc_bfd+0x86>
    269e:	c4 80       	ldd	r12, Z+4	; 0x04
    26a0:	d5 80       	ldd	r13, Z+5	; 0x05
    26a2:	7c 01       	movw	r14, r24
    26a4:	ff ef       	ldi	r31, 0xFF	; 255
    26a6:	ef 1a       	sub	r14, r31
    26a8:	ff 0a       	sbc	r15, r31
    26aa:	f8 01       	movw	r30, r16
    26ac:	e8 0f       	add	r30, r24
    26ae:	f9 1f       	adc	r31, r25
    26b0:	b6 82       	std	Z+6, r11	; 0x06
    26b2:	2c e3       	ldi	r18, 0x3C	; 60
    26b4:	e2 16       	cp	r14, r18
    26b6:	f1 04       	cpc	r15, r1
    26b8:	cc f0       	brlt	.+50     	; 0x26ec <putc_bfd+0x74>
    26ba:	9e 01       	movw	r18, r28
    26bc:	2f 5f       	subi	r18, 0xFF	; 255
    26be:	3f 4f       	sbci	r19, 0xFF	; 255
    26c0:	a7 01       	movw	r20, r14
    26c2:	b8 01       	movw	r22, r16
    26c4:	6a 5f       	subi	r22, 0xFA	; 250
    26c6:	7f 4f       	sbci	r23, 0xFF	; 255
    26c8:	f8 01       	movw	r30, r16
    26ca:	80 81       	ld	r24, Z
    26cc:	91 81       	ldd	r25, Z+1	; 0x01
    26ce:	0e 94 b1 11 	call	0x2362	; 0x2362 <f_write>
    26d2:	81 e0       	ldi	r24, 0x01	; 1
    26d4:	90 e0       	ldi	r25, 0x00	; 0
    26d6:	29 81       	ldd	r18, Y+1	; 0x01
    26d8:	3a 81       	ldd	r19, Y+2	; 0x02
    26da:	2e 15       	cp	r18, r14
    26dc:	3f 05       	cpc	r19, r15
    26de:	11 f4       	brne	.+4      	; 0x26e4 <putc_bfd+0x6c>
    26e0:	80 e0       	ldi	r24, 0x00	; 0
    26e2:	90 e0       	ldi	r25, 0x00	; 0
    26e4:	ee 24       	eor	r14, r14
    26e6:	ff 24       	eor	r15, r15
    26e8:	e8 1a       	sub	r14, r24
    26ea:	f9 0a       	sbc	r15, r25
    26ec:	f8 01       	movw	r30, r16
    26ee:	f3 82       	std	Z+3, r15	; 0x03
    26f0:	e2 82       	std	Z+2, r14	; 0x02
    26f2:	ff ef       	ldi	r31, 0xFF	; 255
    26f4:	cf 1a       	sub	r12, r31
    26f6:	df 0a       	sbc	r13, r31
    26f8:	f8 01       	movw	r30, r16
    26fa:	d5 82       	std	Z+5, r13	; 0x05
    26fc:	c4 82       	std	Z+4, r12	; 0x04
    26fe:	22 96       	adiw	r28, 0x02	; 2
    2700:	e9 e0       	ldi	r30, 0x09	; 9
    2702:	0c 94 05 29 	jmp	0x520a	; 0x520a <__epilogue_restores__+0x12>

00002706 <putc_flush>:
    2706:	a2 e0       	ldi	r26, 0x02	; 2
    2708:	b0 e0       	ldi	r27, 0x00	; 0
    270a:	e9 e8       	ldi	r30, 0x89	; 137
    270c:	f3 e1       	ldi	r31, 0x13	; 19
    270e:	0c 94 ee 28 	jmp	0x51dc	; 0x51dc <__prologue_saves__+0x1c>
    2712:	fc 01       	movw	r30, r24
    2714:	42 81       	ldd	r20, Z+2	; 0x02
    2716:	53 81       	ldd	r21, Z+3	; 0x03
    2718:	57 ff       	sbrs	r21, 7
    271a:	03 c0       	rjmp	.+6      	; 0x2722 <putc_flush+0x1c>
    271c:	8f ef       	ldi	r24, 0xFF	; 255
    271e:	9f ef       	ldi	r25, 0xFF	; 255
    2720:	18 c0       	rjmp	.+48     	; 0x2752 <putc_flush+0x4c>
    2722:	8c 01       	movw	r16, r24
    2724:	bc 01       	movw	r22, r24
    2726:	6a 5f       	subi	r22, 0xFA	; 250
    2728:	7f 4f       	sbci	r23, 0xFF	; 255
    272a:	9e 01       	movw	r18, r28
    272c:	2f 5f       	subi	r18, 0xFF	; 255
    272e:	3f 4f       	sbci	r19, 0xFF	; 255
    2730:	fc 01       	movw	r30, r24
    2732:	80 81       	ld	r24, Z
    2734:	91 81       	ldd	r25, Z+1	; 0x01
    2736:	0e 94 b1 11 	call	0x2362	; 0x2362 <f_write>
    273a:	81 11       	cpse	r24, r1
    273c:	ef cf       	rjmp	.-34     	; 0x271c <putc_flush+0x16>
    273e:	f8 01       	movw	r30, r16
    2740:	22 81       	ldd	r18, Z+2	; 0x02
    2742:	33 81       	ldd	r19, Z+3	; 0x03
    2744:	89 81       	ldd	r24, Y+1	; 0x01
    2746:	9a 81       	ldd	r25, Y+2	; 0x02
    2748:	28 17       	cp	r18, r24
    274a:	39 07       	cpc	r19, r25
    274c:	39 f7       	brne	.-50     	; 0x271c <putc_flush+0x16>
    274e:	84 81       	ldd	r24, Z+4	; 0x04
    2750:	95 81       	ldd	r25, Z+5	; 0x05
    2752:	22 96       	adiw	r28, 0x02	; 2
    2754:	e4 e0       	ldi	r30, 0x04	; 4
    2756:	0c 94 0a 29 	jmp	0x5214	; 0x5214 <__epilogue_restores__+0x1c>

0000275a <f_sync>:
    275a:	a2 e0       	ldi	r26, 0x02	; 2
    275c:	b0 e0       	ldi	r27, 0x00	; 0
    275e:	e3 eb       	ldi	r30, 0xB3	; 179
    2760:	f3 e1       	ldi	r31, 0x13	; 19
    2762:	0c 94 ec 28 	jmp	0x51d8	; 0x51d8 <__prologue_saves__+0x18>
    2766:	7c 01       	movw	r14, r24
    2768:	be 01       	movw	r22, r28
    276a:	6f 5f       	subi	r22, 0xFF	; 255
    276c:	7f 4f       	sbci	r23, 0xFF	; 255
    276e:	0e 94 97 04 	call	0x92e	; 0x92e <validate>
    2772:	81 11       	cpse	r24, r1
    2774:	3c c0       	rjmp	.+120    	; 0x27ee <f_sync+0x94>
    2776:	f7 01       	movw	r30, r14
    2778:	96 85       	ldd	r25, Z+14	; 0x0e
    277a:	96 ff       	sbrs	r25, 6
    277c:	38 c0       	rjmp	.+112    	; 0x27ee <f_sync+0x94>
    277e:	44 8d       	ldd	r20, Z+28	; 0x1c
    2780:	55 8d       	ldd	r21, Z+29	; 0x1d
    2782:	66 8d       	ldd	r22, Z+30	; 0x1e
    2784:	77 8d       	ldd	r23, Z+31	; 0x1f
    2786:	89 81       	ldd	r24, Y+1	; 0x01
    2788:	9a 81       	ldd	r25, Y+2	; 0x02
    278a:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <move_window>
    278e:	81 11       	cpse	r24, r1
    2790:	2e c0       	rjmp	.+92     	; 0x27ee <f_sync+0x94>
    2792:	f7 01       	movw	r30, r14
    2794:	00 a1       	ldd	r16, Z+32	; 0x20
    2796:	11 a1       	ldd	r17, Z+33	; 0x21
    2798:	f8 01       	movw	r30, r16
    279a:	83 85       	ldd	r24, Z+11	; 0x0b
    279c:	80 62       	ori	r24, 0x20	; 32
    279e:	83 87       	std	Z+11, r24	; 0x0b
    27a0:	f7 01       	movw	r30, r14
    27a2:	26 81       	ldd	r18, Z+6	; 0x06
    27a4:	37 81       	ldd	r19, Z+7	; 0x07
    27a6:	40 85       	ldd	r20, Z+8	; 0x08
    27a8:	51 85       	ldd	r21, Z+9	; 0x09
    27aa:	b8 01       	movw	r22, r16
    27ac:	80 81       	ld	r24, Z
    27ae:	91 81       	ldd	r25, Z+1	; 0x01
    27b0:	0e 94 d6 04 	call	0x9ac	; 0x9ac <st_clust.isra.3>
    27b4:	f7 01       	movw	r30, r14
    27b6:	42 85       	ldd	r20, Z+10	; 0x0a
    27b8:	53 85       	ldd	r21, Z+11	; 0x0b
    27ba:	64 85       	ldd	r22, Z+12	; 0x0c
    27bc:	75 85       	ldd	r23, Z+13	; 0x0d
    27be:	c8 01       	movw	r24, r16
    27c0:	4c 96       	adiw	r24, 0x1c	; 28
    27c2:	0e 94 3d 04 	call	0x87a	; 0x87a <st_dword>
    27c6:	f8 01       	movw	r30, r16
    27c8:	16 8a       	std	Z+22, r1	; 0x16
    27ca:	17 8a       	std	Z+23, r1	; 0x17
    27cc:	81 e2       	ldi	r24, 0x21	; 33
    27ce:	80 8f       	std	Z+24, r24	; 0x18
    27d0:	80 e5       	ldi	r24, 0x50	; 80
    27d2:	81 8f       	std	Z+25, r24	; 0x19
    27d4:	12 8a       	std	Z+18, r1	; 0x12
    27d6:	13 8a       	std	Z+19, r1	; 0x13
    27d8:	89 81       	ldd	r24, Y+1	; 0x01
    27da:	9a 81       	ldd	r25, Y+2	; 0x02
    27dc:	21 e0       	ldi	r18, 0x01	; 1
    27de:	fc 01       	movw	r30, r24
    27e0:	23 83       	std	Z+3, r18	; 0x03
    27e2:	0e 94 37 05 	call	0xa6e	; 0xa6e <sync_fs>
    27e6:	f7 01       	movw	r30, r14
    27e8:	96 85       	ldd	r25, Z+14	; 0x0e
    27ea:	9f 7b       	andi	r25, 0xBF	; 191
    27ec:	96 87       	std	Z+14, r25	; 0x0e
    27ee:	22 96       	adiw	r28, 0x02	; 2
    27f0:	e6 e0       	ldi	r30, 0x06	; 6
    27f2:	0c 94 08 29 	jmp	0x5210	; 0x5210 <__epilogue_restores__+0x18>

000027f6 <f_close>:
    27f6:	a2 e0       	ldi	r26, 0x02	; 2
    27f8:	b0 e0       	ldi	r27, 0x00	; 0
    27fa:	e1 e0       	ldi	r30, 0x01	; 1
    27fc:	f4 e1       	ldi	r31, 0x14	; 20
    27fe:	0c 94 ee 28 	jmp	0x51dc	; 0x51dc <__prologue_saves__+0x1c>
    2802:	8c 01       	movw	r16, r24
    2804:	0e 94 ad 13 	call	0x275a	; 0x275a <f_sync>
    2808:	81 11       	cpse	r24, r1
    280a:	0b c0       	rjmp	.+22     	; 0x2822 <f_close+0x2c>
    280c:	be 01       	movw	r22, r28
    280e:	6f 5f       	subi	r22, 0xFF	; 255
    2810:	7f 4f       	sbci	r23, 0xFF	; 255
    2812:	c8 01       	movw	r24, r16
    2814:	0e 94 97 04 	call	0x92e	; 0x92e <validate>
    2818:	81 11       	cpse	r24, r1
    281a:	03 c0       	rjmp	.+6      	; 0x2822 <f_close+0x2c>
    281c:	f8 01       	movw	r30, r16
    281e:	11 82       	std	Z+1, r1	; 0x01
    2820:	10 82       	st	Z, r1
    2822:	22 96       	adiw	r28, 0x02	; 2
    2824:	e4 e0       	ldi	r30, 0x04	; 4
    2826:	0c 94 0a 29 	jmp	0x5214	; 0x5214 <__epilogue_restores__+0x1c>

0000282a <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
    282a:	a3 e7       	ldi	r26, 0x73	; 115
    282c:	b0 e0       	ldi	r27, 0x00	; 0
    282e:	eb e1       	ldi	r30, 0x1B	; 27
    2830:	f4 e1       	ldi	r31, 0x14	; 20
    2832:	0c 94 e0 28 	jmp	0x51c0	; 0x51c0 <__prologue_saves__>
    2836:	c6 57       	subi	r28, 0x76	; 118
    2838:	df 4f       	sbci	r29, 0xFF	; 255
    283a:	08 81       	ld	r16, Y
    283c:	19 81       	ldd	r17, Y+1	; 0x01
    283e:	ca 58       	subi	r28, 0x8A	; 138
    2840:	d0 40       	sbci	r29, 0x00	; 0
	QWORD v;
#else
	DWORD v;
#endif
	TCHAR tc, pad, *tp;
	TCHAR nul = 0;
    2842:	a8 96       	adiw	r28, 0x28	; 40
    2844:	1f ae       	std	Y+63, r1	; 0x3f
    2846:	a8 97       	sbiw	r28, 0x28	; 40

/* Initialize write buffer */

static void putc_init (putbuff* pb, FIL* fp)
{
	memset(pb, 0, sizeof (putbuff));
    2848:	ce 01       	movw	r24, r28
    284a:	01 96       	adiw	r24, 0x01	; 1
    284c:	3c 01       	movw	r6, r24
    284e:	86 e4       	ldi	r24, 0x46	; 70
    2850:	d3 01       	movw	r26, r6
    2852:	1d 92       	st	X+, r1
    2854:	8a 95       	dec	r24
    2856:	e9 f7       	brne	.-6      	; 0x2852 <f_printf+0x28>
	pb->fp = fp;
    2858:	c8 57       	subi	r28, 0x78	; 120
    285a:	df 4f       	sbci	r29, 0xFF	; 255
    285c:	88 81       	ld	r24, Y
    285e:	99 81       	ldd	r25, Y+1	; 0x01
    2860:	c8 58       	subi	r28, 0x88	; 136
    2862:	d0 40       	sbci	r29, 0x00	; 0
    2864:	9a 83       	std	Y+2, r25	; 0x02
    2866:	89 83       	std	Y+1, r24	; 0x01
	char d, str[SZ_NUM_BUF];


	putc_init(&pb, fp);

	va_start(arp, fmt);
    2868:	7e 01       	movw	r14, r28
    286a:	bc e8       	ldi	r27, 0x8C	; 140
    286c:	eb 0e       	add	r14, r27
    286e:	f1 1c       	adc	r15, r1
    2870:	fe 01       	movw	r30, r28
    2872:	e9 5b       	subi	r30, 0xB9	; 185
    2874:	ff 4f       	sbci	r31, 0xFF	; 255
    2876:	aa 96       	adiw	r28, 0x2a	; 42
    2878:	ff af       	std	Y+63, r31	; 0x3f
    287a:	ee af       	std	Y+62, r30	; 0x3e
    287c:	aa 97       	sbiw	r28, 0x2a	; 42

	for (;;) {
		tc = *fmt++;
    287e:	d8 01       	movw	r26, r16
    2880:	6c 91       	ld	r22, X
		if (tc == 0) break;			/* End of format string */
    2882:	66 23       	and	r22, r22
    2884:	09 f4       	brne	.+2      	; 0x2888 <f_printf+0x5e>
    2886:	d5 c1       	rjmp	.+938    	; 0x2c32 <f_printf+0x408>
		if (tc != '%') {			/* Not an escape character (pass-through) */
    2888:	65 32       	cpi	r22, 0x25	; 37
    288a:	19 f0       	breq	.+6      	; 0x2892 <f_printf+0x68>
	putc_init(&pb, fp);

	va_start(arp, fmt);

	for (;;) {
		tc = *fmt++;
    288c:	0f 5f       	subi	r16, 0xFF	; 255
    288e:	1f 4f       	sbci	r17, 0xFF	; 255
    2890:	ee c0       	rjmp	.+476    	; 0x2a6e <f_printf+0x244>
		if (tc != '%') {			/* Not an escape character (pass-through) */
			putc_bfd(&pb, tc);
			continue;
		}
		f = w = 0; pad = ' '; prec = -1;	/* Initialize parms */
		tc = *fmt++;
    2892:	f8 01       	movw	r30, r16
    2894:	61 81       	ldd	r22, Z+1	; 0x01
		if (tc == '0') {			/* Flag: '0' padded */
    2896:	60 33       	cpi	r22, 0x30	; 48
    2898:	49 f4       	brne	.+18     	; 0x28ac <f_printf+0x82>
			pad = '0'; tc = *fmt++;
    289a:	33 96       	adiw	r30, 0x03	; 3
    289c:	d8 01       	movw	r26, r16
    289e:	12 96       	adiw	r26, 0x02	; 2
    28a0:	6c 91       	ld	r22, X
    28a2:	b0 e3       	ldi	r27, 0x30	; 48
    28a4:	af 96       	adiw	r28, 0x2f	; 47
    28a6:	bf af       	std	Y+63, r27	; 0x3f
    28a8:	af 97       	sbiw	r28, 0x2f	; 47
    28aa:	08 c0       	rjmp	.+16     	; 0x28bc <f_printf+0x92>
		} else if (tc == '-') {		/* Flag: Left aligned */
			f = 2; tc = *fmt++;
    28ac:	f8 01       	movw	r30, r16
		}
		f = w = 0; pad = ' '; prec = -1;	/* Initialize parms */
		tc = *fmt++;
		if (tc == '0') {			/* Flag: '0' padded */
			pad = '0'; tc = *fmt++;
		} else if (tc == '-') {		/* Flag: Left aligned */
    28ae:	6d 32       	cpi	r22, 0x2D	; 45
    28b0:	41 f0       	breq	.+16     	; 0x28c2 <f_printf+0x98>
		if (tc != '%') {			/* Not an escape character (pass-through) */
			putc_bfd(&pb, tc);
			continue;
		}
		f = w = 0; pad = ' '; prec = -1;	/* Initialize parms */
		tc = *fmt++;
    28b2:	32 96       	adiw	r30, 0x02	; 2
		if (tc == 0) break;			/* End of format string */
		if (tc != '%') {			/* Not an escape character (pass-through) */
			putc_bfd(&pb, tc);
			continue;
		}
		f = w = 0; pad = ' '; prec = -1;	/* Initialize parms */
    28b4:	80 e2       	ldi	r24, 0x20	; 32
    28b6:	af 96       	adiw	r28, 0x2f	; 47
    28b8:	8f af       	std	Y+63, r24	; 0x3f
    28ba:	af 97       	sbiw	r28, 0x2f	; 47
    28bc:	a1 2c       	mov	r10, r1
    28be:	b1 2c       	mov	r11, r1
    28c0:	0b c0       	rjmp	.+22     	; 0x28d8 <f_printf+0xae>
		tc = *fmt++;
		if (tc == '0') {			/* Flag: '0' padded */
			pad = '0'; tc = *fmt++;
		} else if (tc == '-') {		/* Flag: Left aligned */
			f = 2; tc = *fmt++;
    28c2:	33 96       	adiw	r30, 0x03	; 3
    28c4:	d8 01       	movw	r26, r16
    28c6:	12 96       	adiw	r26, 0x02	; 2
    28c8:	6c 91       	ld	r22, X
		if (tc == 0) break;			/* End of format string */
		if (tc != '%') {			/* Not an escape character (pass-through) */
			putc_bfd(&pb, tc);
			continue;
		}
		f = w = 0; pad = ' '; prec = -1;	/* Initialize parms */
    28ca:	b0 e2       	ldi	r27, 0x20	; 32
    28cc:	af 96       	adiw	r28, 0x2f	; 47
    28ce:	bf af       	std	Y+63, r27	; 0x3f
    28d0:	af 97       	sbiw	r28, 0x2f	; 47
		tc = *fmt++;
		if (tc == '0') {			/* Flag: '0' padded */
			pad = '0'; tc = *fmt++;
		} else if (tc == '-') {		/* Flag: Left aligned */
			f = 2; tc = *fmt++;
    28d2:	22 e0       	ldi	r18, 0x02	; 2
    28d4:	a2 2e       	mov	r10, r18
    28d6:	b1 2c       	mov	r11, r1
		}
		if (tc == '*') {			/* Minimum width from an argument */
    28d8:	6a 32       	cpi	r22, 0x2A	; 42
    28da:	21 f0       	breq	.+8      	; 0x28e4 <f_printf+0xba>
    28dc:	21 2c       	mov	r2, r1
    28de:	31 2c       	mov	r3, r1
			w = va_arg(arp, int);
			tc = *fmt++;
		} else {
			while (IsDigit(tc)) {	/* Minimum width */
				w = w * 10 + tc - '0';
    28e0:	4a e0       	ldi	r20, 0x0A	; 10
    28e2:	0b c0       	rjmp	.+22     	; 0x28fa <f_printf+0xd0>
			pad = '0'; tc = *fmt++;
		} else if (tc == '-') {		/* Flag: Left aligned */
			f = 2; tc = *fmt++;
		}
		if (tc == '*') {			/* Minimum width from an argument */
			w = va_arg(arp, int);
    28e4:	d7 01       	movw	r26, r14
    28e6:	2d 90       	ld	r2, X+
    28e8:	3c 90       	ld	r3, X
			tc = *fmt++;
    28ea:	8f 01       	movw	r16, r30
    28ec:	0f 5f       	subi	r16, 0xFF	; 255
    28ee:	1f 4f       	sbci	r17, 0xFF	; 255
    28f0:	60 81       	ld	r22, Z
			pad = '0'; tc = *fmt++;
		} else if (tc == '-') {		/* Flag: Left aligned */
			f = 2; tc = *fmt++;
		}
		if (tc == '*') {			/* Minimum width from an argument */
			w = va_arg(arp, int);
    28f2:	f7 01       	movw	r30, r14
    28f4:	32 96       	adiw	r30, 0x02	; 2
    28f6:	7f 01       	movw	r14, r30
    28f8:	12 c0       	rjmp	.+36     	; 0x291e <f_printf+0xf4>
    28fa:	8f 01       	movw	r16, r30
			tc = *fmt++;
		} else {
			while (IsDigit(tc)) {	/* Minimum width */
    28fc:	90 ed       	ldi	r25, 0xD0	; 208
    28fe:	96 0f       	add	r25, r22
    2900:	9a 30       	cpi	r25, 0x0A	; 10
    2902:	68 f4       	brcc	.+26     	; 0x291e <f_printf+0xf4>
				w = w * 10 + tc - '0';
    2904:	42 9d       	mul	r20, r2
    2906:	90 01       	movw	r18, r0
    2908:	43 9d       	mul	r20, r3
    290a:	30 0d       	add	r19, r0
    290c:	11 24       	eor	r1, r1
    290e:	19 01       	movw	r2, r18
    2910:	26 0e       	add	r2, r22
    2912:	31 1c       	adc	r3, r1
    2914:	80 e3       	ldi	r24, 0x30	; 48
    2916:	28 1a       	sub	r2, r24
    2918:	31 08       	sbc	r3, r1
				tc = *fmt++;
    291a:	61 91       	ld	r22, Z+
    291c:	ee cf       	rjmp	.-36     	; 0x28fa <f_printf+0xd0>
			}
		}
		if (tc == '.') {			/* Precision */
    291e:	6e 32       	cpi	r22, 0x2E	; 46
    2920:	39 f5       	brne	.+78     	; 0x2970 <f_printf+0x146>
			tc = *fmt++;
    2922:	d8 01       	movw	r26, r16
    2924:	6c 91       	ld	r22, X
			if (tc == '*') {		/* Precision from an argument */
    2926:	6a 32       	cpi	r22, 0x2A	; 42
    2928:	31 f0       	breq	.+12     	; 0x2936 <f_printf+0x10c>
    292a:	f8 01       	movw	r30, r16
    292c:	31 96       	adiw	r30, 0x01	; 1
				w = w * 10 + tc - '0';
				tc = *fmt++;
			}
		}
		if (tc == '.') {			/* Precision */
			tc = *fmt++;
    292e:	c1 2c       	mov	r12, r1
    2930:	d1 2c       	mov	r13, r1
				prec = va_arg(arp, int);
				tc = *fmt++;
			} else {
				prec = 0;
				while (IsDigit(tc)) {	/* Precision */
					prec = prec * 10 + tc - '0';
    2932:	4a e0       	ldi	r20, 0x0A	; 10
    2934:	0b c0       	rjmp	.+22     	; 0x294c <f_printf+0x122>
			}
		}
		if (tc == '.') {			/* Precision */
			tc = *fmt++;
			if (tc == '*') {		/* Precision from an argument */
				prec = va_arg(arp, int);
    2936:	f7 01       	movw	r30, r14
    2938:	c0 80       	ld	r12, Z
    293a:	d1 80       	ldd	r13, Z+1	; 0x01
				tc = *fmt++;
    293c:	d8 01       	movw	r26, r16
    293e:	11 96       	adiw	r26, 0x01	; 1
    2940:	6c 91       	ld	r22, X
			}
		}
		if (tc == '.') {			/* Precision */
			tc = *fmt++;
			if (tc == '*') {		/* Precision from an argument */
				prec = va_arg(arp, int);
    2942:	32 96       	adiw	r30, 0x02	; 2
    2944:	7f 01       	movw	r14, r30
				tc = *fmt++;
    2946:	0e 5f       	subi	r16, 0xFE	; 254
    2948:	1f 4f       	sbci	r17, 0xFF	; 255
    294a:	15 c0       	rjmp	.+42     	; 0x2976 <f_printf+0x14c>
    294c:	8f 01       	movw	r16, r30
			} else {
				prec = 0;
				while (IsDigit(tc)) {	/* Precision */
    294e:	90 ed       	ldi	r25, 0xD0	; 208
    2950:	96 0f       	add	r25, r22
    2952:	9a 30       	cpi	r25, 0x0A	; 10
    2954:	80 f4       	brcc	.+32     	; 0x2976 <f_printf+0x14c>
					prec = prec * 10 + tc - '0';
    2956:	4c 9d       	mul	r20, r12
    2958:	90 01       	movw	r18, r0
    295a:	4d 9d       	mul	r20, r13
    295c:	30 0d       	add	r19, r0
    295e:	11 24       	eor	r1, r1
    2960:	69 01       	movw	r12, r18
    2962:	c6 0e       	add	r12, r22
    2964:	d1 1c       	adc	r13, r1
    2966:	80 e3       	ldi	r24, 0x30	; 48
    2968:	c8 1a       	sub	r12, r24
    296a:	d1 08       	sbc	r13, r1
					tc = *fmt++;
    296c:	61 91       	ld	r22, Z+
    296e:	ee cf       	rjmp	.-36     	; 0x294c <f_printf+0x122>
		if (tc == 0) break;			/* End of format string */
		if (tc != '%') {			/* Not an escape character (pass-through) */
			putc_bfd(&pb, tc);
			continue;
		}
		f = w = 0; pad = ' '; prec = -1;	/* Initialize parms */
    2970:	cc 24       	eor	r12, r12
    2972:	ca 94       	dec	r12
    2974:	dc 2c       	mov	r13, r12
					prec = prec * 10 + tc - '0';
					tc = *fmt++;
				}
			}
		}
		if (tc == 'l') {			/* Size: long int */
    2976:	6c 36       	cpi	r22, 0x6C	; 108
    2978:	31 f4       	brne	.+12     	; 0x2986 <f_printf+0x15c>
			f |= 4; tc = *fmt++;
    297a:	68 94       	set
    297c:	a2 f8       	bld	r10, 2
    297e:	d8 01       	movw	r26, r16
    2980:	6c 91       	ld	r22, X
    2982:	0f 5f       	subi	r16, 0xFF	; 255
    2984:	1f 4f       	sbci	r17, 0xFF	; 255
			if (tc == 'l') {		/* Size: long long int */
				f |= 8; tc = *fmt++;
			}
#endif
		}
		if (tc == 0) break;			/* End of format string */
    2986:	66 23       	and	r22, r22
    2988:	09 f4       	brne	.+2      	; 0x298c <f_printf+0x162>
    298a:	53 c1       	rjmp	.+678    	; 0x2c32 <f_printf+0x408>
		switch (tc) {				/* Atgument type is... */
    298c:	64 36       	cpi	r22, 0x64	; 100
    298e:	a1 f0       	breq	.+40     	; 0x29b8 <f_printf+0x18e>
    2990:	38 f4       	brcc	.+14     	; 0x29a0 <f_printf+0x176>
    2992:	62 36       	cpi	r22, 0x62	; 98
    2994:	09 f4       	brne	.+2      	; 0x2998 <f_printf+0x16e>
    2996:	70 c0       	rjmp	.+224    	; 0x2a78 <f_printf+0x24e>
    2998:	a8 f4       	brcc	.+42     	; 0x29c4 <f_printf+0x19a>
    299a:	68 35       	cpi	r22, 0x58	; 88
    299c:	81 f0       	breq	.+32     	; 0x29be <f_printf+0x194>
    299e:	67 c0       	rjmp	.+206    	; 0x2a6e <f_printf+0x244>
    29a0:	63 37       	cpi	r22, 0x73	; 115
    29a2:	d9 f0       	breq	.+54     	; 0x29da <f_printf+0x1b0>
    29a4:	20 f4       	brcc	.+8      	; 0x29ae <f_printf+0x184>
    29a6:	6f 36       	cpi	r22, 0x6F	; 111
    29a8:	09 f4       	brne	.+2      	; 0x29ac <f_printf+0x182>
    29aa:	69 c0       	rjmp	.+210    	; 0x2a7e <f_printf+0x254>
    29ac:	60 c0       	rjmp	.+192    	; 0x2a6e <f_printf+0x244>
    29ae:	65 37       	cpi	r22, 0x75	; 117
    29b0:	19 f0       	breq	.+6      	; 0x29b8 <f_printf+0x18e>
    29b2:	68 37       	cpi	r22, 0x78	; 120
    29b4:	21 f0       	breq	.+8      	; 0x29be <f_printf+0x194>
    29b6:	5b c0       	rjmp	.+182    	; 0x2a6e <f_printf+0x244>
			r = 2; break;
		case 'o':					/* Unsigned octal */
			r = 8; break;
		case 'd':					/* Signed decimal */
		case 'u':					/* Unsigned decimal */
			r = 10; break;
    29b8:	2a e0       	ldi	r18, 0x0A	; 10
    29ba:	30 e0       	ldi	r19, 0x00	; 0
    29bc:	62 c0       	rjmp	.+196    	; 0x2a82 <f_printf+0x258>
		case 'x':					/* Unsigned hexdecimal (lower case) */
		case 'X':					/* Unsigned hexdecimal (upper case) */
			r = 16; break;
    29be:	20 e1       	ldi	r18, 0x10	; 16
    29c0:	30 e0       	ldi	r19, 0x00	; 0
    29c2:	5f c0       	rjmp	.+190    	; 0x2a82 <f_printf+0x258>
		case 'c':					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int));
    29c4:	27 01       	movw	r4, r14
    29c6:	b2 e0       	ldi	r27, 0x02	; 2
    29c8:	4b 0e       	add	r4, r27
    29ca:	51 1c       	adc	r5, r1
    29cc:	f7 01       	movw	r30, r14
    29ce:	60 81       	ld	r22, Z
    29d0:	c3 01       	movw	r24, r6
    29d2:	0e 94 3c 13 	call	0x2678	; 0x2678 <putc_bfd>
			for (i = 0; str[i]; putc_bfd(&pb, str[i++])) ;	/* Body */
			while (j++ < w) putc_bfd(&pb, ' ');	/* Right pads */
			continue;
#endif
		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, tc); continue;
    29d6:	72 01       	movw	r14, r4
    29d8:	52 cf       	rjmp	.-348    	; 0x287e <f_printf+0x54>
			r = 16; break;
		case 'c':					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int));
			continue;
		case 's':					/* String */
			tp = va_arg(arp, TCHAR*);	/* Get a pointer argument */
    29da:	27 01       	movw	r4, r14
    29dc:	f2 e0       	ldi	r31, 0x02	; 2
    29de:	4f 0e       	add	r4, r31
    29e0:	51 1c       	adc	r5, r1
    29e2:	d7 01       	movw	r26, r14
    29e4:	8d 91       	ld	r24, X+
    29e6:	9c 91       	ld	r25, X
			if (!tp) tp = &nul;		/* Null ptr generates a null string */
    29e8:	00 97       	sbiw	r24, 0x00	; 0
    29ea:	19 f4       	brne	.+6      	; 0x29f2 <f_printf+0x1c8>
    29ec:	ce 01       	movw	r24, r28
    29ee:	89 59       	subi	r24, 0x99	; 153
    29f0:	9f 4f       	sbci	r25, 0xFF	; 255
    29f2:	4c 01       	movw	r8, r24
			for (j = 0; tp[j]; j++) ;	/* j = tcslen(tp) */
    29f4:	fc 01       	movw	r30, r24
    29f6:	7f 01       	movw	r14, r30
    29f8:	e8 1a       	sub	r14, r24
    29fa:	f9 0a       	sbc	r15, r25
    29fc:	21 91       	ld	r18, Z+
    29fe:	21 11       	cpse	r18, r1
    2a00:	fa cf       	rjmp	.-12     	; 0x29f6 <f_printf+0x1cc>
			if (prec >= 0 && j > (UINT)prec) j = prec;	/* Limited length of string body */
    2a02:	d7 fc       	sbrc	r13, 7
    2a04:	04 c0       	rjmp	.+8      	; 0x2a0e <f_printf+0x1e4>
    2a06:	ce 14       	cp	r12, r14
    2a08:	df 04       	cpc	r13, r15
    2a0a:	08 f4       	brcc	.+2      	; 0x2a0e <f_printf+0x1e4>
    2a0c:	76 01       	movw	r14, r12
			for ( ; !(f & 2) && j < w; j++) putc_bfd(&pb, pad);	/* Left pads */
    2a0e:	b2 e0       	ldi	r27, 0x02	; 2
    2a10:	ab 22       	and	r10, r27
    2a12:	bb 24       	eor	r11, r11
    2a14:	a1 14       	cp	r10, r1
    2a16:	b1 04       	cpc	r11, r1
    2a18:	19 f0       	breq	.+6      	; 0x2a20 <f_printf+0x1f6>
			putc_bfd(&pb, (TCHAR)va_arg(arp, int));
			continue;
		case 's':					/* String */
			tp = va_arg(arp, TCHAR*);	/* Get a pointer argument */
			if (!tp) tp = &nul;		/* Null ptr generates a null string */
			for (j = 0; tp[j]; j++) ;	/* j = tcslen(tp) */
    2a1a:	a1 2c       	mov	r10, r1
    2a1c:	b1 2c       	mov	r11, r1
    2a1e:	16 c0       	rjmp	.+44     	; 0x2a4c <f_printf+0x222>
			if (prec >= 0 && j > (UINT)prec) j = prec;	/* Limited length of string body */
			for ( ; !(f & 2) && j < w; j++) putc_bfd(&pb, pad);	/* Left pads */
    2a20:	e2 14       	cp	r14, r2
    2a22:	f3 04       	cpc	r15, r3
    2a24:	d0 f7       	brcc	.-12     	; 0x2a1a <f_printf+0x1f0>
    2a26:	af 96       	adiw	r28, 0x2f	; 47
    2a28:	6f ad       	ldd	r22, Y+63	; 0x3f
    2a2a:	af 97       	sbiw	r28, 0x2f	; 47
    2a2c:	c3 01       	movw	r24, r6
    2a2e:	0e 94 3c 13 	call	0x2678	; 0x2678 <putc_bfd>
    2a32:	ef ef       	ldi	r30, 0xFF	; 255
    2a34:	ee 1a       	sub	r14, r30
    2a36:	fe 0a       	sbc	r15, r30
    2a38:	ed cf       	rjmp	.-38     	; 0x2a14 <f_printf+0x1ea>
			while (*tp && prec--) putc_bfd(&pb, *tp++);	/* Body */
    2a3a:	ac 14       	cp	r10, r12
    2a3c:	bd 04       	cpc	r11, r13
    2a3e:	59 f0       	breq	.+22     	; 0x2a56 <f_printf+0x22c>
    2a40:	c3 01       	movw	r24, r6
    2a42:	0e 94 3c 13 	call	0x2678	; 0x2678 <putc_bfd>
    2a46:	ff ef       	ldi	r31, 0xFF	; 255
    2a48:	af 1a       	sub	r10, r31
    2a4a:	bf 0a       	sbc	r11, r31
    2a4c:	d4 01       	movw	r26, r8
    2a4e:	6d 91       	ld	r22, X+
    2a50:	4d 01       	movw	r8, r26
    2a52:	61 11       	cpse	r22, r1
    2a54:	f2 cf       	rjmp	.-28     	; 0x2a3a <f_printf+0x210>
			while (j++ < w) putc_bfd(&pb, ' ');			/* Right pads */
    2a56:	e2 14       	cp	r14, r2
    2a58:	f3 04       	cpc	r15, r3
    2a5a:	08 f0       	brcs	.+2      	; 0x2a5e <f_printf+0x234>
    2a5c:	bc cf       	rjmp	.-136    	; 0x29d6 <f_printf+0x1ac>
    2a5e:	60 e2       	ldi	r22, 0x20	; 32
    2a60:	c3 01       	movw	r24, r6
    2a62:	0e 94 3c 13 	call	0x2678	; 0x2678 <putc_bfd>
    2a66:	bf ef       	ldi	r27, 0xFF	; 255
    2a68:	eb 1a       	sub	r14, r27
    2a6a:	fb 0a       	sbc	r15, r27
    2a6c:	f4 cf       	rjmp	.-24     	; 0x2a56 <f_printf+0x22c>
			for (i = 0; str[i]; putc_bfd(&pb, str[i++])) ;	/* Body */
			while (j++ < w) putc_bfd(&pb, ' ');	/* Right pads */
			continue;
#endif
		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, tc); continue;
    2a6e:	c3 01       	movw	r24, r6
    2a70:	0e 94 3c 13 	call	0x2678	; 0x2678 <putc_bfd>
    2a74:	27 01       	movw	r4, r14
    2a76:	af cf       	rjmp	.-162    	; 0x29d6 <f_printf+0x1ac>
#endif
		}
		if (tc == 0) break;			/* End of format string */
		switch (tc) {				/* Atgument type is... */
		case 'b':					/* Unsigned binary */
			r = 2; break;
    2a78:	22 e0       	ldi	r18, 0x02	; 2
    2a7a:	30 e0       	ldi	r19, 0x00	; 0
    2a7c:	02 c0       	rjmp	.+4      	; 0x2a82 <f_printf+0x258>
		case 'o':					/* Unsigned octal */
			r = 8; break;
    2a7e:	28 e0       	ldi	r18, 0x08	; 8
    2a80:	30 e0       	ldi	r19, 0x00	; 0
		}
		if (tc == 'd' && (v & 0x8000000000000000)) {	/* Negative value? */
			v = 0 - v; f |= 1;
		}
#else
		if (f & 4) {	/* long argument? */
    2a82:	a2 fe       	sbrs	r10, 2
    2a84:	13 c0       	rjmp	.+38     	; 0x2aac <f_printf+0x282>
			v = (DWORD)va_arg(arp, long);
    2a86:	27 01       	movw	r4, r14
    2a88:	e4 e0       	ldi	r30, 0x04	; 4
    2a8a:	4e 0e       	add	r4, r30
    2a8c:	51 1c       	adc	r5, r1
    2a8e:	d7 01       	movw	r26, r14
    2a90:	8d 91       	ld	r24, X+
    2a92:	9d 91       	ld	r25, X+
    2a94:	0d 90       	ld	r0, X+
    2a96:	bc 91       	ld	r27, X
    2a98:	a0 2d       	mov	r26, r0
    2a9a:	ae 96       	adiw	r28, 0x2e	; 46
    2a9c:	8c af       	std	Y+60, r24	; 0x3c
    2a9e:	9d af       	std	Y+61, r25	; 0x3d
    2aa0:	ae af       	std	Y+62, r26	; 0x3e
    2aa2:	bf af       	std	Y+63, r27	; 0x3f
    2aa4:	ae 97       	sbiw	r28, 0x2e	; 46
		} else {		/* int/short/char argument */
			v = (tc == 'd') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int);
		}
		if (tc == 'd' && (v & 0x80000000)) {	/* Negative value? */
    2aa6:	64 36       	cpi	r22, 0x64	; 100
    2aa8:	d1 f5       	brne	.+116    	; 0x2b1e <f_printf+0x2f4>
    2aaa:	21 c0       	rjmp	.+66     	; 0x2aee <f_printf+0x2c4>
    2aac:	a7 01       	movw	r20, r14
    2aae:	4e 5f       	subi	r20, 0xFE	; 254
    2ab0:	5f 4f       	sbci	r21, 0xFF	; 255
		}
#else
		if (f & 4) {	/* long argument? */
			v = (DWORD)va_arg(arp, long);
		} else {		/* int/short/char argument */
			v = (tc == 'd') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int);
    2ab2:	2a 01       	movw	r4, r20
    2ab4:	64 36       	cpi	r22, 0x64	; 100
    2ab6:	71 f4       	brne	.+28     	; 0x2ad4 <f_printf+0x2aa>
    2ab8:	f7 01       	movw	r30, r14
    2aba:	40 81       	ld	r20, Z
    2abc:	51 81       	ldd	r21, Z+1	; 0x01
    2abe:	ca 01       	movw	r24, r20
    2ac0:	55 0f       	add	r21, r21
    2ac2:	aa 0b       	sbc	r26, r26
    2ac4:	bb 0b       	sbc	r27, r27
    2ac6:	ae 96       	adiw	r28, 0x2e	; 46
    2ac8:	8c af       	std	Y+60, r24	; 0x3c
    2aca:	9d af       	std	Y+61, r25	; 0x3d
    2acc:	ae af       	std	Y+62, r26	; 0x3e
    2ace:	bf af       	std	Y+63, r27	; 0x3f
    2ad0:	ae 97       	sbiw	r28, 0x2e	; 46
    2ad2:	0d c0       	rjmp	.+26     	; 0x2aee <f_printf+0x2c4>
    2ad4:	d7 01       	movw	r26, r14
    2ad6:	4d 91       	ld	r20, X+
    2ad8:	5c 91       	ld	r21, X
    2ada:	ca 01       	movw	r24, r20
    2adc:	a0 e0       	ldi	r26, 0x00	; 0
    2ade:	b0 e0       	ldi	r27, 0x00	; 0
    2ae0:	ae 96       	adiw	r28, 0x2e	; 46
    2ae2:	8c af       	std	Y+60, r24	; 0x3c
    2ae4:	9d af       	std	Y+61, r25	; 0x3d
    2ae6:	ae af       	std	Y+62, r26	; 0x3e
    2ae8:	bf af       	std	Y+63, r27	; 0x3f
    2aea:	ae 97       	sbiw	r28, 0x2e	; 46
    2aec:	18 c0       	rjmp	.+48     	; 0x2b1e <f_printf+0x2f4>
		}
		if (tc == 'd' && (v & 0x80000000)) {	/* Negative value? */
    2aee:	ae 96       	adiw	r28, 0x2e	; 46
    2af0:	8c ad       	ldd	r24, Y+60	; 0x3c
    2af2:	9d ad       	ldd	r25, Y+61	; 0x3d
    2af4:	ae ad       	ldd	r26, Y+62	; 0x3e
    2af6:	bf ad       	ldd	r27, Y+63	; 0x3f
    2af8:	ae 97       	sbiw	r28, 0x2e	; 46
    2afa:	b7 ff       	sbrs	r27, 7
    2afc:	17 c0       	rjmp	.+46     	; 0x2b2c <f_printf+0x302>
			v = 0 - v; f |= 1;
    2afe:	b0 95       	com	r27
    2b00:	a0 95       	com	r26
    2b02:	90 95       	com	r25
    2b04:	81 95       	neg	r24
    2b06:	9f 4f       	sbci	r25, 0xFF	; 255
    2b08:	af 4f       	sbci	r26, 0xFF	; 255
    2b0a:	bf 4f       	sbci	r27, 0xFF	; 255
    2b0c:	ae 96       	adiw	r28, 0x2e	; 46
    2b0e:	8c af       	std	Y+60, r24	; 0x3c
    2b10:	9d af       	std	Y+61, r25	; 0x3d
    2b12:	ae af       	std	Y+62, r26	; 0x3e
    2b14:	bf af       	std	Y+63, r27	; 0x3f
    2b16:	ae 97       	sbiw	r28, 0x2e	; 46
    2b18:	68 94       	set
    2b1a:	a0 f8       	bld	r10, 0
    2b1c:	07 c0       	rjmp	.+14     	; 0x2b2c <f_printf+0x302>
    2b1e:	68 37       	cpi	r22, 0x78	; 120
    2b20:	29 f4       	brne	.+10     	; 0x2b2c <f_printf+0x302>
    2b22:	97 e2       	ldi	r25, 0x27	; 39
    2b24:	e0 96       	adiw	r28, 0x30	; 48
    2b26:	9f af       	std	Y+63, r25	; 0x3f
    2b28:	e0 97       	sbiw	r28, 0x30	; 48
    2b2a:	04 c0       	rjmp	.+8      	; 0x2b34 <f_printf+0x30a>
    2b2c:	a7 e0       	ldi	r26, 0x07	; 7
    2b2e:	e0 96       	adiw	r28, 0x30	; 48
    2b30:	af af       	std	Y+63, r26	; 0x3f
    2b32:	e0 97       	sbiw	r28, 0x30	; 48
		case 'd':					/* Signed decimal */
		case 'u':					/* Unsigned decimal */
			r = 10; break;
		case 'x':					/* Unsigned hexdecimal (lower case) */
		case 'X':					/* Unsigned hexdecimal (upper case) */
			r = 16; break;
    2b34:	fe 01       	movw	r30, r28
    2b36:	e9 5b       	subi	r30, 0xB9	; 185
    2b38:	ff 4f       	sbci	r31, 0xFF	; 255
    2b3a:	6f 01       	movw	r12, r30
		}
		if (tc == 'd' && (v & 0x80000000)) {	/* Negative value? */
			v = 0 - v; f |= 1;
		}
#endif
		i = 0;
    2b3c:	81 2c       	mov	r8, r1
    2b3e:	91 2c       	mov	r9, r1
		do {	/* Make an integer number string */
			d = (char)(v % r); v /= r;
    2b40:	c9 01       	movw	r24, r18
    2b42:	a0 e0       	ldi	r26, 0x00	; 0
    2b44:	b0 e0       	ldi	r27, 0x00	; 0
    2b46:	e4 96       	adiw	r28, 0x34	; 52
    2b48:	8c af       	std	Y+60, r24	; 0x3c
    2b4a:	9d af       	std	Y+61, r25	; 0x3d
    2b4c:	ae af       	std	Y+62, r26	; 0x3e
    2b4e:	bf af       	std	Y+63, r27	; 0x3f
    2b50:	e4 97       	sbiw	r28, 0x34	; 52
    2b52:	ae 96       	adiw	r28, 0x2e	; 46
    2b54:	6c ad       	ldd	r22, Y+60	; 0x3c
    2b56:	7d ad       	ldd	r23, Y+61	; 0x3d
    2b58:	8e ad       	ldd	r24, Y+62	; 0x3e
    2b5a:	9f ad       	ldd	r25, Y+63	; 0x3f
    2b5c:	ae 97       	sbiw	r28, 0x2e	; 46
    2b5e:	e4 96       	adiw	r28, 0x34	; 52
    2b60:	2c ad       	ldd	r18, Y+60	; 0x3c
    2b62:	3d ad       	ldd	r19, Y+61	; 0x3d
    2b64:	4e ad       	ldd	r20, Y+62	; 0x3e
    2b66:	5f ad       	ldd	r21, Y+63	; 0x3f
    2b68:	e4 97       	sbiw	r28, 0x34	; 52
    2b6a:	0e 94 4e 28 	call	0x509c	; 0x509c <__udivmodsi4>
    2b6e:	86 2f       	mov	r24, r22
    2b70:	ae 96       	adiw	r28, 0x2e	; 46
    2b72:	2c af       	std	Y+60, r18	; 0x3c
    2b74:	3d af       	std	Y+61, r19	; 0x3d
    2b76:	4e af       	std	Y+62, r20	; 0x3e
    2b78:	5f af       	std	Y+63, r21	; 0x3f
    2b7a:	ae 97       	sbiw	r28, 0x2e	; 46
			if (d > 9) d += (tc == 'x') ? 0x27 : 0x07;
    2b7c:	6a 30       	cpi	r22, 0x0A	; 10
    2b7e:	20 f0       	brcs	.+8      	; 0x2b88 <f_printf+0x35e>
    2b80:	e0 96       	adiw	r28, 0x30	; 48
    2b82:	8f ad       	ldd	r24, Y+63	; 0x3f
    2b84:	e0 97       	sbiw	r28, 0x30	; 48
    2b86:	86 0f       	add	r24, r22
			str[i++] = d + '0';
    2b88:	74 01       	movw	r14, r8
    2b8a:	9f ef       	ldi	r25, 0xFF	; 255
    2b8c:	e9 1a       	sub	r14, r25
    2b8e:	f9 0a       	sbc	r15, r25
    2b90:	80 5d       	subi	r24, 0xD0	; 208
    2b92:	d6 01       	movw	r26, r12
    2b94:	8d 93       	st	X+, r24
    2b96:	6d 01       	movw	r12, r26
		} while (v && i < SZ_NUM_BUF);
    2b98:	23 2b       	or	r18, r19
    2b9a:	24 2b       	or	r18, r20
    2b9c:	25 2b       	or	r18, r21
    2b9e:	49 f0       	breq	.+18     	; 0x2bb2 <f_printf+0x388>
    2ba0:	b0 e2       	ldi	r27, 0x20	; 32
    2ba2:	eb 16       	cp	r14, r27
    2ba4:	f1 04       	cpc	r15, r1
    2ba6:	11 f0       	breq	.+4      	; 0x2bac <f_printf+0x382>
    2ba8:	47 01       	movw	r8, r14
    2baa:	d3 cf       	rjmp	.-90     	; 0x2b52 <f_printf+0x328>
    2bac:	8f e1       	ldi	r24, 0x1F	; 31
    2bae:	88 2e       	mov	r8, r24
    2bb0:	91 2c       	mov	r9, r1
		if (f & 1) str[i++] = '-';	/* Sign */
    2bb2:	a0 fe       	sbrs	r10, 0
    2bb4:	0b c0       	rjmp	.+22     	; 0x2bcc <f_printf+0x3a2>
    2bb6:	e7 e4       	ldi	r30, 0x47	; 71
    2bb8:	f0 e0       	ldi	r31, 0x00	; 0
    2bba:	ec 0f       	add	r30, r28
    2bbc:	fd 1f       	adc	r31, r29
    2bbe:	ee 0d       	add	r30, r14
    2bc0:	ff 1d       	adc	r31, r15
    2bc2:	8d e2       	ldi	r24, 0x2D	; 45
    2bc4:	80 83       	st	Z, r24
    2bc6:	d4 01       	movw	r26, r8
    2bc8:	12 96       	adiw	r26, 0x02	; 2
    2bca:	7d 01       	movw	r14, r26
		/* Write it */
		for (j = i; !(f & 2) && j < w; j++) putc_bfd(&pb, pad);	/* Left pads */
    2bcc:	67 01       	movw	r12, r14
    2bce:	b2 e0       	ldi	r27, 0x02	; 2
    2bd0:	ab 22       	and	r10, r27
    2bd2:	bb 24       	eor	r11, r11
    2bd4:	a1 14       	cp	r10, r1
    2bd6:	b1 04       	cpc	r11, r1
    2bd8:	69 f4       	brne	.+26     	; 0x2bf4 <f_printf+0x3ca>
    2bda:	c2 14       	cp	r12, r2
    2bdc:	d3 04       	cpc	r13, r3
    2bde:	50 f4       	brcc	.+20     	; 0x2bf4 <f_printf+0x3ca>
    2be0:	af 96       	adiw	r28, 0x2f	; 47
    2be2:	6f ad       	ldd	r22, Y+63	; 0x3f
    2be4:	af 97       	sbiw	r28, 0x2f	; 47
    2be6:	c3 01       	movw	r24, r6
    2be8:	0e 94 3c 13 	call	0x2678	; 0x2678 <putc_bfd>
    2bec:	ef ef       	ldi	r30, 0xFF	; 255
    2bee:	ce 1a       	sub	r12, r30
    2bf0:	de 0a       	sbc	r13, r30
    2bf2:	f0 cf       	rjmp	.-32     	; 0x2bd4 <f_printf+0x3aa>
    2bf4:	87 e4       	ldi	r24, 0x47	; 71
    2bf6:	90 e0       	ldi	r25, 0x00	; 0
    2bf8:	8c 0f       	add	r24, r28
    2bfa:	9d 1f       	adc	r25, r29
    2bfc:	e8 0e       	add	r14, r24
    2bfe:	f9 1e       	adc	r15, r25
		do putc_bfd(&pb, (TCHAR)str[--i]); while (i);	/* Body */
    2c00:	d7 01       	movw	r26, r14
    2c02:	6e 91       	ld	r22, -X
    2c04:	7d 01       	movw	r14, r26
    2c06:	c3 01       	movw	r24, r6
    2c08:	0e 94 3c 13 	call	0x2678	; 0x2678 <putc_bfd>
    2c0c:	aa 96       	adiw	r28, 0x2a	; 42
    2c0e:	ee ad       	ldd	r30, Y+62	; 0x3e
    2c10:	ff ad       	ldd	r31, Y+63	; 0x3f
    2c12:	aa 97       	sbiw	r28, 0x2a	; 42
    2c14:	ee 16       	cp	r14, r30
    2c16:	ff 06       	cpc	r15, r31
    2c18:	99 f7       	brne	.-26     	; 0x2c00 <f_printf+0x3d6>
		while (j++ < w) putc_bfd(&pb, ' ');		/* Right pads */
    2c1a:	c2 14       	cp	r12, r2
    2c1c:	d3 04       	cpc	r13, r3
    2c1e:	08 f0       	brcs	.+2      	; 0x2c22 <f_printf+0x3f8>
    2c20:	da ce       	rjmp	.-588    	; 0x29d6 <f_printf+0x1ac>
    2c22:	60 e2       	ldi	r22, 0x20	; 32
    2c24:	c3 01       	movw	r24, r6
    2c26:	0e 94 3c 13 	call	0x2678	; 0x2678 <putc_bfd>
    2c2a:	ff ef       	ldi	r31, 0xFF	; 255
    2c2c:	cf 1a       	sub	r12, r31
    2c2e:	df 0a       	sbc	r13, r31
    2c30:	f4 cf       	rjmp	.-24     	; 0x2c1a <f_printf+0x3f0>
	}

	va_end(arp);

	return putc_flush(&pb);
    2c32:	ce 01       	movw	r24, r28
    2c34:	01 96       	adiw	r24, 0x01	; 1
    2c36:	0e 94 83 13 	call	0x2706	; 0x2706 <putc_flush>
}
    2c3a:	cd 58       	subi	r28, 0x8D	; 141
    2c3c:	df 4f       	sbci	r29, 0xFF	; 255
    2c3e:	e2 e1       	ldi	r30, 0x12	; 18
    2c40:	0c 94 fc 28 	jmp	0x51f8	; 0x51f8 <__epilogue_restores__>

00002c44 <ioInit>:
/************************************************************************
Initializes input and output.
************************************************************************/
void ioInit(void) {
	// Turn on outputs
	LED_DDR |= (1<<SD_LED) | (1<<STOP_LED) | (1<<GREEN_HEART_LED) | (1<<RED_HEART_LED);
    2c44:	87 b1       	in	r24, 0x07	; 7
    2c46:	8c 63       	ori	r24, 0x3C	; 60
    2c48:	87 b9       	out	0x07, r24	; 7
	IO_DDR |= (1<<SUMMER);
    2c4a:	53 9a       	sbi	0x0a, 3	; 10
	// Activate inputs, pull-up resistances
	IO_DDR &= ~((1<<STOP_BTN) | (1<<UNSTOP_BTN) | (1<<PING_BTN) | (1<<MODE_SWITCH));
    2c4c:	8a b1       	in	r24, 0x0a	; 10
    2c4e:	8b 78       	andi	r24, 0x8B	; 139
    2c50:	8a b9       	out	0x0a, r24	; 10
	IO_PORT |= (1<<STOP_BTN) | (1<<UNSTOP_BTN) | (1<<PING_BTN) | (1<<MODE_SWITCH);
    2c52:	8b b1       	in	r24, 0x0b	; 11
    2c54:	84 67       	ori	r24, 0x74	; 116
    2c56:	8b b9       	out	0x0b, r24	; 11
	// Start timer for summer
	TCCR2B |= (1<<CS21) | (1<<CS20); // Set prescaler
    2c58:	e1 eb       	ldi	r30, 0xB1	; 177
    2c5a:	f0 e0       	ldi	r31, 0x00	; 0
    2c5c:	80 81       	ld	r24, Z
    2c5e:	83 60       	ori	r24, 0x03	; 3
    2c60:	80 83       	st	Z, r24
	TCCR2A |= (1<<COM2B0) | (1<<WGM21); // Toggle on compare match
    2c62:	e0 eb       	ldi	r30, 0xB0	; 176
    2c64:	f0 e0       	ldi	r31, 0x00	; 0
    2c66:	80 81       	ld	r24, Z
    2c68:	82 61       	ori	r24, 0x12	; 18
    2c6a:	80 83       	st	Z, r24
    2c6c:	08 95       	ret

00002c6e <setLed>:

Input:	The led to set (SD_LED / STOP_LED / GREEN_HEART_LED / 
		RED_HEART_LED), true or false if on or off.
************************************************************************/
void setLed(uint8_t led, bool on) {
	if (on) LED_PORT |= (1<<led);
    2c6e:	48 b1       	in	r20, 0x08	; 8
    2c70:	21 e0       	ldi	r18, 0x01	; 1
    2c72:	30 e0       	ldi	r19, 0x00	; 0
    2c74:	66 23       	and	r22, r22
    2c76:	49 f0       	breq	.+18     	; 0x2c8a <setLed+0x1c>
    2c78:	b9 01       	movw	r22, r18
    2c7a:	02 c0       	rjmp	.+4      	; 0x2c80 <setLed+0x12>
    2c7c:	66 0f       	add	r22, r22
    2c7e:	77 1f       	adc	r23, r23
    2c80:	8a 95       	dec	r24
    2c82:	e2 f7       	brpl	.-8      	; 0x2c7c <setLed+0xe>
    2c84:	cb 01       	movw	r24, r22
    2c86:	84 2b       	or	r24, r20
    2c88:	09 c0       	rjmp	.+18     	; 0x2c9c <setLed+0x2e>
	else LED_PORT &= ~(1<<led);
    2c8a:	b9 01       	movw	r22, r18
    2c8c:	02 c0       	rjmp	.+4      	; 0x2c92 <setLed+0x24>
    2c8e:	66 0f       	add	r22, r22
    2c90:	77 1f       	adc	r23, r23
    2c92:	8a 95       	dec	r24
    2c94:	e2 f7       	brpl	.-8      	; 0x2c8e <setLed+0x20>
    2c96:	cb 01       	movw	r24, r22
    2c98:	80 95       	com	r24
    2c9a:	84 23       	and	r24, r20
    2c9c:	88 b9       	out	0x08, r24	; 8
    2c9e:	08 95       	ret

00002ca0 <btnIsPressed>:

Input:	The system time in ms.

Return:	A int corresponding to which button was pressed (0 if none).
************************************************************************/
uint8_t btnIsPressed(uint32_t ms) {
    2ca0:	8f 92       	push	r8
    2ca2:	9f 92       	push	r9
    2ca4:	af 92       	push	r10
    2ca6:	bf 92       	push	r11
    2ca8:	cf 92       	push	r12
    2caa:	df 92       	push	r13
    2cac:	ef 92       	push	r14
    2cae:	ff 92       	push	r15
	if (!(IO_PIN & (1 << STOP_BTN))) {
    2cb0:	39 b1       	in	r19, 0x09	; 9
    2cb2:	23 2f       	mov	r18, r19
    2cb4:	24 70       	andi	r18, 0x04	; 4
    2cb6:	32 fd       	sbrc	r19, 2
    2cb8:	26 c0       	rjmp	.+76     	; 0x2d06 <btnIsPressed+0x66>
		// Check if just or still pressed
		if (btnPressed == STOP_BTN) {
    2cba:	30 91 ca 04 	lds	r19, 0x04CA	; 0x8004ca <btnPressed>
    2cbe:	32 30       	cpi	r19, 0x02	; 2
    2cc0:	01 f5       	brne	.+64     	; 0x2d02 <btnIsPressed+0x62>
			if (ms - timePressed >= 300) {
    2cc2:	c0 90 cb 04 	lds	r12, 0x04CB	; 0x8004cb <timePressed>
    2cc6:	d0 90 cc 04 	lds	r13, 0x04CC	; 0x8004cc <timePressed+0x1>
    2cca:	e0 90 cd 04 	lds	r14, 0x04CD	; 0x8004cd <timePressed+0x2>
    2cce:	f0 90 ce 04 	lds	r15, 0x04CE	; 0x8004ce <timePressed+0x3>
    2cd2:	4b 01       	movw	r8, r22
    2cd4:	5c 01       	movw	r10, r24
    2cd6:	8c 18       	sub	r8, r12
    2cd8:	9d 08       	sbc	r9, r13
    2cda:	ae 08       	sbc	r10, r14
    2cdc:	bf 08       	sbc	r11, r15
    2cde:	3c e2       	ldi	r19, 0x2C	; 44
    2ce0:	83 16       	cp	r8, r19
    2ce2:	31 e0       	ldi	r19, 0x01	; 1
    2ce4:	93 06       	cpc	r9, r19
    2ce6:	a1 04       	cpc	r10, r1
    2ce8:	b1 04       	cpc	r11, r1
    2cea:	08 f4       	brcc	.+2      	; 0x2cee <btnIsPressed+0x4e>
    2cec:	6e c0       	rjmp	.+220    	; 0x2dca <btnIsPressed+0x12a>
				// Reset time, return
				timePressed = ms;
    2cee:	60 93 cb 04 	sts	0x04CB, r22	; 0x8004cb <timePressed>
    2cf2:	70 93 cc 04 	sts	0x04CC, r23	; 0x8004cc <timePressed+0x1>
    2cf6:	80 93 cd 04 	sts	0x04CD, r24	; 0x8004cd <timePressed+0x2>
    2cfa:	90 93 ce 04 	sts	0x04CE, r25	; 0x8004ce <timePressed+0x3>
				return STOP_BTN;
    2cfe:	22 e0       	ldi	r18, 0x02	; 2
    2d00:	64 c0       	rjmp	.+200    	; 0x2dca <btnIsPressed+0x12a>
			}
		} else {
			btnPressed = STOP_BTN;
    2d02:	32 e0       	ldi	r19, 0x02	; 2
    2d04:	2a c0       	rjmp	.+84     	; 0x2d5a <btnIsPressed+0xba>
			timePressed = ms;
		}
	} else if (!(IO_PIN & (1 << UNSTOP_BTN))) {
    2d06:	39 b1       	in	r19, 0x09	; 9
    2d08:	23 2f       	mov	r18, r19
    2d0a:	20 71       	andi	r18, 0x10	; 16
    2d0c:	34 fd       	sbrc	r19, 4
    2d0e:	30 c0       	rjmp	.+96     	; 0x2d70 <btnIsPressed+0xd0>
		// Check if just or still pressed
		if (btnPressed == UNSTOP_BTN) {
    2d10:	30 91 ca 04 	lds	r19, 0x04CA	; 0x8004ca <btnPressed>
    2d14:	34 30       	cpi	r19, 0x04	; 4
    2d16:	01 f5       	brne	.+64     	; 0x2d58 <btnIsPressed+0xb8>
			if (ms - timePressed >= 3000) {
    2d18:	c0 90 cb 04 	lds	r12, 0x04CB	; 0x8004cb <timePressed>
    2d1c:	d0 90 cc 04 	lds	r13, 0x04CC	; 0x8004cc <timePressed+0x1>
    2d20:	e0 90 cd 04 	lds	r14, 0x04CD	; 0x8004cd <timePressed+0x2>
    2d24:	f0 90 ce 04 	lds	r15, 0x04CE	; 0x8004ce <timePressed+0x3>
    2d28:	4b 01       	movw	r8, r22
    2d2a:	5c 01       	movw	r10, r24
    2d2c:	8c 18       	sub	r8, r12
    2d2e:	9d 08       	sbc	r9, r13
    2d30:	ae 08       	sbc	r10, r14
    2d32:	bf 08       	sbc	r11, r15
    2d34:	38 eb       	ldi	r19, 0xB8	; 184
    2d36:	83 16       	cp	r8, r19
    2d38:	3b e0       	ldi	r19, 0x0B	; 11
    2d3a:	93 06       	cpc	r9, r19
    2d3c:	a1 04       	cpc	r10, r1
    2d3e:	b1 04       	cpc	r11, r1
    2d40:	08 f4       	brcc	.+2      	; 0x2d44 <btnIsPressed+0xa4>
    2d42:	43 c0       	rjmp	.+134    	; 0x2dca <btnIsPressed+0x12a>
				// Reset time, return
				timePressed = ms;
    2d44:	60 93 cb 04 	sts	0x04CB, r22	; 0x8004cb <timePressed>
    2d48:	70 93 cc 04 	sts	0x04CC, r23	; 0x8004cc <timePressed+0x1>
    2d4c:	80 93 cd 04 	sts	0x04CD, r24	; 0x8004cd <timePressed+0x2>
    2d50:	90 93 ce 04 	sts	0x04CE, r25	; 0x8004ce <timePressed+0x3>
				return UNSTOP_BTN;
    2d54:	24 e0       	ldi	r18, 0x04	; 4
    2d56:	39 c0       	rjmp	.+114    	; 0x2dca <btnIsPressed+0x12a>
			}
		} else {
			btnPressed = UNSTOP_BTN;
    2d58:	34 e0       	ldi	r19, 0x04	; 4
    2d5a:	30 93 ca 04 	sts	0x04CA, r19	; 0x8004ca <btnPressed>
			timePressed = ms;
    2d5e:	60 93 cb 04 	sts	0x04CB, r22	; 0x8004cb <timePressed>
    2d62:	70 93 cc 04 	sts	0x04CC, r23	; 0x8004cc <timePressed+0x1>
    2d66:	80 93 cd 04 	sts	0x04CD, r24	; 0x8004cd <timePressed+0x2>
    2d6a:	90 93 ce 04 	sts	0x04CE, r25	; 0x8004ce <timePressed+0x3>
    2d6e:	2d c0       	rjmp	.+90     	; 0x2dca <btnIsPressed+0x12a>
		}
	} else if (!(IO_PIN & (1 << PING_BTN))) {
    2d70:	39 b1       	in	r19, 0x09	; 9
    2d72:	23 2f       	mov	r18, r19
    2d74:	20 72       	andi	r18, 0x20	; 32
    2d76:	35 fd       	sbrc	r19, 5
    2d78:	25 c0       	rjmp	.+74     	; 0x2dc4 <btnIsPressed+0x124>
		// Check if just or still pressed
		if (btnPressed == PING_BTN) {
    2d7a:	30 91 ca 04 	lds	r19, 0x04CA	; 0x8004ca <btnPressed>
    2d7e:	35 30       	cpi	r19, 0x05	; 5
    2d80:	f9 f4       	brne	.+62     	; 0x2dc0 <btnIsPressed+0x120>
			if (ms - timePressed >= 300) {
    2d82:	c0 90 cb 04 	lds	r12, 0x04CB	; 0x8004cb <timePressed>
    2d86:	d0 90 cc 04 	lds	r13, 0x04CC	; 0x8004cc <timePressed+0x1>
    2d8a:	e0 90 cd 04 	lds	r14, 0x04CD	; 0x8004cd <timePressed+0x2>
    2d8e:	f0 90 ce 04 	lds	r15, 0x04CE	; 0x8004ce <timePressed+0x3>
    2d92:	4b 01       	movw	r8, r22
    2d94:	5c 01       	movw	r10, r24
    2d96:	8c 18       	sub	r8, r12
    2d98:	9d 08       	sbc	r9, r13
    2d9a:	ae 08       	sbc	r10, r14
    2d9c:	bf 08       	sbc	r11, r15
    2d9e:	3c e2       	ldi	r19, 0x2C	; 44
    2da0:	83 16       	cp	r8, r19
    2da2:	31 e0       	ldi	r19, 0x01	; 1
    2da4:	93 06       	cpc	r9, r19
    2da6:	a1 04       	cpc	r10, r1
    2da8:	b1 04       	cpc	r11, r1
    2daa:	78 f0       	brcs	.+30     	; 0x2dca <btnIsPressed+0x12a>
				// Reset time, return
				timePressed = ms;
    2dac:	60 93 cb 04 	sts	0x04CB, r22	; 0x8004cb <timePressed>
    2db0:	70 93 cc 04 	sts	0x04CC, r23	; 0x8004cc <timePressed+0x1>
    2db4:	80 93 cd 04 	sts	0x04CD, r24	; 0x8004cd <timePressed+0x2>
    2db8:	90 93 ce 04 	sts	0x04CE, r25	; 0x8004ce <timePressed+0x3>
				return PING_BTN;
    2dbc:	25 e0       	ldi	r18, 0x05	; 5
    2dbe:	05 c0       	rjmp	.+10     	; 0x2dca <btnIsPressed+0x12a>
			}
		} else {
			btnPressed = PING_BTN;
    2dc0:	35 e0       	ldi	r19, 0x05	; 5
    2dc2:	cb cf       	rjmp	.-106    	; 0x2d5a <btnIsPressed+0xba>
			timePressed = ms;
		}
	} else {
		btnPressed = 0;
    2dc4:	10 92 ca 04 	sts	0x04CA, r1	; 0x8004ca <btnPressed>
	}
	return 0;
    2dc8:	20 e0       	ldi	r18, 0x00	; 0
}
    2dca:	82 2f       	mov	r24, r18
    2dcc:	ff 90       	pop	r15
    2dce:	ef 90       	pop	r14
    2dd0:	df 90       	pop	r13
    2dd2:	cf 90       	pop	r12
    2dd4:	bf 90       	pop	r11
    2dd6:	af 90       	pop	r10
    2dd8:	9f 90       	pop	r9
    2dda:	8f 90       	pop	r8
    2ddc:	08 95       	ret

00002dde <summerSetFrequency>:
Sets the frequency of the timer outputting to the summer.

Input:	The frequency to set, 0 turns off the summer.
************************************************************************/
void summerSetFrequency(uint8_t freq) {
	OCR2A = freq;
    2dde:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    2de2:	08 95       	ret

00002de4 <normalMode>:
Checks which mode is selected.

Return:	True if normal mode, false otherwise.
************************************************************************/
bool normalMode(void) {
	return !(IO_PIN & (1 << MODE_SWITCH));
    2de4:	89 b1       	in	r24, 0x09	; 9
    2de6:	86 fb       	bst	r24, 6
    2de8:	88 27       	eor	r24, r24
    2dea:	80 f9       	bld	r24, 0
}
    2dec:	91 e0       	ldi	r25, 0x01	; 1
    2dee:	89 27       	eor	r24, r25
    2df0:	08 95       	ret

00002df2 <__vector_18>:
/*************** Interrupts ***************/
/*
 * USART Rx interrupt.
 * For communication with ESP32.
 */
ISR(USART_RX_vect) {
    2df2:	1f 92       	push	r1
    2df4:	0f 92       	push	r0
    2df6:	0f b6       	in	r0, 0x3f	; 63
    2df8:	0f 92       	push	r0
    2dfa:	11 24       	eor	r1, r1
    2dfc:	af 92       	push	r10
    2dfe:	bf 92       	push	r11
    2e00:	cf 92       	push	r12
    2e02:	df 92       	push	r13
    2e04:	ef 92       	push	r14
    2e06:	ff 92       	push	r15
    2e08:	0f 93       	push	r16
    2e0a:	1f 93       	push	r17
    2e0c:	2f 93       	push	r18
    2e0e:	3f 93       	push	r19
    2e10:	4f 93       	push	r20
    2e12:	5f 93       	push	r21
    2e14:	6f 93       	push	r22
    2e16:	7f 93       	push	r23
    2e18:	8f 93       	push	r24
    2e1a:	9f 93       	push	r25
    2e1c:	af 93       	push	r26
    2e1e:	ef 93       	push	r30
    2e20:	ff 93       	push	r31
	// Read data from RX
	unsigned char data = UDR0;
    2e22:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	
	// Check if there is space in buffer
	uint8_t tmpHead = (bufHead + 1) & BUF_MASK;
    2e26:	80 91 32 03 	lds	r24, 0x0332	; 0x800332 <bufHead>
    2e2a:	8f 5f       	subi	r24, 0xFF	; 255
	if (tmpHead != bufTail) {
    2e2c:	20 91 31 03 	lds	r18, 0x0331	; 0x800331 <bufTail>
    2e30:	82 17       	cp	r24, r18
    2e32:	09 f4       	brne	.+2      	; 0x2e36 <__vector_18+0x44>
    2e34:	63 c0       	rjmp	.+198    	; 0x2efc <__vector_18+0x10a>
		bufHead = tmpHead;
    2e36:	80 93 32 03 	sts	0x0332, r24	; 0x800332 <bufHead>
		// End of message time also needs to be added
		if (data == '\n') {
    2e3a:	9a 30       	cpi	r25, 0x0A	; 10
    2e3c:	09 f0       	breq	.+2      	; 0x2e40 <__vector_18+0x4e>
    2e3e:	58 c0       	rjmp	.+176    	; 0x2ef0 <__vector_18+0xfe>
			// Check if there is space in buffer
			tmpHead = (bufHead + 1) & BUF_MASK;
    2e40:	a0 91 32 03 	lds	r26, 0x0332	; 0x800332 <bufHead>
    2e44:	af 5f       	subi	r26, 0xFF	; 255
			if (tmpHead != bufTail) {
    2e46:	80 91 31 03 	lds	r24, 0x0331	; 0x800331 <bufTail>
    2e4a:	a8 17       	cp	r26, r24
    2e4c:	09 f4       	brne	.+2      	; 0x2e50 <__vector_18+0x5e>
    2e4e:	50 c0       	rjmp	.+160    	; 0x2ef0 <__vector_18+0xfe>
				// Add time
				buffer[bufHead] = (unsigned char) ((ms - offsetBase) == 0 ? 1 : (ms - offsetBase));
    2e50:	e0 91 32 03 	lds	r30, 0x0332	; 0x800332 <bufHead>
    2e54:	f0 e0       	ldi	r31, 0x00	; 0
    2e56:	20 91 3e 04 	lds	r18, 0x043E	; 0x80043e <ms>
    2e5a:	30 91 3f 04 	lds	r19, 0x043F	; 0x80043f <ms+0x1>
    2e5e:	40 91 40 04 	lds	r20, 0x0440	; 0x800440 <ms+0x2>
    2e62:	50 91 41 04 	lds	r21, 0x0441	; 0x800441 <ms+0x3>
    2e66:	60 91 42 04 	lds	r22, 0x0442	; 0x800442 <ms+0x4>
    2e6a:	70 91 43 04 	lds	r23, 0x0443	; 0x800443 <ms+0x5>
    2e6e:	80 91 44 04 	lds	r24, 0x0444	; 0x800444 <ms+0x6>
    2e72:	90 91 45 04 	lds	r25, 0x0445	; 0x800445 <ms+0x7>
    2e76:	a0 90 36 04 	lds	r10, 0x0436	; 0x800436 <offsetBase>
    2e7a:	b0 90 37 04 	lds	r11, 0x0437	; 0x800437 <offsetBase+0x1>
    2e7e:	c0 90 38 04 	lds	r12, 0x0438	; 0x800438 <offsetBase+0x2>
    2e82:	d0 90 39 04 	lds	r13, 0x0439	; 0x800439 <offsetBase+0x3>
    2e86:	e0 90 3a 04 	lds	r14, 0x043A	; 0x80043a <offsetBase+0x4>
    2e8a:	f0 90 3b 04 	lds	r15, 0x043B	; 0x80043b <offsetBase+0x5>
    2e8e:	00 91 3c 04 	lds	r16, 0x043C	; 0x80043c <offsetBase+0x6>
    2e92:	10 91 3d 04 	lds	r17, 0x043D	; 0x80043d <offsetBase+0x7>
    2e96:	0e 94 35 29 	call	0x526a	; 0x526a <__cmpdi2>
    2e9a:	19 f1       	breq	.+70     	; 0x2ee2 <__vector_18+0xf0>
    2e9c:	20 91 3e 04 	lds	r18, 0x043E	; 0x80043e <ms>
    2ea0:	30 91 3f 04 	lds	r19, 0x043F	; 0x80043f <ms+0x1>
    2ea4:	40 91 40 04 	lds	r20, 0x0440	; 0x800440 <ms+0x2>
    2ea8:	50 91 41 04 	lds	r21, 0x0441	; 0x800441 <ms+0x3>
    2eac:	60 91 42 04 	lds	r22, 0x0442	; 0x800442 <ms+0x4>
    2eb0:	70 91 43 04 	lds	r23, 0x0443	; 0x800443 <ms+0x5>
    2eb4:	80 91 44 04 	lds	r24, 0x0444	; 0x800444 <ms+0x6>
    2eb8:	90 91 45 04 	lds	r25, 0x0445	; 0x800445 <ms+0x7>
    2ebc:	a0 90 36 04 	lds	r10, 0x0436	; 0x800436 <offsetBase>
    2ec0:	b0 90 37 04 	lds	r11, 0x0437	; 0x800437 <offsetBase+0x1>
    2ec4:	c0 90 38 04 	lds	r12, 0x0438	; 0x800438 <offsetBase+0x2>
    2ec8:	d0 90 39 04 	lds	r13, 0x0439	; 0x800439 <offsetBase+0x3>
    2ecc:	e0 90 3a 04 	lds	r14, 0x043A	; 0x80043a <offsetBase+0x4>
    2ed0:	f0 90 3b 04 	lds	r15, 0x043B	; 0x80043b <offsetBase+0x5>
    2ed4:	00 91 3c 04 	lds	r16, 0x043C	; 0x80043c <offsetBase+0x6>
    2ed8:	10 91 3d 04 	lds	r17, 0x043D	; 0x80043d <offsetBase+0x7>
    2edc:	0e 94 2c 29 	call	0x5258	; 0x5258 <__subdi3>
    2ee0:	01 c0       	rjmp	.+2      	; 0x2ee4 <__vector_18+0xf2>
    2ee2:	21 e0       	ldi	r18, 0x01	; 1
    2ee4:	ed 5c       	subi	r30, 0xCD	; 205
    2ee6:	fc 4f       	sbci	r31, 0xFC	; 252
    2ee8:	20 83       	st	Z, r18
				bufHead = tmpHead;
    2eea:	a0 93 32 03 	sts	0x0332, r26	; 0x800332 <bufHead>
				data = '\0';
    2eee:	90 e0       	ldi	r25, 0x00	; 0
			}
		}
		// Add data
		buffer[bufHead] = data;
    2ef0:	e0 91 32 03 	lds	r30, 0x0332	; 0x800332 <bufHead>
    2ef4:	f0 e0       	ldi	r31, 0x00	; 0
    2ef6:	ed 5c       	subi	r30, 0xCD	; 205
    2ef8:	fc 4f       	sbci	r31, 0xFC	; 252
    2efa:	90 83       	st	Z, r25
	}
}
    2efc:	ff 91       	pop	r31
    2efe:	ef 91       	pop	r30
    2f00:	af 91       	pop	r26
    2f02:	9f 91       	pop	r25
    2f04:	8f 91       	pop	r24
    2f06:	7f 91       	pop	r23
    2f08:	6f 91       	pop	r22
    2f0a:	5f 91       	pop	r21
    2f0c:	4f 91       	pop	r20
    2f0e:	3f 91       	pop	r19
    2f10:	2f 91       	pop	r18
    2f12:	1f 91       	pop	r17
    2f14:	0f 91       	pop	r16
    2f16:	ff 90       	pop	r15
    2f18:	ef 90       	pop	r14
    2f1a:	df 90       	pop	r13
    2f1c:	cf 90       	pop	r12
    2f1e:	bf 90       	pop	r11
    2f20:	af 90       	pop	r10
    2f22:	0f 90       	pop	r0
    2f24:	0f be       	out	0x3f, r0	; 63
    2f26:	0f 90       	pop	r0
    2f28:	1f 90       	pop	r1
    2f2a:	18 95       	reti

00002f2c <__vector_14>:
/*
 * Timer 0 interrupt.
 * For SD-card.
 */
ISR(TIMER0_COMPA_vect) {
    2f2c:	1f 92       	push	r1
    2f2e:	0f 92       	push	r0
    2f30:	0f b6       	in	r0, 0x3f	; 63
    2f32:	0f 92       	push	r0
    2f34:	11 24       	eor	r1, r1
    2f36:	2f 93       	push	r18
    2f38:	3f 93       	push	r19
    2f3a:	4f 93       	push	r20
    2f3c:	5f 93       	push	r21
    2f3e:	6f 93       	push	r22
    2f40:	7f 93       	push	r23
    2f42:	8f 93       	push	r24
    2f44:	9f 93       	push	r25
    2f46:	af 93       	push	r26
    2f48:	bf 93       	push	r27
    2f4a:	ef 93       	push	r30
    2f4c:	ff 93       	push	r31
	disk_timerproc(); // Drive timer procedure of low level disk I/O module
    2f4e:	0e 94 ab 20 	call	0x4156	; 0x4156 <disk_timerproc>
}
    2f52:	ff 91       	pop	r31
    2f54:	ef 91       	pop	r30
    2f56:	bf 91       	pop	r27
    2f58:	af 91       	pop	r26
    2f5a:	9f 91       	pop	r25
    2f5c:	8f 91       	pop	r24
    2f5e:	7f 91       	pop	r23
    2f60:	6f 91       	pop	r22
    2f62:	5f 91       	pop	r21
    2f64:	4f 91       	pop	r20
    2f66:	3f 91       	pop	r19
    2f68:	2f 91       	pop	r18
    2f6a:	0f 90       	pop	r0
    2f6c:	0f be       	out	0x3f, r0	; 63
    2f6e:	0f 90       	pop	r0
    2f70:	1f 90       	pop	r1
    2f72:	18 95       	reti

00002f74 <__vector_11>:

/*
 * Timer 1 interrupt.
 * For system clock.
 */
ISR(TIMER1_COMPA_vect) {
    2f74:	1f 92       	push	r1
    2f76:	0f 92       	push	r0
    2f78:	0f b6       	in	r0, 0x3f	; 63
    2f7a:	0f 92       	push	r0
    2f7c:	11 24       	eor	r1, r1
    2f7e:	7f 92       	push	r7
    2f80:	8f 92       	push	r8
    2f82:	9f 92       	push	r9
    2f84:	af 92       	push	r10
    2f86:	bf 92       	push	r11
    2f88:	cf 92       	push	r12
    2f8a:	df 92       	push	r13
    2f8c:	ef 92       	push	r14
    2f8e:	ff 92       	push	r15
    2f90:	0f 93       	push	r16
    2f92:	1f 93       	push	r17
    2f94:	2f 93       	push	r18
    2f96:	3f 93       	push	r19
    2f98:	4f 93       	push	r20
    2f9a:	5f 93       	push	r21
    2f9c:	6f 93       	push	r22
    2f9e:	7f 93       	push	r23
    2fa0:	8f 93       	push	r24
    2fa2:	9f 93       	push	r25
    2fa4:	af 93       	push	r26
    2fa6:	bf 93       	push	r27
    2fa8:	cf 93       	push	r28
    2faa:	df 93       	push	r29
    2fac:	ef 93       	push	r30
    2fae:	ff 93       	push	r31
	if (!(ms++ % 1000)) {
    2fb0:	70 90 3e 04 	lds	r7, 0x043E	; 0x80043e <ms>
    2fb4:	80 90 3f 04 	lds	r8, 0x043F	; 0x80043f <ms+0x1>
    2fb8:	90 90 40 04 	lds	r9, 0x0440	; 0x800440 <ms+0x2>
    2fbc:	d0 91 41 04 	lds	r29, 0x0441	; 0x800441 <ms+0x3>
    2fc0:	c0 91 42 04 	lds	r28, 0x0442	; 0x800442 <ms+0x4>
    2fc4:	b0 91 43 04 	lds	r27, 0x0443	; 0x800443 <ms+0x5>
    2fc8:	f0 91 44 04 	lds	r31, 0x0444	; 0x800444 <ms+0x6>
    2fcc:	e0 91 45 04 	lds	r30, 0x0445	; 0x800445 <ms+0x7>
    2fd0:	27 2d       	mov	r18, r7
    2fd2:	38 2d       	mov	r19, r8
    2fd4:	49 2d       	mov	r20, r9
    2fd6:	5d 2f       	mov	r21, r29
    2fd8:	6c 2f       	mov	r22, r28
    2fda:	7b 2f       	mov	r23, r27
    2fdc:	8f 2f       	mov	r24, r31
    2fde:	9e 2f       	mov	r25, r30
    2fe0:	a1 e0       	ldi	r26, 0x01	; 1
    2fe2:	0e 94 20 29 	call	0x5240	; 0x5240 <__adddi3_s8>
    2fe6:	20 93 3e 04 	sts	0x043E, r18	; 0x80043e <ms>
    2fea:	30 93 3f 04 	sts	0x043F, r19	; 0x80043f <ms+0x1>
    2fee:	40 93 40 04 	sts	0x0440, r20	; 0x800440 <ms+0x2>
    2ff2:	50 93 41 04 	sts	0x0441, r21	; 0x800441 <ms+0x3>
    2ff6:	60 93 42 04 	sts	0x0442, r22	; 0x800442 <ms+0x4>
    2ffa:	70 93 43 04 	sts	0x0443, r23	; 0x800443 <ms+0x5>
    2ffe:	80 93 44 04 	sts	0x0444, r24	; 0x800444 <ms+0x6>
    3002:	90 93 45 04 	sts	0x0445, r25	; 0x800445 <ms+0x7>
    3006:	88 ee       	ldi	r24, 0xE8	; 232
    3008:	a8 2e       	mov	r10, r24
    300a:	93 e0       	ldi	r25, 0x03	; 3
    300c:	b9 2e       	mov	r11, r25
    300e:	c1 2c       	mov	r12, r1
    3010:	d1 2c       	mov	r13, r1
    3012:	e1 2c       	mov	r14, r1
    3014:	f1 2c       	mov	r15, r1
    3016:	00 e0       	ldi	r16, 0x00	; 0
    3018:	10 e0       	ldi	r17, 0x00	; 0
    301a:	27 2d       	mov	r18, r7
    301c:	38 2d       	mov	r19, r8
    301e:	49 2d       	mov	r20, r9
    3020:	5d 2f       	mov	r21, r29
    3022:	6c 2f       	mov	r22, r28
    3024:	7b 2f       	mov	r23, r27
    3026:	8f 2f       	mov	r24, r31
    3028:	9e 2f       	mov	r25, r30
    302a:	0e 94 81 28 	call	0x5102	; 0x5102 <__umoddi3>
    302e:	a0 e0       	ldi	r26, 0x00	; 0
    3030:	0e 94 3e 29 	call	0x527c	; 0x527c <__cmpdi2_s8>
    3034:	c1 f4       	brne	.+48     	; 0x3066 <__vector_11+0xf2>
		printf("90\n"); // Send heartbeat
    3036:	80 ee       	ldi	r24, 0xE0	; 224
    3038:	91 e0       	ldi	r25, 0x01	; 1
    303a:	0e 94 91 29 	call	0x5322	; 0x5322 <puts>
		setLed(RED_HEART_LED, redHeartLed);
    303e:	60 91 34 04 	lds	r22, 0x0434	; 0x800434 <redHeartLed>
    3042:	85 e0       	ldi	r24, 0x05	; 5
    3044:	0e 94 37 16 	call	0x2c6e	; 0x2c6e <setLed>
		summerSetFrequency(200 + 50*redHeartLed);
    3048:	80 91 34 04 	lds	r24, 0x0434	; 0x800434 <redHeartLed>
    304c:	92 e3       	ldi	r25, 0x32	; 50
    304e:	89 9f       	mul	r24, r25
    3050:	80 2d       	mov	r24, r0
    3052:	11 24       	eor	r1, r1
    3054:	88 53       	subi	r24, 0x38	; 56
    3056:	0e 94 ef 16 	call	0x2dde	; 0x2dde <summerSetFrequency>
		redHeartLed = !redHeartLed;
    305a:	90 91 34 04 	lds	r25, 0x0434	; 0x800434 <redHeartLed>
    305e:	81 e0       	ldi	r24, 0x01	; 1
    3060:	89 27       	eor	r24, r25
    3062:	80 93 34 04 	sts	0x0434, r24	; 0x800434 <redHeartLed>
	}
}
    3066:	ff 91       	pop	r31
    3068:	ef 91       	pop	r30
    306a:	df 91       	pop	r29
    306c:	cf 91       	pop	r28
    306e:	bf 91       	pop	r27
    3070:	af 91       	pop	r26
    3072:	9f 91       	pop	r25
    3074:	8f 91       	pop	r24
    3076:	7f 91       	pop	r23
    3078:	6f 91       	pop	r22
    307a:	5f 91       	pop	r21
    307c:	4f 91       	pop	r20
    307e:	3f 91       	pop	r19
    3080:	2f 91       	pop	r18
    3082:	1f 91       	pop	r17
    3084:	0f 91       	pop	r16
    3086:	ff 90       	pop	r15
    3088:	ef 90       	pop	r14
    308a:	df 90       	pop	r13
    308c:	cf 90       	pop	r12
    308e:	bf 90       	pop	r11
    3090:	af 90       	pop	r10
    3092:	9f 90       	pop	r9
    3094:	8f 90       	pop	r8
    3096:	7f 90       	pop	r7
    3098:	0f 90       	pop	r0
    309a:	0f be       	out	0x3f, r0	; 63
    309c:	0f 90       	pop	r0
    309e:	1f 90       	pop	r1
    30a0:	18 95       	reti

000030a2 <draw>:
}

/************************************************************************
Handles the drawing to the OLED-display.
************************************************************************/
void draw(void) {
    30a2:	a5 e0       	ldi	r26, 0x05	; 5
    30a4:	b0 e0       	ldi	r27, 0x00	; 0
    30a6:	e7 e5       	ldi	r30, 0x57	; 87
    30a8:	f8 e1       	ldi	r31, 0x18	; 24
    30aa:	0c 94 e7 28 	jmp	0x51ce	; 0x51ce <__prologue_saves__+0xe>
	u8g_SetFont(&u8g, u8g_font_6x10);
    30ae:	68 ec       	ldi	r22, 0xC8	; 200
    30b0:	70 e0       	ldi	r23, 0x00	; 0
    30b2:	8f ec       	ldi	r24, 0xCF	; 207
    30b4:	94 e0       	ldi	r25, 0x04	; 4
    30b6:	0e 94 35 25 	call	0x4a6a	; 0x4a6a <u8g_SetFont>
	u8g_SetColorIndex(&u8g, 1);
    30ba:	61 e0       	ldi	r22, 0x01	; 1
    30bc:	8f ec       	ldi	r24, 0xCF	; 207
    30be:	94 e0       	ldi	r25, 0x04	; 4
    30c0:	0e 94 03 27 	call	0x4e06	; 0x4e06 <u8g_SetColorIndex>
	
	if (normalMode()) { // Normal
    30c4:	0e 94 f2 16 	call	0x2de4	; 0x2de4 <normalMode>
    30c8:	88 23       	and	r24, r24
    30ca:	09 f4       	brne	.+2      	; 0x30ce <draw+0x2c>
    30cc:	4d c0       	rjmp	.+154    	; 0x3168 <draw+0xc6>
		// Print headers
		u8g_DrawStr(&u8g, 0, 10, "to_car  :");
    30ce:	23 ee       	ldi	r18, 0xE3	; 227
    30d0:	31 e0       	ldi	r19, 0x01	; 1
    30d2:	4a e0       	ldi	r20, 0x0A	; 10
    30d4:	60 e0       	ldi	r22, 0x00	; 0
    30d6:	8f ec       	ldi	r24, 0xCF	; 207
    30d8:	94 e0       	ldi	r25, 0x04	; 4
    30da:	0e 94 c0 24 	call	0x4980	; 0x4980 <u8g_DrawStr>
		u8g_DrawStr(&u8g, 0, 22, "from_car:");
    30de:	2d ee       	ldi	r18, 0xED	; 237
    30e0:	31 e0       	ldi	r19, 0x01	; 1
    30e2:	46 e1       	ldi	r20, 0x16	; 22
    30e4:	60 e0       	ldi	r22, 0x00	; 0
    30e6:	8f ec       	ldi	r24, 0xCF	; 207
    30e8:	94 e0       	ldi	r25, 0x04	; 4
    30ea:	0e 94 c0 24 	call	0x4980	; 0x4980 <u8g_DrawStr>
		u8g_DrawStr(&u8g, 0, 34, "to_rem1 :");
    30ee:	27 ef       	ldi	r18, 0xF7	; 247
    30f0:	31 e0       	ldi	r19, 0x01	; 1
    30f2:	42 e2       	ldi	r20, 0x22	; 34
    30f4:	60 e0       	ldi	r22, 0x00	; 0
    30f6:	8f ec       	ldi	r24, 0xCF	; 207
    30f8:	94 e0       	ldi	r25, 0x04	; 4
    30fa:	0e 94 c0 24 	call	0x4980	; 0x4980 <u8g_DrawStr>
		u8g_DrawStr(&u8g, 0, 46, "to_rem2 :");
    30fe:	21 e0       	ldi	r18, 0x01	; 1
    3100:	32 e0       	ldi	r19, 0x02	; 2
    3102:	4e e2       	ldi	r20, 0x2E	; 46
    3104:	60 e0       	ldi	r22, 0x00	; 0
    3106:	8f ec       	ldi	r24, 0xCF	; 207
    3108:	94 e0       	ldi	r25, 0x04	; 4
    310a:	0e 94 c0 24 	call	0x4980	; 0x4980 <u8g_DrawStr>
		u8g_DrawStr(&u8g, 0, 60, "text:");
    310e:	2b e0       	ldi	r18, 0x0B	; 11
    3110:	32 e0       	ldi	r19, 0x02	; 2
    3112:	4c e3       	ldi	r20, 0x3C	; 60
    3114:	60 e0       	ldi	r22, 0x00	; 0
    3116:	8f ec       	ldi	r24, 0xCF	; 207
    3118:	94 e0       	ldi	r25, 0x04	; 4
    311a:	0e 94 c0 24 	call	0x4980	; 0x4980 <u8g_DrawStr>
		
		// Print messages
		u8g_DrawStr(&u8g, 54, 10, (char *) last_topic_msg[0]);
    311e:	20 ed       	ldi	r18, 0xD0	; 208
    3120:	32 e0       	ldi	r19, 0x02	; 2
    3122:	4a e0       	ldi	r20, 0x0A	; 10
    3124:	66 e3       	ldi	r22, 0x36	; 54
    3126:	8f ec       	ldi	r24, 0xCF	; 207
    3128:	94 e0       	ldi	r25, 0x04	; 4
    312a:	0e 94 c0 24 	call	0x4980	; 0x4980 <u8g_DrawStr>
		u8g_DrawStr(&u8g, 54, 22, (char *) last_topic_msg[1]);
    312e:	23 ee       	ldi	r18, 0xE3	; 227
    3130:	32 e0       	ldi	r19, 0x02	; 2
    3132:	46 e1       	ldi	r20, 0x16	; 22
    3134:	66 e3       	ldi	r22, 0x36	; 54
    3136:	8f ec       	ldi	r24, 0xCF	; 207
    3138:	94 e0       	ldi	r25, 0x04	; 4
    313a:	0e 94 c0 24 	call	0x4980	; 0x4980 <u8g_DrawStr>
		u8g_DrawStr(&u8g, 54, 34, (char *) last_topic_msg[2]);
    313e:	26 ef       	ldi	r18, 0xF6	; 246
    3140:	32 e0       	ldi	r19, 0x02	; 2
    3142:	42 e2       	ldi	r20, 0x22	; 34
    3144:	66 e3       	ldi	r22, 0x36	; 54
    3146:	8f ec       	ldi	r24, 0xCF	; 207
    3148:	94 e0       	ldi	r25, 0x04	; 4
    314a:	0e 94 c0 24 	call	0x4980	; 0x4980 <u8g_DrawStr>
		u8g_DrawStr(&u8g, 54, 46, (char *) last_topic_msg[3]);
    314e:	29 e0       	ldi	r18, 0x09	; 9
    3150:	33 e0       	ldi	r19, 0x03	; 3
    3152:	4e e2       	ldi	r20, 0x2E	; 46
    3154:	66 e3       	ldi	r22, 0x36	; 54
    3156:	8f ec       	ldi	r24, 0xCF	; 207
    3158:	94 e0       	ldi	r25, 0x04	; 4
    315a:	0e 94 c0 24 	call	0x4980	; 0x4980 <u8g_DrawStr>
		u8g_DrawStr(&u8g, 30, 60, (char *) last_text_msg);
    315e:	2d eb       	ldi	r18, 0xBD	; 189
    3160:	32 e0       	ldi	r19, 0x02	; 2
    3162:	4c e3       	ldi	r20, 0x3C	; 60
    3164:	6e e1       	ldi	r22, 0x1E	; 30
    3166:	f6 c0       	rjmp	.+492    	; 0x3354 <draw+0x2b2>
		
	} else { // Game
		// Get center coordinates
		uint8_t centerX = (lastPlaced % 15);
    3168:	80 91 83 02 	lds	r24, 0x0283	; 0x800283 <lastPlaced>
    316c:	6f e0       	ldi	r22, 0x0F	; 15
    316e:	0e 94 42 28 	call	0x5084	; 0x5084 <__udivmodqi4>
		if (centerX < 3) centerX = 3;
    3172:	93 30       	cpi	r25, 0x03	; 3
    3174:	38 f0       	brcs	.+14     	; 0x3184 <draw+0xe2>
    3176:	f9 2e       	mov	r15, r25
    3178:	2b e0       	ldi	r18, 0x0B	; 11
    317a:	29 17       	cp	r18, r25
    317c:	28 f4       	brcc	.+10     	; 0x3188 <draw+0xe6>
    317e:	5b e0       	ldi	r21, 0x0B	; 11
    3180:	f5 2e       	mov	r15, r21
    3182:	02 c0       	rjmp	.+4      	; 0x3188 <draw+0xe6>
    3184:	43 e0       	ldi	r20, 0x03	; 3
    3186:	f4 2e       	mov	r15, r20
		else if (centerX > 11) centerX = 11;
		uint8_t centerY = (lastPlaced / 15);
    3188:	80 91 83 02 	lds	r24, 0x0283	; 0x800283 <lastPlaced>
    318c:	6f e0       	ldi	r22, 0x0F	; 15
    318e:	0e 94 42 28 	call	0x5084	; 0x5084 <__udivmodqi4>
		if (centerY < 3) centerY = 3;
    3192:	83 30       	cpi	r24, 0x03	; 3
    3194:	28 f0       	brcs	.+10     	; 0x31a0 <draw+0xfe>
    3196:	18 2f       	mov	r17, r24
    3198:	8c 30       	cpi	r24, 0x0C	; 12
    319a:	18 f0       	brcs	.+6      	; 0x31a2 <draw+0x100>
    319c:	1b e0       	ldi	r17, 0x0B	; 11
    319e:	01 c0       	rjmp	.+2      	; 0x31a2 <draw+0x100>
    31a0:	13 e0       	ldi	r17, 0x03	; 3
    31a2:	8d ef       	ldi	r24, 0xFD	; 253
    31a4:	81 0f       	add	r24, r17
    31a6:	2f 2d       	mov	r18, r15
    31a8:	9f e0       	ldi	r25, 0x0F	; 15
    31aa:	89 9f       	mul	r24, r25
    31ac:	20 0d       	add	r18, r0
    31ae:	11 24       	eor	r1, r1
    31b0:	82 2f       	mov	r24, r18
    31b2:	a1 2c       	mov	r10, r1
    31b4:	9b e0       	ldi	r25, 0x0B	; 11
    31b6:	e9 2e       	mov	r14, r25
    31b8:	2d ef       	ldi	r18, 0xFD	; 253
    31ba:	92 2e       	mov	r9, r18
    31bc:	98 0e       	add	r9, r24
		
		// Print o and x (7*7 around last placed)
		for (int8_t y = -3; y < 4; y++) {
			for (int8_t x = -3; x < 4; x++) {
				uint8_t boxNmr = (y+centerY) * BOARD_LEN + (x+centerX);
				uint8_t cell = (playingField[boxNmr / 4] & (3 << ((boxNmr % 4) * 2))) >> ((boxNmr % 4) * 2);
    31be:	33 e0       	ldi	r19, 0x03	; 3
    31c0:	c3 2e       	mov	r12, r19
    31c2:	d1 2c       	mov	r13, r1
    31c4:	b9 2c       	mov	r11, r9
    31c6:	ba 0c       	add	r11, r10
		// Get center coordinates
		uint8_t centerX = (lastPlaced % 15);
		if (centerX < 3) centerX = 3;
		else if (centerX > 11) centerX = 11;
		uint8_t centerY = (lastPlaced / 15);
		if (centerY < 3) centerY = 3;
    31c8:	0f e1       	ldi	r16, 0x1F	; 31
		
		// Print o and x (7*7 around last placed)
		for (int8_t y = -3; y < 4; y++) {
			for (int8_t x = -3; x < 4; x++) {
				uint8_t boxNmr = (y+centerY) * BOARD_LEN + (x+centerX);
				uint8_t cell = (playingField[boxNmr / 4] & (3 << ((boxNmr % 4) * 2))) >> ((boxNmr % 4) * 2);
    31ca:	eb 2d       	mov	r30, r11
    31cc:	e6 95       	lsr	r30
    31ce:	e6 95       	lsr	r30
    31d0:	f0 e0       	ldi	r31, 0x00	; 0
    31d2:	ec 57       	subi	r30, 0x7C	; 124
    31d4:	fd 4f       	sbci	r31, 0xFD	; 253
    31d6:	90 81       	ld	r25, Z
    31d8:	2b 2d       	mov	r18, r11
    31da:	23 70       	andi	r18, 0x03	; 3
    31dc:	30 e0       	ldi	r19, 0x00	; 0
    31de:	22 0f       	add	r18, r18
    31e0:	33 1f       	adc	r19, r19
    31e2:	a6 01       	movw	r20, r12
    31e4:	02 2e       	mov	r0, r18
    31e6:	02 c0       	rjmp	.+4      	; 0x31ec <draw+0x14a>
    31e8:	44 0f       	add	r20, r20
    31ea:	55 1f       	adc	r21, r21
    31ec:	0a 94       	dec	r0
    31ee:	e2 f7       	brpl	.-8      	; 0x31e8 <draw+0x146>
    31f0:	89 2f       	mov	r24, r25
    31f2:	90 e0       	ldi	r25, 0x00	; 0
    31f4:	84 23       	and	r24, r20
    31f6:	95 23       	and	r25, r21
    31f8:	02 c0       	rjmp	.+4      	; 0x31fe <draw+0x15c>
    31fa:	95 95       	asr	r25
    31fc:	87 95       	ror	r24
    31fe:	2a 95       	dec	r18
    3200:	e2 f7       	brpl	.-8      	; 0x31fa <draw+0x158>
				// Print x or o
				if (cell == 1) u8g_DrawStr(&u8g, 31 + 10 * (x+3), 11 + 8 * (y+3), "x");
    3202:	81 30       	cpi	r24, 0x01	; 1
    3204:	19 f4       	brne	.+6      	; 0x320c <draw+0x16a>
    3206:	24 e1       	ldi	r18, 0x14	; 20
    3208:	32 e0       	ldi	r19, 0x02	; 2
    320a:	04 c0       	rjmp	.+8      	; 0x3214 <draw+0x172>
				else if (cell == 2) u8g_DrawStr(&u8g, 31 + 10 * (x+3), 11 + 8 * (y+3), "o");
    320c:	82 30       	cpi	r24, 0x02	; 2
    320e:	41 f4       	brne	.+16     	; 0x3220 <draw+0x17e>
    3210:	29 e1       	ldi	r18, 0x19	; 25
    3212:	32 e0       	ldi	r19, 0x02	; 2
    3214:	4e 2d       	mov	r20, r14
    3216:	60 2f       	mov	r22, r16
    3218:	8f ec       	ldi	r24, 0xCF	; 207
    321a:	94 e0       	ldi	r25, 0x04	; 4
    321c:	0e 94 c0 24 	call	0x4980	; 0x4980 <u8g_DrawStr>
    3220:	b3 94       	inc	r11
    3222:	06 5f       	subi	r16, 0xF6	; 246
		if (centerY < 3) centerY = 3;
		else if (centerY > 11) centerY = 11;
		
		// Print o and x (7*7 around last placed)
		for (int8_t y = -3; y < 4; y++) {
			for (int8_t x = -3; x < 4; x++) {
    3224:	05 36       	cpi	r16, 0x65	; 101
    3226:	89 f6       	brne	.-94     	; 0x31ca <draw+0x128>
    3228:	88 e0       	ldi	r24, 0x08	; 8
    322a:	e8 0e       	add	r14, r24
    322c:	9f e0       	ldi	r25, 0x0F	; 15
    322e:	a9 0e       	add	r10, r25
		uint8_t centerY = (lastPlaced / 15);
		if (centerY < 3) centerY = 3;
		else if (centerY > 11) centerY = 11;
		
		// Print o and x (7*7 around last placed)
		for (int8_t y = -3; y < 4; y++) {
    3230:	23 e4       	ldi	r18, 0x43	; 67
    3232:	e2 12       	cpse	r14, r18
    3234:	c7 cf       	rjmp	.-114    	; 0x31c4 <draw+0x122>
				else if (cell == 2) u8g_DrawStr(&u8g, 31 + 10 * (x+3), 11 + 8 * (y+3), "o");
			}
		}
		
		// Horizontal lines
		u8g_DrawLine(&u8g, 29, 12, 97, 12);
    3236:	0c e0       	ldi	r16, 0x0C	; 12
    3238:	21 e6       	ldi	r18, 0x61	; 97
    323a:	4c e0       	ldi	r20, 0x0C	; 12
    323c:	6d e1       	ldi	r22, 0x1D	; 29
    323e:	8f ec       	ldi	r24, 0xCF	; 207
    3240:	94 e0       	ldi	r25, 0x04	; 4
    3242:	0e 94 49 25 	call	0x4a92	; 0x4a92 <u8g_DrawLine>
		u8g_DrawLine(&u8g, 29, 20, 97, 20);
    3246:	04 e1       	ldi	r16, 0x14	; 20
    3248:	21 e6       	ldi	r18, 0x61	; 97
    324a:	44 e1       	ldi	r20, 0x14	; 20
    324c:	6d e1       	ldi	r22, 0x1D	; 29
    324e:	8f ec       	ldi	r24, 0xCF	; 207
    3250:	94 e0       	ldi	r25, 0x04	; 4
    3252:	0e 94 49 25 	call	0x4a92	; 0x4a92 <u8g_DrawLine>
		u8g_DrawLine(&u8g, 29, 28, 97, 28);
    3256:	0c e1       	ldi	r16, 0x1C	; 28
    3258:	21 e6       	ldi	r18, 0x61	; 97
    325a:	4c e1       	ldi	r20, 0x1C	; 28
    325c:	6d e1       	ldi	r22, 0x1D	; 29
    325e:	8f ec       	ldi	r24, 0xCF	; 207
    3260:	94 e0       	ldi	r25, 0x04	; 4
    3262:	0e 94 49 25 	call	0x4a92	; 0x4a92 <u8g_DrawLine>
		u8g_DrawLine(&u8g, 29, 36, 97, 36);
    3266:	04 e2       	ldi	r16, 0x24	; 36
    3268:	21 e6       	ldi	r18, 0x61	; 97
    326a:	44 e2       	ldi	r20, 0x24	; 36
    326c:	6d e1       	ldi	r22, 0x1D	; 29
    326e:	8f ec       	ldi	r24, 0xCF	; 207
    3270:	94 e0       	ldi	r25, 0x04	; 4
    3272:	0e 94 49 25 	call	0x4a92	; 0x4a92 <u8g_DrawLine>
		u8g_DrawLine(&u8g, 29, 44, 97, 44);
    3276:	0c e2       	ldi	r16, 0x2C	; 44
    3278:	21 e6       	ldi	r18, 0x61	; 97
    327a:	4c e2       	ldi	r20, 0x2C	; 44
    327c:	6d e1       	ldi	r22, 0x1D	; 29
    327e:	8f ec       	ldi	r24, 0xCF	; 207
    3280:	94 e0       	ldi	r25, 0x04	; 4
    3282:	0e 94 49 25 	call	0x4a92	; 0x4a92 <u8g_DrawLine>
		u8g_DrawLine(&u8g, 29, 52, 97, 52);
    3286:	04 e3       	ldi	r16, 0x34	; 52
    3288:	21 e6       	ldi	r18, 0x61	; 97
    328a:	44 e3       	ldi	r20, 0x34	; 52
    328c:	6d e1       	ldi	r22, 0x1D	; 29
    328e:	8f ec       	ldi	r24, 0xCF	; 207
    3290:	94 e0       	ldi	r25, 0x04	; 4
    3292:	0e 94 49 25 	call	0x4a92	; 0x4a92 <u8g_DrawLine>
		
		// Vertical lines
		u8g_DrawLine(&u8g, 38, 5, 38, 59);
    3296:	0b e3       	ldi	r16, 0x3B	; 59
    3298:	26 e2       	ldi	r18, 0x26	; 38
    329a:	45 e0       	ldi	r20, 0x05	; 5
    329c:	66 e2       	ldi	r22, 0x26	; 38
    329e:	8f ec       	ldi	r24, 0xCF	; 207
    32a0:	94 e0       	ldi	r25, 0x04	; 4
    32a2:	0e 94 49 25 	call	0x4a92	; 0x4a92 <u8g_DrawLine>
		u8g_DrawLine(&u8g, 48, 5, 48, 59);
    32a6:	20 e3       	ldi	r18, 0x30	; 48
    32a8:	45 e0       	ldi	r20, 0x05	; 5
    32aa:	60 e3       	ldi	r22, 0x30	; 48
    32ac:	8f ec       	ldi	r24, 0xCF	; 207
    32ae:	94 e0       	ldi	r25, 0x04	; 4
    32b0:	0e 94 49 25 	call	0x4a92	; 0x4a92 <u8g_DrawLine>
		u8g_DrawLine(&u8g, 58, 5, 58, 59);
    32b4:	2a e3       	ldi	r18, 0x3A	; 58
    32b6:	45 e0       	ldi	r20, 0x05	; 5
    32b8:	6a e3       	ldi	r22, 0x3A	; 58
    32ba:	8f ec       	ldi	r24, 0xCF	; 207
    32bc:	94 e0       	ldi	r25, 0x04	; 4
    32be:	0e 94 49 25 	call	0x4a92	; 0x4a92 <u8g_DrawLine>
		u8g_DrawLine(&u8g, 68, 5, 68, 59);
    32c2:	24 e4       	ldi	r18, 0x44	; 68
    32c4:	45 e0       	ldi	r20, 0x05	; 5
    32c6:	64 e4       	ldi	r22, 0x44	; 68
    32c8:	8f ec       	ldi	r24, 0xCF	; 207
    32ca:	94 e0       	ldi	r25, 0x04	; 4
    32cc:	0e 94 49 25 	call	0x4a92	; 0x4a92 <u8g_DrawLine>
		u8g_DrawLine(&u8g, 78, 5, 78, 59);
    32d0:	2e e4       	ldi	r18, 0x4E	; 78
    32d2:	45 e0       	ldi	r20, 0x05	; 5
    32d4:	6e e4       	ldi	r22, 0x4E	; 78
    32d6:	8f ec       	ldi	r24, 0xCF	; 207
    32d8:	94 e0       	ldi	r25, 0x04	; 4
    32da:	0e 94 49 25 	call	0x4a92	; 0x4a92 <u8g_DrawLine>
		u8g_DrawLine(&u8g, 88, 5, 88, 59);
    32de:	28 e5       	ldi	r18, 0x58	; 88
    32e0:	45 e0       	ldi	r20, 0x05	; 5
    32e2:	68 e5       	ldi	r22, 0x58	; 88
    32e4:	8f ec       	ldi	r24, 0xCF	; 207
    32e6:	94 e0       	ldi	r25, 0x04	; 4
    32e8:	0e 94 49 25 	call	0x4a92	; 0x4a92 <u8g_DrawLine>
		
		// Print players
		u8g_DrawStr(&u8g, 0, 10, "r1=x");
    32ec:	21 e1       	ldi	r18, 0x11	; 17
    32ee:	32 e0       	ldi	r19, 0x02	; 2
    32f0:	4a e0       	ldi	r20, 0x0A	; 10
    32f2:	60 e0       	ldi	r22, 0x00	; 0
    32f4:	8f ec       	ldi	r24, 0xCF	; 207
    32f6:	94 e0       	ldi	r25, 0x04	; 4
    32f8:	0e 94 c0 24 	call	0x4980	; 0x4980 <u8g_DrawStr>
		u8g_DrawStr(&u8g, 0, 20, "r2=o");
    32fc:	26 e1       	ldi	r18, 0x16	; 22
    32fe:	32 e0       	ldi	r19, 0x02	; 2
    3300:	44 e1       	ldi	r20, 0x14	; 20
    3302:	60 e0       	ldi	r22, 0x00	; 0
    3304:	8f ec       	ldi	r24, 0xCF	; 207
    3306:	94 e0       	ldi	r25, 0x04	; 4
    3308:	0e 94 c0 24 	call	0x4980	; 0x4980 <u8g_DrawStr>
		
		// Print coordinates for center in hex
		char str[5];
		str[0] = 'X';
    330c:	88 e5       	ldi	r24, 0x58	; 88
    330e:	89 83       	std	Y+1, r24	; 0x01
		str[1] = centerX + ASCII_CODE_0 + 7 * (centerX + ASCII_CODE_0 > '9');
    3310:	89 e0       	ldi	r24, 0x09	; 9
    3312:	8f 15       	cp	r24, r15
    3314:	10 f4       	brcc	.+4      	; 0x331a <draw+0x278>
    3316:	87 e0       	ldi	r24, 0x07	; 7
    3318:	01 c0       	rjmp	.+2      	; 0x331c <draw+0x27a>
    331a:	80 e0       	ldi	r24, 0x00	; 0
    331c:	90 e3       	ldi	r25, 0x30	; 48
    331e:	9f 0d       	add	r25, r15
    3320:	98 0f       	add	r25, r24
    3322:	9a 83       	std	Y+2, r25	; 0x02
		str[2] = 'Y';
    3324:	89 e5       	ldi	r24, 0x59	; 89
    3326:	8b 83       	std	Y+3, r24	; 0x03
		str[3] = centerY + ASCII_CODE_0 + 7 * (centerY + ASCII_CODE_0 > '9');
    3328:	1a 30       	cpi	r17, 0x0A	; 10
    332a:	10 f0       	brcs	.+4      	; 0x3330 <draw+0x28e>
    332c:	87 e0       	ldi	r24, 0x07	; 7
    332e:	01 c0       	rjmp	.+2      	; 0x3332 <draw+0x290>
    3330:	80 e0       	ldi	r24, 0x00	; 0
    3332:	10 5d       	subi	r17, 0xD0	; 208
    3334:	18 0f       	add	r17, r24
    3336:	1c 83       	std	Y+4, r17	; 0x04
		str[4] = '\0';
    3338:	1d 82       	std	Y+5, r1	; 0x05
		u8g_DrawStr(&u8g, 0, 50, "Mid:");
    333a:	2b e1       	ldi	r18, 0x1B	; 27
    333c:	32 e0       	ldi	r19, 0x02	; 2
    333e:	42 e3       	ldi	r20, 0x32	; 50
    3340:	60 e0       	ldi	r22, 0x00	; 0
    3342:	8f ec       	ldi	r24, 0xCF	; 207
    3344:	94 e0       	ldi	r25, 0x04	; 4
    3346:	0e 94 c0 24 	call	0x4980	; 0x4980 <u8g_DrawStr>
		u8g_DrawStr(&u8g, 0, 60, str);
    334a:	9e 01       	movw	r18, r28
    334c:	2f 5f       	subi	r18, 0xFF	; 255
    334e:	3f 4f       	sbci	r19, 0xFF	; 255
    3350:	4c e3       	ldi	r20, 0x3C	; 60
    3352:	60 e0       	ldi	r22, 0x00	; 0
    3354:	8f ec       	ldi	r24, 0xCF	; 207
    3356:	94 e0       	ldi	r25, 0x04	; 4
    3358:	0e 94 c0 24 	call	0x4980	; 0x4980 <u8g_DrawStr>
	}
}
    335c:	25 96       	adiw	r28, 0x05	; 5
    335e:	eb e0       	ldi	r30, 0x0B	; 11
    3360:	0c 94 03 29 	jmp	0x5206	; 0x5206 <__epilogue_restores__+0xe>

00003364 <main>:
/************************************************************************
Main function.

Return:	The return code of the program.
************************************************************************/
int main(void) {
    3364:	a0 e0       	ldi	r26, 0x00	; 0
    3366:	b0 e0       	ldi	r27, 0x00	; 0
    3368:	e8 eb       	ldi	r30, 0xB8	; 184
    336a:	f9 e1       	ldi	r31, 0x19	; 25
    336c:	0c 94 e2 28 	jmp	0x51c4	; 0x51c4 <__prologue_saves__+0x4>
/************************************************************************
Setup for program start. Initializes stuff and sets start values.
************************************************************************/
static void setup(void) {
	// Set start values
	ms = 0;
    3370:	10 92 3e 04 	sts	0x043E, r1	; 0x80043e <ms>
    3374:	10 92 3f 04 	sts	0x043F, r1	; 0x80043f <ms+0x1>
    3378:	10 92 40 04 	sts	0x0440, r1	; 0x800440 <ms+0x2>
    337c:	10 92 41 04 	sts	0x0441, r1	; 0x800441 <ms+0x3>
    3380:	10 92 42 04 	sts	0x0442, r1	; 0x800442 <ms+0x4>
    3384:	10 92 43 04 	sts	0x0443, r1	; 0x800443 <ms+0x5>
    3388:	10 92 44 04 	sts	0x0444, r1	; 0x800444 <ms+0x6>
    338c:	10 92 45 04 	sts	0x0445, r1	; 0x800445 <ms+0x7>
	offsetBase = 0;
    3390:	10 92 36 04 	sts	0x0436, r1	; 0x800436 <offsetBase>
    3394:	10 92 37 04 	sts	0x0437, r1	; 0x800437 <offsetBase+0x1>
    3398:	10 92 38 04 	sts	0x0438, r1	; 0x800438 <offsetBase+0x2>
    339c:	10 92 39 04 	sts	0x0439, r1	; 0x800439 <offsetBase+0x3>
    33a0:	10 92 3a 04 	sts	0x043A, r1	; 0x80043a <offsetBase+0x4>
    33a4:	10 92 3b 04 	sts	0x043B, r1	; 0x80043b <offsetBase+0x5>
    33a8:	10 92 3c 04 	sts	0x043C, r1	; 0x80043c <offsetBase+0x6>
    33ac:	10 92 3d 04 	sts	0x043D, r1	; 0x80043d <offsetBase+0x7>
	timePressed = 0;
    33b0:	10 92 cb 04 	sts	0x04CB, r1	; 0x8004cb <timePressed>
    33b4:	10 92 cc 04 	sts	0x04CC, r1	; 0x8004cc <timePressed+0x1>
    33b8:	10 92 cd 04 	sts	0x04CD, r1	; 0x8004cd <timePressed+0x2>
    33bc:	10 92 ce 04 	sts	0x04CE, r1	; 0x8004ce <timePressed+0x3>
	btnPressed = 0;
    33c0:	10 92 ca 04 	sts	0x04CA, r1	; 0x8004ca <btnPressed>
	sdMounted = false;
    33c4:	10 92 35 04 	sts	0x0435, r1	; 0x800435 <sdMounted>
	redHeartLed = false;
    33c8:	10 92 34 04 	sts	0x0434, r1	; 0x800434 <redHeartLed>
	greenHeartLed = false;
    33cc:	10 92 33 04 	sts	0x0433, r1	; 0x800433 <greenHeartLed>
	lastPlaced = 0;
    33d0:	10 92 83 02 	sts	0x0283, r1	; 0x800283 <lastPlaced>
	messageInd = 0;
    33d4:	10 92 1c 03 	sts	0x031C, r1	; 0x80031c <messageInd>
	
	// Reset buffer, message
	memset((char *) buffer, '\0', BUF_SIZE);
    33d8:	80 e0       	ldi	r24, 0x00	; 0
    33da:	91 e0       	ldi	r25, 0x01	; 1
    33dc:	e3 e3       	ldi	r30, 0x33	; 51
    33de:	f3 e0       	ldi	r31, 0x03	; 3
    33e0:	df 01       	movw	r26, r30
    33e2:	9c 01       	movw	r18, r24
    33e4:	1d 92       	st	X+, r1
    33e6:	21 50       	subi	r18, 0x01	; 1
    33e8:	30 40       	sbci	r19, 0x00	; 0
    33ea:	e1 f7       	brne	.-8      	; 0x33e4 <main+0x80>
	memset((char *) message, '\0', MSG_MAX_LEN);
    33ec:	83 e1       	ldi	r24, 0x13	; 19
    33ee:	ed e1       	ldi	r30, 0x1D	; 29
    33f0:	f3 e0       	ldi	r31, 0x03	; 3
    33f2:	df 01       	movw	r26, r30
    33f4:	1d 92       	st	X+, r1
    33f6:	8a 95       	dec	r24
    33f8:	e9 f7       	brne	.-6      	; 0x33f4 <main+0x90>
	
	// Initialize stuff
	spiInit();
    33fa:	0e 94 4a 21 	call	0x4294	; 0x4294 <spiInit>
	sdInit();
    33fe:	0e 94 ce 20 	call	0x419c	; 0x419c <sdInit>
	uartInit();
    3402:	0e 94 28 28 	call	0x5050	; 0x5050 <uartInit>
	ioInit();
    3406:	0e 94 22 16 	call	0x2c44	; 0x2c44 <ioInit>
	
	// Initialize 1000Hz system timer with TC1
	OCR1A = 1000;
    340a:	88 ee       	ldi	r24, 0xE8	; 232
    340c:	93 e0       	ldi	r25, 0x03	; 3
    340e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    3412:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	TCCR1B |= (1<<WGM12);
    3416:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    341a:	88 60       	ori	r24, 0x08	; 8
    341c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	TIMSK1 |= (1<<OCIE1A);
    3420:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
    3424:	82 60       	ori	r24, 0x02	; 2
    3426:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
	
	sei(); // Set interrupt flag
    342a:	78 94       	sei

Input:	Message to save.
************************************************************************/
static void saveLatestMsg(uint8_t topic, char *msg) {
	// Save latest message
	strcpy((char *) last_topic_msg[topic], msg);
    342c:	d3 e1       	ldi	r29, 0x13	; 19
		if ((topic == 2 || topic == 3) && msg[1] - ASCII_CODE_0 == 3) {
			if (msg[2] < ASCII_CODE_0) { // Start new game request
				// Reset playingField
				for (uint8_t i = 0; i < PLAYING_FIELD_SIZE; i++) playingField[i] = 0;
			} else if (msg[2] < 65) { // Move done (Ascii 'A')
				lastPlaced = (msg[2] - ASCII_CODE_0 + (msg[3] - ASCII_CODE_0) * BOARD_LEN);
    342e:	bf e0       	ldi	r27, 0x0F	; 15
    3430:	7b 2e       	mov	r7, r27
	uint8_t topic;
	if ((topic = correctTopic(msg[0])) != 10) { // Valid ID
		// Check if heartbeat
		if (topic == 0 && msg[1] - ASCII_CODE_0 == 0) {
			setLed(GREEN_HEART_LED, greenHeartLed);
			greenHeartLed = !greenHeartLed;
    3432:	66 24       	eor	r6, r6
    3434:	63 94       	inc	r6
    3436:	55 24       	eor	r5, r5
    3438:	53 94       	inc	r5
************************************************************************/
int main(void) {
	setup();
    while (1) { // Main-loop
		// Check if there is data in buffer
		if (bufTail != bufHead) {
    343a:	90 91 31 03 	lds	r25, 0x0331	; 0x800331 <bufTail>
    343e:	80 91 32 03 	lds	r24, 0x0332	; 0x800332 <bufHead>
    3442:	98 13       	cpse	r25, r24
    3444:	49 c0       	rjmp	.+146    	; 0x34d8 <main+0x174>
					message[messageInd++] = buffer[bufTail];
					buffer[bufTail] = '\0';
				}
			} while (bufTail != bufHead);
		}
		cli();
    3446:	f8 94       	cli
		offsetBase = ms; // Set new base for offset
    3448:	70 91 3e 04 	lds	r23, 0x043E	; 0x80043e <ms>
    344c:	60 91 3f 04 	lds	r22, 0x043F	; 0x80043f <ms+0x1>
    3450:	50 91 40 04 	lds	r21, 0x0440	; 0x800440 <ms+0x2>
    3454:	40 91 41 04 	lds	r20, 0x0441	; 0x800441 <ms+0x3>
    3458:	30 91 42 04 	lds	r19, 0x0442	; 0x800442 <ms+0x4>
    345c:	20 91 43 04 	lds	r18, 0x0443	; 0x800443 <ms+0x5>
    3460:	90 91 44 04 	lds	r25, 0x0444	; 0x800444 <ms+0x6>
    3464:	80 91 45 04 	lds	r24, 0x0445	; 0x800445 <ms+0x7>
    3468:	70 93 36 04 	sts	0x0436, r23	; 0x800436 <offsetBase>
    346c:	60 93 37 04 	sts	0x0437, r22	; 0x800437 <offsetBase+0x1>
    3470:	50 93 38 04 	sts	0x0438, r21	; 0x800438 <offsetBase+0x2>
    3474:	40 93 39 04 	sts	0x0439, r20	; 0x800439 <offsetBase+0x3>
    3478:	30 93 3a 04 	sts	0x043A, r19	; 0x80043a <offsetBase+0x4>
    347c:	20 93 3b 04 	sts	0x043B, r18	; 0x80043b <offsetBase+0x5>
    3480:	90 93 3c 04 	sts	0x043C, r25	; 0x80043c <offsetBase+0x6>
    3484:	80 93 3d 04 	sts	0x043D, r24	; 0x80043d <offsetBase+0x7>
		sei();
    3488:	78 94       	sei
		
		// Check button pressed, preform action
		switch (btnIsPressed(ms)) {
    348a:	50 91 3e 04 	lds	r21, 0x043E	; 0x80043e <ms>
    348e:	40 91 3f 04 	lds	r20, 0x043F	; 0x80043f <ms+0x1>
    3492:	30 91 40 04 	lds	r19, 0x0440	; 0x800440 <ms+0x2>
    3496:	20 91 41 04 	lds	r18, 0x0441	; 0x800441 <ms+0x3>
    349a:	80 91 42 04 	lds	r24, 0x0442	; 0x800442 <ms+0x4>
    349e:	80 91 43 04 	lds	r24, 0x0443	; 0x800443 <ms+0x5>
    34a2:	80 91 44 04 	lds	r24, 0x0444	; 0x800444 <ms+0x6>
    34a6:	80 91 45 04 	lds	r24, 0x0445	; 0x800445 <ms+0x7>
    34aa:	65 2f       	mov	r22, r21
    34ac:	74 2f       	mov	r23, r20
    34ae:	83 2f       	mov	r24, r19
    34b0:	92 2f       	mov	r25, r18
    34b2:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <btnIsPressed>
    34b6:	84 30       	cpi	r24, 0x04	; 4
    34b8:	09 f4       	brne	.+2      	; 0x34bc <main+0x158>
    34ba:	66 c0       	rjmp	.+204    	; 0x3588 <main+0x224>
    34bc:	85 30       	cpi	r24, 0x05	; 5
    34be:	09 f4       	brne	.+2      	; 0x34c2 <main+0x15e>
    34c0:	6e c0       	rjmp	.+220    	; 0x359e <main+0x23a>
    34c2:	82 30       	cpi	r24, 0x02	; 2
    34c4:	09 f0       	breq	.+2      	; 0x34c8 <main+0x164>
    34c6:	71 c0       	rjmp	.+226    	; 0x35aa <main+0x246>
			case STOP_BTN:
				cli();
    34c8:	f8 94       	cli
				printf("95\n"); // Stop message
    34ca:	8b e2       	ldi	r24, 0x2B	; 43
    34cc:	92 e0       	ldi	r25, 0x02	; 2
    34ce:	0e 94 91 29 	call	0x5322	; 0x5322 <puts>
				sei();
    34d2:	78 94       	sei
				setLed(STOP_LED, true);
    34d4:	61 e0       	ldi	r22, 0x01	; 1
    34d6:	5f c0       	rjmp	.+190    	; 0x3596 <main+0x232>
    while (1) { // Main-loop
		// Check if there is data in buffer
		if (bufTail != bufHead) {
			
			// If first message start TC1
			if (ms == 0) TCCR1B |= (1<<CS11);
    34d8:	20 91 3e 04 	lds	r18, 0x043E	; 0x80043e <ms>
    34dc:	30 91 3f 04 	lds	r19, 0x043F	; 0x80043f <ms+0x1>
    34e0:	40 91 40 04 	lds	r20, 0x0440	; 0x800440 <ms+0x2>
    34e4:	50 91 41 04 	lds	r21, 0x0441	; 0x800441 <ms+0x3>
    34e8:	60 91 42 04 	lds	r22, 0x0442	; 0x800442 <ms+0x4>
    34ec:	70 91 43 04 	lds	r23, 0x0443	; 0x800443 <ms+0x5>
    34f0:	80 91 44 04 	lds	r24, 0x0444	; 0x800444 <ms+0x6>
    34f4:	90 91 45 04 	lds	r25, 0x0445	; 0x800445 <ms+0x7>
    34f8:	a0 e0       	ldi	r26, 0x00	; 0
    34fa:	0e 94 3e 29 	call	0x527c	; 0x527c <__cmpdi2_s8>
    34fe:	29 f4       	brne	.+10     	; 0x350a <main+0x1a6>
    3500:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    3504:	82 60       	ori	r24, 0x02	; 2
    3506:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
			
			// Loop until buffer is empty
			do {
				// Get next index
				bufTail = (bufTail + 1) & BUF_MASK;
    350a:	80 91 31 03 	lds	r24, 0x0331	; 0x800331 <bufTail>
    350e:	8f 5f       	subi	r24, 0xFF	; 255
    3510:	80 93 31 03 	sts	0x0331, r24	; 0x800331 <bufTail>
				if (buffer[bufTail] == '\0') { // Reached end of message
    3514:	e0 91 31 03 	lds	r30, 0x0331	; 0x800331 <bufTail>
    3518:	f0 e0       	ldi	r31, 0x00	; 0
    351a:	ed 5c       	subi	r30, 0xCD	; 205
    351c:	fc 4f       	sbci	r31, 0xFC	; 252
    351e:	80 81       	ld	r24, Z
					uint8_t offset = message[--messageInd];
    3520:	e0 91 1c 03 	lds	r30, 0x031C	; 0x80031c <messageInd>
			
			// Loop until buffer is empty
			do {
				// Get next index
				bufTail = (bufTail + 1) & BUF_MASK;
				if (buffer[bufTail] == '\0') { // Reached end of message
    3524:	81 11       	cpse	r24, r1
    3526:	15 c0       	rjmp	.+42     	; 0x3552 <main+0x1ee>
					uint8_t offset = message[--messageInd];
    3528:	e1 50       	subi	r30, 0x01	; 1
    352a:	e0 93 1c 03 	sts	0x031C, r30	; 0x80031c <messageInd>
    352e:	f0 e0       	ldi	r31, 0x00	; 0
    3530:	e3 5e       	subi	r30, 0xE3	; 227
    3532:	fc 4f       	sbci	r31, 0xFC	; 252
    3534:	40 80       	ld	r4, Z
					message[messageInd] = '\0';
    3536:	e0 91 1c 03 	lds	r30, 0x031C	; 0x80031c <messageInd>
    353a:	f0 e0       	ldi	r31, 0x00	; 0
    353c:	e3 5e       	subi	r30, 0xE3	; 227
    353e:	fc 4f       	sbci	r31, 0xFC	; 252
    3540:	10 82       	st	Z, r1
Input:	The message, the offset time corresponding to it.
************************************************************************/
static void readMsg(char *msg, uint8_t offset) {
	// Get topic ID
	uint8_t topic;
	if ((topic = correctTopic(msg[0])) != 10) { // Valid ID
    3542:	10 91 1d 03 	lds	r17, 0x031D	; 0x80031d <message>
Input:	Topic to check in ascii form.

Return:	Topic in number form if correct otherwise 10.
************************************************************************/
static uint8_t correctTopic(char topic) {
	return (ASCII_CODE_0 <= topic && topic <= ASCII_CODE_0 + 3) ? (topic - ASCII_CODE_0) : 10;
    3546:	c0 ed       	ldi	r28, 0xD0	; 208
    3548:	c1 0f       	add	r28, r17
    354a:	c4 30       	cpi	r28, 0x04	; 4
    354c:	08 f4       	brcc	.+2      	; 0x3550 <main+0x1ec>
    354e:	a2 c0       	rjmp	.+324    	; 0x3694 <main+0x330>
    3550:	76 c0       	rjmp	.+236    	; 0x363e <main+0x2da>
					uint8_t offset = message[--messageInd];
					message[messageInd] = '\0';
					readMsg((char *) message, offset);
					messageInd = 0;
				} else { // Reading message
					message[messageInd++] = buffer[bufTail];
    3552:	81 e0       	ldi	r24, 0x01	; 1
    3554:	8e 0f       	add	r24, r30
    3556:	80 93 1c 03 	sts	0x031C, r24	; 0x80031c <messageInd>
    355a:	f0 e0       	ldi	r31, 0x00	; 0
    355c:	a0 91 31 03 	lds	r26, 0x0331	; 0x800331 <bufTail>
    3560:	b0 e0       	ldi	r27, 0x00	; 0
    3562:	ad 5c       	subi	r26, 0xCD	; 205
    3564:	bc 4f       	sbci	r27, 0xFC	; 252
    3566:	8c 91       	ld	r24, X
    3568:	e3 5e       	subi	r30, 0xE3	; 227
    356a:	fc 4f       	sbci	r31, 0xFC	; 252
    356c:	80 83       	st	Z, r24
					buffer[bufTail] = '\0';
    356e:	e0 91 31 03 	lds	r30, 0x0331	; 0x800331 <bufTail>
    3572:	f0 e0       	ldi	r31, 0x00	; 0
    3574:	ed 5c       	subi	r30, 0xCD	; 205
    3576:	fc 4f       	sbci	r31, 0xFC	; 252
    3578:	10 82       	st	Z, r1
				}
			} while (bufTail != bufHead);
    357a:	90 91 31 03 	lds	r25, 0x0331	; 0x800331 <bufTail>
    357e:	80 91 32 03 	lds	r24, 0x0332	; 0x800332 <bufHead>
    3582:	98 13       	cpse	r25, r24
    3584:	c2 cf       	rjmp	.-124    	; 0x350a <main+0x1a6>
    3586:	5f cf       	rjmp	.-322    	; 0x3446 <main+0xe2>
				printf("95\n"); // Stop message
				sei();
				setLed(STOP_LED, true);
				break;
			case UNSTOP_BTN:
				cli();
    3588:	f8 94       	cli
				printf("96\n"); // Unstop message
    358a:	8e e2       	ldi	r24, 0x2E	; 46
    358c:	92 e0       	ldi	r25, 0x02	; 2
    358e:	0e 94 91 29 	call	0x5322	; 0x5322 <puts>
				sei();
    3592:	78 94       	sei
				setLed(STOP_LED, false);
    3594:	60 e0       	ldi	r22, 0x00	; 0
    3596:	83 e0       	ldi	r24, 0x03	; 3
    3598:	0e 94 37 16 	call	0x2c6e	; 0x2c6e <setLed>
				break;
    359c:	06 c0       	rjmp	.+12     	; 0x35aa <main+0x246>
			case PING_BTN:
				cli();
    359e:	f8 94       	cli
				printf("07\n"); // Ping message
    35a0:	81 e3       	ldi	r24, 0x31	; 49
    35a2:	92 e0       	ldi	r25, 0x02	; 2
    35a4:	0e 94 91 29 	call	0x5322	; 0x5322 <puts>
				sei();
    35a8:	78 94       	sei
				break;			
		}
		// Wakes up by sending ping (to force start the logger)
		if (ms == 0 && !(IO_PIN & (1 << PING_BTN))) printf("07\n"); // Ping message
    35aa:	20 91 3e 04 	lds	r18, 0x043E	; 0x80043e <ms>
    35ae:	30 91 3f 04 	lds	r19, 0x043F	; 0x80043f <ms+0x1>
    35b2:	40 91 40 04 	lds	r20, 0x0440	; 0x800440 <ms+0x2>
    35b6:	50 91 41 04 	lds	r21, 0x0441	; 0x800441 <ms+0x3>
    35ba:	60 91 42 04 	lds	r22, 0x0442	; 0x800442 <ms+0x4>
    35be:	70 91 43 04 	lds	r23, 0x0443	; 0x800443 <ms+0x5>
    35c2:	80 91 44 04 	lds	r24, 0x0444	; 0x800444 <ms+0x6>
    35c6:	90 91 45 04 	lds	r25, 0x0445	; 0x800445 <ms+0x7>
    35ca:	a0 e0       	ldi	r26, 0x00	; 0
    35cc:	0e 94 3e 29 	call	0x527c	; 0x527c <__cmpdi2_s8>
    35d0:	31 f4       	brne	.+12     	; 0x35de <main+0x27a>
    35d2:	4d 99       	sbic	0x09, 5	; 9
    35d4:	04 c0       	rjmp	.+8      	; 0x35de <main+0x27a>
    35d6:	81 e3       	ldi	r24, 0x31	; 49
    35d8:	92 e0       	ldi	r25, 0x02	; 2
    35da:	0e 94 91 29 	call	0x5322	; 0x5322 <puts>

/************************************************************************
// Mounts SD-card if inserted, show SD_LED if mounted.
************************************************************************/
static void mountSdIfInserted() {
	if (!sdMounted && sdCardInserted()) {
    35de:	80 91 35 04 	lds	r24, 0x0435	; 0x800435 <sdMounted>
    35e2:	81 11       	cpse	r24, r1
    35e4:	0d c0       	rjmp	.+26     	; 0x3600 <main+0x29c>
    35e6:	0e 94 d9 20 	call	0x41b2	; 0x41b2 <sdCardInserted>
    35ea:	88 23       	and	r24, r24
    35ec:	49 f0       	breq	.+18     	; 0x3600 <main+0x29c>
		sdCardMount();
    35ee:	0e 94 de 20 	call	0x41bc	; 0x41bc <sdCardMount>
		setLed(SD_LED, true);
    35f2:	61 e0       	ldi	r22, 0x01	; 1
    35f4:	82 e0       	ldi	r24, 0x02	; 2
    35f6:	0e 94 37 16 	call	0x2c6e	; 0x2c6e <setLed>
		sdMounted = true;
    35fa:	50 92 35 04 	sts	0x0435, r5	; 0x800435 <sdMounted>
    35fe:	0e c0       	rjmp	.+28     	; 0x361c <main+0x2b8>
	} else if (sdMounted && !sdCardInserted()) {
    3600:	80 91 35 04 	lds	r24, 0x0435	; 0x800435 <sdMounted>
    3604:	88 23       	and	r24, r24
    3606:	51 f0       	breq	.+20     	; 0x361c <main+0x2b8>
    3608:	0e 94 d9 20 	call	0x41b2	; 0x41b2 <sdCardInserted>
    360c:	81 11       	cpse	r24, r1
    360e:	06 c0       	rjmp	.+12     	; 0x361c <main+0x2b8>
		setLed(SD_LED, false);
    3610:	60 e0       	ldi	r22, 0x00	; 0
    3612:	82 e0       	ldi	r24, 0x02	; 2
    3614:	0e 94 37 16 	call	0x2c6e	; 0x2c6e <setLed>
		sdMounted = false;
    3618:	10 92 35 04 	sts	0x0435, r1	; 0x800435 <sdMounted>
		if (ms == 0 && !(IO_PIN & (1 << PING_BTN))) printf("07\n"); // Ping message
		
		mountSdIfInserted();
		
		// Draw display
		u8g_FirstPage(&u8g);
    361c:	8f ec       	ldi	r24, 0xCF	; 207
    361e:	94 e0       	ldi	r25, 0x04	; 4
    3620:	0e 94 d2 26 	call	0x4da4	; 0x4da4 <u8g_FirstPage>
		do {
			draw();
    3624:	0e 94 51 18 	call	0x30a2	; 0x30a2 <draw>
		} while (u8g_NextPage(&u8g));
    3628:	8f ec       	ldi	r24, 0xCF	; 207
    362a:	94 e0       	ldi	r25, 0x04	; 4
    362c:	0e 94 d8 26 	call	0x4db0	; 0x4db0 <u8g_NextPage>
    3630:	81 11       	cpse	r24, r1
    3632:	f8 cf       	rjmp	.-16     	; 0x3624 <main+0x2c0>
		u8g_Delay(100);
    3634:	84 e6       	ldi	r24, 0x64	; 100
    3636:	90 e0       	ldi	r25, 0x00	; 0
    3638:	0e 94 0e 23 	call	0x461c	; 0x461c <u8g_Delay>
    }
    363c:	fe ce       	rjmp	.-516    	; 0x343a <main+0xd6>
		if (sdMounted)
			sdCardWrite(fileNames[topic], (char *) (msg + 1), offsetBase + offset);
		
		saveLatestMsg((uint8_t) topic, (char *) msg);
		
	} else if (sdMounted) { // Non valid ID (incorrect topic)
    363e:	80 91 35 04 	lds	r24, 0x0435	; 0x800435 <sdMounted>
    3642:	88 23       	and	r24, r24
    3644:	21 f1       	breq	.+72     	; 0x368e <main+0x32a>
		// Log data to SD-card
		sdCardWrite(NO_TOPIC_LOG, (char *) msg, offsetBase + offset);
    3646:	a0 90 36 04 	lds	r10, 0x0436	; 0x800436 <offsetBase>
    364a:	b0 90 37 04 	lds	r11, 0x0437	; 0x800437 <offsetBase+0x1>
    364e:	c0 90 38 04 	lds	r12, 0x0438	; 0x800438 <offsetBase+0x2>
    3652:	d0 90 39 04 	lds	r13, 0x0439	; 0x800439 <offsetBase+0x3>
    3656:	e0 90 3a 04 	lds	r14, 0x043A	; 0x80043a <offsetBase+0x4>
    365a:	f0 90 3b 04 	lds	r15, 0x043B	; 0x80043b <offsetBase+0x5>
    365e:	00 91 3c 04 	lds	r16, 0x043C	; 0x80043c <offsetBase+0x6>
    3662:	10 91 3d 04 	lds	r17, 0x043D	; 0x80043d <offsetBase+0x7>
    3666:	24 2d       	mov	r18, r4
    3668:	30 e0       	ldi	r19, 0x00	; 0
    366a:	40 e0       	ldi	r20, 0x00	; 0
    366c:	50 e0       	ldi	r21, 0x00	; 0
    366e:	60 e0       	ldi	r22, 0x00	; 0
    3670:	70 e0       	ldi	r23, 0x00	; 0
    3672:	80 e0       	ldi	r24, 0x00	; 0
    3674:	90 e0       	ldi	r25, 0x00	; 0
    3676:	0e 94 17 29 	call	0x522e	; 0x522e <__adddi3>
    367a:	79 01       	movw	r14, r18
    367c:	8a 01       	movw	r16, r20
    367e:	9b 01       	movw	r18, r22
    3680:	ac 01       	movw	r20, r24
    3682:	6d e1       	ldi	r22, 0x1D	; 29
    3684:	73 e0       	ldi	r23, 0x03	; 3
    3686:	80 e2       	ldi	r24, 0x20	; 32
    3688:	92 e0       	ldi	r25, 0x02	; 2
    368a:	0e 94 e6 20 	call	0x41cc	; 0x41cc <sdCardWrite>
				bufTail = (bufTail + 1) & BUF_MASK;
				if (buffer[bufTail] == '\0') { // Reached end of message
					uint8_t offset = message[--messageInd];
					message[messageInd] = '\0';
					readMsg((char *) message, offset);
					messageInd = 0;
    368e:	10 92 1c 03 	sts	0x031C, r1	; 0x80031c <messageInd>
    3692:	73 cf       	rjmp	.-282    	; 0x357a <main+0x216>
static void readMsg(char *msg, uint8_t offset) {
	// Get topic ID
	uint8_t topic;
	if ((topic = correctTopic(msg[0])) != 10) { // Valid ID
		// Check if heartbeat
		if (topic == 0 && msg[1] - ASCII_CODE_0 == 0) {
    3694:	c1 11       	cpse	r28, r1
    3696:	0e c0       	rjmp	.+28     	; 0x36b4 <main+0x350>
    3698:	80 91 1e 03 	lds	r24, 0x031E	; 0x80031e <message+0x1>
    369c:	80 33       	cpi	r24, 0x30	; 48
    369e:	51 f4       	brne	.+20     	; 0x36b4 <main+0x350>
			setLed(GREEN_HEART_LED, greenHeartLed);
    36a0:	60 91 33 04 	lds	r22, 0x0433	; 0x800433 <greenHeartLed>
    36a4:	84 e0       	ldi	r24, 0x04	; 4
    36a6:	0e 94 37 16 	call	0x2c6e	; 0x2c6e <setLed>
			greenHeartLed = !greenHeartLed;
    36aa:	80 91 33 04 	lds	r24, 0x0433	; 0x800433 <greenHeartLed>
    36ae:	86 25       	eor	r24, r6
    36b0:	80 93 33 04 	sts	0x0433, r24	; 0x800433 <greenHeartLed>
		}
		
		// Check if game message
		if ((topic == 2 || topic == 3) && msg[1] - ASCII_CODE_0 == 3) {
    36b4:	12 53       	subi	r17, 0x32	; 50
    36b6:	12 30       	cpi	r17, 0x02	; 2
    36b8:	b8 f5       	brcc	.+110    	; 0x3728 <main+0x3c4>
    36ba:	80 91 1e 03 	lds	r24, 0x031E	; 0x80031e <message+0x1>
    36be:	83 33       	cpi	r24, 0x33	; 51
    36c0:	99 f5       	brne	.+102    	; 0x3728 <main+0x3c4>
			if (msg[2] < ASCII_CODE_0) { // Start new game request
    36c2:	80 91 1f 03 	lds	r24, 0x031F	; 0x80031f <message+0x2>
    36c6:	80 33       	cpi	r24, 0x30	; 48
    36c8:	58 f4       	brcc	.+22     	; 0x36e0 <main+0x37c>
    36ca:	80 e0       	ldi	r24, 0x00	; 0
    36cc:	90 e0       	ldi	r25, 0x00	; 0
				// Reset playingField
				for (uint8_t i = 0; i < PLAYING_FIELD_SIZE; i++) playingField[i] = 0;
    36ce:	fc 01       	movw	r30, r24
    36d0:	ec 57       	subi	r30, 0x7C	; 124
    36d2:	fd 4f       	sbci	r31, 0xFD	; 253
    36d4:	10 82       	st	Z, r1
    36d6:	01 96       	adiw	r24, 0x01	; 1
    36d8:	89 33       	cpi	r24, 0x39	; 57
    36da:	91 05       	cpc	r25, r1
    36dc:	c1 f7       	brne	.-16     	; 0x36ce <main+0x36a>
    36de:	24 c0       	rjmp	.+72     	; 0x3728 <main+0x3c4>
			} else if (msg[2] < 65) { // Move done (Ascii 'A')
    36e0:	81 34       	cpi	r24, 0x41	; 65
    36e2:	10 f5       	brcc	.+68     	; 0x3728 <main+0x3c4>
				lastPlaced = (msg[2] - ASCII_CODE_0 + (msg[3] - ASCII_CODE_0) * BOARD_LEN);
    36e4:	90 91 20 03 	lds	r25, 0x0320	; 0x800320 <message+0x3>
    36e8:	90 53       	subi	r25, 0x30	; 48
    36ea:	80 53       	subi	r24, 0x30	; 48
    36ec:	97 9d       	mul	r25, r7
    36ee:	80 0d       	add	r24, r0
    36f0:	11 24       	eor	r1, r1
    36f2:	80 93 83 02 	sts	0x0283, r24	; 0x800283 <lastPlaced>
				// Save val in correct place in playingField
				playingField[lastPlaced/4] |= ((1 + (topic==2)) << ((lastPlaced % 4) * 2));
    36f6:	c2 30       	cpi	r28, 0x02	; 2
    36f8:	19 f0       	breq	.+6      	; 0x3700 <main+0x39c>
    36fa:	81 e0       	ldi	r24, 0x01	; 1
    36fc:	90 e0       	ldi	r25, 0x00	; 0
    36fe:	02 c0       	rjmp	.+4      	; 0x3704 <main+0x3a0>
    3700:	82 e0       	ldi	r24, 0x02	; 2
    3702:	90 e0       	ldi	r25, 0x00	; 0
    3704:	20 91 83 02 	lds	r18, 0x0283	; 0x800283 <lastPlaced>
    3708:	23 70       	andi	r18, 0x03	; 3
    370a:	e0 91 83 02 	lds	r30, 0x0283	; 0x800283 <lastPlaced>
    370e:	e6 95       	lsr	r30
    3710:	e6 95       	lsr	r30
    3712:	f0 e0       	ldi	r31, 0x00	; 0
    3714:	ec 57       	subi	r30, 0x7C	; 124
    3716:	fd 4f       	sbci	r31, 0xFD	; 253
    3718:	30 81       	ld	r19, Z
    371a:	22 0f       	add	r18, r18
    371c:	01 c0       	rjmp	.+2      	; 0x3720 <main+0x3bc>
    371e:	88 0f       	add	r24, r24
    3720:	2a 95       	dec	r18
    3722:	ea f7       	brpl	.-6      	; 0x371e <main+0x3ba>
    3724:	83 2b       	or	r24, r19
    3726:	80 83       	st	Z, r24
			}
		}
		
		// Log data to SD-card
		if (sdMounted)
    3728:	80 91 35 04 	lds	r24, 0x0435	; 0x800435 <sdMounted>
    372c:	8c 2e       	mov	r8, r28
    372e:	91 2c       	mov	r9, r1
    3730:	88 23       	and	r24, r24
    3732:	49 f1       	breq	.+82     	; 0x3786 <main+0x422>
			sdCardWrite(fileNames[topic], (char *) (msg + 1), offsetBase + offset);
    3734:	a0 90 36 04 	lds	r10, 0x0436	; 0x800436 <offsetBase>
    3738:	b0 90 37 04 	lds	r11, 0x0437	; 0x800437 <offsetBase+0x1>
    373c:	c0 90 38 04 	lds	r12, 0x0438	; 0x800438 <offsetBase+0x2>
    3740:	d0 90 39 04 	lds	r13, 0x0439	; 0x800439 <offsetBase+0x3>
    3744:	e0 90 3a 04 	lds	r14, 0x043A	; 0x80043a <offsetBase+0x4>
    3748:	f0 90 3b 04 	lds	r15, 0x043B	; 0x80043b <offsetBase+0x5>
    374c:	00 91 3c 04 	lds	r16, 0x043C	; 0x80043c <offsetBase+0x6>
    3750:	10 91 3d 04 	lds	r17, 0x043D	; 0x80043d <offsetBase+0x7>
    3754:	24 2d       	mov	r18, r4
    3756:	30 e0       	ldi	r19, 0x00	; 0
    3758:	40 e0       	ldi	r20, 0x00	; 0
    375a:	50 e0       	ldi	r21, 0x00	; 0
    375c:	60 e0       	ldi	r22, 0x00	; 0
    375e:	70 e0       	ldi	r23, 0x00	; 0
    3760:	80 e0       	ldi	r24, 0x00	; 0
    3762:	90 e0       	ldi	r25, 0x00	; 0
    3764:	0e 94 17 29 	call	0x522e	; 0x522e <__adddi3>
    3768:	f4 01       	movw	r30, r8
    376a:	ee 0f       	add	r30, r30
    376c:	ff 1f       	adc	r31, r31
    376e:	ec 59       	subi	r30, 0x9C	; 156
    3770:	fd 4f       	sbci	r31, 0xFD	; 253
    3772:	79 01       	movw	r14, r18
    3774:	8a 01       	movw	r16, r20
    3776:	9b 01       	movw	r18, r22
    3778:	ac 01       	movw	r20, r24
    377a:	6e e1       	ldi	r22, 0x1E	; 30
    377c:	73 e0       	ldi	r23, 0x03	; 3
    377e:	80 81       	ld	r24, Z
    3780:	91 81       	ldd	r25, Z+1	; 0x01
    3782:	0e 94 e6 20 	call	0x41cc	; 0x41cc <sdCardWrite>

Input:	Message to save.
************************************************************************/
static void saveLatestMsg(uint8_t topic, char *msg) {
	// Save latest message
	strcpy((char *) last_topic_msg[topic], msg);
    3786:	d8 9d       	mul	r29, r8
    3788:	c0 01       	movw	r24, r0
    378a:	d9 9d       	mul	r29, r9
    378c:	90 0d       	add	r25, r0
    378e:	11 24       	eor	r1, r1
    3790:	6d e1       	ldi	r22, 0x1D	; 29
    3792:	73 e0       	ldi	r23, 0x03	; 3
    3794:	80 53       	subi	r24, 0x30	; 48
    3796:	9d 4f       	sbci	r25, 0xFD	; 253
    3798:	0e 94 8a 29 	call	0x5314	; 0x5314 <strcpy>
	
	// If text message save it to latest
	if (topic == 0 && msg[1] == '1') strcpy((char *) last_text_msg, msg + 2);
    379c:	c1 11       	cpse	r28, r1
    379e:	77 cf       	rjmp	.-274    	; 0x368e <main+0x32a>
    37a0:	80 91 1e 03 	lds	r24, 0x031E	; 0x80031e <message+0x1>
    37a4:	81 33       	cpi	r24, 0x31	; 49
    37a6:	09 f0       	breq	.+2      	; 0x37aa <main+0x446>
    37a8:	72 cf       	rjmp	.-284    	; 0x368e <main+0x32a>
    37aa:	6f e1       	ldi	r22, 0x1F	; 31
    37ac:	73 e0       	ldi	r23, 0x03	; 3
    37ae:	8d eb       	ldi	r24, 0xBD	; 189
    37b0:	92 e0       	ldi	r25, 0x02	; 2
    37b2:	0e 94 8a 29 	call	0x5314	; 0x5314 <strcpy>
    37b6:	6b cf       	rjmp	.-298    	; 0x368e <main+0x32a>

000037b8 <xchg_spi>:
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
    37b8:	8e bd       	out	0x2e, r24	; 46
	loop_until_bit_is_set(SPSR, SPIF);
    37ba:	0d b4       	in	r0, 0x2d	; 45
    37bc:	07 fe       	sbrs	r0, 7
    37be:	fd cf       	rjmp	.-6      	; 0x37ba <xchg_spi+0x2>
	return SPDR;
    37c0:	8e b5       	in	r24, 0x2e	; 46
}
    37c2:	08 95       	ret

000037c4 <deselect>:
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();		/* Set CS# high */
    37c4:	28 9a       	sbi	0x05, 0	; 5
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
    37c6:	8f ef       	ldi	r24, 0xFF	; 255
    37c8:	0e 94 dc 1b 	call	0x37b8	; 0x37b8 <xchg_spi>
    37cc:	08 95       	ret

000037ce <rcvr_datablock>:
static
int rcvr_datablock (
	BYTE *buff,			/* Data buffer to store received data */
	UINT btr			/* Byte count (must be multiple of 4) */
)
{
    37ce:	0f 93       	push	r16
    37d0:	1f 93       	push	r17
    37d2:	cf 93       	push	r28
    37d4:	df 93       	push	r29
    37d6:	8c 01       	movw	r16, r24
    37d8:	eb 01       	movw	r28, r22
	BYTE token;


	Timer1 = 20;
    37da:	84 e1       	ldi	r24, 0x14	; 20
    37dc:	80 93 49 04 	sts	0x0449, r24	; 0x800449 <Timer1>
	do {							/* Wait for data packet in timeout of 200ms */
		token = xchg_spi(0xFF);
    37e0:	8f ef       	ldi	r24, 0xFF	; 255
    37e2:	0e 94 dc 1b 	call	0x37b8	; 0x37b8 <xchg_spi>
	} while ((token == 0xFF) && Timer1);
    37e6:	8f 3f       	cpi	r24, 0xFF	; 255
    37e8:	29 f4       	brne	.+10     	; 0x37f4 <rcvr_datablock+0x26>
    37ea:	80 91 49 04 	lds	r24, 0x0449	; 0x800449 <Timer1>
    37ee:	81 11       	cpse	r24, r1
    37f0:	f7 cf       	rjmp	.-18     	; 0x37e0 <rcvr_datablock+0x12>
    37f2:	1d c0       	rjmp	.+58     	; 0x382e <rcvr_datablock+0x60>
	if (token != 0xFE) return 0;	/* If not valid data token, retutn with error */
    37f4:	8e 3f       	cpi	r24, 0xFE	; 254
    37f6:	d9 f4       	brne	.+54     	; 0x382e <rcvr_datablock+0x60>
    37f8:	f8 01       	movw	r30, r16
	BYTE *p,	/* Data read buffer */
	UINT cnt	/* Size of data block */
)
{
	do {
		SPDR = 0xFF;
    37fa:	8f ef       	ldi	r24, 0xFF	; 255
    37fc:	8e bd       	out	0x2e, r24	; 46
		loop_until_bit_is_set(SPSR, SPIF);
    37fe:	0d b4       	in	r0, 0x2d	; 45
    3800:	07 fe       	sbrs	r0, 7
    3802:	fd cf       	rjmp	.-6      	; 0x37fe <rcvr_datablock+0x30>
		*p++ = SPDR;
    3804:	9e b5       	in	r25, 0x2e	; 46
    3806:	90 83       	st	Z, r25
		SPDR = 0xFF;
    3808:	8e bd       	out	0x2e, r24	; 46
		loop_until_bit_is_set(SPSR, SPIF);
    380a:	0d b4       	in	r0, 0x2d	; 45
    380c:	07 fe       	sbrs	r0, 7
    380e:	fd cf       	rjmp	.-6      	; 0x380a <rcvr_datablock+0x3c>
		*p++ = SPDR;
    3810:	9e b5       	in	r25, 0x2e	; 46
    3812:	91 83       	std	Z+1, r25	; 0x01
	} while (cnt -= 2);
    3814:	22 97       	sbiw	r28, 0x02	; 2
    3816:	32 96       	adiw	r30, 0x02	; 2
    3818:	20 97       	sbiw	r28, 0x00	; 0
    381a:	81 f7       	brne	.-32     	; 0x37fc <rcvr_datablock+0x2e>
		token = xchg_spi(0xFF);
	} while ((token == 0xFF) && Timer1);
	if (token != 0xFE) return 0;	/* If not valid data token, retutn with error */

	rcvr_spi_multi(buff, btr);		/* Receive the data block into buffer */
	xchg_spi(0xFF);					/* Discard CRC */
    381c:	8f ef       	ldi	r24, 0xFF	; 255
    381e:	0e 94 dc 1b 	call	0x37b8	; 0x37b8 <xchg_spi>
	xchg_spi(0xFF);
    3822:	8f ef       	ldi	r24, 0xFF	; 255
    3824:	0e 94 dc 1b 	call	0x37b8	; 0x37b8 <xchg_spi>
    3828:	81 e0       	ldi	r24, 0x01	; 1
    382a:	90 e0       	ldi	r25, 0x00	; 0
    382c:	02 c0       	rjmp	.+4      	; 0x3832 <rcvr_datablock+0x64>

	Timer1 = 20;
	do {							/* Wait for data packet in timeout of 200ms */
		token = xchg_spi(0xFF);
	} while ((token == 0xFF) && Timer1);
	if (token != 0xFE) return 0;	/* If not valid data token, retutn with error */
    382e:	80 e0       	ldi	r24, 0x00	; 0
    3830:	90 e0       	ldi	r25, 0x00	; 0
	rcvr_spi_multi(buff, btr);		/* Receive the data block into buffer */
	xchg_spi(0xFF);					/* Discard CRC */
	xchg_spi(0xFF);

	return 1;						/* Return with success */
}
    3832:	df 91       	pop	r29
    3834:	cf 91       	pop	r28
    3836:	1f 91       	pop	r17
    3838:	0f 91       	pop	r16
    383a:	08 95       	ret

0000383c <wait_ready.constprop.2>:
{
	BYTE d;


	wt /= 10;
	cli(); Timer2 = wt; sei();
    383c:	f8 94       	cli
    383e:	82 e3       	ldi	r24, 0x32	; 50
    3840:	90 e0       	ldi	r25, 0x00	; 0
    3842:	90 93 48 04 	sts	0x0448, r25	; 0x800448 <Timer2+0x1>
    3846:	80 93 47 04 	sts	0x0447, r24	; 0x800447 <Timer2>
    384a:	78 94       	sei
	do {
		d = xchg_spi(0xFF);
    384c:	8f ef       	ldi	r24, 0xFF	; 255
    384e:	0e 94 dc 1b 	call	0x37b8	; 0x37b8 <xchg_spi>
    3852:	28 2f       	mov	r18, r24
		cli(); wt = Timer2; sei();
    3854:	f8 94       	cli
    3856:	80 91 47 04 	lds	r24, 0x0447	; 0x800447 <Timer2>
    385a:	90 91 48 04 	lds	r25, 0x0448	; 0x800448 <Timer2+0x1>
    385e:	78 94       	sei
	} while (d != 0xFF && wt);
    3860:	2f 3f       	cpi	r18, 0xFF	; 255
    3862:	11 f0       	breq	.+4      	; 0x3868 <wait_ready.constprop.2+0x2c>
    3864:	89 2b       	or	r24, r25
    3866:	91 f7       	brne	.-28     	; 0x384c <wait_ready.constprop.2+0x10>

	return (d == 0xFF) ? 1 : 0;
    3868:	81 e0       	ldi	r24, 0x01	; 1
    386a:	90 e0       	ldi	r25, 0x00	; 0
    386c:	2f 3f       	cpi	r18, 0xFF	; 255
    386e:	11 f0       	breq	.+4      	; 0x3874 <wait_ready.constprop.2+0x38>
    3870:	80 e0       	ldi	r24, 0x00	; 0
    3872:	90 e0       	ldi	r25, 0x00	; 0
}
    3874:	08 95       	ret

00003876 <select>:
/* Select the card and wait for ready                                    */
/*-----------------------------------------------------------------------*/

static
int select (void)	/* 1:Successful, 0:Timeout */
{
    3876:	cf 93       	push	r28
    3878:	df 93       	push	r29
	CS_LOW();		/* Set CS# low */
    387a:	28 98       	cbi	0x05, 0	; 5
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
    387c:	8f ef       	ldi	r24, 0xFF	; 255
    387e:	0e 94 dc 1b 	call	0x37b8	; 0x37b8 <xchg_spi>

	if (wait_ready(500)) return 1;	/* Leading busy check: Wait for card ready */
    3882:	0e 94 1e 1c 	call	0x383c	; 0x383c <wait_ready.constprop.2>
    3886:	ec 01       	movw	r28, r24
    3888:	89 2b       	or	r24, r25
    388a:	19 f4       	brne	.+6      	; 0x3892 <select+0x1c>

	deselect();		/* Timeout */
    388c:	0e 94 e2 1b 	call	0x37c4	; 0x37c4 <deselect>
	return 0;
    3890:	02 c0       	rjmp	.+4      	; 0x3896 <select+0x20>
int select (void)	/* 1:Successful, 0:Timeout */
{
	CS_LOW();		/* Set CS# low */
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */

	if (wait_ready(500)) return 1;	/* Leading busy check: Wait for card ready */
    3892:	c1 e0       	ldi	r28, 0x01	; 1
    3894:	d0 e0       	ldi	r29, 0x00	; 0

	deselect();		/* Timeout */
	return 0;
}
    3896:	ce 01       	movw	r24, r28
    3898:	df 91       	pop	r29
    389a:	cf 91       	pop	r28
    389c:	08 95       	ret

0000389e <send_cmd>:
static
BYTE send_cmd (		/* Returns R1 resp (bit7==1:Send failed) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
    389e:	ff 92       	push	r15
    38a0:	0f 93       	push	r16
    38a2:	1f 93       	push	r17
    38a4:	cf 93       	push	r28
    38a6:	df 93       	push	r29
    38a8:	c8 2f       	mov	r28, r24
    38aa:	d4 2f       	mov	r29, r20
    38ac:	15 2f       	mov	r17, r21
    38ae:	06 2f       	mov	r16, r22
    38b0:	f7 2e       	mov	r15, r23
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
    38b2:	87 ff       	sbrs	r24, 7
    38b4:	09 c0       	rjmp	.+18     	; 0x38c8 <send_cmd+0x2a>
		cmd &= 0x7F;
		res = send_cmd(CMD55, 0);
    38b6:	40 e0       	ldi	r20, 0x00	; 0
    38b8:	50 e0       	ldi	r21, 0x00	; 0
    38ba:	ba 01       	movw	r22, r20
    38bc:	87 e3       	ldi	r24, 0x37	; 55
    38be:	0e 94 4f 1c 	call	0x389e	; 0x389e <send_cmd>
		if (res > 1) return res;
    38c2:	82 30       	cpi	r24, 0x02	; 2
    38c4:	a8 f5       	brcc	.+106    	; 0x3930 <send_cmd+0x92>
{
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
		cmd &= 0x7F;
    38c6:	cf 77       	andi	r28, 0x7F	; 127
		res = send_cmd(CMD55, 0);
		if (res > 1) return res;
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
    38c8:	cc 30       	cpi	r28, 0x0C	; 12
    38ca:	99 f4       	brne	.+38     	; 0x38f2 <send_cmd+0x54>
		deselect();
		if (!select()) return 0xFF;
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + Command index */
    38cc:	8c 2f       	mov	r24, r28
    38ce:	80 64       	ori	r24, 0x40	; 64
    38d0:	0e 94 dc 1b 	call	0x37b8	; 0x37b8 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
    38d4:	8f 2d       	mov	r24, r15
    38d6:	0e 94 dc 1b 	call	0x37b8	; 0x37b8 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
    38da:	80 2f       	mov	r24, r16
    38dc:	0e 94 dc 1b 	call	0x37b8	; 0x37b8 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
    38e0:	81 2f       	mov	r24, r17
    38e2:	0e 94 dc 1b 	call	0x37b8	; 0x37b8 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
    38e6:	8d 2f       	mov	r24, r29
    38e8:	0e 94 dc 1b 	call	0x37b8	; 0x37b8 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) + Stop */
    38ec:	cc 23       	and	r28, r28
    38ee:	f1 f0       	breq	.+60     	; 0x392c <send_cmd+0x8e>
    38f0:	08 c0       	rjmp	.+16     	; 0x3902 <send_cmd+0x64>
		if (res > 1) return res;
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
		deselect();
    38f2:	0e 94 e2 1b 	call	0x37c4	; 0x37c4 <deselect>
		if (!select()) return 0xFF;
    38f6:	0e 94 3b 1c 	call	0x3876	; 0x3876 <select>
    38fa:	89 2b       	or	r24, r25
    38fc:	39 f7       	brne	.-50     	; 0x38cc <send_cmd+0x2e>
    38fe:	8f ef       	ldi	r24, 0xFF	; 255
    3900:	17 c0       	rjmp	.+46     	; 0x3930 <send_cmd+0x92>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) + Stop */
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) Stop */
    3902:	c8 30       	cpi	r28, 0x08	; 8
    3904:	11 f4       	brne	.+4      	; 0x390a <send_cmd+0x6c>
    3906:	87 e8       	ldi	r24, 0x87	; 135
    3908:	01 c0       	rjmp	.+2      	; 0x390c <send_cmd+0x6e>
	xchg_spi(0x40 | cmd);				/* Start + Command index */
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
	n = 0x01;							/* Dummy CRC + Stop */
    390a:	81 e0       	ldi	r24, 0x01	; 1
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) + Stop */
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) Stop */
	xchg_spi(n);
    390c:	0e 94 dc 1b 	call	0x37b8	; 0x37b8 <xchg_spi>

	/* Receive command response */
	if (cmd == CMD12) xchg_spi(0xFF);		/* Skip a stuff byte when stop reading */
    3910:	cc 30       	cpi	r28, 0x0C	; 12
    3912:	19 f4       	brne	.+6      	; 0x391a <send_cmd+0x7c>
    3914:	8f ef       	ldi	r24, 0xFF	; 255
    3916:	0e 94 dc 1b 	call	0x37b8	; 0x37b8 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) + Stop */
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) Stop */
    391a:	ca e0       	ldi	r28, 0x0A	; 10

	/* Receive command response */
	if (cmd == CMD12) xchg_spi(0xFF);		/* Skip a stuff byte when stop reading */
	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
	do
		res = xchg_spi(0xFF);
    391c:	8f ef       	ldi	r24, 0xFF	; 255
    391e:	0e 94 dc 1b 	call	0x37b8	; 0x37b8 <xchg_spi>
	while ((res & 0x80) && --n);
    3922:	87 ff       	sbrs	r24, 7
    3924:	05 c0       	rjmp	.+10     	; 0x3930 <send_cmd+0x92>
    3926:	c1 50       	subi	r28, 0x01	; 1
    3928:	c9 f7       	brne	.-14     	; 0x391c <send_cmd+0x7e>
    392a:	02 c0       	rjmp	.+4      	; 0x3930 <send_cmd+0x92>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) + Stop */
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) Stop */
	xchg_spi(n);
    392c:	85 e9       	ldi	r24, 0x95	; 149
    392e:	f3 cf       	rjmp	.-26     	; 0x3916 <send_cmd+0x78>
	do
		res = xchg_spi(0xFF);
	while ((res & 0x80) && --n);

	return res;			/* Return with the response value */
}
    3930:	cd b7       	in	r28, 0x3d	; 61
    3932:	de b7       	in	r29, 0x3e	; 62
    3934:	e5 e0       	ldi	r30, 0x05	; 5
    3936:	0c 94 09 29 	jmp	0x5212	; 0x5212 <__epilogue_restores__+0x1a>

0000393a <xmit_datablock>:
static
int xmit_datablock (
	const BYTE *buff,	/* 512 byte data block to be transmitted */
	BYTE token			/* Data/Stop token */
)
{
    393a:	1f 93       	push	r17
    393c:	cf 93       	push	r28
    393e:	df 93       	push	r29
    3940:	18 2f       	mov	r17, r24
    3942:	d9 2f       	mov	r29, r25
    3944:	c6 2f       	mov	r28, r22
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Leading busy check: Wait for card ready to accept data block */
    3946:	0e 94 1e 1c 	call	0x383c	; 0x383c <wait_ready.constprop.2>
    394a:	00 97       	sbiw	r24, 0x00	; 0
    394c:	59 f1       	breq	.+86     	; 0x39a4 <xmit_datablock+0x6a>

	xchg_spi(token);					/* Xmit data token */
    394e:	8c 2f       	mov	r24, r28
    3950:	0e 94 dc 1b 	call	0x37b8	; 0x37b8 <xchg_spi>
	if (token == 0xFD) return 1;		/* Do not send data if token is StopTran */
    3954:	cd 3f       	cpi	r28, 0xFD	; 253
    3956:	21 f1       	breq	.+72     	; 0x39a0 <xmit_datablock+0x66>
    3958:	e1 2f       	mov	r30, r17
    395a:	fd 2f       	mov	r31, r29
    395c:	cf 01       	movw	r24, r30
    395e:	9e 5f       	subi	r25, 0xFE	; 254
	const BYTE *p,	/* Data block to be sent */
	UINT cnt		/* Size of data block */
)
{
	do {
		SPDR = *p++;
    3960:	20 81       	ld	r18, Z
    3962:	2e bd       	out	0x2e, r18	; 46
		loop_until_bit_is_set(SPSR, SPIF);
    3964:	0d b4       	in	r0, 0x2d	; 45
    3966:	07 fe       	sbrs	r0, 7
    3968:	fd cf       	rjmp	.-6      	; 0x3964 <xmit_datablock+0x2a>
		SPDR = *p++;
    396a:	21 81       	ldd	r18, Z+1	; 0x01
    396c:	2e bd       	out	0x2e, r18	; 46
		loop_until_bit_is_set(SPSR, SPIF);
    396e:	0d b4       	in	r0, 0x2d	; 45
    3970:	07 fe       	sbrs	r0, 7
    3972:	fd cf       	rjmp	.-6      	; 0x396e <xmit_datablock+0x34>
    3974:	32 96       	adiw	r30, 0x02	; 2
	} while (cnt -= 2);
    3976:	e8 17       	cp	r30, r24
    3978:	f9 07       	cpc	r31, r25
    397a:	91 f7       	brne	.-28     	; 0x3960 <xmit_datablock+0x26>

	xchg_spi(token);					/* Xmit data token */
	if (token == 0xFD) return 1;		/* Do not send data if token is StopTran */

	xmit_spi_multi(buff, 512);			/* Data */
	xchg_spi(0xFF); xchg_spi(0xFF);		/* Dummy CRC */
    397c:	8f ef       	ldi	r24, 0xFF	; 255
    397e:	0e 94 dc 1b 	call	0x37b8	; 0x37b8 <xchg_spi>
    3982:	8f ef       	ldi	r24, 0xFF	; 255
    3984:	0e 94 dc 1b 	call	0x37b8	; 0x37b8 <xchg_spi>

	resp = xchg_spi(0xFF);				/* Receive data resp */
    3988:	8f ef       	ldi	r24, 0xFF	; 255
    398a:	0e 94 dc 1b 	call	0x37b8	; 0x37b8 <xchg_spi>

	return (resp & 0x1F) == 0x05 ? 1 : 0;	/* Data was accepted or not */
    398e:	8f 71       	andi	r24, 0x1F	; 31
    3990:	31 e0       	ldi	r19, 0x01	; 1
    3992:	20 e0       	ldi	r18, 0x00	; 0
    3994:	85 30       	cpi	r24, 0x05	; 5
    3996:	09 f0       	breq	.+2      	; 0x399a <xmit_datablock+0x60>
    3998:	30 e0       	ldi	r19, 0x00	; 0
    399a:	83 2f       	mov	r24, r19
    399c:	92 2f       	mov	r25, r18
    399e:	02 c0       	rjmp	.+4      	; 0x39a4 <xmit_datablock+0x6a>


	if (!wait_ready(500)) return 0;		/* Leading busy check: Wait for card ready to accept data block */

	xchg_spi(token);					/* Xmit data token */
	if (token == 0xFD) return 1;		/* Do not send data if token is StopTran */
    39a0:	81 e0       	ldi	r24, 0x01	; 1
    39a2:	90 e0       	ldi	r25, 0x00	; 0
	resp = xchg_spi(0xFF);				/* Receive data resp */

	return (resp & 0x1F) == 0x05 ? 1 : 0;	/* Data was accepted or not */

	/* Busy check is done at next transmission */
}
    39a4:	df 91       	pop	r29
    39a6:	cf 91       	pop	r28
    39a8:	1f 91       	pop	r17
    39aa:	08 95       	ret

000039ac <disk_initialize>:
/*-----------------------------------------------------------------------*/
/* Initialize Disk Drive                                                 */
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (BYTE pdrv)
{
    39ac:	a4 e0       	ldi	r26, 0x04	; 4
    39ae:	b0 e0       	ldi	r27, 0x00	; 0
    39b0:	ec ed       	ldi	r30, 0xDC	; 220
    39b2:	fc e1       	ldi	r31, 0x1C	; 28
    39b4:	0c 94 ea 28 	jmp	0x51d4	; 0x51d4 <__prologue_saves__+0x14>

	if (pdrv) return STA_NOINIT; /* Supports only drive 0 */
    39b8:	81 11       	cpse	r24, r1
    39ba:	b2 c0       	rjmp	.+356    	; 0x3b20 <disk_initialize+0x174>
	
	BYTE n, cmd, ty, ocr[4];

	power_off();						/* Turn off the socket power to reset the card */
	for (Timer1 = 10; Timer1; ) ;		/* Wait for 100ms */
    39bc:	8a e0       	ldi	r24, 0x0A	; 10
    39be:	80 93 49 04 	sts	0x0449, r24	; 0x800449 <Timer1>
    39c2:	80 91 49 04 	lds	r24, 0x0449	; 0x800449 <Timer1>
    39c6:	81 11       	cpse	r24, r1
    39c8:	fc cf       	rjmp	.-8      	; 0x39c2 <disk_initialize+0x16>
	if (Stat & STA_NODISK) return Stat;	/* No card in the socket? */
    39ca:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    39ce:	81 fd       	sbrc	r24, 1
    39d0:	a4 c0       	rjmp	.+328    	; 0x3b1a <disk_initialize+0x16e>
#define MMC_WP			disk_status(0) == STA_PROTECT	/* Test if write protected. yes:true, no:false, default:false */
#define	FCLK_SLOW()		clk_slow()	/* Set SPI clock for initialization (100-400kHz) */
#define	FCLK_FAST()		clk_fast()	/* Set SPI clock for read/write (20MHz max) */

static void clk_slow(void) {
	SPCR &= ~(1<<SPR0);
    39d2:	8c b5       	in	r24, 0x2c	; 44
    39d4:	8e 7f       	andi	r24, 0xFE	; 254
    39d6:	8c bd       	out	0x2c, r24	; 44
	SPCR |= (1<<SPR1);
    39d8:	8c b5       	in	r24, 0x2c	; 44
    39da:	82 60       	ori	r24, 0x02	; 2
    39dc:	8c bd       	out	0x2c, r24	; 44
	SPSR |= (1<<SPI2X);
    39de:	8d b5       	in	r24, 0x2d	; 45
    39e0:	81 60       	ori	r24, 0x01	; 1
    39e2:	8d bd       	out	0x2d, r24	; 45
    39e4:	1a e0       	ldi	r17, 0x0A	; 10
	for (Timer1 = 10; Timer1; ) ;		/* Wait for 100ms */
	if (Stat & STA_NODISK) return Stat;	/* No card in the socket? */

	power_on();							/* Turn on the socket power */
	FCLK_SLOW();
	for (n = 10; n; n--) xchg_spi(0xFF);	/* 80 dummy clocks */
    39e6:	8f ef       	ldi	r24, 0xFF	; 255
    39e8:	0e 94 dc 1b 	call	0x37b8	; 0x37b8 <xchg_spi>
    39ec:	11 50       	subi	r17, 0x01	; 1
    39ee:	d9 f7       	brne	.-10     	; 0x39e6 <disk_initialize+0x3a>

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI mode */
    39f0:	40 e0       	ldi	r20, 0x00	; 0
    39f2:	50 e0       	ldi	r21, 0x00	; 0
    39f4:	ba 01       	movw	r22, r20
    39f6:	80 e0       	ldi	r24, 0x00	; 0
    39f8:	0e 94 4f 1c 	call	0x389e	; 0x389e <send_cmd>
    39fc:	81 30       	cpi	r24, 0x01	; 1
    39fe:	09 f0       	breq	.+2      	; 0x3a02 <disk_initialize+0x56>
    3a00:	78 c0       	rjmp	.+240    	; 0x3af2 <disk_initialize+0x146>
		Timer1 = 100;						/* Initialization timeout of 1000 msec */
    3a02:	84 e6       	ldi	r24, 0x64	; 100
    3a04:	80 93 49 04 	sts	0x0449, r24	; 0x800449 <Timer1>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* Is the card SDv2? */
    3a08:	4a ea       	ldi	r20, 0xAA	; 170
    3a0a:	51 e0       	ldi	r21, 0x01	; 1
    3a0c:	60 e0       	ldi	r22, 0x00	; 0
    3a0e:	70 e0       	ldi	r23, 0x00	; 0
    3a10:	88 e0       	ldi	r24, 0x08	; 8
    3a12:	0e 94 4f 1c 	call	0x389e	; 0x389e <send_cmd>
    3a16:	81 30       	cpi	r24, 0x01	; 1
    3a18:	09 f0       	breq	.+2      	; 0x3a1c <disk_initialize+0x70>
    3a1a:	43 c0       	rjmp	.+134    	; 0x3aa2 <disk_initialize+0xf6>
    3a1c:	8e 01       	movw	r16, r28
    3a1e:	0f 5f       	subi	r16, 0xFF	; 255
    3a20:	1f 4f       	sbci	r17, 0xFF	; 255
    3a22:	6e 01       	movw	r12, r28
    3a24:	85 e0       	ldi	r24, 0x05	; 5
    3a26:	c8 0e       	add	r12, r24
    3a28:	d1 1c       	adc	r13, r1
    3a2a:	78 01       	movw	r14, r16
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get trailing return value of R7 resp */
    3a2c:	8f ef       	ldi	r24, 0xFF	; 255
    3a2e:	0e 94 dc 1b 	call	0x37b8	; 0x37b8 <xchg_spi>
    3a32:	f7 01       	movw	r30, r14
    3a34:	81 93       	st	Z+, r24
    3a36:	7f 01       	movw	r14, r30
    3a38:	ce 16       	cp	r12, r30
    3a3a:	df 06       	cpc	r13, r31
    3a3c:	b9 f7       	brne	.-18     	; 0x3a2c <disk_initialize+0x80>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
    3a3e:	8b 81       	ldd	r24, Y+3	; 0x03
    3a40:	81 30       	cpi	r24, 0x01	; 1
    3a42:	09 f0       	breq	.+2      	; 0x3a46 <disk_initialize+0x9a>
    3a44:	56 c0       	rjmp	.+172    	; 0x3af2 <disk_initialize+0x146>
    3a46:	8c 81       	ldd	r24, Y+4	; 0x04
    3a48:	8a 3a       	cpi	r24, 0xAA	; 170
    3a4a:	09 f0       	breq	.+2      	; 0x3a4e <disk_initialize+0xa2>
    3a4c:	52 c0       	rjmp	.+164    	; 0x3af2 <disk_initialize+0x146>
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
    3a4e:	80 91 49 04 	lds	r24, 0x0449	; 0x800449 <Timer1>
    3a52:	81 11       	cpse	r24, r1
    3a54:	06 c0       	rjmp	.+12     	; 0x3a62 <disk_initialize+0xb6>
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
    3a56:	80 91 49 04 	lds	r24, 0x0449	; 0x800449 <Timer1>
    3a5a:	88 23       	and	r24, r24
    3a5c:	09 f4       	brne	.+2      	; 0x3a60 <disk_initialize+0xb4>
    3a5e:	49 c0       	rjmp	.+146    	; 0x3af2 <disk_initialize+0x146>
    3a60:	0a c0       	rjmp	.+20     	; 0x3a76 <disk_initialize+0xca>
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI mode */
		Timer1 = 100;						/* Initialization timeout of 1000 msec */
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* Is the card SDv2? */
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get trailing return value of R7 resp */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
    3a62:	40 e0       	ldi	r20, 0x00	; 0
    3a64:	50 e0       	ldi	r21, 0x00	; 0
    3a66:	60 e0       	ldi	r22, 0x00	; 0
    3a68:	70 e4       	ldi	r23, 0x40	; 64
    3a6a:	89 ea       	ldi	r24, 0xA9	; 169
    3a6c:	0e 94 4f 1c 	call	0x389e	; 0x389e <send_cmd>
    3a70:	81 11       	cpse	r24, r1
    3a72:	ed cf       	rjmp	.-38     	; 0x3a4e <disk_initialize+0xa2>
    3a74:	f0 cf       	rjmp	.-32     	; 0x3a56 <disk_initialize+0xaa>
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
    3a76:	40 e0       	ldi	r20, 0x00	; 0
    3a78:	50 e0       	ldi	r21, 0x00	; 0
    3a7a:	ba 01       	movw	r22, r20
    3a7c:	8a e3       	ldi	r24, 0x3A	; 58
    3a7e:	0e 94 4f 1c 	call	0x389e	; 0x389e <send_cmd>
    3a82:	81 11       	cpse	r24, r1
    3a84:	36 c0       	rjmp	.+108    	; 0x3af2 <disk_initialize+0x146>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
    3a86:	8f ef       	ldi	r24, 0xFF	; 255
    3a88:	0e 94 dc 1b 	call	0x37b8	; 0x37b8 <xchg_spi>
    3a8c:	f8 01       	movw	r30, r16
    3a8e:	81 93       	st	Z+, r24
    3a90:	8f 01       	movw	r16, r30
    3a92:	ce 16       	cp	r12, r30
    3a94:	df 06       	cpc	r13, r31
    3a96:	b9 f7       	brne	.-18     	; 0x3a86 <disk_initialize+0xda>
					ty = (ocr[0] & 0x40) ? CT_SDC2 | CT_BLOCK : CT_SDC2;	/* Check if the card is SDv2 */
    3a98:	89 81       	ldd	r24, Y+1	; 0x01
    3a9a:	86 fd       	sbrc	r24, 6
    3a9c:	2c c0       	rjmp	.+88     	; 0x3af6 <disk_initialize+0x14a>
    3a9e:	18 e0       	ldi	r17, 0x08	; 8
    3aa0:	2b c0       	rjmp	.+86     	; 0x3af8 <disk_initialize+0x14c>
				}
			}
		} else {							/* SDv1 or MMCv3 */
			if (send_cmd(ACMD41, 0) <= 1) 	{
    3aa2:	40 e0       	ldi	r20, 0x00	; 0
    3aa4:	50 e0       	ldi	r21, 0x00	; 0
    3aa6:	ba 01       	movw	r22, r20
    3aa8:	89 ea       	ldi	r24, 0xA9	; 169
    3aaa:	0e 94 4f 1c 	call	0x389e	; 0x389e <send_cmd>
    3aae:	82 30       	cpi	r24, 0x02	; 2
    3ab0:	18 f0       	brcs	.+6      	; 0x3ab8 <disk_initialize+0x10c>
				ty = CT_SDC1; cmd = ACMD41;	/* SDv1 */
			} else {
				ty = CT_MMC3; cmd = CMD1;	/* MMCv3 */
    3ab2:	11 e0       	ldi	r17, 0x01	; 1
    3ab4:	01 e0       	ldi	r16, 0x01	; 1
    3ab6:	02 c0       	rjmp	.+4      	; 0x3abc <disk_initialize+0x110>
					ty = (ocr[0] & 0x40) ? CT_SDC2 | CT_BLOCK : CT_SDC2;	/* Check if the card is SDv2 */
				}
			}
		} else {							/* SDv1 or MMCv3 */
			if (send_cmd(ACMD41, 0) <= 1) 	{
				ty = CT_SDC1; cmd = ACMD41;	/* SDv1 */
    3ab8:	14 e0       	ldi	r17, 0x04	; 4
    3aba:	09 ea       	ldi	r16, 0xA9	; 169
			} else {
				ty = CT_MMC3; cmd = CMD1;	/* MMCv3 */
			}
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
    3abc:	80 91 49 04 	lds	r24, 0x0449	; 0x800449 <Timer1>
    3ac0:	81 11       	cpse	r24, r1
    3ac2:	05 c0       	rjmp	.+10     	; 0x3ace <disk_initialize+0x122>
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
    3ac4:	80 91 49 04 	lds	r24, 0x0449	; 0x800449 <Timer1>
    3ac8:	88 23       	and	r24, r24
    3aca:	99 f0       	breq	.+38     	; 0x3af2 <disk_initialize+0x146>
    3acc:	09 c0       	rjmp	.+18     	; 0x3ae0 <disk_initialize+0x134>
			if (send_cmd(ACMD41, 0) <= 1) 	{
				ty = CT_SDC1; cmd = ACMD41;	/* SDv1 */
			} else {
				ty = CT_MMC3; cmd = CMD1;	/* MMCv3 */
			}
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
    3ace:	40 e0       	ldi	r20, 0x00	; 0
    3ad0:	50 e0       	ldi	r21, 0x00	; 0
    3ad2:	ba 01       	movw	r22, r20
    3ad4:	80 2f       	mov	r24, r16
    3ad6:	0e 94 4f 1c 	call	0x389e	; 0x389e <send_cmd>
    3ada:	81 11       	cpse	r24, r1
    3adc:	ef cf       	rjmp	.-34     	; 0x3abc <disk_initialize+0x110>
    3ade:	f2 cf       	rjmp	.-28     	; 0x3ac4 <disk_initialize+0x118>
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
    3ae0:	40 e0       	ldi	r20, 0x00	; 0
    3ae2:	52 e0       	ldi	r21, 0x02	; 2
    3ae4:	60 e0       	ldi	r22, 0x00	; 0
    3ae6:	70 e0       	ldi	r23, 0x00	; 0
    3ae8:	80 e1       	ldi	r24, 0x10	; 16
    3aea:	0e 94 4f 1c 	call	0x389e	; 0x389e <send_cmd>
    3aee:	88 23       	and	r24, r24
    3af0:	19 f0       	breq	.+6      	; 0x3af8 <disk_initialize+0x14c>
				ty = 0;
    3af2:	10 e0       	ldi	r17, 0x00	; 0
    3af4:	01 c0       	rjmp	.+2      	; 0x3af8 <disk_initialize+0x14c>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get trailing return value of R7 resp */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
					ty = (ocr[0] & 0x40) ? CT_SDC2 | CT_BLOCK : CT_SDC2;	/* Check if the card is SDv2 */
    3af6:	18 e1       	ldi	r17, 0x18	; 24
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
				ty = 0;
		}
	}
	CardType = ty;
    3af8:	10 93 46 04 	sts	0x0446, r17	; 0x800446 <CardType>
	deselect();
    3afc:	0e 94 e2 1b 	call	0x37c4	; 0x37c4 <deselect>

	if (ty) {			/* Initialization succeded */
    3b00:	11 23       	and	r17, r17
    3b02:	59 f0       	breq	.+22     	; 0x3b1a <disk_initialize+0x16e>
		Stat &= ~STA_NOINIT;		/* Clear STA_NOINIT */
    3b04:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    3b08:	8e 7f       	andi	r24, 0xFE	; 254
    3b0a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	SPCR |= (1<<SPR1);
	SPSR |= (1<<SPI2X);
}

static void clk_fast(void) {
	SPCR &= ~((1<<SPR0) | (1<<SPR1));
    3b0e:	8c b5       	in	r24, 0x2c	; 44
    3b10:	8c 7f       	andi	r24, 0xFC	; 252
    3b12:	8c bd       	out	0x2c, r24	; 44
	SPCR |= (1<<SPR1);
    3b14:	8c b5       	in	r24, 0x2c	; 44
    3b16:	82 60       	ori	r24, 0x02	; 2
    3b18:	8c bd       	out	0x2c, r24	; 44
		FCLK_FAST();
	} else {			/* Initialization failed */
		power_off();
	}

	return Stat;
    3b1a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    3b1e:	01 c0       	rjmp	.+2      	; 0x3b22 <disk_initialize+0x176>
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (BYTE pdrv)
{

	if (pdrv) return STA_NOINIT; /* Supports only drive 0 */
    3b20:	81 e0       	ldi	r24, 0x01	; 1
	} else {			/* Initialization failed */
		power_off();
	}

	return Stat;
}
    3b22:	24 96       	adiw	r28, 0x04	; 4
    3b24:	e8 e0       	ldi	r30, 0x08	; 8
    3b26:	0c 94 06 29 	jmp	0x520c	; 0x520c <__epilogue_restores__+0x14>

00003b2a <disk_status>:
/* Get Disk Status                                                       */
/*-----------------------------------------------------------------------*/

DSTATUS disk_status (BYTE pdrv)
{
	if (pdrv) return STA_NOINIT; /* Supports only drive 0 */
    3b2a:	81 11       	cpse	r24, r1
    3b2c:	03 c0       	rjmp	.+6      	; 0x3b34 <disk_status+0xa>
	return Stat;
    3b2e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    3b32:	08 95       	ret
/* Get Disk Status                                                       */
/*-----------------------------------------------------------------------*/

DSTATUS disk_status (BYTE pdrv)
{
	if (pdrv) return STA_NOINIT; /* Supports only drive 0 */
    3b34:	81 e0       	ldi	r24, 0x01	; 1
	return Stat;
}
    3b36:	08 95       	ret

00003b38 <disk_read>:
	BYTE pdrv,
	BYTE *buff,			/* Pointer to the data buffer to store read data */
	LBA_t sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
    3b38:	ef 92       	push	r14
    3b3a:	ff 92       	push	r15
    3b3c:	0f 93       	push	r16
    3b3e:	1f 93       	push	r17
    3b40:	cf 93       	push	r28
    3b42:	7b 01       	movw	r14, r22
    3b44:	ba 01       	movw	r22, r20
    3b46:	a9 01       	movw	r20, r18
	if (pdrv) return RES_PARERR; /* Supports only drive 0 */
    3b48:	81 11       	cpse	r24, r1
    3b4a:	38 c0       	rjmp	.+112    	; 0x3bbc <disk_read+0x84>
	
	BYTE cmd;
	DWORD sect = (DWORD)sector;
	

	if (!count) return RES_PARERR;
    3b4c:	01 15       	cp	r16, r1
    3b4e:	11 05       	cpc	r17, r1
    3b50:	a9 f1       	breq	.+106    	; 0x3bbc <disk_read+0x84>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    3b52:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    3b56:	80 fd       	sbrc	r24, 0
    3b58:	33 c0       	rjmp	.+102    	; 0x3bc0 <disk_read+0x88>

	if (!(CardType & CT_BLOCK)) sect *= 512;	/* Convert to byte address if needed */
    3b5a:	80 91 46 04 	lds	r24, 0x0446	; 0x800446 <CardType>
    3b5e:	84 fd       	sbrc	r24, 4
    3b60:	07 c0       	rjmp	.+14     	; 0x3b70 <disk_read+0x38>
    3b62:	89 e0       	ldi	r24, 0x09	; 9
    3b64:	44 0f       	add	r20, r20
    3b66:	55 1f       	adc	r21, r21
    3b68:	66 1f       	adc	r22, r22
    3b6a:	77 1f       	adc	r23, r23
    3b6c:	8a 95       	dec	r24
    3b6e:	d1 f7       	brne	.-12     	; 0x3b64 <disk_read+0x2c>

	cmd = count > 1 ? CMD18 : CMD17;			/*  READ_MULTIPLE_BLOCK : READ_SINGLE_BLOCK */
    3b70:	02 30       	cpi	r16, 0x02	; 2
    3b72:	11 05       	cpc	r17, r1
    3b74:	10 f4       	brcc	.+4      	; 0x3b7a <disk_read+0x42>
    3b76:	c1 e1       	ldi	r28, 0x11	; 17
    3b78:	01 c0       	rjmp	.+2      	; 0x3b7c <disk_read+0x44>
    3b7a:	c2 e1       	ldi	r28, 0x12	; 18
	if (send_cmd(cmd, sect) == 0) {
    3b7c:	8c 2f       	mov	r24, r28
    3b7e:	0e 94 4f 1c 	call	0x389e	; 0x389e <send_cmd>
    3b82:	81 11       	cpse	r24, r1
    3b84:	14 c0       	rjmp	.+40     	; 0x3bae <disk_read+0x76>
		do {
			if (!rcvr_datablock(buff, 512)) break;
    3b86:	60 e0       	ldi	r22, 0x00	; 0
    3b88:	72 e0       	ldi	r23, 0x02	; 2
    3b8a:	c7 01       	movw	r24, r14
    3b8c:	0e 94 e7 1b 	call	0x37ce	; 0x37ce <rcvr_datablock>
    3b90:	89 2b       	or	r24, r25
    3b92:	29 f0       	breq	.+10     	; 0x3b9e <disk_read+0x66>
			buff += 512;
    3b94:	8e ef       	ldi	r24, 0xFE	; 254
    3b96:	f8 1a       	sub	r15, r24
		} while (--count);
    3b98:	01 50       	subi	r16, 0x01	; 1
    3b9a:	11 09       	sbc	r17, r1
    3b9c:	a1 f7       	brne	.-24     	; 0x3b86 <disk_read+0x4e>
		if (cmd == CMD18) send_cmd(CMD12, 0);	/* STOP_TRANSMISSION */
    3b9e:	c2 31       	cpi	r28, 0x12	; 18
    3ba0:	31 f4       	brne	.+12     	; 0x3bae <disk_read+0x76>
    3ba2:	40 e0       	ldi	r20, 0x00	; 0
    3ba4:	50 e0       	ldi	r21, 0x00	; 0
    3ba6:	ba 01       	movw	r22, r20
    3ba8:	8c e0       	ldi	r24, 0x0C	; 12
    3baa:	0e 94 4f 1c 	call	0x389e	; 0x389e <send_cmd>
	}
	deselect();
    3bae:	0e 94 e2 1b 	call	0x37c4	; 0x37c4 <deselect>

	return count ? RES_ERROR : RES_OK;
    3bb2:	81 e0       	ldi	r24, 0x01	; 1
    3bb4:	01 2b       	or	r16, r17
    3bb6:	29 f4       	brne	.+10     	; 0x3bc2 <disk_read+0x8a>
    3bb8:	80 e0       	ldi	r24, 0x00	; 0
    3bba:	03 c0       	rjmp	.+6      	; 0x3bc2 <disk_read+0x8a>
	BYTE *buff,			/* Pointer to the data buffer to store read data */
	LBA_t sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
	if (pdrv) return RES_PARERR; /* Supports only drive 0 */
    3bbc:	84 e0       	ldi	r24, 0x04	; 4
    3bbe:	01 c0       	rjmp	.+2      	; 0x3bc2 <disk_read+0x8a>
	BYTE cmd;
	DWORD sect = (DWORD)sector;
	

	if (!count) return RES_PARERR;
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    3bc0:	83 e0       	ldi	r24, 0x03	; 3
		if (cmd == CMD18) send_cmd(CMD12, 0);	/* STOP_TRANSMISSION */
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
    3bc2:	cf 91       	pop	r28
    3bc4:	1f 91       	pop	r17
    3bc6:	0f 91       	pop	r16
    3bc8:	ff 90       	pop	r15
    3bca:	ef 90       	pop	r14
    3bcc:	08 95       	ret

00003bce <disk_write>:
	BYTE pdrv,
	const BYTE *buff,	/* Pointer to the data to be written */
	LBA_t sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
    3bce:	a0 e0       	ldi	r26, 0x00	; 0
    3bd0:	b0 e0       	ldi	r27, 0x00	; 0
    3bd2:	ed ee       	ldi	r30, 0xED	; 237
    3bd4:	fd e1       	ldi	r31, 0x1D	; 29
    3bd6:	0c 94 ea 28 	jmp	0x51d4	; 0x51d4 <__prologue_saves__+0x14>
    3bda:	eb 01       	movw	r28, r22
    3bdc:	69 01       	movw	r12, r18
    3bde:	7a 01       	movw	r14, r20
	if (pdrv) return RES_PARERR; /* Supports only drive 0 */
    3be0:	81 11       	cpse	r24, r1
    3be2:	57 c0       	rjmp	.+174    	; 0x3c92 <disk_write+0xc4>
	
	DWORD sect = (DWORD)sector;


	if (!count) return RES_PARERR;
    3be4:	01 15       	cp	r16, r1
    3be6:	11 05       	cpc	r17, r1
    3be8:	09 f4       	brne	.+2      	; 0x3bec <disk_write+0x1e>
    3bea:	53 c0       	rjmp	.+166    	; 0x3c92 <disk_write+0xc4>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    3bec:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    3bf0:	80 fd       	sbrc	r24, 0
    3bf2:	51 c0       	rjmp	.+162    	; 0x3c96 <disk_write+0xc8>
	if (Stat & STA_PROTECT) return RES_WRPRT;
    3bf4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    3bf8:	82 fd       	sbrc	r24, 2
    3bfa:	4f c0       	rjmp	.+158    	; 0x3c9a <disk_write+0xcc>

	if (!(CardType & CT_BLOCK)) sect *= 512;	/* Convert to byte address if needed */
    3bfc:	80 91 46 04 	lds	r24, 0x0446	; 0x800446 <CardType>
    3c00:	84 fd       	sbrc	r24, 4
    3c02:	07 c0       	rjmp	.+14     	; 0x3c12 <disk_write+0x44>
    3c04:	99 e0       	ldi	r25, 0x09	; 9
    3c06:	cc 0c       	add	r12, r12
    3c08:	dd 1c       	adc	r13, r13
    3c0a:	ee 1c       	adc	r14, r14
    3c0c:	ff 1c       	adc	r15, r15
    3c0e:	9a 95       	dec	r25
    3c10:	d1 f7       	brne	.-12     	; 0x3c06 <disk_write+0x38>

	if (count == 1) {	/* Single block write */
    3c12:	01 30       	cpi	r16, 0x01	; 1
    3c14:	11 05       	cpc	r17, r1
    3c16:	99 f4       	brne	.+38     	; 0x3c3e <disk_write+0x70>
		if ((send_cmd(CMD24, sect) == 0)	/* WRITE_BLOCK */
    3c18:	b7 01       	movw	r22, r14
    3c1a:	a6 01       	movw	r20, r12
    3c1c:	88 e1       	ldi	r24, 0x18	; 24
    3c1e:	0e 94 4f 1c 	call	0x389e	; 0x389e <send_cmd>
    3c22:	81 11       	cpse	r24, r1
    3c24:	2c c0       	rjmp	.+88     	; 0x3c7e <disk_write+0xb0>
			&& xmit_datablock(buff, 0xFE)) {
    3c26:	6e ef       	ldi	r22, 0xFE	; 254
    3c28:	ce 01       	movw	r24, r28
    3c2a:	0e 94 9d 1c 	call	0x393a	; 0x393a <xmit_datablock>
    3c2e:	31 e0       	ldi	r19, 0x01	; 1
    3c30:	20 e0       	ldi	r18, 0x00	; 0
    3c32:	89 2b       	or	r24, r25
    3c34:	09 f0       	breq	.+2      	; 0x3c38 <disk_write+0x6a>
    3c36:	30 e0       	ldi	r19, 0x00	; 0
    3c38:	03 2f       	mov	r16, r19
    3c3a:	12 2f       	mov	r17, r18
    3c3c:	22 c0       	rjmp	.+68     	; 0x3c82 <disk_write+0xb4>
			count = 0;
		}
	}
	else {				/* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
    3c3e:	8c 70       	andi	r24, 0x0C	; 12
    3c40:	31 f0       	breq	.+12     	; 0x3c4e <disk_write+0x80>
    3c42:	a8 01       	movw	r20, r16
    3c44:	60 e0       	ldi	r22, 0x00	; 0
    3c46:	70 e0       	ldi	r23, 0x00	; 0
    3c48:	87 e9       	ldi	r24, 0x97	; 151
    3c4a:	0e 94 4f 1c 	call	0x389e	; 0x389e <send_cmd>
		if (send_cmd(CMD25, sect) == 0) {	/* WRITE_MULTIPLE_BLOCK */
    3c4e:	b7 01       	movw	r22, r14
    3c50:	a6 01       	movw	r20, r12
    3c52:	89 e1       	ldi	r24, 0x19	; 25
    3c54:	0e 94 4f 1c 	call	0x389e	; 0x389e <send_cmd>
    3c58:	81 11       	cpse	r24, r1
    3c5a:	13 c0       	rjmp	.+38     	; 0x3c82 <disk_write+0xb4>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
    3c5c:	6c ef       	ldi	r22, 0xFC	; 252
    3c5e:	ce 01       	movw	r24, r28
    3c60:	0e 94 9d 1c 	call	0x393a	; 0x393a <xmit_datablock>
    3c64:	89 2b       	or	r24, r25
    3c66:	21 f0       	breq	.+8      	; 0x3c70 <disk_write+0xa2>
				buff += 512;
    3c68:	de 5f       	subi	r29, 0xFE	; 254
			} while (--count);
    3c6a:	01 50       	subi	r16, 0x01	; 1
    3c6c:	11 09       	sbc	r17, r1
    3c6e:	b1 f7       	brne	.-20     	; 0x3c5c <disk_write+0x8e>
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
    3c70:	6d ef       	ldi	r22, 0xFD	; 253
    3c72:	80 e0       	ldi	r24, 0x00	; 0
    3c74:	90 e0       	ldi	r25, 0x00	; 0
    3c76:	0e 94 9d 1c 	call	0x393a	; 0x393a <xmit_datablock>
    3c7a:	89 2b       	or	r24, r25
    3c7c:	11 f4       	brne	.+4      	; 0x3c82 <disk_write+0xb4>
    3c7e:	01 e0       	ldi	r16, 0x01	; 1
    3c80:	10 e0       	ldi	r17, 0x00	; 0
		}
	}
	deselect();
    3c82:	0e 94 e2 1b 	call	0x37c4	; 0x37c4 <deselect>

	return count ? RES_ERROR : RES_OK;
    3c86:	81 e0       	ldi	r24, 0x01	; 1
    3c88:	01 15       	cp	r16, r1
    3c8a:	11 05       	cpc	r17, r1
    3c8c:	39 f4       	brne	.+14     	; 0x3c9c <disk_write+0xce>
    3c8e:	80 e0       	ldi	r24, 0x00	; 0
    3c90:	05 c0       	rjmp	.+10     	; 0x3c9c <disk_write+0xce>
	const BYTE *buff,	/* Pointer to the data to be written */
	LBA_t sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
	if (pdrv) return RES_PARERR; /* Supports only drive 0 */
    3c92:	84 e0       	ldi	r24, 0x04	; 4
    3c94:	03 c0       	rjmp	.+6      	; 0x3c9c <disk_write+0xce>
	
	DWORD sect = (DWORD)sector;


	if (!count) return RES_PARERR;
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    3c96:	83 e0       	ldi	r24, 0x03	; 3
    3c98:	01 c0       	rjmp	.+2      	; 0x3c9c <disk_write+0xce>
	if (Stat & STA_PROTECT) return RES_WRPRT;
    3c9a:	82 e0       	ldi	r24, 0x02	; 2
		}
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
    3c9c:	cd b7       	in	r28, 0x3d	; 61
    3c9e:	de b7       	in	r29, 0x3e	; 62
    3ca0:	e8 e0       	ldi	r30, 0x08	; 8
    3ca2:	0c 94 06 29 	jmp	0x520c	; 0x520c <__epilogue_restores__+0x14>

00003ca6 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
    3ca6:	a0 e1       	ldi	r26, 0x10	; 16
    3ca8:	b0 e0       	ldi	r27, 0x00	; 0
    3caa:	e9 e5       	ldi	r30, 0x59	; 89
    3cac:	fe e1       	ldi	r31, 0x1E	; 30
    3cae:	0c 94 ea 28 	jmp	0x51d4	; 0x51d4 <__prologue_saves__+0x14>
	if (pdrv) return RES_PARERR; /* Supports only drive 0 */	
    3cb2:	81 11       	cpse	r24, r1
    3cb4:	4a c2       	rjmp	.+1172   	; 0x414a <disk_ioctl+0x4a4>
	SDIO_CTRL *sdi;
	BYTE rc, *bp;
	UINT dc;
#endif

	if (Stat & STA_NOINIT) return RES_NOTRDY;
    3cb6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    3cba:	80 fd       	sbrc	r24, 0
    3cbc:	44 c2       	rjmp	.+1160   	; 0x4146 <disk_ioctl+0x4a0>
    3cbe:	8a 01       	movw	r16, r20

	res = RES_ERROR;
	switch (cmd) {
    3cc0:	63 33       	cpi	r22, 0x33	; 51
    3cc2:	09 f4       	brne	.+2      	; 0x3cc6 <disk_ioctl+0x20>
    3cc4:	08 c1       	rjmp	.+528    	; 0x3ed6 <disk_ioctl+0x230>
    3cc6:	a0 f4       	brcc	.+40     	; 0x3cf0 <disk_ioctl+0x4a>
    3cc8:	63 30       	cpi	r22, 0x03	; 3
    3cca:	09 f4       	brne	.+2      	; 0x3cce <disk_ioctl+0x28>
    3ccc:	8e c0       	rjmp	.+284    	; 0x3dea <disk_ioctl+0x144>
    3cce:	28 f4       	brcc	.+10     	; 0x3cda <disk_ioctl+0x34>
    3cd0:	66 23       	and	r22, r22
    3cd2:	11 f1       	breq	.+68     	; 0x3d18 <disk_ioctl+0x72>
    3cd4:	61 30       	cpi	r22, 0x01	; 1
    3cd6:	19 f1       	breq	.+70     	; 0x3d1e <disk_ioctl+0x78>
    3cd8:	38 c2       	rjmp	.+1136   	; 0x414a <disk_ioctl+0x4a4>
    3cda:	67 30       	cpi	r22, 0x07	; 7
    3cdc:	09 f4       	brne	.+2      	; 0x3ce0 <disk_ioctl+0x3a>
    3cde:	36 c1       	rjmp	.+620    	; 0x3f4c <disk_ioctl+0x2a6>
    3ce0:	62 33       	cpi	r22, 0x32	; 50
    3ce2:	09 f0       	breq	.+2      	; 0x3ce6 <disk_ioctl+0x40>
    3ce4:	32 c2       	rjmp	.+1124   	; 0x414a <disk_ioctl+0x4a4>
		break;
#endif
	/* Following commands are never used by FatFs module */

	case MMC_GET_TYPE :		/* Get card type flags (1 byte) */
		*ptr = CardType;
    3ce6:	80 91 46 04 	lds	r24, 0x0446	; 0x800446 <CardType>
    3cea:	fa 01       	movw	r30, r20
    3cec:	80 83       	st	Z, r24
    3cee:	33 c1       	rjmp	.+614    	; 0x3f56 <disk_ioctl+0x2b0>
#endif

	if (Stat & STA_NOINIT) return RES_NOTRDY;

	res = RES_ERROR;
	switch (cmd) {
    3cf0:	66 33       	cpi	r22, 0x36	; 54
    3cf2:	09 f4       	brne	.+2      	; 0x3cf6 <disk_ioctl+0x50>
    3cf4:	16 c1       	rjmp	.+556    	; 0x3f22 <disk_ioctl+0x27c>
    3cf6:	38 f4       	brcc	.+14     	; 0x3d06 <disk_ioctl+0x60>
    3cf8:	64 33       	cpi	r22, 0x34	; 52
    3cfa:	09 f4       	brne	.+2      	; 0x3cfe <disk_ioctl+0x58>
    3cfc:	f1 c0       	rjmp	.+482    	; 0x3ee0 <disk_ioctl+0x23a>
    3cfe:	65 33       	cpi	r22, 0x35	; 53
    3d00:	09 f4       	brne	.+2      	; 0x3d04 <disk_ioctl+0x5e>
    3d02:	f9 c0       	rjmp	.+498    	; 0x3ef6 <disk_ioctl+0x250>
    3d04:	22 c2       	rjmp	.+1092   	; 0x414a <disk_ioctl+0x4a4>
    3d06:	68 33       	cpi	r22, 0x38	; 56
    3d08:	09 f4       	brne	.+2      	; 0x3d0c <disk_ioctl+0x66>
    3d0a:	84 c1       	rjmp	.+776    	; 0x4014 <disk_ioctl+0x36e>
    3d0c:	08 f4       	brcc	.+2      	; 0x3d10 <disk_ioctl+0x6a>
    3d0e:	25 c1       	rjmp	.+586    	; 0x3f5a <disk_ioctl+0x2b4>
    3d10:	69 33       	cpi	r22, 0x39	; 57
    3d12:	09 f4       	brne	.+2      	; 0x3d16 <disk_ioctl+0x70>
    3d14:	d1 c1       	rjmp	.+930    	; 0x40b8 <disk_ioctl+0x412>
    3d16:	19 c2       	rjmp	.+1074   	; 0x414a <disk_ioctl+0x4a4>
	case CTRL_SYNC :		/* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
		if (select()) res = RES_OK;
    3d18:	0e 94 3b 1c 	call	0x3876	; 0x3876 <select>
    3d1c:	12 c1       	rjmp	.+548    	; 0x3f42 <disk_ioctl+0x29c>
		deselect();
		break;

	case GET_SECTOR_COUNT :	/* Get number of sectors on the disk (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
    3d1e:	40 e0       	ldi	r20, 0x00	; 0
    3d20:	50 e0       	ldi	r21, 0x00	; 0
    3d22:	ba 01       	movw	r22, r20
    3d24:	89 e0       	ldi	r24, 0x09	; 9
    3d26:	0e 94 4f 1c 	call	0x389e	; 0x389e <send_cmd>
    3d2a:	81 11       	cpse	r24, r1
    3d2c:	08 c2       	rjmp	.+1040   	; 0x413e <disk_ioctl+0x498>
    3d2e:	60 e1       	ldi	r22, 0x10	; 16
    3d30:	70 e0       	ldi	r23, 0x00	; 0
    3d32:	ce 01       	movw	r24, r28
    3d34:	01 96       	adiw	r24, 0x01	; 1
    3d36:	0e 94 e7 1b 	call	0x37ce	; 0x37ce <rcvr_datablock>
    3d3a:	89 2b       	or	r24, r25
    3d3c:	09 f4       	brne	.+2      	; 0x3d40 <disk_ioctl+0x9a>
    3d3e:	ff c1       	rjmp	.+1022   	; 0x413e <disk_ioctl+0x498>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
    3d40:	99 81       	ldd	r25, Y+1	; 0x01
    3d42:	92 95       	swap	r25
    3d44:	96 95       	lsr	r25
    3d46:	96 95       	lsr	r25
    3d48:	93 70       	andi	r25, 0x03	; 3
    3d4a:	29 85       	ldd	r18, Y+9	; 0x09
    3d4c:	4a 85       	ldd	r20, Y+10	; 0x0a
    3d4e:	88 85       	ldd	r24, Y+8	; 0x08
    3d50:	91 30       	cpi	r25, 0x01	; 1
    3d52:	d9 f4       	brne	.+54     	; 0x3d8a <disk_ioctl+0xe4>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
				*(LBA_t*)buff = csize << 10;
    3d54:	30 e0       	ldi	r19, 0x00	; 0
    3d56:	32 2f       	mov	r19, r18
    3d58:	22 27       	eor	r18, r18
    3d5a:	24 0f       	add	r18, r20
    3d5c:	31 1d       	adc	r19, r1
    3d5e:	8f 73       	andi	r24, 0x3F	; 63
    3d60:	90 e0       	ldi	r25, 0x00	; 0
    3d62:	a0 e0       	ldi	r26, 0x00	; 0
    3d64:	b0 e0       	ldi	r27, 0x00	; 0
    3d66:	dc 01       	movw	r26, r24
    3d68:	99 27       	eor	r25, r25
    3d6a:	88 27       	eor	r24, r24
    3d6c:	01 96       	adiw	r24, 0x01	; 1
    3d6e:	a1 1d       	adc	r26, r1
    3d70:	b1 1d       	adc	r27, r1
    3d72:	82 0f       	add	r24, r18
    3d74:	93 1f       	adc	r25, r19
    3d76:	a1 1d       	adc	r26, r1
    3d78:	b1 1d       	adc	r27, r1
    3d7a:	fa e0       	ldi	r31, 0x0A	; 10
    3d7c:	88 0f       	add	r24, r24
    3d7e:	99 1f       	adc	r25, r25
    3d80:	aa 1f       	adc	r26, r26
    3d82:	bb 1f       	adc	r27, r27
    3d84:	fa 95       	dec	r31
    3d86:	d1 f7       	brne	.-12     	; 0x3d7c <disk_ioctl+0xd6>
    3d88:	29 c0       	rjmp	.+82     	; 0x3ddc <disk_ioctl+0x136>
			} else {					/* SDC ver 1.XX or MMC*/
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
				*(LBA_t*)buff = csize << (n - 9);
    3d8a:	22 95       	swap	r18
    3d8c:	26 95       	lsr	r18
    3d8e:	26 95       	lsr	r18
    3d90:	23 70       	andi	r18, 0x03	; 3
    3d92:	f4 e0       	ldi	r31, 0x04	; 4
    3d94:	8f 9f       	mul	r24, r31
    3d96:	c0 01       	movw	r24, r0
    3d98:	11 24       	eor	r1, r1
    3d9a:	82 0f       	add	r24, r18
    3d9c:	91 1d       	adc	r25, r1
    3d9e:	01 96       	adiw	r24, 0x01	; 1
    3da0:	2f 81       	ldd	r18, Y+7	; 0x07
    3da2:	23 70       	andi	r18, 0x03	; 3
    3da4:	30 e0       	ldi	r19, 0x00	; 0
    3da6:	32 2f       	mov	r19, r18
    3da8:	22 27       	eor	r18, r18
    3daa:	33 0f       	add	r19, r19
    3dac:	33 0f       	add	r19, r19
    3dae:	82 0f       	add	r24, r18
    3db0:	93 1f       	adc	r25, r19
    3db2:	a0 e0       	ldi	r26, 0x00	; 0
    3db4:	b0 e0       	ldi	r27, 0x00	; 0
    3db6:	2e 81       	ldd	r18, Y+6	; 0x06
    3db8:	32 2f       	mov	r19, r18
    3dba:	3f 70       	andi	r19, 0x0F	; 15
    3dbc:	2b 85       	ldd	r18, Y+11	; 0x0b
    3dbe:	22 1f       	adc	r18, r18
    3dc0:	22 27       	eor	r18, r18
    3dc2:	22 1f       	adc	r18, r18
    3dc4:	23 0f       	add	r18, r19
    3dc6:	43 70       	andi	r20, 0x03	; 3
    3dc8:	44 0f       	add	r20, r20
    3dca:	42 0f       	add	r20, r18
    3dcc:	47 50       	subi	r20, 0x07	; 7
    3dce:	04 c0       	rjmp	.+8      	; 0x3dd8 <disk_ioctl+0x132>
    3dd0:	88 0f       	add	r24, r24
    3dd2:	99 1f       	adc	r25, r25
    3dd4:	aa 1f       	adc	r26, r26
    3dd6:	bb 1f       	adc	r27, r27
    3dd8:	4a 95       	dec	r20
    3dda:	d2 f7       	brpl	.-12     	; 0x3dd0 <disk_ioctl+0x12a>
    3ddc:	f8 01       	movw	r30, r16
    3dde:	80 83       	st	Z, r24
    3de0:	91 83       	std	Z+1, r25	; 0x01
    3de2:	a2 83       	std	Z+2, r26	; 0x02
    3de4:	b3 83       	std	Z+3, r27	; 0x03
			}
			res = RES_OK;
    3de6:	10 e0       	ldi	r17, 0x00	; 0
    3de8:	ab c1       	rjmp	.+854    	; 0x4140 <disk_ioctl+0x49a>
		}
		deselect();
		break;

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SDC2) {	/* SDv2? */
    3dea:	f0 90 46 04 	lds	r15, 0x0446	; 0x800446 <CardType>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
    3dee:	40 e0       	ldi	r20, 0x00	; 0
    3df0:	50 e0       	ldi	r21, 0x00	; 0
    3df2:	ba 01       	movw	r22, r20
		}
		deselect();
		break;

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SDC2) {	/* SDv2? */
    3df4:	f3 fe       	sbrs	r15, 3
    3df6:	28 c0       	rjmp	.+80     	; 0x3e48 <disk_ioctl+0x1a2>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
    3df8:	8d e8       	ldi	r24, 0x8D	; 141
    3dfa:	0e 94 4f 1c 	call	0x389e	; 0x389e <send_cmd>
    3dfe:	81 11       	cpse	r24, r1
    3e00:	9e c1       	rjmp	.+828    	; 0x413e <disk_ioctl+0x498>
				xchg_spi(0xFF);
    3e02:	8f ef       	ldi	r24, 0xFF	; 255
    3e04:	0e 94 dc 1b 	call	0x37b8	; 0x37b8 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
    3e08:	60 e1       	ldi	r22, 0x10	; 16
    3e0a:	70 e0       	ldi	r23, 0x00	; 0
    3e0c:	ce 01       	movw	r24, r28
    3e0e:	01 96       	adiw	r24, 0x01	; 1
    3e10:	0e 94 e7 1b 	call	0x37ce	; 0x37ce <rcvr_datablock>
    3e14:	89 2b       	or	r24, r25
    3e16:	09 f4       	brne	.+2      	; 0x3e1a <disk_ioctl+0x174>
    3e18:	92 c1       	rjmp	.+804    	; 0x413e <disk_ioctl+0x498>
    3e1a:	50 e3       	ldi	r21, 0x30	; 48
    3e1c:	f5 2e       	mov	r15, r21
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
    3e1e:	8f ef       	ldi	r24, 0xFF	; 255
    3e20:	0e 94 dc 1b 	call	0x37b8	; 0x37b8 <xchg_spi>
    3e24:	fa 94       	dec	r15
    3e26:	f1 10       	cpse	r15, r1
    3e28:	fa cf       	rjmp	.-12     	; 0x3e1e <disk_ioctl+0x178>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
    3e2a:	2b 85       	ldd	r18, Y+11	; 0x0b
    3e2c:	22 95       	swap	r18
    3e2e:	2f 70       	andi	r18, 0x0F	; 15
    3e30:	80 e1       	ldi	r24, 0x10	; 16
    3e32:	90 e0       	ldi	r25, 0x00	; 0
    3e34:	a0 e0       	ldi	r26, 0x00	; 0
    3e36:	b0 e0       	ldi	r27, 0x00	; 0
    3e38:	04 c0       	rjmp	.+8      	; 0x3e42 <disk_ioctl+0x19c>
    3e3a:	88 0f       	add	r24, r24
    3e3c:	99 1f       	adc	r25, r25
    3e3e:	aa 1f       	adc	r26, r26
    3e40:	bb 1f       	adc	r27, r27
    3e42:	2a 95       	dec	r18
    3e44:	d2 f7       	brpl	.-12     	; 0x3e3a <disk_ioctl+0x194>
    3e46:	ca cf       	rjmp	.-108    	; 0x3ddc <disk_ioctl+0x136>
					res = RES_OK;
				}
			}
		} else {					/* SDv1 or MMCv3 */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
    3e48:	89 e0       	ldi	r24, 0x09	; 9
    3e4a:	0e 94 4f 1c 	call	0x389e	; 0x389e <send_cmd>
    3e4e:	81 11       	cpse	r24, r1
    3e50:	76 c1       	rjmp	.+748    	; 0x413e <disk_ioctl+0x498>
    3e52:	60 e1       	ldi	r22, 0x10	; 16
    3e54:	70 e0       	ldi	r23, 0x00	; 0
    3e56:	ce 01       	movw	r24, r28
    3e58:	01 96       	adiw	r24, 0x01	; 1
    3e5a:	0e 94 e7 1b 	call	0x37ce	; 0x37ce <rcvr_datablock>
    3e5e:	89 2b       	or	r24, r25
    3e60:	09 f4       	brne	.+2      	; 0x3e64 <disk_ioctl+0x1be>
    3e62:	6d c1       	rjmp	.+730    	; 0x413e <disk_ioctl+0x498>
    3e64:	2b 85       	ldd	r18, Y+11	; 0x0b
    3e66:	8c 85       	ldd	r24, Y+12	; 0x0c
				if (CardType & CT_SDC1) {	/* SDv1 */
    3e68:	f2 fe       	sbrs	r15, 2
    3e6a:	16 c0       	rjmp	.+44     	; 0x3e98 <disk_ioctl+0x1f2>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
    3e6c:	2f 73       	andi	r18, 0x3F	; 63
    3e6e:	88 1f       	adc	r24, r24
    3e70:	88 27       	eor	r24, r24
    3e72:	88 1f       	adc	r24, r24
    3e74:	90 e0       	ldi	r25, 0x00	; 0
    3e76:	01 96       	adiw	r24, 0x01	; 1
    3e78:	82 0f       	add	r24, r18
    3e7a:	91 1d       	adc	r25, r1
    3e7c:	82 0f       	add	r24, r18
    3e7e:	91 1d       	adc	r25, r1
    3e80:	2e 85       	ldd	r18, Y+14	; 0x0e
    3e82:	22 95       	swap	r18
    3e84:	26 95       	lsr	r18
    3e86:	26 95       	lsr	r18
    3e88:	23 70       	andi	r18, 0x03	; 3
    3e8a:	21 50       	subi	r18, 0x01	; 1
    3e8c:	02 c0       	rjmp	.+4      	; 0x3e92 <disk_ioctl+0x1ec>
    3e8e:	88 0f       	add	r24, r24
    3e90:	99 1f       	adc	r25, r25
    3e92:	2a 95       	dec	r18
    3e94:	e2 f7       	brpl	.-8      	; 0x3e8e <disk_ioctl+0x1e8>
    3e96:	1c c0       	rjmp	.+56     	; 0x3ed0 <disk_ioctl+0x22a>
				} else {					/* MMCv3 */
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
    3e98:	38 2f       	mov	r19, r24
    3e9a:	33 70       	andi	r19, 0x03	; 3
    3e9c:	82 95       	swap	r24
    3e9e:	86 95       	lsr	r24
    3ea0:	87 70       	andi	r24, 0x07	; 7
    3ea2:	90 e0       	ldi	r25, 0x00	; 0
    3ea4:	f8 e0       	ldi	r31, 0x08	; 8
    3ea6:	3f 9f       	mul	r19, r31
    3ea8:	80 0d       	add	r24, r0
    3eaa:	91 1d       	adc	r25, r1
    3eac:	11 24       	eor	r1, r1
    3eae:	01 96       	adiw	r24, 0x01	; 1
    3eb0:	2c 77       	andi	r18, 0x7C	; 124
    3eb2:	30 e0       	ldi	r19, 0x00	; 0
    3eb4:	35 95       	asr	r19
    3eb6:	27 95       	ror	r18
    3eb8:	35 95       	asr	r19
    3eba:	27 95       	ror	r18
    3ebc:	2f 5f       	subi	r18, 0xFF	; 255
    3ebe:	3f 4f       	sbci	r19, 0xFF	; 255
    3ec0:	82 9f       	mul	r24, r18
    3ec2:	a0 01       	movw	r20, r0
    3ec4:	83 9f       	mul	r24, r19
    3ec6:	50 0d       	add	r21, r0
    3ec8:	92 9f       	mul	r25, r18
    3eca:	50 0d       	add	r21, r0
    3ecc:	11 24       	eor	r1, r1
    3ece:	ca 01       	movw	r24, r20
    3ed0:	a0 e0       	ldi	r26, 0x00	; 0
    3ed2:	b0 e0       	ldi	r27, 0x00	; 0
    3ed4:	83 cf       	rjmp	.-250    	; 0x3ddc <disk_ioctl+0x136>
		*ptr = CardType;
		res = RES_OK;
		break;

	case MMC_GET_CSD :		/* Receive CSD as a data block (16 bytes) */
		if (send_cmd(CMD9, 0) == 0 && rcvr_datablock(ptr, 16)) {	/* READ_CSD */
    3ed6:	40 e0       	ldi	r20, 0x00	; 0
    3ed8:	50 e0       	ldi	r21, 0x00	; 0
    3eda:	ba 01       	movw	r22, r20
    3edc:	89 e0       	ldi	r24, 0x09	; 9
    3ede:	04 c0       	rjmp	.+8      	; 0x3ee8 <disk_ioctl+0x242>
		}
		deselect();
		break;

	case MMC_GET_CID :		/* Receive CID as a data block (16 bytes) */
		if (send_cmd(CMD10, 0) == 0 && rcvr_datablock(ptr, 16)) {	/* READ_CID */
    3ee0:	40 e0       	ldi	r20, 0x00	; 0
    3ee2:	50 e0       	ldi	r21, 0x00	; 0
    3ee4:	ba 01       	movw	r22, r20
    3ee6:	8a e0       	ldi	r24, 0x0A	; 10
    3ee8:	0e 94 4f 1c 	call	0x389e	; 0x389e <send_cmd>
    3eec:	81 11       	cpse	r24, r1
    3eee:	27 c1       	rjmp	.+590    	; 0x413e <disk_ioctl+0x498>
    3ef0:	60 e1       	ldi	r22, 0x10	; 16
    3ef2:	70 e0       	ldi	r23, 0x00	; 0
    3ef4:	23 c0       	rjmp	.+70     	; 0x3f3c <disk_ioctl+0x296>
		}
		deselect();
		break;

	case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
		if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
    3ef6:	40 e0       	ldi	r20, 0x00	; 0
    3ef8:	50 e0       	ldi	r21, 0x00	; 0
    3efa:	ba 01       	movw	r22, r20
    3efc:	8a e3       	ldi	r24, 0x3A	; 58
    3efe:	0e 94 4f 1c 	call	0x389e	; 0x389e <send_cmd>
    3f02:	81 11       	cpse	r24, r1
    3f04:	1c c1       	rjmp	.+568    	; 0x413e <disk_ioctl+0x498>
    3f06:	78 01       	movw	r14, r16
    3f08:	f4 e0       	ldi	r31, 0x04	; 4
    3f0a:	ef 0e       	add	r14, r31
    3f0c:	f1 1c       	adc	r15, r1
			for (n = 4; n; n--) *ptr++ = xchg_spi(0xFF);
    3f0e:	8f ef       	ldi	r24, 0xFF	; 255
    3f10:	0e 94 dc 1b 	call	0x37b8	; 0x37b8 <xchg_spi>
    3f14:	f8 01       	movw	r30, r16
    3f16:	81 93       	st	Z+, r24
    3f18:	8f 01       	movw	r16, r30
    3f1a:	ee 15       	cp	r30, r14
    3f1c:	ff 05       	cpc	r31, r15
    3f1e:	b9 f7       	brne	.-18     	; 0x3f0e <disk_ioctl+0x268>
    3f20:	62 cf       	rjmp	.-316    	; 0x3de6 <disk_ioctl+0x140>
		}
		deselect();
		break;

	case MMC_GET_SDSTAT :	/* Receive SD statsu as a data block (64 bytes) */
		if (send_cmd(ACMD13, 0) == 0) {	/* SD_STATUS */
    3f22:	40 e0       	ldi	r20, 0x00	; 0
    3f24:	50 e0       	ldi	r21, 0x00	; 0
    3f26:	ba 01       	movw	r22, r20
    3f28:	8d e8       	ldi	r24, 0x8D	; 141
    3f2a:	0e 94 4f 1c 	call	0x389e	; 0x389e <send_cmd>
    3f2e:	81 11       	cpse	r24, r1
    3f30:	06 c1       	rjmp	.+524    	; 0x413e <disk_ioctl+0x498>
			xchg_spi(0xFF);
    3f32:	8f ef       	ldi	r24, 0xFF	; 255
    3f34:	0e 94 dc 1b 	call	0x37b8	; 0x37b8 <xchg_spi>
			if (rcvr_datablock(ptr, 64)) res = RES_OK;
    3f38:	60 e4       	ldi	r22, 0x40	; 64
    3f3a:	70 e0       	ldi	r23, 0x00	; 0
    3f3c:	c8 01       	movw	r24, r16
    3f3e:	0e 94 e7 1b 	call	0x37ce	; 0x37ce <rcvr_datablock>
	UINT dc;
#endif

	if (Stat & STA_NOINIT) return RES_NOTRDY;

	res = RES_ERROR;
    3f42:	11 e0       	ldi	r17, 0x01	; 1
    3f44:	89 2b       	or	r24, r25
    3f46:	09 f4       	brne	.+2      	; 0x3f4a <disk_ioctl+0x2a4>
    3f48:	fb c0       	rjmp	.+502    	; 0x4140 <disk_ioctl+0x49a>
    3f4a:	4d cf       	rjmp	.-358    	; 0x3de6 <disk_ioctl+0x140>
		deselect();
		break;

	case CTRL_POWER_OFF :	/* Power off */
		power_off();
		Stat |= STA_NOINIT;
    3f4c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    3f50:	81 60       	ori	r24, 0x01	; 1
    3f52:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		res = RES_OK;
    3f56:	10 e0       	ldi	r17, 0x00	; 0
		break;
    3f58:	f9 c0       	rjmp	.+498    	; 0x414c <disk_ioctl+0x4a6>
#if _USE_ISDIO
	case ISDIO_READ:
		sdi = buff;
		if (send_cmd(CMD48, 0x80000000 | (DWORD)sdi->func << 28 | (DWORD)sdi->addr << 9 | ((sdi->ndata - 1) & 0x1FF)) == 0) {
    3f5a:	fa 01       	movw	r30, r20
    3f5c:	43 81       	ldd	r20, Z+3	; 0x03
    3f5e:	54 81       	ldd	r21, Z+4	; 0x04
    3f60:	65 81       	ldd	r22, Z+5	; 0x05
    3f62:	76 81       	ldd	r23, Z+6	; 0x06
    3f64:	39 e0       	ldi	r19, 0x09	; 9
    3f66:	44 0f       	add	r20, r20
    3f68:	55 1f       	adc	r21, r21
    3f6a:	66 1f       	adc	r22, r22
    3f6c:	77 1f       	adc	r23, r23
    3f6e:	3a 95       	dec	r19
    3f70:	d1 f7       	brne	.-12     	; 0x3f66 <disk_ioctl+0x2c0>
    3f72:	70 68       	ori	r23, 0x80	; 128
    3f74:	80 81       	ld	r24, Z
    3f76:	90 e0       	ldi	r25, 0x00	; 0
    3f78:	a0 e0       	ldi	r26, 0x00	; 0
    3f7a:	b0 e0       	ldi	r27, 0x00	; 0
    3f7c:	2c e1       	ldi	r18, 0x1C	; 28
    3f7e:	88 0f       	add	r24, r24
    3f80:	99 1f       	adc	r25, r25
    3f82:	aa 1f       	adc	r26, r26
    3f84:	bb 1f       	adc	r27, r27
    3f86:	2a 95       	dec	r18
    3f88:	d1 f7       	brne	.-12     	; 0x3f7e <disk_ioctl+0x2d8>
    3f8a:	48 2b       	or	r20, r24
    3f8c:	59 2b       	or	r21, r25
    3f8e:	6a 2b       	or	r22, r26
    3f90:	7b 2b       	or	r23, r27
    3f92:	81 81       	ldd	r24, Z+1	; 0x01
    3f94:	92 81       	ldd	r25, Z+2	; 0x02
    3f96:	01 97       	sbiw	r24, 0x01	; 1
    3f98:	91 70       	andi	r25, 0x01	; 1
    3f9a:	a0 e0       	ldi	r26, 0x00	; 0
    3f9c:	b0 e0       	ldi	r27, 0x00	; 0
    3f9e:	48 2b       	or	r20, r24
    3fa0:	59 2b       	or	r21, r25
    3fa2:	6a 2b       	or	r22, r26
    3fa4:	7b 2b       	or	r23, r27
    3fa6:	80 e3       	ldi	r24, 0x30	; 48
    3fa8:	0e 94 4f 1c 	call	0x389e	; 0x389e <send_cmd>
    3fac:	81 11       	cpse	r24, r1
    3fae:	c7 c0       	rjmp	.+398    	; 0x413e <disk_ioctl+0x498>
			for (Timer1 = 100; (rc = xchg_spi(0xFF)) == 0xFF && Timer1; ) ;
    3fb0:	84 e6       	ldi	r24, 0x64	; 100
    3fb2:	80 93 49 04 	sts	0x0449, r24	; 0x800449 <Timer1>
    3fb6:	8f ef       	ldi	r24, 0xFF	; 255
    3fb8:	0e 94 dc 1b 	call	0x37b8	; 0x37b8 <xchg_spi>
    3fbc:	8f 3f       	cpi	r24, 0xFF	; 255
    3fbe:	29 f4       	brne	.+10     	; 0x3fca <disk_ioctl+0x324>
    3fc0:	80 91 49 04 	lds	r24, 0x0449	; 0x800449 <Timer1>
    3fc4:	81 11       	cpse	r24, r1
    3fc6:	f7 cf       	rjmp	.-18     	; 0x3fb6 <disk_ioctl+0x310>
    3fc8:	ba c0       	rjmp	.+372    	; 0x413e <disk_ioctl+0x498>
			if (rc == 0xFE) {
    3fca:	8e 3f       	cpi	r24, 0xFE	; 254
    3fcc:	09 f0       	breq	.+2      	; 0x3fd0 <disk_ioctl+0x32a>
    3fce:	b7 c0       	rjmp	.+366    	; 0x413e <disk_ioctl+0x498>
				for (bp = sdi->data, dc = sdi->ndata; dc; dc--) *bp++ = xchg_spi(0xFF);
    3fd0:	f8 01       	movw	r30, r16
    3fd2:	e7 80       	ldd	r14, Z+7	; 0x07
    3fd4:	f0 84       	ldd	r15, Z+8	; 0x08
    3fd6:	c1 80       	ldd	r12, Z+1	; 0x01
    3fd8:	d2 80       	ldd	r13, Z+2	; 0x02
    3fda:	ce 0c       	add	r12, r14
    3fdc:	df 1c       	adc	r13, r15
    3fde:	ce 14       	cp	r12, r14
    3fe0:	df 04       	cpc	r13, r15
    3fe2:	39 f0       	breq	.+14     	; 0x3ff2 <disk_ioctl+0x34c>
    3fe4:	8f ef       	ldi	r24, 0xFF	; 255
    3fe6:	0e 94 dc 1b 	call	0x37b8	; 0x37b8 <xchg_spi>
    3fea:	f7 01       	movw	r30, r14
    3fec:	81 93       	st	Z+, r24
    3fee:	7f 01       	movw	r14, r30
    3ff0:	f6 cf       	rjmp	.-20     	; 0x3fde <disk_ioctl+0x338>
				for (dc = 514 - sdi->ndata; dc; dc--) xchg_spi(0xFF);
    3ff2:	f8 01       	movw	r30, r16
    3ff4:	81 81       	ldd	r24, Z+1	; 0x01
    3ff6:	92 81       	ldd	r25, Z+2	; 0x02
    3ff8:	02 e0       	ldi	r16, 0x02	; 2
    3ffa:	12 e0       	ldi	r17, 0x02	; 2
    3ffc:	08 1b       	sub	r16, r24
    3ffe:	19 0b       	sbc	r17, r25
    4000:	01 15       	cp	r16, r1
    4002:	11 05       	cpc	r17, r1
    4004:	09 f4       	brne	.+2      	; 0x4008 <disk_ioctl+0x362>
    4006:	ef ce       	rjmp	.-546    	; 0x3de6 <disk_ioctl+0x140>
    4008:	8f ef       	ldi	r24, 0xFF	; 255
    400a:	0e 94 dc 1b 	call	0x37b8	; 0x37b8 <xchg_spi>
    400e:	01 50       	subi	r16, 0x01	; 1
    4010:	11 09       	sbc	r17, r1
    4012:	f6 cf       	rjmp	.-20     	; 0x4000 <disk_ioctl+0x35a>
		deselect();
		break;

	case ISDIO_WRITE:
		sdi = buff;
		if (send_cmd(CMD49, 0x80000000 | (DWORD)sdi->func << 28 | (DWORD)sdi->addr << 9 | ((sdi->ndata - 1) & 0x1FF)) == 0) {
    4014:	fa 01       	movw	r30, r20
    4016:	43 81       	ldd	r20, Z+3	; 0x03
    4018:	54 81       	ldd	r21, Z+4	; 0x04
    401a:	65 81       	ldd	r22, Z+5	; 0x05
    401c:	76 81       	ldd	r23, Z+6	; 0x06
    401e:	39 e0       	ldi	r19, 0x09	; 9
    4020:	44 0f       	add	r20, r20
    4022:	55 1f       	adc	r21, r21
    4024:	66 1f       	adc	r22, r22
    4026:	77 1f       	adc	r23, r23
    4028:	3a 95       	dec	r19
    402a:	d1 f7       	brne	.-12     	; 0x4020 <disk_ioctl+0x37a>
    402c:	70 68       	ori	r23, 0x80	; 128
    402e:	80 81       	ld	r24, Z
    4030:	90 e0       	ldi	r25, 0x00	; 0
    4032:	a0 e0       	ldi	r26, 0x00	; 0
    4034:	b0 e0       	ldi	r27, 0x00	; 0
    4036:	2c e1       	ldi	r18, 0x1C	; 28
    4038:	88 0f       	add	r24, r24
    403a:	99 1f       	adc	r25, r25
    403c:	aa 1f       	adc	r26, r26
    403e:	bb 1f       	adc	r27, r27
    4040:	2a 95       	dec	r18
    4042:	d1 f7       	brne	.-12     	; 0x4038 <disk_ioctl+0x392>
    4044:	48 2b       	or	r20, r24
    4046:	59 2b       	or	r21, r25
    4048:	6a 2b       	or	r22, r26
    404a:	7b 2b       	or	r23, r27
    404c:	81 81       	ldd	r24, Z+1	; 0x01
    404e:	92 81       	ldd	r25, Z+2	; 0x02
    4050:	01 97       	sbiw	r24, 0x01	; 1
    4052:	91 70       	andi	r25, 0x01	; 1
    4054:	a0 e0       	ldi	r26, 0x00	; 0
    4056:	b0 e0       	ldi	r27, 0x00	; 0
    4058:	48 2b       	or	r20, r24
    405a:	59 2b       	or	r21, r25
    405c:	6a 2b       	or	r22, r26
    405e:	7b 2b       	or	r23, r27
    4060:	81 e3       	ldi	r24, 0x31	; 49
    4062:	0e 94 4f 1c 	call	0x389e	; 0x389e <send_cmd>
    4066:	81 11       	cpse	r24, r1
    4068:	6a c0       	rjmp	.+212    	; 0x413e <disk_ioctl+0x498>
			xchg_spi(0xFF); xchg_spi(0xFE);
    406a:	8f ef       	ldi	r24, 0xFF	; 255
    406c:	0e 94 dc 1b 	call	0x37b8	; 0x37b8 <xchg_spi>
    4070:	8e ef       	ldi	r24, 0xFE	; 254
    4072:	0e 94 dc 1b 	call	0x37b8	; 0x37b8 <xchg_spi>
			for (bp = sdi->data, dc = sdi->ndata; dc; dc--) xchg_spi(*bp++);
    4076:	f8 01       	movw	r30, r16
    4078:	e7 80       	ldd	r14, Z+7	; 0x07
    407a:	f0 84       	ldd	r15, Z+8	; 0x08
    407c:	c1 80       	ldd	r12, Z+1	; 0x01
    407e:	d2 80       	ldd	r13, Z+2	; 0x02
    4080:	ce 0c       	add	r12, r14
    4082:	df 1c       	adc	r13, r15
    4084:	ec 14       	cp	r14, r12
    4086:	fd 04       	cpc	r15, r13
    4088:	31 f0       	breq	.+12     	; 0x4096 <disk_ioctl+0x3f0>
    408a:	f7 01       	movw	r30, r14
    408c:	81 91       	ld	r24, Z+
    408e:	7f 01       	movw	r14, r30
    4090:	0e 94 dc 1b 	call	0x37b8	; 0x37b8 <xchg_spi>
    4094:	f7 cf       	rjmp	.-18     	; 0x4084 <disk_ioctl+0x3de>
			for (dc = 514 - sdi->ndata; dc; dc--) xchg_spi(0xFF);
    4096:	f8 01       	movw	r30, r16
    4098:	81 81       	ldd	r24, Z+1	; 0x01
    409a:	92 81       	ldd	r25, Z+2	; 0x02
    409c:	02 e0       	ldi	r16, 0x02	; 2
    409e:	12 e0       	ldi	r17, 0x02	; 2
    40a0:	08 1b       	sub	r16, r24
    40a2:	19 0b       	sbc	r17, r25
    40a4:	8f ef       	ldi	r24, 0xFF	; 255
    40a6:	01 15       	cp	r16, r1
    40a8:	11 05       	cpc	r17, r1
    40aa:	09 f4       	brne	.+2      	; 0x40ae <disk_ioctl+0x408>
    40ac:	41 c0       	rjmp	.+130    	; 0x4130 <disk_ioctl+0x48a>
    40ae:	0e 94 dc 1b 	call	0x37b8	; 0x37b8 <xchg_spi>
    40b2:	01 50       	subi	r16, 0x01	; 1
    40b4:	11 09       	sbc	r17, r1
    40b6:	f6 cf       	rjmp	.-20     	; 0x40a4 <disk_ioctl+0x3fe>
		deselect();
		break;

	case ISDIO_MRITE:
		sdi = buff;
		if (send_cmd(CMD49, 0x84000000 | (DWORD)sdi->func << 28 | (DWORD)sdi->addr << 9 | sdi->ndata >> 8) == 0) {
    40b8:	fa 01       	movw	r30, r20
    40ba:	43 81       	ldd	r20, Z+3	; 0x03
    40bc:	54 81       	ldd	r21, Z+4	; 0x04
    40be:	65 81       	ldd	r22, Z+5	; 0x05
    40c0:	76 81       	ldd	r23, Z+6	; 0x06
    40c2:	89 e0       	ldi	r24, 0x09	; 9
    40c4:	44 0f       	add	r20, r20
    40c6:	55 1f       	adc	r21, r21
    40c8:	66 1f       	adc	r22, r22
    40ca:	77 1f       	adc	r23, r23
    40cc:	8a 95       	dec	r24
    40ce:	d1 f7       	brne	.-12     	; 0x40c4 <disk_ioctl+0x41e>
    40d0:	74 68       	ori	r23, 0x84	; 132
    40d2:	80 81       	ld	r24, Z
    40d4:	90 e0       	ldi	r25, 0x00	; 0
    40d6:	a0 e0       	ldi	r26, 0x00	; 0
    40d8:	b0 e0       	ldi	r27, 0x00	; 0
    40da:	2c e1       	ldi	r18, 0x1C	; 28
    40dc:	88 0f       	add	r24, r24
    40de:	99 1f       	adc	r25, r25
    40e0:	aa 1f       	adc	r26, r26
    40e2:	bb 1f       	adc	r27, r27
    40e4:	2a 95       	dec	r18
    40e6:	d1 f7       	brne	.-12     	; 0x40dc <disk_ioctl+0x436>
    40e8:	48 2b       	or	r20, r24
    40ea:	59 2b       	or	r21, r25
    40ec:	6a 2b       	or	r22, r26
    40ee:	7b 2b       	or	r23, r27
    40f0:	82 81       	ldd	r24, Z+2	; 0x02
    40f2:	90 e0       	ldi	r25, 0x00	; 0
    40f4:	a0 e0       	ldi	r26, 0x00	; 0
    40f6:	b0 e0       	ldi	r27, 0x00	; 0
    40f8:	48 2b       	or	r20, r24
    40fa:	59 2b       	or	r21, r25
    40fc:	6a 2b       	or	r22, r26
    40fe:	7b 2b       	or	r23, r27
    4100:	81 e3       	ldi	r24, 0x31	; 49
    4102:	0e 94 4f 1c 	call	0x389e	; 0x389e <send_cmd>
    4106:	81 11       	cpse	r24, r1
    4108:	1a c0       	rjmp	.+52     	; 0x413e <disk_ioctl+0x498>
			xchg_spi(0xFF); xchg_spi(0xFE);
    410a:	8f ef       	ldi	r24, 0xFF	; 255
    410c:	0e 94 dc 1b 	call	0x37b8	; 0x37b8 <xchg_spi>
    4110:	8e ef       	ldi	r24, 0xFE	; 254
    4112:	0e 94 dc 1b 	call	0x37b8	; 0x37b8 <xchg_spi>
			xchg_spi(sdi->ndata);
    4116:	f8 01       	movw	r30, r16
    4118:	81 81       	ldd	r24, Z+1	; 0x01
    411a:	0e 94 dc 1b 	call	0x37b8	; 0x37b8 <xchg_spi>
    411e:	01 e0       	ldi	r16, 0x01	; 1
    4120:	12 e0       	ldi	r17, 0x02	; 2
			for (dc = 513; dc; dc--) xchg_spi(0xFF);
    4122:	8f ef       	ldi	r24, 0xFF	; 255
    4124:	0e 94 dc 1b 	call	0x37b8	; 0x37b8 <xchg_spi>
    4128:	01 50       	subi	r16, 0x01	; 1
    412a:	11 09       	sbc	r17, r1
    412c:	d1 f7       	brne	.-12     	; 0x4122 <disk_ioctl+0x47c>
			if ((xchg_spi(0xFF) & 0x1F) == 0x05) res = RES_OK;
    412e:	8f ef       	ldi	r24, 0xFF	; 255
    4130:	0e 94 dc 1b 	call	0x37b8	; 0x37b8 <xchg_spi>
	UINT dc;
#endif

	if (Stat & STA_NOINIT) return RES_NOTRDY;

	res = RES_ERROR;
    4134:	8f 71       	andi	r24, 0x1F	; 31
    4136:	11 e0       	ldi	r17, 0x01	; 1
    4138:	85 30       	cpi	r24, 0x05	; 5
    413a:	11 f4       	brne	.+4      	; 0x4140 <disk_ioctl+0x49a>
    413c:	54 ce       	rjmp	.-856    	; 0x3de6 <disk_ioctl+0x140>
    413e:	11 e0       	ldi	r17, 0x01	; 1
			xchg_spi(0xFF); xchg_spi(0xFE);
			xchg_spi(sdi->ndata);
			for (dc = 513; dc; dc--) xchg_spi(0xFF);
			if ((xchg_spi(0xFF) & 0x1F) == 0x05) res = RES_OK;
		}
		deselect();
    4140:	0e 94 e2 1b 	call	0x37c4	; 0x37c4 <deselect>
		break;
    4144:	03 c0       	rjmp	.+6      	; 0x414c <disk_ioctl+0x4a6>
	SDIO_CTRL *sdi;
	BYTE rc, *bp;
	UINT dc;
#endif

	if (Stat & STA_NOINIT) return RES_NOTRDY;
    4146:	13 e0       	ldi	r17, 0x03	; 3
    4148:	01 c0       	rjmp	.+2      	; 0x414c <disk_ioctl+0x4a6>
		}
		deselect();
		break;
#endif
	default:
		res = RES_PARERR;
    414a:	14 e0       	ldi	r17, 0x04	; 4
	}

	return res;
}
    414c:	81 2f       	mov	r24, r17
    414e:	60 96       	adiw	r28, 0x10	; 16
    4150:	e8 e0       	ldi	r30, 0x08	; 8
    4152:	0c 94 06 29 	jmp	0x520c	; 0x520c <__epilogue_restores__+0x14>

00004156 <disk_timerproc>:
{
	BYTE b;
	UINT n;


	b = Timer1;				/* 100Hz decrement timer */
    4156:	80 91 49 04 	lds	r24, 0x0449	; 0x800449 <Timer1>
	if (b) Timer1 = --b;
    415a:	88 23       	and	r24, r24
    415c:	19 f0       	breq	.+6      	; 0x4164 <disk_timerproc+0xe>
    415e:	81 50       	subi	r24, 0x01	; 1
    4160:	80 93 49 04 	sts	0x0449, r24	; 0x800449 <Timer1>
	n = Timer2;
    4164:	80 91 47 04 	lds	r24, 0x0447	; 0x800447 <Timer2>
    4168:	90 91 48 04 	lds	r25, 0x0448	; 0x800448 <Timer2+0x1>
	if (n) Timer2 = --n;
    416c:	00 97       	sbiw	r24, 0x00	; 0
    416e:	29 f0       	breq	.+10     	; 0x417a <disk_timerproc+0x24>
    4170:	01 97       	sbiw	r24, 0x01	; 1
    4172:	90 93 48 04 	sts	0x0448, r25	; 0x800448 <Timer2+0x1>
    4176:	80 93 47 04 	sts	0x0447, r24	; 0x800447 <Timer2>

	b = Stat;
    417a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
/*-----------------------------------------------------------------------*/

DSTATUS disk_status (BYTE pdrv)
{
	if (pdrv) return STA_NOINIT; /* Supports only drive 0 */
	return Stat;
    417e:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
	if (b) Timer1 = --b;
	n = Timer2;
	if (n) Timer2 = --n;

	b = Stat;
	if (MMC_WP) {				/* Write protected */
    4182:	94 30       	cpi	r25, 0x04	; 4
    4184:	11 f4       	brne	.+4      	; 0x418a <disk_timerproc+0x34>
		b |= STA_PROTECT;
    4186:	84 60       	ori	r24, 0x04	; 4
    4188:	01 c0       	rjmp	.+2      	; 0x418c <disk_timerproc+0x36>
	} else {					/* Write enabled */
		b &= ~STA_PROTECT;
    418a:	8b 7f       	andi	r24, 0xFB	; 251
	}
	if (MMC_CD) {				/* Card inserted */
    418c:	1f 9b       	sbis	0x03, 7	; 3
    418e:	02 c0       	rjmp	.+4      	; 0x4194 <disk_timerproc+0x3e>
		b &= ~STA_NODISK;
    4190:	8d 7f       	andi	r24, 0xFD	; 253
    4192:	01 c0       	rjmp	.+2      	; 0x4196 <disk_timerproc+0x40>
	} else {					/* Socket empty */
		b |= (STA_NODISK | STA_NOINIT);
    4194:	83 60       	ori	r24, 0x03	; 3
	}
	Stat = b;				/* Update MMC status */
    4196:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
    419a:	08 95       	ret

0000419c <sdInit>:
/************************************************************************
Initializes interrupt, SD_DET pin connected to DET.
************************************************************************/
void sdInit(void) {
	// Set SD card-reader DET to input, activate pull-up resistance.
	SD_DDR &= ~(1<<SD_DET);
    419c:	27 98       	cbi	0x04, 7	; 4
	SD_PORT |= (1<<SD_DET);
    419e:	2f 9a       	sbi	0x05, 7	; 5
	
	// Start 100Hz system timer with TC0
	OCR0A = F_CPU / 1024 / 100 - 1;
    41a0:	8d e4       	ldi	r24, 0x4D	; 77
    41a2:	87 bd       	out	0x27, r24	; 39
	TCCR0A = (1<<WGM01);
    41a4:	82 e0       	ldi	r24, 0x02	; 2
    41a6:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 0b101;
    41a8:	95 e0       	ldi	r25, 0x05	; 5
    41aa:	95 bd       	out	0x25, r25	; 37
	TIMSK0 = (1<<OCIE0A);
    41ac:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
    41b0:	08 95       	ret

000041b2 <sdCardInserted>:
Checks if the SD-card is inserted or not.

Return:	true or false depending on if inserted or not.
************************************************************************/
bool sdCardInserted(void) {
	return bit_is_set(SD_PIN, SD_DET);
    41b2:	83 b1       	in	r24, 0x03	; 3
}
    41b4:	88 1f       	adc	r24, r24
    41b6:	88 27       	eor	r24, r24
    41b8:	88 1f       	adc	r24, r24
    41ba:	08 95       	ret

000041bc <sdCardMount>:
/************************************************************************
Mounts the SD-card to the default drive.
************************************************************************/
void sdCardMount(void) {
	// Mount to the default drive
	f_mount(&FatFs, "", 1);
    41bc:	41 e0       	ldi	r20, 0x01	; 1
    41be:	6d e7       	ldi	r22, 0x7D	; 125
    41c0:	72 e0       	ldi	r23, 0x02	; 2
    41c2:	86 e0       	ldi	r24, 0x06	; 6
    41c4:	95 e0       	ldi	r25, 0x05	; 5
    41c6:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <f_mount>
    41ca:	08 95       	ret

000041cc <sdCardWrite>:
exist it creates it.

Input:	The file name of file to write to, the data that should be 
		written to the file.
************************************************************************/
void sdCardWrite(const char *fileName, char *str, uint64_t ms) {
    41cc:	a6 e2       	ldi	r26, 0x26	; 38
    41ce:	b0 e0       	ldi	r27, 0x00	; 0
    41d0:	ec ee       	ldi	r30, 0xEC	; 236
    41d2:	f0 e2       	ldi	r31, 0x20	; 32
    41d4:	0c 94 e0 28 	jmp	0x51c0	; 0x51c0 <__prologue_saves__>
    41d8:	6d a3       	std	Y+37, r22	; 0x25
    41da:	7e a3       	std	Y+38, r23	; 0x26
    41dc:	17 01       	movw	r2, r14
    41de:	28 01       	movw	r4, r16
    41e0:	39 01       	movw	r6, r18
    41e2:	4b a3       	std	Y+35, r20	; 0x23
    41e4:	5c a3       	std	Y+36, r21	; 0x24
	FIL fil;
	
	// Open/create and open the file to read, append to end
	f_open(&fil, fileName, FA_OPEN_APPEND | FA_WRITE);
    41e6:	42 e3       	ldi	r20, 0x32	; 50
    41e8:	bc 01       	movw	r22, r24
    41ea:	ce 01       	movw	r24, r28
    41ec:	01 96       	adiw	r24, 0x01	; 1
    41ee:	4c 01       	movw	r8, r24
    41f0:	0e 94 36 10 	call	0x206c	; 0x206c <f_open>
	
	// Print data
	f_printf(&fil, "%s; %d:%02d:%02d\n", str, (uint16_t) (ms/3600000), 
    41f4:	88 ee       	ldi	r24, 0xE8	; 232
    41f6:	a8 2e       	mov	r10, r24
    41f8:	93 e0       	ldi	r25, 0x03	; 3
    41fa:	b9 2e       	mov	r11, r25
    41fc:	c1 2c       	mov	r12, r1
    41fe:	d1 2c       	mov	r13, r1
    4200:	e1 2c       	mov	r14, r1
    4202:	f1 2c       	mov	r15, r1
    4204:	00 e0       	ldi	r16, 0x00	; 0
    4206:	10 e0       	ldi	r17, 0x00	; 0
    4208:	91 01       	movw	r18, r2
    420a:	a2 01       	movw	r20, r4
    420c:	b3 01       	movw	r22, r6
    420e:	8b a1       	ldd	r24, Y+35	; 0x23
    4210:	9c a1       	ldd	r25, Y+36	; 0x24
    4212:	0e 94 83 28 	call	0x5106	; 0x5106 <__udivdi3>
    4216:	82 2f       	mov	r24, r18
    4218:	6c e3       	ldi	r22, 0x3C	; 60
    421a:	0e 94 42 28 	call	0x5084	; 0x5084 <__udivmodqi4>
    421e:	1f 92       	push	r1
    4220:	9f 93       	push	r25
    4222:	20 e6       	ldi	r18, 0x60	; 96
    4224:	a2 2e       	mov	r10, r18
    4226:	3a ee       	ldi	r19, 0xEA	; 234
    4228:	b3 2e       	mov	r11, r19
    422a:	91 01       	movw	r18, r2
    422c:	a2 01       	movw	r20, r4
    422e:	b3 01       	movw	r22, r6
    4230:	8b a1       	ldd	r24, Y+35	; 0x23
    4232:	9c a1       	ldd	r25, Y+36	; 0x24
    4234:	0e 94 83 28 	call	0x5106	; 0x5106 <__udivdi3>
    4238:	ec e3       	ldi	r30, 0x3C	; 60
    423a:	ae 2e       	mov	r10, r30
    423c:	b1 2c       	mov	r11, r1
    423e:	0e 94 81 28 	call	0x5102	; 0x5102 <__umoddi3>
    4242:	3f 93       	push	r19
    4244:	2f 93       	push	r18
    4246:	f0 e8       	ldi	r31, 0x80	; 128
    4248:	af 2e       	mov	r10, r31
    424a:	ae ee       	ldi	r26, 0xEE	; 238
    424c:	ba 2e       	mov	r11, r26
    424e:	b6 e3       	ldi	r27, 0x36	; 54
    4250:	cb 2e       	mov	r12, r27
    4252:	91 01       	movw	r18, r2
    4254:	a2 01       	movw	r20, r4
    4256:	b3 01       	movw	r22, r6
    4258:	8b a1       	ldd	r24, Y+35	; 0x23
    425a:	9c a1       	ldd	r25, Y+36	; 0x24
    425c:	0e 94 83 28 	call	0x5106	; 0x5106 <__udivdi3>
    4260:	3f 93       	push	r19
    4262:	2f 93       	push	r18
    4264:	9e a1       	ldd	r25, Y+38	; 0x26
    4266:	9f 93       	push	r25
    4268:	8d a1       	ldd	r24, Y+37	; 0x25
    426a:	8f 93       	push	r24
    426c:	8c e6       	ldi	r24, 0x6C	; 108
    426e:	92 e0       	ldi	r25, 0x02	; 2
    4270:	9f 93       	push	r25
    4272:	8f 93       	push	r24
    4274:	9f 92       	push	r9
    4276:	8f 92       	push	r8
    4278:	0e 94 15 14 	call	0x282a	; 0x282a <f_printf>
			(uint8_t) ((ms/60000) % 60), (uint8_t) (ms/1000) % 60);
	
	// Close the file
	f_close(&fil);
    427c:	c4 01       	movw	r24, r8
    427e:	0e 94 fb 13 	call	0x27f6	; 0x27f6 <f_close>
}
    4282:	0f b6       	in	r0, 0x3f	; 63
    4284:	f8 94       	cli
    4286:	de bf       	out	0x3e, r29	; 62
    4288:	0f be       	out	0x3f, r0	; 63
    428a:	cd bf       	out	0x3d, r28	; 61
    428c:	a6 96       	adiw	r28, 0x26	; 38
    428e:	e2 e1       	ldi	r30, 0x12	; 18
    4290:	0c 94 fc 28 	jmp	0x51f8	; 0x51f8 <__epilogue_restores__>

00004294 <spiInit>:

/*************** Function definition ***************/
/************************************************************************
Sets the different pins to outputs and initializes the SPI interface.
************************************************************************/
void spiInit(void) {
    4294:	0f 93       	push	r16
    4296:	cf 93       	push	r28
	// Set SS_SD, SS_OLED, MOSI, SCK and RS_OLED pins to output
	SPI_DDR |= (1<<SPI_SS_SD) | (1<<SPI_SS_OLED) | (1<<SPI_MOSI) | (1<<SPI_SCK) | (1<<SPI_RS_OLED);
    4298:	84 b1       	in	r24, 0x04	; 4
    429a:	8f 62       	ori	r24, 0x2F	; 47
    429c:	84 b9       	out	0x04, r24	; 4
	
	// Enable, set master
	SPCR |= (1<<SPE) | (1<<MSTR);
    429e:	8c b5       	in	r24, 0x2c	; 44
    42a0:	80 65       	ori	r24, 0x50	; 80
    42a2:	8c bd       	out	0x2c, r24	; 44
	
	// Set SPI-mode 0
	SPCR &= ~((1<<CPOL) | (1<<CPHA));
    42a4:	8c b5       	in	r24, 0x2c	; 44
    42a6:	83 7f       	andi	r24, 0xF3	; 243
    42a8:	8c bd       	out	0x2c, r24	; 44
	
	// Select minimal prescaler (max system speed), init u8g SPI
	CLKPR = 0x80;
    42aa:	e1 e6       	ldi	r30, 0x61	; 97
    42ac:	f0 e0       	ldi	r31, 0x00	; 0
    42ae:	80 e8       	ldi	r24, 0x80	; 128
    42b0:	80 83       	st	Z, r24
	CLKPR = 0x00;
    42b2:	10 82       	st	Z, r1
	u8g_InitHWSPI(&u8g, &u8g_dev_ssd1306_128x64_hw_spi, PN(1, SPI_SS_OLED), PN(1, SPI_RS_OLED), U8G_PIN_NONE);
    42b4:	61 e0       	ldi	r22, 0x01	; 1
    42b6:	81 e0       	ldi	r24, 0x01	; 1
    42b8:	0e 94 b1 22 	call	0x4562	; 0x4562 <u8g_Pin>
    42bc:	c8 2f       	mov	r28, r24
    42be:	62 e0       	ldi	r22, 0x02	; 2
    42c0:	81 e0       	ldi	r24, 0x01	; 1
    42c2:	0e 94 b1 22 	call	0x4562	; 0x4562 <u8g_Pin>
    42c6:	0f ef       	ldi	r16, 0xFF	; 255
    42c8:	2c 2f       	mov	r18, r28
    42ca:	48 2f       	mov	r20, r24
    42cc:	61 e0       	ldi	r22, 0x01	; 1
    42ce:	71 e0       	ldi	r23, 0x01	; 1
    42d0:	8f ec       	ldi	r24, 0xCF	; 207
    42d2:	94 e0       	ldi	r25, 0x04	; 4
    42d4:	0e 94 b5 26 	call	0x4d6a	; 0x4d6a <u8g_InitHWSPI>
}
    42d8:	cf 91       	pop	r28
    42da:	0f 91       	pop	r16
    42dc:	08 95       	ret

000042de <u8g_IsBBXIntersection>:
  }
}


uint8_t u8g_IsBBXIntersection(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t w, u8g_uint_t h)
{
    42de:	0f 93       	push	r16
    42e0:	fc 01       	movw	r30, r24
  register u8g_uint_t tmp;
  tmp = y;
  tmp += h;
  tmp--;
    42e2:	01 50       	subi	r16, 0x01	; 1
    42e4:	04 0f       	add	r16, r20
  if ( u8g_is_intersection_decision_tree(u8g->current_page.y0, u8g->current_page.y1, y, tmp) == 0 )
    42e6:	84 a9       	ldd	r24, Z+52	; 0x34
//static uint8_t u8g_is_intersection_decision_tree(u8g_uint_t a0, u8g_uint_t a1, u8g_uint_t v0, u8g_uint_t v1) U8G_ALWAYS_INLINE;
static uint8_t U8G_ALWAYS_INLINE u8g_is_intersection_decision_tree(u8g_uint_t a0, u8g_uint_t a1, u8g_uint_t v0, u8g_uint_t v1) 
{
  /* surprisingly the macro leads to larger code */
  /* return U8G_IS_INTERSECTION_MACRO(a0,a1,v0,v1); */
  if ( v0 <= a1 )
    42e8:	96 a9       	ldd	r25, Z+54	; 0x36
    42ea:	94 17       	cp	r25, r20
    42ec:	18 f0       	brcs	.+6      	; 0x42f4 <u8g_IsBBXIntersection+0x16>
  {
    if ( v1 >= a0 )
    42ee:	08 17       	cp	r16, r24
    42f0:	28 f4       	brcc	.+10     	; 0x42fc <u8g_IsBBXIntersection+0x1e>
    42f2:	02 c0       	rjmp	.+4      	; 0x42f8 <u8g_IsBBXIntersection+0x1a>
      }
    }
  }
  else
  {
    if ( v1 >= a0 )
    42f4:	08 17       	cp	r16, r24
    42f6:	50 f0       	brcs	.+20     	; 0x430c <u8g_IsBBXIntersection+0x2e>
    {
      if ( v0 > v1 )
    42f8:	04 17       	cp	r16, r20
    42fa:	40 f4       	brcc	.+16     	; 0x430c <u8g_IsBBXIntersection+0x2e>
  if ( u8g_is_intersection_decision_tree(u8g->current_page.y0, u8g->current_page.y1, y, tmp) == 0 )
    return 0; 
  
  tmp = x;
  tmp += w;
  tmp--;
    42fc:	21 50       	subi	r18, 0x01	; 1
    42fe:	26 0f       	add	r18, r22
  return u8g_is_intersection_decision_tree(u8g->current_page.x0, u8g->current_page.x1, x, tmp);
    4300:	83 a9       	ldd	r24, Z+51	; 0x33
//static uint8_t u8g_is_intersection_decision_tree(u8g_uint_t a0, u8g_uint_t a1, u8g_uint_t v0, u8g_uint_t v1) U8G_ALWAYS_INLINE;
static uint8_t U8G_ALWAYS_INLINE u8g_is_intersection_decision_tree(u8g_uint_t a0, u8g_uint_t a1, u8g_uint_t v0, u8g_uint_t v1) 
{
  /* surprisingly the macro leads to larger code */
  /* return U8G_IS_INTERSECTION_MACRO(a0,a1,v0,v1); */
  if ( v0 <= a1 )
    4302:	95 a9       	ldd	r25, Z+53	; 0x35
    4304:	96 17       	cp	r25, r22
    4306:	20 f4       	brcc	.+8      	; 0x4310 <u8g_IsBBXIntersection+0x32>
      }
    }
  }
  else
  {
    if ( v1 >= a0 )
    4308:	28 17       	cp	r18, r24
    430a:	20 f4       	brcc	.+8      	; 0x4314 <u8g_IsBBXIntersection+0x36>
  register u8g_uint_t tmp;
  tmp = y;
  tmp += h;
  tmp--;
  if ( u8g_is_intersection_decision_tree(u8g->current_page.y0, u8g->current_page.y1, y, tmp) == 0 )
    return 0; 
    430c:	80 e0       	ldi	r24, 0x00	; 0
    430e:	07 c0       	rjmp	.+14     	; 0x431e <u8g_IsBBXIntersection+0x40>
{
  /* surprisingly the macro leads to larger code */
  /* return U8G_IS_INTERSECTION_MACRO(a0,a1,v0,v1); */
  if ( v0 <= a1 )
  {
    if ( v1 >= a0 )
    4310:	28 17       	cp	r18, r24
    4312:	20 f4       	brcc	.+8      	; 0x431c <u8g_IsBBXIntersection+0x3e>
  register u8g_uint_t tmp;
  tmp = y;
  tmp += h;
  tmp--;
  if ( u8g_is_intersection_decision_tree(u8g->current_page.y0, u8g->current_page.y1, y, tmp) == 0 )
    return 0; 
    4314:	81 e0       	ldi	r24, 0x01	; 1
    4316:	26 17       	cp	r18, r22
    4318:	10 f0       	brcs	.+4      	; 0x431e <u8g_IsBBXIntersection+0x40>
    431a:	f8 cf       	rjmp	.-16     	; 0x430c <u8g_IsBBXIntersection+0x2e>
  /* return U8G_IS_INTERSECTION_MACRO(a0,a1,v0,v1); */
  if ( v0 <= a1 )
  {
    if ( v1 >= a0 )
    {
      return 1;
    431c:	81 e0       	ldi	r24, 0x01	; 1
  
  tmp = x;
  tmp += w;
  tmp--;
  return u8g_is_intersection_decision_tree(u8g->current_page.x0, u8g->current_page.x1, x, tmp);
}
    431e:	0f 91       	pop	r16
    4320:	08 95       	ret

00004322 <u8g_InitCom>:
}

uint8_t u8g_WriteSequenceP(u8g_t *u8g, u8g_dev_t *dev, uint8_t cnt, const uint8_t *seq)
{
  return dev->com_fn(u8g, U8G_COM_MSG_WRITE_SEQ_P, cnt, (void *)seq);
}
    4322:	db 01       	movw	r26, r22
    4324:	14 96       	adiw	r26, 0x04	; 4
    4326:	ed 91       	ld	r30, X+
    4328:	fc 91       	ld	r31, X
    432a:	15 97       	sbiw	r26, 0x05	; 5
    432c:	20 e0       	ldi	r18, 0x00	; 0
    432e:	30 e0       	ldi	r19, 0x00	; 0
    4330:	61 e0       	ldi	r22, 0x01	; 1
    4332:	09 95       	icall
    4334:	08 95       	ret

00004336 <u8g_SetChipSelect>:
    4336:	db 01       	movw	r26, r22
    4338:	14 96       	adiw	r26, 0x04	; 4
    433a:	ed 91       	ld	r30, X+
    433c:	fc 91       	ld	r31, X
    433e:	15 97       	sbiw	r26, 0x05	; 5
    4340:	20 e0       	ldi	r18, 0x00	; 0
    4342:	30 e0       	ldi	r19, 0x00	; 0
    4344:	63 e0       	ldi	r22, 0x03	; 3
    4346:	09 95       	icall
    4348:	08 95       	ret

0000434a <u8g_SetResetLow>:
    434a:	db 01       	movw	r26, r22
    434c:	14 96       	adiw	r26, 0x04	; 4
    434e:	ed 91       	ld	r30, X+
    4350:	fc 91       	ld	r31, X
    4352:	15 97       	sbiw	r26, 0x05	; 5
    4354:	20 e0       	ldi	r18, 0x00	; 0
    4356:	30 e0       	ldi	r19, 0x00	; 0
    4358:	40 e0       	ldi	r20, 0x00	; 0
    435a:	64 e0       	ldi	r22, 0x04	; 4
    435c:	09 95       	icall
    435e:	08 95       	ret

00004360 <u8g_SetResetHigh>:
    4360:	db 01       	movw	r26, r22
    4362:	14 96       	adiw	r26, 0x04	; 4
    4364:	ed 91       	ld	r30, X+
    4366:	fc 91       	ld	r31, X
    4368:	15 97       	sbiw	r26, 0x05	; 5
    436a:	20 e0       	ldi	r18, 0x00	; 0
    436c:	30 e0       	ldi	r19, 0x00	; 0
    436e:	41 e0       	ldi	r20, 0x01	; 1
    4370:	64 e0       	ldi	r22, 0x04	; 4
    4372:	09 95       	icall
    4374:	08 95       	ret

00004376 <u8g_SetAddress>:
    4376:	db 01       	movw	r26, r22
    4378:	14 96       	adiw	r26, 0x04	; 4
    437a:	ed 91       	ld	r30, X+
    437c:	fc 91       	ld	r31, X
    437e:	15 97       	sbiw	r26, 0x05	; 5
    4380:	20 e0       	ldi	r18, 0x00	; 0
    4382:	30 e0       	ldi	r19, 0x00	; 0
    4384:	62 e0       	ldi	r22, 0x02	; 2
    4386:	09 95       	icall
    4388:	08 95       	ret

0000438a <u8g_WriteByte>:
    438a:	db 01       	movw	r26, r22
    438c:	14 96       	adiw	r26, 0x04	; 4
    438e:	ed 91       	ld	r30, X+
    4390:	fc 91       	ld	r31, X
    4392:	15 97       	sbiw	r26, 0x05	; 5
    4394:	20 e0       	ldi	r18, 0x00	; 0
    4396:	30 e0       	ldi	r19, 0x00	; 0
    4398:	65 e0       	ldi	r22, 0x05	; 5
    439a:	09 95       	icall
    439c:	08 95       	ret

0000439e <u8g_WriteSequence>:
    439e:	db 01       	movw	r26, r22
    43a0:	14 96       	adiw	r26, 0x04	; 4
    43a2:	ed 91       	ld	r30, X+
    43a4:	fc 91       	ld	r31, X
    43a6:	15 97       	sbiw	r26, 0x05	; 5
    43a8:	66 e0       	ldi	r22, 0x06	; 6
    43aa:	09 95       	icall
    43ac:	08 95       	ret

000043ae <u8g_WriteEscSeqP>:
#define U8G_ESC_255 255, 255
#define U8G_ESC_RST(x) 255, (0xc0 | ((x)&0x0f))

*/
uint8_t u8g_WriteEscSeqP(u8g_t *u8g, u8g_dev_t *dev, const uint8_t *esc_seq)
{
    43ae:	a0 e0       	ldi	r26, 0x00	; 0
    43b0:	b0 e0       	ldi	r27, 0x00	; 0
    43b2:	ed ed       	ldi	r30, 0xDD	; 221
    43b4:	f1 e2       	ldi	r31, 0x21	; 33
    43b6:	0c 94 ea 28 	jmp	0x51d4	; 0x51d4 <__prologue_saves__+0x14>
    43ba:	8c 01       	movw	r16, r24
    43bc:	6b 01       	movw	r12, r22
    43be:	7a 01       	movw	r14, r20
  uint8_t is_escape = 0;
    43c0:	80 e0       	ldi	r24, 0x00	; 0
  uint8_t value;
  for(;;)
  {
    value = u8g_pgm_read(esc_seq);
    43c2:	f7 01       	movw	r30, r14
    43c4:	c4 91       	lpm	r28, Z
    if ( is_escape == 0 )
    43c6:	81 11       	cpse	r24, r1
    43c8:	0a c0       	rjmp	.+20     	; 0x43de <u8g_WriteEscSeqP+0x30>
    {
      if ( value != 255 )
    43ca:	cf 3f       	cpi	r28, 0xFF	; 255
    43cc:	e9 f1       	breq	.+122    	; 0x4448 <u8g_WriteEscSeqP+0x9a>
      {
        if ( u8g_WriteByte(u8g, dev, value) == 0 )
    43ce:	4c 2f       	mov	r20, r28
    43d0:	b6 01       	movw	r22, r12
    43d2:	c8 01       	movw	r24, r16
    43d4:	0e 94 c5 21 	call	0x438a	; 0x438a <u8g_WriteByte>
    43d8:	81 11       	cpse	r24, r1
    43da:	2f c0       	rjmp	.+94     	; 0x443a <u8g_WriteEscSeqP+0x8c>
    43dc:	3a c0       	rjmp	.+116    	; 0x4452 <u8g_WriteEscSeqP+0xa4>
        is_escape = 1;
      }
    }
    else
    {
      if ( value == 255 )
    43de:	cf 3f       	cpi	r28, 0xFF	; 255
    43e0:	11 f4       	brne	.+4      	; 0x43e6 <u8g_WriteEscSeqP+0x38>
      {
        if ( u8g_WriteByte(u8g, dev, value) == 0 )
    43e2:	4f ef       	ldi	r20, 0xFF	; 255
    43e4:	f5 cf       	rjmp	.-22     	; 0x43d0 <u8g_WriteEscSeqP+0x22>
          return 0;
      }
      else if ( value == 254 )
    43e6:	ce 3f       	cpi	r28, 0xFE	; 254
    43e8:	b1 f1       	breq	.+108    	; 0x4456 <u8g_WriteEscSeqP+0xa8>
      {
        break;
      }
      else if ( value >= 0x0f0 )
    43ea:	c0 3f       	cpi	r28, 0xF0	; 240
    43ec:	30 f5       	brcc	.+76     	; 0x443a <u8g_WriteEscSeqP+0x8c>
      {
        /* not yet used, do nothing */
      }
      else if ( value >= 0xe0  )
    43ee:	c0 3e       	cpi	r28, 0xE0	; 224
    43f0:	38 f0       	brcs	.+14     	; 0x4400 <u8g_WriteEscSeqP+0x52>
      {
        u8g_SetAddress(u8g, dev, value & 0x0f);
    43f2:	4c 2f       	mov	r20, r28
    43f4:	4f 70       	andi	r20, 0x0F	; 15
    43f6:	b6 01       	movw	r22, r12
    43f8:	c8 01       	movw	r24, r16
    43fa:	0e 94 bb 21 	call	0x4376	; 0x4376 <u8g_SetAddress>
    43fe:	1d c0       	rjmp	.+58     	; 0x443a <u8g_WriteEscSeqP+0x8c>
      }
      else if ( value >= 0xd0 )
    4400:	c0 3d       	cpi	r28, 0xD0	; 208
    4402:	38 f0       	brcs	.+14     	; 0x4412 <u8g_WriteEscSeqP+0x64>
      {
        u8g_SetChipSelect(u8g, dev, value & 0x0f);
    4404:	4c 2f       	mov	r20, r28
    4406:	4f 70       	andi	r20, 0x0F	; 15
    4408:	b6 01       	movw	r22, r12
    440a:	c8 01       	movw	r24, r16
    440c:	0e 94 9b 21 	call	0x4336	; 0x4336 <u8g_SetChipSelect>
    4410:	14 c0       	rjmp	.+40     	; 0x443a <u8g_WriteEscSeqP+0x8c>
      }
      else if ( value >= 0xc0 )
    4412:	c0 3c       	cpi	r28, 0xC0	; 192
    4414:	a0 f0       	brcs	.+40     	; 0x443e <u8g_WriteEscSeqP+0x90>
      {
        u8g_SetResetLow(u8g, dev);
    4416:	b6 01       	movw	r22, r12
    4418:	c8 01       	movw	r24, r16
    441a:	0e 94 a5 21 	call	0x434a	; 0x434a <u8g_SetResetLow>
        value &= 0x0f;
        value <<= 4;
    441e:	c2 95       	swap	r28
    4420:	c0 7f       	andi	r28, 0xF0	; 240
        value+=2;
        u8g_Delay(value);
    4422:	ce 5f       	subi	r28, 0xFE	; 254
    4424:	d0 e0       	ldi	r29, 0x00	; 0
    4426:	ce 01       	movw	r24, r28
    4428:	0e 94 0e 23 	call	0x461c	; 0x461c <u8g_Delay>
        u8g_SetResetHigh(u8g, dev);
    442c:	b6 01       	movw	r22, r12
    442e:	c8 01       	movw	r24, r16
    4430:	0e 94 b0 21 	call	0x4360	; 0x4360 <u8g_SetResetHigh>
        u8g_Delay(value);
    4434:	ce 01       	movw	r24, r28
    4436:	0e 94 0e 23 	call	0x461c	; 0x461c <u8g_Delay>
      }
      else if ( value <= 127 )
      {
        u8g_Delay(value);
      }
      is_escape = 0;
    443a:	80 e0       	ldi	r24, 0x00	; 0
    443c:	06 c0       	rjmp	.+12     	; 0x444a <u8g_WriteEscSeqP+0x9c>
      else if ( value >= 0xbe )
      {
	/* not yet implemented */
        /* u8g_SetVCC(u8g, dev, value & 0x01); */
      }
      else if ( value <= 127 )
    443e:	c7 fd       	sbrc	r28, 7
    4440:	fc cf       	rjmp	.-8      	; 0x443a <u8g_WriteEscSeqP+0x8c>
      {
        u8g_Delay(value);
    4442:	8c 2f       	mov	r24, r28
    4444:	90 e0       	ldi	r25, 0x00	; 0
    4446:	f7 cf       	rjmp	.-18     	; 0x4436 <u8g_WriteEscSeqP+0x88>
        if ( u8g_WriteByte(u8g, dev, value) == 0 )
          return 0;
      }
      else
      {
        is_escape = 1;
    4448:	81 e0       	ldi	r24, 0x01	; 1
      {
        u8g_Delay(value);
      }
      is_escape = 0;
    }
    esc_seq++;
    444a:	ff ef       	ldi	r31, 0xFF	; 255
    444c:	ef 1a       	sub	r14, r31
    444e:	ff 0a       	sbc	r15, r31
  }
    4450:	b8 cf       	rjmp	.-144    	; 0x43c2 <u8g_WriteEscSeqP+0x14>
    if ( is_escape == 0 )
    {
      if ( value != 255 )
      {
        if ( u8g_WriteByte(u8g, dev, value) == 0 )
          return 0;
    4452:	80 e0       	ldi	r24, 0x00	; 0
    4454:	01 c0       	rjmp	.+2      	; 0x4458 <u8g_WriteEscSeqP+0xaa>
      }
      is_escape = 0;
    }
    esc_seq++;
  }
  return 1;
    4456:	81 e0       	ldi	r24, 0x01	; 1
}
    4458:	cd b7       	in	r28, 0x3d	; 61
    445a:	de b7       	in	r29, 0x3e	; 62
    445c:	e8 e0       	ldi	r30, 0x08	; 8
    445e:	0c 94 06 29 	jmp	0x520c	; 0x520c <__epilogue_restores__+0x14>

00004462 <u8g_atmega_spi_out>:

static uint8_t u8g_atmega_spi_out(uint8_t data)
{
  /* unsigned char x = 100; */
  /* send data */
  SPDR = data;
    4462:	8e bd       	out	0x2e, r24	; 46
  /* wait for transmission */
  while (!(SPSR & (1<<SPIF))) 
    4464:	0d b4       	in	r0, 0x2d	; 45
    4466:	07 fe       	sbrs	r0, 7
    4468:	fd cf       	rjmp	.-6      	; 0x4464 <u8g_atmega_spi_out+0x2>
    ;
  /* clear the SPIF flag by reading SPDR */
  return  SPDR;
    446a:	8e b5       	in	r24, 0x2e	; 46
}
    446c:	08 95       	ret

0000446e <u8g_com_atmega_hw_spi_fn>:


uint8_t u8g_com_atmega_hw_spi_fn(u8g_t *u8g, uint8_t msg, uint8_t arg_val, void *arg_ptr)
{
    446e:	ef 92       	push	r14
    4470:	ff 92       	push	r15
    4472:	0f 93       	push	r16
    4474:	1f 93       	push	r17
    4476:	cf 93       	push	r28
    4478:	8c 01       	movw	r16, r24
    447a:	c4 2f       	mov	r28, r20
    447c:	79 01       	movw	r14, r18
  switch(msg)
    447e:	86 2f       	mov	r24, r22
    4480:	90 e0       	ldi	r25, 0x00	; 0
    4482:	fc 01       	movw	r30, r24
    4484:	31 97       	sbiw	r30, 0x01	; 1
    4486:	e7 30       	cpi	r30, 0x07	; 7
    4488:	f1 05       	cpc	r31, r1
    448a:	08 f0       	brcs	.+2      	; 0x448e <u8g_com_atmega_hw_spi_fn+0x20>
    448c:	4c c0       	rjmp	.+152    	; 0x4526 <u8g_com_atmega_hw_spi_fn+0xb8>
    448e:	ec 5c       	subi	r30, 0xCC	; 204
    4490:	ff 4f       	sbci	r31, 0xFF	; 255
    4492:	0c 94 70 28 	jmp	0x50e0	; 0x50e0 <__tablejump2__>
    case U8G_COM_MSG_STOP:
      break;
    
    case U8G_COM_MSG_INIT:

      u8g_SetPIOutput(u8g, U8G_PI_CS);
    4496:	62 e0       	ldi	r22, 0x02	; 2
    4498:	c8 01       	movw	r24, r16
    449a:	0e 94 fb 22 	call	0x45f6	; 0x45f6 <u8g_SetPIOutput>
      u8g_SetPIOutput(u8g, U8G_PI_A0);
    449e:	61 e0       	ldi	r22, 0x01	; 1
    44a0:	c8 01       	movw	r24, r16
    44a2:	0e 94 fb 22 	call	0x45f6	; 0x45f6 <u8g_SetPIOutput>
      u8g_SetPIOutput(u8g, U8G_PI_RESET);
    44a6:	60 e0       	ldi	r22, 0x00	; 0
    44a8:	c8 01       	movw	r24, r16
    44aa:	0e 94 fb 22 	call	0x45f6	; 0x45f6 <u8g_SetPIOutput>
      
      U8G_ATOMIC_START();
    44ae:	8f b7       	in	r24, 0x3f	; 63
    44b0:	80 93 39 07 	sts	0x0739, r24	; 0x800739 <global_SREG_backup>
    44b4:	f8 94       	cli
      
      DDRB |= _BV(3);          /* D0, MOSI */
    44b6:	23 9a       	sbi	0x04, 3	; 4
      DDRB |= _BV(5);          /* SCK */
    44b8:	25 9a       	sbi	0x04, 5	; 4
      DDRB |= _BV(2);		/* slave select */
    44ba:	22 9a       	sbi	0x04, 2	; 4
    
      PORTB &= ~_BV(3);        /* D0, MOSI = 0 */
    44bc:	2b 98       	cbi	0x05, 3	; 5
      PORTB &= ~_BV(5);        /* SCK = 0 */
    44be:	2d 98       	cbi	0x05, 5	; 5
      
      U8G_ATOMIC_END();
    44c0:	80 91 39 07 	lds	r24, 0x0739	; 0x800739 <global_SREG_backup>
    44c4:	8f bf       	out	0x3f, r24	; 63
      
      u8g_SetPILevel(u8g, U8G_PI_CS, 1);
    44c6:	41 e0       	ldi	r20, 0x01	; 1
    44c8:	62 e0       	ldi	r22, 0x02	; 2
    44ca:	c8 01       	movw	r24, r16
    44cc:	0e 94 04 23 	call	0x4608	; 0x4608 <u8g_SetPILevel>
            0	0		fclk/4    x
            0	1		fclk/16
            1	0		fclk/64      
            1	1		fclk/128
      */
      SPCR = 0;
    44d0:	1c bc       	out	0x2c, r1	; 44
      SPCR =  (1<<SPE) | (1<<MSTR)|(0<<SPR1)|(0<<SPR0)|(0<<CPOL)|(0<<CPHA);
    44d2:	80 e5       	ldi	r24, 0x50	; 80
    44d4:	8c bd       	out	0x2c, r24	; 44
#ifdef U8G_HW_SPI_2X
      SPSR = (1 << SPI2X);  /* double speed, issue 89 */
#endif

      break;
    44d6:	27 c0       	rjmp	.+78     	; 0x4526 <u8g_com_atmega_hw_spi_fn+0xb8>
    
    case U8G_COM_MSG_ADDRESS:                     /* define cmd (arg_val = 0) or data mode (arg_val = 1) */
      u8g_SetPILevel(u8g, U8G_PI_A0, arg_val);
    44d8:	61 e0       	ldi	r22, 0x01	; 1
    44da:	04 c0       	rjmp	.+8      	; 0x44e4 <u8g_com_atmega_hw_spi_fn+0x76>
      break;

    case U8G_COM_MSG_CHIP_SELECT:
      
      if ( arg_val == 0 )
    44dc:	41 11       	cpse	r20, r1
    44de:	06 c0       	rjmp	.+12     	; 0x44ec <u8g_com_atmega_hw_spi_fn+0x7e>
      {
        /* disable */
        u8g_SetPILevel(u8g, U8G_PI_CS, 1);
    44e0:	41 e0       	ldi	r20, 0x01	; 1
    44e2:	62 e0       	ldi	r22, 0x02	; 2
    44e4:	c8 01       	movw	r24, r16
    44e6:	0e 94 04 23 	call	0x4608	; 0x4608 <u8g_SetPILevel>
    44ea:	1d c0       	rjmp	.+58     	; 0x4526 <u8g_com_atmega_hw_spi_fn+0xb8>
      }
      else
      {
        PORTB &= ~_BV(5);        /* SCK = 0 */
    44ec:	2d 98       	cbi	0x05, 5	; 5
        /* enable */
        u8g_SetPILevel(u8g, U8G_PI_CS, 0); /* CS = 0 (low active) */
    44ee:	40 e0       	ldi	r20, 0x00	; 0
    44f0:	f8 cf       	rjmp	.-16     	; 0x44e2 <u8g_com_atmega_hw_spi_fn+0x74>
      }
      
      break;
      
    case U8G_COM_MSG_RESET:
      u8g_SetPILevel(u8g, U8G_PI_RESET, arg_val);
    44f2:	60 e0       	ldi	r22, 0x00	; 0
    44f4:	f7 cf       	rjmp	.-18     	; 0x44e4 <u8g_com_atmega_hw_spi_fn+0x76>
      break;
    
    case U8G_COM_MSG_WRITE_BYTE:
      u8g_atmega_spi_out(arg_val);
    44f6:	84 2f       	mov	r24, r20
    44f8:	0e 94 31 22 	call	0x4462	; 0x4462 <u8g_atmega_spi_out>
      break;
    44fc:	14 c0       	rjmp	.+40     	; 0x4526 <u8g_com_atmega_hw_spi_fn+0xb8>
    
    case U8G_COM_MSG_WRITE_SEQ:
      {
        register uint8_t *ptr = arg_ptr;
        while( arg_val > 0 )
    44fe:	cc 23       	and	r28, r28
    4500:	91 f0       	breq	.+36     	; 0x4526 <u8g_com_atmega_hw_spi_fn+0xb8>
        {
          u8g_atmega_spi_out(*ptr++);
    4502:	f7 01       	movw	r30, r14
    4504:	81 91       	ld	r24, Z+
    4506:	7f 01       	movw	r14, r30
    4508:	0e 94 31 22 	call	0x4462	; 0x4462 <u8g_atmega_spi_out>
          arg_val--;
    450c:	c1 50       	subi	r28, 0x01	; 1
    450e:	f7 cf       	rjmp	.-18     	; 0x44fe <u8g_com_atmega_hw_spi_fn+0x90>
      }
      break;
    case U8G_COM_MSG_WRITE_SEQ_P:
      {
        register uint8_t *ptr = arg_ptr;
        while( arg_val > 0 )
    4510:	cc 23       	and	r28, r28
    4512:	49 f0       	breq	.+18     	; 0x4526 <u8g_com_atmega_hw_spi_fn+0xb8>
        {
          u8g_atmega_spi_out(u8g_pgm_read(ptr));
    4514:	f7 01       	movw	r30, r14
    4516:	84 91       	lpm	r24, Z
    4518:	0e 94 31 22 	call	0x4462	; 0x4462 <u8g_atmega_spi_out>
          ptr++;
    451c:	ff ef       	ldi	r31, 0xFF	; 255
    451e:	ef 1a       	sub	r14, r31
    4520:	ff 0a       	sbc	r15, r31
          arg_val--;
    4522:	c1 50       	subi	r28, 0x01	; 1
    4524:	f5 cf       	rjmp	.-22     	; 0x4510 <u8g_com_atmega_hw_spi_fn+0xa2>
        }
      }
      break;
  }
  return 1;
}
    4526:	81 e0       	ldi	r24, 0x01	; 1
    4528:	cf 91       	pop	r28
    452a:	1f 91       	pop	r17
    452c:	0f 91       	pop	r16
    452e:	ff 90       	pop	r15
    4530:	ef 90       	pop	r14
    4532:	08 95       	ret

00004534 <u8g_get_avr_io_ptr>:
{
  volatile uint8_t * tmp = u8g_get_avr_io_ptr(u8g_avr_pin_P, internal_pin_number>>3);
  if ( ((*tmp) & _BV(internal_pin_number&7))  != 0 )
    return 1;
  return 0;
}
    4534:	a2 e0       	ldi	r26, 0x02	; 2
    4536:	b0 e0       	ldi	r27, 0x00	; 0
    4538:	e0 ea       	ldi	r30, 0xA0	; 160
    453a:	f2 e2       	ldi	r31, 0x22	; 34
    453c:	0c 94 f0 28 	jmp	0x51e0	; 0x51e0 <__prologue_saves__+0x20>
    4540:	86 0f       	add	r24, r22
    4542:	91 1d       	adc	r25, r1
    4544:	86 0f       	add	r24, r22
    4546:	91 1d       	adc	r25, r1
    4548:	42 e0       	ldi	r20, 0x02	; 2
    454a:	50 e0       	ldi	r21, 0x00	; 0
    454c:	bc 01       	movw	r22, r24
    454e:	ce 01       	movw	r24, r28
    4550:	01 96       	adiw	r24, 0x01	; 1
    4552:	0e 94 59 29 	call	0x52b2	; 0x52b2 <memcpy_P>
    4556:	89 81       	ldd	r24, Y+1	; 0x01
    4558:	9a 81       	ldd	r25, Y+2	; 0x02
    455a:	22 96       	adiw	r28, 0x02	; 2
    455c:	e2 e0       	ldi	r30, 0x02	; 2
    455e:	0c 94 0c 29 	jmp	0x5218	; 0x5218 <__epilogue_restores__+0x20>

00004562 <u8g_Pin>:
    4562:	98 e0       	ldi	r25, 0x08	; 8
    4564:	89 9f       	mul	r24, r25
    4566:	60 0d       	add	r22, r0
    4568:	11 24       	eor	r1, r1
    456a:	86 2f       	mov	r24, r22
    456c:	08 95       	ret

0000456e <u8g_SetPinOutput>:
    456e:	cf 93       	push	r28
    4570:	c8 2f       	mov	r28, r24
    4572:	68 2f       	mov	r22, r24
    4574:	66 95       	lsr	r22
    4576:	66 95       	lsr	r22
    4578:	66 95       	lsr	r22
    457a:	8e e7       	ldi	r24, 0x7E	; 126
    457c:	90 e0       	ldi	r25, 0x00	; 0
    457e:	0e 94 9a 22 	call	0x4534	; 0x4534 <u8g_get_avr_io_ptr>
    4582:	fc 01       	movw	r30, r24
    4584:	40 81       	ld	r20, Z
    4586:	c7 70       	andi	r28, 0x07	; 7
    4588:	21 e0       	ldi	r18, 0x01	; 1
    458a:	30 e0       	ldi	r19, 0x00	; 0
    458c:	01 c0       	rjmp	.+2      	; 0x4590 <u8g_SetPinOutput+0x22>
    458e:	22 0f       	add	r18, r18
    4590:	ca 95       	dec	r28
    4592:	ea f7       	brpl	.-6      	; 0x458e <u8g_SetPinOutput+0x20>
    4594:	24 2b       	or	r18, r20
    4596:	20 83       	st	Z, r18
    4598:	cf 91       	pop	r28
    459a:	08 95       	ret

0000459c <u8g_SetPinLevel>:
    459c:	cf 93       	push	r28
    459e:	df 93       	push	r29
    45a0:	c8 2f       	mov	r28, r24
    45a2:	d6 2f       	mov	r29, r22
    45a4:	68 2f       	mov	r22, r24
    45a6:	66 95       	lsr	r22
    45a8:	66 95       	lsr	r22
    45aa:	66 95       	lsr	r22
    45ac:	86 e7       	ldi	r24, 0x76	; 118
    45ae:	90 e0       	ldi	r25, 0x00	; 0
    45b0:	0e 94 9a 22 	call	0x4534	; 0x4534 <u8g_get_avr_io_ptr>
    45b4:	fc 01       	movw	r30, r24
    45b6:	c7 70       	andi	r28, 0x07	; 7
    45b8:	d1 11       	cpse	r29, r1
    45ba:	0e c0       	rjmp	.+28     	; 0x45d8 <u8g_SetPinLevel+0x3c>
    45bc:	9f b7       	in	r25, 0x3f	; 63
    45be:	f8 94       	cli
    45c0:	80 81       	ld	r24, Z
    45c2:	21 e0       	ldi	r18, 0x01	; 1
    45c4:	30 e0       	ldi	r19, 0x00	; 0
    45c6:	01 c0       	rjmp	.+2      	; 0x45ca <u8g_SetPinLevel+0x2e>
    45c8:	22 0f       	add	r18, r18
    45ca:	ca 95       	dec	r28
    45cc:	ea f7       	brpl	.-6      	; 0x45c8 <u8g_SetPinLevel+0x2c>
    45ce:	20 95       	com	r18
    45d0:	28 23       	and	r18, r24
    45d2:	20 83       	st	Z, r18
    45d4:	9f bf       	out	0x3f, r25	; 63
    45d6:	0c c0       	rjmp	.+24     	; 0x45f0 <u8g_SetPinLevel+0x54>
    45d8:	8f b7       	in	r24, 0x3f	; 63
    45da:	f8 94       	cli
    45dc:	90 81       	ld	r25, Z
    45de:	21 e0       	ldi	r18, 0x01	; 1
    45e0:	30 e0       	ldi	r19, 0x00	; 0
    45e2:	01 c0       	rjmp	.+2      	; 0x45e6 <u8g_SetPinLevel+0x4a>
    45e4:	22 0f       	add	r18, r18
    45e6:	ca 95       	dec	r28
    45e8:	ea f7       	brpl	.-6      	; 0x45e4 <u8g_SetPinLevel+0x48>
    45ea:	29 2b       	or	r18, r25
    45ec:	20 83       	st	Z, r18
    45ee:	8f bf       	out	0x3f, r24	; 63
    45f0:	df 91       	pop	r29
    45f2:	cf 91       	pop	r28
    45f4:	08 95       	ret

000045f6 <u8g_SetPIOutput>:
#if defined(U8G_WITH_PINLIST)

void u8g_SetPIOutput(u8g_t *u8g, uint8_t pi)
{
  uint8_t pin;
  pin = u8g->pin_list[pi];
    45f6:	86 0f       	add	r24, r22
    45f8:	91 1d       	adc	r25, r1
    45fa:	fc 01       	movw	r30, r24
    45fc:	83 a1       	ldd	r24, Z+35	; 0x23
  if ( pin != U8G_PIN_NONE )
    45fe:	8f 3f       	cpi	r24, 0xFF	; 255
    4600:	11 f0       	breq	.+4      	; 0x4606 <u8g_SetPIOutput+0x10>
    u8g_SetPinOutput(pin);
    4602:	0e 94 b7 22 	call	0x456e	; 0x456e <u8g_SetPinOutput>
    4606:	08 95       	ret

00004608 <u8g_SetPILevel>:
}

void u8g_SetPILevel(u8g_t *u8g, uint8_t pi, uint8_t level)
{
  uint8_t pin;
  pin = u8g->pin_list[pi];
    4608:	86 0f       	add	r24, r22
    460a:	91 1d       	adc	r25, r1
    460c:	fc 01       	movw	r30, r24
    460e:	83 a1       	ldd	r24, Z+35	; 0x23
  if ( pin != U8G_PIN_NONE )
    4610:	8f 3f       	cpi	r24, 0xFF	; 255
    4612:	19 f0       	breq	.+6      	; 0x461a <u8g_SetPILevel+0x12>
    4614:	64 2f       	mov	r22, r20
    u8g_SetPinLevel(pin, level);
    4616:	0e 94 ce 22 	call	0x459c	; 0x459c <u8g_SetPinLevel>
    461a:	08 95       	ret

0000461c <u8g_Delay>:
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    461c:	2e ec       	ldi	r18, 0xCE	; 206
    461e:	37 e0       	ldi	r19, 0x07	; 7
  ==> must be devided by 4, rounded up 7/4 = 2
*/
void u8g_Delay(uint16_t val)
{
  /* old version did a call to the arduino lib: delay(val); */
  while( val != 0 )
    4620:	00 97       	sbiw	r24, 0x00	; 0
    4622:	29 f0       	breq	.+10     	; 0x462e <u8g_Delay+0x12>
    4624:	f9 01       	movw	r30, r18
    4626:	31 97       	sbiw	r30, 0x01	; 1
    4628:	f1 f7       	brne	.-4      	; 0x4626 <u8g_Delay+0xa>
  {
    _delay_loop_2( (F_CPU / 4000 ) -2);
    val--;
    462a:	01 97       	sbiw	r24, 0x01	; 1
    462c:	f9 cf       	rjmp	.-14     	; 0x4620 <u8g_Delay+0x4>
  }
}
    462e:	08 95       	ret

00004630 <u8g_dev_ssd1306_128x64_fn>:
  U8G_ESC_CS(0),             /* disable chip, bugfix 12 nov 2014 */
  U8G_ESC_END                /* end of sequence */
};

uint8_t u8g_dev_ssd1306_128x64_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
    4630:	af 92       	push	r10
    4632:	bf 92       	push	r11
    4634:	cf 92       	push	r12
    4636:	df 92       	push	r13
    4638:	ff 92       	push	r15
    463a:	0f 93       	push	r16
    463c:	1f 93       	push	r17
    463e:	cf 93       	push	r28
    4640:	df 93       	push	r29
    4642:	8c 01       	movw	r16, r24
    4644:	eb 01       	movw	r28, r22
    4646:	f4 2e       	mov	r15, r20
    4648:	69 01       	movw	r12, r18
  switch(msg)
    464a:	80 e1       	ldi	r24, 0x10	; 16
    464c:	48 17       	cp	r20, r24
    464e:	b1 f1       	breq	.+108    	; 0x46bc <u8g_dev_ssd1306_128x64_fn+0x8c>
    4650:	84 17       	cp	r24, r20
    4652:	70 f0       	brcs	.+28     	; 0x4670 <u8g_dev_ssd1306_128x64_fn+0x40>
    4654:	ea e0       	ldi	r30, 0x0A	; 10
    4656:	4e 13       	cpse	r20, r30
    4658:	3c c0       	rjmp	.+120    	; 0x46d2 <u8g_dev_ssd1306_128x64_fn+0xa2>
  {
    case U8G_DEV_MSG_INIT:
      u8g_InitCom(u8g, dev, U8G_SPI_CLK_CYCLE_300NS);
    465a:	42 e0       	ldi	r20, 0x02	; 2
    465c:	c8 01       	movw	r24, r16
    465e:	0e 94 91 21 	call	0x4322	; 0x4322 <u8g_InitCom>
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd1306_128x64_adafruit2_init_seq);
    4662:	42 ea       	ldi	r20, 0xA2	; 162
    4664:	50 e0       	ldi	r21, 0x00	; 0
    4666:	be 01       	movw	r22, r28
    4668:	c8 01       	movw	r24, r16
    466a:	0e 94 d7 21 	call	0x43ae	; 0x43ae <u8g_WriteEscSeqP>
      break;
    466e:	31 c0       	rjmp	.+98     	; 0x46d2 <u8g_dev_ssd1306_128x64_fn+0xa2>
  U8G_ESC_END                /* end of sequence */
};

uint8_t u8g_dev_ssd1306_128x64_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
  switch(msg)
    4670:	f1 e1       	ldi	r31, 0x11	; 17
    4672:	4f 17       	cp	r20, r31
    4674:	31 f1       	breq	.+76     	; 0x46c2 <u8g_dev_ssd1306_128x64_fn+0x92>
    4676:	85 e1       	ldi	r24, 0x15	; 21
    4678:	48 13       	cpse	r20, r24
    467a:	2b c0       	rjmp	.+86     	; 0x46d2 <u8g_dev_ssd1306_128x64_fn+0xa2>
      break;
    case U8G_DEV_MSG_STOP:
      break;
    case U8G_DEV_MSG_PAGE_NEXT:
      {
        u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
    467c:	aa 80       	ldd	r10, Y+2	; 0x02
    467e:	bb 80       	ldd	r11, Y+3	; 0x03
        u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd1306_128x64_data_start);    
    4680:	4a e9       	ldi	r20, 0x9A	; 154
    4682:	50 e0       	ldi	r21, 0x00	; 0
    4684:	c8 01       	movw	r24, r16
    4686:	0e 94 d7 21 	call	0x43ae	; 0x43ae <u8g_WriteEscSeqP>
        u8g_WriteByte(u8g, dev, 0x0b0 | pb->p.page); /* select current page (SSD1306) */
    468a:	f5 01       	movw	r30, r10
    468c:	44 81       	ldd	r20, Z+4	; 0x04
    468e:	40 6b       	ori	r20, 0xB0	; 176
    4690:	be 01       	movw	r22, r28
    4692:	c8 01       	movw	r24, r16
    4694:	0e 94 c5 21 	call	0x438a	; 0x438a <u8g_WriteByte>
        u8g_SetAddress(u8g, dev, 1);           /* data mode */
    4698:	41 e0       	ldi	r20, 0x01	; 1
    469a:	be 01       	movw	r22, r28
    469c:	c8 01       	movw	r24, r16
    469e:	0e 94 bb 21 	call	0x4376	; 0x4376 <u8g_SetAddress>
        if ( u8g_pb_WriteBuffer(pb, u8g, dev) == 0 )
    46a2:	ae 01       	movw	r20, r28
    46a4:	b8 01       	movw	r22, r16
    46a6:	c5 01       	movw	r24, r10
    46a8:	0e 94 6b 27 	call	0x4ed6	; 0x4ed6 <u8g_pb_WriteBuffer>
    46ac:	88 23       	and	r24, r24
    46ae:	b9 f0       	breq	.+46     	; 0x46de <u8g_dev_ssd1306_128x64_fn+0xae>
          return 0;
        u8g_SetChipSelect(u8g, dev, 0);
    46b0:	40 e0       	ldi	r20, 0x00	; 0
    46b2:	be 01       	movw	r22, r28
    46b4:	c8 01       	movw	r24, r16
    46b6:	0e 94 9b 21 	call	0x4336	; 0x4336 <u8g_SetChipSelect>
      }
      break;
    46ba:	0b c0       	rjmp	.+22     	; 0x46d2 <u8g_dev_ssd1306_128x64_fn+0xa2>
    case U8G_DEV_MSG_SLEEP_ON:
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd13xx_sleep_on);    
    46bc:	41 e9       	ldi	r20, 0x91	; 145
    46be:	50 e0       	ldi	r21, 0x00	; 0
    46c0:	02 c0       	rjmp	.+4      	; 0x46c6 <u8g_dev_ssd1306_128x64_fn+0x96>
      return 1;
    case U8G_DEV_MSG_SLEEP_OFF:
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd13xx_sleep_off);    
    46c2:	46 e8       	ldi	r20, 0x86	; 134
    46c4:	50 e0       	ldi	r21, 0x00	; 0
    46c6:	be 01       	movw	r22, r28
    46c8:	c8 01       	movw	r24, r16
    46ca:	0e 94 d7 21 	call	0x43ae	; 0x43ae <u8g_WriteEscSeqP>
      return 1;
    46ce:	81 e0       	ldi	r24, 0x01	; 1
    46d0:	06 c0       	rjmp	.+12     	; 0x46de <u8g_dev_ssd1306_128x64_fn+0xae>
  }
  return u8g_dev_pb8v1_base_fn(u8g, dev, msg, arg);
    46d2:	96 01       	movw	r18, r12
    46d4:	4f 2d       	mov	r20, r15
    46d6:	be 01       	movw	r22, r28
    46d8:	c8 01       	movw	r24, r16
    46da:	0e 94 d7 27 	call	0x4fae	; 0x4fae <u8g_dev_pb8v1_base_fn>
}
    46de:	df 91       	pop	r29
    46e0:	cf 91       	pop	r28
    46e2:	1f 91       	pop	r17
    46e4:	0f 91       	pop	r16
    46e6:	ff 90       	pop	r15
    46e8:	df 90       	pop	r13
    46ea:	cf 90       	pop	r12
    46ec:	bf 90       	pop	r11
    46ee:	af 90       	pop	r10
    46f0:	08 95       	ret

000046f2 <u8g_font_get_word>:
  cap_a = u8g_font_GetCapitalAHeight(u8g->font);
  u8g_font_calc_str_min_box(u8g, s, &buf);
  if ( buf.y_max < cap_a )
    buf.y_max = cap_a;
  u8g_font_get_str_box_fill_args(u8g, s, &buf, x, y, width, height);
}
    46f2:	fc 01       	movw	r30, r24
    46f4:	e6 0f       	add	r30, r22
    46f6:	f1 1d       	adc	r31, r1
    46f8:	84 91       	lpm	r24, Z
    46fa:	90 e0       	ldi	r25, 0x00	; 0
    46fc:	98 2f       	mov	r25, r24
    46fe:	88 27       	eor	r24, r24
    4700:	31 96       	adiw	r30, 0x01	; 1
    4702:	e4 91       	lpm	r30, Z
    4704:	8e 0f       	add	r24, r30
    4706:	91 1d       	adc	r25, r1
    4708:	08 95       	ret

0000470a <u8g_font_GetFormat>:
    470a:	fc 01       	movw	r30, r24
    470c:	84 91       	lpm	r24, Z
    470e:	08 95       	ret

00004710 <u8g_font_GetFontGlyphStructureSize>:
    4710:	0e 94 85 23 	call	0x470a	; 0x470a <u8g_font_GetFormat>
    4714:	88 23       	and	r24, r24
    4716:	21 f0       	breq	.+8      	; 0x4720 <u8g_font_GetFontGlyphStructureSize+0x10>
    4718:	82 30       	cpi	r24, 0x02	; 2
    471a:	11 f0       	breq	.+4      	; 0x4720 <u8g_font_GetFontGlyphStructureSize+0x10>
    471c:	83 e0       	ldi	r24, 0x03	; 3
    471e:	08 95       	ret
    4720:	86 e0       	ldi	r24, 0x06	; 6
    4722:	08 95       	ret

00004724 <u8g_font_calc_vref_font>:
    4724:	80 e0       	ldi	r24, 0x00	; 0
    4726:	08 95       	ret

00004728 <u8g_font_GetEncoding65Pos>:
    4728:	66 e0       	ldi	r22, 0x06	; 6
    472a:	0e 94 79 23 	call	0x46f2	; 0x46f2 <u8g_font_get_word>
    472e:	08 95       	ret

00004730 <u8g_font_GetEncoding97Pos>:
    4730:	68 e0       	ldi	r22, 0x08	; 8
    4732:	0e 94 79 23 	call	0x46f2	; 0x46f2 <u8g_font_get_word>
    4736:	08 95       	ret

00004738 <u8g_font_GetFontStartEncoding>:
    4738:	0a 96       	adiw	r24, 0x0a	; 10
    473a:	fc 01       	movw	r30, r24
    473c:	84 91       	lpm	r24, Z
    473e:	08 95       	ret

00004740 <u8g_font_GetFontEndEncoding>:
    4740:	0b 96       	adiw	r24, 0x0b	; 11
    4742:	fc 01       	movw	r30, r24
    4744:	84 91       	lpm	r24, Z
    4746:	08 95       	ret

00004748 <u8g_GetGlyph>:
    4748:	a0 e0       	ldi	r26, 0x00	; 0
    474a:	b0 e0       	ldi	r27, 0x00	; 0
    474c:	ea ea       	ldi	r30, 0xAA	; 170
    474e:	f3 e2       	ldi	r31, 0x23	; 35
    4750:	0c 94 e9 28 	jmp	0x51d2	; 0x51d2 <__prologue_saves__+0x12>
    4754:	8c 01       	movw	r16, r24
    4756:	e6 2e       	mov	r14, r22
    4758:	dc 01       	movw	r26, r24
    475a:	14 96       	adiw	r26, 0x04	; 4
    475c:	cd 91       	ld	r28, X+
    475e:	dc 91       	ld	r29, X
    4760:	15 97       	sbiw	r26, 0x05	; 5
    4762:	ce 01       	movw	r24, r28
    4764:	0e 94 85 23 	call	0x470a	; 0x470a <u8g_font_GetFormat>
    4768:	f8 2e       	mov	r15, r24
    476a:	f8 01       	movw	r30, r16
    476c:	84 81       	ldd	r24, Z+4	; 0x04
    476e:	95 81       	ldd	r25, Z+5	; 0x05
    4770:	0e 94 88 23 	call	0x4710	; 0x4710 <u8g_font_GetFontGlyphStructureSize>
    4774:	c8 2e       	mov	r12, r24
    4776:	f1 e0       	ldi	r31, 0x01	; 1
    4778:	ff 12       	cpse	r15, r31
    477a:	03 c0       	rjmp	.+6      	; 0x4782 <u8g_GetGlyph+0x3a>
    477c:	2f e0       	ldi	r18, 0x0F	; 15
    477e:	b2 2e       	mov	r11, r18
    4780:	02 c0       	rjmp	.+4      	; 0x4786 <u8g_GetGlyph+0x3e>
    4782:	bb 24       	eor	r11, r11
    4784:	ba 94       	dec	r11
    4786:	d8 01       	movw	r26, r16
    4788:	14 96       	adiw	r26, 0x04	; 4
    478a:	8d 91       	ld	r24, X+
    478c:	9c 91       	ld	r25, X
    478e:	15 97       	sbiw	r26, 0x05	; 5
    4790:	0e 94 9c 23 	call	0x4738	; 0x4738 <u8g_font_GetFontStartEncoding>
    4794:	f8 2e       	mov	r15, r24
    4796:	f8 01       	movw	r30, r16
    4798:	84 81       	ldd	r24, Z+4	; 0x04
    479a:	95 81       	ldd	r25, Z+5	; 0x05
    479c:	0e 94 a0 23 	call	0x4740	; 0x4740 <u8g_font_GetFontEndEncoding>
    47a0:	d8 2e       	mov	r13, r24
    47a2:	d8 01       	movw	r26, r16
    47a4:	14 96       	adiw	r26, 0x04	; 4
    47a6:	8d 91       	ld	r24, X+
    47a8:	9c 91       	ld	r25, X
    47aa:	15 97       	sbiw	r26, 0x05	; 5
    47ac:	0e 94 98 23 	call	0x4730	; 0x4730 <u8g_font_GetEncoding97Pos>
    47b0:	b0 e6       	ldi	r27, 0x60	; 96
    47b2:	be 15       	cp	r27, r14
    47b4:	38 f4       	brcc	.+14     	; 0x47c4 <u8g_GetGlyph+0x7c>
    47b6:	00 97       	sbiw	r24, 0x00	; 0
    47b8:	29 f0       	breq	.+10     	; 0x47c4 <u8g_GetGlyph+0x7c>
    47ba:	c8 0f       	add	r28, r24
    47bc:	d9 1f       	adc	r29, r25
    47be:	91 e6       	ldi	r25, 0x61	; 97
    47c0:	f9 2e       	mov	r15, r25
    47c2:	10 c0       	rjmp	.+32     	; 0x47e4 <u8g_GetGlyph+0x9c>
    47c4:	f8 01       	movw	r30, r16
    47c6:	84 81       	ldd	r24, Z+4	; 0x04
    47c8:	95 81       	ldd	r25, Z+5	; 0x05
    47ca:	0e 94 94 23 	call	0x4728	; 0x4728 <u8g_font_GetEncoding65Pos>
    47ce:	f0 e4       	ldi	r31, 0x40	; 64
    47d0:	fe 15       	cp	r31, r14
    47d2:	38 f4       	brcc	.+14     	; 0x47e2 <u8g_GetGlyph+0x9a>
    47d4:	00 97       	sbiw	r24, 0x00	; 0
    47d6:	29 f0       	breq	.+10     	; 0x47e2 <u8g_GetGlyph+0x9a>
    47d8:	c8 0f       	add	r28, r24
    47da:	d9 1f       	adc	r29, r25
    47dc:	81 e4       	ldi	r24, 0x41	; 65
    47de:	f8 2e       	mov	r15, r24
    47e0:	01 c0       	rjmp	.+2      	; 0x47e4 <u8g_GetGlyph+0x9c>
    47e2:	61 96       	adiw	r28, 0x11	; 17
    47e4:	de 14       	cp	r13, r14
    47e6:	90 f4       	brcc	.+36     	; 0x480c <u8g_GetGlyph+0xc4>
    47e8:	d8 01       	movw	r26, r16
    47ea:	50 96       	adiw	r26, 0x10	; 16
    47ec:	1c 92       	st	X, r1
    47ee:	50 97       	sbiw	r26, 0x10	; 16
    47f0:	53 96       	adiw	r26, 0x13	; 19
    47f2:	1c 92       	st	X, r1
    47f4:	53 97       	sbiw	r26, 0x13	; 19
    47f6:	54 96       	adiw	r26, 0x14	; 20
    47f8:	1c 92       	st	X, r1
    47fa:	54 97       	sbiw	r26, 0x14	; 20
    47fc:	51 96       	adiw	r26, 0x11	; 17
    47fe:	1c 92       	st	X, r1
    4800:	51 97       	sbiw	r26, 0x11	; 17
    4802:	52 96       	adiw	r26, 0x12	; 18
    4804:	1c 92       	st	X, r1
    4806:	80 e0       	ldi	r24, 0x00	; 0
    4808:	90 e0       	ldi	r25, 0x00	; 0
    480a:	67 c0       	rjmp	.+206    	; 0x48da <u8g_GetGlyph+0x192>
    480c:	df 14       	cp	r13, r15
    480e:	60 f3       	brcs	.-40     	; 0x47e8 <u8g_GetGlyph+0xa0>
    4810:	8c 2d       	mov	r24, r12
    4812:	90 e0       	ldi	r25, 0x00	; 0
    4814:	fe 01       	movw	r30, r28
    4816:	24 91       	lpm	r18, Z
    4818:	2f 3f       	cpi	r18, 0xFF	; 255
    481a:	11 f4       	brne	.+4      	; 0x4820 <u8g_GetGlyph+0xd8>
    481c:	21 96       	adiw	r28, 0x01	; 1
    481e:	58 c0       	rjmp	.+176    	; 0x48d0 <u8g_GetGlyph+0x188>
    4820:	fe 10       	cpse	r15, r14
    4822:	4d c0       	rjmp	.+154    	; 0x48be <u8g_GetGlyph+0x176>
    4824:	d8 01       	movw	r26, r16
    4826:	14 96       	adiw	r26, 0x04	; 4
    4828:	8d 91       	ld	r24, X+
    482a:	9c 91       	ld	r25, X
    482c:	15 97       	sbiw	r26, 0x05	; 5
    482e:	0e 94 85 23 	call	0x470a	; 0x470a <u8g_font_GetFormat>
    4832:	9e 01       	movw	r18, r28
    4834:	2f 5f       	subi	r18, 0xFF	; 255
    4836:	3f 4f       	sbci	r19, 0xFF	; 255
    4838:	fe 01       	movw	r30, r28
    483a:	88 23       	and	r24, r24
    483c:	11 f0       	breq	.+4      	; 0x4842 <u8g_GetGlyph+0xfa>
    483e:	82 30       	cpi	r24, 0x02	; 2
    4840:	e1 f4       	brne	.+56     	; 0x487a <u8g_GetGlyph+0x132>
    4842:	84 91       	lpm	r24, Z
    4844:	d8 01       	movw	r26, r16
    4846:	53 96       	adiw	r26, 0x13	; 19
    4848:	8c 93       	st	X, r24
    484a:	53 97       	sbiw	r26, 0x13	; 19
    484c:	f9 01       	movw	r30, r18
    484e:	24 91       	lpm	r18, Z
    4850:	54 96       	adiw	r26, 0x14	; 20
    4852:	2c 93       	st	X, r18
    4854:	54 97       	sbiw	r26, 0x14	; 20
    4856:	fe 01       	movw	r30, r28
    4858:	33 96       	adiw	r30, 0x03	; 3
    485a:	e4 91       	lpm	r30, Z
    485c:	50 96       	adiw	r26, 0x10	; 16
    485e:	ec 93       	st	X, r30
    4860:	50 97       	sbiw	r26, 0x10	; 16
    4862:	fe 01       	movw	r30, r28
    4864:	34 96       	adiw	r30, 0x04	; 4
    4866:	e4 91       	lpm	r30, Z
    4868:	51 96       	adiw	r26, 0x11	; 17
    486a:	ec 93       	st	X, r30
    486c:	51 97       	sbiw	r26, 0x11	; 17
    486e:	fe 01       	movw	r30, r28
    4870:	35 96       	adiw	r30, 0x05	; 5
    4872:	e4 91       	lpm	r30, Z
    4874:	52 96       	adiw	r26, 0x12	; 18
    4876:	ec 93       	st	X, r30
    4878:	20 c0       	rjmp	.+64     	; 0x48ba <u8g_GetGlyph+0x172>
    487a:	84 91       	lpm	r24, Z
    487c:	98 2f       	mov	r25, r24
    487e:	9f 70       	andi	r25, 0x0F	; 15
    4880:	92 50       	subi	r25, 0x02	; 2
    4882:	d8 01       	movw	r26, r16
    4884:	52 96       	adiw	r26, 0x12	; 18
    4886:	9c 93       	st	X, r25
    4888:	52 97       	sbiw	r26, 0x12	; 18
    488a:	82 95       	swap	r24
    488c:	8f 70       	andi	r24, 0x0F	; 15
    488e:	51 96       	adiw	r26, 0x11	; 17
    4890:	8c 93       	st	X, r24
    4892:	51 97       	sbiw	r26, 0x11	; 17
    4894:	f9 01       	movw	r30, r18
    4896:	24 91       	lpm	r18, Z
    4898:	82 2f       	mov	r24, r18
    489a:	8f 70       	andi	r24, 0x0F	; 15
    489c:	54 96       	adiw	r26, 0x14	; 20
    489e:	8c 93       	st	X, r24
    48a0:	54 97       	sbiw	r26, 0x14	; 20
    48a2:	22 95       	swap	r18
    48a4:	2f 70       	andi	r18, 0x0F	; 15
    48a6:	53 96       	adiw	r26, 0x13	; 19
    48a8:	2c 93       	st	X, r18
    48aa:	53 97       	sbiw	r26, 0x13	; 19
    48ac:	fe 01       	movw	r30, r28
    48ae:	32 96       	adiw	r30, 0x02	; 2
    48b0:	e4 91       	lpm	r30, Z
    48b2:	e2 95       	swap	r30
    48b4:	ef 70       	andi	r30, 0x0F	; 15
    48b6:	50 96       	adiw	r26, 0x10	; 16
    48b8:	ec 93       	st	X, r30
    48ba:	ce 01       	movw	r24, r28
    48bc:	0e c0       	rjmp	.+28     	; 0x48da <u8g_GetGlyph+0x192>
    48be:	fe 01       	movw	r30, r28
    48c0:	32 96       	adiw	r30, 0x02	; 2
    48c2:	e4 91       	lpm	r30, Z
    48c4:	eb 21       	and	r30, r11
    48c6:	9c 01       	movw	r18, r24
    48c8:	2e 0f       	add	r18, r30
    48ca:	31 1d       	adc	r19, r1
    48cc:	c2 0f       	add	r28, r18
    48ce:	d3 1f       	adc	r29, r19
    48d0:	fd 14       	cp	r15, r13
    48d2:	09 f4       	brne	.+2      	; 0x48d6 <u8g_GetGlyph+0x18e>
    48d4:	89 cf       	rjmp	.-238    	; 0x47e8 <u8g_GetGlyph+0xa0>
    48d6:	f3 94       	inc	r15
    48d8:	9d cf       	rjmp	.-198    	; 0x4814 <u8g_GetGlyph+0xcc>
    48da:	cd b7       	in	r28, 0x3d	; 61
    48dc:	de b7       	in	r29, 0x3e	; 62
    48de:	e9 e0       	ldi	r30, 0x09	; 9
    48e0:	0c 94 05 29 	jmp	0x520a	; 0x520a <__epilogue_restores__+0x12>

000048e4 <u8g_draw_glyph>:
    48e4:	a0 e0       	ldi	r26, 0x00	; 0
    48e6:	b0 e0       	ldi	r27, 0x00	; 0
    48e8:	e8 e7       	ldi	r30, 0x78	; 120
    48ea:	f4 e2       	ldi	r31, 0x24	; 36
    48ec:	0c 94 e4 28 	jmp	0x51c8	; 0x51c8 <__prologue_saves__+0x8>
    48f0:	ec 01       	movw	r28, r24
    48f2:	c6 2e       	mov	r12, r22
    48f4:	74 2e       	mov	r7, r20
    48f6:	62 2f       	mov	r22, r18
    48f8:	0e 94 a4 23 	call	0x4748	; 0x4748 <u8g_GetGlyph>
    48fc:	7c 01       	movw	r14, r24
    48fe:	89 2b       	or	r24, r25
    4900:	c9 f1       	breq	.+114    	; 0x4974 <u8g_draw_glyph+0x90>
    4902:	8c 81       	ldd	r24, Y+4	; 0x04
    4904:	9d 81       	ldd	r25, Y+5	; 0x05
    4906:	0e 94 88 23 	call	0x4710	; 0x4710 <u8g_font_GetFontGlyphStructureSize>
    490a:	b8 2e       	mov	r11, r24
    490c:	1b 89       	ldd	r17, Y+19	; 0x13
    490e:	0c 89       	ldd	r16, Y+20	; 0x14
    4910:	89 89       	ldd	r24, Y+17	; 0x11
    4912:	c8 0e       	add	r12, r24
    4914:	8a 89       	ldd	r24, Y+18	; 0x12
    4916:	78 1a       	sub	r7, r24
    4918:	d7 2c       	mov	r13, r7
    491a:	d0 1a       	sub	r13, r16
    491c:	21 2f       	mov	r18, r17
    491e:	4d 2d       	mov	r20, r13
    4920:	6c 2d       	mov	r22, r12
    4922:	ce 01       	movw	r24, r28
    4924:	0e 94 6f 21 	call	0x42de	; 0x42de <u8g_IsBBXIntersection>
    4928:	88 23       	and	r24, r24
    492a:	11 f1       	breq	.+68     	; 0x4970 <u8g_draw_glyph+0x8c>
    492c:	eb 0c       	add	r14, r11
    492e:	f1 1c       	adc	r15, r1
    4930:	19 5f       	subi	r17, 0xF9	; 249
    4932:	16 95       	lsr	r17
    4934:	16 95       	lsr	r17
    4936:	16 95       	lsr	r17
    4938:	81 2e       	mov	r8, r17
    493a:	91 2c       	mov	r9, r1
    493c:	7d 14       	cp	r7, r13
    493e:	c1 f0       	breq	.+48     	; 0x4970 <u8g_draw_glyph+0x8c>
    4940:	6c 2c       	mov	r6, r12
    4942:	57 01       	movw	r10, r14
    4944:	8a 2d       	mov	r24, r10
    4946:	8e 19       	sub	r24, r14
    4948:	81 17       	cp	r24, r17
    494a:	70 f4       	brcc	.+28     	; 0x4968 <u8g_draw_glyph+0x84>
    494c:	f5 01       	movw	r30, r10
    494e:	04 91       	lpm	r16, Z
    4950:	20 e0       	ldi	r18, 0x00	; 0
    4952:	4d 2d       	mov	r20, r13
    4954:	66 2d       	mov	r22, r6
    4956:	ce 01       	movw	r24, r28
    4958:	0e 94 f1 26 	call	0x4de2	; 0x4de2 <u8g_Draw8Pixel>
    495c:	ff ef       	ldi	r31, 0xFF	; 255
    495e:	af 1a       	sub	r10, r31
    4960:	bf 0a       	sbc	r11, r31
    4962:	88 e0       	ldi	r24, 0x08	; 8
    4964:	68 0e       	add	r6, r24
    4966:	ee cf       	rjmp	.-36     	; 0x4944 <u8g_draw_glyph+0x60>
    4968:	e8 0c       	add	r14, r8
    496a:	f9 1c       	adc	r15, r9
    496c:	d3 94       	inc	r13
    496e:	e6 cf       	rjmp	.-52     	; 0x493c <u8g_draw_glyph+0x58>
    4970:	88 89       	ldd	r24, Y+16	; 0x10
    4972:	01 c0       	rjmp	.+2      	; 0x4976 <u8g_draw_glyph+0x92>
    4974:	80 e0       	ldi	r24, 0x00	; 0
    4976:	cd b7       	in	r28, 0x3d	; 61
    4978:	de b7       	in	r29, 0x3e	; 62
    497a:	ee e0       	ldi	r30, 0x0E	; 14
    497c:	0c 94 00 29 	jmp	0x5200	; 0x5200 <__epilogue_restores__+0x8>

00004980 <u8g_DrawStr>:
    4980:	a0 e0       	ldi	r26, 0x00	; 0
    4982:	b0 e0       	ldi	r27, 0x00	; 0
    4984:	e6 ec       	ldi	r30, 0xC6	; 198
    4986:	f4 e2       	ldi	r31, 0x24	; 36
    4988:	0c 94 ea 28 	jmp	0x51d4	; 0x51d4 <__prologue_saves__+0x14>
    498c:	7c 01       	movw	r14, r24
    498e:	d6 2e       	mov	r13, r22
    4990:	04 2f       	mov	r16, r20
    4992:	c2 2e       	mov	r12, r18
    4994:	13 2f       	mov	r17, r19
    4996:	dc 01       	movw	r26, r24
    4998:	55 96       	adiw	r26, 0x15	; 21
    499a:	ed 91       	ld	r30, X+
    499c:	fc 91       	ld	r31, X
    499e:	56 97       	sbiw	r26, 0x16	; 22
    49a0:	09 95       	icall
    49a2:	08 0f       	add	r16, r24
    49a4:	cc 2d       	mov	r28, r12
    49a6:	d1 2f       	mov	r29, r17
    49a8:	10 e0       	ldi	r17, 0x00	; 0
    49aa:	29 91       	ld	r18, Y+
    49ac:	22 23       	and	r18, r18
    49ae:	41 f0       	breq	.+16     	; 0x49c0 <u8g_DrawStr+0x40>
    49b0:	40 2f       	mov	r20, r16
    49b2:	6d 2d       	mov	r22, r13
    49b4:	c7 01       	movw	r24, r14
    49b6:	0e 94 72 24 	call	0x48e4	; 0x48e4 <u8g_draw_glyph>
    49ba:	d8 0e       	add	r13, r24
    49bc:	18 0f       	add	r17, r24
    49be:	f5 cf       	rjmp	.-22     	; 0x49aa <u8g_DrawStr+0x2a>
    49c0:	81 2f       	mov	r24, r17
    49c2:	cd b7       	in	r28, 0x3d	; 61
    49c4:	de b7       	in	r29, 0x3e	; 62
    49c6:	e8 e0       	ldi	r30, 0x08	; 8
    49c8:	0c 94 06 29 	jmp	0x520c	; 0x520c <__epilogue_restores__+0x14>

000049cc <u8g_UpdateRefHeight>:
    49cc:	dc 01       	movw	r26, r24
    49ce:	14 96       	adiw	r26, 0x04	; 4
    49d0:	2d 91       	ld	r18, X+
    49d2:	3c 91       	ld	r19, X
    49d4:	15 97       	sbiw	r26, 0x05	; 5
    49d6:	21 15       	cp	r18, r1
    49d8:	31 05       	cpc	r19, r1
    49da:	09 f4       	brne	.+2      	; 0x49de <u8g_UpdateRefHeight+0x12>
    49dc:	3f c0       	rjmp	.+126    	; 0x4a5c <u8g_UpdateRefHeight+0x90>
    49de:	57 96       	adiw	r26, 0x17	; 23
    49e0:	8c 91       	ld	r24, X
    49e2:	57 97       	sbiw	r26, 0x17	; 23
    49e4:	f9 01       	movw	r30, r18
    49e6:	81 11       	cpse	r24, r1
    49e8:	08 c0       	rjmp	.+16     	; 0x49fa <u8g_UpdateRefHeight+0x2e>
    49ea:	35 96       	adiw	r30, 0x05	; 5
    49ec:	e4 91       	lpm	r30, Z
    49ee:	58 96       	adiw	r26, 0x18	; 24
    49f0:	ec 93       	st	X, r30
    49f2:	58 97       	sbiw	r26, 0x18	; 24
    49f4:	f9 01       	movw	r30, r18
    49f6:	3c 96       	adiw	r30, 0x0c	; 12
    49f8:	11 c0       	rjmp	.+34     	; 0x4a1c <u8g_UpdateRefHeight+0x50>
    49fa:	81 30       	cpi	r24, 0x01	; 1
    49fc:	41 f4       	brne	.+16     	; 0x4a0e <u8g_UpdateRefHeight+0x42>
    49fe:	3f 96       	adiw	r30, 0x0f	; 15
    4a00:	e4 91       	lpm	r30, Z
    4a02:	58 96       	adiw	r26, 0x18	; 24
    4a04:	ec 93       	st	X, r30
    4a06:	58 97       	sbiw	r26, 0x18	; 24
    4a08:	f9 01       	movw	r30, r18
    4a0a:	70 96       	adiw	r30, 0x10	; 16
    4a0c:	07 c0       	rjmp	.+14     	; 0x4a1c <u8g_UpdateRefHeight+0x50>
    4a0e:	3d 96       	adiw	r30, 0x0d	; 13
    4a10:	e4 91       	lpm	r30, Z
    4a12:	58 96       	adiw	r26, 0x18	; 24
    4a14:	ec 93       	st	X, r30
    4a16:	58 97       	sbiw	r26, 0x18	; 24
    4a18:	f9 01       	movw	r30, r18
    4a1a:	3e 96       	adiw	r30, 0x0e	; 14
    4a1c:	e4 91       	lpm	r30, Z
    4a1e:	59 96       	adiw	r26, 0x19	; 25
    4a20:	ec 93       	st	X, r30
    4a22:	59 97       	sbiw	r26, 0x19	; 25
    4a24:	58 96       	adiw	r26, 0x18	; 24
    4a26:	8c 91       	ld	r24, X
    4a28:	58 97       	sbiw	r26, 0x18	; 24
    4a2a:	08 2e       	mov	r0, r24
    4a2c:	00 0c       	add	r0, r0
    4a2e:	99 0b       	sbc	r25, r25
    4a30:	59 96       	adiw	r26, 0x19	; 25
    4a32:	2c 91       	ld	r18, X
    4a34:	59 97       	sbiw	r26, 0x19	; 25
    4a36:	82 1b       	sub	r24, r18
    4a38:	91 09       	sbc	r25, r1
    4a3a:	27 fd       	sbrc	r18, 7
    4a3c:	93 95       	inc	r25
    4a3e:	5a 96       	adiw	r26, 0x1a	; 26
    4a40:	2c 91       	ld	r18, X
    4a42:	5a 97       	sbiw	r26, 0x1a	; 26
    4a44:	20 34       	cpi	r18, 0x40	; 64
    4a46:	41 f0       	breq	.+16     	; 0x4a58 <u8g_UpdateRefHeight+0x8c>
    4a48:	82 9f       	mul	r24, r18
    4a4a:	c0 01       	movw	r24, r0
    4a4c:	11 24       	eor	r1, r1
    4a4e:	26 e0       	ldi	r18, 0x06	; 6
    4a50:	96 95       	lsr	r25
    4a52:	87 95       	ror	r24
    4a54:	2a 95       	dec	r18
    4a56:	e1 f7       	brne	.-8      	; 0x4a50 <u8g_UpdateRefHeight+0x84>
    4a58:	5b 96       	adiw	r26, 0x1b	; 27
    4a5a:	8c 93       	st	X, r24
    4a5c:	08 95       	ret

00004a5e <u8g_SetFontPosBaseline>:
    4a5e:	22 e9       	ldi	r18, 0x92	; 146
    4a60:	33 e2       	ldi	r19, 0x23	; 35
    4a62:	fc 01       	movw	r30, r24
    4a64:	36 8b       	std	Z+22, r19	; 0x16
    4a66:	25 8b       	std	Z+21, r18	; 0x15
    4a68:	08 95       	ret

00004a6a <u8g_SetFont>:

void u8g_SetFont(u8g_t *u8g, const u8g_fntpgm_uint8_t  *font)
{
    4a6a:	cf 93       	push	r28
    4a6c:	df 93       	push	r29
  if ( u8g->font != font )
    4a6e:	fc 01       	movw	r30, r24
    4a70:	24 81       	ldd	r18, Z+4	; 0x04
    4a72:	35 81       	ldd	r19, Z+5	; 0x05
    4a74:	26 17       	cp	r18, r22
    4a76:	37 07       	cpc	r19, r23
    4a78:	49 f0       	breq	.+18     	; 0x4a8c <u8g_SetFont+0x22>
    4a7a:	ec 01       	movw	r28, r24
  {
    u8g->font = font;
    4a7c:	75 83       	std	Z+5, r23	; 0x05
    4a7e:	64 83       	std	Z+4, r22	; 0x04
    u8g_UpdateRefHeight(u8g);
    4a80:	0e 94 e6 24 	call	0x49cc	; 0x49cc <u8g_UpdateRefHeight>
  return 0;
}

void u8g_SetFontPosBaseline(u8g_t *u8g)
{
  u8g->font_calc_vref = u8g_font_calc_vref_font;
    4a84:	82 e9       	ldi	r24, 0x92	; 146
    4a86:	93 e2       	ldi	r25, 0x23	; 35
    4a88:	9e 8b       	std	Y+22, r25	; 0x16
    4a8a:	8d 8b       	std	Y+21, r24	; 0x15
  {
    u8g->font = font;
    u8g_UpdateRefHeight(u8g);
    u8g_SetFontPosBaseline(u8g);
  }
}
    4a8c:	df 91       	pop	r29
    4a8e:	cf 91       	pop	r28
    4a90:	08 95       	ret

00004a92 <u8g_DrawLine>:
*/

#include "u8g.h"

void u8g_DrawLine(u8g_t *u8g, u8g_uint_t x1, u8g_uint_t y1, u8g_uint_t x2, u8g_uint_t y2)
{
    4a92:	a0 e0       	ldi	r26, 0x00	; 0
    4a94:	b0 e0       	ldi	r27, 0x00	; 0
    4a96:	ef e4       	ldi	r30, 0x4F	; 79
    4a98:	f5 e2       	ldi	r31, 0x25	; 37
    4a9a:	0c 94 e8 28 	jmp	0x51d0	; 0x51d0 <__prologue_saves__+0x10>
    4a9e:	5c 01       	movw	r10, r24
    4aa0:	c6 2f       	mov	r28, r22
    4aa2:	14 2f       	mov	r17, r20
    4aa4:	d2 2f       	mov	r29, r18

  uint8_t swapxy = 0;
  
  /* no BBX intersection check at the moment, should be added... */

  if ( x1 > x2 ) dx = x1-x2; else dx = x2-x1;
    4aa6:	26 17       	cp	r18, r22
    4aa8:	18 f4       	brcc	.+6      	; 0x4ab0 <u8g_DrawLine+0x1e>
    4aaa:	f6 2e       	mov	r15, r22
    4aac:	f2 1a       	sub	r15, r18
    4aae:	02 c0       	rjmp	.+4      	; 0x4ab4 <u8g_DrawLine+0x22>
    4ab0:	f2 2e       	mov	r15, r18
    4ab2:	f6 1a       	sub	r15, r22
  if ( y1 > y2 ) dy = y1-y2; else dy = y2-y1;
    4ab4:	01 17       	cp	r16, r17
    4ab6:	70 f4       	brcc	.+28     	; 0x4ad4 <u8g_DrawLine+0x42>
    4ab8:	e1 2e       	mov	r14, r17
    4aba:	e0 1a       	sub	r14, r16

  if ( dy > dx ) 
    4abc:	fe 14       	cp	r15, r14
    4abe:	f0 f4       	brcc	.+60     	; 0x4afc <u8g_DrawLine+0x6a>
    4ac0:	8f 2d       	mov	r24, r15
    4ac2:	fe 2c       	mov	r15, r14
    4ac4:	e8 2e       	mov	r14, r24
    4ac6:	81 2f       	mov	r24, r17
    4ac8:	1d 2f       	mov	r17, r29
    4aca:	d8 2f       	mov	r29, r24
    4acc:	8c 2f       	mov	r24, r28
    4ace:	c0 2f       	mov	r28, r16
    4ad0:	08 2f       	mov	r16, r24
    4ad2:	0d c0       	rjmp	.+26     	; 0x4aee <u8g_DrawLine+0x5c>
  uint8_t swapxy = 0;
  
  /* no BBX intersection check at the moment, should be added... */

  if ( x1 > x2 ) dx = x1-x2; else dx = x2-x1;
  if ( y1 > y2 ) dy = y1-y2; else dy = y2-y1;
    4ad4:	e0 2e       	mov	r14, r16
    4ad6:	e1 1a       	sub	r14, r17

  if ( dy > dx ) 
    4ad8:	fe 14       	cp	r15, r14
    4ada:	88 f5       	brcc	.+98     	; 0x4b3e <u8g_DrawLine+0xac>
    4adc:	8f 2d       	mov	r24, r15
    4ade:	fe 2c       	mov	r15, r14
    4ae0:	e8 2e       	mov	r14, r24
    4ae2:	8d 2f       	mov	r24, r29
    4ae4:	d0 2f       	mov	r29, r16
    4ae6:	08 2f       	mov	r16, r24
    4ae8:	8c 2f       	mov	r24, r28
    4aea:	c1 2f       	mov	r28, r17
    4aec:	18 2f       	mov	r17, r24
  {
    swapxy = 1;
    4aee:	cc 24       	eor	r12, r12
    4af0:	c3 94       	inc	r12
  if ( x1 > x2 ) 
  {
    tmp = x1; x1 =x2; x2 = tmp;
    tmp = y1; y1 =y2; y2 = tmp;
  }
  err = dx >> 1;
    4af2:	df 2c       	mov	r13, r15
    4af4:	d6 94       	lsr	r13
  if ( y2 > y1 ) ystep = 1; else ystep = -1;
    4af6:	10 17       	cp	r17, r16
    4af8:	50 f0       	brcs	.+20     	; 0x4b0e <u8g_DrawLine+0x7c>
    4afa:	2a c0       	rjmp	.+84     	; 0x4b50 <u8g_DrawLine+0xbe>
    swapxy = 1;
    tmp = dx; dx =dy; dy = tmp;
    tmp = x1; x1 =y1; y1 = tmp;
    tmp = x2; x2 =y2; y2 = tmp;
  }
  if ( x1 > x2 ) 
    4afc:	dc 17       	cp	r29, r28
    4afe:	50 f5       	brcc	.+84     	; 0x4b54 <u8g_DrawLine+0xc2>
  {
    tmp = x1; x1 =x2; x2 = tmp;
    tmp = y1; y1 =y2; y2 = tmp;
  }
  err = dx >> 1;
    4b00:	df 2c       	mov	r13, r15
    4b02:	d6 94       	lsr	r13
    4b04:	10 2f       	mov	r17, r16
    4b06:	8c 2f       	mov	r24, r28
    4b08:	cd 2f       	mov	r28, r29
    4b0a:	d8 2f       	mov	r29, r24
    4b0c:	c1 2c       	mov	r12, r1
  if ( y2 > y1 ) ystep = 1; else ystep = -1;
    4b0e:	01 e0       	ldi	r16, 0x01	; 1
  y = y1;

#ifndef  U8G_16BIT
  if ( x2 == 255 )
    4b10:	df 3f       	cpi	r29, 0xFF	; 255
    4b12:	79 f4       	brne	.+30     	; 0x4b32 <u8g_DrawLine+0xa0>
    x2--;
    4b14:	de ef       	ldi	r29, 0xFE	; 254
#else
  if ( x2 == 0xffff )
    x2--;
#endif

  for( x = x1; x <= x2; x++ )
    4b16:	0d c0       	rjmp	.+26     	; 0x4b32 <u8g_DrawLine+0xa0>
  {
    if ( swapxy == 0 ) 
    4b18:	c1 10       	cpse	r12, r1
    4b1a:	0e c0       	rjmp	.+28     	; 0x4b38 <u8g_DrawLine+0xa6>
      u8g_DrawPixel(u8g, x, y); 
    4b1c:	41 2f       	mov	r20, r17
    4b1e:	6c 2f       	mov	r22, r28
    else 
      u8g_DrawPixel(u8g, y, x); 
    4b20:	c5 01       	movw	r24, r10
    4b22:	0e 94 e8 26 	call	0x4dd0	; 0x4dd0 <u8g_DrawPixel>
    err -= (uint8_t)dy;
    4b26:	de 18       	sub	r13, r14
    if ( err < 0 ) 
    4b28:	d7 fe       	sbrs	r13, 7
    4b2a:	02 c0       	rjmp	.+4      	; 0x4b30 <u8g_DrawLine+0x9e>
    {
      y += (u8g_uint_t)ystep;
    4b2c:	10 0f       	add	r17, r16
      err += (u8g_uint_t)dx;
    4b2e:	df 0c       	add	r13, r15
#else
  if ( x2 == 0xffff )
    x2--;
#endif

  for( x = x1; x <= x2; x++ )
    4b30:	cf 5f       	subi	r28, 0xFF	; 255
    4b32:	dc 17       	cp	r29, r28
    4b34:	88 f7       	brcc	.-30     	; 0x4b18 <u8g_DrawLine+0x86>
    4b36:	10 c0       	rjmp	.+32     	; 0x4b58 <u8g_DrawLine+0xc6>
  {
    if ( swapxy == 0 ) 
      u8g_DrawPixel(u8g, x, y); 
    else 
      u8g_DrawPixel(u8g, y, x); 
    4b38:	4c 2f       	mov	r20, r28
    4b3a:	61 2f       	mov	r22, r17
    4b3c:	f1 cf       	rjmp	.-30     	; 0x4b20 <u8g_DrawLine+0x8e>
    swapxy = 1;
    tmp = dx; dx =dy; dy = tmp;
    tmp = x1; x1 =y1; y1 = tmp;
    tmp = x2; x2 =y2; y2 = tmp;
  }
  if ( x1 > x2 ) 
    4b3e:	dc 17       	cp	r29, r28
    4b40:	48 f4       	brcc	.+18     	; 0x4b54 <u8g_DrawLine+0xc2>
  {
    tmp = x1; x1 =x2; x2 = tmp;
    tmp = y1; y1 =y2; y2 = tmp;
  }
  err = dx >> 1;
    4b42:	df 2c       	mov	r13, r15
    4b44:	d6 94       	lsr	r13
    4b46:	10 2f       	mov	r17, r16
    4b48:	8c 2f       	mov	r24, r28
    4b4a:	cd 2f       	mov	r28, r29
    4b4c:	d8 2f       	mov	r29, r24
    4b4e:	c1 2c       	mov	r12, r1
  if ( y2 > y1 ) ystep = 1; else ystep = -1;
    4b50:	0f ef       	ldi	r16, 0xFF	; 255
    4b52:	de cf       	rjmp	.-68     	; 0x4b10 <u8g_DrawLine+0x7e>
    swapxy = 1;
    tmp = dx; dx =dy; dy = tmp;
    tmp = x1; x1 =y1; y1 = tmp;
    tmp = x2; x2 =y2; y2 = tmp;
  }
  if ( x1 > x2 ) 
    4b54:	c1 2c       	mov	r12, r1
    4b56:	cd cf       	rjmp	.-102    	; 0x4af2 <u8g_DrawLine+0x60>
    {
      y += (u8g_uint_t)ystep;
      err += (u8g_uint_t)dx;
    }
  }
}
    4b58:	cd b7       	in	r28, 0x3d	; 61
    4b5a:	de b7       	in	r29, 0x3e	; 62
    4b5c:	ea e0       	ldi	r30, 0x0A	; 10
    4b5e:	0c 94 04 29 	jmp	0x5208	; 0x5208 <__epilogue_restores__+0x10>

00004b62 <u8g_init_data>:
  irgb.idx = idx;
  irgb.r = r;
  irgb.g = g;
  irgb.b = b;  
  u8g_call_dev_fn(u8g, u8g->dev, U8G_DEV_MSG_SET_COLOR_ENTRY, &irgb);
}
    4b62:	1f 93       	push	r17
    4b64:	cf 93       	push	r28
    4b66:	df 93       	push	r29
    4b68:	ec 01       	movw	r28, r24
    4b6a:	1d 82       	std	Y+5, r1	; 0x05
    4b6c:	1c 82       	std	Y+4, r1	; 0x04
    4b6e:	1f 82       	std	Y+7, r1	; 0x07
    4b70:	1e 82       	std	Y+6, r1	; 0x06
    4b72:	19 86       	std	Y+9, r1	; 0x09
    4b74:	81 e0       	ldi	r24, 0x01	; 1
    4b76:	88 87       	std	Y+8, r24	; 0x08
    4b78:	82 e2       	ldi	r24, 0x22	; 34
    4b7a:	8a 87       	std	Y+10, r24	; 0x0a
    4b7c:	1f 86       	std	Y+15, r1	; 0x0f
    4b7e:	1e 86       	std	Y+14, r1	; 0x0e
    4b80:	fe 01       	movw	r30, r28
    4b82:	b3 96       	adiw	r30, 0x23	; 35
    4b84:	ce 01       	movw	r24, r28
    4b86:	c1 96       	adiw	r24, 0x31	; 49
    4b88:	2f ef       	ldi	r18, 0xFF	; 255
    4b8a:	21 93       	st	Z+, r18
    4b8c:	e8 17       	cp	r30, r24
    4b8e:	f9 07       	cpc	r31, r25
    4b90:	e1 f7       	brne	.-8      	; 0x4b8a <u8g_init_data+0x28>
    4b92:	11 e0       	ldi	r17, 0x01	; 1
    4b94:	18 a3       	std	Y+32, r17	; 0x20
    4b96:	ce 01       	movw	r24, r28
    4b98:	0e 94 2f 25 	call	0x4a5e	; 0x4a5e <u8g_SetFontPosBaseline>
    4b9c:	1f 8b       	std	Y+23, r17	; 0x17
    4b9e:	18 8e       	std	Y+24, r1	; 0x18
    4ba0:	19 8e       	std	Y+25, r1	; 0x19
    4ba2:	80 e4       	ldi	r24, 0x40	; 64
    4ba4:	8a 8f       	std	Y+26, r24	; 0x1a
    4ba6:	1b 8e       	std	Y+27, r1	; 0x1b
    4ba8:	8e e1       	ldi	r24, 0x1E	; 30
    4baa:	98 e2       	ldi	r25, 0x28	; 40
    4bac:	9a ab       	std	Y+50, r25	; 0x32
    4bae:	89 ab       	std	Y+49, r24	; 0x31
    4bb0:	df 91       	pop	r29
    4bb2:	cf 91       	pop	r28
    4bb4:	1f 91       	pop	r17
    4bb6:	08 95       	ret

00004bb8 <u8g_call_dev_fn>:
    4bb8:	db 01       	movw	r26, r22
    4bba:	ed 91       	ld	r30, X+
    4bbc:	fc 91       	ld	r31, X
    4bbe:	09 95       	icall
    4bc0:	08 95       	ret

00004bc2 <u8g_InitLL>:
    4bc2:	0f 93       	push	r16
    4bc4:	1f 93       	push	r17
    4bc6:	cf 93       	push	r28
    4bc8:	df 93       	push	r29
    4bca:	ec 01       	movw	r28, r24
    4bcc:	8b 01       	movw	r16, r22
    4bce:	e9 a9       	ldd	r30, Y+49	; 0x31
    4bd0:	fa a9       	ldd	r31, Y+50	; 0x32
    4bd2:	82 e0       	ldi	r24, 0x02	; 2
    4bd4:	09 95       	icall
    4bd6:	20 e0       	ldi	r18, 0x00	; 0
    4bd8:	30 e0       	ldi	r19, 0x00	; 0
    4bda:	4a e0       	ldi	r20, 0x0A	; 10
    4bdc:	b8 01       	movw	r22, r16
    4bde:	ce 01       	movw	r24, r28
    4be0:	0e 94 dc 25 	call	0x4bb8	; 0x4bb8 <u8g_call_dev_fn>
    4be4:	18 2f       	mov	r17, r24
    4be6:	e9 a9       	ldd	r30, Y+49	; 0x31
    4be8:	fa a9       	ldd	r31, Y+50	; 0x32
    4bea:	83 e0       	ldi	r24, 0x03	; 3
    4bec:	09 95       	icall
    4bee:	e9 a9       	ldd	r30, Y+49	; 0x31
    4bf0:	fa a9       	ldd	r31, Y+50	; 0x32
    4bf2:	80 e0       	ldi	r24, 0x00	; 0
    4bf4:	09 95       	icall
    4bf6:	81 2f       	mov	r24, r17
    4bf8:	df 91       	pop	r29
    4bfa:	cf 91       	pop	r28
    4bfc:	1f 91       	pop	r17
    4bfe:	0f 91       	pop	r16
    4c00:	08 95       	ret

00004c02 <u8g_FirstPageLL>:
    4c02:	0f 93       	push	r16
    4c04:	1f 93       	push	r17
    4c06:	cf 93       	push	r28
    4c08:	df 93       	push	r29
    4c0a:	ec 01       	movw	r28, r24
    4c0c:	8b 01       	movw	r16, r22
    4c0e:	e9 a9       	ldd	r30, Y+49	; 0x31
    4c10:	fa a9       	ldd	r31, Y+50	; 0x32
    4c12:	82 e0       	ldi	r24, 0x02	; 2
    4c14:	09 95       	icall
    4c16:	e9 a9       	ldd	r30, Y+49	; 0x31
    4c18:	fa a9       	ldd	r31, Y+50	; 0x32
    4c1a:	81 e0       	ldi	r24, 0x01	; 1
    4c1c:	09 95       	icall
    4c1e:	20 e0       	ldi	r18, 0x00	; 0
    4c20:	30 e0       	ldi	r19, 0x00	; 0
    4c22:	44 e1       	ldi	r20, 0x14	; 20
    4c24:	b8 01       	movw	r22, r16
    4c26:	ce 01       	movw	r24, r28
    4c28:	0e 94 dc 25 	call	0x4bb8	; 0x4bb8 <u8g_call_dev_fn>
    4c2c:	9e 01       	movw	r18, r28
    4c2e:	2d 5c       	subi	r18, 0xCD	; 205
    4c30:	3f 4f       	sbci	r19, 0xFF	; 255
    4c32:	47 e1       	ldi	r20, 0x17	; 23
    4c34:	b8 01       	movw	r22, r16
    4c36:	ce 01       	movw	r24, r28
    4c38:	0e 94 dc 25 	call	0x4bb8	; 0x4bb8 <u8g_call_dev_fn>
    4c3c:	e9 a9       	ldd	r30, Y+49	; 0x31
    4c3e:	fa a9       	ldd	r31, Y+50	; 0x32
    4c40:	80 e0       	ldi	r24, 0x00	; 0
    4c42:	09 95       	icall
    4c44:	df 91       	pop	r29
    4c46:	cf 91       	pop	r28
    4c48:	1f 91       	pop	r17
    4c4a:	0f 91       	pop	r16
    4c4c:	08 95       	ret

00004c4e <u8g_NextPageLL>:
    4c4e:	ef 92       	push	r14
    4c50:	ff 92       	push	r15
    4c52:	1f 93       	push	r17
    4c54:	cf 93       	push	r28
    4c56:	df 93       	push	r29
    4c58:	ec 01       	movw	r28, r24
    4c5a:	7b 01       	movw	r14, r22
    4c5c:	e9 a9       	ldd	r30, Y+49	; 0x31
    4c5e:	fa a9       	ldd	r31, Y+50	; 0x32
    4c60:	82 e0       	ldi	r24, 0x02	; 2
    4c62:	09 95       	icall
    4c64:	e9 a9       	ldd	r30, Y+49	; 0x31
    4c66:	fa a9       	ldd	r31, Y+50	; 0x32
    4c68:	81 e0       	ldi	r24, 0x01	; 1
    4c6a:	09 95       	icall
    4c6c:	20 e0       	ldi	r18, 0x00	; 0
    4c6e:	30 e0       	ldi	r19, 0x00	; 0
    4c70:	45 e1       	ldi	r20, 0x15	; 21
    4c72:	b7 01       	movw	r22, r14
    4c74:	ce 01       	movw	r24, r28
    4c76:	0e 94 dc 25 	call	0x4bb8	; 0x4bb8 <u8g_call_dev_fn>
    4c7a:	18 2f       	mov	r17, r24
    4c7c:	88 23       	and	r24, r24
    4c7e:	41 f0       	breq	.+16     	; 0x4c90 <u8g_NextPageLL+0x42>
    4c80:	9e 01       	movw	r18, r28
    4c82:	2d 5c       	subi	r18, 0xCD	; 205
    4c84:	3f 4f       	sbci	r19, 0xFF	; 255
    4c86:	47 e1       	ldi	r20, 0x17	; 23
    4c88:	b7 01       	movw	r22, r14
    4c8a:	ce 01       	movw	r24, r28
    4c8c:	0e 94 dc 25 	call	0x4bb8	; 0x4bb8 <u8g_call_dev_fn>
    4c90:	e9 a9       	ldd	r30, Y+49	; 0x31
    4c92:	fa a9       	ldd	r31, Y+50	; 0x32
    4c94:	80 e0       	ldi	r24, 0x00	; 0
    4c96:	09 95       	icall
    4c98:	81 2f       	mov	r24, r17
    4c9a:	df 91       	pop	r29
    4c9c:	cf 91       	pop	r28
    4c9e:	1f 91       	pop	r17
    4ca0:	ff 90       	pop	r15
    4ca2:	ef 90       	pop	r14
    4ca4:	08 95       	ret

00004ca6 <u8g_DrawPixelLL>:
    4ca6:	fc 01       	movw	r30, r24
    4ca8:	44 8f       	std	Z+28, r20	; 0x1c
    4caa:	25 8f       	std	Z+29, r18	; 0x1d
    4cac:	9c 01       	movw	r18, r24
    4cae:	24 5e       	subi	r18, 0xE4	; 228
    4cb0:	3f 4f       	sbci	r19, 0xFF	; 255
    4cb2:	42 e3       	ldi	r20, 0x32	; 50
    4cb4:	0e 94 dc 25 	call	0x4bb8	; 0x4bb8 <u8g_call_dev_fn>
    4cb8:	08 95       	ret

00004cba <u8g_GetWidthLL>:
    4cba:	a1 e0       	ldi	r26, 0x01	; 1
    4cbc:	b0 e0       	ldi	r27, 0x00	; 0
    4cbe:	e3 e6       	ldi	r30, 0x63	; 99
    4cc0:	f6 e2       	ldi	r31, 0x26	; 38
    4cc2:	0c 94 f0 28 	jmp	0x51e0	; 0x51e0 <__prologue_saves__+0x20>
    4cc6:	9e 01       	movw	r18, r28
    4cc8:	2f 5f       	subi	r18, 0xFF	; 255
    4cca:	3f 4f       	sbci	r19, 0xFF	; 255
    4ccc:	46 e4       	ldi	r20, 0x46	; 70
    4cce:	0e 94 dc 25 	call	0x4bb8	; 0x4bb8 <u8g_call_dev_fn>
    4cd2:	89 81       	ldd	r24, Y+1	; 0x01
    4cd4:	21 96       	adiw	r28, 0x01	; 1
    4cd6:	e2 e0       	ldi	r30, 0x02	; 2
    4cd8:	0c 94 0c 29 	jmp	0x5218	; 0x5218 <__epilogue_restores__+0x20>

00004cdc <u8g_GetHeightLL>:
    4cdc:	a1 e0       	ldi	r26, 0x01	; 1
    4cde:	b0 e0       	ldi	r27, 0x00	; 0
    4ce0:	e4 e7       	ldi	r30, 0x74	; 116
    4ce2:	f6 e2       	ldi	r31, 0x26	; 38
    4ce4:	0c 94 f0 28 	jmp	0x51e0	; 0x51e0 <__prologue_saves__+0x20>
    4ce8:	9e 01       	movw	r18, r28
    4cea:	2f 5f       	subi	r18, 0xFF	; 255
    4cec:	3f 4f       	sbci	r19, 0xFF	; 255
    4cee:	47 e4       	ldi	r20, 0x47	; 71
    4cf0:	0e 94 dc 25 	call	0x4bb8	; 0x4bb8 <u8g_call_dev_fn>
    4cf4:	89 81       	ldd	r24, Y+1	; 0x01
    4cf6:	21 96       	adiw	r28, 0x01	; 1
    4cf8:	e2 e0       	ldi	r30, 0x02	; 2
    4cfa:	0c 94 0c 29 	jmp	0x5218	; 0x5218 <__epilogue_restores__+0x20>

00004cfe <u8g_GetModeLL>:
    4cfe:	20 e0       	ldi	r18, 0x00	; 0
    4d00:	30 e0       	ldi	r19, 0x00	; 0
    4d02:	48 e4       	ldi	r20, 0x48	; 72
    4d04:	0e 94 dc 25 	call	0x4bb8	; 0x4bb8 <u8g_call_dev_fn>
    4d08:	08 95       	ret

00004d0a <u8g_UpdateDimension>:
    4d0a:	cf 93       	push	r28
    4d0c:	df 93       	push	r29
    4d0e:	ec 01       	movw	r28, r24
    4d10:	6a 81       	ldd	r22, Y+2	; 0x02
    4d12:	7b 81       	ldd	r23, Y+3	; 0x03
    4d14:	0e 94 5d 26 	call	0x4cba	; 0x4cba <u8g_GetWidthLL>
    4d18:	88 83       	st	Y, r24
    4d1a:	6a 81       	ldd	r22, Y+2	; 0x02
    4d1c:	7b 81       	ldd	r23, Y+3	; 0x03
    4d1e:	ce 01       	movw	r24, r28
    4d20:	0e 94 6e 26 	call	0x4cdc	; 0x4cdc <u8g_GetHeightLL>
    4d24:	89 83       	std	Y+1, r24	; 0x01
    4d26:	6a 81       	ldd	r22, Y+2	; 0x02
    4d28:	7b 81       	ldd	r23, Y+3	; 0x03
    4d2a:	ce 01       	movw	r24, r28
    4d2c:	0e 94 7f 26 	call	0x4cfe	; 0x4cfe <u8g_GetModeLL>
    4d30:	8b 87       	std	Y+11, r24	; 0x0b
    4d32:	9e 01       	movw	r18, r28
    4d34:	2d 5c       	subi	r18, 0xCD	; 205
    4d36:	3f 4f       	sbci	r19, 0xFF	; 255
    4d38:	6a 81       	ldd	r22, Y+2	; 0x02
    4d3a:	7b 81       	ldd	r23, Y+3	; 0x03
    4d3c:	47 e1       	ldi	r20, 0x17	; 23
    4d3e:	ce 01       	movw	r24, r28
    4d40:	0e 94 dc 25 	call	0x4bb8	; 0x4bb8 <u8g_call_dev_fn>
    4d44:	df 91       	pop	r29
    4d46:	cf 91       	pop	r28
    4d48:	08 95       	ret

00004d4a <u8g_Begin>:
    4d4a:	cf 93       	push	r28
    4d4c:	df 93       	push	r29
    4d4e:	ec 01       	movw	r28, r24
    4d50:	6a 81       	ldd	r22, Y+2	; 0x02
    4d52:	7b 81       	ldd	r23, Y+3	; 0x03
    4d54:	0e 94 e1 25 	call	0x4bc2	; 0x4bc2 <u8g_InitLL>
    4d58:	88 23       	and	r24, r24
    4d5a:	21 f0       	breq	.+8      	; 0x4d64 <u8g_Begin+0x1a>
    4d5c:	ce 01       	movw	r24, r28
    4d5e:	0e 94 85 26 	call	0x4d0a	; 0x4d0a <u8g_UpdateDimension>
    4d62:	81 e0       	ldi	r24, 0x01	; 1
    4d64:	df 91       	pop	r29
    4d66:	cf 91       	pop	r28
    4d68:	08 95       	ret

00004d6a <u8g_InitHWSPI>:
    4d6a:	cf 92       	push	r12
    4d6c:	df 92       	push	r13
    4d6e:	ff 92       	push	r15
    4d70:	0f 93       	push	r16
    4d72:	1f 93       	push	r17
    4d74:	cf 93       	push	r28
    4d76:	df 93       	push	r29
    4d78:	ec 01       	movw	r28, r24
    4d7a:	6b 01       	movw	r12, r22
    4d7c:	f4 2e       	mov	r15, r20
    4d7e:	12 2f       	mov	r17, r18
    4d80:	0e 94 b1 25 	call	0x4b62	; 0x4b62 <u8g_init_data>
    4d84:	db 82       	std	Y+3, r13	; 0x03
    4d86:	ca 82       	std	Y+2, r12	; 0x02
    4d88:	fd a2       	std	Y+37, r15	; 0x25
    4d8a:	1c a3       	std	Y+36, r17	; 0x24
    4d8c:	0b a3       	std	Y+35, r16	; 0x23
    4d8e:	ce 01       	movw	r24, r28
    4d90:	0e 94 a5 26 	call	0x4d4a	; 0x4d4a <u8g_Begin>
    4d94:	df 91       	pop	r29
    4d96:	cf 91       	pop	r28
    4d98:	1f 91       	pop	r17
    4d9a:	0f 91       	pop	r16
    4d9c:	ff 90       	pop	r15
    4d9e:	df 90       	pop	r13
    4da0:	cf 90       	pop	r12
    4da2:	08 95       	ret

00004da4 <u8g_FirstPage>:
    4da4:	fc 01       	movw	r30, r24
    4da6:	62 81       	ldd	r22, Z+2	; 0x02
    4da8:	73 81       	ldd	r23, Z+3	; 0x03
    4daa:	0e 94 01 26 	call	0x4c02	; 0x4c02 <u8g_FirstPageLL>
    4dae:	08 95       	ret

00004db0 <u8g_NextPage>:
    4db0:	cf 93       	push	r28
    4db2:	df 93       	push	r29
    4db4:	ec 01       	movw	r28, r24
    4db6:	ee 85       	ldd	r30, Y+14	; 0x0e
    4db8:	ff 85       	ldd	r31, Y+15	; 0x0f
    4dba:	30 97       	sbiw	r30, 0x00	; 0
    4dbc:	09 f0       	breq	.+2      	; 0x4dc0 <u8g_NextPage+0x10>
    4dbe:	09 95       	icall
    4dc0:	6a 81       	ldd	r22, Y+2	; 0x02
    4dc2:	7b 81       	ldd	r23, Y+3	; 0x03
    4dc4:	ce 01       	movw	r24, r28
    4dc6:	0e 94 27 26 	call	0x4c4e	; 0x4c4e <u8g_NextPageLL>
    4dca:	df 91       	pop	r29
    4dcc:	cf 91       	pop	r28
    4dce:	08 95       	ret

00004dd0 <u8g_DrawPixel>:
    4dd0:	36 2f       	mov	r19, r22
    4dd2:	24 2f       	mov	r18, r20
    4dd4:	fc 01       	movw	r30, r24
    4dd6:	62 81       	ldd	r22, Z+2	; 0x02
    4dd8:	73 81       	ldd	r23, Z+3	; 0x03
    4dda:	43 2f       	mov	r20, r19
    4ddc:	0e 94 53 26 	call	0x4ca6	; 0x4ca6 <u8g_DrawPixelLL>
    4de0:	08 95       	ret

00004de2 <u8g_Draw8Pixel>:
    4de2:	0f 93       	push	r16
    4de4:	fc 01       	movw	r30, r24
    4de6:	82 81       	ldd	r24, Z+2	; 0x02
    4de8:	93 81       	ldd	r25, Z+3	; 0x03
    4dea:	64 8f       	std	Z+28, r22	; 0x1c
    4dec:	45 8f       	std	Z+29, r20	; 0x1d
    4dee:	27 8f       	std	Z+31, r18	; 0x1f
    4df0:	06 8f       	std	Z+30, r16	; 0x1e
    4df2:	9f 01       	movw	r18, r30
    4df4:	24 5e       	subi	r18, 0xE4	; 228
    4df6:	3f 4f       	sbci	r19, 0xFF	; 255
    4df8:	4b e3       	ldi	r20, 0x3B	; 59
    4dfa:	bc 01       	movw	r22, r24
    4dfc:	cf 01       	movw	r24, r30
    4dfe:	0e 94 dc 25 	call	0x4bb8	; 0x4bb8 <u8g_call_dev_fn>
    4e02:	0f 91       	pop	r16
    4e04:	08 95       	ret

00004e06 <u8g_SetColorIndex>:

void u8g_SetColorIndex(u8g_t *u8g, uint8_t idx)
{
  u8g->arg_pixel.color = idx;
    4e06:	fc 01       	movw	r30, r24
    4e08:	60 a3       	std	Z+32, r22	; 0x20
    4e0a:	08 95       	ret

00004e0c <u8g_page_First>:
void u8g_page_Init(u8g_page_t *p, u8g_uint_t page_height, u8g_uint_t total_height )
{
  p->page_height = page_height;
  p->total_height = total_height;
  p->page = 0;
  u8g_page_First(p);
    4e0c:	fc 01       	movw	r30, r24
    4e0e:	12 82       	std	Z+2, r1	; 0x02
    4e10:	80 81       	ld	r24, Z
    4e12:	81 50       	subi	r24, 0x01	; 1
    4e14:	83 83       	std	Z+3, r24	; 0x03
    4e16:	14 82       	std	Z+4, r1	; 0x04
    4e18:	08 95       	ret

00004e1a <u8g_page_Next>:
  p->page_y1--;
  p->page = 0;
}

uint8_t u8g_page_Next(u8g_page_t * p)
{
    4e1a:	fc 01       	movw	r30, r24
  register u8g_uint_t y1;
  p->page_y0 += p->page_height;
    4e1c:	30 81       	ld	r19, Z
    4e1e:	92 81       	ldd	r25, Z+2	; 0x02
    4e20:	93 0f       	add	r25, r19
    4e22:	92 83       	std	Z+2, r25	; 0x02
  if ( p->page_y0 >= p->total_height )
    4e24:	21 81       	ldd	r18, Z+1	; 0x01
    4e26:	92 17       	cp	r25, r18
    4e28:	60 f4       	brcc	.+24     	; 0x4e42 <u8g_page_Next+0x28>
    return 0;
  p->page++;
    4e2a:	94 81       	ldd	r25, Z+4	; 0x04
    4e2c:	9f 5f       	subi	r25, 0xFF	; 255
    4e2e:	94 83       	std	Z+4, r25	; 0x04
  y1 = p->page_y1;
    4e30:	83 81       	ldd	r24, Z+3	; 0x03
  y1 += p->page_height;
    4e32:	83 0f       	add	r24, r19
  if ( y1 >= p->total_height )
    4e34:	82 17       	cp	r24, r18
    4e36:	10 f0       	brcs	.+4      	; 0x4e3c <u8g_page_Next+0x22>
  {
    y1 = p->total_height;
    y1--;
    4e38:	8f ef       	ldi	r24, 0xFF	; 255
    4e3a:	82 0f       	add	r24, r18
  }
  p->page_y1 = y1;
    4e3c:	83 83       	std	Z+3, r24	; 0x03
  
  return 1;
    4e3e:	81 e0       	ldi	r24, 0x01	; 1
    4e40:	08 95       	ret
uint8_t u8g_page_Next(u8g_page_t * p)
{
  register u8g_uint_t y1;
  p->page_y0 += p->page_height;
  if ( p->page_y0 >= p->total_height )
    return 0;
    4e42:	80 e0       	ldi	r24, 0x00	; 0
    y1--;
  }
  p->page_y1 = y1;
  
  return 1;
}
    4e44:	08 95       	ret

00004e46 <u8g_pb_Clear>:
  tmp = bbx->x;
  tmp += bbx->w;
  tmp--;
    
  return u8g_pb_IsXIntersection(pb, bbx->x, tmp);
}
    4e46:	dc 01       	movw	r26, r24
    4e48:	16 96       	adiw	r26, 0x06	; 6
    4e4a:	ed 91       	ld	r30, X+
    4e4c:	fc 91       	ld	r31, X
    4e4e:	17 97       	sbiw	r26, 0x07	; 7
    4e50:	15 96       	adiw	r26, 0x05	; 5
    4e52:	8c 91       	ld	r24, X
    4e54:	9f 01       	movw	r18, r30
    4e56:	28 0f       	add	r18, r24
    4e58:	31 1d       	adc	r19, r1
    4e5a:	c9 01       	movw	r24, r18
    4e5c:	11 92       	st	Z+, r1
    4e5e:	e8 17       	cp	r30, r24
    4e60:	f9 07       	cpc	r31, r25
    4e62:	e1 f7       	brne	.-8      	; 0x4e5c <u8g_pb_Clear+0x16>
    4e64:	08 95       	ret

00004e66 <u8g_pb_IsYIntersection>:
    4e66:	31 e0       	ldi	r19, 0x01	; 1
    4e68:	fc 01       	movw	r30, r24
    4e6a:	23 81       	ldd	r18, Z+3	; 0x03
    4e6c:	26 17       	cp	r18, r22
    4e6e:	08 f4       	brcc	.+2      	; 0x4e72 <u8g_pb_IsYIntersection+0xc>
    4e70:	30 e0       	ldi	r19, 0x00	; 0
    4e72:	21 e0       	ldi	r18, 0x01	; 1
    4e74:	fc 01       	movw	r30, r24
    4e76:	82 81       	ldd	r24, Z+2	; 0x02
    4e78:	48 17       	cp	r20, r24
    4e7a:	08 f4       	brcc	.+2      	; 0x4e7e <u8g_pb_IsYIntersection+0x18>
    4e7c:	20 e0       	ldi	r18, 0x00	; 0
    4e7e:	91 e0       	ldi	r25, 0x01	; 1
    4e80:	46 17       	cp	r20, r22
    4e82:	08 f0       	brcs	.+2      	; 0x4e86 <u8g_pb_IsYIntersection+0x20>
    4e84:	90 e0       	ldi	r25, 0x00	; 0
    4e86:	89 2f       	mov	r24, r25
    4e88:	83 2b       	or	r24, r19
    4e8a:	28 23       	and	r18, r24
    4e8c:	83 2f       	mov	r24, r19
    4e8e:	89 23       	and	r24, r25
    4e90:	82 2b       	or	r24, r18
    4e92:	08 95       	ret

00004e94 <u8g_pb_GetPageBox>:

void u8g_pb_GetPageBox(u8g_pb_t *pb, u8g_box_t *box)
{
    4e94:	dc 01       	movw	r26, r24
    4e96:	fb 01       	movw	r30, r22
  box->x0 = 0;
    4e98:	10 82       	st	Z, r1
  box->y0 = pb->p.page_y0;
    4e9a:	12 96       	adiw	r26, 0x02	; 2
    4e9c:	8c 91       	ld	r24, X
    4e9e:	12 97       	sbiw	r26, 0x02	; 2
    4ea0:	81 83       	std	Z+1, r24	; 0x01
  box->x1 = pb->width;
  box->x1--;
    4ea2:	15 96       	adiw	r26, 0x05	; 5
    4ea4:	8c 91       	ld	r24, X
    4ea6:	15 97       	sbiw	r26, 0x05	; 5
    4ea8:	81 50       	subi	r24, 0x01	; 1
    4eaa:	82 83       	std	Z+2, r24	; 0x02
  box->y1 = pb->p.page_y1;
    4eac:	13 96       	adiw	r26, 0x03	; 3
    4eae:	8c 91       	ld	r24, X
    4eb0:	83 83       	std	Z+3, r24	; 0x03
    4eb2:	08 95       	ret

00004eb4 <u8g_pb_Is8PixelVisible>:


uint8_t u8g_pb_Is8PixelVisible(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  u8g_uint_t v0, v1;
  v0 = arg_pixel->y;
    4eb4:	fb 01       	movw	r30, r22
    4eb6:	41 81       	ldd	r20, Z+1	; 0x01
  v1 = v0;
  switch( arg_pixel->dir )
    4eb8:	23 81       	ldd	r18, Z+3	; 0x03
    4eba:	21 30       	cpi	r18, 0x01	; 1
    4ebc:	29 f0       	breq	.+10     	; 0x4ec8 <u8g_pb_Is8PixelVisible+0x14>
    4ebe:	23 30       	cpi	r18, 0x03	; 3
    4ec0:	31 f4       	brne	.+12     	; 0x4ece <u8g_pb_Is8PixelVisible+0x1a>
      v1 += 8;          /* this is independent from the page height */
      break;
    case 2:  
      break;
    case 3: 
      v0 -= 8;
    4ec2:	68 ef       	ldi	r22, 0xF8	; 248
    4ec4:	64 0f       	add	r22, r20
      break;
    4ec6:	04 c0       	rjmp	.+8      	; 0x4ed0 <u8g_pb_Is8PixelVisible+0x1c>


uint8_t u8g_pb_Is8PixelVisible(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  u8g_uint_t v0, v1;
  v0 = arg_pixel->y;
    4ec8:	64 2f       	mov	r22, r20
  switch( arg_pixel->dir )
  {
    case 0:
      break;
    case 1:  
      v1 += 8;          /* this is independent from the page height */
    4eca:	48 5f       	subi	r20, 0xF8	; 248
      break;
    4ecc:	01 c0       	rjmp	.+2      	; 0x4ed0 <u8g_pb_Is8PixelVisible+0x1c>


uint8_t u8g_pb_Is8PixelVisible(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  u8g_uint_t v0, v1;
  v0 = arg_pixel->y;
    4ece:	64 2f       	mov	r22, r20
      break;
    case 3: 
      v0 -= 8;
      break;
  }
  return u8g_pb_IsYIntersection(b, v0, v1);
    4ed0:	0e 94 33 27 	call	0x4e66	; 0x4e66 <u8g_pb_IsYIntersection>
}
    4ed4:	08 95       	ret

00004ed6 <u8g_pb_WriteBuffer>:



uint8_t u8g_pb_WriteBuffer(u8g_pb_t *b, u8g_t *u8g, u8g_dev_t *dev)
{
    4ed6:	fc 01       	movw	r30, r24
    4ed8:	cb 01       	movw	r24, r22
    4eda:	ba 01       	movw	r22, r20
  return u8g_WriteSequence(u8g, dev, b->width, b->buf);  
    4edc:	26 81       	ldd	r18, Z+6	; 0x06
    4ede:	37 81       	ldd	r19, Z+7	; 0x07
    4ee0:	45 81       	ldd	r20, Z+5	; 0x05
    4ee2:	0e 94 cf 21 	call	0x439e	; 0x439e <u8g_WriteSequence>
}
    4ee6:	08 95       	ret

00004ee8 <u8g_pb8v1_set_pixel>:
      case 2: arg_pixel->x--; break;
      case 3: arg_pixel->y--; break;
    }
    pixel <<= 1;
  } while( pixel != 0  );
}
    4ee8:	dc 01       	movw	r26, r24
    4eea:	16 96       	adiw	r26, 0x06	; 6
    4eec:	ed 91       	ld	r30, X+
    4eee:	fc 91       	ld	r31, X
    4ef0:	17 97       	sbiw	r26, 0x07	; 7
    4ef2:	12 96       	adiw	r26, 0x02	; 2
    4ef4:	8c 91       	ld	r24, X
    4ef6:	48 1b       	sub	r20, r24
    4ef8:	47 70       	andi	r20, 0x07	; 7
    4efa:	81 e0       	ldi	r24, 0x01	; 1
    4efc:	90 e0       	ldi	r25, 0x00	; 0
    4efe:	01 c0       	rjmp	.+2      	; 0x4f02 <u8g_pb8v1_set_pixel+0x1a>
    4f00:	88 0f       	add	r24, r24
    4f02:	4a 95       	dec	r20
    4f04:	ea f7       	brpl	.-6      	; 0x4f00 <u8g_pb8v1_set_pixel+0x18>
    4f06:	e6 0f       	add	r30, r22
    4f08:	f1 1d       	adc	r31, r1
    4f0a:	30 81       	ld	r19, Z
    4f0c:	22 23       	and	r18, r18
    4f0e:	11 f0       	breq	.+4      	; 0x4f14 <u8g_pb8v1_set_pixel+0x2c>
    4f10:	83 2b       	or	r24, r19
    4f12:	02 c0       	rjmp	.+4      	; 0x4f18 <u8g_pb8v1_set_pixel+0x30>
    4f14:	80 95       	com	r24
    4f16:	83 23       	and	r24, r19
    4f18:	80 83       	st	Z, r24
    4f1a:	08 95       	ret

00004f1c <u8g_pb8v1_SetPixel>:
    4f1c:	fc 01       	movw	r30, r24
    4f1e:	db 01       	movw	r26, r22
    4f20:	11 96       	adiw	r26, 0x01	; 1
    4f22:	4c 91       	ld	r20, X
    4f24:	11 97       	sbiw	r26, 0x01	; 1
    4f26:	82 81       	ldd	r24, Z+2	; 0x02
    4f28:	48 17       	cp	r20, r24
    4f2a:	60 f0       	brcs	.+24     	; 0x4f44 <u8g_pb8v1_SetPixel+0x28>
    4f2c:	83 81       	ldd	r24, Z+3	; 0x03
    4f2e:	84 17       	cp	r24, r20
    4f30:	48 f0       	brcs	.+18     	; 0x4f44 <u8g_pb8v1_SetPixel+0x28>
    4f32:	6c 91       	ld	r22, X
    4f34:	85 81       	ldd	r24, Z+5	; 0x05
    4f36:	68 17       	cp	r22, r24
    4f38:	28 f4       	brcc	.+10     	; 0x4f44 <u8g_pb8v1_SetPixel+0x28>
    4f3a:	cf 01       	movw	r24, r30
    4f3c:	14 96       	adiw	r26, 0x04	; 4
    4f3e:	2c 91       	ld	r18, X
    4f40:	0e 94 74 27 	call	0x4ee8	; 0x4ee8 <u8g_pb8v1_set_pixel>
    4f44:	08 95       	ret

00004f46 <u8g_pb8v1_Set8PixelOpt2>:


void u8g_pb8v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
    4f46:	cf 92       	push	r12
    4f48:	df 92       	push	r13
    4f4a:	ff 92       	push	r15
    4f4c:	0f 93       	push	r16
    4f4e:	1f 93       	push	r17
    4f50:	cf 93       	push	r28
    4f52:	df 93       	push	r29
    4f54:	6c 01       	movw	r12, r24
    4f56:	eb 01       	movw	r28, r22
  register uint8_t pixel = arg_pixel->pixel;
    4f58:	fa 80       	ldd	r15, Y+2	; 0x02
  u8g_uint_t dx = 0;
  u8g_uint_t dy = 0;
  
  switch( arg_pixel->dir )
    4f5a:	8b 81       	ldd	r24, Y+3	; 0x03
    4f5c:	81 30       	cpi	r24, 0x01	; 1
    4f5e:	51 f0       	breq	.+20     	; 0x4f74 <u8g_pb8v1_Set8PixelOpt2+0x2e>
    4f60:	30 f0       	brcs	.+12     	; 0x4f6e <u8g_pb8v1_Set8PixelOpt2+0x28>
    4f62:	82 30       	cpi	r24, 0x02	; 2
    4f64:	49 f0       	breq	.+18     	; 0x4f78 <u8g_pb8v1_Set8PixelOpt2+0x32>
    4f66:	83 30       	cpi	r24, 0x03	; 3
    4f68:	51 f4       	brne	.+20     	; 0x4f7e <u8g_pb8v1_Set8PixelOpt2+0x38>
  {
    case 0: dx++; break;
    case 1: dy++; break;
    case 2: dx--; break;
    case 3: dy--; break;
    4f6a:	1f ef       	ldi	r17, 0xFF	; 255
    4f6c:	09 c0       	rjmp	.+18     	; 0x4f80 <u8g_pb8v1_Set8PixelOpt2+0x3a>

void u8g_pb8v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  register uint8_t pixel = arg_pixel->pixel;
  u8g_uint_t dx = 0;
  u8g_uint_t dy = 0;
    4f6e:	10 e0       	ldi	r17, 0x00	; 0
  
  switch( arg_pixel->dir )
  {
    case 0: dx++; break;
    4f70:	01 e0       	ldi	r16, 0x01	; 1
    4f72:	07 c0       	rjmp	.+14     	; 0x4f82 <u8g_pb8v1_Set8PixelOpt2+0x3c>
    case 1: dy++; break;
    4f74:	11 e0       	ldi	r17, 0x01	; 1
    4f76:	04 c0       	rjmp	.+8      	; 0x4f80 <u8g_pb8v1_Set8PixelOpt2+0x3a>

void u8g_pb8v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  register uint8_t pixel = arg_pixel->pixel;
  u8g_uint_t dx = 0;
  u8g_uint_t dy = 0;
    4f78:	10 e0       	ldi	r17, 0x00	; 0
  
  switch( arg_pixel->dir )
  {
    case 0: dx++; break;
    case 1: dy++; break;
    case 2: dx--; break;
    4f7a:	0f ef       	ldi	r16, 0xFF	; 255
    4f7c:	02 c0       	rjmp	.+4      	; 0x4f82 <u8g_pb8v1_Set8PixelOpt2+0x3c>

void u8g_pb8v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  register uint8_t pixel = arg_pixel->pixel;
  u8g_uint_t dx = 0;
  u8g_uint_t dy = 0;
    4f7e:	10 e0       	ldi	r17, 0x00	; 0


void u8g_pb8v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  register uint8_t pixel = arg_pixel->pixel;
  u8g_uint_t dx = 0;
    4f80:	00 e0       	ldi	r16, 0x00	; 0
    case 3: dy--; break;
  }
  
  do
  {
    if ( pixel & 128 )
    4f82:	f7 fe       	sbrs	r15, 7
    4f84:	04 c0       	rjmp	.+8      	; 0x4f8e <u8g_pb8v1_Set8PixelOpt2+0x48>
      u8g_pb8v1_SetPixel(b, arg_pixel);
    4f86:	be 01       	movw	r22, r28
    4f88:	c6 01       	movw	r24, r12
    4f8a:	0e 94 8e 27 	call	0x4f1c	; 0x4f1c <u8g_pb8v1_SetPixel>
    arg_pixel->x += dx;
    4f8e:	88 81       	ld	r24, Y
    4f90:	80 0f       	add	r24, r16
    4f92:	88 83       	st	Y, r24
    arg_pixel->y += dy;
    4f94:	89 81       	ldd	r24, Y+1	; 0x01
    4f96:	81 0f       	add	r24, r17
    4f98:	89 83       	std	Y+1, r24	; 0x01
    pixel <<= 1;
    4f9a:	ff 0c       	add	r15, r15
  } while( pixel != 0  );
    4f9c:	91 f7       	brne	.-28     	; 0x4f82 <u8g_pb8v1_Set8PixelOpt2+0x3c>
  
}
    4f9e:	df 91       	pop	r29
    4fa0:	cf 91       	pop	r28
    4fa2:	1f 91       	pop	r17
    4fa4:	0f 91       	pop	r16
    4fa6:	ff 90       	pop	r15
    4fa8:	df 90       	pop	r13
    4faa:	cf 90       	pop	r12
    4fac:	08 95       	ret

00004fae <u8g_dev_pb8v1_base_fn>:

uint8_t u8g_dev_pb8v1_base_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
    4fae:	0f 93       	push	r16
    4fb0:	1f 93       	push	r17
    4fb2:	cf 93       	push	r28
    4fb4:	df 93       	push	r29
    4fb6:	89 01       	movw	r16, r18
  u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
    4fb8:	fb 01       	movw	r30, r22
    4fba:	c2 81       	ldd	r28, Z+2	; 0x02
    4fbc:	d3 81       	ldd	r29, Z+3	; 0x03
  switch(msg)
    4fbe:	42 33       	cpi	r20, 0x32	; 50
    4fc0:	f9 f0       	breq	.+62     	; 0x5000 <u8g_dev_pb8v1_base_fn+0x52>
    4fc2:	68 f4       	brcc	.+26     	; 0x4fde <u8g_dev_pb8v1_base_fn+0x30>
    4fc4:	45 31       	cpi	r20, 0x15	; 21
    4fc6:	09 f1       	breq	.+66     	; 0x500a <u8g_dev_pb8v1_base_fn+0x5c>
    4fc8:	47 31       	cpi	r20, 0x17	; 23
    4fca:	41 f1       	breq	.+80     	; 0x501c <u8g_dev_pb8v1_base_fn+0x6e>
    4fcc:	44 31       	cpi	r20, 0x14	; 20
    4fce:	81 f5       	brne	.+96     	; 0x5030 <u8g_dev_pb8v1_base_fn+0x82>
    case U8G_DEV_MSG_INIT:
      break;
    case U8G_DEV_MSG_STOP:
      break;
    case U8G_DEV_MSG_PAGE_FIRST:
      u8g_pb_Clear(pb);
    4fd0:	ce 01       	movw	r24, r28
    4fd2:	0e 94 23 27 	call	0x4e46	; 0x4e46 <u8g_pb_Clear>
      u8g_page_First(&(pb->p));
    4fd6:	ce 01       	movw	r24, r28
    4fd8:	0e 94 06 27 	call	0x4e0c	; 0x4e0c <u8g_page_First>
    4fdc:	29 c0       	rjmp	.+82     	; 0x5030 <u8g_dev_pb8v1_base_fn+0x82>
}

uint8_t u8g_dev_pb8v1_base_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
  u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
  switch(msg)
    4fde:	46 34       	cpi	r20, 0x46	; 70
    4fe0:	11 f1       	breq	.+68     	; 0x5026 <u8g_dev_pb8v1_base_fn+0x78>
    4fe2:	47 34       	cpi	r20, 0x47	; 71
    4fe4:	11 f1       	breq	.+68     	; 0x502a <u8g_dev_pb8v1_base_fn+0x7c>
    4fe6:	4b 33       	cpi	r20, 0x3B	; 59
    4fe8:	19 f5       	brne	.+70     	; 0x5030 <u8g_dev_pb8v1_base_fn+0x82>
  {
    case U8G_DEV_MSG_SET_8PIXEL:
      if ( u8g_pb_Is8PixelVisible(pb, (u8g_dev_arg_pixel_t *)arg) )
    4fea:	b9 01       	movw	r22, r18
    4fec:	ce 01       	movw	r24, r28
    4fee:	0e 94 5a 27 	call	0x4eb4	; 0x4eb4 <u8g_pb_Is8PixelVisible>
    4ff2:	88 23       	and	r24, r24
    4ff4:	e9 f0       	breq	.+58     	; 0x5030 <u8g_dev_pb8v1_base_fn+0x82>
        u8g_pb8v1_Set8PixelOpt2(pb, (u8g_dev_arg_pixel_t *)arg);
    4ff6:	b8 01       	movw	r22, r16
    4ff8:	ce 01       	movw	r24, r28
    4ffa:	0e 94 a3 27 	call	0x4f46	; 0x4f46 <u8g_pb8v1_Set8PixelOpt2>
    4ffe:	18 c0       	rjmp	.+48     	; 0x5030 <u8g_dev_pb8v1_base_fn+0x82>
      break;
    case U8G_DEV_MSG_SET_PIXEL:
        u8g_pb8v1_SetPixel(pb, (u8g_dev_arg_pixel_t *)arg);
    5000:	b9 01       	movw	r22, r18
    5002:	ce 01       	movw	r24, r28
    5004:	0e 94 8e 27 	call	0x4f1c	; 0x4f1c <u8g_pb8v1_SetPixel>
    5008:	13 c0       	rjmp	.+38     	; 0x5030 <u8g_dev_pb8v1_base_fn+0x82>
    case U8G_DEV_MSG_PAGE_FIRST:
      u8g_pb_Clear(pb);
      u8g_page_First(&(pb->p));
      break;
    case U8G_DEV_MSG_PAGE_NEXT:
      if ( u8g_page_Next(&(pb->p)) == 0 )
    500a:	ce 01       	movw	r24, r28
    500c:	0e 94 0d 27 	call	0x4e1a	; 0x4e1a <u8g_page_Next>
    5010:	88 23       	and	r24, r24
    5012:	79 f0       	breq	.+30     	; 0x5032 <u8g_dev_pb8v1_base_fn+0x84>
        return 0;
      u8g_pb_Clear(pb);
    5014:	ce 01       	movw	r24, r28
    5016:	0e 94 23 27 	call	0x4e46	; 0x4e46 <u8g_pb_Clear>
    501a:	0a c0       	rjmp	.+20     	; 0x5030 <u8g_dev_pb8v1_base_fn+0x82>
#ifdef U8G_DEV_MSG_IS_BBX_INTERSECTION
    case U8G_DEV_MSG_IS_BBX_INTERSECTION:
      return u8g_pb_IsIntersection(pb, (u8g_dev_arg_bbx_t *)arg);
#endif
    case U8G_DEV_MSG_GET_PAGE_BOX:
      u8g_pb_GetPageBox(pb, (u8g_box_t *)arg);
    501c:	b9 01       	movw	r22, r18
    501e:	ce 01       	movw	r24, r28
    5020:	0e 94 4a 27 	call	0x4e94	; 0x4e94 <u8g_pb_GetPageBox>
    5024:	05 c0       	rjmp	.+10     	; 0x5030 <u8g_dev_pb8v1_base_fn+0x82>
      break;
    case U8G_DEV_MSG_GET_WIDTH:
      *((u8g_uint_t *)arg) = pb->width;
    5026:	8d 81       	ldd	r24, Y+5	; 0x05
    5028:	01 c0       	rjmp	.+2      	; 0x502c <u8g_dev_pb8v1_base_fn+0x7e>
      break;
    case U8G_DEV_MSG_GET_HEIGHT:
      *((u8g_uint_t *)arg) = pb->p.total_height;
    502a:	89 81       	ldd	r24, Y+1	; 0x01
    502c:	f8 01       	movw	r30, r16
    502e:	80 83       	st	Z, r24
    case U8G_DEV_MSG_SET_XY_CB:
      break;
    case U8G_DEV_MSG_GET_MODE:
      return U8G_MODE_BW;
  }
  return 1;
    5030:	81 e0       	ldi	r24, 0x01	; 1
}
    5032:	df 91       	pop	r29
    5034:	cf 91       	pop	r28
    5036:	1f 91       	pop	r17
    5038:	0f 91       	pop	r16
    503a:	08 95       	ret

0000503c <u8g_state_dummy_cb>:

#include <stddef.h>
#include "u8g.h"

void u8g_state_dummy_cb(uint8_t msg)
{
    503c:	08 95       	ret

0000503e <uartPutc>:
/************************************************************************
Function for writing one byte to uart.
************************************************************************/
static int uartPutc(char c, FILE *stream) {
	// wait for transmit buffer to be empty
	while(!(UCSR0A & (1<<UDRE0)));
    503e:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
    5042:	95 ff       	sbrs	r25, 5
    5044:	fc cf       	rjmp	.-8      	; 0x503e <uartPutc>

	// load data into transmit register
	UDR0 = c;
    5046:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	return 0;
}
    504a:	80 e0       	ldi	r24, 0x00	; 0
    504c:	90 e0       	ldi	r25, 0x00	; 0
    504e:	08 95       	ret

00005050 <uartInit>:
/************************************************************************
Initializes the uart, activates interrupt on recive and sets stdout.
************************************************************************/
void uartInit(void) {
	// Set baudrate to 38400
	UBRR0 = 12;
    5050:	8c e0       	ldi	r24, 0x0C	; 12
    5052:	90 e0       	ldi	r25, 0x00	; 0
    5054:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
    5058:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>

	// Enable transmitter and receiver
	UCSR0B |= (1<<RXEN0) | (1<<TXEN0) | (1<<RXCIE0);
    505c:	e1 ec       	ldi	r30, 0xC1	; 193
    505e:	f0 e0       	ldi	r31, 0x00	; 0
    5060:	80 81       	ld	r24, Z
    5062:	88 69       	ori	r24, 0x98	; 152
    5064:	80 83       	st	Z, r24
	
	// Set form to 8 data bits, 1 stop bit
	UCSR0C |= (3<<UCSZ00);
    5066:	e2 ec       	ldi	r30, 0xC2	; 194
    5068:	f0 e0       	ldi	r31, 0x00	; 0
    506a:	80 81       	ld	r24, Z
    506c:	86 60       	ori	r24, 0x06	; 6
    506e:	80 83       	st	Z, r24
	UCSR0C &= ~(1<<USBS0);
    5070:	80 81       	ld	r24, Z
    5072:	87 7f       	andi	r24, 0xF7	; 247
    5074:	80 83       	st	Z, r24
	
	// Set stdout
	stdout = &uartstdout;
    5076:	8f e0       	ldi	r24, 0x0F	; 15
    5078:	91 e0       	ldi	r25, 0x01	; 1
    507a:	90 93 3d 07 	sts	0x073D, r25	; 0x80073d <__iob+0x3>
    507e:	80 93 3c 07 	sts	0x073C, r24	; 0x80073c <__iob+0x2>
    5082:	08 95       	ret

00005084 <__udivmodqi4>:
    5084:	99 1b       	sub	r25, r25
    5086:	79 e0       	ldi	r23, 0x09	; 9
    5088:	04 c0       	rjmp	.+8      	; 0x5092 <__udivmodqi4_ep>

0000508a <__udivmodqi4_loop>:
    508a:	99 1f       	adc	r25, r25
    508c:	96 17       	cp	r25, r22
    508e:	08 f0       	brcs	.+2      	; 0x5092 <__udivmodqi4_ep>
    5090:	96 1b       	sub	r25, r22

00005092 <__udivmodqi4_ep>:
    5092:	88 1f       	adc	r24, r24
    5094:	7a 95       	dec	r23
    5096:	c9 f7       	brne	.-14     	; 0x508a <__udivmodqi4_loop>
    5098:	80 95       	com	r24
    509a:	08 95       	ret

0000509c <__udivmodsi4>:
    509c:	a1 e2       	ldi	r26, 0x21	; 33
    509e:	1a 2e       	mov	r1, r26
    50a0:	aa 1b       	sub	r26, r26
    50a2:	bb 1b       	sub	r27, r27
    50a4:	fd 01       	movw	r30, r26
    50a6:	0d c0       	rjmp	.+26     	; 0x50c2 <__udivmodsi4_ep>

000050a8 <__udivmodsi4_loop>:
    50a8:	aa 1f       	adc	r26, r26
    50aa:	bb 1f       	adc	r27, r27
    50ac:	ee 1f       	adc	r30, r30
    50ae:	ff 1f       	adc	r31, r31
    50b0:	a2 17       	cp	r26, r18
    50b2:	b3 07       	cpc	r27, r19
    50b4:	e4 07       	cpc	r30, r20
    50b6:	f5 07       	cpc	r31, r21
    50b8:	20 f0       	brcs	.+8      	; 0x50c2 <__udivmodsi4_ep>
    50ba:	a2 1b       	sub	r26, r18
    50bc:	b3 0b       	sbc	r27, r19
    50be:	e4 0b       	sbc	r30, r20
    50c0:	f5 0b       	sbc	r31, r21

000050c2 <__udivmodsi4_ep>:
    50c2:	66 1f       	adc	r22, r22
    50c4:	77 1f       	adc	r23, r23
    50c6:	88 1f       	adc	r24, r24
    50c8:	99 1f       	adc	r25, r25
    50ca:	1a 94       	dec	r1
    50cc:	69 f7       	brne	.-38     	; 0x50a8 <__udivmodsi4_loop>
    50ce:	60 95       	com	r22
    50d0:	70 95       	com	r23
    50d2:	80 95       	com	r24
    50d4:	90 95       	com	r25
    50d6:	9b 01       	movw	r18, r22
    50d8:	ac 01       	movw	r20, r24
    50da:	bd 01       	movw	r22, r26
    50dc:	cf 01       	movw	r24, r30
    50de:	08 95       	ret

000050e0 <__tablejump2__>:
    50e0:	ee 0f       	add	r30, r30
    50e2:	ff 1f       	adc	r31, r31
    50e4:	05 90       	lpm	r0, Z+
    50e6:	f4 91       	lpm	r31, Z
    50e8:	e0 2d       	mov	r30, r0
    50ea:	09 94       	ijmp

000050ec <__muluhisi3>:
    50ec:	0e 94 4a 29 	call	0x5294	; 0x5294 <__umulhisi3>
    50f0:	a5 9f       	mul	r26, r21
    50f2:	90 0d       	add	r25, r0
    50f4:	b4 9f       	mul	r27, r20
    50f6:	90 0d       	add	r25, r0
    50f8:	a4 9f       	mul	r26, r20
    50fa:	80 0d       	add	r24, r0
    50fc:	91 1d       	adc	r25, r1
    50fe:	11 24       	eor	r1, r1
    5100:	08 95       	ret

00005102 <__umoddi3>:
    5102:	68 94       	set
    5104:	01 c0       	rjmp	.+2      	; 0x5108 <__udivdi3_umoddi3>

00005106 <__udivdi3>:
    5106:	e8 94       	clt

00005108 <__udivdi3_umoddi3>:
    5108:	8f 92       	push	r8
    510a:	9f 92       	push	r9
    510c:	cf 93       	push	r28
    510e:	df 93       	push	r29
    5110:	0e 94 8f 28 	call	0x511e	; 0x511e <__udivmod64>
    5114:	df 91       	pop	r29
    5116:	cf 91       	pop	r28
    5118:	9f 90       	pop	r9
    511a:	8f 90       	pop	r8
    511c:	08 95       	ret

0000511e <__udivmod64>:
    511e:	88 24       	eor	r8, r8
    5120:	99 24       	eor	r9, r9
    5122:	f4 01       	movw	r30, r8
    5124:	e4 01       	movw	r28, r8
    5126:	b0 e4       	ldi	r27, 0x40	; 64
    5128:	9f 93       	push	r25
    512a:	aa 27       	eor	r26, r26
    512c:	9a 15       	cp	r25, r10
    512e:	8b 04       	cpc	r8, r11
    5130:	9c 04       	cpc	r9, r12
    5132:	ed 05       	cpc	r30, r13
    5134:	fe 05       	cpc	r31, r14
    5136:	cf 05       	cpc	r28, r15
    5138:	d0 07       	cpc	r29, r16
    513a:	a1 07       	cpc	r26, r17
    513c:	98 f4       	brcc	.+38     	; 0x5164 <__udivmod64+0x46>
    513e:	ad 2f       	mov	r26, r29
    5140:	dc 2f       	mov	r29, r28
    5142:	cf 2f       	mov	r28, r31
    5144:	fe 2f       	mov	r31, r30
    5146:	e9 2d       	mov	r30, r9
    5148:	98 2c       	mov	r9, r8
    514a:	89 2e       	mov	r8, r25
    514c:	98 2f       	mov	r25, r24
    514e:	87 2f       	mov	r24, r23
    5150:	76 2f       	mov	r23, r22
    5152:	65 2f       	mov	r22, r21
    5154:	54 2f       	mov	r21, r20
    5156:	43 2f       	mov	r20, r19
    5158:	32 2f       	mov	r19, r18
    515a:	22 27       	eor	r18, r18
    515c:	b8 50       	subi	r27, 0x08	; 8
    515e:	31 f7       	brne	.-52     	; 0x512c <__udivmod64+0xe>
    5160:	bf 91       	pop	r27
    5162:	27 c0       	rjmp	.+78     	; 0x51b2 <__udivmod64+0x94>
    5164:	1b 2e       	mov	r1, r27
    5166:	bf 91       	pop	r27
    5168:	bb 27       	eor	r27, r27
    516a:	22 0f       	add	r18, r18
    516c:	33 1f       	adc	r19, r19
    516e:	44 1f       	adc	r20, r20
    5170:	55 1f       	adc	r21, r21
    5172:	66 1f       	adc	r22, r22
    5174:	77 1f       	adc	r23, r23
    5176:	88 1f       	adc	r24, r24
    5178:	99 1f       	adc	r25, r25
    517a:	88 1c       	adc	r8, r8
    517c:	99 1c       	adc	r9, r9
    517e:	ee 1f       	adc	r30, r30
    5180:	ff 1f       	adc	r31, r31
    5182:	cc 1f       	adc	r28, r28
    5184:	dd 1f       	adc	r29, r29
    5186:	aa 1f       	adc	r26, r26
    5188:	bb 1f       	adc	r27, r27
    518a:	8a 14       	cp	r8, r10
    518c:	9b 04       	cpc	r9, r11
    518e:	ec 05       	cpc	r30, r12
    5190:	fd 05       	cpc	r31, r13
    5192:	ce 05       	cpc	r28, r14
    5194:	df 05       	cpc	r29, r15
    5196:	a0 07       	cpc	r26, r16
    5198:	b1 07       	cpc	r27, r17
    519a:	48 f0       	brcs	.+18     	; 0x51ae <__udivmod64+0x90>
    519c:	8a 18       	sub	r8, r10
    519e:	9b 08       	sbc	r9, r11
    51a0:	ec 09       	sbc	r30, r12
    51a2:	fd 09       	sbc	r31, r13
    51a4:	ce 09       	sbc	r28, r14
    51a6:	df 09       	sbc	r29, r15
    51a8:	a0 0b       	sbc	r26, r16
    51aa:	b1 0b       	sbc	r27, r17
    51ac:	21 60       	ori	r18, 0x01	; 1
    51ae:	1a 94       	dec	r1
    51b0:	e1 f6       	brne	.-72     	; 0x516a <__udivmod64+0x4c>
    51b2:	2e f4       	brtc	.+10     	; 0x51be <__udivmod64+0xa0>
    51b4:	94 01       	movw	r18, r8
    51b6:	af 01       	movw	r20, r30
    51b8:	be 01       	movw	r22, r28
    51ba:	cd 01       	movw	r24, r26
    51bc:	00 0c       	add	r0, r0
    51be:	08 95       	ret

000051c0 <__prologue_saves__>:
    51c0:	2f 92       	push	r2
    51c2:	3f 92       	push	r3
    51c4:	4f 92       	push	r4
    51c6:	5f 92       	push	r5
    51c8:	6f 92       	push	r6
    51ca:	7f 92       	push	r7
    51cc:	8f 92       	push	r8
    51ce:	9f 92       	push	r9
    51d0:	af 92       	push	r10
    51d2:	bf 92       	push	r11
    51d4:	cf 92       	push	r12
    51d6:	df 92       	push	r13
    51d8:	ef 92       	push	r14
    51da:	ff 92       	push	r15
    51dc:	0f 93       	push	r16
    51de:	1f 93       	push	r17
    51e0:	cf 93       	push	r28
    51e2:	df 93       	push	r29
    51e4:	cd b7       	in	r28, 0x3d	; 61
    51e6:	de b7       	in	r29, 0x3e	; 62
    51e8:	ca 1b       	sub	r28, r26
    51ea:	db 0b       	sbc	r29, r27
    51ec:	0f b6       	in	r0, 0x3f	; 63
    51ee:	f8 94       	cli
    51f0:	de bf       	out	0x3e, r29	; 62
    51f2:	0f be       	out	0x3f, r0	; 63
    51f4:	cd bf       	out	0x3d, r28	; 61
    51f6:	09 94       	ijmp

000051f8 <__epilogue_restores__>:
    51f8:	2a 88       	ldd	r2, Y+18	; 0x12
    51fa:	39 88       	ldd	r3, Y+17	; 0x11
    51fc:	48 88       	ldd	r4, Y+16	; 0x10
    51fe:	5f 84       	ldd	r5, Y+15	; 0x0f
    5200:	6e 84       	ldd	r6, Y+14	; 0x0e
    5202:	7d 84       	ldd	r7, Y+13	; 0x0d
    5204:	8c 84       	ldd	r8, Y+12	; 0x0c
    5206:	9b 84       	ldd	r9, Y+11	; 0x0b
    5208:	aa 84       	ldd	r10, Y+10	; 0x0a
    520a:	b9 84       	ldd	r11, Y+9	; 0x09
    520c:	c8 84       	ldd	r12, Y+8	; 0x08
    520e:	df 80       	ldd	r13, Y+7	; 0x07
    5210:	ee 80       	ldd	r14, Y+6	; 0x06
    5212:	fd 80       	ldd	r15, Y+5	; 0x05
    5214:	0c 81       	ldd	r16, Y+4	; 0x04
    5216:	1b 81       	ldd	r17, Y+3	; 0x03
    5218:	aa 81       	ldd	r26, Y+2	; 0x02
    521a:	b9 81       	ldd	r27, Y+1	; 0x01
    521c:	ce 0f       	add	r28, r30
    521e:	d1 1d       	adc	r29, r1
    5220:	0f b6       	in	r0, 0x3f	; 63
    5222:	f8 94       	cli
    5224:	de bf       	out	0x3e, r29	; 62
    5226:	0f be       	out	0x3f, r0	; 63
    5228:	cd bf       	out	0x3d, r28	; 61
    522a:	ed 01       	movw	r28, r26
    522c:	08 95       	ret

0000522e <__adddi3>:
    522e:	2a 0d       	add	r18, r10
    5230:	3b 1d       	adc	r19, r11
    5232:	4c 1d       	adc	r20, r12
    5234:	5d 1d       	adc	r21, r13
    5236:	6e 1d       	adc	r22, r14
    5238:	7f 1d       	adc	r23, r15
    523a:	80 1f       	adc	r24, r16
    523c:	91 1f       	adc	r25, r17
    523e:	08 95       	ret

00005240 <__adddi3_s8>:
    5240:	00 24       	eor	r0, r0
    5242:	a7 fd       	sbrc	r26, 7
    5244:	00 94       	com	r0
    5246:	2a 0f       	add	r18, r26
    5248:	30 1d       	adc	r19, r0
    524a:	40 1d       	adc	r20, r0
    524c:	50 1d       	adc	r21, r0
    524e:	60 1d       	adc	r22, r0
    5250:	70 1d       	adc	r23, r0
    5252:	80 1d       	adc	r24, r0
    5254:	90 1d       	adc	r25, r0
    5256:	08 95       	ret

00005258 <__subdi3>:
    5258:	2a 19       	sub	r18, r10
    525a:	3b 09       	sbc	r19, r11
    525c:	4c 09       	sbc	r20, r12
    525e:	5d 09       	sbc	r21, r13
    5260:	6e 09       	sbc	r22, r14
    5262:	7f 09       	sbc	r23, r15
    5264:	80 0b       	sbc	r24, r16
    5266:	91 0b       	sbc	r25, r17
    5268:	08 95       	ret

0000526a <__cmpdi2>:
    526a:	2a 15       	cp	r18, r10
    526c:	3b 05       	cpc	r19, r11
    526e:	4c 05       	cpc	r20, r12
    5270:	5d 05       	cpc	r21, r13
    5272:	6e 05       	cpc	r22, r14
    5274:	7f 05       	cpc	r23, r15
    5276:	80 07       	cpc	r24, r16
    5278:	91 07       	cpc	r25, r17
    527a:	08 95       	ret

0000527c <__cmpdi2_s8>:
    527c:	00 24       	eor	r0, r0
    527e:	a7 fd       	sbrc	r26, 7
    5280:	00 94       	com	r0
    5282:	2a 17       	cp	r18, r26
    5284:	30 05       	cpc	r19, r0
    5286:	40 05       	cpc	r20, r0
    5288:	50 05       	cpc	r21, r0
    528a:	60 05       	cpc	r22, r0
    528c:	70 05       	cpc	r23, r0
    528e:	80 05       	cpc	r24, r0
    5290:	90 05       	cpc	r25, r0
    5292:	08 95       	ret

00005294 <__umulhisi3>:
    5294:	a2 9f       	mul	r26, r18
    5296:	b0 01       	movw	r22, r0
    5298:	b3 9f       	mul	r27, r19
    529a:	c0 01       	movw	r24, r0
    529c:	a3 9f       	mul	r26, r19
    529e:	70 0d       	add	r23, r0
    52a0:	81 1d       	adc	r24, r1
    52a2:	11 24       	eor	r1, r1
    52a4:	91 1d       	adc	r25, r1
    52a6:	b2 9f       	mul	r27, r18
    52a8:	70 0d       	add	r23, r0
    52aa:	81 1d       	adc	r24, r1
    52ac:	11 24       	eor	r1, r1
    52ae:	91 1d       	adc	r25, r1
    52b0:	08 95       	ret

000052b2 <memcpy_P>:
    52b2:	fb 01       	movw	r30, r22
    52b4:	dc 01       	movw	r26, r24
    52b6:	02 c0       	rjmp	.+4      	; 0x52bc <memcpy_P+0xa>
    52b8:	05 90       	lpm	r0, Z+
    52ba:	0d 92       	st	X+, r0
    52bc:	41 50       	subi	r20, 0x01	; 1
    52be:	50 40       	sbci	r21, 0x00	; 0
    52c0:	d8 f7       	brcc	.-10     	; 0x52b8 <memcpy_P+0x6>
    52c2:	08 95       	ret

000052c4 <memcmp>:
    52c4:	fb 01       	movw	r30, r22
    52c6:	dc 01       	movw	r26, r24
    52c8:	04 c0       	rjmp	.+8      	; 0x52d2 <memcmp+0xe>
    52ca:	8d 91       	ld	r24, X+
    52cc:	01 90       	ld	r0, Z+
    52ce:	80 19       	sub	r24, r0
    52d0:	21 f4       	brne	.+8      	; 0x52da <memcmp+0x16>
    52d2:	41 50       	subi	r20, 0x01	; 1
    52d4:	50 40       	sbci	r21, 0x00	; 0
    52d6:	c8 f7       	brcc	.-14     	; 0x52ca <memcmp+0x6>
    52d8:	88 1b       	sub	r24, r24
    52da:	99 0b       	sbc	r25, r25
    52dc:	08 95       	ret

000052de <memcpy>:
    52de:	fb 01       	movw	r30, r22
    52e0:	dc 01       	movw	r26, r24
    52e2:	02 c0       	rjmp	.+4      	; 0x52e8 <memcpy+0xa>
    52e4:	01 90       	ld	r0, Z+
    52e6:	0d 92       	st	X+, r0
    52e8:	41 50       	subi	r20, 0x01	; 1
    52ea:	50 40       	sbci	r21, 0x00	; 0
    52ec:	d8 f7       	brcc	.-10     	; 0x52e4 <memcpy+0x6>
    52ee:	08 95       	ret

000052f0 <memset>:
    52f0:	dc 01       	movw	r26, r24
    52f2:	01 c0       	rjmp	.+2      	; 0x52f6 <memset+0x6>
    52f4:	6d 93       	st	X+, r22
    52f6:	41 50       	subi	r20, 0x01	; 1
    52f8:	50 40       	sbci	r21, 0x00	; 0
    52fa:	e0 f7       	brcc	.-8      	; 0x52f4 <memset+0x4>
    52fc:	08 95       	ret

000052fe <strchr>:
    52fe:	fc 01       	movw	r30, r24
    5300:	81 91       	ld	r24, Z+
    5302:	86 17       	cp	r24, r22
    5304:	21 f0       	breq	.+8      	; 0x530e <strchr+0x10>
    5306:	88 23       	and	r24, r24
    5308:	d9 f7       	brne	.-10     	; 0x5300 <strchr+0x2>
    530a:	99 27       	eor	r25, r25
    530c:	08 95       	ret
    530e:	31 97       	sbiw	r30, 0x01	; 1
    5310:	cf 01       	movw	r24, r30
    5312:	08 95       	ret

00005314 <strcpy>:
    5314:	fb 01       	movw	r30, r22
    5316:	dc 01       	movw	r26, r24
    5318:	01 90       	ld	r0, Z+
    531a:	0d 92       	st	X+, r0
    531c:	00 20       	and	r0, r0
    531e:	e1 f7       	brne	.-8      	; 0x5318 <strcpy+0x4>
    5320:	08 95       	ret

00005322 <puts>:
    5322:	0f 93       	push	r16
    5324:	1f 93       	push	r17
    5326:	cf 93       	push	r28
    5328:	df 93       	push	r29
    532a:	e0 91 3c 07 	lds	r30, 0x073C	; 0x80073c <__iob+0x2>
    532e:	f0 91 3d 07 	lds	r31, 0x073D	; 0x80073d <__iob+0x3>
    5332:	23 81       	ldd	r18, Z+3	; 0x03
    5334:	21 ff       	sbrs	r18, 1
    5336:	1b c0       	rjmp	.+54     	; 0x536e <puts+0x4c>
    5338:	8c 01       	movw	r16, r24
    533a:	d0 e0       	ldi	r29, 0x00	; 0
    533c:	c0 e0       	ldi	r28, 0x00	; 0
    533e:	f8 01       	movw	r30, r16
    5340:	81 91       	ld	r24, Z+
    5342:	8f 01       	movw	r16, r30
    5344:	60 91 3c 07 	lds	r22, 0x073C	; 0x80073c <__iob+0x2>
    5348:	70 91 3d 07 	lds	r23, 0x073D	; 0x80073d <__iob+0x3>
    534c:	db 01       	movw	r26, r22
    534e:	18 96       	adiw	r26, 0x08	; 8
    5350:	ed 91       	ld	r30, X+
    5352:	fc 91       	ld	r31, X
    5354:	19 97       	sbiw	r26, 0x09	; 9
    5356:	88 23       	and	r24, r24
    5358:	31 f0       	breq	.+12     	; 0x5366 <puts+0x44>
    535a:	09 95       	icall
    535c:	89 2b       	or	r24, r25
    535e:	79 f3       	breq	.-34     	; 0x533e <puts+0x1c>
    5360:	df ef       	ldi	r29, 0xFF	; 255
    5362:	cf ef       	ldi	r28, 0xFF	; 255
    5364:	ec cf       	rjmp	.-40     	; 0x533e <puts+0x1c>
    5366:	8a e0       	ldi	r24, 0x0A	; 10
    5368:	09 95       	icall
    536a:	89 2b       	or	r24, r25
    536c:	19 f0       	breq	.+6      	; 0x5374 <puts+0x52>
    536e:	8f ef       	ldi	r24, 0xFF	; 255
    5370:	9f ef       	ldi	r25, 0xFF	; 255
    5372:	02 c0       	rjmp	.+4      	; 0x5378 <puts+0x56>
    5374:	8d 2f       	mov	r24, r29
    5376:	9c 2f       	mov	r25, r28
    5378:	df 91       	pop	r29
    537a:	cf 91       	pop	r28
    537c:	1f 91       	pop	r17
    537e:	0f 91       	pop	r16
    5380:	08 95       	ret

00005382 <_exit>:
    5382:	f8 94       	cli

00005384 <__stop_program>:
    5384:	ff cf       	rjmp	.-2      	; 0x5384 <__stop_program>
