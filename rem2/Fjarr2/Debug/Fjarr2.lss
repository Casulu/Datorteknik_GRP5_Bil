
Fjarr2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000232  00800100  00001ec4  00001f58  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001ec4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000242  00800332  00800332  0000218a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000218a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000021e8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000260  00000000  00000000  00002228  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002a71  00000000  00000000  00002488  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000010f4  00000000  00000000  00004ef9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001d1b  00000000  00000000  00005fed  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000066c  00000000  00000000  00007d08  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000bc5  00000000  00000000  00008374  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000018b7  00000000  00000000  00008f39  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000220  00000000  00000000  0000a7f0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__ctors_end>
       4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
       8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
       c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      10:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      14:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      18:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      1c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      20:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      24:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      28:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      2c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      30:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      34:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      38:	0c 94 12 0a 	jmp	0x1424	; 0x1424 <__vector_14>
      3c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      40:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      44:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      48:	0c 94 72 0a 	jmp	0x14e4	; 0x14e4 <__vector_18>
      4c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      50:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      54:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      58:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      5c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      60:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      64:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      68:	ad 0a       	sbc	r10, r29
      6a:	b6 0a       	sbc	r11, r22
      6c:	bb 0a       	sbc	r11, r27
      6e:	c4 0a       	sbc	r12, r20
      70:	16 0b       	sbc	r17, r22
      72:	22 0b       	sbc	r18, r18
      74:	24 0b       	sbc	r18, r20

00000076 <__trampolines_end>:
      76:	0e 11       	cpse	r16, r14
      78:	11 11       	cpse	r17, r1
      7a:	11 11       	cpse	r17, r1
      7c:	0e 1f       	adc	r16, r30

0000007e <x_under_char>:
      7e:	11 11 0a 04 0a 11 11 1f                             ........

00000086 <under_char>:
      86:	00 00 00 00 00 00 00 1f                             ........

0000008e <o_curs_char>:
      8e:	0e 15 15 1f 15 15 0e 00                             ........

00000096 <x_curs_char>:
      96:	11 15 1f 0e 1f 15 11 00                             ........

0000009e <__ctors_end>:
      9e:	11 24       	eor	r1, r1
      a0:	1f be       	out	0x3f, r1	; 63
      a2:	cf ef       	ldi	r28, 0xFF	; 255
      a4:	d8 e0       	ldi	r29, 0x08	; 8
      a6:	de bf       	out	0x3e, r29	; 62
      a8:	cd bf       	out	0x3d, r28	; 61

000000aa <__do_copy_data>:
      aa:	13 e0       	ldi	r17, 0x03	; 3
      ac:	a0 e0       	ldi	r26, 0x00	; 0
      ae:	b1 e0       	ldi	r27, 0x01	; 1
      b0:	e4 ec       	ldi	r30, 0xC4	; 196
      b2:	fe e1       	ldi	r31, 0x1E	; 30
      b4:	02 c0       	rjmp	.+4      	; 0xba <__do_copy_data+0x10>
      b6:	05 90       	lpm	r0, Z+
      b8:	0d 92       	st	X+, r0
      ba:	a2 33       	cpi	r26, 0x32	; 50
      bc:	b1 07       	cpc	r27, r17
      be:	d9 f7       	brne	.-10     	; 0xb6 <__do_copy_data+0xc>

000000c0 <__do_clear_bss>:
      c0:	25 e0       	ldi	r18, 0x05	; 5
      c2:	a2 e3       	ldi	r26, 0x32	; 50
      c4:	b3 e0       	ldi	r27, 0x03	; 3
      c6:	01 c0       	rjmp	.+2      	; 0xca <.do_clear_bss_start>

000000c8 <.do_clear_bss_loop>:
      c8:	1d 92       	st	X+, r1

000000ca <.do_clear_bss_start>:
      ca:	a4 37       	cpi	r26, 0x74	; 116
      cc:	b2 07       	cpc	r27, r18
      ce:	e1 f7       	brne	.-8      	; 0xc8 <.do_clear_bss_loop>
      d0:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <main>
      d4:	0c 94 60 0f 	jmp	0x1ec0	; 0x1ec0 <_exit>

000000d8 <__bad_interrupt>:
      d8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000dc <adc_setup>:
#include "adc.h"

void adc_setup(){
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0) | (1 << ADEN);    // 128 prescale for 8Mhz / Enable the ADC 
      dc:	ea e7       	ldi	r30, 0x7A	; 122
      de:	f0 e0       	ldi	r31, 0x00	; 0
      e0:	80 81       	ld	r24, Z
      e2:	87 68       	ori	r24, 0x87	; 135
      e4:	80 83       	st	Z, r24
      e6:	08 95       	ret

000000e8 <adc_read>:

uint8_t adc_read(uint8_t pin){
	int ADCval;

	//Select adc pin
	ADMUX = pin;
      e8:	ec e7       	ldi	r30, 0x7C	; 124
      ea:	f0 e0       	ldi	r31, 0x00	; 0
      ec:	80 83       	st	Z, r24
	//Select AVcc as reference
	ADMUX |= (1 << REFS0);    
      ee:	80 81       	ld	r24, Z
      f0:	80 64       	ori	r24, 0x40	; 64
      f2:	80 83       	st	Z, r24

	//Start the adc
	ADCSRA |= (1 << ADSC);    
      f4:	ea e7       	ldi	r30, 0x7A	; 122
      f6:	f0 e0       	ldi	r31, 0x00	; 0
      f8:	80 81       	ld	r24, Z
      fa:	80 64       	ori	r24, 0x40	; 64
      fc:	80 83       	st	Z, r24
	// Wait for the ADC to finish
	while(ADCSRA & (1 << ADSC));      
      fe:	80 81       	ld	r24, Z
     100:	86 fd       	sbrc	r24, 6
     102:	fd cf       	rjmp	.-6      	; 0xfe <adc_read+0x16>

	//Read value from adc
	ADCval = ADCL;
     104:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
	ADCval = (ADCH << 8) + ADCval;
     108:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>

	return (uint8_t) (ADCval >> 2);
     10c:	90 e0       	ldi	r25, 0x00	; 0
     10e:	98 2f       	mov	r25, r24
     110:	88 27       	eor	r24, r24
     112:	82 0f       	add	r24, r18
     114:	91 1d       	adc	r25, r1
     116:	95 95       	asr	r25
     118:	87 95       	ror	r24
     11a:	95 95       	asr	r25
     11c:	87 95       	ror	r24
     11e:	08 95       	ret

00000120 <display_mode_instruction>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     120:	29 98       	cbi	0x05, 1	; 5
     122:	08 95       	ret

00000124 <display_mode_write>:
     124:	29 9a       	sbi	0x05, 1	; 5
     126:	08 95       	ret

00000128 <display_set_stdout>:
     128:	80 e0       	ldi	r24, 0x00	; 0
     12a:	91 e0       	ldi	r25, 0x01	; 1
     12c:	90 93 71 05 	sts	0x0571, r25	; 0x800571 <__iob+0x3>
     130:	80 93 70 05 	sts	0x0570, r24	; 0x800570 <__iob+0x2>
     134:	08 95       	ret

00000136 <spi_send_display>:
     136:	2a 98       	cbi	0x05, 2	; 5
     138:	8e bd       	out	0x2e, r24	; 46
     13a:	0d b4       	in	r0, 0x2d	; 45
     13c:	07 fe       	sbrs	r0, 7
     13e:	fd cf       	rjmp	.-6      	; 0x13a <spi_send_display+0x4>
     140:	2a 9a       	sbi	0x05, 2	; 5
     142:	08 95       	ret

00000144 <display_setup>:
     144:	0e 94 90 00 	call	0x120	; 0x120 <display_mode_instruction>
     148:	89 e3       	ldi	r24, 0x39	; 57
     14a:	0e 94 9b 00 	call	0x136	; 0x136 <spi_send_display>
     14e:	8f e9       	ldi	r24, 0x9F	; 159
     150:	9f e0       	ldi	r25, 0x0F	; 15
     152:	01 97       	sbiw	r24, 0x01	; 1
     154:	f1 f7       	brne	.-4      	; 0x152 <display_setup+0xe>
     156:	00 c0       	rjmp	.+0      	; 0x158 <display_setup+0x14>
     158:	00 00       	nop
     15a:	8d e1       	ldi	r24, 0x1D	; 29
     15c:	0e 94 9b 00 	call	0x136	; 0x136 <spi_send_display>
     160:	8f e9       	ldi	r24, 0x9F	; 159
     162:	9f e0       	ldi	r25, 0x0F	; 15
     164:	01 97       	sbiw	r24, 0x01	; 1
     166:	f1 f7       	brne	.-4      	; 0x164 <display_setup+0x20>
     168:	00 c0       	rjmp	.+0      	; 0x16a <display_setup+0x26>
     16a:	00 00       	nop
     16c:	80 e5       	ldi	r24, 0x50	; 80
     16e:	0e 94 9b 00 	call	0x136	; 0x136 <spi_send_display>
     172:	8f e9       	ldi	r24, 0x9F	; 159
     174:	9f e0       	ldi	r25, 0x0F	; 15
     176:	01 97       	sbiw	r24, 0x01	; 1
     178:	f1 f7       	brne	.-4      	; 0x176 <display_setup+0x32>
     17a:	00 c0       	rjmp	.+0      	; 0x17c <display_setup+0x38>
     17c:	00 00       	nop
     17e:	8c e6       	ldi	r24, 0x6C	; 108
     180:	0e 94 9b 00 	call	0x136	; 0x136 <spi_send_display>
     184:	8f e9       	ldi	r24, 0x9F	; 159
     186:	9f e0       	ldi	r25, 0x0F	; 15
     188:	01 97       	sbiw	r24, 0x01	; 1
     18a:	f1 f7       	brne	.-4      	; 0x188 <display_setup+0x44>
     18c:	00 c0       	rjmp	.+0      	; 0x18e <display_setup+0x4a>
     18e:	00 00       	nop
     190:	88 e7       	ldi	r24, 0x78	; 120
     192:	0e 94 9b 00 	call	0x136	; 0x136 <spi_send_display>
     196:	8f e9       	ldi	r24, 0x9F	; 159
     198:	9f e0       	ldi	r25, 0x0F	; 15
     19a:	01 97       	sbiw	r24, 0x01	; 1
     19c:	f1 f7       	brne	.-4      	; 0x19a <display_setup+0x56>
     19e:	00 c0       	rjmp	.+0      	; 0x1a0 <display_setup+0x5c>
     1a0:	00 00       	nop
     1a2:	88 e3       	ldi	r24, 0x38	; 56
     1a4:	0e 94 9b 00 	call	0x136	; 0x136 <spi_send_display>
     1a8:	8f e9       	ldi	r24, 0x9F	; 159
     1aa:	9f e0       	ldi	r25, 0x0F	; 15
     1ac:	01 97       	sbiw	r24, 0x01	; 1
     1ae:	f1 f7       	brne	.-4      	; 0x1ac <display_setup+0x68>
     1b0:	00 c0       	rjmp	.+0      	; 0x1b2 <display_setup+0x6e>
     1b2:	00 00       	nop
     1b4:	8f e0       	ldi	r24, 0x0F	; 15
     1b6:	0e 94 9b 00 	call	0x136	; 0x136 <spi_send_display>
     1ba:	8f e9       	ldi	r24, 0x9F	; 159
     1bc:	9f e0       	ldi	r25, 0x0F	; 15
     1be:	01 97       	sbiw	r24, 0x01	; 1
     1c0:	f1 f7       	brne	.-4      	; 0x1be <display_setup+0x7a>
     1c2:	00 c0       	rjmp	.+0      	; 0x1c4 <display_setup+0x80>
     1c4:	00 00       	nop
     1c6:	81 e0       	ldi	r24, 0x01	; 1
     1c8:	0e 94 9b 00 	call	0x136	; 0x136 <spi_send_display>
     1cc:	8f e9       	ldi	r24, 0x9F	; 159
     1ce:	9f e0       	ldi	r25, 0x0F	; 15
     1d0:	01 97       	sbiw	r24, 0x01	; 1
     1d2:	f1 f7       	brne	.-4      	; 0x1d0 <display_setup+0x8c>
     1d4:	00 c0       	rjmp	.+0      	; 0x1d6 <display_setup+0x92>
     1d6:	00 00       	nop
     1d8:	86 e0       	ldi	r24, 0x06	; 6
     1da:	0e 94 9b 00 	call	0x136	; 0x136 <spi_send_display>
     1de:	8f e9       	ldi	r24, 0x9F	; 159
     1e0:	9f e0       	ldi	r25, 0x0F	; 15
     1e2:	01 97       	sbiw	r24, 0x01	; 1
     1e4:	f1 f7       	brne	.-4      	; 0x1e2 <display_setup+0x9e>
     1e6:	00 c0       	rjmp	.+0      	; 0x1e8 <display_setup+0xa4>
     1e8:	00 00       	nop
     1ea:	8c e0       	ldi	r24, 0x0C	; 12
     1ec:	0e 94 9b 00 	call	0x136	; 0x136 <spi_send_display>
     1f0:	8f e9       	ldi	r24, 0x9F	; 159
     1f2:	9f e0       	ldi	r25, 0x0F	; 15
     1f4:	01 97       	sbiw	r24, 0x01	; 1
     1f6:	f1 f7       	brne	.-4      	; 0x1f4 <display_setup+0xb0>
     1f8:	00 c0       	rjmp	.+0      	; 0x1fa <display_setup+0xb6>
     1fa:	00 00       	nop
     1fc:	0e 94 92 00 	call	0x124	; 0x124 <display_mode_write>
     200:	80 e0       	ldi	r24, 0x00	; 0
     202:	91 e0       	ldi	r25, 0x01	; 1
     204:	90 93 71 05 	sts	0x0571, r25	; 0x800571 <__iob+0x3>
     208:	80 93 70 05 	sts	0x0570, r24	; 0x800570 <__iob+0x2>
     20c:	08 95       	ret

0000020e <display_write_char>:
     20e:	0e 94 9b 00 	call	0x136	; 0x136 <spi_send_display>
     212:	80 e5       	ldi	r24, 0x50	; 80
     214:	8a 95       	dec	r24
     216:	f1 f7       	brne	.-4      	; 0x214 <display_write_char+0x6>
     218:	80 e0       	ldi	r24, 0x00	; 0
     21a:	90 e0       	ldi	r25, 0x00	; 0
     21c:	08 95       	ret

0000021e <display_set_cursor_pos>:
     21e:	cf 93       	push	r28
     220:	c8 2f       	mov	r28, r24
     222:	0e 94 90 00 	call	0x120	; 0x120 <display_mode_instruction>
     226:	8c 2f       	mov	r24, r28
     228:	80 68       	ori	r24, 0x80	; 128
     22a:	0e 94 9b 00 	call	0x136	; 0x136 <spi_send_display>
     22e:	0e 94 92 00 	call	0x124	; 0x124 <display_mode_write>
     232:	80 e5       	ldi	r24, 0x50	; 80
     234:	8a 95       	dec	r24
     236:	f1 f7       	brne	.-4      	; 0x234 <display_set_cursor_pos+0x16>
     238:	cf 91       	pop	r28
     23a:	08 95       	ret

0000023c <display_clear>:
     23c:	0e 94 90 00 	call	0x120	; 0x120 <display_mode_instruction>
     240:	81 e0       	ldi	r24, 0x01	; 1
     242:	0e 94 9b 00 	call	0x136	; 0x136 <spi_send_display>
     246:	0e 94 92 00 	call	0x124	; 0x124 <display_mode_write>
     24a:	8f e9       	ldi	r24, 0x9F	; 159
     24c:	9f e0       	ldi	r25, 0x0F	; 15
     24e:	01 97       	sbiw	r24, 0x01	; 1
     250:	f1 f7       	brne	.-4      	; 0x24e <display_clear+0x12>
     252:	00 c0       	rjmp	.+0      	; 0x254 <display_clear+0x18>
     254:	00 00       	nop
     256:	08 95       	ret

00000258 <display_clear_line>:
     258:	cf 93       	push	r28
     25a:	82 95       	swap	r24
     25c:	80 7f       	andi	r24, 0xF0	; 240
     25e:	0e 94 0f 01 	call	0x21e	; 0x21e <display_set_cursor_pos>
     262:	c0 e1       	ldi	r28, 0x10	; 16
     264:	80 e2       	ldi	r24, 0x20	; 32
     266:	0e 94 9b 00 	call	0x136	; 0x136 <spi_send_display>
     26a:	80 e5       	ldi	r24, 0x50	; 80
     26c:	8a 95       	dec	r24
     26e:	f1 f7       	brne	.-4      	; 0x26c <display_clear_line+0x14>
     270:	c1 50       	subi	r28, 0x01	; 1
     272:	c1 f7       	brne	.-16     	; 0x264 <display_clear_line+0xc>
     274:	cf 91       	pop	r28
     276:	08 95       	ret

00000278 <display_clear_top_rows>:
     278:	cf 93       	push	r28
     27a:	80 e0       	ldi	r24, 0x00	; 0
     27c:	0e 94 0f 01 	call	0x21e	; 0x21e <display_set_cursor_pos>
     280:	c0 e2       	ldi	r28, 0x20	; 32
     282:	80 e2       	ldi	r24, 0x20	; 32
     284:	0e 94 9b 00 	call	0x136	; 0x136 <spi_send_display>
     288:	80 e5       	ldi	r24, 0x50	; 80
     28a:	8a 95       	dec	r24
     28c:	f1 f7       	brne	.-4      	; 0x28a <display_clear_top_rows+0x12>
     28e:	c1 50       	subi	r28, 0x01	; 1
     290:	c1 f7       	brne	.-16     	; 0x282 <display_clear_top_rows+0xa>
     292:	80 e0       	ldi	r24, 0x00	; 0
     294:	0e 94 0f 01 	call	0x21e	; 0x21e <display_set_cursor_pos>
     298:	cf 91       	pop	r28
     29a:	08 95       	ret

0000029c <display_set_character_pgm>:
	PORTB &= 0b11111001;
	spi_send_display(0b00001000);
	_delay_us(30);
}

void display_set_character_pgm(uint8_t char_code, const uint8_t rows[8]){
     29c:	0f 93       	push	r16
     29e:	1f 93       	push	r17
     2a0:	cf 93       	push	r28
     2a2:	df 93       	push	r29
     2a4:	28 e0       	ldi	r18, 0x08	; 8
     2a6:	82 9f       	mul	r24, r18
     2a8:	c0 01       	movw	r24, r0
     2aa:	11 24       	eor	r1, r1
     2ac:	d8 2f       	mov	r29, r24
     2ae:	d0 64       	ori	r29, 0x40	; 64
     2b0:	06 2f       	mov	r16, r22
     2b2:	17 2f       	mov	r17, r23
	for (uint8_t i = 0; i < 8; i++){
     2b4:	c0 e0       	ldi	r28, 0x00	; 0
		//Set CGRAM address
		display_mode_instruction();
     2b6:	0e 94 90 00 	call	0x120	; 0x120 <display_mode_instruction>
		spi_send_display(0x40|(char_code<<3)|(i));
     2ba:	8c 2f       	mov	r24, r28
     2bc:	8d 2b       	or	r24, r29
     2be:	0e 94 9b 00 	call	0x136	; 0x136 <spi_send_display>
     2c2:	80 e5       	ldi	r24, 0x50	; 80
     2c4:	8a 95       	dec	r24
     2c6:	f1 f7       	brne	.-4      	; 0x2c4 <display_set_character_pgm+0x28>
		_delay_us(30);
		//Write row to character
		display_mode_write();
     2c8:	0e 94 92 00 	call	0x124	; 0x124 <display_mode_write>
		spi_send_display(pgm_read_byte(&(rows[i])));
     2cc:	f8 01       	movw	r30, r16
     2ce:	84 91       	lpm	r24, Z
     2d0:	0e 94 9b 00 	call	0x136	; 0x136 <spi_send_display>
     2d4:	f0 e5       	ldi	r31, 0x50	; 80
     2d6:	fa 95       	dec	r31
     2d8:	f1 f7       	brne	.-4      	; 0x2d6 <display_set_character_pgm+0x3a>
	spi_send_display(0b00001000);
	_delay_us(30);
}

void display_set_character_pgm(uint8_t char_code, const uint8_t rows[8]){
	for (uint8_t i = 0; i < 8; i++){
     2da:	cf 5f       	subi	r28, 0xFF	; 255
     2dc:	0f 5f       	subi	r16, 0xFF	; 255
     2de:	1f 4f       	sbci	r17, 0xFF	; 255
     2e0:	c8 30       	cpi	r28, 0x08	; 8
     2e2:	49 f7       	brne	.-46     	; 0x2b6 <display_set_character_pgm+0x1a>
		//Write row to character
		display_mode_write();
		spi_send_display(pgm_read_byte(&(rows[i])));
		_delay_us(30);
	}
     2e4:	df 91       	pop	r29
     2e6:	cf 91       	pop	r28
     2e8:	1f 91       	pop	r17
     2ea:	0f 91       	pop	r16
     2ec:	08 95       	ret

000002ee <fiveinarow_init>:
static const uint8_t under_char[8] PROGMEM = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F};
static const uint8_t x_under_char[8] PROGMEM = {0x11, 0x11, 0x0A, 0x04, 0x0A, 0x11, 0x11, 0x1F};
static const uint8_t o_under_char[8] PROGMEM = {0x0E, 0x11, 0x11, 0x11, 0x11, 0x11, 0x0E, 0x1F};

void fiveinarow_init(){
	display_set_character_pgm(X_CURS_CODE, x_curs_char);
     2ee:	66 e9       	ldi	r22, 0x96	; 150
     2f0:	70 e0       	ldi	r23, 0x00	; 0
     2f2:	81 e0       	ldi	r24, 0x01	; 1
     2f4:	0e 94 4e 01 	call	0x29c	; 0x29c <display_set_character_pgm>
	display_set_character_pgm(O_CURS_CODE, o_curs_char);
     2f8:	6e e8       	ldi	r22, 0x8E	; 142
     2fa:	70 e0       	ldi	r23, 0x00	; 0
     2fc:	82 e0       	ldi	r24, 0x02	; 2
     2fe:	0e 94 4e 01 	call	0x29c	; 0x29c <display_set_character_pgm>
	display_set_character_pgm(UNDER_CODE, under_char);
     302:	66 e8       	ldi	r22, 0x86	; 134
     304:	70 e0       	ldi	r23, 0x00	; 0
     306:	83 e0       	ldi	r24, 0x03	; 3
     308:	0e 94 4e 01 	call	0x29c	; 0x29c <display_set_character_pgm>
	display_set_character_pgm(X_UNDER_CODE, x_under_char);
     30c:	6e e7       	ldi	r22, 0x7E	; 126
     30e:	70 e0       	ldi	r23, 0x00	; 0
     310:	84 e0       	ldi	r24, 0x04	; 4
     312:	0e 94 4e 01 	call	0x29c	; 0x29c <display_set_character_pgm>
	display_set_character_pgm(O_UNDER_CODE, o_under_char);
     316:	66 e7       	ldi	r22, 0x76	; 118
     318:	70 e0       	ldi	r23, 0x00	; 0
     31a:	85 e0       	ldi	r24, 0x05	; 5
     31c:	0e 94 4e 01 	call	0x29c	; 0x29c <display_set_character_pgm>
     320:	08 95       	ret

00000322 <fiveinarow_setup>:
}

void fiveinarow_setup(bool turn){
	row_cursor_x = 7;
     322:	97 e0       	ldi	r25, 0x07	; 7
     324:	90 93 36 03 	sts	0x0336, r25	; 0x800336 <row_cursor_x>
	row_cursor_y = 7;
     328:	90 93 35 03 	sts	0x0335, r25	; 0x800335 <row_cursor_y>
	row_display_pos = 6;
     32c:	96 e0       	ldi	r25, 0x06	; 6
     32e:	90 93 32 03 	sts	0x0332, r25	; 0x800332 <__data_end>
	row_turn = turn;
     332:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <row_turn>
     336:	20 e0       	ldi	r18, 0x00	; 0
     338:	30 e0       	ldi	r19, 0x00	; 0
	
	for(uint8_t q = 0; q < 15; q++){
		for(uint8_t i = 0; i < 15; i++){
			row_markers[i][q] = ' ';
     33a:	5f e0       	ldi	r21, 0x0F	; 15
     33c:	40 e2       	ldi	r20, 0x20	; 32
     33e:	13 c0       	rjmp	.+38     	; 0x366 <fiveinarow_setup+0x44>
     340:	58 9f       	mul	r21, r24
     342:	f0 01       	movw	r30, r0
     344:	59 9f       	mul	r21, r25
     346:	f0 0d       	add	r31, r0
     348:	11 24       	eor	r1, r1
     34a:	e2 51       	subi	r30, 0x12	; 18
     34c:	fc 4f       	sbci	r31, 0xFC	; 252
     34e:	e2 0f       	add	r30, r18
     350:	f3 1f       	adc	r31, r19
     352:	40 83       	st	Z, r20
     354:	01 96       	adiw	r24, 0x01	; 1
	row_cursor_y = 7;
	row_display_pos = 6;
	row_turn = turn;
	
	for(uint8_t q = 0; q < 15; q++){
		for(uint8_t i = 0; i < 15; i++){
     356:	8f 30       	cpi	r24, 0x0F	; 15
     358:	91 05       	cpc	r25, r1
     35a:	91 f7       	brne	.-28     	; 0x340 <fiveinarow_setup+0x1e>
     35c:	2f 5f       	subi	r18, 0xFF	; 255
     35e:	3f 4f       	sbci	r19, 0xFF	; 255
	row_cursor_x = 7;
	row_cursor_y = 7;
	row_display_pos = 6;
	row_turn = turn;
	
	for(uint8_t q = 0; q < 15; q++){
     360:	2f 30       	cpi	r18, 0x0F	; 15
     362:	31 05       	cpc	r19, r1
     364:	19 f0       	breq	.+6      	; 0x36c <fiveinarow_setup+0x4a>
	display_set_character_pgm(UNDER_CODE, under_char);
	display_set_character_pgm(X_UNDER_CODE, x_under_char);
	display_set_character_pgm(O_UNDER_CODE, o_under_char);
}

void fiveinarow_setup(bool turn){
     366:	80 e0       	ldi	r24, 0x00	; 0
     368:	90 e0       	ldi	r25, 0x00	; 0
     36a:	ea cf       	rjmp	.-44     	; 0x340 <fiveinarow_setup+0x1e>
     36c:	08 95       	ret

0000036e <fiveinarow_left>:
			row_markers[i][q] = ' ';
		}
	}
}
void fiveinarow_left(){
	if(row_cursor_x == 0)row_cursor_x = 1;
     36e:	80 91 36 03 	lds	r24, 0x0336	; 0x800336 <row_cursor_x>
     372:	81 11       	cpse	r24, r1
     374:	03 c0       	rjmp	.+6      	; 0x37c <fiveinarow_left+0xe>
     376:	81 e0       	ldi	r24, 0x01	; 1
     378:	80 93 36 03 	sts	0x0336, r24	; 0x800336 <row_cursor_x>
	row_cursor_x--;
     37c:	80 91 36 03 	lds	r24, 0x0336	; 0x800336 <row_cursor_x>
     380:	81 50       	subi	r24, 0x01	; 1
     382:	80 93 36 03 	sts	0x0336, r24	; 0x800336 <row_cursor_x>
     386:	08 95       	ret

00000388 <fiveinarow_right>:
}
void fiveinarow_right(){
	row_cursor_x++;
     388:	80 91 36 03 	lds	r24, 0x0336	; 0x800336 <row_cursor_x>
     38c:	8f 5f       	subi	r24, 0xFF	; 255
     38e:	80 93 36 03 	sts	0x0336, r24	; 0x800336 <row_cursor_x>
	if(row_cursor_x > 14)row_cursor_x = 14;
     392:	80 91 36 03 	lds	r24, 0x0336	; 0x800336 <row_cursor_x>
     396:	8f 30       	cpi	r24, 0x0F	; 15
     398:	18 f0       	brcs	.+6      	; 0x3a0 <fiveinarow_right+0x18>
     39a:	8e e0       	ldi	r24, 0x0E	; 14
     39c:	80 93 36 03 	sts	0x0336, r24	; 0x800336 <row_cursor_x>
     3a0:	08 95       	ret

000003a2 <fiveinarow_up>:
}
void fiveinarow_up(){
	if(row_cursor_y == 0)row_cursor_y = 1;
     3a2:	80 91 35 03 	lds	r24, 0x0335	; 0x800335 <row_cursor_y>
     3a6:	81 11       	cpse	r24, r1
     3a8:	03 c0       	rjmp	.+6      	; 0x3b0 <fiveinarow_up+0xe>
     3aa:	81 e0       	ldi	r24, 0x01	; 1
     3ac:	80 93 35 03 	sts	0x0335, r24	; 0x800335 <row_cursor_y>
	row_cursor_y--;
     3b0:	80 91 35 03 	lds	r24, 0x0335	; 0x800335 <row_cursor_y>
     3b4:	81 50       	subi	r24, 0x01	; 1
     3b6:	80 93 35 03 	sts	0x0335, r24	; 0x800335 <row_cursor_y>
	
	if(row_cursor_y < row_display_pos)row_display_pos = row_cursor_y;
     3ba:	90 91 35 03 	lds	r25, 0x0335	; 0x800335 <row_cursor_y>
     3be:	80 91 32 03 	lds	r24, 0x0332	; 0x800332 <__data_end>
     3c2:	98 17       	cp	r25, r24
     3c4:	20 f4       	brcc	.+8      	; 0x3ce <fiveinarow_up+0x2c>
     3c6:	80 91 35 03 	lds	r24, 0x0335	; 0x800335 <row_cursor_y>
     3ca:	80 93 32 03 	sts	0x0332, r24	; 0x800332 <__data_end>
     3ce:	08 95       	ret

000003d0 <fiveinarow_down>:
}
void fiveinarow_down(){
	row_cursor_y++;
     3d0:	80 91 35 03 	lds	r24, 0x0335	; 0x800335 <row_cursor_y>
     3d4:	8f 5f       	subi	r24, 0xFF	; 255
     3d6:	80 93 35 03 	sts	0x0335, r24	; 0x800335 <row_cursor_y>
	if(row_cursor_y > 14)row_cursor_y = 14;
     3da:	80 91 35 03 	lds	r24, 0x0335	; 0x800335 <row_cursor_y>
     3de:	8f 30       	cpi	r24, 0x0F	; 15
     3e0:	18 f0       	brcs	.+6      	; 0x3e8 <fiveinarow_down+0x18>
     3e2:	8e e0       	ldi	r24, 0x0E	; 14
     3e4:	80 93 35 03 	sts	0x0335, r24	; 0x800335 <row_cursor_y>
	
	if(row_cursor_y > row_display_pos+2)row_display_pos = row_cursor_y-2;
     3e8:	20 91 35 03 	lds	r18, 0x0335	; 0x800335 <row_cursor_y>
     3ec:	80 91 32 03 	lds	r24, 0x0332	; 0x800332 <__data_end>
     3f0:	30 e0       	ldi	r19, 0x00	; 0
     3f2:	90 e0       	ldi	r25, 0x00	; 0
     3f4:	02 96       	adiw	r24, 0x02	; 2
     3f6:	82 17       	cp	r24, r18
     3f8:	93 07       	cpc	r25, r19
     3fa:	2c f4       	brge	.+10     	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
     3fc:	80 91 35 03 	lds	r24, 0x0335	; 0x800335 <row_cursor_y>
     400:	82 50       	subi	r24, 0x02	; 2
     402:	80 93 32 03 	sts	0x0332, r24	; 0x800332 <__data_end>
     406:	08 95       	ret

00000408 <fiveinarow_place>:
}
void fiveinarow_place(char* message, char topic){
	if(row_turn && row_markers[row_cursor_x][row_cursor_y] == ' '){
     408:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <row_turn>
     40c:	22 23       	and	r18, r18
     40e:	a9 f1       	breq	.+106    	; 0x47a <fiveinarow_place+0x72>
     410:	e0 91 36 03 	lds	r30, 0x0336	; 0x800336 <row_cursor_x>
     414:	20 91 35 03 	lds	r18, 0x0335	; 0x800335 <row_cursor_y>
     418:	3f e0       	ldi	r19, 0x0F	; 15
     41a:	e3 9f       	mul	r30, r19
     41c:	f0 01       	movw	r30, r0
     41e:	11 24       	eor	r1, r1
     420:	e2 51       	subi	r30, 0x12	; 18
     422:	fc 4f       	sbci	r31, 0xFC	; 252
     424:	e2 0f       	add	r30, r18
     426:	f1 1d       	adc	r31, r1
     428:	20 81       	ld	r18, Z
     42a:	20 32       	cpi	r18, 0x20	; 32
     42c:	31 f5       	brne	.+76     	; 0x47a <fiveinarow_place+0x72>
		row_last_x = row_cursor_x;
     42e:	20 91 36 03 	lds	r18, 0x0336	; 0x800336 <row_cursor_x>
     432:	20 93 34 03 	sts	0x0334, r18	; 0x800334 <row_last_x>
		row_last_y = row_cursor_y;
     436:	20 91 35 03 	lds	r18, 0x0335	; 0x800335 <row_cursor_y>
     43a:	20 93 33 03 	sts	0x0333, r18	; 0x800333 <row_last_y>
		row_turn = false;
     43e:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <row_turn>
		
		row_markers[row_cursor_x][row_cursor_y] = 'X';
     442:	e0 91 36 03 	lds	r30, 0x0336	; 0x800336 <row_cursor_x>
     446:	20 91 35 03 	lds	r18, 0x0335	; 0x800335 <row_cursor_y>
     44a:	3f e0       	ldi	r19, 0x0F	; 15
     44c:	e3 9f       	mul	r30, r19
     44e:	f0 01       	movw	r30, r0
     450:	11 24       	eor	r1, r1
     452:	e2 51       	subi	r30, 0x12	; 18
     454:	fc 4f       	sbci	r31, 0xFC	; 252
     456:	e2 0f       	add	r30, r18
     458:	f1 1d       	adc	r31, r1
     45a:	28 e5       	ldi	r18, 0x58	; 88
     45c:	20 83       	st	Z, r18
		message[0] = topic;
     45e:	fc 01       	movw	r30, r24
     460:	60 83       	st	Z, r22
		message[1] = '3';
     462:	23 e3       	ldi	r18, 0x33	; 51
     464:	21 83       	std	Z+1, r18	; 0x01
		message[2] = row_cursor_x+48;
     466:	20 91 36 03 	lds	r18, 0x0336	; 0x800336 <row_cursor_x>
     46a:	20 5d       	subi	r18, 0xD0	; 208
     46c:	22 83       	std	Z+2, r18	; 0x02
		message[3] = row_cursor_y+48;
     46e:	20 91 35 03 	lds	r18, 0x0335	; 0x800335 <row_cursor_y>
     472:	20 5d       	subi	r18, 0xD0	; 208
     474:	23 83       	std	Z+3, r18	; 0x03
		message[4] = '\0';
     476:	14 82       	std	Z+4, r1	; 0x04
     478:	08 95       	ret
	}else{
		message[0] = '\0';
     47a:	fc 01       	movw	r30, r24
     47c:	10 82       	st	Z, r1
     47e:	08 95       	ret

00000480 <fiveinarow_recive>:
	}
	
}
void fiveinarow_recive(char* message){
     480:	fc 01       	movw	r30, r24
	row_turn = true;
     482:	81 e0       	ldi	r24, 0x01	; 1
     484:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <row_turn>

	row_last_x = message[2]-48;
     488:	92 81       	ldd	r25, Z+2	; 0x02
     48a:	90 53       	subi	r25, 0x30	; 48
     48c:	90 93 34 03 	sts	0x0334, r25	; 0x800334 <row_last_x>
	row_last_y = message[3]-48;
     490:	83 81       	ldd	r24, Z+3	; 0x03
     492:	80 53       	subi	r24, 0x30	; 48
     494:	80 93 33 03 	sts	0x0333, r24	; 0x800333 <row_last_y>
	
	row_cursor_x = row_last_x;
     498:	80 91 34 03 	lds	r24, 0x0334	; 0x800334 <row_last_x>
     49c:	80 93 36 03 	sts	0x0336, r24	; 0x800336 <row_cursor_x>
	row_cursor_y = row_last_y;
     4a0:	80 91 33 03 	lds	r24, 0x0333	; 0x800333 <row_last_y>
     4a4:	80 93 35 03 	sts	0x0335, r24	; 0x800335 <row_cursor_y>
	
	row_markers[row_last_x][row_last_y] = 'O';
     4a8:	e0 91 34 03 	lds	r30, 0x0334	; 0x800334 <row_last_x>
     4ac:	80 91 33 03 	lds	r24, 0x0333	; 0x800333 <row_last_y>
     4b0:	9f e0       	ldi	r25, 0x0F	; 15
     4b2:	e9 9f       	mul	r30, r25
     4b4:	f0 01       	movw	r30, r0
     4b6:	11 24       	eor	r1, r1
     4b8:	e2 51       	subi	r30, 0x12	; 18
     4ba:	fc 4f       	sbci	r31, 0xFC	; 252
     4bc:	e8 0f       	add	r30, r24
     4be:	f1 1d       	adc	r31, r1
     4c0:	8f e4       	ldi	r24, 0x4F	; 79
     4c2:	80 83       	st	Z, r24
	if(row_last_y < row_display_pos){
     4c4:	90 91 33 03 	lds	r25, 0x0333	; 0x800333 <row_last_y>
     4c8:	80 91 32 03 	lds	r24, 0x0332	; 0x800332 <__data_end>
     4cc:	98 17       	cp	r25, r24
     4ce:	20 f4       	brcc	.+8      	; 0x4d8 <fiveinarow_recive+0x58>
		row_display_pos = row_last_y;
     4d0:	80 91 33 03 	lds	r24, 0x0333	; 0x800333 <row_last_y>
     4d4:	80 93 32 03 	sts	0x0332, r24	; 0x800332 <__data_end>
		//if(row_cursor_y < row_display_pos)row_cursor_y = row_display_pos;
	}
	if(row_last_y > row_display_pos+2){
     4d8:	20 91 33 03 	lds	r18, 0x0333	; 0x800333 <row_last_y>
     4dc:	80 91 32 03 	lds	r24, 0x0332	; 0x800332 <__data_end>
     4e0:	30 e0       	ldi	r19, 0x00	; 0
     4e2:	90 e0       	ldi	r25, 0x00	; 0
     4e4:	02 96       	adiw	r24, 0x02	; 2
     4e6:	82 17       	cp	r24, r18
     4e8:	93 07       	cpc	r25, r19
     4ea:	2c f4       	brge	.+10     	; 0x4f6 <fiveinarow_recive+0x76>
		row_display_pos = row_last_y-2;
     4ec:	80 91 33 03 	lds	r24, 0x0333	; 0x800333 <row_last_y>
     4f0:	82 50       	subi	r24, 0x02	; 2
     4f2:	80 93 32 03 	sts	0x0332, r24	; 0x800332 <__data_end>
     4f6:	08 95       	ret

000004f8 <fiveinarow_render>:
		//if(row_cursor_y > row_display_pos+2)row_cursor_y = row_display_pos+2;
	}
}
void fiveinarow_render(char* row_buf){
     4f8:	cf 93       	push	r28
     4fa:	dc 01       	movw	r26, r24
		row_buf[((row_cursor_y-row_display_pos)*16)+row_cursor_x+1] = '_';
	}
	row_buf[48] = '\0';*/
	
	uint8_t index = 0;
	for(uint8_t q = row_display_pos; q < row_display_pos+3; q++){
     4fc:	c0 91 32 03 	lds	r28, 0x0332	; 0x800332 <__data_end>
     500:	6c 2f       	mov	r22, r28
     502:	70 e0       	ldi	r23, 0x00	; 0
     504:	80 91 32 03 	lds	r24, 0x0332	; 0x800332 <__data_end>
     508:	90 e0       	ldi	r25, 0x00	; 0
     50a:	03 96       	adiw	r24, 0x03	; 3
     50c:	68 17       	cp	r22, r24
     50e:	79 07       	cpc	r23, r25
     510:	a4 f5       	brge	.+104    	; 0x57a <fiveinarow_render+0x82>
     512:	50 e0       	ldi	r21, 0x00	; 0
			row_buf[index] = q+56;
		}
		index++;
		    
		for(uint8_t i = 0; i < 15; i++){
			row_buf[index] = row_markers[i][q];
     514:	8f e0       	ldi	r24, 0x0F	; 15
	}
	row_buf[48] = '\0';*/
	
	uint8_t index = 0;
	for(uint8_t q = row_display_pos; q < row_display_pos+3; q++){
		if(q < 9){
     516:	c9 30       	cpi	r28, 0x09	; 9
     518:	38 f4       	brcc	.+14     	; 0x528 <fiveinarow_render+0x30>
			row_buf[index] = q+49;
     51a:	fd 01       	movw	r30, r26
     51c:	e5 0f       	add	r30, r21
     51e:	f1 1d       	adc	r31, r1
     520:	91 e3       	ldi	r25, 0x31	; 49
     522:	9c 0f       	add	r25, r28
     524:	90 83       	st	Z, r25
     526:	06 c0       	rjmp	.+12     	; 0x534 <fiveinarow_render+0x3c>
			}else{
			row_buf[index] = q+56;
     528:	fd 01       	movw	r30, r26
     52a:	e5 0f       	add	r30, r21
     52c:	f1 1d       	adc	r31, r1
     52e:	98 e3       	ldi	r25, 0x38	; 56
     530:	9c 0f       	add	r25, r28
     532:	90 83       	st	Z, r25
		}
		index++;
     534:	91 e0       	ldi	r25, 0x01	; 1
     536:	95 0f       	add	r25, r21
     538:	50 5f       	subi	r21, 0xF0	; 240
     53a:	20 e0       	ldi	r18, 0x00	; 0
     53c:	30 e0       	ldi	r19, 0x00	; 0
		    
		for(uint8_t i = 0; i < 15; i++){
			row_buf[index] = row_markers[i][q];
     53e:	82 9f       	mul	r24, r18
     540:	f0 01       	movw	r30, r0
     542:	83 9f       	mul	r24, r19
     544:	f0 0d       	add	r31, r0
     546:	11 24       	eor	r1, r1
     548:	e2 51       	subi	r30, 0x12	; 18
     54a:	fc 4f       	sbci	r31, 0xFC	; 252
     54c:	e6 0f       	add	r30, r22
     54e:	f7 1f       	adc	r31, r23
     550:	40 81       	ld	r20, Z
     552:	fd 01       	movw	r30, r26
     554:	e9 0f       	add	r30, r25
     556:	f1 1d       	adc	r31, r1
     558:	40 83       	st	Z, r20
			index++;
     55a:	9f 5f       	subi	r25, 0xFF	; 255
     55c:	2f 5f       	subi	r18, 0xFF	; 255
     55e:	3f 4f       	sbci	r19, 0xFF	; 255
			}else{
			row_buf[index] = q+56;
		}
		index++;
		    
		for(uint8_t i = 0; i < 15; i++){
     560:	59 13       	cpse	r21, r25
     562:	ed cf       	rjmp	.-38     	; 0x53e <fiveinarow_render+0x46>
		row_buf[((row_cursor_y-row_display_pos)*16)+row_cursor_x+1] = '_';
	}
	row_buf[48] = '\0';*/
	
	uint8_t index = 0;
	for(uint8_t q = row_display_pos; q < row_display_pos+3; q++){
     564:	cf 5f       	subi	r28, 0xFF	; 255
     566:	6c 2f       	mov	r22, r28
     568:	70 e0       	ldi	r23, 0x00	; 0
     56a:	20 91 32 03 	lds	r18, 0x0332	; 0x800332 <__data_end>
     56e:	30 e0       	ldi	r19, 0x00	; 0
     570:	2d 5f       	subi	r18, 0xFD	; 253
     572:	3f 4f       	sbci	r19, 0xFF	; 255
     574:	62 17       	cp	r22, r18
     576:	73 07       	cpc	r23, r19
     578:	74 f2       	brlt	.-100    	; 0x516 <fiveinarow_render+0x1e>
		for(uint8_t i = 0; i < 15; i++){
			row_buf[index] = row_markers[i][q];
			index++;
		}
	}
	uint8_t cursor_string_pos = ((row_cursor_y-row_display_pos)*16)+row_cursor_x+1;
     57a:	90 91 35 03 	lds	r25, 0x0335	; 0x800335 <row_cursor_y>
     57e:	20 91 32 03 	lds	r18, 0x0332	; 0x800332 <__data_end>
     582:	80 91 36 03 	lds	r24, 0x0336	; 0x800336 <row_cursor_x>
     586:	92 1b       	sub	r25, r18
     588:	8f 5f       	subi	r24, 0xFF	; 255
     58a:	20 e1       	ldi	r18, 0x10	; 16
     58c:	92 9f       	mul	r25, r18
     58e:	80 0d       	add	r24, r0
     590:	11 24       	eor	r1, r1
	if(row_turn){
     592:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <row_turn>
     596:	99 23       	and	r25, r25
     598:	89 f0       	breq	.+34     	; 0x5bc <fiveinarow_render+0xc4>
		switch(row_buf[cursor_string_pos]){
     59a:	fd 01       	movw	r30, r26
     59c:	e8 0f       	add	r30, r24
     59e:	f1 1d       	adc	r31, r1
     5a0:	80 81       	ld	r24, Z
     5a2:	8f 34       	cpi	r24, 0x4F	; 79
     5a4:	29 f0       	breq	.+10     	; 0x5b0 <fiveinarow_render+0xb8>
     5a6:	88 35       	cpi	r24, 0x58	; 88
     5a8:	31 f4       	brne	.+12     	; 0x5b6 <fiveinarow_render+0xbe>
			case 'X':
				row_buf[cursor_string_pos] = X_CURS_CODE;
     5aa:	81 e0       	ldi	r24, 0x01	; 1
     5ac:	80 83       	st	Z, r24
			break;
     5ae:	16 c0       	rjmp	.+44     	; 0x5dc <fiveinarow_render+0xe4>
			case 'O':
				row_buf[cursor_string_pos] = O_CURS_CODE;
     5b0:	82 e0       	ldi	r24, 0x02	; 2
     5b2:	80 83       	st	Z, r24
			break;
     5b4:	13 c0       	rjmp	.+38     	; 0x5dc <fiveinarow_render+0xe4>
			default:
				row_buf[cursor_string_pos] = '*';
     5b6:	8a e2       	ldi	r24, 0x2A	; 42
     5b8:	80 83       	st	Z, r24
			break;
     5ba:	10 c0       	rjmp	.+32     	; 0x5dc <fiveinarow_render+0xe4>
		}
		}else{
		switch(row_buf[cursor_string_pos]){
     5bc:	fd 01       	movw	r30, r26
     5be:	e8 0f       	add	r30, r24
     5c0:	f1 1d       	adc	r31, r1
     5c2:	80 81       	ld	r24, Z
     5c4:	8f 34       	cpi	r24, 0x4F	; 79
     5c6:	29 f0       	breq	.+10     	; 0x5d2 <fiveinarow_render+0xda>
     5c8:	88 35       	cpi	r24, 0x58	; 88
     5ca:	31 f4       	brne	.+12     	; 0x5d8 <fiveinarow_render+0xe0>
			case 'X':
				row_buf[cursor_string_pos] = X_UNDER_CODE;
     5cc:	84 e0       	ldi	r24, 0x04	; 4
     5ce:	80 83       	st	Z, r24
			break;
     5d0:	05 c0       	rjmp	.+10     	; 0x5dc <fiveinarow_render+0xe4>
			case 'O':
				row_buf[cursor_string_pos] = O_UNDER_CODE;
     5d2:	85 e0       	ldi	r24, 0x05	; 5
     5d4:	80 83       	st	Z, r24
			break;
     5d6:	02 c0       	rjmp	.+4      	; 0x5dc <fiveinarow_render+0xe4>
			default:
				row_buf[cursor_string_pos] = UNDER_CODE;
     5d8:	83 e0       	ldi	r24, 0x03	; 3
     5da:	80 83       	st	Z, r24
			break;
		}
	}
	    
	row_buf[48] = '\0';
     5dc:	d0 96       	adiw	r26, 0x30	; 48
     5de:	1c 92       	st	X, r1
}
     5e0:	cf 91       	pop	r28
     5e2:	08 95       	ret

000005e4 <fiveinarow_is_char>:
	return false;
}

//Internal helper functions
bool fiveinarow_is_char(uint8_t x, uint8_t y, char c){
	if(x > 14)return false;
     5e4:	8f 30       	cpi	r24, 0x0F	; 15
     5e6:	80 f4       	brcc	.+32     	; 0x608 <fiveinarow_is_char+0x24>
	if(y > 14)return false;
     5e8:	6f 30       	cpi	r22, 0x0F	; 15
     5ea:	80 f4       	brcc	.+32     	; 0x60c <fiveinarow_is_char+0x28>
	if(row_markers[x][y] == c)return true;
     5ec:	9f e0       	ldi	r25, 0x0F	; 15
     5ee:	89 9f       	mul	r24, r25
     5f0:	f0 01       	movw	r30, r0
     5f2:	11 24       	eor	r1, r1
     5f4:	e2 51       	subi	r30, 0x12	; 18
     5f6:	fc 4f       	sbci	r31, 0xFC	; 252
     5f8:	e6 0f       	add	r30, r22
     5fa:	f1 1d       	adc	r31, r1
     5fc:	90 81       	ld	r25, Z
     5fe:	81 e0       	ldi	r24, 0x01	; 1
     600:	94 17       	cp	r25, r20
     602:	29 f0       	breq	.+10     	; 0x60e <fiveinarow_is_char+0x2a>
     604:	80 e0       	ldi	r24, 0x00	; 0
     606:	08 95       	ret
	return false;
}

//Internal helper functions
bool fiveinarow_is_char(uint8_t x, uint8_t y, char c){
	if(x > 14)return false;
     608:	80 e0       	ldi	r24, 0x00	; 0
     60a:	08 95       	ret
	if(y > 14)return false;
     60c:	80 e0       	ldi	r24, 0x00	; 0
	if(row_markers[x][y] == c)return true;
	return false;
     60e:	08 95       	ret

00000610 <fiveinarow_check_win>:
	}
	    
	row_buf[48] = '\0';
}

bool fiveinarow_check_win(){
     610:	ff 92       	push	r15
     612:	0f 93       	push	r16
     614:	1f 93       	push	r17
     616:	cf 93       	push	r28
     618:	df 93       	push	r29
	char last_player = row_markers[row_last_x][row_last_y];
     61a:	e0 91 34 03 	lds	r30, 0x0334	; 0x800334 <row_last_x>
     61e:	80 91 33 03 	lds	r24, 0x0333	; 0x800333 <row_last_y>
     622:	9f e0       	ldi	r25, 0x0F	; 15
     624:	e9 9f       	mul	r30, r25
     626:	f0 01       	movw	r30, r0
     628:	11 24       	eor	r1, r1
     62a:	e2 51       	subi	r30, 0x12	; 18
     62c:	fc 4f       	sbci	r31, 0xFC	; 252
     62e:	e8 0f       	add	r30, r24
     630:	f1 1d       	adc	r31, r1
     632:	c0 81       	ld	r28, Z
	uint8_t test_x;
	uint8_t test_y;
	
	//Horizontal
	row_lenght = 1;
	test_x = row_last_x;
     634:	10 91 34 03 	lds	r17, 0x0334	; 0x800334 <row_last_x>
	test_y = row_last_y;
     638:	00 91 33 03 	lds	r16, 0x0333	; 0x800333 <row_last_y>
	uint8_t row_lenght;
	uint8_t test_x;
	uint8_t test_y;
	
	//Horizontal
	row_lenght = 1;
     63c:	d1 e0       	ldi	r29, 0x01	; 1
	test_x = row_last_x;
	test_y = row_last_y;
	while(fiveinarow_is_char(--test_x, test_y, last_player))row_lenght++;
     63e:	01 c0       	rjmp	.+2      	; 0x642 <fiveinarow_check_win+0x32>
     640:	df 5f       	subi	r29, 0xFF	; 255
     642:	4c 2f       	mov	r20, r28
     644:	60 2f       	mov	r22, r16
     646:	81 2f       	mov	r24, r17
     648:	8d 1b       	sub	r24, r29
     64a:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <fiveinarow_is_char>
     64e:	81 11       	cpse	r24, r1
     650:	f7 cf       	rjmp	.-18     	; 0x640 <fiveinarow_check_win+0x30>
	test_x = row_last_x;	
     652:	80 91 34 03 	lds	r24, 0x0334	; 0x800334 <row_last_x>
     656:	18 2f       	mov	r17, r24
     658:	d8 1b       	sub	r29, r24
     65a:	fd 2e       	mov	r15, r29
     65c:	f1 0e       	add	r15, r17
	while(fiveinarow_is_char(++test_x, test_y, last_player))row_lenght++;
     65e:	1f 5f       	subi	r17, 0xFF	; 255
     660:	4c 2f       	mov	r20, r28
     662:	60 2f       	mov	r22, r16
     664:	81 2f       	mov	r24, r17
     666:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <fiveinarow_is_char>
     66a:	81 11       	cpse	r24, r1
     66c:	f6 cf       	rjmp	.-20     	; 0x65a <fiveinarow_check_win+0x4a>
	if(row_lenght >= 5)return true;
     66e:	84 e0       	ldi	r24, 0x04	; 4
     670:	8f 15       	cp	r24, r15
     672:	08 f4       	brcc	.+2      	; 0x676 <fiveinarow_check_win+0x66>
     674:	6d c0       	rjmp	.+218    	; 0x750 <fiveinarow_check_win+0x140>
	
	//Vertical
	row_lenght = 1;
	test_x = row_last_x;
     676:	00 91 34 03 	lds	r16, 0x0334	; 0x800334 <row_last_x>
	test_y = row_last_y;
     67a:	d0 91 33 03 	lds	r29, 0x0333	; 0x800333 <row_last_y>
	test_x = row_last_x;	
	while(fiveinarow_is_char(++test_x, test_y, last_player))row_lenght++;
	if(row_lenght >= 5)return true;
	
	//Vertical
	row_lenght = 1;
     67e:	11 e0       	ldi	r17, 0x01	; 1
	test_x = row_last_x;
	test_y = row_last_y;
	while(fiveinarow_is_char(test_x, --test_y, last_player))row_lenght++;
     680:	01 c0       	rjmp	.+2      	; 0x684 <fiveinarow_check_win+0x74>
     682:	1f 5f       	subi	r17, 0xFF	; 255
     684:	4c 2f       	mov	r20, r28
     686:	6d 2f       	mov	r22, r29
     688:	61 1b       	sub	r22, r17
     68a:	80 2f       	mov	r24, r16
     68c:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <fiveinarow_is_char>
     690:	81 11       	cpse	r24, r1
     692:	f7 cf       	rjmp	.-18     	; 0x682 <fiveinarow_check_win+0x72>
	test_y = row_last_y;
     694:	80 91 33 03 	lds	r24, 0x0333	; 0x800333 <row_last_y>
     698:	d8 2f       	mov	r29, r24
     69a:	18 1b       	sub	r17, r24
     69c:	f1 2e       	mov	r15, r17
     69e:	fd 0e       	add	r15, r29
	while(fiveinarow_is_char(test_x, ++test_y, last_player))row_lenght++;
     6a0:	df 5f       	subi	r29, 0xFF	; 255
     6a2:	4c 2f       	mov	r20, r28
     6a4:	6d 2f       	mov	r22, r29
     6a6:	80 2f       	mov	r24, r16
     6a8:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <fiveinarow_is_char>
     6ac:	81 11       	cpse	r24, r1
     6ae:	f6 cf       	rjmp	.-20     	; 0x69c <fiveinarow_check_win+0x8c>
	if(row_lenght >= 5)return true;
     6b0:	94 e0       	ldi	r25, 0x04	; 4
     6b2:	9f 15       	cp	r25, r15
     6b4:	08 f4       	brcc	.+2      	; 0x6b8 <fiveinarow_check_win+0xa8>
     6b6:	4e c0       	rjmp	.+156    	; 0x754 <fiveinarow_check_win+0x144>
	
	//Diagonal forward
	row_lenght = 1;
	test_x = row_last_x;
     6b8:	00 91 34 03 	lds	r16, 0x0334	; 0x800334 <row_last_x>
	test_y = row_last_y;
     6bc:	d0 91 33 03 	lds	r29, 0x0333	; 0x800333 <row_last_y>
	test_y = row_last_y;
	while(fiveinarow_is_char(test_x, ++test_y, last_player))row_lenght++;
	if(row_lenght >= 5)return true;
	
	//Diagonal forward
	row_lenght = 1;
     6c0:	11 e0       	ldi	r17, 0x01	; 1
	test_x = row_last_x;
	test_y = row_last_y;
	while(fiveinarow_is_char(--test_x, --test_y, last_player))row_lenght++;
     6c2:	01 c0       	rjmp	.+2      	; 0x6c6 <fiveinarow_check_win+0xb6>
     6c4:	1f 5f       	subi	r17, 0xFF	; 255
     6c6:	4c 2f       	mov	r20, r28
     6c8:	6d 2f       	mov	r22, r29
     6ca:	61 1b       	sub	r22, r17
     6cc:	80 2f       	mov	r24, r16
     6ce:	81 1b       	sub	r24, r17
     6d0:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <fiveinarow_is_char>
     6d4:	81 11       	cpse	r24, r1
     6d6:	f6 cf       	rjmp	.-20     	; 0x6c4 <fiveinarow_check_win+0xb4>
	test_x = row_last_x;
     6d8:	00 91 34 03 	lds	r16, 0x0334	; 0x800334 <row_last_x>
	test_y = row_last_y;
     6dc:	80 91 33 03 	lds	r24, 0x0333	; 0x800333 <row_last_y>
     6e0:	d8 2f       	mov	r29, r24
     6e2:	18 1b       	sub	r17, r24
	while(fiveinarow_is_char(++test_x, ++test_y, last_player))row_lenght++;
     6e4:	08 1b       	sub	r16, r24
     6e6:	f1 2e       	mov	r15, r17
     6e8:	fd 0e       	add	r15, r29
     6ea:	df 5f       	subi	r29, 0xFF	; 255
     6ec:	4c 2f       	mov	r20, r28
     6ee:	6d 2f       	mov	r22, r29
     6f0:	80 2f       	mov	r24, r16
     6f2:	8d 0f       	add	r24, r29
     6f4:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <fiveinarow_is_char>
     6f8:	81 11       	cpse	r24, r1
     6fa:	f5 cf       	rjmp	.-22     	; 0x6e6 <fiveinarow_check_win+0xd6>
	if(row_lenght >= 5)return true;
     6fc:	84 e0       	ldi	r24, 0x04	; 4
     6fe:	8f 15       	cp	r24, r15
     700:	58 f1       	brcs	.+86     	; 0x758 <fiveinarow_check_win+0x148>
	
	//Diagonal backwards
	row_lenght = 1;
	test_x = row_last_x;
     702:	00 91 34 03 	lds	r16, 0x0334	; 0x800334 <row_last_x>
	test_y = row_last_y;
     706:	10 91 33 03 	lds	r17, 0x0333	; 0x800333 <row_last_y>
	test_y = row_last_y;
	while(fiveinarow_is_char(++test_x, ++test_y, last_player))row_lenght++;
	if(row_lenght >= 5)return true;
	
	//Diagonal backwards
	row_lenght = 1;
     70a:	d1 e0       	ldi	r29, 0x01	; 1
	test_x = row_last_x;
	test_y = row_last_y;
	while(fiveinarow_is_char(--test_x, ++test_y, last_player))row_lenght++;
     70c:	01 c0       	rjmp	.+2      	; 0x710 <fiveinarow_check_win+0x100>
     70e:	df 5f       	subi	r29, 0xFF	; 255
     710:	4c 2f       	mov	r20, r28
     712:	6d 2f       	mov	r22, r29
     714:	61 0f       	add	r22, r17
     716:	80 2f       	mov	r24, r16
     718:	8d 1b       	sub	r24, r29
     71a:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <fiveinarow_is_char>
     71e:	81 11       	cpse	r24, r1
     720:	f6 cf       	rjmp	.-20     	; 0x70e <fiveinarow_check_win+0xfe>
	test_x = row_last_x;
     722:	80 91 34 03 	lds	r24, 0x0334	; 0x800334 <row_last_x>
	test_y = row_last_y;
     726:	00 91 33 03 	lds	r16, 0x0333	; 0x800333 <row_last_y>
	//Diagonal backwards
	row_lenght = 1;
	test_x = row_last_x;
	test_y = row_last_y;
	while(fiveinarow_is_char(--test_x, ++test_y, last_player))row_lenght++;
	test_x = row_last_x;
     72a:	18 2f       	mov	r17, r24
     72c:	d8 1b       	sub	r29, r24
     72e:	fd 2e       	mov	r15, r29
     730:	f1 0e       	add	r15, r17
	test_y = row_last_y;
	while(fiveinarow_is_char(++test_x, --test_y, last_player))row_lenght++;
     732:	01 50       	subi	r16, 0x01	; 1
     734:	1f 5f       	subi	r17, 0xFF	; 255
     736:	4c 2f       	mov	r20, r28
     738:	60 2f       	mov	r22, r16
     73a:	81 2f       	mov	r24, r17
     73c:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <fiveinarow_is_char>
     740:	81 11       	cpse	r24, r1
     742:	f5 cf       	rjmp	.-22     	; 0x72e <fiveinarow_check_win+0x11e>
	if(row_lenght >= 5)return true;
     744:	81 e0       	ldi	r24, 0x01	; 1
     746:	94 e0       	ldi	r25, 0x04	; 4
     748:	9f 15       	cp	r25, r15
     74a:	38 f0       	brcs	.+14     	; 0x75a <fiveinarow_check_win+0x14a>
     74c:	80 e0       	ldi	r24, 0x00	; 0
     74e:	05 c0       	rjmp	.+10     	; 0x75a <fiveinarow_check_win+0x14a>
	test_x = row_last_x;
	test_y = row_last_y;
	while(fiveinarow_is_char(--test_x, test_y, last_player))row_lenght++;
	test_x = row_last_x;	
	while(fiveinarow_is_char(++test_x, test_y, last_player))row_lenght++;
	if(row_lenght >= 5)return true;
     750:	81 e0       	ldi	r24, 0x01	; 1
     752:	03 c0       	rjmp	.+6      	; 0x75a <fiveinarow_check_win+0x14a>
	test_x = row_last_x;
	test_y = row_last_y;
	while(fiveinarow_is_char(test_x, --test_y, last_player))row_lenght++;
	test_y = row_last_y;
	while(fiveinarow_is_char(test_x, ++test_y, last_player))row_lenght++;
	if(row_lenght >= 5)return true;
     754:	81 e0       	ldi	r24, 0x01	; 1
     756:	01 c0       	rjmp	.+2      	; 0x75a <fiveinarow_check_win+0x14a>
	test_y = row_last_y;
	while(fiveinarow_is_char(--test_x, --test_y, last_player))row_lenght++;
	test_x = row_last_x;
	test_y = row_last_y;
	while(fiveinarow_is_char(++test_x, ++test_y, last_player))row_lenght++;
	if(row_lenght >= 5)return true;
     758:	81 e0       	ldi	r24, 0x01	; 1
	test_y = row_last_y;
	while(fiveinarow_is_char(++test_x, --test_y, last_player))row_lenght++;
	if(row_lenght >= 5)return true;
	
	return false;
}
     75a:	df 91       	pop	r29
     75c:	cf 91       	pop	r28
     75e:	1f 91       	pop	r17
     760:	0f 91       	pop	r16
     762:	ff 90       	pop	r15
     764:	08 95       	ret

00000766 <setup>:
	printf("%d", speed_mod);
}

void set_menu(enum menus m){
	menu = m;
	new_menu = true;
     766:	84 b1       	in	r24, 0x04	; 4
     768:	8f 62       	ori	r24, 0x2F	; 47
     76a:	84 b9       	out	0x04, r24	; 4
     76c:	8c b5       	in	r24, 0x2c	; 44
     76e:	81 65       	ori	r24, 0x51	; 81
     770:	8c bd       	out	0x2c, r24	; 44
     772:	20 98       	cbi	0x04, 0	; 4
     774:	28 9a       	sbi	0x05, 0	; 5
     776:	38 98       	cbi	0x07, 0	; 7
     778:	88 b1       	in	r24, 0x08	; 8
     77a:	87 62       	ori	r24, 0x27	; 39
     77c:	88 b9       	out	0x08, r24	; 8
     77e:	52 98       	cbi	0x0a, 2	; 10
     780:	5a 9a       	sbi	0x0b, 2	; 11
     782:	8a b1       	in	r24, 0x0a	; 10
     784:	80 6e       	ori	r24, 0xE0	; 224
     786:	8a b9       	out	0x0a, r24	; 10
     788:	8b b1       	in	r24, 0x0b	; 11
     78a:	8f 71       	andi	r24, 0x1F	; 31
     78c:	8b b9       	out	0x0b, r24	; 11
     78e:	8d e4       	ldi	r24, 0x4D	; 77
     790:	87 bd       	out	0x27, r24	; 39
     792:	82 e0       	ldi	r24, 0x02	; 2
     794:	84 bd       	out	0x24, r24	; 36
     796:	95 e0       	ldi	r25, 0x05	; 5
     798:	95 bd       	out	0x25, r25	; 37
     79a:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
     79e:	0e 94 a2 00 	call	0x144	; 0x144 <display_setup>
     7a2:	0e 94 6e 00 	call	0xdc	; 0xdc <adc_setup>
     7a6:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <piezosummer_setup>
     7aa:	0e 94 10 0c 	call	0x1820	; 0x1820 <uart_init>
     7ae:	0e 94 77 01 	call	0x2ee	; 0x2ee <fiveinarow_init>
     7b2:	78 94       	sei
     7b4:	08 95       	ret

000007b6 <print_control_info>:
     7b6:	0f 93       	push	r16
     7b8:	1f 93       	push	r17
     7ba:	cf 93       	push	r28
     7bc:	df 93       	push	r29
     7be:	85 e0       	ldi	r24, 0x05	; 5
     7c0:	0e 94 0f 01 	call	0x21e	; 0x21e <display_set_cursor_pos>
     7c4:	0d e1       	ldi	r16, 0x1D	; 29
     7c6:	13 e0       	ldi	r17, 0x03	; 3
     7c8:	1f 93       	push	r17
     7ca:	0f 93       	push	r16
     7cc:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <printf>
     7d0:	85 e0       	ldi	r24, 0x05	; 5
     7d2:	0e 94 0f 01 	call	0x21e	; 0x21e <display_set_cursor_pos>
     7d6:	80 91 5b 03 	lds	r24, 0x035B	; 0x80035b <vert>
     7da:	1f 92       	push	r1
     7dc:	8f 93       	push	r24
     7de:	c4 e4       	ldi	r28, 0x44	; 68
     7e0:	d2 e0       	ldi	r29, 0x02	; 2
     7e2:	df 93       	push	r29
     7e4:	cf 93       	push	r28
     7e6:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <printf>
     7ea:	8d e0       	ldi	r24, 0x0D	; 13
     7ec:	0e 94 0f 01 	call	0x21e	; 0x21e <display_set_cursor_pos>
     7f0:	1f 93       	push	r17
     7f2:	0f 93       	push	r16
     7f4:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <printf>
     7f8:	8d e0       	ldi	r24, 0x0D	; 13
     7fa:	0e 94 0f 01 	call	0x21e	; 0x21e <display_set_cursor_pos>
     7fe:	80 91 5a 03 	lds	r24, 0x035A	; 0x80035a <horz>
     802:	1f 92       	push	r1
     804:	8f 93       	push	r24
     806:	df 93       	push	r29
     808:	cf 93       	push	r28
     80a:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <printf>
     80e:	82 e1       	ldi	r24, 0x12	; 18
     810:	0e 94 0f 01 	call	0x21e	; 0x21e <display_set_cursor_pos>
     814:	0c e1       	ldi	r16, 0x1C	; 28
     816:	13 e0       	ldi	r17, 0x03	; 3
     818:	1f 93       	push	r17
     81a:	0f 93       	push	r16
     81c:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <printf>
     820:	82 e1       	ldi	r24, 0x12	; 18
     822:	0e 94 0f 01 	call	0x21e	; 0x21e <display_set_cursor_pos>
     826:	80 91 58 03 	lds	r24, 0x0358	; 0x800358 <left>
     82a:	90 91 59 03 	lds	r25, 0x0359	; 0x800359 <left+0x1>
     82e:	9f 93       	push	r25
     830:	8f 93       	push	r24
     832:	df 93       	push	r29
     834:	cf 93       	push	r28
     836:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <printf>
     83a:	88 e1       	ldi	r24, 0x18	; 24
     83c:	0e 94 0f 01 	call	0x21e	; 0x21e <display_set_cursor_pos>
     840:	1f 93       	push	r17
     842:	0f 93       	push	r16
     844:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <printf>
     848:	88 e1       	ldi	r24, 0x18	; 24
     84a:	0e 94 0f 01 	call	0x21e	; 0x21e <display_set_cursor_pos>
     84e:	80 91 56 03 	lds	r24, 0x0356	; 0x800356 <right>
     852:	90 91 57 03 	lds	r25, 0x0357	; 0x800357 <right+0x1>
     856:	9f 93       	push	r25
     858:	8f 93       	push	r24
     85a:	df 93       	push	r29
     85c:	cf 93       	push	r28
     85e:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <printf>
     862:	8e e1       	ldi	r24, 0x1E	; 30
     864:	0e 94 0f 01 	call	0x21e	; 0x21e <display_set_cursor_pos>
     868:	1f 93       	push	r17
     86a:	0f 93       	push	r16
     86c:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <printf>
     870:	8e e1       	ldi	r24, 0x1E	; 30
     872:	0e 94 0f 01 	call	0x21e	; 0x21e <display_set_cursor_pos>
     876:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <speed_mod>
     87a:	1f 92       	push	r1
     87c:	8f 93       	push	r24
     87e:	df 93       	push	r29
     880:	cf 93       	push	r28
     882:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <printf>
     886:	8d b7       	in	r24, 0x3d	; 61
     888:	9e b7       	in	r25, 0x3e	; 62
     88a:	4e 96       	adiw	r24, 0x1e	; 30
     88c:	0f b6       	in	r0, 0x3f	; 63
     88e:	f8 94       	cli
     890:	9e bf       	out	0x3e, r25	; 62
     892:	0f be       	out	0x3f, r0	; 63
     894:	8d bf       	out	0x3d, r24	; 61
     896:	df 91       	pop	r29
     898:	cf 91       	pop	r28
     89a:	1f 91       	pop	r17
     89c:	0f 91       	pop	r16
     89e:	08 95       	ret

000008a0 <read_buttons>:
}

void read_buttons(){
	if(!button_joystick && ((PINC&(1<<PINC2)) == 0))button_pressed_joystick = true;
     8a0:	80 91 4e 03 	lds	r24, 0x034E	; 0x80034e <button_joystick>
     8a4:	81 11       	cpse	r24, r1
     8a6:	06 c0       	rjmp	.+12     	; 0x8b4 <read_buttons+0x14>
     8a8:	32 99       	sbic	0x06, 2	; 6
     8aa:	04 c0       	rjmp	.+8      	; 0x8b4 <read_buttons+0x14>
     8ac:	81 e0       	ldi	r24, 0x01	; 1
     8ae:	80 93 4d 03 	sts	0x034D, r24	; 0x80034d <button_pressed_joystick>
     8b2:	02 c0       	rjmp	.+4      	; 0x8b8 <read_buttons+0x18>
	else button_pressed_joystick = false;
     8b4:	10 92 4d 03 	sts	0x034D, r1	; 0x80034d <button_pressed_joystick>
	
	if((PINC&(1<<PINC2)) == 0){
     8b8:	32 99       	sbic	0x06, 2	; 6
     8ba:	07 c0       	rjmp	.+14     	; 0x8ca <read_buttons+0x2a>
		button_joystick = true;
     8bc:	81 e0       	ldi	r24, 0x01	; 1
     8be:	80 93 4e 03 	sts	0x034E, r24	; 0x80034e <button_joystick>
		joystick_delay = JOYSTICK_DELAY;
     8c2:	8a e0       	ldi	r24, 0x0A	; 10
     8c4:	80 93 4f 03 	sts	0x034F, r24	; 0x80034f <joystick_delay>
     8c8:	06 c0       	rjmp	.+12     	; 0x8d6 <read_buttons+0x36>
	}else{
		if(joystick_delay == 0)button_joystick = false;
     8ca:	80 91 4f 03 	lds	r24, 0x034F	; 0x80034f <joystick_delay>
     8ce:	81 11       	cpse	r24, r1
     8d0:	02 c0       	rjmp	.+4      	; 0x8d6 <read_buttons+0x36>
     8d2:	10 92 4e 03 	sts	0x034E, r1	; 0x80034e <button_joystick>
	}
	
	if(!button_deadman && ((PINB&(1<<PINB0)) == 0))button_pressed_deadman = true;
     8d6:	80 91 4c 03 	lds	r24, 0x034C	; 0x80034c <button_deadman>
     8da:	81 11       	cpse	r24, r1
     8dc:	5e c0       	rjmp	.+188    	; 0x99a <__stack+0x9b>
     8de:	18 99       	sbic	0x03, 0	; 3
     8e0:	61 c0       	rjmp	.+194    	; 0x9a4 <__stack+0xa5>
     8e2:	81 e0       	ldi	r24, 0x01	; 1
     8e4:	80 93 4b 03 	sts	0x034B, r24	; 0x80034b <button_pressed_deadman>
     8e8:	04 c0       	rjmp	.+8      	; 0x8f2 <read_buttons+0x52>
	else button_pressed_deadman = false;
	
	if(button_deadman && ((PINB&(1<<PINB0)) != 0))button_released_deadman = true;
     8ea:	81 e0       	ldi	r24, 0x01	; 1
     8ec:	80 93 4a 03 	sts	0x034A, r24	; 0x80034a <button_released_deadman>
     8f0:	02 c0       	rjmp	.+4      	; 0x8f6 <read_buttons+0x56>
	else button_released_deadman = false;
     8f2:	10 92 4a 03 	sts	0x034A, r1	; 0x80034a <button_released_deadman>
	button_deadman = ((PINB&(1<<PINB0)) == 0);
     8f6:	83 b1       	in	r24, 0x03	; 3
     8f8:	80 95       	com	r24
     8fa:	81 70       	andi	r24, 0x01	; 1
     8fc:	80 93 4c 03 	sts	0x034C, r24	; 0x80034c <button_deadman>
	
	if(!button_1 && ((PINC&(1<<PINC0)) == 0))button_pressed_1 = true;
     900:	80 91 49 03 	lds	r24, 0x0349	; 0x800349 <button_1>
     904:	81 11       	cpse	r24, r1
     906:	06 c0       	rjmp	.+12     	; 0x914 <__stack+0x15>
     908:	30 99       	sbic	0x06, 0	; 6
     90a:	04 c0       	rjmp	.+8      	; 0x914 <__stack+0x15>
     90c:	81 e0       	ldi	r24, 0x01	; 1
     90e:	80 93 48 03 	sts	0x0348, r24	; 0x800348 <button_pressed_1>
     912:	02 c0       	rjmp	.+4      	; 0x918 <__stack+0x19>
	else button_pressed_1 = false;
     914:	10 92 48 03 	sts	0x0348, r1	; 0x800348 <button_pressed_1>
	button_1 = ((PINC&(1<<PINC0)) == 0);
     918:	86 b1       	in	r24, 0x06	; 6
     91a:	80 95       	com	r24
     91c:	81 70       	andi	r24, 0x01	; 1
     91e:	80 93 49 03 	sts	0x0349, r24	; 0x800349 <button_1>
	
	if(!button_2 && ((PINC&(1<<PINC1)) == 0))button_pressed_2 = true;
     922:	80 91 47 03 	lds	r24, 0x0347	; 0x800347 <button_2>
     926:	81 11       	cpse	r24, r1
     928:	06 c0       	rjmp	.+12     	; 0x936 <__stack+0x37>
     92a:	31 99       	sbic	0x06, 1	; 6
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0x37>
     92e:	81 e0       	ldi	r24, 0x01	; 1
     930:	80 93 46 03 	sts	0x0346, r24	; 0x800346 <button_pressed_2>
     934:	02 c0       	rjmp	.+4      	; 0x93a <__stack+0x3b>
	else button_pressed_2 = false;
     936:	10 92 46 03 	sts	0x0346, r1	; 0x800346 <button_pressed_2>
	button_2 = ((PINC&(1<<PINC1)) == 0);
     93a:	86 b1       	in	r24, 0x06	; 6
     93c:	86 95       	lsr	r24
     93e:	81 70       	andi	r24, 0x01	; 1
     940:	91 e0       	ldi	r25, 0x01	; 1
     942:	89 27       	eor	r24, r25
     944:	80 93 47 03 	sts	0x0347, r24	; 0x800347 <button_2>
	
	if(!button_3 && ((PINC&(1<<PINC5)) == 0))button_pressed_3 = true;
     948:	80 91 45 03 	lds	r24, 0x0345	; 0x800345 <button_3>
     94c:	81 11       	cpse	r24, r1
     94e:	06 c0       	rjmp	.+12     	; 0x95c <__stack+0x5d>
     950:	35 99       	sbic	0x06, 5	; 6
     952:	04 c0       	rjmp	.+8      	; 0x95c <__stack+0x5d>
     954:	81 e0       	ldi	r24, 0x01	; 1
     956:	80 93 44 03 	sts	0x0344, r24	; 0x800344 <button_pressed_3>
     95a:	02 c0       	rjmp	.+4      	; 0x960 <__stack+0x61>
	else button_pressed_3 = false;
     95c:	10 92 44 03 	sts	0x0344, r1	; 0x800344 <button_pressed_3>
	button_3 = ((PINC&(1<<PINC5)) == 0);
     960:	86 b1       	in	r24, 0x06	; 6
     962:	85 fb       	bst	r24, 5
     964:	99 27       	eor	r25, r25
     966:	90 f9       	bld	r25, 0
     968:	81 e0       	ldi	r24, 0x01	; 1
     96a:	89 27       	eor	r24, r25
     96c:	80 93 45 03 	sts	0x0345, r24	; 0x800345 <button_3>
	
	if(!button_4 && ((PIND&(1<<PIND2)) == 0))button_pressed_4 = true;
     970:	80 91 43 03 	lds	r24, 0x0343	; 0x800343 <button_4>
     974:	81 11       	cpse	r24, r1
     976:	06 c0       	rjmp	.+12     	; 0x984 <__stack+0x85>
     978:	4a 99       	sbic	0x09, 2	; 9
     97a:	04 c0       	rjmp	.+8      	; 0x984 <__stack+0x85>
     97c:	81 e0       	ldi	r24, 0x01	; 1
     97e:	80 93 42 03 	sts	0x0342, r24	; 0x800342 <button_pressed_4>
     982:	02 c0       	rjmp	.+4      	; 0x988 <__stack+0x89>
	else button_pressed_4 = false;
     984:	10 92 42 03 	sts	0x0342, r1	; 0x800342 <button_pressed_4>
	button_4 = ((PIND&(1<<PIND2)) == 0);
     988:	89 b1       	in	r24, 0x09	; 9
     98a:	82 fb       	bst	r24, 2
     98c:	99 27       	eor	r25, r25
     98e:	90 f9       	bld	r25, 0
     990:	81 e0       	ldi	r24, 0x01	; 1
     992:	89 27       	eor	r24, r25
     994:	80 93 43 03 	sts	0x0343, r24	; 0x800343 <button_4>
}
     998:	08 95       	ret
	}else{
		if(joystick_delay == 0)button_joystick = false;
	}
	
	if(!button_deadman && ((PINB&(1<<PINB0)) == 0))button_pressed_deadman = true;
	else button_pressed_deadman = false;
     99a:	10 92 4b 03 	sts	0x034B, r1	; 0x80034b <button_pressed_deadman>
	
	if(button_deadman && ((PINB&(1<<PINB0)) != 0))button_released_deadman = true;
     99e:	18 99       	sbic	0x03, 0	; 3
     9a0:	a4 cf       	rjmp	.-184    	; 0x8ea <read_buttons+0x4a>
     9a2:	a7 cf       	rjmp	.-178    	; 0x8f2 <read_buttons+0x52>
	}else{
		if(joystick_delay == 0)button_joystick = false;
	}
	
	if(!button_deadman && ((PINB&(1<<PINB0)) == 0))button_pressed_deadman = true;
	else button_pressed_deadman = false;
     9a4:	10 92 4b 03 	sts	0x034B, r1	; 0x80034b <button_pressed_deadman>
     9a8:	a4 cf       	rjmp	.-184    	; 0x8f2 <read_buttons+0x52>

000009aa <update_left_rigth>:
	button_4 = ((PIND&(1<<PIND2)) == 0);
}

void update_left_rigth(){
	//Clamp vert
	if(vert < 8)vert = 0;
     9aa:	80 91 5b 03 	lds	r24, 0x035B	; 0x80035b <vert>
     9ae:	88 30       	cpi	r24, 0x08	; 8
     9b0:	18 f4       	brcc	.+6      	; 0x9b8 <update_left_rigth+0xe>
     9b2:	10 92 5b 03 	sts	0x035B, r1	; 0x80035b <vert>
     9b6:	13 c0       	rjmp	.+38     	; 0x9de <update_left_rigth+0x34>
	else if(vert > 248)vert = 255;
     9b8:	80 91 5b 03 	lds	r24, 0x035B	; 0x80035b <vert>
     9bc:	89 3f       	cpi	r24, 0xF9	; 249
     9be:	20 f0       	brcs	.+8      	; 0x9c8 <update_left_rigth+0x1e>
     9c0:	8f ef       	ldi	r24, 0xFF	; 255
     9c2:	80 93 5b 03 	sts	0x035B, r24	; 0x80035b <vert>
     9c6:	0b c0       	rjmp	.+22     	; 0x9de <update_left_rigth+0x34>
	else if(120 < vert && vert < 136)vert = 128;
     9c8:	80 91 5b 03 	lds	r24, 0x035B	; 0x80035b <vert>
     9cc:	89 37       	cpi	r24, 0x79	; 121
     9ce:	38 f0       	brcs	.+14     	; 0x9de <update_left_rigth+0x34>
     9d0:	80 91 5b 03 	lds	r24, 0x035B	; 0x80035b <vert>
     9d4:	88 38       	cpi	r24, 0x88	; 136
     9d6:	18 f4       	brcc	.+6      	; 0x9de <update_left_rigth+0x34>
     9d8:	80 e8       	ldi	r24, 0x80	; 128
     9da:	80 93 5b 03 	sts	0x035B, r24	; 0x80035b <vert>
	
	//Clamp horz
	if(horz < 8)horz = 0;
     9de:	80 91 5a 03 	lds	r24, 0x035A	; 0x80035a <horz>
     9e2:	88 30       	cpi	r24, 0x08	; 8
     9e4:	18 f4       	brcc	.+6      	; 0x9ec <update_left_rigth+0x42>
     9e6:	10 92 5a 03 	sts	0x035A, r1	; 0x80035a <horz>
     9ea:	13 c0       	rjmp	.+38     	; 0xa12 <update_left_rigth+0x68>
	else if(horz > 248)horz = 255;
     9ec:	80 91 5a 03 	lds	r24, 0x035A	; 0x80035a <horz>
     9f0:	89 3f       	cpi	r24, 0xF9	; 249
     9f2:	20 f0       	brcs	.+8      	; 0x9fc <update_left_rigth+0x52>
     9f4:	8f ef       	ldi	r24, 0xFF	; 255
     9f6:	80 93 5a 03 	sts	0x035A, r24	; 0x80035a <horz>
     9fa:	0b c0       	rjmp	.+22     	; 0xa12 <update_left_rigth+0x68>
	else if(120 < horz && horz < 136)horz = 128;
     9fc:	80 91 5a 03 	lds	r24, 0x035A	; 0x80035a <horz>
     a00:	89 37       	cpi	r24, 0x79	; 121
     a02:	38 f0       	brcs	.+14     	; 0xa12 <update_left_rigth+0x68>
     a04:	80 91 5a 03 	lds	r24, 0x035A	; 0x80035a <horz>
     a08:	88 38       	cpi	r24, 0x88	; 136
     a0a:	18 f4       	brcc	.+6      	; 0xa12 <update_left_rigth+0x68>
     a0c:	80 e8       	ldi	r24, 0x80	; 128
     a0e:	80 93 5a 03 	sts	0x035A, r24	; 0x80035a <horz>
	
	left = vert-horz;
     a12:	80 91 5b 03 	lds	r24, 0x035B	; 0x80035b <vert>
     a16:	20 91 5a 03 	lds	r18, 0x035A	; 0x80035a <horz>
     a1a:	90 e0       	ldi	r25, 0x00	; 0
     a1c:	82 1b       	sub	r24, r18
     a1e:	91 09       	sbc	r25, r1
     a20:	90 93 59 03 	sts	0x0359, r25	; 0x800359 <left+0x1>
     a24:	80 93 58 03 	sts	0x0358, r24	; 0x800358 <left>
	right = vert+horz-256;
     a28:	20 91 5b 03 	lds	r18, 0x035B	; 0x80035b <vert>
     a2c:	80 91 5a 03 	lds	r24, 0x035A	; 0x80035a <horz>
     a30:	90 e0       	ldi	r25, 0x00	; 0
     a32:	82 0f       	add	r24, r18
     a34:	91 1d       	adc	r25, r1
     a36:	9a 95       	dec	r25
     a38:	90 93 57 03 	sts	0x0357, r25	; 0x800357 <right+0x1>
     a3c:	80 93 56 03 	sts	0x0356, r24	; 0x800356 <right>
	
	//Clamp left
	if(left < -127)left = -127;
     a40:	80 91 58 03 	lds	r24, 0x0358	; 0x800358 <left>
     a44:	90 91 59 03 	lds	r25, 0x0359	; 0x800359 <left+0x1>
     a48:	81 38       	cpi	r24, 0x81	; 129
     a4a:	9f 4f       	sbci	r25, 0xFF	; 255
     a4c:	3c f4       	brge	.+14     	; 0xa5c <update_left_rigth+0xb2>
     a4e:	81 e8       	ldi	r24, 0x81	; 129
     a50:	9f ef       	ldi	r25, 0xFF	; 255
     a52:	90 93 59 03 	sts	0x0359, r25	; 0x800359 <left+0x1>
     a56:	80 93 58 03 	sts	0x0358, r24	; 0x800358 <left>
     a5a:	1f c0       	rjmp	.+62     	; 0xa9a <update_left_rigth+0xf0>
	else if(left > 127)left = 127;
     a5c:	80 91 58 03 	lds	r24, 0x0358	; 0x800358 <left>
     a60:	90 91 59 03 	lds	r25, 0x0359	; 0x800359 <left+0x1>
     a64:	80 38       	cpi	r24, 0x80	; 128
     a66:	91 05       	cpc	r25, r1
     a68:	3c f0       	brlt	.+14     	; 0xa78 <update_left_rigth+0xce>
     a6a:	8f e7       	ldi	r24, 0x7F	; 127
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	90 93 59 03 	sts	0x0359, r25	; 0x800359 <left+0x1>
     a72:	80 93 58 03 	sts	0x0358, r24	; 0x800358 <left>
     a76:	11 c0       	rjmp	.+34     	; 0xa9a <update_left_rigth+0xf0>
	else if(-2 < left && left < 2)left = 0;
     a78:	80 91 58 03 	lds	r24, 0x0358	; 0x800358 <left>
     a7c:	90 91 59 03 	lds	r25, 0x0359	; 0x800359 <left+0x1>
     a80:	8f 3f       	cpi	r24, 0xFF	; 255
     a82:	9f 4f       	sbci	r25, 0xFF	; 255
     a84:	54 f0       	brlt	.+20     	; 0xa9a <update_left_rigth+0xf0>
     a86:	80 91 58 03 	lds	r24, 0x0358	; 0x800358 <left>
     a8a:	90 91 59 03 	lds	r25, 0x0359	; 0x800359 <left+0x1>
     a8e:	02 97       	sbiw	r24, 0x02	; 2
     a90:	24 f4       	brge	.+8      	; 0xa9a <update_left_rigth+0xf0>
     a92:	10 92 59 03 	sts	0x0359, r1	; 0x800359 <left+0x1>
     a96:	10 92 58 03 	sts	0x0358, r1	; 0x800358 <left>
	left /= speed_mod;
     a9a:	60 91 32 02 	lds	r22, 0x0232	; 0x800232 <speed_mod>
     a9e:	80 91 58 03 	lds	r24, 0x0358	; 0x800358 <left>
     aa2:	90 91 59 03 	lds	r25, 0x0359	; 0x800359 <left+0x1>
     aa6:	70 e0       	ldi	r23, 0x00	; 0
     aa8:	0e 94 1d 0c 	call	0x183a	; 0x183a <__divmodhi4>
     aac:	70 93 59 03 	sts	0x0359, r23	; 0x800359 <left+0x1>
     ab0:	60 93 58 03 	sts	0x0358, r22	; 0x800358 <left>
	
	//Clamp right
	if(right < -127)right = -127;
     ab4:	80 91 56 03 	lds	r24, 0x0356	; 0x800356 <right>
     ab8:	90 91 57 03 	lds	r25, 0x0357	; 0x800357 <right+0x1>
     abc:	81 38       	cpi	r24, 0x81	; 129
     abe:	9f 4f       	sbci	r25, 0xFF	; 255
     ac0:	3c f4       	brge	.+14     	; 0xad0 <update_left_rigth+0x126>
     ac2:	81 e8       	ldi	r24, 0x81	; 129
     ac4:	9f ef       	ldi	r25, 0xFF	; 255
     ac6:	90 93 57 03 	sts	0x0357, r25	; 0x800357 <right+0x1>
     aca:	80 93 56 03 	sts	0x0356, r24	; 0x800356 <right>
     ace:	1f c0       	rjmp	.+62     	; 0xb0e <update_left_rigth+0x164>
	else if(right > 127)right = 127;
     ad0:	80 91 56 03 	lds	r24, 0x0356	; 0x800356 <right>
     ad4:	90 91 57 03 	lds	r25, 0x0357	; 0x800357 <right+0x1>
     ad8:	80 38       	cpi	r24, 0x80	; 128
     ada:	91 05       	cpc	r25, r1
     adc:	3c f0       	brlt	.+14     	; 0xaec <update_left_rigth+0x142>
     ade:	8f e7       	ldi	r24, 0x7F	; 127
     ae0:	90 e0       	ldi	r25, 0x00	; 0
     ae2:	90 93 57 03 	sts	0x0357, r25	; 0x800357 <right+0x1>
     ae6:	80 93 56 03 	sts	0x0356, r24	; 0x800356 <right>
     aea:	11 c0       	rjmp	.+34     	; 0xb0e <update_left_rigth+0x164>
	else if(-2 < right && right < 2)right = 0;
     aec:	80 91 56 03 	lds	r24, 0x0356	; 0x800356 <right>
     af0:	90 91 57 03 	lds	r25, 0x0357	; 0x800357 <right+0x1>
     af4:	8f 3f       	cpi	r24, 0xFF	; 255
     af6:	9f 4f       	sbci	r25, 0xFF	; 255
     af8:	54 f0       	brlt	.+20     	; 0xb0e <update_left_rigth+0x164>
     afa:	80 91 56 03 	lds	r24, 0x0356	; 0x800356 <right>
     afe:	90 91 57 03 	lds	r25, 0x0357	; 0x800357 <right+0x1>
     b02:	02 97       	sbiw	r24, 0x02	; 2
     b04:	24 f4       	brge	.+8      	; 0xb0e <update_left_rigth+0x164>
     b06:	10 92 57 03 	sts	0x0357, r1	; 0x800357 <right+0x1>
     b0a:	10 92 56 03 	sts	0x0356, r1	; 0x800356 <right>
	right /= speed_mod;
     b0e:	60 91 32 02 	lds	r22, 0x0232	; 0x800232 <speed_mod>
     b12:	80 91 56 03 	lds	r24, 0x0356	; 0x800356 <right>
     b16:	90 91 57 03 	lds	r25, 0x0357	; 0x800357 <right+0x1>
     b1a:	70 e0       	ldi	r23, 0x00	; 0
     b1c:	0e 94 1d 0c 	call	0x183a	; 0x183a <__divmodhi4>
     b20:	70 93 57 03 	sts	0x0357, r23	; 0x800357 <right+0x1>
     b24:	60 93 56 03 	sts	0x0356, r22	; 0x800356 <right>
     b28:	08 95       	ret

00000b2a <update_joystick_navigation>:
}

void update_joystick_navigation(){
	joystick_up = false;
     b2a:	10 92 53 03 	sts	0x0353, r1	; 0x800353 <joystick_up>
	joystick_down = false;
     b2e:	10 92 52 03 	sts	0x0352, r1	; 0x800352 <joystick_down>
	if(64 < vert && vert < 192){
     b32:	80 91 5b 03 	lds	r24, 0x035B	; 0x80035b <vert>
     b36:	81 34       	cpi	r24, 0x41	; 65
     b38:	40 f0       	brcs	.+16     	; 0xb4a <update_joystick_navigation+0x20>
     b3a:	80 91 5b 03 	lds	r24, 0x035B	; 0x80035b <vert>
     b3e:	80 3c       	cpi	r24, 0xC0	; 192
     b40:	20 f4       	brcc	.+8      	; 0xb4a <update_joystick_navigation+0x20>
		verticla_center = true;
     b42:	81 e0       	ldi	r24, 0x01	; 1
     b44:	80 93 55 03 	sts	0x0355, r24	; 0x800355 <verticla_center>
     b48:	2d c0       	rjmp	.+90     	; 0xba4 <update_joystick_navigation+0x7a>
	}else if(verticla_center){
     b4a:	80 91 55 03 	lds	r24, 0x0355	; 0x800355 <verticla_center>
     b4e:	88 23       	and	r24, r24
     b50:	49 f1       	breq	.+82     	; 0xba4 <update_joystick_navigation+0x7a>
		verticla_center = false;
     b52:	10 92 55 03 	sts	0x0355, r1	; 0x800355 <verticla_center>
		if(vert > 128){//Up
     b56:	80 91 5b 03 	lds	r24, 0x035B	; 0x80035b <vert>
     b5a:	81 38       	cpi	r24, 0x81	; 129
     b5c:	90 f0       	brcs	.+36     	; 0xb82 <update_joystick_navigation+0x58>
			if(cursor_pos < 16)cursor_pos += 48;
     b5e:	80 91 5c 03 	lds	r24, 0x035C	; 0x80035c <cursor_pos>
     b62:	80 31       	cpi	r24, 0x10	; 16
     b64:	28 f4       	brcc	.+10     	; 0xb70 <update_joystick_navigation+0x46>
     b66:	80 91 5c 03 	lds	r24, 0x035C	; 0x80035c <cursor_pos>
     b6a:	80 5d       	subi	r24, 0xD0	; 208
     b6c:	80 93 5c 03 	sts	0x035C, r24	; 0x80035c <cursor_pos>
			cursor_pos -= 16;
     b70:	80 91 5c 03 	lds	r24, 0x035C	; 0x80035c <cursor_pos>
     b74:	80 51       	subi	r24, 0x10	; 16
     b76:	80 93 5c 03 	sts	0x035C, r24	; 0x80035c <cursor_pos>
			joystick_up = true;
     b7a:	81 e0       	ldi	r24, 0x01	; 1
     b7c:	80 93 53 03 	sts	0x0353, r24	; 0x800353 <joystick_up>
     b80:	11 c0       	rjmp	.+34     	; 0xba4 <update_joystick_navigation+0x7a>
			
		}else{//Down
			cursor_pos += 16;
     b82:	80 91 5c 03 	lds	r24, 0x035C	; 0x80035c <cursor_pos>
     b86:	80 5f       	subi	r24, 0xF0	; 240
     b88:	80 93 5c 03 	sts	0x035C, r24	; 0x80035c <cursor_pos>
			if(cursor_pos > 47) cursor_pos -= 48;
     b8c:	80 91 5c 03 	lds	r24, 0x035C	; 0x80035c <cursor_pos>
     b90:	80 33       	cpi	r24, 0x30	; 48
     b92:	28 f0       	brcs	.+10     	; 0xb9e <update_joystick_navigation+0x74>
     b94:	80 91 5c 03 	lds	r24, 0x035C	; 0x80035c <cursor_pos>
     b98:	80 53       	subi	r24, 0x30	; 48
     b9a:	80 93 5c 03 	sts	0x035C, r24	; 0x80035c <cursor_pos>
			joystick_down = true;
     b9e:	81 e0       	ldi	r24, 0x01	; 1
     ba0:	80 93 52 03 	sts	0x0352, r24	; 0x800352 <joystick_down>
			
		}
	}
	joystick_left = false;
     ba4:	10 92 51 03 	sts	0x0351, r1	; 0x800351 <joystick_left>
	joystick_right = false;
     ba8:	10 92 50 03 	sts	0x0350, r1	; 0x800350 <joystick_right>
	if(64 < horz && horz < 192){
     bac:	80 91 5a 03 	lds	r24, 0x035A	; 0x80035a <horz>
     bb0:	81 34       	cpi	r24, 0x41	; 65
     bb2:	40 f0       	brcs	.+16     	; 0xbc4 <update_joystick_navigation+0x9a>
     bb4:	80 91 5a 03 	lds	r24, 0x035A	; 0x80035a <horz>
     bb8:	80 3c       	cpi	r24, 0xC0	; 192
     bba:	20 f4       	brcc	.+8      	; 0xbc4 <update_joystick_navigation+0x9a>
		horizontal_center = true;
     bbc:	81 e0       	ldi	r24, 0x01	; 1
     bbe:	80 93 54 03 	sts	0x0354, r24	; 0x800354 <horizontal_center>
     bc2:	08 95       	ret
	}else if(horizontal_center){
     bc4:	80 91 54 03 	lds	r24, 0x0354	; 0x800354 <horizontal_center>
     bc8:	88 23       	and	r24, r24
     bca:	c9 f1       	breq	.+114    	; 0xc3e <update_joystick_navigation+0x114>
		horizontal_center = false;
     bcc:	10 92 54 03 	sts	0x0354, r1	; 0x800354 <horizontal_center>
		if(horz > 128){//Left
     bd0:	80 91 5a 03 	lds	r24, 0x035A	; 0x80035a <horz>
     bd4:	81 38       	cpi	r24, 0x81	; 129
     bd6:	d0 f0       	brcs	.+52     	; 0xc0c <update_joystick_navigation+0xe2>
			if(cursor_pos == 0 || cursor_pos == 16 || cursor_pos == 32)cursor_pos += 16;
     bd8:	80 91 5c 03 	lds	r24, 0x035C	; 0x80035c <cursor_pos>
     bdc:	88 23       	and	r24, r24
     bde:	41 f0       	breq	.+16     	; 0xbf0 <update_joystick_navigation+0xc6>
     be0:	80 91 5c 03 	lds	r24, 0x035C	; 0x80035c <cursor_pos>
     be4:	80 31       	cpi	r24, 0x10	; 16
     be6:	21 f0       	breq	.+8      	; 0xbf0 <update_joystick_navigation+0xc6>
     be8:	80 91 5c 03 	lds	r24, 0x035C	; 0x80035c <cursor_pos>
     bec:	80 32       	cpi	r24, 0x20	; 32
     bee:	29 f4       	brne	.+10     	; 0xbfa <update_joystick_navigation+0xd0>
     bf0:	80 91 5c 03 	lds	r24, 0x035C	; 0x80035c <cursor_pos>
     bf4:	80 5f       	subi	r24, 0xF0	; 240
     bf6:	80 93 5c 03 	sts	0x035C, r24	; 0x80035c <cursor_pos>
			cursor_pos--;
     bfa:	80 91 5c 03 	lds	r24, 0x035C	; 0x80035c <cursor_pos>
     bfe:	81 50       	subi	r24, 0x01	; 1
     c00:	80 93 5c 03 	sts	0x035C, r24	; 0x80035c <cursor_pos>
			joystick_left = true;	
     c04:	81 e0       	ldi	r24, 0x01	; 1
     c06:	80 93 51 03 	sts	0x0351, r24	; 0x800351 <joystick_left>
     c0a:	08 95       	ret
			
		}else{//Right
			cursor_pos++;
     c0c:	80 91 5c 03 	lds	r24, 0x035C	; 0x80035c <cursor_pos>
     c10:	8f 5f       	subi	r24, 0xFF	; 255
     c12:	80 93 5c 03 	sts	0x035C, r24	; 0x80035c <cursor_pos>
			if(cursor_pos == 16 ||cursor_pos == 32 || cursor_pos == 48)cursor_pos -= 16;
     c16:	80 91 5c 03 	lds	r24, 0x035C	; 0x80035c <cursor_pos>
     c1a:	80 31       	cpi	r24, 0x10	; 16
     c1c:	41 f0       	breq	.+16     	; 0xc2e <update_joystick_navigation+0x104>
     c1e:	80 91 5c 03 	lds	r24, 0x035C	; 0x80035c <cursor_pos>
     c22:	80 32       	cpi	r24, 0x20	; 32
     c24:	21 f0       	breq	.+8      	; 0xc2e <update_joystick_navigation+0x104>
     c26:	80 91 5c 03 	lds	r24, 0x035C	; 0x80035c <cursor_pos>
     c2a:	80 33       	cpi	r24, 0x30	; 48
     c2c:	29 f4       	brne	.+10     	; 0xc38 <update_joystick_navigation+0x10e>
     c2e:	80 91 5c 03 	lds	r24, 0x035C	; 0x80035c <cursor_pos>
     c32:	80 51       	subi	r24, 0x10	; 16
     c34:	80 93 5c 03 	sts	0x035C, r24	; 0x80035c <cursor_pos>
		
			joystick_right = true;
     c38:	81 e0       	ldi	r24, 0x01	; 1
     c3a:	80 93 50 03 	sts	0x0350, r24	; 0x800350 <joystick_right>
     c3e:	08 95       	ret

00000c40 <menu_messages>:
		}
	}
}

void menu_messages(){
     c40:	cf 93       	push	r28
	if(new_menu){
     c42:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <new_menu>
     c46:	88 23       	and	r24, r24
     c48:	61 f0       	breq	.+24     	; 0xc62 <menu_messages+0x22>
		display_clear_top_rows();
     c4a:	0e 94 3c 01 	call	0x278	; 0x278 <display_clear_top_rows>
		printf("Send Message");
     c4e:	87 e4       	ldi	r24, 0x47	; 71
     c50:	92 e0       	ldi	r25, 0x02	; 2
     c52:	9f 93       	push	r25
     c54:	8f 93       	push	r24
     c56:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <printf>
		new_menu = false;
     c5a:	10 92 31 02 	sts	0x0231, r1	; 0x800231 <new_menu>
     c5e:	0f 90       	pop	r0
     c60:	0f 90       	pop	r0
	}

	if(joystick_up){
     c62:	80 91 53 03 	lds	r24, 0x0353	; 0x800353 <joystick_up>
     c66:	88 23       	and	r24, r24
     c68:	71 f0       	breq	.+28     	; 0xc86 <menu_messages+0x46>
		if(messages_selected == 0)messages_selected += MESSAGES_LENGHT;
     c6a:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <messages_selected>
     c6e:	81 11       	cpse	r24, r1
     c70:	05 c0       	rjmp	.+10     	; 0xc7c <menu_messages+0x3c>
     c72:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <messages_selected>
     c76:	8b 5f       	subi	r24, 0xFB	; 251
     c78:	80 93 3c 03 	sts	0x033C, r24	; 0x80033c <messages_selected>
		messages_selected--;
     c7c:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <messages_selected>
     c80:	81 50       	subi	r24, 0x01	; 1
     c82:	80 93 3c 03 	sts	0x033C, r24	; 0x80033c <messages_selected>
	}

	if(joystick_down){
     c86:	80 91 52 03 	lds	r24, 0x0352	; 0x800352 <joystick_down>
     c8a:	88 23       	and	r24, r24
     c8c:	71 f0       	breq	.+28     	; 0xcaa <menu_messages+0x6a>
		messages_selected++;
     c8e:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <messages_selected>
     c92:	8f 5f       	subi	r24, 0xFF	; 255
     c94:	80 93 3c 03 	sts	0x033C, r24	; 0x80033c <messages_selected>
		if(messages_selected >= MESSAGES_LENGHT)messages_selected -= MESSAGES_LENGHT;
     c98:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <messages_selected>
     c9c:	85 30       	cpi	r24, 0x05	; 5
     c9e:	28 f0       	brcs	.+10     	; 0xcaa <menu_messages+0x6a>
     ca0:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <messages_selected>
     ca4:	85 50       	subi	r24, 0x05	; 5
     ca6:	80 93 3c 03 	sts	0x033C, r24	; 0x80033c <messages_selected>
	}

	if(button_pressed_joystick){
     caa:	80 91 4d 03 	lds	r24, 0x034D	; 0x80034d <button_pressed_joystick>
     cae:	88 23       	and	r24, r24
     cb0:	59 f1       	breq	.+86     	; 0xd08 <menu_messages+0xc8>
		uart_set_stdout();
     cb2:	0e 94 09 0c 	call	0x1812	; 0x1812 <uart_set_stdout>
		printf("01%s\n", messages[messages_selected]);
     cb6:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <messages_selected>
     cba:	c1 e1       	ldi	r28, 0x11	; 17
     cbc:	c8 9f       	mul	r28, r24
     cbe:	c0 01       	movw	r24, r0
     cc0:	11 24       	eor	r1, r1
     cc2:	84 52       	subi	r24, 0x24	; 36
     cc4:	9e 4f       	sbci	r25, 0xFE	; 254
     cc6:	9f 93       	push	r25
     cc8:	8f 93       	push	r24
     cca:	84 e5       	ldi	r24, 0x54	; 84
     ccc:	92 e0       	ldi	r25, 0x02	; 2
     cce:	9f 93       	push	r25
     cd0:	8f 93       	push	r24
     cd2:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <printf>
		printf("21%s\n", messages[messages_selected]);
     cd6:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <messages_selected>
     cda:	c8 9f       	mul	r28, r24
     cdc:	c0 01       	movw	r24, r0
     cde:	11 24       	eor	r1, r1
     ce0:	84 52       	subi	r24, 0x24	; 36
     ce2:	9e 4f       	sbci	r25, 0xFE	; 254
     ce4:	9f 93       	push	r25
     ce6:	8f 93       	push	r24
     ce8:	8a e5       	ldi	r24, 0x5A	; 90
     cea:	92 e0       	ldi	r25, 0x02	; 2
     cec:	9f 93       	push	r25
     cee:	8f 93       	push	r24
     cf0:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <printf>
		display_set_stdout();
     cf4:	0e 94 94 00 	call	0x128	; 0x128 <display_set_stdout>
     cf8:	8d b7       	in	r24, 0x3d	; 61
     cfa:	9e b7       	in	r25, 0x3e	; 62
     cfc:	08 96       	adiw	r24, 0x08	; 8
     cfe:	0f b6       	in	r0, 0x3f	; 63
     d00:	f8 94       	cli
     d02:	9e bf       	out	0x3e, r25	; 62
     d04:	0f be       	out	0x3f, r0	; 63
     d06:	8d bf       	out	0x3d, r24	; 61
	}

	display_set_cursor_pos(16);
     d08:	80 e1       	ldi	r24, 0x10	; 16
     d0a:	0e 94 0f 01 	call	0x21e	; 0x21e <display_set_cursor_pos>
	printf("%s", messages[messages_selected]);
     d0e:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <messages_selected>
     d12:	21 e1       	ldi	r18, 0x11	; 17
     d14:	82 9f       	mul	r24, r18
     d16:	c0 01       	movw	r24, r0
     d18:	11 24       	eor	r1, r1
     d1a:	84 52       	subi	r24, 0x24	; 36
     d1c:	9e 4f       	sbci	r25, 0xFE	; 254
     d1e:	9f 93       	push	r25
     d20:	8f 93       	push	r24
     d22:	80 e6       	ldi	r24, 0x60	; 96
     d24:	92 e0       	ldi	r25, 0x02	; 2
     d26:	9f 93       	push	r25
     d28:	8f 93       	push	r24
     d2a:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <printf>
}
     d2e:	0f 90       	pop	r0
     d30:	0f 90       	pop	r0
     d32:	0f 90       	pop	r0
     d34:	0f 90       	pop	r0
     d36:	cf 91       	pop	r28
     d38:	08 95       	ret

00000d3a <menu_songs>:

void menu_songs(){
     d3a:	cf 93       	push	r28
	char song_id;
	if(new_menu){
     d3c:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <new_menu>
     d40:	88 23       	and	r24, r24
     d42:	61 f0       	breq	.+24     	; 0xd5c <menu_songs+0x22>
		display_clear_top_rows();
     d44:	0e 94 3c 01 	call	0x278	; 0x278 <display_clear_top_rows>
		printf("Play Song");
     d48:	83 e6       	ldi	r24, 0x63	; 99
     d4a:	92 e0       	ldi	r25, 0x02	; 2
     d4c:	9f 93       	push	r25
     d4e:	8f 93       	push	r24
     d50:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <printf>
		new_menu = false;
     d54:	10 92 31 02 	sts	0x0231, r1	; 0x800231 <new_menu>
     d58:	0f 90       	pop	r0
     d5a:	0f 90       	pop	r0
	}

	if(joystick_up){
     d5c:	80 91 53 03 	lds	r24, 0x0353	; 0x800353 <joystick_up>
     d60:	88 23       	and	r24, r24
     d62:	71 f0       	breq	.+28     	; 0xd80 <menu_songs+0x46>
		if(song_selected == 0)song_selected += SONGS_LENGHT;
     d64:	80 91 db 01 	lds	r24, 0x01DB	; 0x8001db <song_selected>
     d68:	81 11       	cpse	r24, r1
     d6a:	05 c0       	rjmp	.+10     	; 0xd76 <menu_songs+0x3c>
     d6c:	80 91 db 01 	lds	r24, 0x01DB	; 0x8001db <song_selected>
     d70:	85 5f       	subi	r24, 0xF5	; 245
     d72:	80 93 db 01 	sts	0x01DB, r24	; 0x8001db <song_selected>
		song_selected--;
     d76:	80 91 db 01 	lds	r24, 0x01DB	; 0x8001db <song_selected>
     d7a:	81 50       	subi	r24, 0x01	; 1
     d7c:	80 93 db 01 	sts	0x01DB, r24	; 0x8001db <song_selected>
	}

	if(joystick_down){
     d80:	80 91 52 03 	lds	r24, 0x0352	; 0x800352 <joystick_down>
     d84:	88 23       	and	r24, r24
     d86:	71 f0       	breq	.+28     	; 0xda4 <menu_songs+0x6a>
		song_selected++;
     d88:	80 91 db 01 	lds	r24, 0x01DB	; 0x8001db <song_selected>
     d8c:	8f 5f       	subi	r24, 0xFF	; 255
     d8e:	80 93 db 01 	sts	0x01DB, r24	; 0x8001db <song_selected>
		if(song_selected >= SONGS_LENGHT)song_selected -= SONGS_LENGHT;
     d92:	80 91 db 01 	lds	r24, 0x01DB	; 0x8001db <song_selected>
     d96:	8b 30       	cpi	r24, 0x0B	; 11
     d98:	28 f0       	brcs	.+10     	; 0xda4 <menu_songs+0x6a>
     d9a:	80 91 db 01 	lds	r24, 0x01DB	; 0x8001db <song_selected>
     d9e:	8b 50       	subi	r24, 0x0B	; 11
     da0:	80 93 db 01 	sts	0x01DB, r24	; 0x8001db <song_selected>
	}

	if(button_pressed_joystick){
     da4:	80 91 4d 03 	lds	r24, 0x034D	; 0x80034d <button_pressed_joystick>
     da8:	88 23       	and	r24, r24
     daa:	d9 f0       	breq	.+54     	; 0xde2 <menu_songs+0xa8>
		song_id = song_selected+1;
     dac:	80 91 db 01 	lds	r24, 0x01DB	; 0x8001db <song_selected>
		if(song_id <= 9)song_id += '0';
     db0:	91 e0       	ldi	r25, 0x01	; 1
     db2:	98 0f       	add	r25, r24
     db4:	9a 30       	cpi	r25, 0x0A	; 10
     db6:	18 f4       	brcc	.+6      	; 0xdbe <menu_songs+0x84>
     db8:	c1 e3       	ldi	r28, 0x31	; 49
     dba:	c8 0f       	add	r28, r24
     dbc:	02 c0       	rjmp	.+4      	; 0xdc2 <menu_songs+0x88>
		else song_id += 'A'-10;
     dbe:	c8 e3       	ldi	r28, 0x38	; 56
     dc0:	c8 0f       	add	r28, r24
		
		uart_set_stdout();
     dc2:	0e 94 09 0c 	call	0x1812	; 0x1812 <uart_set_stdout>
		printf("02%c\n", song_id);
     dc6:	1f 92       	push	r1
     dc8:	cf 93       	push	r28
     dca:	8d e6       	ldi	r24, 0x6D	; 109
     dcc:	92 e0       	ldi	r25, 0x02	; 2
     dce:	9f 93       	push	r25
     dd0:	8f 93       	push	r24
     dd2:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <printf>
		display_set_stdout();
     dd6:	0e 94 94 00 	call	0x128	; 0x128 <display_set_stdout>
     dda:	0f 90       	pop	r0
     ddc:	0f 90       	pop	r0
     dde:	0f 90       	pop	r0
     de0:	0f 90       	pop	r0
	}

	display_set_cursor_pos(16);
     de2:	80 e1       	ldi	r24, 0x10	; 16
     de4:	0e 94 0f 01 	call	0x21e	; 0x21e <display_set_cursor_pos>
	printf("%s", songs[song_selected]);
     de8:	80 91 db 01 	lds	r24, 0x01DB	; 0x8001db <song_selected>
     dec:	21 e1       	ldi	r18, 0x11	; 17
     dee:	82 9f       	mul	r24, r18
     df0:	c0 01       	movw	r24, r0
     df2:	11 24       	eor	r1, r1
     df4:	80 5e       	subi	r24, 0xE0	; 224
     df6:	9e 4f       	sbci	r25, 0xFE	; 254
     df8:	9f 93       	push	r25
     dfa:	8f 93       	push	r24
     dfc:	80 e6       	ldi	r24, 0x60	; 96
     dfe:	92 e0       	ldi	r25, 0x02	; 2
     e00:	9f 93       	push	r25
     e02:	8f 93       	push	r24
     e04:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <printf>
}
     e08:	0f 90       	pop	r0
     e0a:	0f 90       	pop	r0
     e0c:	0f 90       	pop	r0
     e0e:	0f 90       	pop	r0
     e10:	cf 91       	pop	r28
     e12:	08 95       	ret

00000e14 <menu_custom>:

void menu_custom(){
     e14:	0f 93       	push	r16
     e16:	1f 93       	push	r17
     e18:	cf 93       	push	r28
     e1a:	df 93       	push	r29
	if(new_menu){
     e1c:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <new_menu>
     e20:	88 23       	and	r24, r24
     e22:	21 f0       	breq	.+8      	; 0xe2c <menu_custom+0x18>
		display_clear_top_rows();
     e24:	0e 94 3c 01 	call	0x278	; 0x278 <display_clear_top_rows>
		new_menu = false;
     e28:	10 92 31 02 	sts	0x0231, r1	; 0x800231 <new_menu>
	}
	display_set_cursor_pos(0);
     e2c:	80 e0       	ldi	r24, 0x00	; 0
     e2e:	0e 94 0f 01 	call	0x21e	; 0x21e <display_set_cursor_pos>
     e32:	c0 e0       	ldi	r28, 0x00	; 0
     e34:	d0 e0       	ldi	r29, 0x00	; 0
	for(uint8_t i = 0; i < 16; i++){
		display_write_char(((custom_cursor+i)%26)+65, NULL);
     e36:	0a e1       	ldi	r16, 0x1A	; 26
     e38:	10 e0       	ldi	r17, 0x00	; 0
     e3a:	80 91 3a 03 	lds	r24, 0x033A	; 0x80033a <custom_cursor>
     e3e:	9e 01       	movw	r18, r28
     e40:	28 0f       	add	r18, r24
     e42:	31 1d       	adc	r19, r1
     e44:	c9 01       	movw	r24, r18
     e46:	b8 01       	movw	r22, r16
     e48:	0e 94 1d 0c 	call	0x183a	; 0x183a <__divmodhi4>
     e4c:	60 e0       	ldi	r22, 0x00	; 0
     e4e:	70 e0       	ldi	r23, 0x00	; 0
     e50:	8f 5b       	subi	r24, 0xBF	; 191
     e52:	0e 94 07 01 	call	0x20e	; 0x20e <display_write_char>
     e56:	21 96       	adiw	r28, 0x01	; 1
	if(new_menu){
		display_clear_top_rows();
		new_menu = false;
	}
	display_set_cursor_pos(0);
	for(uint8_t i = 0; i < 16; i++){
     e58:	c0 31       	cpi	r28, 0x10	; 16
     e5a:	d1 05       	cpc	r29, r1
     e5c:	71 f7       	brne	.-36     	; 0xe3a <menu_custom+0x26>
		display_write_char(((custom_cursor+i)%26)+65, NULL);
	}
	printf("%s", custom_message);
     e5e:	8f e0       	ldi	r24, 0x0F	; 15
     e60:	91 e0       	ldi	r25, 0x01	; 1
     e62:	9f 93       	push	r25
     e64:	8f 93       	push	r24
     e66:	80 e6       	ldi	r24, 0x60	; 96
     e68:	92 e0       	ldi	r25, 0x02	; 2
     e6a:	9f 93       	push	r25
     e6c:	8f 93       	push	r24
     e6e:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <printf>

	if(joystick_left){
     e72:	0f 90       	pop	r0
     e74:	0f 90       	pop	r0
     e76:	0f 90       	pop	r0
     e78:	0f 90       	pop	r0
     e7a:	80 91 51 03 	lds	r24, 0x0351	; 0x800351 <joystick_left>
     e7e:	88 23       	and	r24, r24
     e80:	61 f0       	breq	.+24     	; 0xe9a <menu_custom+0x86>
		if(custom_cursor == 0)custom_cursor = 26;
     e82:	80 91 3a 03 	lds	r24, 0x033A	; 0x80033a <custom_cursor>
     e86:	81 11       	cpse	r24, r1
     e88:	03 c0       	rjmp	.+6      	; 0xe90 <menu_custom+0x7c>
     e8a:	8a e1       	ldi	r24, 0x1A	; 26
     e8c:	80 93 3a 03 	sts	0x033A, r24	; 0x80033a <custom_cursor>
		custom_cursor--;
     e90:	80 91 3a 03 	lds	r24, 0x033A	; 0x80033a <custom_cursor>
     e94:	81 50       	subi	r24, 0x01	; 1
     e96:	80 93 3a 03 	sts	0x033A, r24	; 0x80033a <custom_cursor>
	}

	if(joystick_right){
     e9a:	80 91 50 03 	lds	r24, 0x0350	; 0x800350 <joystick_right>
     e9e:	88 23       	and	r24, r24
     ea0:	59 f0       	breq	.+22     	; 0xeb8 <menu_custom+0xa4>
		custom_cursor++;
     ea2:	80 91 3a 03 	lds	r24, 0x033A	; 0x80033a <custom_cursor>
     ea6:	8f 5f       	subi	r24, 0xFF	; 255
     ea8:	80 93 3a 03 	sts	0x033A, r24	; 0x80033a <custom_cursor>
		if(custom_cursor >= 26)custom_cursor = 0;
     eac:	80 91 3a 03 	lds	r24, 0x033A	; 0x80033a <custom_cursor>
     eb0:	8a 31       	cpi	r24, 0x1A	; 26
     eb2:	10 f0       	brcs	.+4      	; 0xeb8 <menu_custom+0xa4>
     eb4:	10 92 3a 03 	sts	0x033A, r1	; 0x80033a <custom_cursor>
	}

	if(joystick_up){
     eb8:	80 91 53 03 	lds	r24, 0x0353	; 0x800353 <joystick_up>
     ebc:	88 23       	and	r24, r24
     ebe:	71 f0       	breq	.+28     	; 0xedc <menu_custom+0xc8>
		custom_cursor += 8;
     ec0:	80 91 3a 03 	lds	r24, 0x033A	; 0x80033a <custom_cursor>
     ec4:	88 5f       	subi	r24, 0xF8	; 248
     ec6:	80 93 3a 03 	sts	0x033A, r24	; 0x80033a <custom_cursor>
		if(custom_cursor >= 26)custom_cursor -= 26;
     eca:	80 91 3a 03 	lds	r24, 0x033A	; 0x80033a <custom_cursor>
     ece:	8a 31       	cpi	r24, 0x1A	; 26
     ed0:	28 f0       	brcs	.+10     	; 0xedc <menu_custom+0xc8>
     ed2:	80 91 3a 03 	lds	r24, 0x033A	; 0x80033a <custom_cursor>
     ed6:	8a 51       	subi	r24, 0x1A	; 26
     ed8:	80 93 3a 03 	sts	0x033A, r24	; 0x80033a <custom_cursor>
	}

	if(joystick_down){
     edc:	80 91 52 03 	lds	r24, 0x0352	; 0x800352 <joystick_down>
     ee0:	88 23       	and	r24, r24
     ee2:	71 f0       	breq	.+28     	; 0xf00 <menu_custom+0xec>
		if(custom_cursor < 8)custom_cursor += 26;
     ee4:	80 91 3a 03 	lds	r24, 0x033A	; 0x80033a <custom_cursor>
     ee8:	88 30       	cpi	r24, 0x08	; 8
     eea:	28 f4       	brcc	.+10     	; 0xef6 <menu_custom+0xe2>
     eec:	80 91 3a 03 	lds	r24, 0x033A	; 0x80033a <custom_cursor>
     ef0:	86 5e       	subi	r24, 0xE6	; 230
     ef2:	80 93 3a 03 	sts	0x033A, r24	; 0x80033a <custom_cursor>
		custom_cursor -= 8;
     ef6:	80 91 3a 03 	lds	r24, 0x033A	; 0x80033a <custom_cursor>
     efa:	88 50       	subi	r24, 0x08	; 8
     efc:	80 93 3a 03 	sts	0x033A, r24	; 0x80033a <custom_cursor>
	}

	if(button_pressed_joystick && custom_index < 16){
     f00:	80 91 4d 03 	lds	r24, 0x034D	; 0x80034d <button_pressed_joystick>
     f04:	88 23       	and	r24, r24
     f06:	91 f0       	breq	.+36     	; 0xf2c <menu_custom+0x118>
     f08:	80 91 3b 03 	lds	r24, 0x033B	; 0x80033b <custom_index>
     f0c:	80 31       	cpi	r24, 0x10	; 16
     f0e:	70 f4       	brcc	.+28     	; 0xf2c <menu_custom+0x118>
		custom_message[custom_index] = custom_cursor+65;
     f10:	e0 91 3b 03 	lds	r30, 0x033B	; 0x80033b <custom_index>
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	80 91 3a 03 	lds	r24, 0x033A	; 0x80033a <custom_cursor>
     f1a:	8f 5b       	subi	r24, 0xBF	; 191
     f1c:	e1 5f       	subi	r30, 0xF1	; 241
     f1e:	fe 4f       	sbci	r31, 0xFE	; 254
     f20:	80 83       	st	Z, r24
		custom_index++;
     f22:	80 91 3b 03 	lds	r24, 0x033B	; 0x80033b <custom_index>
     f26:	8f 5f       	subi	r24, 0xFF	; 255
     f28:	80 93 3b 03 	sts	0x033B, r24	; 0x80033b <custom_index>
	}
}
     f2c:	df 91       	pop	r29
     f2e:	cf 91       	pop	r28
     f30:	1f 91       	pop	r17
     f32:	0f 91       	pop	r16
     f34:	08 95       	ret

00000f36 <menu_row>:

void menu_row(){
	fiveinarow_render(buffer);
     f36:	84 e0       	ldi	r24, 0x04	; 4
     f38:	95 e0       	ldi	r25, 0x05	; 5
     f3a:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <fiveinarow_render>
	display_set_cursor_pos(0);
     f3e:	80 e0       	ldi	r24, 0x00	; 0
     f40:	0e 94 0f 01 	call	0x21e	; 0x21e <display_set_cursor_pos>
	printf("%s", buffer);
     f44:	84 e0       	ldi	r24, 0x04	; 4
     f46:	95 e0       	ldi	r25, 0x05	; 5
     f48:	9f 93       	push	r25
     f4a:	8f 93       	push	r24
     f4c:	80 e6       	ldi	r24, 0x60	; 96
     f4e:	92 e0       	ldi	r25, 0x02	; 2
     f50:	9f 93       	push	r25
     f52:	8f 93       	push	r24
     f54:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <printf>
	if(joystick_left)fiveinarow_left();
     f58:	0f 90       	pop	r0
     f5a:	0f 90       	pop	r0
     f5c:	0f 90       	pop	r0
     f5e:	0f 90       	pop	r0
     f60:	80 91 51 03 	lds	r24, 0x0351	; 0x800351 <joystick_left>
     f64:	88 23       	and	r24, r24
     f66:	19 f0       	breq	.+6      	; 0xf6e <menu_row+0x38>
     f68:	0e 94 b7 01 	call	0x36e	; 0x36e <fiveinarow_left>
     f6c:	05 c0       	rjmp	.+10     	; 0xf78 <menu_row+0x42>
	else if(joystick_right)fiveinarow_right();
     f6e:	80 91 50 03 	lds	r24, 0x0350	; 0x800350 <joystick_right>
     f72:	81 11       	cpse	r24, r1
     f74:	0e 94 c4 01 	call	0x388	; 0x388 <fiveinarow_right>

	if(joystick_up)fiveinarow_up();
     f78:	80 91 53 03 	lds	r24, 0x0353	; 0x800353 <joystick_up>
     f7c:	88 23       	and	r24, r24
     f7e:	19 f0       	breq	.+6      	; 0xf86 <menu_row+0x50>
     f80:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <fiveinarow_up>
     f84:	05 c0       	rjmp	.+10     	; 0xf90 <menu_row+0x5a>
	else if(joystick_down)fiveinarow_down();
     f86:	80 91 52 03 	lds	r24, 0x0352	; 0x800352 <joystick_down>
     f8a:	81 11       	cpse	r24, r1
     f8c:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <fiveinarow_down>

	if(button_pressed_joystick){
     f90:	80 91 4d 03 	lds	r24, 0x034D	; 0x80034d <button_pressed_joystick>
     f94:	88 23       	and	r24, r24
     f96:	21 f1       	breq	.+72     	; 0xfe0 <menu_row+0xaa>
		fiveinarow_place(msg, '2');
     f98:	62 e3       	ldi	r22, 0x32	; 50
     f9a:	8f ef       	ldi	r24, 0xFF	; 255
     f9c:	94 e0       	ldi	r25, 0x04	; 4
     f9e:	0e 94 04 02 	call	0x408	; 0x408 <fiveinarow_place>
		if(msg[0] != '\0'){
     fa2:	80 91 ff 04 	lds	r24, 0x04FF	; 0x8004ff <msg>
     fa6:	88 23       	and	r24, r24
     fa8:	d9 f0       	breq	.+54     	; 0xfe0 <menu_row+0xaa>
			if(fiveinarow_check_win()){
     faa:	0e 94 08 03 	call	0x610	; 0x610 <fiveinarow_check_win>
     fae:	88 23       	and	r24, r24
     fb0:	79 f0       	breq	.+30     	; 0xfd0 <menu_row+0x9a>
				row_game = false;
     fb2:	10 92 3f 03 	sts	0x033F, r1	; 0x80033f <row_game>
				menu = Home;
     fb6:	10 92 41 03 	sts	0x0341, r1	; 0x800341 <menu>
				new_menu = true;
     fba:	81 e0       	ldi	r24, 0x01	; 1
     fbc:	80 93 31 02 	sts	0x0231, r24	; 0x800231 <new_menu>
				lockout_delay = 0;
     fc0:	10 92 5e 03 	sts	0x035E, r1	; 0x80035e <lockout_delay+0x1>
     fc4:	10 92 5d 03 	sts	0x035D, r1	; 0x80035d <lockout_delay>
				//display_clear();
				messages_force("    You won!");
     fc8:	83 e7       	ldi	r24, 0x73	; 115
     fca:	92 e0       	ldi	r25, 0x02	; 2
     fcc:	0e 94 80 0b 	call	0x1700	; 0x1700 <messages_force>
			}
			uart_set_stdout();
     fd0:	0e 94 09 0c 	call	0x1812	; 0x1812 <uart_set_stdout>
			printf("%s\n", msg);
     fd4:	8f ef       	ldi	r24, 0xFF	; 255
     fd6:	94 e0       	ldi	r25, 0x04	; 4
     fd8:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <puts>
			display_set_stdout();
     fdc:	0e 94 94 00 	call	0x128	; 0x128 <display_set_stdout>
     fe0:	08 95       	ret

00000fe2 <main>:
void menu_songs();
void menu_custom();
void menu_row();

int main(void){
	setup();
     fe2:	0e 94 b3 03 	call	0x766	; 0x766 <setup>
	while (true) {
		//Display message
		if(menu != Row){
			messages_move_queue();
			if(!output_buf_read){
				display_set_cursor_pos(32);
     fe6:	68 94       	set
     fe8:	55 24       	eor	r5, r5
     fea:	55 f8       	bld	r5, 5
				if(*messages_get_buffer() == '\0')display_clear_line(2);
				else printf("%s", messages_get_buffer());
     fec:	0f 2e       	mov	r0, r31
     fee:	f0 e6       	ldi	r31, 0x60	; 96
     ff0:	cf 2e       	mov	r12, r31
     ff2:	f2 e0       	ldi	r31, 0x02	; 2
     ff4:	df 2e       	mov	r13, r31
     ff6:	f0 2d       	mov	r31, r0
			printf("241\n");
			display_set_stdout();
		}
		
		if(button_released_deadman && lockout_delay == 0){//Stop the car
			new_menu = true;
     ff8:	44 24       	eor	r4, r4
     ffa:	43 94       	inc	r4
				case Custom: menu_custom(); break;
				case Row: menu_row(); break;
				default:
					if(new_menu){
						display_clear_top_rows();
						printf("ERROR: Unknown  menu state");
     ffc:	0f 2e       	mov	r0, r31
     ffe:	f7 ee       	ldi	r31, 0xE7	; 231
    1000:	8f 2e       	mov	r8, r31
    1002:	f2 e0       	ldi	r31, 0x02	; 2
    1004:	9f 2e       	mov	r9, r31
    1006:	f0 2d       	mov	r31, r0
			switch(menu){
				case Home:
					if(new_menu){
						display_clear_top_rows();
						display_set_cursor_pos(18);
						printf("Home Screen!");
    1008:	0f 2e       	mov	r0, r31
    100a:	fa ed       	ldi	r31, 0xDA	; 218
    100c:	6f 2e       	mov	r6, r31
    100e:	f2 e0       	ldi	r31, 0x02	; 2
    1010:	7f 2e       	mov	r7, r31
    1012:	f0 2d       	mov	r31, r0
	display_set_cursor_pos(30);
	printf("%d", speed_mod);
}

void set_menu(enum menus m){
	menu = m;
    1014:	0f 2e       	mov	r0, r31
    1016:	f5 e0       	ldi	r31, 0x05	; 5
    1018:	3f 2e       	mov	r3, r31
    101a:	f0 2d       	mov	r31, r0
					//Cancel game
					row_game = false;
					uart_set_stdout();
					printf("23AA\n");
					display_set_stdout();
					lockout_delay = LOCKOUT_DELAY;
    101c:	0f 2e       	mov	r0, r31
    101e:	f0 e6       	ldi	r31, 0x60	; 96
    1020:	af 2e       	mov	r10, r31
    1022:	fa ee       	ldi	r31, 0xEA	; 234
    1024:	bf 2e       	mov	r11, r31
    1026:	f0 2d       	mov	r31, r0
					
					set_menu(Home);
				}else{
					//Reset custom message settings
					for(uint8_t i = 0; i < 16; i++)custom_message[i] = ' ';
					custom_message[17] = '\0';
    1028:	cf e0       	ldi	r28, 0x0F	; 15
    102a:	d1 e0       	ldi	r29, 0x01	; 1
			print_control_info();
			
			if(command_delay == 0 &&(left != last_left || right != last_right)){
				//cli();
				uart_set_stdout();
				printf("03%d %d\n", left, right);
    102c:	0f 2e       	mov	r0, r31
    102e:	f3 ec       	ldi	r31, 0xC3	; 195
    1030:	ef 2e       	mov	r14, r31
    1032:	f2 e0       	ldi	r31, 0x02	; 2
    1034:	ff 2e       	mov	r15, r31
    1036:	f0 2d       	mov	r31, r0
			
			update_left_rigth();
			if(button_pressed_deadman){//Switch display
				if(menu == Row)display_clear();
				else display_clear_top_rows();
				printf("Vert:   Horz:   L:    R:    S:  ");
    1038:	02 ea       	ldi	r16, 0xA2	; 162
    103a:	12 e0       	ldi	r17, 0x02	; 2
int main(void){
	setup();
	
	while (true) {
		//Display message
		if(menu != Row){
    103c:	80 91 41 03 	lds	r24, 0x0341	; 0x800341 <menu>
    1040:	85 30       	cpi	r24, 0x05	; 5
    1042:	f9 f0       	breq	.+62     	; 0x1082 <main+0xa0>
			messages_move_queue();
    1044:	0e 94 c5 0b 	call	0x178a	; 0x178a <messages_move_queue>
			if(!output_buf_read){
    1048:	80 91 35 02 	lds	r24, 0x0235	; 0x800235 <output_buf_read>
    104c:	81 11       	cpse	r24, r1
    104e:	19 c0       	rjmp	.+50     	; 0x1082 <main+0xa0>
				display_set_cursor_pos(32);
    1050:	85 2d       	mov	r24, r5
    1052:	0e 94 0f 01 	call	0x21e	; 0x21e <display_set_cursor_pos>
				if(*messages_get_buffer() == '\0')display_clear_line(2);
    1056:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <messages_get_buffer>
    105a:	fc 01       	movw	r30, r24
    105c:	80 81       	ld	r24, Z
    105e:	81 11       	cpse	r24, r1
    1060:	04 c0       	rjmp	.+8      	; 0x106a <main+0x88>
    1062:	82 e0       	ldi	r24, 0x02	; 2
    1064:	0e 94 2c 01 	call	0x258	; 0x258 <display_clear_line>
    1068:	0c c0       	rjmp	.+24     	; 0x1082 <main+0xa0>
				else printf("%s", messages_get_buffer());
    106a:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <messages_get_buffer>
    106e:	9f 93       	push	r25
    1070:	8f 93       	push	r24
    1072:	df 92       	push	r13
    1074:	cf 92       	push	r12
    1076:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <printf>
    107a:	0f 90       	pop	r0
    107c:	0f 90       	pop	r0
    107e:	0f 90       	pop	r0
    1080:	0f 90       	pop	r0
			}
		}
		
		//Get inputs
		vert = adc_read(4);
    1082:	84 e0       	ldi	r24, 0x04	; 4
    1084:	0e 94 74 00 	call	0xe8	; 0xe8 <adc_read>
    1088:	80 93 5b 03 	sts	0x035B, r24	; 0x80035b <vert>
		horz = adc_read(3);
    108c:	83 e0       	ldi	r24, 0x03	; 3
    108e:	0e 94 74 00 	call	0xe8	; 0xe8 <adc_read>
    1092:	80 93 5a 03 	sts	0x035A, r24	; 0x80035a <horz>
		
		read_buttons();
    1096:	0e 94 50 04 	call	0x8a0	; 0x8a0 <read_buttons>
		
		if(button_pressed_deadman && lockout_delay == 0){
    109a:	80 91 4b 03 	lds	r24, 0x034B	; 0x80034b <button_pressed_deadman>
    109e:	88 23       	and	r24, r24
    10a0:	91 f0       	breq	.+36     	; 0x10c6 <main+0xe4>
    10a2:	80 91 5d 03 	lds	r24, 0x035D	; 0x80035d <lockout_delay>
    10a6:	90 91 5e 03 	lds	r25, 0x035E	; 0x80035e <lockout_delay+0x1>
    10aa:	89 2b       	or	r24, r25
    10ac:	61 f4       	brne	.+24     	; 0x10c6 <main+0xe4>
			uart_set_stdout();
    10ae:	0e 94 09 0c 	call	0x1812	; 0x1812 <uart_set_stdout>
			printf("043\n");
    10b2:	80 e8       	ldi	r24, 0x80	; 128
    10b4:	92 e0       	ldi	r25, 0x02	; 2
    10b6:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <puts>
			printf("241\n");
    10ba:	84 e8       	ldi	r24, 0x84	; 132
    10bc:	92 e0       	ldi	r25, 0x02	; 2
    10be:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <puts>
			display_set_stdout();
    10c2:	0e 94 94 00 	call	0x128	; 0x128 <display_set_stdout>
		}
		
		if(button_released_deadman && lockout_delay == 0){//Stop the car
    10c6:	80 91 4a 03 	lds	r24, 0x034A	; 0x80034a <button_released_deadman>
    10ca:	88 23       	and	r24, r24
    10cc:	c1 f0       	breq	.+48     	; 0x10fe <main+0x11c>
    10ce:	80 91 5d 03 	lds	r24, 0x035D	; 0x80035d <lockout_delay>
    10d2:	90 91 5e 03 	lds	r25, 0x035E	; 0x80035e <lockout_delay+0x1>
    10d6:	89 2b       	or	r24, r25
    10d8:	91 f4       	brne	.+36     	; 0x10fe <main+0x11c>
			new_menu = true;
    10da:	40 92 31 02 	sts	0x0231, r4	; 0x800231 <new_menu>
			uart_set_stdout();
    10de:	0e 94 09 0c 	call	0x1812	; 0x1812 <uart_set_stdout>
			printf("030 0\n");
    10e2:	88 e8       	ldi	r24, 0x88	; 136
    10e4:	92 e0       	ldi	r25, 0x02	; 2
    10e6:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <puts>
			printf("042\n");
    10ea:	8e e8       	ldi	r24, 0x8E	; 142
    10ec:	92 e0       	ldi	r25, 0x02	; 2
    10ee:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <puts>
			printf("240\n");
    10f2:	82 e9       	ldi	r24, 0x92	; 146
    10f4:	92 e0       	ldi	r25, 0x02	; 2
    10f6:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <puts>
			display_set_stdout();
    10fa:	0e 94 94 00 	call	0x128	; 0x128 <display_set_stdout>
		}
		
		if(button_deadman && lockout_delay == 0){//Drive car
    10fe:	80 91 4c 03 	lds	r24, 0x034C	; 0x80034c <button_deadman>
    1102:	88 23       	and	r24, r24
    1104:	09 f4       	brne	.+2      	; 0x1108 <main+0x126>
    1106:	98 c0       	rjmp	.+304    	; 0x1238 <main+0x256>
    1108:	80 91 5d 03 	lds	r24, 0x035D	; 0x80035d <lockout_delay>
    110c:	90 91 5e 03 	lds	r25, 0x035E	; 0x80035e <lockout_delay+0x1>
    1110:	89 2b       	or	r24, r25
    1112:	09 f0       	breq	.+2      	; 0x1116 <main+0x134>
    1114:	91 c0       	rjmp	.+290    	; 0x1238 <main+0x256>
			//Horn
			if(button_pressed_1){
    1116:	80 91 48 03 	lds	r24, 0x0348	; 0x800348 <button_pressed_1>
    111a:	88 23       	and	r24, r24
    111c:	41 f0       	breq	.+16     	; 0x112e <main+0x14c>
				uart_set_stdout();
    111e:	0e 94 09 0c 	call	0x1812	; 0x1812 <uart_set_stdout>
				printf("020\n");
    1122:	86 e9       	ldi	r24, 0x96	; 150
    1124:	92 e0       	ldi	r25, 0x02	; 2
    1126:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <puts>
				display_set_stdout();
    112a:	0e 94 94 00 	call	0x128	; 0x128 <display_set_stdout>
			}
			
			//Speed modifier
			if(button_pressed_2){
    112e:	80 91 46 03 	lds	r24, 0x0346	; 0x800346 <button_pressed_2>
    1132:	88 23       	and	r24, r24
    1134:	59 f0       	breq	.+22     	; 0x114c <main+0x16a>
				speed_mod += 1;
    1136:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <speed_mod>
    113a:	8f 5f       	subi	r24, 0xFF	; 255
    113c:	80 93 32 02 	sts	0x0232, r24	; 0x800232 <speed_mod>
				if(speed_mod > 3)speed_mod = 1;
    1140:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <speed_mod>
    1144:	84 30       	cpi	r24, 0x04	; 4
    1146:	10 f0       	brcs	.+4      	; 0x114c <main+0x16a>
    1148:	40 92 32 02 	sts	0x0232, r4	; 0x800232 <speed_mod>
			}
			
			if(button_pressed_3){
    114c:	80 91 44 03 	lds	r24, 0x0344	; 0x800344 <button_pressed_3>
    1150:	88 23       	and	r24, r24
    1152:	41 f0       	breq	.+16     	; 0x1164 <main+0x182>
				uart_set_stdout();
    1154:	0e 94 09 0c 	call	0x1812	; 0x1812 <uart_set_stdout>
				printf("080\n");
    1158:	8a e9       	ldi	r24, 0x9A	; 154
    115a:	92 e0       	ldi	r25, 0x02	; 2
    115c:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <puts>
				display_set_stdout();
    1160:	0e 94 94 00 	call	0x128	; 0x128 <display_set_stdout>
			}
			
			if(button_pressed_4){
    1164:	80 91 42 03 	lds	r24, 0x0342	; 0x800342 <button_pressed_4>
    1168:	88 23       	and	r24, r24
    116a:	41 f0       	breq	.+16     	; 0x117c <main+0x19a>
				uart_set_stdout();
    116c:	0e 94 09 0c 	call	0x1812	; 0x1812 <uart_set_stdout>
				printf("081\n");
    1170:	8e e9       	ldi	r24, 0x9E	; 158
    1172:	92 e0       	ldi	r25, 0x02	; 2
    1174:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <puts>
				display_set_stdout();
    1178:	0e 94 94 00 	call	0x128	; 0x128 <display_set_stdout>
			}
			
			update_left_rigth();
    117c:	0e 94 d5 04 	call	0x9aa	; 0x9aa <update_left_rigth>
			if(button_pressed_deadman){//Switch display
    1180:	80 91 4b 03 	lds	r24, 0x034B	; 0x80034b <button_pressed_deadman>
    1184:	88 23       	and	r24, r24
    1186:	79 f0       	breq	.+30     	; 0x11a6 <main+0x1c4>
				if(menu == Row)display_clear();
    1188:	80 91 41 03 	lds	r24, 0x0341	; 0x800341 <menu>
    118c:	85 30       	cpi	r24, 0x05	; 5
    118e:	19 f4       	brne	.+6      	; 0x1196 <main+0x1b4>
    1190:	0e 94 1e 01 	call	0x23c	; 0x23c <display_clear>
    1194:	02 c0       	rjmp	.+4      	; 0x119a <main+0x1b8>
				else display_clear_top_rows();
    1196:	0e 94 3c 01 	call	0x278	; 0x278 <display_clear_top_rows>
				printf("Vert:   Horz:   L:    R:    S:  ");
    119a:	1f 93       	push	r17
    119c:	0f 93       	push	r16
    119e:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <printf>
    11a2:	0f 90       	pop	r0
    11a4:	0f 90       	pop	r0
			}
			print_control_info();
    11a6:	0e 94 db 03 	call	0x7b6	; 0x7b6 <print_control_info>
			
			if(command_delay == 0 &&(left != last_left || right != last_right)){
    11aa:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <command_delay>
    11ae:	81 11       	cpse	r24, r1
    11b0:	45 cf       	rjmp	.-374    	; 0x103c <main+0x5a>
    11b2:	80 91 39 03 	lds	r24, 0x0339	; 0x800339 <last_left>
    11b6:	20 91 58 03 	lds	r18, 0x0358	; 0x800358 <left>
    11ba:	30 91 59 03 	lds	r19, 0x0359	; 0x800359 <left+0x1>
    11be:	08 2e       	mov	r0, r24
    11c0:	00 0c       	add	r0, r0
    11c2:	99 0b       	sbc	r25, r25
    11c4:	82 17       	cp	r24, r18
    11c6:	93 07       	cpc	r25, r19
    11c8:	69 f4       	brne	.+26     	; 0x11e4 <main+0x202>
    11ca:	80 91 38 03 	lds	r24, 0x0338	; 0x800338 <last_right>
    11ce:	20 91 56 03 	lds	r18, 0x0356	; 0x800356 <right>
    11d2:	30 91 57 03 	lds	r19, 0x0357	; 0x800357 <right+0x1>
    11d6:	08 2e       	mov	r0, r24
    11d8:	00 0c       	add	r0, r0
    11da:	99 0b       	sbc	r25, r25
    11dc:	82 17       	cp	r24, r18
    11de:	93 07       	cpc	r25, r19
    11e0:	09 f4       	brne	.+2      	; 0x11e4 <main+0x202>
    11e2:	2c cf       	rjmp	.-424    	; 0x103c <main+0x5a>
				//cli();
				uart_set_stdout();
    11e4:	0e 94 09 0c 	call	0x1812	; 0x1812 <uart_set_stdout>
				printf("03%d %d\n", left, right);
    11e8:	20 91 56 03 	lds	r18, 0x0356	; 0x800356 <right>
    11ec:	30 91 57 03 	lds	r19, 0x0357	; 0x800357 <right+0x1>
    11f0:	80 91 58 03 	lds	r24, 0x0358	; 0x800358 <left>
    11f4:	90 91 59 03 	lds	r25, 0x0359	; 0x800359 <left+0x1>
    11f8:	3f 93       	push	r19
    11fa:	2f 93       	push	r18
    11fc:	9f 93       	push	r25
    11fe:	8f 93       	push	r24
    1200:	ff 92       	push	r15
    1202:	ef 92       	push	r14
    1204:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <printf>
				display_set_stdout();
    1208:	0e 94 94 00 	call	0x128	; 0x128 <display_set_stdout>
				command_delay = COMMAND_DELAY_SET;
    120c:	8a e0       	ldi	r24, 0x0A	; 10
    120e:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <command_delay>
				//sei();
				
				last_left = left;
    1212:	80 91 58 03 	lds	r24, 0x0358	; 0x800358 <left>
    1216:	90 91 59 03 	lds	r25, 0x0359	; 0x800359 <left+0x1>
    121a:	80 93 39 03 	sts	0x0339, r24	; 0x800339 <last_left>
				last_right = right;
    121e:	80 91 56 03 	lds	r24, 0x0356	; 0x800356 <right>
    1222:	90 91 57 03 	lds	r25, 0x0357	; 0x800357 <right+0x1>
    1226:	80 93 38 03 	sts	0x0338, r24	; 0x800338 <last_right>
    122a:	0f 90       	pop	r0
    122c:	0f 90       	pop	r0
    122e:	0f 90       	pop	r0
    1230:	0f 90       	pop	r0
    1232:	0f 90       	pop	r0
    1234:	0f 90       	pop	r0
    1236:	02 cf       	rjmp	.-508    	; 0x103c <main+0x5a>
			}
		}else{
			//Horn
			if(button_pressed_1){
    1238:	80 91 48 03 	lds	r24, 0x0348	; 0x800348 <button_pressed_1>
    123c:	88 23       	and	r24, r24
    123e:	41 f0       	breq	.+16     	; 0x1250 <main+0x26e>
				uart_set_stdout();
    1240:	0e 94 09 0c 	call	0x1812	; 0x1812 <uart_set_stdout>
				printf("220\n");
    1244:	8c ec       	ldi	r24, 0xCC	; 204
    1246:	92 e0       	ldi	r25, 0x02	; 2
    1248:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <puts>
				display_set_stdout();
    124c:	0e 94 94 00 	call	0x128	; 0x128 <display_set_stdout>
			}
			
			//Joystick cursor navigation
			update_joystick_navigation();
    1250:	0e 94 95 05 	call	0xb2a	; 0xb2a <update_joystick_navigation>
			
			//Navigate between menus
			if(menu != Custom && menu != Row){
    1254:	80 91 41 03 	lds	r24, 0x0341	; 0x800341 <menu>
    1258:	84 30       	cpi	r24, 0x04	; 4
    125a:	39 f1       	breq	.+78     	; 0x12aa <main+0x2c8>
    125c:	80 91 41 03 	lds	r24, 0x0341	; 0x800341 <menu>
    1260:	85 30       	cpi	r24, 0x05	; 5
    1262:	19 f1       	breq	.+70     	; 0x12aa <main+0x2c8>
				if(joystick_right){
    1264:	80 91 50 03 	lds	r24, 0x0350	; 0x800350 <joystick_right>
    1268:	88 23       	and	r24, r24
    126a:	69 f0       	breq	.+26     	; 0x1286 <main+0x2a4>
					menu++;
    126c:	80 91 41 03 	lds	r24, 0x0341	; 0x800341 <menu>
    1270:	8f 5f       	subi	r24, 0xFF	; 255
    1272:	80 93 41 03 	sts	0x0341, r24	; 0x800341 <menu>
					if(menu >= End)menu = 0;
    1276:	80 91 41 03 	lds	r24, 0x0341	; 0x800341 <menu>
    127a:	83 30       	cpi	r24, 0x03	; 3
    127c:	10 f0       	brcs	.+4      	; 0x1282 <main+0x2a0>
    127e:	10 92 41 03 	sts	0x0341, r1	; 0x800341 <menu>
					new_menu = true;
    1282:	40 92 31 02 	sts	0x0231, r4	; 0x800231 <new_menu>
				}
				if(joystick_left){
    1286:	80 91 51 03 	lds	r24, 0x0351	; 0x800351 <joystick_left>
    128a:	88 23       	and	r24, r24
    128c:	71 f0       	breq	.+28     	; 0x12aa <main+0x2c8>
					if(menu == 0)menu = End;
    128e:	80 91 41 03 	lds	r24, 0x0341	; 0x800341 <menu>
    1292:	81 11       	cpse	r24, r1
    1294:	03 c0       	rjmp	.+6      	; 0x129c <main+0x2ba>
    1296:	83 e0       	ldi	r24, 0x03	; 3
    1298:	80 93 41 03 	sts	0x0341, r24	; 0x800341 <menu>
					menu--;
    129c:	80 91 41 03 	lds	r24, 0x0341	; 0x800341 <menu>
    12a0:	81 50       	subi	r24, 0x01	; 1
    12a2:	80 93 41 03 	sts	0x0341, r24	; 0x800341 <menu>
					new_menu = true;
    12a6:	40 92 31 02 	sts	0x0231, r4	; 0x800231 <new_menu>
				}
			}
			
			if(button_pressed_2){
    12aa:	80 91 46 03 	lds	r24, 0x0346	; 0x800346 <button_pressed_2>
    12ae:	88 23       	and	r24, r24
    12b0:	e9 f1       	breq	.+122    	; 0x132c <main+0x34a>
				if(menu == Custom){
    12b2:	80 91 41 03 	lds	r24, 0x0341	; 0x800341 <menu>
    12b6:	84 30       	cpi	r24, 0x04	; 4
    12b8:	29 f5       	brne	.+74     	; 0x1304 <main+0x322>
					//Send message
					if(custom_index > 0){
    12ba:	80 91 3b 03 	lds	r24, 0x033B	; 0x80033b <custom_index>
    12be:	88 23       	and	r24, r24
    12c0:	e1 f0       	breq	.+56     	; 0x12fa <main+0x318>
						uart_set_stdout();
    12c2:	0e 94 09 0c 	call	0x1812	; 0x1812 <uart_set_stdout>
						printf("01%s\n", custom_message);
    12c6:	df 93       	push	r29
    12c8:	cf 93       	push	r28
    12ca:	84 e5       	ldi	r24, 0x54	; 84
    12cc:	92 e0       	ldi	r25, 0x02	; 2
    12ce:	9f 93       	push	r25
    12d0:	8f 93       	push	r24
    12d2:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <printf>
						printf("21%s\n", custom_message);
    12d6:	df 93       	push	r29
    12d8:	cf 93       	push	r28
    12da:	8a e5       	ldi	r24, 0x5A	; 90
    12dc:	92 e0       	ldi	r25, 0x02	; 2
    12de:	9f 93       	push	r25
    12e0:	8f 93       	push	r24
    12e2:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <printf>
						display_set_stdout();
    12e6:	0e 94 94 00 	call	0x128	; 0x128 <display_set_stdout>
    12ea:	8d b7       	in	r24, 0x3d	; 61
    12ec:	9e b7       	in	r25, 0x3e	; 62
    12ee:	08 96       	adiw	r24, 0x08	; 8
    12f0:	0f b6       	in	r0, 0x3f	; 63
    12f2:	f8 94       	cli
    12f4:	9e bf       	out	0x3e, r25	; 62
    12f6:	0f be       	out	0x3f, r0	; 63
    12f8:	8d bf       	out	0x3d, r24	; 61
	display_set_cursor_pos(30);
	printf("%d", speed_mod);
}

void set_menu(enum menus m){
	menu = m;
    12fa:	10 92 41 03 	sts	0x0341, r1	; 0x800341 <menu>
	new_menu = true;
    12fe:	40 92 31 02 	sts	0x0231, r4	; 0x800231 <new_menu>
    1302:	14 c0       	rjmp	.+40     	; 0x132c <main+0x34a>
    1304:	80 e0       	ldi	r24, 0x00	; 0
    1306:	90 e0       	ldi	r25, 0x00	; 0
					}
					
					set_menu(Home);
				}else{
					//Reset custom message settings
					for(uint8_t i = 0; i < 16; i++)custom_message[i] = ' ';
    1308:	fc 01       	movw	r30, r24
    130a:	e1 5f       	subi	r30, 0xF1	; 241
    130c:	fe 4f       	sbci	r31, 0xFE	; 254
    130e:	50 82       	st	Z, r5
    1310:	01 96       	adiw	r24, 0x01	; 1
    1312:	80 31       	cpi	r24, 0x10	; 16
    1314:	91 05       	cpc	r25, r1
    1316:	c1 f7       	brne	.-16     	; 0x1308 <main+0x326>
					custom_message[17] = '\0';
    1318:	19 8a       	std	Y+17, r1	; 0x11
					
					custom_index = 0;
    131a:	10 92 3b 03 	sts	0x033B, r1	; 0x80033b <custom_index>
					custom_cursor = 0;
    131e:	10 92 3a 03 	sts	0x033A, r1	; 0x80033a <custom_cursor>
	display_set_cursor_pos(30);
	printf("%d", speed_mod);
}

void set_menu(enum menus m){
	menu = m;
    1322:	84 e0       	ldi	r24, 0x04	; 4
    1324:	80 93 41 03 	sts	0x0341, r24	; 0x800341 <menu>
	new_menu = true;
    1328:	40 92 31 02 	sts	0x0231, r4	; 0x800231 <new_menu>
					custom_cursor = 0;
					set_menu(Custom);
				}
			}
			
			if(button_pressed_3){
    132c:	80 91 44 03 	lds	r24, 0x0344	; 0x800344 <button_pressed_3>
    1330:	88 23       	and	r24, r24
    1332:	d1 f1       	breq	.+116    	; 0x13a8 <main+0x3c6>
				if(menu == Row){
    1334:	80 91 41 03 	lds	r24, 0x0341	; 0x800341 <menu>
    1338:	85 30       	cpi	r24, 0x05	; 5
    133a:	a9 f4       	brne	.+42     	; 0x1366 <main+0x384>
					display_clear();
    133c:	0e 94 1e 01 	call	0x23c	; 0x23c <display_clear>
	display_set_cursor_pos(30);
	printf("%d", speed_mod);
}

void set_menu(enum menus m){
	menu = m;
    1340:	10 92 41 03 	sts	0x0341, r1	; 0x800341 <menu>
	new_menu = true;
    1344:	40 92 31 02 	sts	0x0231, r4	; 0x800231 <new_menu>
			if(button_pressed_3){
				if(menu == Row){
					display_clear();
					set_menu(Home);
					//Cancel game
					row_game = false;
    1348:	10 92 3f 03 	sts	0x033F, r1	; 0x80033f <row_game>
					uart_set_stdout();
    134c:	0e 94 09 0c 	call	0x1812	; 0x1812 <uart_set_stdout>
					printf("23AA\n");
    1350:	80 ed       	ldi	r24, 0xD0	; 208
    1352:	92 e0       	ldi	r25, 0x02	; 2
    1354:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <puts>
					display_set_stdout();
    1358:	0e 94 94 00 	call	0x128	; 0x128 <display_set_stdout>
					lockout_delay = LOCKOUT_DELAY;
    135c:	b0 92 5e 03 	sts	0x035E, r11	; 0x80035e <lockout_delay+0x1>
    1360:	a0 92 5d 03 	sts	0x035D, r10	; 0x80035d <lockout_delay>
    1364:	21 c0       	rjmp	.+66     	; 0x13a8 <main+0x3c6>
				}else{
					if(row_game){
    1366:	80 91 3f 03 	lds	r24, 0x033F	; 0x80033f <row_game>
    136a:	88 23       	and	r24, r24
    136c:	29 f0       	breq	.+10     	; 0x1378 <main+0x396>
	display_set_cursor_pos(30);
	printf("%d", speed_mod);
}

void set_menu(enum menus m){
	menu = m;
    136e:	30 92 41 03 	sts	0x0341, r3	; 0x800341 <menu>
	new_menu = true;
    1372:	40 92 31 02 	sts	0x0231, r4	; 0x800231 <new_menu>
    1376:	18 c0       	rjmp	.+48     	; 0x13a8 <main+0x3c6>
					lockout_delay = LOCKOUT_DELAY;
				}else{
					if(row_game){
						set_menu(Row);
					}else{
						if(row_request == 0){
    1378:	80 91 3d 03 	lds	r24, 0x033D	; 0x80033d <row_request>
    137c:	90 91 3e 03 	lds	r25, 0x033E	; 0x80033e <row_request+0x1>
    1380:	89 2b       	or	r24, r25
    1382:	49 f4       	brne	.+18     	; 0x1396 <main+0x3b4>
							uart_set_stdout();
    1384:	0e 94 09 0c 	call	0x1812	; 0x1812 <uart_set_stdout>
							printf("23//\n");
    1388:	85 ed       	ldi	r24, 0xD5	; 213
    138a:	92 e0       	ldi	r25, 0x02	; 2
    138c:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <puts>
							display_set_stdout();
    1390:	0e 94 94 00 	call	0x128	; 0x128 <display_set_stdout>
    1394:	09 c0       	rjmp	.+18     	; 0x13a8 <main+0x3c6>
						}else{
							fiveinarow_setup(true);
    1396:	84 2d       	mov	r24, r4
    1398:	0e 94 91 01 	call	0x322	; 0x322 <fiveinarow_setup>
							row_game = true;
    139c:	40 92 3f 03 	sts	0x033F, r4	; 0x80033f <row_game>
	display_set_cursor_pos(30);
	printf("%d", speed_mod);
}

void set_menu(enum menus m){
	menu = m;
    13a0:	30 92 41 03 	sts	0x0341, r3	; 0x800341 <menu>
	new_menu = true;
    13a4:	40 92 31 02 	sts	0x0231, r4	; 0x800231 <new_menu>
						}
					}
				}
			}
			
			switch(menu){
    13a8:	80 91 41 03 	lds	r24, 0x0341	; 0x800341 <menu>
    13ac:	82 30       	cpi	r24, 0x02	; 2
    13ae:	09 f1       	breq	.+66     	; 0x13f2 <main+0x410>
    13b0:	28 f4       	brcc	.+10     	; 0x13bc <main+0x3da>
    13b2:	88 23       	and	r24, r24
    13b4:	41 f0       	breq	.+16     	; 0x13c6 <main+0x3e4>
    13b6:	81 30       	cpi	r24, 0x01	; 1
    13b8:	c9 f0       	breq	.+50     	; 0x13ec <main+0x40a>
    13ba:	24 c0       	rjmp	.+72     	; 0x1404 <main+0x422>
    13bc:	84 30       	cpi	r24, 0x04	; 4
    13be:	e1 f0       	breq	.+56     	; 0x13f8 <main+0x416>
    13c0:	85 30       	cpi	r24, 0x05	; 5
    13c2:	e9 f0       	breq	.+58     	; 0x13fe <main+0x41c>
    13c4:	1f c0       	rjmp	.+62     	; 0x1404 <main+0x422>
				case Home:
					if(new_menu){
    13c6:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <new_menu>
    13ca:	88 23       	and	r24, r24
    13cc:	09 f4       	brne	.+2      	; 0x13d0 <main+0x3ee>
    13ce:	36 ce       	rjmp	.-916    	; 0x103c <main+0x5a>
						display_clear_top_rows();
    13d0:	0e 94 3c 01 	call	0x278	; 0x278 <display_clear_top_rows>
						display_set_cursor_pos(18);
    13d4:	82 e1       	ldi	r24, 0x12	; 18
    13d6:	0e 94 0f 01 	call	0x21e	; 0x21e <display_set_cursor_pos>
						printf("Home Screen!");
    13da:	7f 92       	push	r7
    13dc:	6f 92       	push	r6
    13de:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <printf>
						new_menu = false;
    13e2:	10 92 31 02 	sts	0x0231, r1	; 0x800231 <new_menu>
    13e6:	0f 90       	pop	r0
    13e8:	0f 90       	pop	r0
    13ea:	28 ce       	rjmp	.-944    	; 0x103c <main+0x5a>
					}
				break;
				case Messages: menu_messages(); break;
    13ec:	0e 94 20 06 	call	0xc40	; 0xc40 <menu_messages>
    13f0:	25 ce       	rjmp	.-950    	; 0x103c <main+0x5a>
				case Songs: menu_songs(); break;
    13f2:	0e 94 9d 06 	call	0xd3a	; 0xd3a <menu_songs>
    13f6:	22 ce       	rjmp	.-956    	; 0x103c <main+0x5a>
				case Custom: menu_custom(); break;
    13f8:	0e 94 0a 07 	call	0xe14	; 0xe14 <menu_custom>
    13fc:	1f ce       	rjmp	.-962    	; 0x103c <main+0x5a>
				case Row: menu_row(); break;
    13fe:	0e 94 9b 07 	call	0xf36	; 0xf36 <menu_row>
    1402:	1c ce       	rjmp	.-968    	; 0x103c <main+0x5a>
				default:
					if(new_menu){
    1404:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <new_menu>
    1408:	88 23       	and	r24, r24
    140a:	09 f4       	brne	.+2      	; 0x140e <main+0x42c>
    140c:	17 ce       	rjmp	.-978    	; 0x103c <main+0x5a>
						display_clear_top_rows();
    140e:	0e 94 3c 01 	call	0x278	; 0x278 <display_clear_top_rows>
						printf("ERROR: Unknown  menu state");
    1412:	9f 92       	push	r9
    1414:	8f 92       	push	r8
    1416:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <printf>
						new_menu = false;
    141a:	10 92 31 02 	sts	0x0231, r1	; 0x800231 <new_menu>
    141e:	0f 90       	pop	r0
    1420:	0f 90       	pop	r0
    1422:	0c ce       	rjmp	.-1000   	; 0x103c <main+0x5a>

00001424 <__vector_14>:
		}
	}
}
// ----- Interrupts -----
//100 Hz timer
ISR(TIMER0_COMPA_vect){
    1424:	1f 92       	push	r1
    1426:	0f 92       	push	r0
    1428:	0f b6       	in	r0, 0x3f	; 63
    142a:	0f 92       	push	r0
    142c:	11 24       	eor	r1, r1
    142e:	2f 93       	push	r18
    1430:	3f 93       	push	r19
    1432:	4f 93       	push	r20
    1434:	5f 93       	push	r21
    1436:	6f 93       	push	r22
    1438:	7f 93       	push	r23
    143a:	8f 93       	push	r24
    143c:	9f 93       	push	r25
    143e:	af 93       	push	r26
    1440:	bf 93       	push	r27
    1442:	ef 93       	push	r30
    1444:	ff 93       	push	r31
	messages_timerproc();
    1446:	0e 94 5c 0b 	call	0x16b8	; 0x16b8 <messages_timerproc>
	if(command_delay > 0)command_delay--;
    144a:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <command_delay>
    144e:	88 23       	and	r24, r24
    1450:	29 f0       	breq	.+10     	; 0x145c <__vector_14+0x38>
    1452:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <command_delay>
    1456:	81 50       	subi	r24, 0x01	; 1
    1458:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <command_delay>
	if(horn_delay > 0)horn_delay--;
    145c:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <horn_delay>
    1460:	88 23       	and	r24, r24
    1462:	31 f0       	breq	.+12     	; 0x1470 <__vector_14+0x4c>
    1464:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <horn_delay>
    1468:	81 50       	subi	r24, 0x01	; 1
    146a:	80 93 33 02 	sts	0x0233, r24	; 0x800233 <horn_delay>
    146e:	02 c0       	rjmp	.+4      	; 0x1474 <__vector_14+0x50>
	else piezosummer_disable();
    1470:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <piezosummer_disable>
	if(row_request > 0)row_request--;
    1474:	80 91 3d 03 	lds	r24, 0x033D	; 0x80033d <row_request>
    1478:	90 91 3e 03 	lds	r25, 0x033E	; 0x80033e <row_request+0x1>
    147c:	89 2b       	or	r24, r25
    147e:	49 f0       	breq	.+18     	; 0x1492 <__vector_14+0x6e>
    1480:	80 91 3d 03 	lds	r24, 0x033D	; 0x80033d <row_request>
    1484:	90 91 3e 03 	lds	r25, 0x033E	; 0x80033e <row_request+0x1>
    1488:	01 97       	sbiw	r24, 0x01	; 1
    148a:	90 93 3e 03 	sts	0x033E, r25	; 0x80033e <row_request+0x1>
    148e:	80 93 3d 03 	sts	0x033D, r24	; 0x80033d <row_request>
	if(lockout_delay > 0)lockout_delay--;
    1492:	80 91 5d 03 	lds	r24, 0x035D	; 0x80035d <lockout_delay>
    1496:	90 91 5e 03 	lds	r25, 0x035E	; 0x80035e <lockout_delay+0x1>
    149a:	89 2b       	or	r24, r25
    149c:	49 f0       	breq	.+18     	; 0x14b0 <__vector_14+0x8c>
    149e:	80 91 5d 03 	lds	r24, 0x035D	; 0x80035d <lockout_delay>
    14a2:	90 91 5e 03 	lds	r25, 0x035E	; 0x80035e <lockout_delay+0x1>
    14a6:	01 97       	sbiw	r24, 0x01	; 1
    14a8:	90 93 5e 03 	sts	0x035E, r25	; 0x80035e <lockout_delay+0x1>
    14ac:	80 93 5d 03 	sts	0x035D, r24	; 0x80035d <lockout_delay>
	if(joystick_delay > 0)joystick_delay--;
    14b0:	80 91 4f 03 	lds	r24, 0x034F	; 0x80034f <joystick_delay>
    14b4:	88 23       	and	r24, r24
    14b6:	29 f0       	breq	.+10     	; 0x14c2 <__vector_14+0x9e>
    14b8:	80 91 4f 03 	lds	r24, 0x034F	; 0x80034f <joystick_delay>
    14bc:	81 50       	subi	r24, 0x01	; 1
    14be:	80 93 4f 03 	sts	0x034F, r24	; 0x80034f <joystick_delay>
}
    14c2:	ff 91       	pop	r31
    14c4:	ef 91       	pop	r30
    14c6:	bf 91       	pop	r27
    14c8:	af 91       	pop	r26
    14ca:	9f 91       	pop	r25
    14cc:	8f 91       	pop	r24
    14ce:	7f 91       	pop	r23
    14d0:	6f 91       	pop	r22
    14d2:	5f 91       	pop	r21
    14d4:	4f 91       	pop	r20
    14d6:	3f 91       	pop	r19
    14d8:	2f 91       	pop	r18
    14da:	0f 90       	pop	r0
    14dc:	0f be       	out	0x3f, r0	; 63
    14de:	0f 90       	pop	r0
    14e0:	1f 90       	pop	r1
    14e2:	18 95       	reti

000014e4 <__vector_18>:

volatile char line_buffer[40];
volatile uint8_t line_ind = 0;

ISR(USART_RX_vect){
    14e4:	1f 92       	push	r1
    14e6:	0f 92       	push	r0
    14e8:	0f b6       	in	r0, 0x3f	; 63
    14ea:	0f 92       	push	r0
    14ec:	11 24       	eor	r1, r1
    14ee:	2f 93       	push	r18
    14f0:	3f 93       	push	r19
    14f2:	4f 93       	push	r20
    14f4:	5f 93       	push	r21
    14f6:	6f 93       	push	r22
    14f8:	7f 93       	push	r23
    14fa:	8f 93       	push	r24
    14fc:	9f 93       	push	r25
    14fe:	af 93       	push	r26
    1500:	bf 93       	push	r27
    1502:	ef 93       	push	r30
    1504:	ff 93       	push	r31
	uint8_t temp;
	line_buffer[line_ind] = UDR0;
    1506:	e0 91 37 03 	lds	r30, 0x0337	; 0x800337 <line_ind>
    150a:	f0 e0       	ldi	r31, 0x00	; 0
    150c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    1510:	eb 5c       	subi	r30, 0xCB	; 203
    1512:	fa 4f       	sbci	r31, 0xFA	; 250
    1514:	80 83       	st	Z, r24
	if(line_buffer[line_ind] == '\n'){
    1516:	e0 91 37 03 	lds	r30, 0x0337	; 0x800337 <line_ind>
    151a:	f0 e0       	ldi	r31, 0x00	; 0
    151c:	eb 5c       	subi	r30, 0xCB	; 203
    151e:	fa 4f       	sbci	r31, 0xFA	; 250
    1520:	80 81       	ld	r24, Z
    1522:	8a 30       	cpi	r24, 0x0A	; 10
    1524:	09 f0       	breq	.+2      	; 0x1528 <__vector_18+0x44>
    1526:	b2 c0       	rjmp	.+356    	; 0x168c <__vector_18+0x1a8>
		line_buffer[line_ind] = '\0';
    1528:	e0 91 37 03 	lds	r30, 0x0337	; 0x800337 <line_ind>
    152c:	f0 e0       	ldi	r31, 0x00	; 0
    152e:	eb 5c       	subi	r30, 0xCB	; 203
    1530:	fa 4f       	sbci	r31, 0xFA	; 250
    1532:	10 82       	st	Z, r1
		
		if(line_buffer[0] == '3'){
    1534:	80 91 35 05 	lds	r24, 0x0535	; 0x800535 <line_buffer>
    1538:	83 33       	cpi	r24, 0x33	; 51
    153a:	09 f0       	breq	.+2      	; 0x153e <__vector_18+0x5a>
    153c:	86 c0       	rjmp	.+268    	; 0x164a <__vector_18+0x166>
			switch(line_buffer[1]){
    153e:	e0 91 36 05 	lds	r30, 0x0536	; 0x800536 <line_buffer+0x1>
    1542:	8e 2f       	mov	r24, r30
    1544:	90 e0       	ldi	r25, 0x00	; 0
    1546:	fc 01       	movw	r30, r24
    1548:	f0 97       	sbiw	r30, 0x30	; 48
    154a:	e7 30       	cpi	r30, 0x07	; 7
    154c:	f1 05       	cpc	r31, r1
    154e:	08 f0       	brcs	.+2      	; 0x1552 <__vector_18+0x6e>
    1550:	7c c0       	rjmp	.+248    	; 0x164a <__vector_18+0x166>
    1552:	ec 5c       	subi	r30, 0xCC	; 204
    1554:	ff 4f       	sbci	r31, 0xFF	; 255
    1556:	0c 94 31 0c 	jmp	0x1862	; 0x1862 <__tablejump2__>
				case '0':
					temp = (~(PORTD & (1<<PIND6)) & (1<<PIND6));
    155a:	8b b1       	in	r24, 0x0b	; 11
					PORTD &= ~(1<<PIND6);
    155c:	5e 98       	cbi	0x0b, 6	; 11
					PORTD |= temp;
    155e:	9b b1       	in	r25, 0x0b	; 11
    1560:	80 74       	andi	r24, 0x40	; 64
    1562:	80 95       	com	r24
    1564:	80 74       	andi	r24, 0x40	; 64
    1566:	89 2b       	or	r24, r25
    1568:	8b b9       	out	0x0b, r24	; 11
				break;
    156a:	6f c0       	rjmp	.+222    	; 0x164a <__vector_18+0x166>
				case '1':
					messages_queue(line_buffer+2);
    156c:	87 e3       	ldi	r24, 0x37	; 55
    156e:	95 e0       	ldi	r25, 0x05	; 5
    1570:	0e 94 91 0b 	call	0x1722	; 0x1722 <messages_queue>
				break;
    1574:	6a c0       	rjmp	.+212    	; 0x164a <__vector_18+0x166>
				case '2':
					horn_delay = HORN_DELAY_SET;
    1576:	84 e6       	ldi	r24, 0x64	; 100
    1578:	80 93 33 02 	sts	0x0233, r24	; 0x800233 <horn_delay>
					piezosummer_enable();
    157c:	0e 94 ef 0b 	call	0x17de	; 0x17de <piezosummer_enable>
					piezosummer_set_frequency(128);
    1580:	80 e8       	ldi	r24, 0x80	; 128
    1582:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <piezosummer_set_frequency>
				break;
    1586:	61 c0       	rjmp	.+194    	; 0x164a <__vector_18+0x166>
				case '3':
					if(line_buffer[2] >= '0'){
    1588:	80 91 37 05 	lds	r24, 0x0537	; 0x800537 <line_buffer+0x2>
    158c:	80 33       	cpi	r24, 0x30	; 48
    158e:	08 f4       	brcc	.+2      	; 0x1592 <__vector_18+0xae>
    1590:	42 c0       	rjmp	.+132    	; 0x1616 <__vector_18+0x132>
						if(line_buffer[2] < 'A'){
    1592:	80 91 37 05 	lds	r24, 0x0537	; 0x800537 <line_buffer+0x2>
    1596:	81 34       	cpi	r24, 0x41	; 65
    1598:	50 f5       	brcc	.+84     	; 0x15ee <__vector_18+0x10a>
							//Start game/maker move
							menu = Row;
    159a:	85 e0       	ldi	r24, 0x05	; 5
    159c:	80 93 41 03 	sts	0x0341, r24	; 0x800341 <menu>
							new_menu = true;
    15a0:	81 e0       	ldi	r24, 0x01	; 1
    15a2:	80 93 31 02 	sts	0x0231, r24	; 0x800231 <new_menu>
							if(!row_game){
    15a6:	80 91 3f 03 	lds	r24, 0x033F	; 0x80033f <row_game>
    15aa:	81 11       	cpse	r24, r1
    15ac:	02 c0       	rjmp	.+4      	; 0x15b2 <__vector_18+0xce>
								fiveinarow_setup(false);
    15ae:	0e 94 91 01 	call	0x322	; 0x322 <fiveinarow_setup>
							}
							row_game = true;
    15b2:	81 e0       	ldi	r24, 0x01	; 1
    15b4:	80 93 3f 03 	sts	0x033F, r24	; 0x80033f <row_game>
							
							fiveinarow_recive(line_buffer);
    15b8:	85 e3       	ldi	r24, 0x35	; 53
    15ba:	95 e0       	ldi	r25, 0x05	; 5
    15bc:	0e 94 40 02 	call	0x480	; 0x480 <fiveinarow_recive>
							if(fiveinarow_check_win()){
    15c0:	0e 94 08 03 	call	0x610	; 0x610 <fiveinarow_check_win>
    15c4:	88 23       	and	r24, r24
    15c6:	09 f4       	brne	.+2      	; 0x15ca <__vector_18+0xe6>
    15c8:	40 c0       	rjmp	.+128    	; 0x164a <__vector_18+0x166>
								row_game = false;
    15ca:	10 92 3f 03 	sts	0x033F, r1	; 0x80033f <row_game>
								menu = Home;
    15ce:	10 92 41 03 	sts	0x0341, r1	; 0x800341 <menu>
								new_menu = true;
    15d2:	81 e0       	ldi	r24, 0x01	; 1
    15d4:	80 93 31 02 	sts	0x0231, r24	; 0x800231 <new_menu>
								lockout_delay = LOCKOUT_DELAY;
    15d8:	80 e6       	ldi	r24, 0x60	; 96
    15da:	9a ee       	ldi	r25, 0xEA	; 234
    15dc:	90 93 5e 03 	sts	0x035E, r25	; 0x80035e <lockout_delay+0x1>
    15e0:	80 93 5d 03 	sts	0x035D, r24	; 0x80035d <lockout_delay>
								messages_force("   You  lost!");
    15e4:	82 e0       	ldi	r24, 0x02	; 2
    15e6:	93 e0       	ldi	r25, 0x03	; 3
    15e8:	0e 94 80 0b 	call	0x1700	; 0x1700 <messages_force>
    15ec:	2e c0       	rjmp	.+92     	; 0x164a <__vector_18+0x166>
							}
						}else{
							//Cancel game
							row_request = 0;
    15ee:	10 92 3e 03 	sts	0x033E, r1	; 0x80033e <row_request+0x1>
    15f2:	10 92 3d 03 	sts	0x033D, r1	; 0x80033d <row_request>
							row_game = false;
    15f6:	10 92 3f 03 	sts	0x033F, r1	; 0x80033f <row_game>
							menu = Home;
    15fa:	10 92 41 03 	sts	0x0341, r1	; 0x800341 <menu>
							new_menu = true;
    15fe:	81 e0       	ldi	r24, 0x01	; 1
    1600:	80 93 31 02 	sts	0x0231, r24	; 0x800231 <new_menu>
							lockout_delay = 0;
    1604:	10 92 5e 03 	sts	0x035E, r1	; 0x80035e <lockout_delay+0x1>
    1608:	10 92 5d 03 	sts	0x035D, r1	; 0x80035d <lockout_delay>
							messages_force("                ");
    160c:	80 e1       	ldi	r24, 0x10	; 16
    160e:	93 e0       	ldi	r25, 0x03	; 3
    1610:	0e 94 80 0b 	call	0x1700	; 0x1700 <messages_force>
    1614:	1a c0       	rjmp	.+52     	; 0x164a <__vector_18+0x166>
						}
					}else{
						//Receive Request
						messages_force("5In A Row Invite");
    1616:	81 e2       	ldi	r24, 0x21	; 33
    1618:	93 e0       	ldi	r25, 0x03	; 3
    161a:	0e 94 80 0b 	call	0x1700	; 0x1700 <messages_force>
						row_request = ROW_REQUEST_DELAY;
    161e:	88 ee       	ldi	r24, 0xE8	; 232
    1620:	93 e0       	ldi	r25, 0x03	; 3
    1622:	90 93 3e 03 	sts	0x033E, r25	; 0x80033e <row_request+0x1>
    1626:	80 93 3d 03 	sts	0x033D, r24	; 0x80033d <row_request>
    162a:	0f c0       	rjmp	.+30     	; 0x164a <__vector_18+0x166>
					}
				break;
				case '4':
					if(line_buffer[2] == '0'){
    162c:	80 91 37 05 	lds	r24, 0x0537	; 0x800537 <line_buffer+0x2>
    1630:	80 33       	cpi	r24, 0x30	; 48
    1632:	31 f4       	brne	.+12     	; 0x1640 <__vector_18+0x15c>
						PORTD &= ~(1<<PIND7);
    1634:	5f 98       	cbi	0x0b, 7	; 11
						lockout_delay = 0;
    1636:	10 92 5e 03 	sts	0x035E, r1	; 0x80035e <lockout_delay+0x1>
    163a:	10 92 5d 03 	sts	0x035D, r1	; 0x80035d <lockout_delay>
    163e:	05 c0       	rjmp	.+10     	; 0x164a <__vector_18+0x166>
					}else{
						PORTD |= (1<<PIND7);
    1640:	5f 9a       	sbi	0x0b, 7	; 11
    1642:	03 c0       	rjmp	.+6      	; 0x164a <__vector_18+0x166>
					}
				break;
				case '5':
					PORTD |= (1<<PIND5);
    1644:	5d 9a       	sbi	0x0b, 5	; 11
				break;
    1646:	01 c0       	rjmp	.+2      	; 0x164a <__vector_18+0x166>
				case '6':
					PORTD &= ~(1<<PIND5);
    1648:	5d 98       	cbi	0x0b, 5	; 11
				break;
			}
			
		}
		
		if(line_buffer[0] == '1' && line_buffer[1] == '1'){
    164a:	80 91 35 05 	lds	r24, 0x0535	; 0x800535 <line_buffer>
    164e:	81 33       	cpi	r24, 0x31	; 49
    1650:	d1 f4       	brne	.+52     	; 0x1686 <__vector_18+0x1a2>
    1652:	80 91 36 05 	lds	r24, 0x0536	; 0x800536 <line_buffer+0x1>
    1656:	81 33       	cpi	r24, 0x31	; 49
    1658:	b1 f4       	brne	.+44     	; 0x1686 <__vector_18+0x1a2>
			if(line_buffer[4] == '0'){
    165a:	80 91 39 05 	lds	r24, 0x0539	; 0x800539 <line_buffer+0x4>
    165e:	80 33       	cpi	r24, 0x30	; 48
    1660:	81 f4       	brne	.+32     	; 0x1682 <__vector_18+0x19e>
				if(!car_button){
    1662:	80 91 40 03 	lds	r24, 0x0340	; 0x800340 <car_button>
    1666:	81 11       	cpse	r24, r1
    1668:	08 c0       	rjmp	.+16     	; 0x167a <__vector_18+0x196>
					horn_delay = HORN_DELAY_SET;
    166a:	84 e6       	ldi	r24, 0x64	; 100
    166c:	80 93 33 02 	sts	0x0233, r24	; 0x800233 <horn_delay>
					piezosummer_enable();
    1670:	0e 94 ef 0b 	call	0x17de	; 0x17de <piezosummer_enable>
					piezosummer_set_frequency(192);
    1674:	80 ec       	ldi	r24, 0xC0	; 192
    1676:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <piezosummer_set_frequency>
				}
				car_button = true;
    167a:	81 e0       	ldi	r24, 0x01	; 1
    167c:	80 93 40 03 	sts	0x0340, r24	; 0x800340 <car_button>
    1680:	02 c0       	rjmp	.+4      	; 0x1686 <__vector_18+0x1a2>
			}else{
				car_button = false;
    1682:	10 92 40 03 	sts	0x0340, r1	; 0x800340 <car_button>
			}
		}
		line_ind = 0;
    1686:	10 92 37 03 	sts	0x0337, r1	; 0x800337 <line_ind>
    168a:	05 c0       	rjmp	.+10     	; 0x1696 <__vector_18+0x1b2>
	}else{
		line_ind++;
    168c:	80 91 37 03 	lds	r24, 0x0337	; 0x800337 <line_ind>
    1690:	8f 5f       	subi	r24, 0xFF	; 255
    1692:	80 93 37 03 	sts	0x0337, r24	; 0x800337 <line_ind>
	}
    1696:	ff 91       	pop	r31
    1698:	ef 91       	pop	r30
    169a:	bf 91       	pop	r27
    169c:	af 91       	pop	r26
    169e:	9f 91       	pop	r25
    16a0:	8f 91       	pop	r24
    16a2:	7f 91       	pop	r23
    16a4:	6f 91       	pop	r22
    16a6:	5f 91       	pop	r21
    16a8:	4f 91       	pop	r20
    16aa:	3f 91       	pop	r19
    16ac:	2f 91       	pop	r18
    16ae:	0f 90       	pop	r0
    16b0:	0f be       	out	0x3f, r0	; 63
    16b2:	0f 90       	pop	r0
    16b4:	1f 90       	pop	r1
    16b6:	18 95       	reti

000016b8 <messages_timerproc>:
/*bool for tracking if any message is active*/
static volatile bool message_displaying = false;

/*Keeps time running and clears buffer on deactivation of a message*/
void messages_timerproc(){
	if(message_displaying && ++message_parts > 100){
    16b8:	80 91 5f 03 	lds	r24, 0x035F	; 0x80035f <message_displaying>
    16bc:	88 23       	and	r24, r24
    16be:	f9 f0       	breq	.+62     	; 0x16fe <messages_timerproc+0x46>
    16c0:	80 91 ec 03 	lds	r24, 0x03EC	; 0x8003ec <message_parts>
    16c4:	90 91 ed 03 	lds	r25, 0x03ED	; 0x8003ed <message_parts+0x1>
    16c8:	01 96       	adiw	r24, 0x01	; 1
    16ca:	90 93 ed 03 	sts	0x03ED, r25	; 0x8003ed <message_parts+0x1>
    16ce:	80 93 ec 03 	sts	0x03EC, r24	; 0x8003ec <message_parts>
    16d2:	85 36       	cpi	r24, 0x65	; 101
    16d4:	91 05       	cpc	r25, r1
    16d6:	98 f0       	brcs	.+38     	; 0x16fe <messages_timerproc+0x46>
		if(++message_seconds > DISP_TIME){
    16d8:	80 91 eb 03 	lds	r24, 0x03EB	; 0x8003eb <message_seconds>
    16dc:	8f 5f       	subi	r24, 0xFF	; 255
    16de:	80 93 eb 03 	sts	0x03EB, r24	; 0x8003eb <message_seconds>
    16e2:	86 30       	cpi	r24, 0x06	; 6
    16e4:	40 f0       	brcs	.+16     	; 0x16f6 <messages_timerproc+0x3e>
			message_seconds = 0;
    16e6:	10 92 eb 03 	sts	0x03EB, r1	; 0x8003eb <message_seconds>
			message_displaying = false;
    16ea:	10 92 5f 03 	sts	0x035F, r1	; 0x80035f <message_displaying>
			strcpy((char*)output_buf, "");
    16ee:	10 92 5d 05 	sts	0x055D, r1	; 0x80055d <output_buf>
			output_buf_read = false;
    16f2:	10 92 35 02 	sts	0x0235, r1	; 0x800235 <output_buf_read>
		}
		message_parts = 0;
    16f6:	10 92 ed 03 	sts	0x03ED, r1	; 0x8003ed <message_parts+0x1>
    16fa:	10 92 ec 03 	sts	0x03EC, r1	; 0x8003ec <message_parts>
    16fe:	08 95       	ret

00001700 <messages_force>:
	}
}

/*Forces a message to be copied into buffer and marks buffer as changed*/
void messages_force(char* msg){
	message_displaying = true;
    1700:	21 e0       	ldi	r18, 0x01	; 1
    1702:	20 93 5f 03 	sts	0x035F, r18	; 0x80035f <message_displaying>
	/*Reset time counter to display for full time*/
	message_parts = 0;
    1706:	10 92 ed 03 	sts	0x03ED, r1	; 0x8003ed <message_parts+0x1>
    170a:	10 92 ec 03 	sts	0x03EC, r1	; 0x8003ec <message_parts>
	message_seconds = 0;
    170e:	10 92 eb 03 	sts	0x03EB, r1	; 0x8003eb <message_seconds>
	strcpy((char*)output_buf, msg);
    1712:	bc 01       	movw	r22, r24
    1714:	8d e5       	ldi	r24, 0x5D	; 93
    1716:	95 e0       	ldi	r25, 0x05	; 5
    1718:	0e 94 4b 0c 	call	0x1896	; 0x1896 <strcpy>
	output_buf_read = false;
    171c:	10 92 35 02 	sts	0x0235, r1	; 0x800235 <output_buf_read>
    1720:	08 95       	ret

00001722 <messages_queue>:
}

/*Queues a message. Forces front most message out of queue if queue is full*/
void messages_queue(char* msg){
    1722:	cf 93       	push	r28
    1724:	df 93       	push	r29
    1726:	ec 01       	movw	r28, r24
	if(message_count == MSGBUF_SIZE){
    1728:	80 91 60 03 	lds	r24, 0x0360	; 0x800360 <message_count>
    172c:	88 30       	cpi	r24, 0x08	; 8
    172e:	81 f4       	brne	.+32     	; 0x1750 <messages_queue+0x2e>
		messages_force((char*)(message_buf)[MOD_BUFSIZE(message_extract_ind++)]);
    1730:	80 91 61 03 	lds	r24, 0x0361	; 0x800361 <message_extract_ind>
    1734:	91 e0       	ldi	r25, 0x01	; 1
    1736:	98 0f       	add	r25, r24
    1738:	90 93 61 03 	sts	0x0361, r25	; 0x800361 <message_extract_ind>
    173c:	87 70       	andi	r24, 0x07	; 7
    173e:	21 e1       	ldi	r18, 0x11	; 17
    1740:	82 9f       	mul	r24, r18
    1742:	c0 01       	movw	r24, r0
    1744:	11 24       	eor	r1, r1
    1746:	8d 59       	subi	r24, 0x9D	; 157
    1748:	9c 4f       	sbci	r25, 0xFC	; 252
    174a:	0e 94 80 0b 	call	0x1700	; 0x1700 <messages_force>
    174e:	0a c0       	rjmp	.+20     	; 0x1764 <messages_queue+0x42>
	} else if(++message_count > MSGBUF_SIZE) message_count = MSGBUF_SIZE;
    1750:	80 91 60 03 	lds	r24, 0x0360	; 0x800360 <message_count>
    1754:	8f 5f       	subi	r24, 0xFF	; 255
    1756:	80 93 60 03 	sts	0x0360, r24	; 0x800360 <message_count>
    175a:	89 30       	cpi	r24, 0x09	; 9
    175c:	18 f0       	brcs	.+6      	; 0x1764 <messages_queue+0x42>
    175e:	88 e0       	ldi	r24, 0x08	; 8
    1760:	80 93 60 03 	sts	0x0360, r24	; 0x800360 <message_count>
	strcpy((char*)(message_buf)[MOD_BUFSIZE(message_insert_ind++)], msg);
    1764:	80 91 62 03 	lds	r24, 0x0362	; 0x800362 <message_insert_ind>
    1768:	91 e0       	ldi	r25, 0x01	; 1
    176a:	98 0f       	add	r25, r24
    176c:	90 93 62 03 	sts	0x0362, r25	; 0x800362 <message_insert_ind>
    1770:	87 70       	andi	r24, 0x07	; 7
    1772:	21 e1       	ldi	r18, 0x11	; 17
    1774:	82 9f       	mul	r24, r18
    1776:	c0 01       	movw	r24, r0
    1778:	11 24       	eor	r1, r1
    177a:	be 01       	movw	r22, r28
    177c:	8d 59       	subi	r24, 0x9D	; 157
    177e:	9c 4f       	sbci	r25, 0xFC	; 252
    1780:	0e 94 4b 0c 	call	0x1896	; 0x1896 <strcpy>
}
    1784:	df 91       	pop	r29
    1786:	cf 91       	pop	r28
    1788:	08 95       	ret

0000178a <messages_move_queue>:

/*Moves queue along if no message is active*/
void messages_move_queue(){
	if(message_count > 0 && !message_displaying){
    178a:	80 91 60 03 	lds	r24, 0x0360	; 0x800360 <message_count>
    178e:	88 23       	and	r24, r24
    1790:	f9 f0       	breq	.+62     	; 0x17d0 <messages_move_queue+0x46>
    1792:	80 91 5f 03 	lds	r24, 0x035F	; 0x80035f <message_displaying>
    1796:	81 11       	cpse	r24, r1
    1798:	1b c0       	rjmp	.+54     	; 0x17d0 <messages_move_queue+0x46>
		/*Copy next message to output buffer and increment/decremnt index and counter*/
		strcpy((char*)output_buf, (char*)(message_buf)[MOD_BUFSIZE(message_extract_ind++)]);
    179a:	60 91 61 03 	lds	r22, 0x0361	; 0x800361 <message_extract_ind>
    179e:	81 e0       	ldi	r24, 0x01	; 1
    17a0:	86 0f       	add	r24, r22
    17a2:	80 93 61 03 	sts	0x0361, r24	; 0x800361 <message_extract_ind>
    17a6:	67 70       	andi	r22, 0x07	; 7
    17a8:	81 e1       	ldi	r24, 0x11	; 17
    17aa:	68 9f       	mul	r22, r24
    17ac:	b0 01       	movw	r22, r0
    17ae:	11 24       	eor	r1, r1
    17b0:	6d 59       	subi	r22, 0x9D	; 157
    17b2:	7c 4f       	sbci	r23, 0xFC	; 252
    17b4:	8d e5       	ldi	r24, 0x5D	; 93
    17b6:	95 e0       	ldi	r25, 0x05	; 5
    17b8:	0e 94 4b 0c 	call	0x1896	; 0x1896 <strcpy>
		output_buf_read = false;
    17bc:	10 92 35 02 	sts	0x0235, r1	; 0x800235 <output_buf_read>
		message_displaying = true;
    17c0:	81 e0       	ldi	r24, 0x01	; 1
    17c2:	80 93 5f 03 	sts	0x035F, r24	; 0x80035f <message_displaying>
		message_count--;
    17c6:	80 91 60 03 	lds	r24, 0x0360	; 0x800360 <message_count>
    17ca:	81 50       	subi	r24, 0x01	; 1
    17cc:	80 93 60 03 	sts	0x0360, r24	; 0x800360 <message_count>
    17d0:	08 95       	ret

000017d2 <messages_get_buffer>:
	}
}

/*Mark buffer as read and return pointer to buffer*/
volatile char* messages_get_buffer(){
	output_buf_read = true;
    17d2:	81 e0       	ldi	r24, 0x01	; 1
    17d4:	80 93 35 02 	sts	0x0235, r24	; 0x800235 <output_buf_read>
	return output_buf;
    17d8:	8d e5       	ldi	r24, 0x5D	; 93
    17da:	95 e0       	ldi	r25, 0x05	; 5
    17dc:	08 95       	ret

000017de <piezosummer_enable>:
	TCCR2B = (1<<CS21) | (1<<CS20);
	piezosummer_disable();
}

void piezosummer_enable(){
	DDRD |= 0b00001000;
    17de:	53 9a       	sbi	0x0a, 3	; 10
    17e0:	08 95       	ret

000017e2 <piezosummer_disable>:
}


void piezosummer_disable(){
	DDRD &= 0b11110111;
    17e2:	53 98       	cbi	0x0a, 3	; 10
    17e4:	08 95       	ret

000017e6 <piezosummer_setup>:
#include "piezosummer.h"

void piezosummer_setup(){
	TCCR2A = (1<<COM2B0) | (1<<WGM21);
    17e6:	82 e1       	ldi	r24, 0x12	; 18
    17e8:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
	TCCR2B = (1<<CS21) | (1<<CS20);
    17ec:	83 e0       	ldi	r24, 0x03	; 3
    17ee:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
	piezosummer_disable();
    17f2:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <piezosummer_disable>
    17f6:	08 95       	ret

000017f8 <piezosummer_set_frequency>:
void piezosummer_disable(){
	DDRD &= 0b11110111;
}

void piezosummer_set_frequency(uint8_t frequency){
	OCR2A = frequency;	
    17f8:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    17fc:	08 95       	ret

000017fe <uart_send_byte>:

bool uart_receive_byte(uint8_t* buffer){
	if(!( UCSR0A & (1<<RXC0))) return false;
	*buffer = UDR0;
	return true;
}
    17fe:	e0 ec       	ldi	r30, 0xC0	; 192
    1800:	f0 e0       	ldi	r31, 0x00	; 0
    1802:	90 81       	ld	r25, Z
    1804:	95 ff       	sbrs	r25, 5
    1806:	fd cf       	rjmp	.-6      	; 0x1802 <uart_send_byte+0x4>
    1808:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    180c:	80 e0       	ldi	r24, 0x00	; 0
    180e:	90 e0       	ldi	r25, 0x00	; 0
    1810:	08 95       	ret

00001812 <uart_set_stdout>:
    1812:	86 e3       	ldi	r24, 0x36	; 54
    1814:	92 e0       	ldi	r25, 0x02	; 2
    1816:	90 93 71 05 	sts	0x0571, r25	; 0x800571 <__iob+0x3>
    181a:	80 93 70 05 	sts	0x0570, r24	; 0x800570 <__iob+0x2>
    181e:	08 95       	ret

00001820 <uart_init>:

void uart_init(){
	UBRR0 = 12;		//0==500000 baud rate.  12==38400 baud rate
    1820:	8c e0       	ldi	r24, 0x0C	; 12
    1822:	90 e0       	ldi	r25, 0x00	; 0
    1824:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
    1828:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UCSR0B = (1<<RXEN0)|(1<<TXEN0)|(1<<RXCIE0);
    182c:	88 e9       	ldi	r24, 0x98	; 152
    182e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	/* Set frame format: 8data, 1stop bit */
	UCSR0C = (0<<USBS0)|(3<<UCSZ00);
    1832:	86 e0       	ldi	r24, 0x06	; 6
    1834:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
    1838:	08 95       	ret

0000183a <__divmodhi4>:
    183a:	97 fb       	bst	r25, 7
    183c:	07 2e       	mov	r0, r23
    183e:	16 f4       	brtc	.+4      	; 0x1844 <__divmodhi4+0xa>
    1840:	00 94       	com	r0
    1842:	07 d0       	rcall	.+14     	; 0x1852 <__divmodhi4_neg1>
    1844:	77 fd       	sbrc	r23, 7
    1846:	09 d0       	rcall	.+18     	; 0x185a <__divmodhi4_neg2>
    1848:	0e 94 37 0c 	call	0x186e	; 0x186e <__udivmodhi4>
    184c:	07 fc       	sbrc	r0, 7
    184e:	05 d0       	rcall	.+10     	; 0x185a <__divmodhi4_neg2>
    1850:	3e f4       	brtc	.+14     	; 0x1860 <__divmodhi4_exit>

00001852 <__divmodhi4_neg1>:
    1852:	90 95       	com	r25
    1854:	81 95       	neg	r24
    1856:	9f 4f       	sbci	r25, 0xFF	; 255
    1858:	08 95       	ret

0000185a <__divmodhi4_neg2>:
    185a:	70 95       	com	r23
    185c:	61 95       	neg	r22
    185e:	7f 4f       	sbci	r23, 0xFF	; 255

00001860 <__divmodhi4_exit>:
    1860:	08 95       	ret

00001862 <__tablejump2__>:
    1862:	ee 0f       	add	r30, r30
    1864:	ff 1f       	adc	r31, r31
    1866:	05 90       	lpm	r0, Z+
    1868:	f4 91       	lpm	r31, Z
    186a:	e0 2d       	mov	r30, r0
    186c:	09 94       	ijmp

0000186e <__udivmodhi4>:
    186e:	aa 1b       	sub	r26, r26
    1870:	bb 1b       	sub	r27, r27
    1872:	51 e1       	ldi	r21, 0x11	; 17
    1874:	07 c0       	rjmp	.+14     	; 0x1884 <__udivmodhi4_ep>

00001876 <__udivmodhi4_loop>:
    1876:	aa 1f       	adc	r26, r26
    1878:	bb 1f       	adc	r27, r27
    187a:	a6 17       	cp	r26, r22
    187c:	b7 07       	cpc	r27, r23
    187e:	10 f0       	brcs	.+4      	; 0x1884 <__udivmodhi4_ep>
    1880:	a6 1b       	sub	r26, r22
    1882:	b7 0b       	sbc	r27, r23

00001884 <__udivmodhi4_ep>:
    1884:	88 1f       	adc	r24, r24
    1886:	99 1f       	adc	r25, r25
    1888:	5a 95       	dec	r21
    188a:	a9 f7       	brne	.-22     	; 0x1876 <__udivmodhi4_loop>
    188c:	80 95       	com	r24
    188e:	90 95       	com	r25
    1890:	bc 01       	movw	r22, r24
    1892:	cd 01       	movw	r24, r26
    1894:	08 95       	ret

00001896 <strcpy>:
    1896:	fb 01       	movw	r30, r22
    1898:	dc 01       	movw	r26, r24
    189a:	01 90       	ld	r0, Z+
    189c:	0d 92       	st	X+, r0
    189e:	00 20       	and	r0, r0
    18a0:	e1 f7       	brne	.-8      	; 0x189a <strcpy+0x4>
    18a2:	08 95       	ret

000018a4 <printf>:
    18a4:	a0 e0       	ldi	r26, 0x00	; 0
    18a6:	b0 e0       	ldi	r27, 0x00	; 0
    18a8:	e8 e5       	ldi	r30, 0x58	; 88
    18aa:	fc e0       	ldi	r31, 0x0C	; 12
    18ac:	0c 94 39 0f 	jmp	0x1e72	; 0x1e72 <__prologue_saves__+0x20>
    18b0:	ae 01       	movw	r20, r28
    18b2:	4b 5f       	subi	r20, 0xFB	; 251
    18b4:	5f 4f       	sbci	r21, 0xFF	; 255
    18b6:	fa 01       	movw	r30, r20
    18b8:	61 91       	ld	r22, Z+
    18ba:	71 91       	ld	r23, Z+
    18bc:	af 01       	movw	r20, r30
    18be:	80 91 70 05 	lds	r24, 0x0570	; 0x800570 <__iob+0x2>
    18c2:	90 91 71 05 	lds	r25, 0x0571	; 0x800571 <__iob+0x3>
    18c6:	0e 94 98 0c 	call	0x1930	; 0x1930 <vfprintf>
    18ca:	e2 e0       	ldi	r30, 0x02	; 2
    18cc:	0c 94 55 0f 	jmp	0x1eaa	; 0x1eaa <__epilogue_restores__+0x20>

000018d0 <puts>:
    18d0:	0f 93       	push	r16
    18d2:	1f 93       	push	r17
    18d4:	cf 93       	push	r28
    18d6:	df 93       	push	r29
    18d8:	e0 91 70 05 	lds	r30, 0x0570	; 0x800570 <__iob+0x2>
    18dc:	f0 91 71 05 	lds	r31, 0x0571	; 0x800571 <__iob+0x3>
    18e0:	23 81       	ldd	r18, Z+3	; 0x03
    18e2:	21 ff       	sbrs	r18, 1
    18e4:	1b c0       	rjmp	.+54     	; 0x191c <puts+0x4c>
    18e6:	8c 01       	movw	r16, r24
    18e8:	d0 e0       	ldi	r29, 0x00	; 0
    18ea:	c0 e0       	ldi	r28, 0x00	; 0
    18ec:	f8 01       	movw	r30, r16
    18ee:	81 91       	ld	r24, Z+
    18f0:	8f 01       	movw	r16, r30
    18f2:	60 91 70 05 	lds	r22, 0x0570	; 0x800570 <__iob+0x2>
    18f6:	70 91 71 05 	lds	r23, 0x0571	; 0x800571 <__iob+0x3>
    18fa:	db 01       	movw	r26, r22
    18fc:	18 96       	adiw	r26, 0x08	; 8
    18fe:	ed 91       	ld	r30, X+
    1900:	fc 91       	ld	r31, X
    1902:	19 97       	sbiw	r26, 0x09	; 9
    1904:	88 23       	and	r24, r24
    1906:	31 f0       	breq	.+12     	; 0x1914 <puts+0x44>
    1908:	09 95       	icall
    190a:	89 2b       	or	r24, r25
    190c:	79 f3       	breq	.-34     	; 0x18ec <puts+0x1c>
    190e:	df ef       	ldi	r29, 0xFF	; 255
    1910:	cf ef       	ldi	r28, 0xFF	; 255
    1912:	ec cf       	rjmp	.-40     	; 0x18ec <puts+0x1c>
    1914:	8a e0       	ldi	r24, 0x0A	; 10
    1916:	09 95       	icall
    1918:	89 2b       	or	r24, r25
    191a:	19 f0       	breq	.+6      	; 0x1922 <puts+0x52>
    191c:	8f ef       	ldi	r24, 0xFF	; 255
    191e:	9f ef       	ldi	r25, 0xFF	; 255
    1920:	02 c0       	rjmp	.+4      	; 0x1926 <puts+0x56>
    1922:	8d 2f       	mov	r24, r29
    1924:	9c 2f       	mov	r25, r28
    1926:	df 91       	pop	r29
    1928:	cf 91       	pop	r28
    192a:	1f 91       	pop	r17
    192c:	0f 91       	pop	r16
    192e:	08 95       	ret

00001930 <vfprintf>:
    1930:	ab e0       	ldi	r26, 0x0B	; 11
    1932:	b0 e0       	ldi	r27, 0x00	; 0
    1934:	ee e9       	ldi	r30, 0x9E	; 158
    1936:	fc e0       	ldi	r31, 0x0C	; 12
    1938:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__prologue_saves__>
    193c:	6c 01       	movw	r12, r24
    193e:	7b 01       	movw	r14, r22
    1940:	8a 01       	movw	r16, r20
    1942:	fc 01       	movw	r30, r24
    1944:	17 82       	std	Z+7, r1	; 0x07
    1946:	16 82       	std	Z+6, r1	; 0x06
    1948:	83 81       	ldd	r24, Z+3	; 0x03
    194a:	81 ff       	sbrs	r24, 1
    194c:	cc c1       	rjmp	.+920    	; 0x1ce6 <vfprintf+0x3b6>
    194e:	ce 01       	movw	r24, r28
    1950:	01 96       	adiw	r24, 0x01	; 1
    1952:	3c 01       	movw	r6, r24
    1954:	f6 01       	movw	r30, r12
    1956:	93 81       	ldd	r25, Z+3	; 0x03
    1958:	f7 01       	movw	r30, r14
    195a:	93 fd       	sbrc	r25, 3
    195c:	85 91       	lpm	r24, Z+
    195e:	93 ff       	sbrs	r25, 3
    1960:	81 91       	ld	r24, Z+
    1962:	7f 01       	movw	r14, r30
    1964:	88 23       	and	r24, r24
    1966:	09 f4       	brne	.+2      	; 0x196a <vfprintf+0x3a>
    1968:	ba c1       	rjmp	.+884    	; 0x1cde <vfprintf+0x3ae>
    196a:	85 32       	cpi	r24, 0x25	; 37
    196c:	39 f4       	brne	.+14     	; 0x197c <vfprintf+0x4c>
    196e:	93 fd       	sbrc	r25, 3
    1970:	85 91       	lpm	r24, Z+
    1972:	93 ff       	sbrs	r25, 3
    1974:	81 91       	ld	r24, Z+
    1976:	7f 01       	movw	r14, r30
    1978:	85 32       	cpi	r24, 0x25	; 37
    197a:	29 f4       	brne	.+10     	; 0x1986 <vfprintf+0x56>
    197c:	b6 01       	movw	r22, r12
    197e:	90 e0       	ldi	r25, 0x00	; 0
    1980:	0e 94 8f 0e 	call	0x1d1e	; 0x1d1e <fputc>
    1984:	e7 cf       	rjmp	.-50     	; 0x1954 <vfprintf+0x24>
    1986:	91 2c       	mov	r9, r1
    1988:	21 2c       	mov	r2, r1
    198a:	31 2c       	mov	r3, r1
    198c:	ff e1       	ldi	r31, 0x1F	; 31
    198e:	f3 15       	cp	r31, r3
    1990:	d8 f0       	brcs	.+54     	; 0x19c8 <vfprintf+0x98>
    1992:	8b 32       	cpi	r24, 0x2B	; 43
    1994:	79 f0       	breq	.+30     	; 0x19b4 <vfprintf+0x84>
    1996:	38 f4       	brcc	.+14     	; 0x19a6 <vfprintf+0x76>
    1998:	80 32       	cpi	r24, 0x20	; 32
    199a:	79 f0       	breq	.+30     	; 0x19ba <vfprintf+0x8a>
    199c:	83 32       	cpi	r24, 0x23	; 35
    199e:	a1 f4       	brne	.+40     	; 0x19c8 <vfprintf+0x98>
    19a0:	23 2d       	mov	r18, r3
    19a2:	20 61       	ori	r18, 0x10	; 16
    19a4:	1d c0       	rjmp	.+58     	; 0x19e0 <vfprintf+0xb0>
    19a6:	8d 32       	cpi	r24, 0x2D	; 45
    19a8:	61 f0       	breq	.+24     	; 0x19c2 <vfprintf+0x92>
    19aa:	80 33       	cpi	r24, 0x30	; 48
    19ac:	69 f4       	brne	.+26     	; 0x19c8 <vfprintf+0x98>
    19ae:	23 2d       	mov	r18, r3
    19b0:	21 60       	ori	r18, 0x01	; 1
    19b2:	16 c0       	rjmp	.+44     	; 0x19e0 <vfprintf+0xb0>
    19b4:	83 2d       	mov	r24, r3
    19b6:	82 60       	ori	r24, 0x02	; 2
    19b8:	38 2e       	mov	r3, r24
    19ba:	e3 2d       	mov	r30, r3
    19bc:	e4 60       	ori	r30, 0x04	; 4
    19be:	3e 2e       	mov	r3, r30
    19c0:	2a c0       	rjmp	.+84     	; 0x1a16 <vfprintf+0xe6>
    19c2:	f3 2d       	mov	r31, r3
    19c4:	f8 60       	ori	r31, 0x08	; 8
    19c6:	1d c0       	rjmp	.+58     	; 0x1a02 <vfprintf+0xd2>
    19c8:	37 fc       	sbrc	r3, 7
    19ca:	2d c0       	rjmp	.+90     	; 0x1a26 <vfprintf+0xf6>
    19cc:	20 ed       	ldi	r18, 0xD0	; 208
    19ce:	28 0f       	add	r18, r24
    19d0:	2a 30       	cpi	r18, 0x0A	; 10
    19d2:	40 f0       	brcs	.+16     	; 0x19e4 <vfprintf+0xb4>
    19d4:	8e 32       	cpi	r24, 0x2E	; 46
    19d6:	b9 f4       	brne	.+46     	; 0x1a06 <vfprintf+0xd6>
    19d8:	36 fc       	sbrc	r3, 6
    19da:	81 c1       	rjmp	.+770    	; 0x1cde <vfprintf+0x3ae>
    19dc:	23 2d       	mov	r18, r3
    19de:	20 64       	ori	r18, 0x40	; 64
    19e0:	32 2e       	mov	r3, r18
    19e2:	19 c0       	rjmp	.+50     	; 0x1a16 <vfprintf+0xe6>
    19e4:	36 fe       	sbrs	r3, 6
    19e6:	06 c0       	rjmp	.+12     	; 0x19f4 <vfprintf+0xc4>
    19e8:	8a e0       	ldi	r24, 0x0A	; 10
    19ea:	98 9e       	mul	r9, r24
    19ec:	20 0d       	add	r18, r0
    19ee:	11 24       	eor	r1, r1
    19f0:	92 2e       	mov	r9, r18
    19f2:	11 c0       	rjmp	.+34     	; 0x1a16 <vfprintf+0xe6>
    19f4:	ea e0       	ldi	r30, 0x0A	; 10
    19f6:	2e 9e       	mul	r2, r30
    19f8:	20 0d       	add	r18, r0
    19fa:	11 24       	eor	r1, r1
    19fc:	22 2e       	mov	r2, r18
    19fe:	f3 2d       	mov	r31, r3
    1a00:	f0 62       	ori	r31, 0x20	; 32
    1a02:	3f 2e       	mov	r3, r31
    1a04:	08 c0       	rjmp	.+16     	; 0x1a16 <vfprintf+0xe6>
    1a06:	8c 36       	cpi	r24, 0x6C	; 108
    1a08:	21 f4       	brne	.+8      	; 0x1a12 <vfprintf+0xe2>
    1a0a:	83 2d       	mov	r24, r3
    1a0c:	80 68       	ori	r24, 0x80	; 128
    1a0e:	38 2e       	mov	r3, r24
    1a10:	02 c0       	rjmp	.+4      	; 0x1a16 <vfprintf+0xe6>
    1a12:	88 36       	cpi	r24, 0x68	; 104
    1a14:	41 f4       	brne	.+16     	; 0x1a26 <vfprintf+0xf6>
    1a16:	f7 01       	movw	r30, r14
    1a18:	93 fd       	sbrc	r25, 3
    1a1a:	85 91       	lpm	r24, Z+
    1a1c:	93 ff       	sbrs	r25, 3
    1a1e:	81 91       	ld	r24, Z+
    1a20:	7f 01       	movw	r14, r30
    1a22:	81 11       	cpse	r24, r1
    1a24:	b3 cf       	rjmp	.-154    	; 0x198c <vfprintf+0x5c>
    1a26:	98 2f       	mov	r25, r24
    1a28:	9f 7d       	andi	r25, 0xDF	; 223
    1a2a:	95 54       	subi	r25, 0x45	; 69
    1a2c:	93 30       	cpi	r25, 0x03	; 3
    1a2e:	28 f4       	brcc	.+10     	; 0x1a3a <vfprintf+0x10a>
    1a30:	0c 5f       	subi	r16, 0xFC	; 252
    1a32:	1f 4f       	sbci	r17, 0xFF	; 255
    1a34:	9f e3       	ldi	r25, 0x3F	; 63
    1a36:	99 83       	std	Y+1, r25	; 0x01
    1a38:	0d c0       	rjmp	.+26     	; 0x1a54 <vfprintf+0x124>
    1a3a:	83 36       	cpi	r24, 0x63	; 99
    1a3c:	31 f0       	breq	.+12     	; 0x1a4a <vfprintf+0x11a>
    1a3e:	83 37       	cpi	r24, 0x73	; 115
    1a40:	71 f0       	breq	.+28     	; 0x1a5e <vfprintf+0x12e>
    1a42:	83 35       	cpi	r24, 0x53	; 83
    1a44:	09 f0       	breq	.+2      	; 0x1a48 <vfprintf+0x118>
    1a46:	59 c0       	rjmp	.+178    	; 0x1afa <vfprintf+0x1ca>
    1a48:	21 c0       	rjmp	.+66     	; 0x1a8c <vfprintf+0x15c>
    1a4a:	f8 01       	movw	r30, r16
    1a4c:	80 81       	ld	r24, Z
    1a4e:	89 83       	std	Y+1, r24	; 0x01
    1a50:	0e 5f       	subi	r16, 0xFE	; 254
    1a52:	1f 4f       	sbci	r17, 0xFF	; 255
    1a54:	88 24       	eor	r8, r8
    1a56:	83 94       	inc	r8
    1a58:	91 2c       	mov	r9, r1
    1a5a:	53 01       	movw	r10, r6
    1a5c:	13 c0       	rjmp	.+38     	; 0x1a84 <vfprintf+0x154>
    1a5e:	28 01       	movw	r4, r16
    1a60:	f2 e0       	ldi	r31, 0x02	; 2
    1a62:	4f 0e       	add	r4, r31
    1a64:	51 1c       	adc	r5, r1
    1a66:	f8 01       	movw	r30, r16
    1a68:	a0 80       	ld	r10, Z
    1a6a:	b1 80       	ldd	r11, Z+1	; 0x01
    1a6c:	36 fe       	sbrs	r3, 6
    1a6e:	03 c0       	rjmp	.+6      	; 0x1a76 <vfprintf+0x146>
    1a70:	69 2d       	mov	r22, r9
    1a72:	70 e0       	ldi	r23, 0x00	; 0
    1a74:	02 c0       	rjmp	.+4      	; 0x1a7a <vfprintf+0x14a>
    1a76:	6f ef       	ldi	r22, 0xFF	; 255
    1a78:	7f ef       	ldi	r23, 0xFF	; 255
    1a7a:	c5 01       	movw	r24, r10
    1a7c:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <strnlen>
    1a80:	4c 01       	movw	r8, r24
    1a82:	82 01       	movw	r16, r4
    1a84:	f3 2d       	mov	r31, r3
    1a86:	ff 77       	andi	r31, 0x7F	; 127
    1a88:	3f 2e       	mov	r3, r31
    1a8a:	16 c0       	rjmp	.+44     	; 0x1ab8 <vfprintf+0x188>
    1a8c:	28 01       	movw	r4, r16
    1a8e:	22 e0       	ldi	r18, 0x02	; 2
    1a90:	42 0e       	add	r4, r18
    1a92:	51 1c       	adc	r5, r1
    1a94:	f8 01       	movw	r30, r16
    1a96:	a0 80       	ld	r10, Z
    1a98:	b1 80       	ldd	r11, Z+1	; 0x01
    1a9a:	36 fe       	sbrs	r3, 6
    1a9c:	03 c0       	rjmp	.+6      	; 0x1aa4 <vfprintf+0x174>
    1a9e:	69 2d       	mov	r22, r9
    1aa0:	70 e0       	ldi	r23, 0x00	; 0
    1aa2:	02 c0       	rjmp	.+4      	; 0x1aa8 <vfprintf+0x178>
    1aa4:	6f ef       	ldi	r22, 0xFF	; 255
    1aa6:	7f ef       	ldi	r23, 0xFF	; 255
    1aa8:	c5 01       	movw	r24, r10
    1aaa:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <strnlen_P>
    1aae:	4c 01       	movw	r8, r24
    1ab0:	f3 2d       	mov	r31, r3
    1ab2:	f0 68       	ori	r31, 0x80	; 128
    1ab4:	3f 2e       	mov	r3, r31
    1ab6:	82 01       	movw	r16, r4
    1ab8:	33 fc       	sbrc	r3, 3
    1aba:	1b c0       	rjmp	.+54     	; 0x1af2 <vfprintf+0x1c2>
    1abc:	82 2d       	mov	r24, r2
    1abe:	90 e0       	ldi	r25, 0x00	; 0
    1ac0:	88 16       	cp	r8, r24
    1ac2:	99 06       	cpc	r9, r25
    1ac4:	b0 f4       	brcc	.+44     	; 0x1af2 <vfprintf+0x1c2>
    1ac6:	b6 01       	movw	r22, r12
    1ac8:	80 e2       	ldi	r24, 0x20	; 32
    1aca:	90 e0       	ldi	r25, 0x00	; 0
    1acc:	0e 94 8f 0e 	call	0x1d1e	; 0x1d1e <fputc>
    1ad0:	2a 94       	dec	r2
    1ad2:	f4 cf       	rjmp	.-24     	; 0x1abc <vfprintf+0x18c>
    1ad4:	f5 01       	movw	r30, r10
    1ad6:	37 fc       	sbrc	r3, 7
    1ad8:	85 91       	lpm	r24, Z+
    1ada:	37 fe       	sbrs	r3, 7
    1adc:	81 91       	ld	r24, Z+
    1ade:	5f 01       	movw	r10, r30
    1ae0:	b6 01       	movw	r22, r12
    1ae2:	90 e0       	ldi	r25, 0x00	; 0
    1ae4:	0e 94 8f 0e 	call	0x1d1e	; 0x1d1e <fputc>
    1ae8:	21 10       	cpse	r2, r1
    1aea:	2a 94       	dec	r2
    1aec:	21 e0       	ldi	r18, 0x01	; 1
    1aee:	82 1a       	sub	r8, r18
    1af0:	91 08       	sbc	r9, r1
    1af2:	81 14       	cp	r8, r1
    1af4:	91 04       	cpc	r9, r1
    1af6:	71 f7       	brne	.-36     	; 0x1ad4 <vfprintf+0x1a4>
    1af8:	e8 c0       	rjmp	.+464    	; 0x1cca <vfprintf+0x39a>
    1afa:	84 36       	cpi	r24, 0x64	; 100
    1afc:	11 f0       	breq	.+4      	; 0x1b02 <vfprintf+0x1d2>
    1afe:	89 36       	cpi	r24, 0x69	; 105
    1b00:	41 f5       	brne	.+80     	; 0x1b52 <vfprintf+0x222>
    1b02:	f8 01       	movw	r30, r16
    1b04:	37 fe       	sbrs	r3, 7
    1b06:	07 c0       	rjmp	.+14     	; 0x1b16 <vfprintf+0x1e6>
    1b08:	60 81       	ld	r22, Z
    1b0a:	71 81       	ldd	r23, Z+1	; 0x01
    1b0c:	82 81       	ldd	r24, Z+2	; 0x02
    1b0e:	93 81       	ldd	r25, Z+3	; 0x03
    1b10:	0c 5f       	subi	r16, 0xFC	; 252
    1b12:	1f 4f       	sbci	r17, 0xFF	; 255
    1b14:	08 c0       	rjmp	.+16     	; 0x1b26 <vfprintf+0x1f6>
    1b16:	60 81       	ld	r22, Z
    1b18:	71 81       	ldd	r23, Z+1	; 0x01
    1b1a:	07 2e       	mov	r0, r23
    1b1c:	00 0c       	add	r0, r0
    1b1e:	88 0b       	sbc	r24, r24
    1b20:	99 0b       	sbc	r25, r25
    1b22:	0e 5f       	subi	r16, 0xFE	; 254
    1b24:	1f 4f       	sbci	r17, 0xFF	; 255
    1b26:	f3 2d       	mov	r31, r3
    1b28:	ff 76       	andi	r31, 0x6F	; 111
    1b2a:	3f 2e       	mov	r3, r31
    1b2c:	97 ff       	sbrs	r25, 7
    1b2e:	09 c0       	rjmp	.+18     	; 0x1b42 <vfprintf+0x212>
    1b30:	90 95       	com	r25
    1b32:	80 95       	com	r24
    1b34:	70 95       	com	r23
    1b36:	61 95       	neg	r22
    1b38:	7f 4f       	sbci	r23, 0xFF	; 255
    1b3a:	8f 4f       	sbci	r24, 0xFF	; 255
    1b3c:	9f 4f       	sbci	r25, 0xFF	; 255
    1b3e:	f0 68       	ori	r31, 0x80	; 128
    1b40:	3f 2e       	mov	r3, r31
    1b42:	2a e0       	ldi	r18, 0x0A	; 10
    1b44:	30 e0       	ldi	r19, 0x00	; 0
    1b46:	a3 01       	movw	r20, r6
    1b48:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <__ultoa_invert>
    1b4c:	88 2e       	mov	r8, r24
    1b4e:	86 18       	sub	r8, r6
    1b50:	45 c0       	rjmp	.+138    	; 0x1bdc <vfprintf+0x2ac>
    1b52:	85 37       	cpi	r24, 0x75	; 117
    1b54:	31 f4       	brne	.+12     	; 0x1b62 <vfprintf+0x232>
    1b56:	23 2d       	mov	r18, r3
    1b58:	2f 7e       	andi	r18, 0xEF	; 239
    1b5a:	b2 2e       	mov	r11, r18
    1b5c:	2a e0       	ldi	r18, 0x0A	; 10
    1b5e:	30 e0       	ldi	r19, 0x00	; 0
    1b60:	25 c0       	rjmp	.+74     	; 0x1bac <vfprintf+0x27c>
    1b62:	93 2d       	mov	r25, r3
    1b64:	99 7f       	andi	r25, 0xF9	; 249
    1b66:	b9 2e       	mov	r11, r25
    1b68:	8f 36       	cpi	r24, 0x6F	; 111
    1b6a:	c1 f0       	breq	.+48     	; 0x1b9c <vfprintf+0x26c>
    1b6c:	18 f4       	brcc	.+6      	; 0x1b74 <vfprintf+0x244>
    1b6e:	88 35       	cpi	r24, 0x58	; 88
    1b70:	79 f0       	breq	.+30     	; 0x1b90 <vfprintf+0x260>
    1b72:	b5 c0       	rjmp	.+362    	; 0x1cde <vfprintf+0x3ae>
    1b74:	80 37       	cpi	r24, 0x70	; 112
    1b76:	19 f0       	breq	.+6      	; 0x1b7e <vfprintf+0x24e>
    1b78:	88 37       	cpi	r24, 0x78	; 120
    1b7a:	21 f0       	breq	.+8      	; 0x1b84 <vfprintf+0x254>
    1b7c:	b0 c0       	rjmp	.+352    	; 0x1cde <vfprintf+0x3ae>
    1b7e:	e9 2f       	mov	r30, r25
    1b80:	e0 61       	ori	r30, 0x10	; 16
    1b82:	be 2e       	mov	r11, r30
    1b84:	b4 fe       	sbrs	r11, 4
    1b86:	0d c0       	rjmp	.+26     	; 0x1ba2 <vfprintf+0x272>
    1b88:	fb 2d       	mov	r31, r11
    1b8a:	f4 60       	ori	r31, 0x04	; 4
    1b8c:	bf 2e       	mov	r11, r31
    1b8e:	09 c0       	rjmp	.+18     	; 0x1ba2 <vfprintf+0x272>
    1b90:	34 fe       	sbrs	r3, 4
    1b92:	0a c0       	rjmp	.+20     	; 0x1ba8 <vfprintf+0x278>
    1b94:	29 2f       	mov	r18, r25
    1b96:	26 60       	ori	r18, 0x06	; 6
    1b98:	b2 2e       	mov	r11, r18
    1b9a:	06 c0       	rjmp	.+12     	; 0x1ba8 <vfprintf+0x278>
    1b9c:	28 e0       	ldi	r18, 0x08	; 8
    1b9e:	30 e0       	ldi	r19, 0x00	; 0
    1ba0:	05 c0       	rjmp	.+10     	; 0x1bac <vfprintf+0x27c>
    1ba2:	20 e1       	ldi	r18, 0x10	; 16
    1ba4:	30 e0       	ldi	r19, 0x00	; 0
    1ba6:	02 c0       	rjmp	.+4      	; 0x1bac <vfprintf+0x27c>
    1ba8:	20 e1       	ldi	r18, 0x10	; 16
    1baa:	32 e0       	ldi	r19, 0x02	; 2
    1bac:	f8 01       	movw	r30, r16
    1bae:	b7 fe       	sbrs	r11, 7
    1bb0:	07 c0       	rjmp	.+14     	; 0x1bc0 <vfprintf+0x290>
    1bb2:	60 81       	ld	r22, Z
    1bb4:	71 81       	ldd	r23, Z+1	; 0x01
    1bb6:	82 81       	ldd	r24, Z+2	; 0x02
    1bb8:	93 81       	ldd	r25, Z+3	; 0x03
    1bba:	0c 5f       	subi	r16, 0xFC	; 252
    1bbc:	1f 4f       	sbci	r17, 0xFF	; 255
    1bbe:	06 c0       	rjmp	.+12     	; 0x1bcc <vfprintf+0x29c>
    1bc0:	60 81       	ld	r22, Z
    1bc2:	71 81       	ldd	r23, Z+1	; 0x01
    1bc4:	80 e0       	ldi	r24, 0x00	; 0
    1bc6:	90 e0       	ldi	r25, 0x00	; 0
    1bc8:	0e 5f       	subi	r16, 0xFE	; 254
    1bca:	1f 4f       	sbci	r17, 0xFF	; 255
    1bcc:	a3 01       	movw	r20, r6
    1bce:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <__ultoa_invert>
    1bd2:	88 2e       	mov	r8, r24
    1bd4:	86 18       	sub	r8, r6
    1bd6:	fb 2d       	mov	r31, r11
    1bd8:	ff 77       	andi	r31, 0x7F	; 127
    1bda:	3f 2e       	mov	r3, r31
    1bdc:	36 fe       	sbrs	r3, 6
    1bde:	0d c0       	rjmp	.+26     	; 0x1bfa <vfprintf+0x2ca>
    1be0:	23 2d       	mov	r18, r3
    1be2:	2e 7f       	andi	r18, 0xFE	; 254
    1be4:	a2 2e       	mov	r10, r18
    1be6:	89 14       	cp	r8, r9
    1be8:	58 f4       	brcc	.+22     	; 0x1c00 <vfprintf+0x2d0>
    1bea:	34 fe       	sbrs	r3, 4
    1bec:	0b c0       	rjmp	.+22     	; 0x1c04 <vfprintf+0x2d4>
    1bee:	32 fc       	sbrc	r3, 2
    1bf0:	09 c0       	rjmp	.+18     	; 0x1c04 <vfprintf+0x2d4>
    1bf2:	83 2d       	mov	r24, r3
    1bf4:	8e 7e       	andi	r24, 0xEE	; 238
    1bf6:	a8 2e       	mov	r10, r24
    1bf8:	05 c0       	rjmp	.+10     	; 0x1c04 <vfprintf+0x2d4>
    1bfa:	b8 2c       	mov	r11, r8
    1bfc:	a3 2c       	mov	r10, r3
    1bfe:	03 c0       	rjmp	.+6      	; 0x1c06 <vfprintf+0x2d6>
    1c00:	b8 2c       	mov	r11, r8
    1c02:	01 c0       	rjmp	.+2      	; 0x1c06 <vfprintf+0x2d6>
    1c04:	b9 2c       	mov	r11, r9
    1c06:	a4 fe       	sbrs	r10, 4
    1c08:	0f c0       	rjmp	.+30     	; 0x1c28 <vfprintf+0x2f8>
    1c0a:	fe 01       	movw	r30, r28
    1c0c:	e8 0d       	add	r30, r8
    1c0e:	f1 1d       	adc	r31, r1
    1c10:	80 81       	ld	r24, Z
    1c12:	80 33       	cpi	r24, 0x30	; 48
    1c14:	21 f4       	brne	.+8      	; 0x1c1e <vfprintf+0x2ee>
    1c16:	9a 2d       	mov	r25, r10
    1c18:	99 7e       	andi	r25, 0xE9	; 233
    1c1a:	a9 2e       	mov	r10, r25
    1c1c:	09 c0       	rjmp	.+18     	; 0x1c30 <vfprintf+0x300>
    1c1e:	a2 fe       	sbrs	r10, 2
    1c20:	06 c0       	rjmp	.+12     	; 0x1c2e <vfprintf+0x2fe>
    1c22:	b3 94       	inc	r11
    1c24:	b3 94       	inc	r11
    1c26:	04 c0       	rjmp	.+8      	; 0x1c30 <vfprintf+0x300>
    1c28:	8a 2d       	mov	r24, r10
    1c2a:	86 78       	andi	r24, 0x86	; 134
    1c2c:	09 f0       	breq	.+2      	; 0x1c30 <vfprintf+0x300>
    1c2e:	b3 94       	inc	r11
    1c30:	a3 fc       	sbrc	r10, 3
    1c32:	11 c0       	rjmp	.+34     	; 0x1c56 <vfprintf+0x326>
    1c34:	a0 fe       	sbrs	r10, 0
    1c36:	06 c0       	rjmp	.+12     	; 0x1c44 <vfprintf+0x314>
    1c38:	b2 14       	cp	r11, r2
    1c3a:	88 f4       	brcc	.+34     	; 0x1c5e <vfprintf+0x32e>
    1c3c:	28 0c       	add	r2, r8
    1c3e:	92 2c       	mov	r9, r2
    1c40:	9b 18       	sub	r9, r11
    1c42:	0e c0       	rjmp	.+28     	; 0x1c60 <vfprintf+0x330>
    1c44:	b2 14       	cp	r11, r2
    1c46:	60 f4       	brcc	.+24     	; 0x1c60 <vfprintf+0x330>
    1c48:	b6 01       	movw	r22, r12
    1c4a:	80 e2       	ldi	r24, 0x20	; 32
    1c4c:	90 e0       	ldi	r25, 0x00	; 0
    1c4e:	0e 94 8f 0e 	call	0x1d1e	; 0x1d1e <fputc>
    1c52:	b3 94       	inc	r11
    1c54:	f7 cf       	rjmp	.-18     	; 0x1c44 <vfprintf+0x314>
    1c56:	b2 14       	cp	r11, r2
    1c58:	18 f4       	brcc	.+6      	; 0x1c60 <vfprintf+0x330>
    1c5a:	2b 18       	sub	r2, r11
    1c5c:	02 c0       	rjmp	.+4      	; 0x1c62 <vfprintf+0x332>
    1c5e:	98 2c       	mov	r9, r8
    1c60:	21 2c       	mov	r2, r1
    1c62:	a4 fe       	sbrs	r10, 4
    1c64:	10 c0       	rjmp	.+32     	; 0x1c86 <vfprintf+0x356>
    1c66:	b6 01       	movw	r22, r12
    1c68:	80 e3       	ldi	r24, 0x30	; 48
    1c6a:	90 e0       	ldi	r25, 0x00	; 0
    1c6c:	0e 94 8f 0e 	call	0x1d1e	; 0x1d1e <fputc>
    1c70:	a2 fe       	sbrs	r10, 2
    1c72:	17 c0       	rjmp	.+46     	; 0x1ca2 <vfprintf+0x372>
    1c74:	a1 fc       	sbrc	r10, 1
    1c76:	03 c0       	rjmp	.+6      	; 0x1c7e <vfprintf+0x34e>
    1c78:	88 e7       	ldi	r24, 0x78	; 120
    1c7a:	90 e0       	ldi	r25, 0x00	; 0
    1c7c:	02 c0       	rjmp	.+4      	; 0x1c82 <vfprintf+0x352>
    1c7e:	88 e5       	ldi	r24, 0x58	; 88
    1c80:	90 e0       	ldi	r25, 0x00	; 0
    1c82:	b6 01       	movw	r22, r12
    1c84:	0c c0       	rjmp	.+24     	; 0x1c9e <vfprintf+0x36e>
    1c86:	8a 2d       	mov	r24, r10
    1c88:	86 78       	andi	r24, 0x86	; 134
    1c8a:	59 f0       	breq	.+22     	; 0x1ca2 <vfprintf+0x372>
    1c8c:	a1 fe       	sbrs	r10, 1
    1c8e:	02 c0       	rjmp	.+4      	; 0x1c94 <vfprintf+0x364>
    1c90:	8b e2       	ldi	r24, 0x2B	; 43
    1c92:	01 c0       	rjmp	.+2      	; 0x1c96 <vfprintf+0x366>
    1c94:	80 e2       	ldi	r24, 0x20	; 32
    1c96:	a7 fc       	sbrc	r10, 7
    1c98:	8d e2       	ldi	r24, 0x2D	; 45
    1c9a:	b6 01       	movw	r22, r12
    1c9c:	90 e0       	ldi	r25, 0x00	; 0
    1c9e:	0e 94 8f 0e 	call	0x1d1e	; 0x1d1e <fputc>
    1ca2:	89 14       	cp	r8, r9
    1ca4:	38 f4       	brcc	.+14     	; 0x1cb4 <vfprintf+0x384>
    1ca6:	b6 01       	movw	r22, r12
    1ca8:	80 e3       	ldi	r24, 0x30	; 48
    1caa:	90 e0       	ldi	r25, 0x00	; 0
    1cac:	0e 94 8f 0e 	call	0x1d1e	; 0x1d1e <fputc>
    1cb0:	9a 94       	dec	r9
    1cb2:	f7 cf       	rjmp	.-18     	; 0x1ca2 <vfprintf+0x372>
    1cb4:	8a 94       	dec	r8
    1cb6:	f3 01       	movw	r30, r6
    1cb8:	e8 0d       	add	r30, r8
    1cba:	f1 1d       	adc	r31, r1
    1cbc:	80 81       	ld	r24, Z
    1cbe:	b6 01       	movw	r22, r12
    1cc0:	90 e0       	ldi	r25, 0x00	; 0
    1cc2:	0e 94 8f 0e 	call	0x1d1e	; 0x1d1e <fputc>
    1cc6:	81 10       	cpse	r8, r1
    1cc8:	f5 cf       	rjmp	.-22     	; 0x1cb4 <vfprintf+0x384>
    1cca:	22 20       	and	r2, r2
    1ccc:	09 f4       	brne	.+2      	; 0x1cd0 <vfprintf+0x3a0>
    1cce:	42 ce       	rjmp	.-892    	; 0x1954 <vfprintf+0x24>
    1cd0:	b6 01       	movw	r22, r12
    1cd2:	80 e2       	ldi	r24, 0x20	; 32
    1cd4:	90 e0       	ldi	r25, 0x00	; 0
    1cd6:	0e 94 8f 0e 	call	0x1d1e	; 0x1d1e <fputc>
    1cda:	2a 94       	dec	r2
    1cdc:	f6 cf       	rjmp	.-20     	; 0x1cca <vfprintf+0x39a>
    1cde:	f6 01       	movw	r30, r12
    1ce0:	86 81       	ldd	r24, Z+6	; 0x06
    1ce2:	97 81       	ldd	r25, Z+7	; 0x07
    1ce4:	02 c0       	rjmp	.+4      	; 0x1cea <vfprintf+0x3ba>
    1ce6:	8f ef       	ldi	r24, 0xFF	; 255
    1ce8:	9f ef       	ldi	r25, 0xFF	; 255
    1cea:	2b 96       	adiw	r28, 0x0b	; 11
    1cec:	e2 e1       	ldi	r30, 0x12	; 18
    1cee:	0c 94 45 0f 	jmp	0x1e8a	; 0x1e8a <__epilogue_restores__>

00001cf2 <strnlen_P>:
    1cf2:	fc 01       	movw	r30, r24
    1cf4:	05 90       	lpm	r0, Z+
    1cf6:	61 50       	subi	r22, 0x01	; 1
    1cf8:	70 40       	sbci	r23, 0x00	; 0
    1cfa:	01 10       	cpse	r0, r1
    1cfc:	d8 f7       	brcc	.-10     	; 0x1cf4 <strnlen_P+0x2>
    1cfe:	80 95       	com	r24
    1d00:	90 95       	com	r25
    1d02:	8e 0f       	add	r24, r30
    1d04:	9f 1f       	adc	r25, r31
    1d06:	08 95       	ret

00001d08 <strnlen>:
    1d08:	fc 01       	movw	r30, r24
    1d0a:	61 50       	subi	r22, 0x01	; 1
    1d0c:	70 40       	sbci	r23, 0x00	; 0
    1d0e:	01 90       	ld	r0, Z+
    1d10:	01 10       	cpse	r0, r1
    1d12:	d8 f7       	brcc	.-10     	; 0x1d0a <strnlen+0x2>
    1d14:	80 95       	com	r24
    1d16:	90 95       	com	r25
    1d18:	8e 0f       	add	r24, r30
    1d1a:	9f 1f       	adc	r25, r31
    1d1c:	08 95       	ret

00001d1e <fputc>:
    1d1e:	0f 93       	push	r16
    1d20:	1f 93       	push	r17
    1d22:	cf 93       	push	r28
    1d24:	df 93       	push	r29
    1d26:	fb 01       	movw	r30, r22
    1d28:	23 81       	ldd	r18, Z+3	; 0x03
    1d2a:	21 fd       	sbrc	r18, 1
    1d2c:	03 c0       	rjmp	.+6      	; 0x1d34 <fputc+0x16>
    1d2e:	8f ef       	ldi	r24, 0xFF	; 255
    1d30:	9f ef       	ldi	r25, 0xFF	; 255
    1d32:	2c c0       	rjmp	.+88     	; 0x1d8c <fputc+0x6e>
    1d34:	22 ff       	sbrs	r18, 2
    1d36:	16 c0       	rjmp	.+44     	; 0x1d64 <fputc+0x46>
    1d38:	46 81       	ldd	r20, Z+6	; 0x06
    1d3a:	57 81       	ldd	r21, Z+7	; 0x07
    1d3c:	24 81       	ldd	r18, Z+4	; 0x04
    1d3e:	35 81       	ldd	r19, Z+5	; 0x05
    1d40:	42 17       	cp	r20, r18
    1d42:	53 07       	cpc	r21, r19
    1d44:	44 f4       	brge	.+16     	; 0x1d56 <fputc+0x38>
    1d46:	a0 81       	ld	r26, Z
    1d48:	b1 81       	ldd	r27, Z+1	; 0x01
    1d4a:	9d 01       	movw	r18, r26
    1d4c:	2f 5f       	subi	r18, 0xFF	; 255
    1d4e:	3f 4f       	sbci	r19, 0xFF	; 255
    1d50:	31 83       	std	Z+1, r19	; 0x01
    1d52:	20 83       	st	Z, r18
    1d54:	8c 93       	st	X, r24
    1d56:	26 81       	ldd	r18, Z+6	; 0x06
    1d58:	37 81       	ldd	r19, Z+7	; 0x07
    1d5a:	2f 5f       	subi	r18, 0xFF	; 255
    1d5c:	3f 4f       	sbci	r19, 0xFF	; 255
    1d5e:	37 83       	std	Z+7, r19	; 0x07
    1d60:	26 83       	std	Z+6, r18	; 0x06
    1d62:	14 c0       	rjmp	.+40     	; 0x1d8c <fputc+0x6e>
    1d64:	8b 01       	movw	r16, r22
    1d66:	ec 01       	movw	r28, r24
    1d68:	fb 01       	movw	r30, r22
    1d6a:	00 84       	ldd	r0, Z+8	; 0x08
    1d6c:	f1 85       	ldd	r31, Z+9	; 0x09
    1d6e:	e0 2d       	mov	r30, r0
    1d70:	09 95       	icall
    1d72:	89 2b       	or	r24, r25
    1d74:	e1 f6       	brne	.-72     	; 0x1d2e <fputc+0x10>
    1d76:	d8 01       	movw	r26, r16
    1d78:	16 96       	adiw	r26, 0x06	; 6
    1d7a:	8d 91       	ld	r24, X+
    1d7c:	9c 91       	ld	r25, X
    1d7e:	17 97       	sbiw	r26, 0x07	; 7
    1d80:	01 96       	adiw	r24, 0x01	; 1
    1d82:	17 96       	adiw	r26, 0x07	; 7
    1d84:	9c 93       	st	X, r25
    1d86:	8e 93       	st	-X, r24
    1d88:	16 97       	sbiw	r26, 0x06	; 6
    1d8a:	ce 01       	movw	r24, r28
    1d8c:	df 91       	pop	r29
    1d8e:	cf 91       	pop	r28
    1d90:	1f 91       	pop	r17
    1d92:	0f 91       	pop	r16
    1d94:	08 95       	ret

00001d96 <__ultoa_invert>:
    1d96:	fa 01       	movw	r30, r20
    1d98:	aa 27       	eor	r26, r26
    1d9a:	28 30       	cpi	r18, 0x08	; 8
    1d9c:	51 f1       	breq	.+84     	; 0x1df2 <__ultoa_invert+0x5c>
    1d9e:	20 31       	cpi	r18, 0x10	; 16
    1da0:	81 f1       	breq	.+96     	; 0x1e02 <__ultoa_invert+0x6c>
    1da2:	e8 94       	clt
    1da4:	6f 93       	push	r22
    1da6:	6e 7f       	andi	r22, 0xFE	; 254
    1da8:	6e 5f       	subi	r22, 0xFE	; 254
    1daa:	7f 4f       	sbci	r23, 0xFF	; 255
    1dac:	8f 4f       	sbci	r24, 0xFF	; 255
    1dae:	9f 4f       	sbci	r25, 0xFF	; 255
    1db0:	af 4f       	sbci	r26, 0xFF	; 255
    1db2:	b1 e0       	ldi	r27, 0x01	; 1
    1db4:	3e d0       	rcall	.+124    	; 0x1e32 <__ultoa_invert+0x9c>
    1db6:	b4 e0       	ldi	r27, 0x04	; 4
    1db8:	3c d0       	rcall	.+120    	; 0x1e32 <__ultoa_invert+0x9c>
    1dba:	67 0f       	add	r22, r23
    1dbc:	78 1f       	adc	r23, r24
    1dbe:	89 1f       	adc	r24, r25
    1dc0:	9a 1f       	adc	r25, r26
    1dc2:	a1 1d       	adc	r26, r1
    1dc4:	68 0f       	add	r22, r24
    1dc6:	79 1f       	adc	r23, r25
    1dc8:	8a 1f       	adc	r24, r26
    1dca:	91 1d       	adc	r25, r1
    1dcc:	a1 1d       	adc	r26, r1
    1dce:	6a 0f       	add	r22, r26
    1dd0:	71 1d       	adc	r23, r1
    1dd2:	81 1d       	adc	r24, r1
    1dd4:	91 1d       	adc	r25, r1
    1dd6:	a1 1d       	adc	r26, r1
    1dd8:	20 d0       	rcall	.+64     	; 0x1e1a <__ultoa_invert+0x84>
    1dda:	09 f4       	brne	.+2      	; 0x1dde <__ultoa_invert+0x48>
    1ddc:	68 94       	set
    1dde:	3f 91       	pop	r19
    1de0:	2a e0       	ldi	r18, 0x0A	; 10
    1de2:	26 9f       	mul	r18, r22
    1de4:	11 24       	eor	r1, r1
    1de6:	30 19       	sub	r19, r0
    1de8:	30 5d       	subi	r19, 0xD0	; 208
    1dea:	31 93       	st	Z+, r19
    1dec:	de f6       	brtc	.-74     	; 0x1da4 <__ultoa_invert+0xe>
    1dee:	cf 01       	movw	r24, r30
    1df0:	08 95       	ret
    1df2:	46 2f       	mov	r20, r22
    1df4:	47 70       	andi	r20, 0x07	; 7
    1df6:	40 5d       	subi	r20, 0xD0	; 208
    1df8:	41 93       	st	Z+, r20
    1dfa:	b3 e0       	ldi	r27, 0x03	; 3
    1dfc:	0f d0       	rcall	.+30     	; 0x1e1c <__ultoa_invert+0x86>
    1dfe:	c9 f7       	brne	.-14     	; 0x1df2 <__ultoa_invert+0x5c>
    1e00:	f6 cf       	rjmp	.-20     	; 0x1dee <__ultoa_invert+0x58>
    1e02:	46 2f       	mov	r20, r22
    1e04:	4f 70       	andi	r20, 0x0F	; 15
    1e06:	40 5d       	subi	r20, 0xD0	; 208
    1e08:	4a 33       	cpi	r20, 0x3A	; 58
    1e0a:	18 f0       	brcs	.+6      	; 0x1e12 <__ultoa_invert+0x7c>
    1e0c:	49 5d       	subi	r20, 0xD9	; 217
    1e0e:	31 fd       	sbrc	r19, 1
    1e10:	40 52       	subi	r20, 0x20	; 32
    1e12:	41 93       	st	Z+, r20
    1e14:	02 d0       	rcall	.+4      	; 0x1e1a <__ultoa_invert+0x84>
    1e16:	a9 f7       	brne	.-22     	; 0x1e02 <__ultoa_invert+0x6c>
    1e18:	ea cf       	rjmp	.-44     	; 0x1dee <__ultoa_invert+0x58>
    1e1a:	b4 e0       	ldi	r27, 0x04	; 4
    1e1c:	a6 95       	lsr	r26
    1e1e:	97 95       	ror	r25
    1e20:	87 95       	ror	r24
    1e22:	77 95       	ror	r23
    1e24:	67 95       	ror	r22
    1e26:	ba 95       	dec	r27
    1e28:	c9 f7       	brne	.-14     	; 0x1e1c <__ultoa_invert+0x86>
    1e2a:	00 97       	sbiw	r24, 0x00	; 0
    1e2c:	61 05       	cpc	r22, r1
    1e2e:	71 05       	cpc	r23, r1
    1e30:	08 95       	ret
    1e32:	9b 01       	movw	r18, r22
    1e34:	ac 01       	movw	r20, r24
    1e36:	0a 2e       	mov	r0, r26
    1e38:	06 94       	lsr	r0
    1e3a:	57 95       	ror	r21
    1e3c:	47 95       	ror	r20
    1e3e:	37 95       	ror	r19
    1e40:	27 95       	ror	r18
    1e42:	ba 95       	dec	r27
    1e44:	c9 f7       	brne	.-14     	; 0x1e38 <__ultoa_invert+0xa2>
    1e46:	62 0f       	add	r22, r18
    1e48:	73 1f       	adc	r23, r19
    1e4a:	84 1f       	adc	r24, r20
    1e4c:	95 1f       	adc	r25, r21
    1e4e:	a0 1d       	adc	r26, r0
    1e50:	08 95       	ret

00001e52 <__prologue_saves__>:
    1e52:	2f 92       	push	r2
    1e54:	3f 92       	push	r3
    1e56:	4f 92       	push	r4
    1e58:	5f 92       	push	r5
    1e5a:	6f 92       	push	r6
    1e5c:	7f 92       	push	r7
    1e5e:	8f 92       	push	r8
    1e60:	9f 92       	push	r9
    1e62:	af 92       	push	r10
    1e64:	bf 92       	push	r11
    1e66:	cf 92       	push	r12
    1e68:	df 92       	push	r13
    1e6a:	ef 92       	push	r14
    1e6c:	ff 92       	push	r15
    1e6e:	0f 93       	push	r16
    1e70:	1f 93       	push	r17
    1e72:	cf 93       	push	r28
    1e74:	df 93       	push	r29
    1e76:	cd b7       	in	r28, 0x3d	; 61
    1e78:	de b7       	in	r29, 0x3e	; 62
    1e7a:	ca 1b       	sub	r28, r26
    1e7c:	db 0b       	sbc	r29, r27
    1e7e:	0f b6       	in	r0, 0x3f	; 63
    1e80:	f8 94       	cli
    1e82:	de bf       	out	0x3e, r29	; 62
    1e84:	0f be       	out	0x3f, r0	; 63
    1e86:	cd bf       	out	0x3d, r28	; 61
    1e88:	09 94       	ijmp

00001e8a <__epilogue_restores__>:
    1e8a:	2a 88       	ldd	r2, Y+18	; 0x12
    1e8c:	39 88       	ldd	r3, Y+17	; 0x11
    1e8e:	48 88       	ldd	r4, Y+16	; 0x10
    1e90:	5f 84       	ldd	r5, Y+15	; 0x0f
    1e92:	6e 84       	ldd	r6, Y+14	; 0x0e
    1e94:	7d 84       	ldd	r7, Y+13	; 0x0d
    1e96:	8c 84       	ldd	r8, Y+12	; 0x0c
    1e98:	9b 84       	ldd	r9, Y+11	; 0x0b
    1e9a:	aa 84       	ldd	r10, Y+10	; 0x0a
    1e9c:	b9 84       	ldd	r11, Y+9	; 0x09
    1e9e:	c8 84       	ldd	r12, Y+8	; 0x08
    1ea0:	df 80       	ldd	r13, Y+7	; 0x07
    1ea2:	ee 80       	ldd	r14, Y+6	; 0x06
    1ea4:	fd 80       	ldd	r15, Y+5	; 0x05
    1ea6:	0c 81       	ldd	r16, Y+4	; 0x04
    1ea8:	1b 81       	ldd	r17, Y+3	; 0x03
    1eaa:	aa 81       	ldd	r26, Y+2	; 0x02
    1eac:	b9 81       	ldd	r27, Y+1	; 0x01
    1eae:	ce 0f       	add	r28, r30
    1eb0:	d1 1d       	adc	r29, r1
    1eb2:	0f b6       	in	r0, 0x3f	; 63
    1eb4:	f8 94       	cli
    1eb6:	de bf       	out	0x3e, r29	; 62
    1eb8:	0f be       	out	0x3f, r0	; 63
    1eba:	cd bf       	out	0x3d, r28	; 61
    1ebc:	ed 01       	movw	r28, r26
    1ebe:	08 95       	ret

00001ec0 <_exit>:
    1ec0:	f8 94       	cli

00001ec2 <__stop_program>:
    1ec2:	ff cf       	rjmp	.-2      	; 0x1ec2 <__stop_program>
