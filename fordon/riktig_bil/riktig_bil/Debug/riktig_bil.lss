
riktig_bil.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005c  00800100  0000292c  000029c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000292c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000068e  0080015c  0080015c  00002a1c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002a1c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002a78  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003d0  00000000  00000000  00002ab8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000529e  00000000  00000000  00002e88  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000180c  00000000  00000000  00008126  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000263b  00000000  00000000  00009932  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007b0  00000000  00000000  0000bf70  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000dbb  00000000  00000000  0000c720  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002cc3  00000000  00000000  0000d4db  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000318  00000000  00000000  0001019e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2c 06 	jmp	0xc58	; 0xc58 <__ctors_end>
       4:	0c 94 49 06 	jmp	0xc92	; 0xc92 <__bad_interrupt>
       8:	0c 94 49 06 	jmp	0xc92	; 0xc92 <__bad_interrupt>
       c:	0c 94 49 06 	jmp	0xc92	; 0xc92 <__bad_interrupt>
      10:	0c 94 49 06 	jmp	0xc92	; 0xc92 <__bad_interrupt>
      14:	0c 94 49 06 	jmp	0xc92	; 0xc92 <__bad_interrupt>
      18:	0c 94 49 06 	jmp	0xc92	; 0xc92 <__bad_interrupt>
      1c:	0c 94 67 09 	jmp	0x12ce	; 0x12ce <__vector_7>
      20:	0c 94 49 06 	jmp	0xc92	; 0xc92 <__bad_interrupt>
      24:	0c 94 49 06 	jmp	0xc92	; 0xc92 <__bad_interrupt>
      28:	0c 94 49 06 	jmp	0xc92	; 0xc92 <__bad_interrupt>
      2c:	0c 94 49 06 	jmp	0xc92	; 0xc92 <__bad_interrupt>
      30:	0c 94 49 06 	jmp	0xc92	; 0xc92 <__bad_interrupt>
      34:	0c 94 49 06 	jmp	0xc92	; 0xc92 <__bad_interrupt>
      38:	0c 94 49 06 	jmp	0xc92	; 0xc92 <__bad_interrupt>
      3c:	0c 94 49 06 	jmp	0xc92	; 0xc92 <__bad_interrupt>
      40:	0c 94 49 06 	jmp	0xc92	; 0xc92 <__bad_interrupt>
      44:	0c 94 49 06 	jmp	0xc92	; 0xc92 <__bad_interrupt>
      48:	0c 94 d4 09 	jmp	0x13a8	; 0x13a8 <__vector_18>
      4c:	0c 94 49 06 	jmp	0xc92	; 0xc92 <__bad_interrupt>
      50:	0c 94 49 06 	jmp	0xc92	; 0xc92 <__bad_interrupt>
      54:	0c 94 49 06 	jmp	0xc92	; 0xc92 <__bad_interrupt>
      58:	0c 94 49 06 	jmp	0xc92	; 0xc92 <__bad_interrupt>
      5c:	0c 94 49 06 	jmp	0xc92	; 0xc92 <__bad_interrupt>
      60:	0c 94 49 06 	jmp	0xc92	; 0xc92 <__bad_interrupt>
      64:	0c 94 49 06 	jmp	0xc92	; 0xc92 <__bad_interrupt>
      68:	98 08       	sbc	r9, r8
      6a:	9f 08       	sbc	r9, r15
      6c:	a5 08       	sbc	r10, r5
      6e:	da 08       	sbc	r13, r10
      70:	fe 08       	sbc	r15, r14
      72:	31 09       	sbc	r19, r1
      74:	38 09       	sbc	r19, r8
      76:	3f 09       	sbc	r19, r15
      78:	44 09       	sbc	r20, r4
      7a:	b2 08       	sbc	r11, r2
      7c:	b5 08       	sbc	r11, r5
      7e:	b8 08       	sbc	r11, r8
      80:	bb 08       	sbc	r11, r11
      82:	be 08       	sbc	r11, r14
      84:	c1 08       	sbc	r12, r1
      86:	c4 08       	sbc	r12, r4
      88:	c7 08       	sbc	r12, r7
      8a:	ca 08       	sbc	r12, r10
      8c:	cd 08       	sbc	r12, r13
      8e:	51 09       	sbc	r21, r1
      90:	51 09       	sbc	r21, r1
      92:	51 09       	sbc	r21, r1
      94:	51 09       	sbc	r21, r1
      96:	51 09       	sbc	r21, r1
      98:	51 09       	sbc	r21, r1
      9a:	51 09       	sbc	r21, r1
      9c:	d0 08       	sbc	r13, r0
      9e:	d3 08       	sbc	r13, r3
      a0:	cd 0c       	add	r12, r13
      a2:	c6 0c       	add	r12, r6
      a4:	bf 0c       	add	r11, r15
      a6:	b8 0c       	add	r11, r8
      a8:	b1 0c       	add	r11, r1
      aa:	a7 0c       	add	r10, r7
      ac:	9d 0c       	add	r9, r13
      ae:	96 0c       	add	r9, r6
      b0:	8f 0c       	add	r8, r15

000000b2 <__trampolines_end>:
      b2:	7b 14       	cp	r7, r11
      b4:	e9 43       	sbci	r30, 0x39	; 57
      b6:	04 08       	sbc	r0, r4
      b8:	01 00       	.word	0x0001	; ????
      ba:	00 00       	nop
      bc:	00 00       	nop
      be:	08 01       	movw	r0, r16
      c0:	a4 d0       	rcall	.+328    	; 0x20a <__trampolines_end+0x158>
      c2:	82 43       	sbci	r24, 0x32	; 50
      c4:	05 08       	sbc	r0, r5
      c6:	01 00       	.word	0x0001	; ????
      c8:	00 00       	nop
      ca:	00 00       	nop
      cc:	08 01       	movw	r0, r16
      ce:	7b d4       	rcall	.+2294   	; 0x9c6 <imperial_march_notes+0x38>
      d0:	92 43       	sbci	r25, 0x32	; 50
      d2:	05 10       	cpse	r0, r5
      d4:	03 a4       	ldd	r0, Z+43	; 0x2b
      d6:	90 9b       	sbis	0x12, 0	; 18
      d8:	43 05       	cpc	r20, r3
      da:	10 03       	mulsu	r17, r16
      dc:	71 9d       	mul	r23, r1
      de:	ae 43       	sbci	r26, 0x3E	; 62
      e0:	05 10       	cpse	r0, r5
      e2:	02 a4       	ldd	r0, Z+42	; 0x2a
      e4:	90 9b       	sbis	0x12, 0	; 18
      e6:	43 05       	cpc	r20, r3
      e8:	10 03       	mulsu	r17, r16
      ea:	00 00       	nop
      ec:	00 00       	nop
      ee:	00 10       	cpse	r0, r0
      f0:	01 a4       	ldd	r0, Z+41	; 0x29
      f2:	90 9b       	sbis	0x12, 0	; 18
      f4:	43 05       	cpc	r20, r3
      f6:	10 01       	movw	r2, r0
      f8:	71 9d       	mul	r23, r1
      fa:	ae 43       	sbci	r26, 0x3E	; 62
      fc:	05 10       	cpse	r0, r5
      fe:	01 a4       	ldd	r0, Z+41	; 0x29
     100:	90 9b       	sbis	0x12, 0	; 18
     102:	43 05       	cpc	r20, r3
     104:	08 01       	movw	r0, r16
     106:	7b d4       	rcall	.+2294   	; 0x9fe <imperial_march_notes+0x70>
     108:	92 43       	sbci	r25, 0x32	; 50
     10a:	05 10       	cpse	r0, r5
     10c:	03 00       	.word	0x0003	; ????
     10e:	00 00       	nop
     110:	00 00       	nop
     112:	10 01       	movw	r2, r0
     114:	7b d4       	rcall	.+2294   	; 0xa0c <halo_theme_notes>
     116:	92 43       	sbci	r25, 0x32	; 50
     118:	05 10       	cpse	r0, r5
     11a:	01 a4       	ldd	r0, Z+41	; 0x29
     11c:	90 9b       	sbis	0x12, 0	; 18
     11e:	43 05       	cpc	r20, r3
     120:	10 01       	movw	r2, r0
     122:	7b d4       	rcall	.+2294   	; 0xa1a <halo_theme_notes+0xe>
     124:	92 43       	sbci	r25, 0x32	; 50
     126:	05 08       	sbc	r0, r5
     128:	01 a4       	ldd	r0, Z+41	; 0x29
     12a:	d0 82       	st	Z, r13
     12c:	43 05       	cpc	r20, r3
     12e:	02 01       	movw	r0, r4
     130:	00 00       	nop
     132:	00 00       	nop
     134:	00 08       	sbc	r0, r0
     136:	01 71       	andi	r16, 0x11	; 17
     138:	9d ae       	std	Y+61, r9	; 0x3d
     13a:	43 05       	cpc	r20, r3
     13c:	08 01       	movw	r0, r16
     13e:	66 a6       	std	Z+46, r6	; 0x2e
     140:	cf 43       	sbci	r28, 0x3F	; 63
     142:	05 08       	sbc	r0, r5
     144:	01 71       	andi	r16, 0x11	; 17
     146:	9d ae       	std	Y+61, r9	; 0x3d
     148:	43 05       	cpc	r20, r3
     14a:	08 01       	movw	r0, r16
     14c:	71 9d       	mul	r23, r1
     14e:	ae 43       	sbci	r26, 0x3E	; 62
     150:	05 10       	cpse	r0, r5
     152:	03 00       	.word	0x0003	; ????
     154:	00 00       	nop
     156:	00 00       	nop
     158:	10 01       	movw	r2, r0
     15a:	71 9d       	mul	r23, r1
     15c:	ae 43       	sbci	r26, 0x3E	; 62
     15e:	05 10       	cpse	r0, r5
     160:	01 00       	.word	0x0001	; ????
     162:	00 c4       	rjmp	.+2048   	; 0x964 <__stack+0x65>
     164:	43 05       	cpc	r20, r3
     166:	10 01       	movw	r2, r0
     168:	66 a6       	std	Z+46, r6	; 0x2e
     16a:	cf 43       	sbci	r28, 0x3F	; 63
     16c:	05 08       	sbc	r0, r5
     16e:	01 a4       	ldd	r0, Z+41	; 0x29
     170:	d0 82       	st	Z, r13
     172:	43 05       	cpc	r20, r3
     174:	10 03       	mulsu	r17, r16
     176:	00 00       	nop
     178:	00 00       	nop
     17a:	00 10       	cpse	r0, r0
     17c:	01 a4       	ldd	r0, Z+41	; 0x29
     17e:	d0 82       	st	Z, r13
     180:	43 05       	cpc	r20, r3
     182:	10 01       	movw	r2, r0
     184:	7b d4       	rcall	.+2294   	; 0xa7c <halo_theme_notes+0x70>
     186:	92 43       	sbci	r25, 0x32	; 50
     188:	05 10       	cpse	r0, r5
     18a:	01 a4       	ldd	r0, Z+41	; 0x29
     18c:	90 9b       	sbis	0x12, 0	; 18
     18e:	43 05       	cpc	r20, r3
     190:	08 01       	movw	r0, r16
     192:	7b d4       	rcall	.+2294   	; 0xa8a <halo_theme_notes+0x7e>
     194:	92 43       	sbci	r25, 0x32	; 50
     196:	05 08       	sbc	r0, r5
     198:	03 a4       	ldd	r0, Z+43	; 0x2b
     19a:	d0 82       	st	Z, r13
     19c:	43 05       	cpc	r20, r3
     19e:	08 01       	movw	r0, r16
     1a0:	7b 14       	cp	r7, r11
     1a2:	e9 43       	sbci	r30, 0x39	; 57
     1a4:	04 02       	muls	r16, r20
     1a6:	01 00       	.word	0x0001	; ????
     1a8:	00 c4       	rjmp	.+2048   	; 0x9aa <imperial_march_notes+0x1c>
     1aa:	43 05       	cpc	r20, r3
     1ac:	10 03       	mulsu	r17, r16
     1ae:	00 00       	nop
     1b0:	00 00       	nop
     1b2:	00 10       	cpse	r0, r0
     1b4:	01 00       	.word	0x0001	; ????
     1b6:	00 c4       	rjmp	.+2048   	; 0x9b8 <imperial_march_notes+0x2a>
     1b8:	43 05       	cpc	r20, r3
     1ba:	10 01       	movw	r2, r0
     1bc:	66 a6       	std	Z+46, r6	; 0x2e
     1be:	cf 43       	sbci	r28, 0x3F	; 63
     1c0:	05 10       	cpse	r0, r5
     1c2:	01 00       	.word	0x0001	; ????
     1c4:	00 c4       	rjmp	.+2048   	; 0x9c6 <imperial_march_notes+0x38>
     1c6:	43 05       	cpc	r20, r3
     1c8:	08 01       	movw	r0, r16
     1ca:	71 9d       	mul	r23, r1
     1cc:	ae 43       	sbci	r26, 0x3E	; 62
     1ce:	05 10       	cpse	r0, r5
     1d0:	03 00       	.word	0x0003	; ????
     1d2:	00 00       	nop
     1d4:	00 00       	nop
     1d6:	10 01       	movw	r2, r0
     1d8:	71 9d       	mul	r23, r1
     1da:	ae 43       	sbci	r26, 0x3E	; 62
     1dc:	05 10       	cpse	r0, r5
     1de:	01 00       	.word	0x0001	; ????
     1e0:	00 c4       	rjmp	.+2048   	; 0x9e2 <imperial_march_notes+0x54>
     1e2:	43 05       	cpc	r20, r3
     1e4:	10 01       	movw	r2, r0
     1e6:	71 9d       	mul	r23, r1
     1e8:	ae 43       	sbci	r26, 0x3E	; 62
     1ea:	05 08       	sbc	r0, r5
     1ec:	01 a4       	ldd	r0, Z+41	; 0x29
     1ee:	90 9b       	sbis	0x12, 0	; 18
     1f0:	43 05       	cpc	r20, r3
     1f2:	02 01       	movw	r0, r4
     1f4:	00 00       	nop
     1f6:	00 00       	nop
     1f8:	00 08       	sbc	r0, r0
     1fa:	01 7b       	andi	r16, 0xB1	; 177
     1fc:	14 e9       	ldi	r17, 0x94	; 148
     1fe:	43 04       	cpc	r4, r3
     200:	08 01       	movw	r0, r16
     202:	a4 90       	lpm	r10, Z
     204:	9b 43       	sbci	r25, 0x3B	; 59
     206:	05 08       	sbc	r0, r5
     208:	01 7b       	andi	r16, 0xB1	; 177
     20a:	14 e9       	ldi	r17, 0x94	; 148
     20c:	43 05       	cpc	r20, r3
     20e:	08 01       	movw	r0, r16
     210:	66 a6       	std	Z+46, r6	; 0x2e
     212:	cf 43       	sbci	r28, 0x3F	; 63
     214:	05 10       	cpse	r0, r5
     216:	03 00       	.word	0x0003	; ????
     218:	00 00       	nop
     21a:	00 00       	nop
     21c:	10 01       	movw	r2, r0
     21e:	66 a6       	std	Z+46, r6	; 0x2e
     220:	cf 43       	sbci	r28, 0x3F	; 63
     222:	05 10       	cpse	r0, r5
     224:	01 7b       	andi	r16, 0xB1	; 177
     226:	14 e9       	ldi	r17, 0x94	; 148
     228:	43 05       	cpc	r20, r3
     22a:	10 01       	movw	r2, r0
     22c:	66 a6       	std	Z+46, r6	; 0x2e
     22e:	cf 43       	sbci	r28, 0x3F	; 63
     230:	05 08       	sbc	r0, r5
     232:	01 00       	.word	0x0001	; ????
     234:	00 c4       	rjmp	.+2048   	; 0xa36 <halo_theme_notes+0x2a>
     236:	43 05       	cpc	r20, r3
     238:	10 03       	mulsu	r17, r16
     23a:	00 00       	nop
     23c:	00 00       	nop
     23e:	00 10       	cpse	r0, r0
     240:	01 00       	.word	0x0001	; ????
     242:	00 c4       	rjmp	.+2048   	; 0xa44 <halo_theme_notes+0x38>
     244:	43 05       	cpc	r20, r3
     246:	10 01       	movw	r2, r0
     248:	66 a6       	std	Z+46, r6	; 0x2e
     24a:	cf 43       	sbci	r28, 0x3F	; 63
     24c:	05 10       	cpse	r0, r5
     24e:	01 00       	.word	0x0001	; ????
     250:	00 c4       	rjmp	.+2048   	; 0xa52 <halo_theme_notes+0x46>
     252:	43 05       	cpc	r20, r3
     254:	08 01       	movw	r0, r16
     256:	0a 97       	sbiw	r24, 0x0a	; 10
     258:	8a 43       	sbci	r24, 0x3A	; 58
     25a:	05 08       	sbc	r0, r5
     25c:	03 a4       	ldd	r0, Z+43	; 0x2b
     25e:	90 9b       	sbis	0x12, 0	; 18
     260:	43 05       	cpc	r20, r3
     262:	08 01       	movw	r0, r16
     264:	71 9d       	mul	r23, r1
     266:	ae 43       	sbci	r26, 0x3E	; 62
     268:	05 04       	cpc	r0, r5
     26a:	01 00       	.word	0x0001	; ????
     26c:	00 c4       	rjmp	.+2048   	; 0xa6e <halo_theme_notes+0x62>
     26e:	43 04       	cpc	r4, r3
     270:	08 01       	movw	r0, r16
     272:	66 a6       	std	Z+46, r6	; 0x2e
     274:	cf 43       	sbci	r28, 0x3F	; 63
     276:	04 08       	sbc	r0, r4
     278:	01 7b       	andi	r16, 0xB1	; 177
     27a:	14 e9       	ldi	r17, 0x94	; 148
     27c:	43 04       	cpc	r4, r3
     27e:	08 01       	movw	r0, r16
     280:	00 00       	nop
     282:	00 00       	nop
     284:	00 08       	sbc	r0, r0
     286:	04 7b       	andi	r16, 0xB4	; 180
     288:	14 e9       	ldi	r17, 0x94	; 148
     28a:	43 04       	cpc	r4, r3
     28c:	08 01       	movw	r0, r16
     28e:	a4 d0       	rcall	.+328    	; 0x3d8 <pokemon_center_notes+0x32>
     290:	82 43       	sbci	r24, 0x32	; 50
     292:	05 08       	sbc	r0, r5
     294:	01 0a       	sbc	r0, r17
     296:	97 8a       	std	Z+23, r9	; 0x17
     298:	43 05       	cpc	r20, r3
     29a:	08 01       	movw	r0, r16
     29c:	a4 d0       	rcall	.+328    	; 0x3e6 <pokemon_center_notes+0x40>
     29e:	82 43       	sbci	r24, 0x32	; 50
     2a0:	05 08       	sbc	r0, r5
     2a2:	01 00       	.word	0x0001	; ????
     2a4:	00 00       	nop
     2a6:	00 00       	nop
     2a8:	08 04       	cpc	r0, r8
     2aa:	00 00       	nop
     2ac:	c4 43       	sbci	r28, 0x34	; 52
     2ae:	04 08       	sbc	r0, r4
     2b0:	01 a4       	ldd	r0, Z+41	; 0x29
     2b2:	d0 82       	st	Z, r13
     2b4:	43 05       	cpc	r20, r3
     2b6:	08 01       	movw	r0, r16
     2b8:	00 00       	nop
     2ba:	c4 43       	sbci	r28, 0x34	; 52
     2bc:	04 08       	sbc	r0, r4
     2be:	01 66       	ori	r16, 0x61	; 97
     2c0:	a6 cf       	rjmp	.-180    	; 0x20e <__trampolines_end+0x15c>
     2c2:	43 04       	cpc	r4, r3
     2c4:	08 01       	movw	r0, r16
     2c6:	00 00       	nop
     2c8:	00 00       	nop
     2ca:	00 08       	sbc	r0, r0
     2cc:	04 66       	ori	r16, 0x64	; 100
     2ce:	a6 cf       	rjmp	.-180    	; 0x21c <__trampolines_end+0x16a>
     2d0:	43 04       	cpc	r4, r3
     2d2:	08 01       	movw	r0, r16
     2d4:	00 00       	nop
     2d6:	c4 43       	sbci	r28, 0x34	; 52
     2d8:	04 08       	sbc	r0, r4
     2da:	01 66       	ori	r16, 0x61	; 97
     2dc:	a6 cf       	rjmp	.-180    	; 0x22a <__trampolines_end+0x178>
     2de:	43 04       	cpc	r4, r3
     2e0:	08 01       	movw	r0, r16
     2e2:	7b 14       	cp	r7, r11
     2e4:	e9 43       	sbci	r30, 0x39	; 57
     2e6:	04 08       	sbc	r0, r4
     2e8:	01 00       	.word	0x0001	; ????
     2ea:	00 00       	nop
     2ec:	00 00       	nop
     2ee:	08 01       	movw	r0, r16
     2f0:	66 a6       	std	Z+46, r6	; 0x2e
     2f2:	cf 43       	sbci	r28, 0x3F	; 63
     2f4:	04 08       	sbc	r0, r4
     2f6:	01 00       	.word	0x0001	; ????
     2f8:	00 00       	nop
     2fa:	00 00       	nop
     2fc:	08 01       	movw	r0, r16
     2fe:	00 00       	nop
     300:	c4 43       	sbci	r28, 0x34	; 52
     302:	04 08       	sbc	r0, r4
     304:	01 71       	andi	r16, 0x11	; 17
     306:	9d ae       	std	Y+61, r9	; 0x3d
     308:	43 04       	cpc	r4, r3
     30a:	04 01       	movw	r0, r8
     30c:	a4 90       	lpm	r10, Z
     30e:	9b 43       	sbci	r25, 0x3B	; 59
     310:	04 08       	sbc	r0, r4
     312:	01 a4       	ldd	r0, Z+41	; 0x29
     314:	d0 82       	st	Z, r13
     316:	43 06       	cpc	r4, r19
     318:	02 01       	movw	r0, r4
     31a:	00 00       	nop
     31c:	00 00       	nop
     31e:	00 08       	sbc	r0, r0
     320:	01 a4       	ldd	r0, Z+41	; 0x29
     322:	d0 82       	st	Z, r13
     324:	43 06       	cpc	r4, r19
     326:	08 01       	movw	r0, r16
     328:	7b d4       	rcall	.+2294   	; 0xc20 <mario_notes+0x1c>
     32a:	92 43       	sbci	r25, 0x32	; 50
     32c:	06 08       	sbc	r0, r6
     32e:	01 a4       	ldd	r0, Z+41	; 0x29
     330:	90 9b       	sbis	0x12, 0	; 18
     332:	43 06       	cpc	r4, r19
     334:	08 01       	movw	r0, r16
     336:	7b d4       	rcall	.+2294   	; 0xc2e <mario_notes+0x2a>
     338:	92 43       	sbci	r25, 0x32	; 50
     33a:	06 02       	muls	r16, r22
     33c:	01 00       	.word	0x0001	; ????
     33e:	00 00       	nop
     340:	00 00       	nop
     342:	08 01       	movw	r0, r16
     344:	00 00       	nop
     346:	c4 43       	sbci	r28, 0x34	; 52
     348:	05 08       	sbc	r0, r5
     34a:	01 7b       	andi	r16, 0xB1	; 177
     34c:	14 e9       	ldi	r17, 0x94	; 148
     34e:	43 05       	cpc	r20, r3
     350:	08 01       	movw	r0, r16
     352:	a4 d0       	rcall	.+328    	; 0x49c <__EEPROM_REGION_LENGTH__+0x9c>
     354:	82 43       	sbci	r24, 0x32	; 50
     356:	06 08       	sbc	r0, r6
     358:	01 66       	ori	r16, 0x61	; 97
     35a:	a6 cf       	rjmp	.-180    	; 0x2a8 <__trampolines_end+0x1f6>
     35c:	43 05       	cpc	r20, r3
     35e:	02 01       	movw	r0, r4
     360:	00 00       	nop
     362:	00 00       	nop
     364:	00 08       	sbc	r0, r0
     366:	01 66       	ori	r16, 0x61	; 97
     368:	a6 cf       	rjmp	.-180    	; 0x2b6 <__trampolines_end+0x204>
     36a:	43 05       	cpc	r20, r3
     36c:	08 01       	movw	r0, r16
     36e:	71 9d       	mul	r23, r1
     370:	ae 43       	sbci	r26, 0x3E	; 62
     372:	05 08       	sbc	r0, r5
     374:	01 66       	ori	r16, 0x61	; 97
     376:	a6 cf       	rjmp	.-180    	; 0x2c4 <__trampolines_end+0x212>
     378:	43 05       	cpc	r20, r3
     37a:	08 01       	movw	r0, r16
     37c:	71 9d       	mul	r23, r1
     37e:	ae 43       	sbci	r26, 0x3E	; 62
     380:	05 04       	cpc	r0, r5
     382:	01 00       	.word	0x0001	; ????
     384:	00 c4       	rjmp	.+2048   	; 0xb86 <mii_notes+0x4d>
     386:	43 05       	cpc	r20, r3
     388:	04 01       	movw	r0, r8
     38a:	66 a6       	std	Z+46, r6	; 0x2e
     38c:	cf 43       	sbci	r28, 0x3F	; 63
     38e:	05 10       	cpse	r0, r5
     390:	03 00       	.word	0x0003	; ????
     392:	00 c4       	rjmp	.+2048   	; 0xb94 <mii_notes+0x5b>
     394:	43 05       	cpc	r20, r3
     396:	10 03       	mulsu	r17, r16
     398:	71 9d       	mul	r23, r1
     39a:	ae 43       	sbci	r26, 0x3E	; 62
     39c:	05 10       	cpse	r0, r5
     39e:	02 a4       	ldd	r0, Z+42	; 0x2a
     3a0:	90 9b       	sbis	0x12, 0	; 18
     3a2:	43 05       	cpc	r20, r3
     3a4:	01 01       	movw	r0, r2

000003a6 <pokemon_center_notes>:
     3a6:	7b d4 92 43 05 08 01 00 00 dc 43 04 08 01 7b d4     {..C......C...{.
     3b6:	92 43 05 08 01 00 00 dc 43 05 04 01 00 00 c4 43     .C......C......C
     3c6:	05 04 01 b8 fe b8 43 05 08 01 a4 d0 a4 43 05 08     ......C......C..
     3d6:	01 0a 97 8a 43 05 08 03 00 00 00 00 00 02 01 0a     ....C...........
     3e6:	97 8a 43 05 08 01 00 00 dc 43 04 08 01 0a 97 8a     ..C......C......
     3f6:	43 05 08 01 b8 fe b8 43 05 04 01 a4 d0 a4 43 05     C......C......C.
     406:	04 01 0a 97 8a 43 05 08 01 7b d4 92 43 05 08 01     .....C...{..C...
     416:	b8 fe b8 43 05 08 03 00 00 00 00 00 02 01 7b d4     ...C..........{.
     426:	92 43 05 08 01 00 00 dc 43 04 08 01 7b d4 92 43     .C......C...{..C
     436:	05 08 01 00 00 dc 43 05 04 01 00 00 c4 43 05 04     ......C......C..
     446:	01 b8 fe b8 43 05 08 01 a4 d0 a4 43 05 08 01 0a     ....C......C....
     456:	97 8a 43 05 08 03 00 00 00 00 00 02 01 0a 97 8a     ..C.............
     466:	43 05 08 01 00 00 dc 43 04 08 01 0a 97 8a 43 05     C......C......C.
     476:	08 01 b8 fe b8 43 05 04 01 a4 d0 a4 43 05 04 01     .....C......C...
     486:	0a 97 8a 43 05 08 01 7b d4 92 43 05 02 01 00 00     ...C...{..C.....
     496:	00 00 00 02 01 b8 fe b8 43 05 02 01 00 00 dc 43     ........C......C
     4a6:	05 02 01 00 00 c4 43 05 08 01 00 00 dc 43 05 08     ......C......C..
     4b6:	01 00 00 c4 43 05 08 01 b8 fe b8 43 05 08 01 a4     ....C......C....
     4c6:	d0 a4 43 05 02 01 0a 97 8a 43 05 02 01 a4 d0 a4     ..C......C......
     4d6:	43 05 02 01 b8 fe b8 43 05 08 01 00 00 c4 43 05     C......C......C.
     4e6:	08 01 b8 fe b8 43 05 08 01 a4 d0 a4 43 05 08 01     .....C......C...
     4f6:	7b d4 92 43 05 02 01 b8 fe b8 43 05 02 01 00 00     {..C......C.....
     506:	dc 43 05 02 01 00 00 c4 43 05 08 01 b8 fe b8 43     .C......C......C
     516:	05 08 01 00 00 c4 43 05 08 01 00 00 dc 43 05 08     ......C......C..
     526:	01 a4 f0 f6 43 05 02 01 00 00 dc 43 05 04 01 00     ....C......C....
     536:	00 c4 43 05 08 01 b8 fe b8 43 05 08 01 00 00 c4     ..C......C......
     546:	43 05 02 01 b8 fe b8 43 05 08 01 00 00 c4 43 05     C......C......C.
     556:	08 01 b8 fe b8 43 05 08 01 a4 d0 a4 43 05 08 01     .....C......C...
     566:	7b d4 92 43 05 02 01                                {..C...

0000056d <mario_galaxy_notes>:
     56d:	71 9d ae 43 05 08 05 a4 d0 a4 43 05 08 01 00 00     q..C......C.....
     57d:	c4 43 05 08 01 71 9d ae 43 05 08 01 a4 d0 82 43     .C...q..C......C
     58d:	05 08 05 00 00 dc 43 04 08 01 7b 14 e9 43 04 08     ......C...{..C..
     59d:	01 a4 d0 82 43 05 08 01 a4 d0 82 43 05 08 03 7b     ....C......C...{
     5ad:	14 e9 43 04 08 05 00 00 00 00 00 01 01 00 00 c4     ..C.............
     5bd:	43 05 08 05 b8 fe b8 43 05 08 01 00 00 dc 43 05     C......C......C.
     5cd:	08 01 00 00 c4 43 05 08 01 71 9d ae 43 05 08 03     .....C...q..C...
     5dd:	a4 d0 a4 43 05 04 01 7b d4 92 43 05 04 01 a4 d0     ...C...{..C.....
     5ed:	a4 43 05 08 01 7b d4 92 43 05 08 03 a4 d0 82 43     .C...{..C......C
     5fd:	05 08 05 00 00 00 00 00 01 01 a4 d0 82 43 06 08     .............C..
     60d:	05 a4 f0 f6 43 05 08 01 7b d4 92 43 06 08 01 a4     ....C...{..C....
     61d:	d0 82 43 06 08 01 7b 14 e9 43 05 08 03 00 00 dc     ..C...{..C......
     62d:	43 05 08 05 7b 14 e9 43 05 08 05 00 00 dc 43 05     C...{..C......C.
     63d:	08 01 a4 d0 82 43 06 08 01 7b 14 e9 43 05 08 01     .....C...{..C...
     64d:	00 00 dc 43 05 08 03 00 00 c4 43 05 08 05 00 00     ...C......C.....
     65d:	dc 43 05 08 05 66 a6 cf 43 05 08 01 7b 14 e9 43     .C...f..C...{..C
     66d:	05 08 01 00 00 dc 43 05 08 01 00 00 c4 43 05 08     ......C......C..
     67d:	03 71 9d ae 43 05 08 02 00 00 dc 43 05 04 01 00     .q..C......C....
     68d:	00 c4 43 05 08 01 71 9d ae 43 05 08 03 a4 d0 a4     ..C...q..C......
     69d:	43 05 08 05 71 9d ae 43 05 08 03 00 00 c4 43 05     C...q..C......C.
     6ad:	08 05 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

00000718 <cantina_band_notes>:
     718:	00 00 dc 43 04 04 01 7b d4 92 43 05 04 01 00 00     ...C...{..C.....
     728:	dc 43 04 04 01 7b d4 92 43 05 04 01 00 00 dc 43     .C...{..C......C
     738:	04 04 01 7b d4 92 43 05 04 01 00 00 dc 43 04 08     ...{..C......C..
     748:	01 66 a6 cf 43 04 08 01 00 00 dc 43 04 04 01 00     .f..C......C....
     758:	00 dc 43 04 08 01 66 a6 cf 43 04 08 01 00 00 dc     ..C...f..C......
     768:	43 04 08 01 00 00 c4 43 04 08 01 00 00 00 00 00     C......C........
     778:	08 01 b8 fe b8 43 04 08 01 00 00 c4 43 04 08 01     .....C......C...
     788:	b8 fe b8 43 04 08 01 71 9d ae 43 04 02 01 7b d4     ...C...q..C...{.
     798:	92 43 04 04 01 00 00 00 00 00 04 01 00 00 dc 43     .C.............C
     7a8:	04 04 01 7b d4 92 43 05 04 01 00 00 dc 43 04 04     ...{..C......C..
     7b8:	01 7b d4 92 43 05 04 01 00 00 dc 43 04 04 01 7b     .{..C......C...{
     7c8:	d4 92 43 05 04 01 00 00 dc 43 04 08 01 66 a6 cf     ..C......C...f..
     7d8:	43 04 08 01 00 00 dc 43 04 04 01 00 00 c4 43 04     C......C......C.
     7e8:	04 01 00 00 c4 43 04 04 01 b8 fe b8 43 04 04 01     .....C......C...
     7f8:	00 00 c4 43 04 04 01 a4 d0 82 43 05 04 01 7b 14     ...C......C...{.
     808:	e9 43 04 04 01 00 00 dc 43 04 04 01 00 00 c4 43     .C......C......C
     818:	04 04 01 00 00 dc 43 04 04 01 7b d4 92 43 05 04     ......C...{..C..
     828:	01 00 00 dc 43 04 04 01 7b d4 92 43 05 04 01 00     ....C...{..C....
     838:	00 dc 43 04 04 01 7b d4 92 43 05 04 01 00 00 dc     ..C...{..C......
     848:	43 04 08 01 66 a6 cf 43 04 08 01 00 00 dc 43 04     C...f..C......C.
     858:	04 01 a4 d0 82 43 05 04 01 a4 d0 82 43 05 04 01     .....C......C...
     868:	00 00 dc 43 04 04 01 00 00 c4 43 04 04 01 71 9d     ...C......C...q.
     878:	ae 43 04 02 01 7b d4 92 43 04 02 01 7b d4 92 43     .C...{..C...{..C
     888:	04 02 01 71 9d ae 43 04 02 01 00 00 dc 43 04 02     ...q..C......C..
     898:	01 a4 d0 82 43 05 02 01 a4 90 9b 43 05 04 01 7b     ....C......C...{
     8a8:	d4 92 43 05 04 01 66 a6 cf 43 04 08 01 00 00 dc     ..C...f..C......
     8b8:	43 04 04 01 71 9d ae 43 04 08 01                    C...q..C...

000008c3 <horn_notes>:
     8c3:	00 00 dc 43 04 08 01 00 00 00 00 00 08 01 00 00     ...C............
     8d3:	dc 43 04 08 01                                      .C...

000008d8 <soviet_anthem_notes>:
     8d8:	a4 d0 82 43 05 04 03 00 00 00 00 00 08 01 00 00     ...C............
     8e8:	c4 43 04 08 01 a4 d0 82 43 05 04 01 00 00 c4 43     .C......C......C
     8f8:	04 10 03 00 00 dc 43 04 10 01 a4 f0 f6 43 04 04     ......C......C..
     908:	01 a4 d0 a4 43 04 08 01 a4 d0 a4 43 04 08 01 00     ....C......C....
     918:	00 dc 43 04 04 01 00 00 c4 43 04 10 03 71 9d ae     ..C......C...q..
     928:	43 04 10 01 00 00 c4 43 04 04 01 a4 d0 82 43 04     C......C......C.
     938:	08 01 a4 d0 82 43 04 08 01 7b d4 92 43 04 04 01     .....C...{..C...
     948:	7b d4 92 43 04 10 03 a4 d0 a4 43 04 10 01 71 9d     {..C......C...q.
     958:	ae 43 04 04 01 71 9d ae 43 04 10 03 00 00 c4 43     .C...q..C......C
     968:	04 10 01 00 00 dc 43 04 04 01 a4 f0 f6 43 04 08     ......C......C..
     978:	01 a4 d0 82 43 05 08 01 7b d4 92 43 05 08 03 00     ....C...{..C....
     988:	00 c4 43 04 08 01                                   ..C...

0000098e <imperial_march_notes>:
     98e:	00 00 c4 43 04 04 01 00 00 c4 43 04 04 01 00 00     ...C......C.....
     99e:	c4 43 04 04 01 a4 90 9b 43 04 10 03 7b 14 e9 43     .C......C...{..C
     9ae:	04 10 01 00 00 c4 43 04 04 01 a4 90 9b 43 04 10     ......C......C..
     9be:	03 7b 14 e9 43 04 10 01 00 00 c4 43 04 02 01 7b     .{..C......C...{
     9ce:	d4 92 43 05 04 01 7b d4 92 43 05 04 01 7b d4 92     ..C...{..C...{..
     9de:	43 05 04 01 a4 90 9b 43 05 10 03 7b 14 e9 43 04     C......C...{..C.
     9ee:	10 01 b8 fe b8 43 04 04 01 a4 90 9b 43 04 10 03     .....C......C...
     9fe:	7b 14 e9 43 04 10 01 00 00 c4 43 04 04 01           {..C......C...

00000a0c <halo_theme_notes>:
     a0c:	a4 d0 a4 43 04 02 01 00 00 c4 43 04 04 01 b8 fe     ...C......C.....
     a1c:	b8 43 04 04 01 00 00 dc 43 04 04 01 00 00 c4 43     .C......C......C
     a2c:	04 04 01 b8 fe b8 43 04 02 01 a4 d0 a4 43 04 01     ......C......C..
     a3c:	01 00 00 00 00 00 02 01 a4 f0 f6 43 04 04 01 0a     ...........C....
     a4c:	97 8a 43 05 04 01 7b d4 92 43 05 02 01 0a 97 8a     ..C...{..C......
     a5c:	43 05 04 01 00 00 dc 43 04 04 01 0a 97 8a 43 05     C......C......C.
     a6c:	04 01 a4 f0 f6 43 04 04 03 00 00 00 00 00 04 01     .....C..........
     a7c:	a4 f0 f6 43 03 04 01 7b d4 92 43 04 04 01 a4 d0     ...C...{..C.....
     a8c:	a4 43 04 04 01 00 00 c4 43 04 04 01 00 00 dc 43     .C......C......C
     a9c:	04 04 01 b8 fe b8 43 04 02 01 a4 d0 a4 43 04 04     ......C......C..
     aac:	01 00 00 c4 43 04 04 01 b8 fe b8 43 04 04 01 a4     ....C......C....
     abc:	d0 a4 43 04 04 01 b8 fe b8 43 04 04 01 7b d4 92     ..C......C...{..
     acc:	43 04 04 03 a4 d0 a4 43 04 02 01                    C......C...

00000ad7 <allstars_notes>:
     ad7:	b8 fe b8 43 04 04 01 0a 97 8a 43 05 08 01 7b 14     ...C......C...{.
     ae7:	e9 43 04 08 01 7b 14 e9 43 04 04 01 66 a6 cf 43     .C...{..C...f..C
     af7:	04 08 01 b8 fe b8 43 04 08 01 b8 fe b8 43 04 08     ......C......C..
     b07:	01 a4 f0 f6 43 04 04 01 7b 14 e9 43 04 08 01 7b     ....C...{..C...{
     b17:	14 e9 43 04 08 01 66 a6 cf 43 04 08 01 66 a6 cf     ..C...f..C...f..
     b27:	43 04 08 01 b8 fe b8 43 04 04 01 b8 fe b8 43 04     C......C......C.
     b37:	08 01                                               ..

00000b39 <mii_notes>:
     b39:	b8 fe b8 43 04 04 01 00 00 dc 43 04 08 01 0a 97     ...C......C.....
     b49:	8a 43 05 08 01 00 00 00 00 00 08 01 00 00 dc 43     .C.............C
     b59:	04 08 01 00 00 00 00 00 08 01 b8 fe b8 43 04 08     .............C..
     b69:	01 7b d4 92 43 04 20 03 00 00 00 00 00 20 01 7b     .{..C. ...... .{
     b79:	d4 92 43 04 20 03 00 00 00 00 00 20 01 7b d4 92     ..C. ...... .{..
     b89:	43 04 20 03 00 00 00 00 00 20 01 00 00 00 00 00     C. ...... ......
     b99:	08 01 00 00 00 00 00 08 01 00 00 00 00 00 04 01     ................
     ba9:	00 00 00 00 00 08 01 0a 97 8a 43 04 08 01 7b d4     ..........C...{.
     bb9:	92 43 04 08 01 b8 fe b8 43 04 08 01 00 00 dc 43     .C......C......C
     bc9:	04 08 01 0a 97 8a 43 05 08 01 00 00 00 00 00 08     ......C.........
     bd9:	01 00 00 dc 43 04 08 01 00 00 00 00 00 08 01 b8     ....C...........
     be9:	fe b8 43 04 08 01 a4 d0 a4 43 05 08 03 a4 90 9b     ..C......C......
     bf9:	43 05 08 01 7b d4 92 43 05 04 01                    C...{..C...

00000c04 <mario_notes>:
     c04:	a4 d0 a4 43 05 08 01 a4 d0 a4 43 05 08 01 00 00     ...C......C.....
     c14:	00 00 00 08 01 a4 d0 a4 43 05 08 01 00 00 00 00     ........C.......
     c24:	00 08 01 a4 d0 82 43 05 08 01 a4 d0 a4 43 05 08     ......C......C..
     c34:	01 00 00 00 00 00 08 01 00 00 c4 43 05 08 01 00     ...........C....
     c44:	00 00 00 00 04 01 00 00 00 00 00 08 01 00 00 c4     ................
     c54:	43 04 08 01                                         C...

00000c58 <__ctors_end>:
     c58:	11 24       	eor	r1, r1
     c5a:	1f be       	out	0x3f, r1	; 63
     c5c:	cf ef       	ldi	r28, 0xFF	; 255
     c5e:	d8 e0       	ldi	r29, 0x08	; 8
     c60:	de bf       	out	0x3e, r29	; 62
     c62:	cd bf       	out	0x3d, r28	; 61

00000c64 <__do_copy_data>:
     c64:	11 e0       	ldi	r17, 0x01	; 1
     c66:	a0 e0       	ldi	r26, 0x00	; 0
     c68:	b1 e0       	ldi	r27, 0x01	; 1
     c6a:	ec e2       	ldi	r30, 0x2C	; 44
     c6c:	f9 e2       	ldi	r31, 0x29	; 41
     c6e:	02 c0       	rjmp	.+4      	; 0xc74 <__do_copy_data+0x10>
     c70:	05 90       	lpm	r0, Z+
     c72:	0d 92       	st	X+, r0
     c74:	ac 35       	cpi	r26, 0x5C	; 92
     c76:	b1 07       	cpc	r27, r17
     c78:	d9 f7       	brne	.-10     	; 0xc70 <__do_copy_data+0xc>

00000c7a <__do_clear_bss>:
     c7a:	27 e0       	ldi	r18, 0x07	; 7
     c7c:	ac e5       	ldi	r26, 0x5C	; 92
     c7e:	b1 e0       	ldi	r27, 0x01	; 1
     c80:	01 c0       	rjmp	.+2      	; 0xc84 <.do_clear_bss_start>

00000c82 <.do_clear_bss_loop>:
     c82:	1d 92       	st	X+, r1

00000c84 <.do_clear_bss_start>:
     c84:	aa 3e       	cpi	r26, 0xEA	; 234
     c86:	b2 07       	cpc	r27, r18
     c88:	e1 f7       	brne	.-8      	; 0xc82 <.do_clear_bss_loop>
     c8a:	0e 94 a3 07 	call	0xf46	; 0xf46 <main>
     c8e:	0c 94 94 14 	jmp	0x2928	; 0x2928 <_exit>

00000c92 <__bad_interrupt>:
     c92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000c96 <portextender_read>:

/*
 * Reads from portextender.
 */
uint8_t portextender_read()
{
     c96:	cf 93       	push	r28
	i2c_start_wait(0x70 + I2C_READ);
     c98:	81 e7       	ldi	r24, 0x71	; 113
     c9a:	0e 94 f5 06 	call	0xdea	; 0xdea <i2c_start_wait>
	uint8_t data = i2c_readNak();
     c9e:	0e 94 41 07 	call	0xe82	; 0xe82 <i2c_readNak>
     ca2:	c8 2f       	mov	r28, r24
	i2c_stop();
     ca4:	0e 94 1e 07 	call	0xe3c	; 0xe3c <i2c_stop>
	return data;
}
     ca8:	8c 2f       	mov	r24, r28
     caa:	cf 91       	pop	r28
     cac:	08 95       	ret

00000cae <portextender_write>:
/*
 * Writes set data to the portextender.
 */
void portextender_write()
{
	if (portextender_new_data == true)
     cae:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <__data_end>
     cb2:	88 23       	and	r24, r24
     cb4:	59 f0       	breq	.+22     	; 0xccc <portextender_write+0x1e>
	{
		i2c_start_wait(0x70 + I2C_WRITE);
     cb6:	80 e7       	ldi	r24, 0x70	; 112
     cb8:	0e 94 f5 06 	call	0xdea	; 0xdea <i2c_start_wait>
		i2c_write(portextender_data);
     cbc:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <portextender_data>
     cc0:	0e 94 26 07 	call	0xe4c	; 0xe4c <i2c_write>
		i2c_stop();
     cc4:	0e 94 1e 07 	call	0xe3c	; 0xe3c <i2c_stop>
		portextender_new_data = false;
     cc8:	10 92 5c 01 	sts	0x015C, r1	; 0x80015c <__data_end>
     ccc:	08 95       	ret

00000cce <portextender_port_in>:
/*
 * Set a port as input port in write data.
 */
void portextender_port_in(uint8_t port)
{
	portextender_data = portextender_data | (1<<port);
     cce:	21 e0       	ldi	r18, 0x01	; 1
     cd0:	30 e0       	ldi	r19, 0x00	; 0
     cd2:	01 c0       	rjmp	.+2      	; 0xcd6 <portextender_port_in+0x8>
     cd4:	22 0f       	add	r18, r18
     cd6:	8a 95       	dec	r24
     cd8:	ea f7       	brpl	.-6      	; 0xcd4 <portextender_port_in+0x6>
     cda:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <portextender_data>
     cde:	28 2b       	or	r18, r24
     ce0:	20 93 5e 01 	sts	0x015E, r18	; 0x80015e <portextender_data>
	portextender_new_data = true;
     ce4:	81 e0       	ldi	r24, 0x01	; 1
     ce6:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <__data_end>
     cea:	08 95       	ret

00000cec <portextender_port_out>:
/*
 * Set a port as output port in write data.
 */
void portextender_port_out(uint8_t port)
{
	portextender_data = portextender_data & ~(1<<port);
     cec:	21 e0       	ldi	r18, 0x01	; 1
     cee:	30 e0       	ldi	r19, 0x00	; 0
     cf0:	01 c0       	rjmp	.+2      	; 0xcf4 <portextender_port_out+0x8>
     cf2:	22 0f       	add	r18, r18
     cf4:	8a 95       	dec	r24
     cf6:	ea f7       	brpl	.-6      	; 0xcf2 <portextender_port_out+0x6>
     cf8:	20 95       	com	r18
     cfa:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <portextender_data>
     cfe:	28 23       	and	r18, r24
     d00:	20 93 5e 01 	sts	0x015E, r18	; 0x80015e <portextender_data>
	portextender_new_data = true;
     d04:	81 e0       	ldi	r24, 0x01	; 1
     d06:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <__data_end>
     d0a:	08 95       	ret

00000d0c <portextender_set_data>:
/*
 * Sets the full byte of write data.
 */
void portextender_set_data(uint8_t data)
{
	portextender_data = data;
     d0c:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <portextender_data>
	portextender_new_data = true;
     d10:	81 e0       	ldi	r24, 0x01	; 1
     d12:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <__data_end>
     d16:	08 95       	ret

00000d18 <srf02_trigger>:
 */
uint16_t srf02_get_distance(uint8_t srf02)
{
	srf02_trigger(srf02);
	_delay_ms(70);
	return srf02_read(srf02);
     d18:	0e 94 f5 06 	call	0xdea	; 0xdea <i2c_start_wait>
     d1c:	80 e0       	ldi	r24, 0x00	; 0
     d1e:	0e 94 26 07 	call	0xe4c	; 0xe4c <i2c_write>
     d22:	81 e5       	ldi	r24, 0x51	; 81
     d24:	0e 94 26 07 	call	0xe4c	; 0xe4c <i2c_write>
     d28:	0c 94 1e 07 	jmp	0xe3c	; 0xe3c <i2c_stop>

00000d2c <srf02_read>:
     d2c:	cf 93       	push	r28
     d2e:	df 93       	push	r29
     d30:	c8 2f       	mov	r28, r24
     d32:	0e 94 f5 06 	call	0xdea	; 0xdea <i2c_start_wait>
     d36:	82 e0       	ldi	r24, 0x02	; 2
     d38:	0e 94 26 07 	call	0xe4c	; 0xe4c <i2c_write>
     d3c:	81 e0       	ldi	r24, 0x01	; 1
     d3e:	8c 0f       	add	r24, r28
     d40:	0e 94 1c 07 	call	0xe38	; 0xe38 <i2c_rep_start>
     d44:	0e 94 37 07 	call	0xe6e	; 0xe6e <i2c_readAck>
     d48:	c8 2f       	mov	r28, r24
     d4a:	d0 e0       	ldi	r29, 0x00	; 0
     d4c:	dc 2f       	mov	r29, r28
     d4e:	cc 27       	eor	r28, r28
     d50:	0e 94 41 07 	call	0xe82	; 0xe82 <i2c_readNak>
     d54:	c8 2b       	or	r28, r24
     d56:	0e 94 1e 07 	call	0xe3c	; 0xe3c <i2c_stop>
     d5a:	ce 01       	movw	r24, r28
     d5c:	df 91       	pop	r29
     d5e:	cf 91       	pop	r28
     d60:	08 95       	ret

00000d62 <srf02_timer_tick>:
/*
 * Counts down a timer. Should run on a 1kHz timer.
 */
void srf02_timer_tick()
{
	if (srf02_timer > 0)
     d62:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <srf02_timer>
     d66:	90 91 60 01 	lds	r25, 0x0160	; 0x800160 <srf02_timer+0x1>
     d6a:	00 97       	sbiw	r24, 0x00	; 0
     d6c:	29 f0       	breq	.+10     	; 0xd78 <srf02_timer_tick+0x16>
	{
		srf02_timer--;
     d6e:	01 97       	sbiw	r24, 0x01	; 1
     d70:	90 93 60 01 	sts	0x0160, r25	; 0x800160 <srf02_timer+0x1>
     d74:	80 93 5f 01 	sts	0x015F, r24	; 0x80015f <srf02_timer>
     d78:	08 95       	ret

00000d7a <srf02_timer_alarm>:
/*
 * Returns if the timer reached 0.
 */
bool srf02_timer_alarm()
{
	return (srf02_timer == 0);
     d7a:	81 e0       	ldi	r24, 0x01	; 1
     d7c:	20 91 5f 01 	lds	r18, 0x015F	; 0x80015f <srf02_timer>
     d80:	30 91 60 01 	lds	r19, 0x0160	; 0x800160 <srf02_timer+0x1>
     d84:	23 2b       	or	r18, r19
     d86:	09 f0       	breq	.+2      	; 0xd8a <srf02_timer_alarm+0x10>
     d88:	80 e0       	ldi	r24, 0x00	; 0
}
     d8a:	08 95       	ret

00000d8c <srf02_timer_reset>:
/*
 * Resets timer to 70ms.
 */
void srf02_timer_reset()
{
	srf02_timer = 70;
     d8c:	86 e4       	ldi	r24, 0x46	; 70
     d8e:	90 e0       	ldi	r25, 0x00	; 0
     d90:	90 93 60 01 	sts	0x0160, r25	; 0x800160 <srf02_timer+0x1>
     d94:	80 93 5f 01 	sts	0x015F, r24	; 0x80015f <srf02_timer>
     d98:	08 95       	ret

00000d9a <i2c_init>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
  TWSR = 0;                         /* no prescaler */
     d9a:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
     d9e:	80 e2       	ldi	r24, 0x20	; 32
     da0:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
     da4:	08 95       	ret

00000da6 <i2c_start>:
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     da6:	94 ea       	ldi	r25, 0xA4	; 164
     da8:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
     dac:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     db0:	97 ff       	sbrs	r25, 7
     db2:	fc cf       	rjmp	.-8      	; 0xdac <i2c_start+0x6>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
     db4:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     db8:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
     dba:	98 30       	cpi	r25, 0x08	; 8
     dbc:	21 f0       	breq	.+8      	; 0xdc6 <i2c_start+0x20>
     dbe:	90 31       	cpi	r25, 0x10	; 16
     dc0:	11 f0       	breq	.+4      	; 0xdc6 <i2c_start+0x20>
     dc2:	81 e0       	ldi	r24, 0x01	; 1
     dc4:	08 95       	ret

	// send device address
	TWDR = address;
     dc6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
     dca:	84 e8       	ldi	r24, 0x84	; 132
     dcc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
     dd0:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     dd4:	87 ff       	sbrs	r24, 7
     dd6:	fc cf       	rjmp	.-8      	; 0xdd0 <i2c_start+0x2a>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
     dd8:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     ddc:	88 7f       	andi	r24, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
     dde:	88 31       	cpi	r24, 0x18	; 24
     de0:	11 f0       	breq	.+4      	; 0xde6 <i2c_start+0x40>
     de2:	80 34       	cpi	r24, 0x40	; 64
     de4:	71 f7       	brne	.-36     	; 0xdc2 <i2c_start+0x1c>

	return 0;
     de6:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_start */
     de8:	08 95       	ret

00000dea <i2c_start_wait>:


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     dea:	24 ea       	ldi	r18, 0xA4	; 164
    	twst = TW_STATUS & 0xF8;
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    
    	// send device address
    	TWDR = address;
    	TWCR = (1<<TWINT) | (1<<TWEN);
     dec:	34 e8       	ldi	r19, 0x84	; 132
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     dee:	44 e9       	ldi	r20, 0x94	; 148


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     df0:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
     df4:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     df8:	97 ff       	sbrs	r25, 7
     dfa:	fc cf       	rjmp	.-8      	; 0xdf4 <i2c_start_wait+0xa>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
     dfc:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     e00:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
     e02:	98 30       	cpi	r25, 0x08	; 8
     e04:	11 f0       	breq	.+4      	; 0xe0a <i2c_start_wait+0x20>
     e06:	90 31       	cpi	r25, 0x10	; 16
     e08:	99 f7       	brne	.-26     	; 0xdf0 <i2c_start_wait+0x6>
    
    	// send device address
    	TWDR = address;
     e0a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    	TWCR = (1<<TWINT) | (1<<TWEN);
     e0e:	30 93 bc 00 	sts	0x00BC, r19	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    
    	// wail until transmission completed
    	while(!(TWCR & (1<<TWINT)));
     e12:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     e16:	97 ff       	sbrs	r25, 7
     e18:	fc cf       	rjmp	.-8      	; 0xe12 <i2c_start_wait+0x28>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
     e1a:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     e1e:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
     e20:	90 32       	cpi	r25, 0x20	; 32
     e22:	11 f0       	breq	.+4      	; 0xe28 <i2c_start_wait+0x3e>
     e24:	98 35       	cpi	r25, 0x58	; 88
     e26:	39 f4       	brne	.+14     	; 0xe36 <i2c_start_wait+0x4c>
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     e28:	40 93 bc 00 	sts	0x00BC, r20	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	        
	        // wait until stop condition is executed and bus released
	        while(TWCR & (1<<TWSTO));
     e2c:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     e30:	94 fd       	sbrc	r25, 4
     e32:	fc cf       	rjmp	.-8      	; 0xe2c <i2c_start_wait+0x42>
     e34:	dd cf       	rjmp	.-70     	; 0xdf0 <i2c_start_wait+0x6>
     e36:	08 95       	ret

00000e38 <i2c_rep_start>:
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );
     e38:	0c 94 d3 06 	jmp	0xda6	; 0xda6 <i2c_start>

00000e3c <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     e3c:	84 e9       	ldi	r24, 0x94	; 148
     e3e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
     e42:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     e46:	84 fd       	sbrc	r24, 4
     e48:	fc cf       	rjmp	.-8      	; 0xe42 <i2c_stop+0x6>

}/* i2c_stop */
     e4a:	08 95       	ret

00000e4c <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
     e4c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
     e50:	84 e8       	ldi	r24, 0x84	; 132
     e52:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
     e56:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     e5a:	87 ff       	sbrs	r24, 7
     e5c:	fc cf       	rjmp	.-8      	; 0xe56 <i2c_write+0xa>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
     e5e:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     e62:	98 7f       	andi	r25, 0xF8	; 248
     e64:	81 e0       	ldi	r24, 0x01	; 1
     e66:	98 32       	cpi	r25, 0x28	; 40
     e68:	09 f4       	brne	.+2      	; 0xe6c <i2c_write+0x20>
     e6a:	80 e0       	ldi	r24, 0x00	; 0
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
     e6c:	08 95       	ret

00000e6e <i2c_readAck>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
     e6e:	84 ec       	ldi	r24, 0xC4	; 196
     e70:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(!(TWCR & (1<<TWINT)));    
     e74:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     e78:	87 ff       	sbrs	r24, 7
     e7a:	fc cf       	rjmp	.-8      	; 0xe74 <i2c_readAck+0x6>

    return TWDR;
     e7c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>

}/* i2c_readAck */
     e80:	08 95       	ret

00000e82 <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
     e82:	84 e8       	ldi	r24, 0x84	; 132
     e84:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(!(TWCR & (1<<TWINT)));
     e88:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     e8c:	87 ff       	sbrs	r24, 7
     e8e:	fc cf       	rjmp	.-8      	; 0xe88 <i2c_readNak+0x6>
	
    return TWDR;
     e90:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>

}/* i2c_readNak */
     e94:	08 95       	ret

00000e96 <ledstrip_init>:

/*
 * Sets a initiali color on the ledstip.
 */
void ledstrip_init()
{
     e96:	cf 93       	push	r28
     e98:	df 93       	push	r29
     e9a:	cd b7       	in	r28, 0x3d	; 61
     e9c:	de b7       	in	r29, 0x3e	; 62
     e9e:	e9 97       	sbiw	r28, 0x39	; 57
     ea0:	0f b6       	in	r0, 0x3f	; 63
     ea2:	f8 94       	cli
     ea4:	de bf       	out	0x3e, r29	; 62
     ea6:	0f be       	out	0x3f, r0	; 63
     ea8:	cd bf       	out	0x3d, r28	; 61
	struct cRGB leds[NUM_LEDS];
	
	leds[0].b = 0;
     eaa:	1b 82       	std	Y+3, r1	; 0x03
	leds[0].g = 0;
     eac:	19 82       	std	Y+1, r1	; 0x01
	leds[0].r = 255;
     eae:	8f ef       	ldi	r24, 0xFF	; 255
     eb0:	8a 83       	std	Y+2, r24	; 0x02
	leds[1].b = 0;
     eb2:	1e 82       	std	Y+6, r1	; 0x06
	leds[1].g = 255;
     eb4:	8c 83       	std	Y+4, r24	; 0x04
	leds[1].r = 255;
     eb6:	8d 83       	std	Y+5, r24	; 0x05
	leds[2].b = 0;
     eb8:	19 86       	std	Y+9, r1	; 0x09
	leds[2].g = 255;
     eba:	8f 83       	std	Y+7, r24	; 0x07
	leds[2].r = 255;
     ebc:	88 87       	std	Y+8, r24	; 0x08
	leds[3].b = 0;
     ebe:	1c 86       	std	Y+12, r1	; 0x0c
	leds[3].g = 0;
     ec0:	1a 86       	std	Y+10, r1	; 0x0a
	leds[3].r = 255;
     ec2:	8b 87       	std	Y+11, r24	; 0x0b
	leds[4].b = 0;
     ec4:	1f 86       	std	Y+15, r1	; 0x0f
	leds[4].g = 0;
     ec6:	1d 86       	std	Y+13, r1	; 0x0d
	leds[4].r = 255;
     ec8:	8e 87       	std	Y+14, r24	; 0x0e
	leds[5].b = 0;
     eca:	1a 8a       	std	Y+18, r1	; 0x12
	leds[5].g = 255;
     ecc:	88 8b       	std	Y+16, r24	; 0x10
	leds[5].r = 255;
     ece:	89 8b       	std	Y+17, r24	; 0x11
	leds[6].b = 0;
     ed0:	1d 8a       	std	Y+21, r1	; 0x15
	leds[6].g = 255;
     ed2:	8b 8b       	std	Y+19, r24	; 0x13
	leds[6].r = 255;
     ed4:	8c 8b       	std	Y+20, r24	; 0x14
	leds[7].b = 0;
     ed6:	18 8e       	std	Y+24, r1	; 0x18
	leds[7].g = 0;
     ed8:	1e 8a       	std	Y+22, r1	; 0x16
	leds[7].r = 255;
     eda:	8f 8b       	std	Y+23, r24	; 0x17
     edc:	fe 01       	movw	r30, r28
     ede:	31 96       	adiw	r30, 0x01	; 1
	for (int i = 8; i < NUM_LEDS; i++)
     ee0:	28 e0       	ldi	r18, 0x08	; 8
     ee2:	30 e0       	ldi	r19, 0x00	; 0
     ee4:	cf 01       	movw	r24, r30
			leds[i].g = 255;
			leds[i].r = 255;
		}
		else
		{
			leds[i].b = 255;
     ee6:	4f ef       	ldi	r20, 0xFF	; 255
	leds[7].b = 0;
	leds[7].g = 0;
	leds[7].r = 255;
	for (int i = 8; i < NUM_LEDS; i++)
	{
		if (i % 2 == 1)
     ee8:	20 ff       	sbrs	r18, 0
     eea:	04 c0       	rjmp	.+8      	; 0xef4 <ledstrip_init+0x5e>
		{
			leds[i].b = 0;
     eec:	12 8e       	std	Z+26, r1	; 0x1a
			leds[i].g = 255;
     eee:	40 8f       	std	Z+24, r20	; 0x18
			leds[i].r = 255;
     ef0:	41 8f       	std	Z+25, r20	; 0x19
     ef2:	03 c0       	rjmp	.+6      	; 0xefa <ledstrip_init+0x64>
		}
		else
		{
			leds[i].b = 255;
     ef4:	42 8f       	std	Z+26, r20	; 0x1a
			leds[i].g = 0;
     ef6:	10 8e       	std	Z+24, r1	; 0x18
			leds[i].r = 0;
     ef8:	11 8e       	std	Z+25, r1	; 0x19
	leds[6].g = 255;
	leds[6].r = 255;
	leds[7].b = 0;
	leds[7].g = 0;
	leds[7].r = 255;
	for (int i = 8; i < NUM_LEDS; i++)
     efa:	2f 5f       	subi	r18, 0xFF	; 255
     efc:	3f 4f       	sbci	r19, 0xFF	; 255
     efe:	33 96       	adiw	r30, 0x03	; 3
     f00:	23 31       	cpi	r18, 0x13	; 19
     f02:	31 05       	cpc	r19, r1
     f04:	89 f7       	brne	.-30     	; 0xee8 <ledstrip_init+0x52>
			leds[i].b = 255;
			leds[i].g = 0;
			leds[i].r = 0;
		}
	}
	ws2812_setleds(leds, NUM_LEDS);
     f06:	63 e1       	ldi	r22, 0x13	; 19
     f08:	70 e0       	ldi	r23, 0x00	; 0
     f0a:	0e 94 b0 0e 	call	0x1d60	; 0x1d60 <ws2812_setleds>
}
     f0e:	e9 96       	adiw	r28, 0x39	; 57
     f10:	0f b6       	in	r0, 0x3f	; 63
     f12:	f8 94       	cli
     f14:	de bf       	out	0x3e, r29	; 62
     f16:	0f be       	out	0x3f, r0	; 63
     f18:	cd bf       	out	0x3d, r28	; 61
     f1a:	df 91       	pop	r29
     f1c:	cf 91       	pop	r28
     f1e:	08 95       	ret

00000f20 <timer_init>:
/*
 * Initializes a 1kHz CTC timer.
 */
void timer_init()
{
	OCR2A = 125;
     f20:	8d e7       	ldi	r24, 0x7D	; 125
     f22:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
	TCCR2A |= (1<<WGM21);
     f26:	e0 eb       	ldi	r30, 0xB0	; 176
     f28:	f0 e0       	ldi	r31, 0x00	; 0
     f2a:	80 81       	ld	r24, Z
     f2c:	82 60       	ori	r24, 0x02	; 2
     f2e:	80 83       	st	Z, r24
	TCCR2B |= (1<<CS22);
     f30:	e1 eb       	ldi	r30, 0xB1	; 177
     f32:	f0 e0       	ldi	r31, 0x00	; 0
     f34:	80 81       	ld	r24, Z
     f36:	84 60       	ori	r24, 0x04	; 4
     f38:	80 83       	st	Z, r24
	TIMSK2 |= (1<<OCIE2A);
     f3a:	e0 e7       	ldi	r30, 0x70	; 112
     f3c:	f0 e0       	ldi	r31, 0x00	; 0
     f3e:	80 81       	ld	r24, Z
     f40:	82 60       	ori	r24, 0x02	; 2
     f42:	80 83       	st	Z, r24
     f44:	08 95       	ret

00000f46 <main>:
 * Bit 2: No hearbeat
 */
volatile uint8_t control;

int main(void)
{
     f46:	cf 93       	push	r28
     f48:	df 93       	push	r29
     f4a:	cd b7       	in	r28, 0x3d	; 61
     f4c:	de b7       	in	r29, 0x3e	; 62
     f4e:	61 97       	sbiw	r28, 0x11	; 17
     f50:	0f b6       	in	r0, 0x3f	; 63
     f52:	f8 94       	cli
     f54:	de bf       	out	0x3e, r29	; 62
     f56:	0f be       	out	0x3f, r0	; 63
     f58:	cd bf       	out	0x3d, r28	; 61
	heartbeat_timer = 0;
     f5a:	10 92 93 01 	sts	0x0193, r1	; 0x800193 <heartbeat_timer+0x1>
     f5e:	10 92 92 01 	sts	0x0192, r1	; 0x800192 <heartbeat_timer>
	sensor_timer = 0;
     f62:	10 92 95 01 	sts	0x0195, r1	; 0x800195 <sensor_timer+0x1>
     f66:	10 92 94 01 	sts	0x0194, r1	; 0x800194 <sensor_timer>
	control = 0;
     f6a:	10 92 61 01 	sts	0x0161, r1	; 0x800161 <control>
	control |= DEADMAN_STOP;
     f6e:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <control>
     f72:	82 60       	ori	r24, 0x02	; 2
     f74:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <control>
	stdout = &mystdout;
     f78:	80 e0       	ldi	r24, 0x00	; 0
     f7a:	91 e0       	ldi	r25, 0x01	; 1
     f7c:	90 93 e7 07 	sts	0x07E7, r25	; 0x8007e7 <__iob+0x3>
     f80:	80 93 e6 07 	sts	0x07E6, r24	; 0x8007e6 <__iob+0x2>
	display_port_init();
     f84:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <display_port_init>
	spi_master_init();
     f88:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <spi_master_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     f8c:	2f ef       	ldi	r18, 0xFF	; 255
     f8e:	84 e3       	ldi	r24, 0x34	; 52
     f90:	9c e0       	ldi	r25, 0x0C	; 12
     f92:	21 50       	subi	r18, 0x01	; 1
     f94:	80 40       	sbci	r24, 0x00	; 0
     f96:	90 40       	sbci	r25, 0x00	; 0
     f98:	e1 f7       	brne	.-8      	; 0xf92 <main+0x4c>
     f9a:	00 c0       	rjmp	.+0      	; 0xf9c <main+0x56>
     f9c:	00 00       	nop
	_delay_ms(500);
	display_init();
     f9e:	0e 94 b3 0d 	call	0x1b66	; 0x1b66 <display_init>
	uart_init();
     fa2:	0e 94 76 0e 	call	0x1cec	; 0x1cec <uart_init>
	motors_init();
     fa6:	0e 94 16 0b 	call	0x162c	; 0x162c <motors_init>
	piezo_init();
     faa:	0e 94 41 0c 	call	0x1882	; 0x1882 <piezo_init>
	i2c_init();
     fae:	0e 94 cd 06 	call	0xd9a	; 0xd9a <i2c_init>
	timer_init();
     fb2:	0e 94 90 07 	call	0xf20	; 0xf20 <timer_init>
	portextender_set_data(0xff);
     fb6:	8f ef       	ldi	r24, 0xFF	; 255
     fb8:	0e 94 86 06 	call	0xd0c	; 0xd0c <portextender_set_data>
	drive_register_init();
     fbc:	0e 94 1c 0a 	call	0x1438	; 0x1438 <drive_register_init>
	RED_LED_PORT &=~ RED_LED;
     fc0:	40 98       	cbi	0x08, 0	; 8
	RED_LED_DDR |= RED_LED;
     fc2:	38 9a       	sbi	0x07, 0	; 7
	ledstrip_init();
     fc4:	0e 94 4b 07 	call	0xe96	; 0xe96 <ledstrip_init>
	sei();
     fc8:	78 94       	sei
	char msg[17] = "11";
     fca:	83 e0       	ldi	r24, 0x03	; 3
     fcc:	ee e0       	ldi	r30, 0x0E	; 14
     fce:	f1 e0       	ldi	r31, 0x01	; 1
     fd0:	8e 01       	movw	r16, r28
     fd2:	0f 5f       	subi	r16, 0xFF	; 255
     fd4:	1f 4f       	sbci	r17, 0xFF	; 255
     fd6:	d8 01       	movw	r26, r16
     fd8:	01 90       	ld	r0, Z+
     fda:	0d 92       	st	X+, r0
     fdc:	8a 95       	dec	r24
     fde:	e1 f7       	brne	.-8      	; 0xfd8 <main+0x92>
     fe0:	fe 01       	movw	r30, r28
     fe2:	34 96       	adiw	r30, 0x04	; 4
     fe4:	8e e0       	ldi	r24, 0x0E	; 14
     fe6:	df 01       	movw	r26, r30
     fe8:	1d 92       	st	X+, r1
     fea:	8a 95       	dec	r24
     fec:	e9 f7       	brne	.-6      	; 0xfe8 <main+0xa2>
	uint8_t len = 0;
	uint16_t distance_front = 0;
	uint16_t distance_back = 0;
	srf02_trigger(SRF_FRONT);
     fee:	80 ee       	ldi	r24, 0xE0	; 224
     ff0:	0e 94 8c 06 	call	0xd18	; 0xd18 <srf02_trigger>
	srf02_trigger(SRF_BACK);
     ff4:	8a ee       	ldi	r24, 0xEA	; 234
     ff6:	0e 94 8c 06 	call	0xd18	; 0xd18 <srf02_trigger>
	srf02_timer_reset();
     ffa:	0e 94 c6 06 	call	0xd8c	; 0xd8c <srf02_timer_reset>
	ledstrip_init();
	sei();
	char msg[17] = "11";
	uint8_t len = 0;
	uint16_t distance_front = 0;
	uint16_t distance_back = 0;
     ffe:	c1 2c       	mov	r12, r1
    1000:	d1 2c       	mov	r13, r1
	RED_LED_DDR |= RED_LED;
	ledstrip_init();
	sei();
	char msg[17] = "11";
	uint8_t len = 0;
	uint16_t distance_front = 0;
    1002:	e1 2c       	mov	r14, r1
    1004:	f1 2c       	mov	r15, r1
		
		//Send sensor data every quarter second.
		if (sensor_timer == 0)
		{
			for(uint8_t i = 2; i < 6; i++){
				msg[i] = ((portextender_data & (1<<i)) > 0)+'0';
    1006:	aa 24       	eor	r10, r10
    1008:	a3 94       	inc	r10
    100a:	b1 2c       	mov	r11, r1
			}
			msg[6] = ' ';
    100c:	90 e2       	ldi	r25, 0x20	; 32
    100e:	79 2e       	mov	r7, r25
			msg[++len] = '\0';
			itoa(distance_back, msg+len, 10);
			len = strlen(msg);
			msg[len] = '\0';
			uart_send_line(msg);
			sensor_timer = 250;
    1010:	2a ef       	ldi	r18, 0xFA	; 250
    1012:	82 2e       	mov	r8, r18
    1014:	91 2c       	mov	r9, r1
	srf02_trigger(SRF_BACK);
	srf02_timer_reset();
    while (1) 
    {
	    //Write set data to portextender
	    portextender_write();
    1016:	0e 94 57 06 	call	0xcae	; 0xcae <portextender_write>
		
	    //Every 70ms recieve data from the range sensor and send another sound wave.
		if (srf02_timer_alarm() == true)
    101a:	0e 94 bd 06 	call	0xd7a	; 0xd7a <srf02_timer_alarm>
    101e:	88 23       	and	r24, r24
    1020:	81 f0       	breq	.+32     	; 0x1042 <main+0xfc>
		{
			distance_front = srf02_read(SRF_FRONT);
    1022:	80 ee       	ldi	r24, 0xE0	; 224
    1024:	0e 94 96 06 	call	0xd2c	; 0xd2c <srf02_read>
    1028:	7c 01       	movw	r14, r24
			distance_back = srf02_read(SRF_BACK);
    102a:	8a ee       	ldi	r24, 0xEA	; 234
    102c:	0e 94 96 06 	call	0xd2c	; 0xd2c <srf02_read>
    1030:	6c 01       	movw	r12, r24
			srf02_trigger(SRF_FRONT);
    1032:	80 ee       	ldi	r24, 0xE0	; 224
    1034:	0e 94 8c 06 	call	0xd18	; 0xd18 <srf02_trigger>
			srf02_trigger(SRF_BACK);
    1038:	8a ee       	ldi	r24, 0xEA	; 234
    103a:	0e 94 8c 06 	call	0xd18	; 0xd18 <srf02_trigger>
			srf02_timer_reset();
    103e:	0e 94 c6 06 	call	0xd8c	; 0xd8c <srf02_timer_reset>
		}
		
		//Set if vehicle is close to the wall infront it or not
		if (distance_front <= (15 + 12) && distance_front > 0) //Sensor is about 11.5?12 cm from edge, if 0 sensor did not detect anything
    1042:	c7 01       	movw	r24, r14
    1044:	01 97       	sbiw	r24, 0x01	; 1
    1046:	4b 97       	sbiw	r24, 0x1b	; 27
    1048:	10 f4       	brcc	.+4      	; 0x104e <main+0x108>
		{
			motor_forward_set_lock(true);
    104a:	81 e0       	ldi	r24, 0x01	; 1
    104c:	01 c0       	rjmp	.+2      	; 0x1050 <main+0x10a>
		}
		else
		{
			motor_forward_set_lock(false);
    104e:	80 e0       	ldi	r24, 0x00	; 0
    1050:	0e 94 11 0c 	call	0x1822	; 0x1822 <motor_forward_set_lock>
		}
		
		//Set if vehicle is close to the wall behind it or not
		if (distance_back <= (15 + 12) && distance_back > 0) //Sensor is about 11.5?12 cm from edge, if 0 sensor did not detect anything
    1054:	c6 01       	movw	r24, r12
    1056:	01 97       	sbiw	r24, 0x01	; 1
    1058:	4b 97       	sbiw	r24, 0x1b	; 27
    105a:	10 f4       	brcc	.+4      	; 0x1060 <main+0x11a>
		{
			motor_backward_set_lock(true);
    105c:	81 e0       	ldi	r24, 0x01	; 1
    105e:	01 c0       	rjmp	.+2      	; 0x1062 <main+0x11c>
		}
		else
		{
			motor_backward_set_lock(false);
    1060:	80 e0       	ldi	r24, 0x00	; 0
    1062:	0e 94 21 0c 	call	0x1842	; 0x1842 <motor_backward_set_lock>
		}
		
		uint8_t portextender_data = portextender_read();
    1066:	0e 94 4b 06 	call	0xc96	; 0xc96 <portextender_read>
		
		//Send sensor data every quarter second.
		if (sensor_timer == 0)
    106a:	20 91 94 01 	lds	r18, 0x0194	; 0x800194 <sensor_timer>
    106e:	30 91 95 01 	lds	r19, 0x0195	; 0x800195 <sensor_timer+0x1>
    1072:	23 2b       	or	r18, r19
    1074:	09 f0       	breq	.+2      	; 0x1078 <main+0x132>
    1076:	49 c0       	rjmp	.+146    	; 0x110a <main+0x1c4>
    1078:	fe 01       	movw	r30, r28
    107a:	33 96       	adiw	r30, 0x03	; 3
    107c:	22 e0       	ldi	r18, 0x02	; 2
    107e:	30 e0       	ldi	r19, 0x00	; 0
		{
			for(uint8_t i = 2; i < 6; i++){
				msg[i] = ((portextender_data & (1<<i)) > 0)+'0';
    1080:	90 e0       	ldi	r25, 0x00	; 0
    1082:	a5 01       	movw	r20, r10
    1084:	02 2e       	mov	r0, r18
    1086:	02 c0       	rjmp	.+4      	; 0x108c <main+0x146>
    1088:	44 0f       	add	r20, r20
    108a:	55 1f       	adc	r21, r21
    108c:	0a 94       	dec	r0
    108e:	e2 f7       	brpl	.-8      	; 0x1088 <main+0x142>
    1090:	48 23       	and	r20, r24
    1092:	59 23       	and	r21, r25
    1094:	45 2b       	or	r20, r21
    1096:	11 f4       	brne	.+4      	; 0x109c <main+0x156>
    1098:	40 e3       	ldi	r20, 0x30	; 48
    109a:	01 c0       	rjmp	.+2      	; 0x109e <main+0x158>
    109c:	41 e3       	ldi	r20, 0x31	; 49
    109e:	41 93       	st	Z+, r20
    10a0:	2f 5f       	subi	r18, 0xFF	; 255
    10a2:	3f 4f       	sbci	r19, 0xFF	; 255
		uint8_t portextender_data = portextender_read();
		
		//Send sensor data every quarter second.
		if (sensor_timer == 0)
		{
			for(uint8_t i = 2; i < 6; i++){
    10a4:	26 30       	cpi	r18, 0x06	; 6
    10a6:	31 05       	cpc	r19, r1
    10a8:	61 f7       	brne	.-40     	; 0x1082 <main+0x13c>
				msg[i] = ((portextender_data & (1<<i)) > 0)+'0';
			}
			msg[6] = ' ';
    10aa:	7f 82       	std	Y+7, r7	; 0x07
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    10ac:	4a e0       	ldi	r20, 0x0A	; 10
    10ae:	be 01       	movw	r22, r28
    10b0:	68 5f       	subi	r22, 0xF8	; 248
    10b2:	7f 4f       	sbci	r23, 0xFF	; 255
    10b4:	c7 01       	movw	r24, r14
    10b6:	0e 94 79 11 	call	0x22f2	; 0x22f2 <__itoa_ncheck>
			itoa(distance_front, msg+7, 10);
			len = strlen(msg);
    10ba:	f8 01       	movw	r30, r16
    10bc:	01 90       	ld	r0, Z+
    10be:	00 20       	and	r0, r0
    10c0:	e9 f7       	brne	.-6      	; 0x10bc <main+0x176>
    10c2:	31 97       	sbiw	r30, 0x01	; 1
    10c4:	e0 1b       	sub	r30, r16
    10c6:	f1 0b       	sbc	r31, r17
			msg[len] = ' ';
    10c8:	d8 01       	movw	r26, r16
    10ca:	ae 0f       	add	r26, r30
    10cc:	b1 1d       	adc	r27, r1
    10ce:	7c 92       	st	X, r7
			msg[++len] = '\0';
    10d0:	ef 5f       	subi	r30, 0xFF	; 255
    10d2:	b8 01       	movw	r22, r16
    10d4:	6e 0f       	add	r22, r30
    10d6:	71 1d       	adc	r23, r1
    10d8:	fb 01       	movw	r30, r22
    10da:	10 82       	st	Z, r1
    10dc:	4a e0       	ldi	r20, 0x0A	; 10
    10de:	c6 01       	movw	r24, r12
    10e0:	0e 94 79 11 	call	0x22f2	; 0x22f2 <__itoa_ncheck>
			itoa(distance_back, msg+len, 10);
			len = strlen(msg);
    10e4:	f8 01       	movw	r30, r16
    10e6:	01 90       	ld	r0, Z+
    10e8:	00 20       	and	r0, r0
    10ea:	e9 f7       	brne	.-6      	; 0x10e6 <main+0x1a0>
    10ec:	31 97       	sbiw	r30, 0x01	; 1
    10ee:	e0 1b       	sub	r30, r16
    10f0:	f1 0b       	sbc	r31, r17
			msg[len] = '\0';
    10f2:	c8 01       	movw	r24, r16
    10f4:	8e 0f       	add	r24, r30
    10f6:	91 1d       	adc	r25, r1
    10f8:	fc 01       	movw	r30, r24
    10fa:	10 82       	st	Z, r1
			uart_send_line(msg);
    10fc:	c8 01       	movw	r24, r16
    10fe:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <uart_send_line>
			sensor_timer = 250;
    1102:	90 92 95 01 	sts	0x0195, r9	; 0x800195 <sensor_timer+0x1>
    1106:	80 92 94 01 	sts	0x0194, r8	; 0x800194 <sensor_timer>
		}
		
		display_buff(); //Displayes the content of a display buffer
    110a:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <display_buff>
    }
    110e:	83 cf       	rjmp	.-250    	; 0x1016 <main+0xd0>

00001110 <perform_command>:

/*
 * Preforms a command from MQTT.
 */
void perform_command(uint8_t topic, uint8_t command, volatile uint8_t* args)
{
    1110:	1f 93       	push	r17
    1112:	cf 93       	push	r28
    1114:	df 93       	push	r29
    1116:	ea 01       	movw	r28, r20
	switch(command){
    1118:	86 2f       	mov	r24, r22
    111a:	90 e0       	ldi	r25, 0x00	; 0
    111c:	fc 01       	movw	r30, r24
    111e:	f0 97       	sbiw	r30, 0x30	; 48
    1120:	e9 30       	cpi	r30, 0x09	; 9
    1122:	f1 05       	cpc	r31, r1
    1124:	08 f0       	brcs	.+2      	; 0x1128 <perform_command+0x18>
    1126:	bd c0       	rjmp	.+378    	; 0x12a2 <perform_command+0x192>
    1128:	ec 5c       	subi	r30, 0xCC	; 204
    112a:	ff 4f       	sbci	r31, 0xFF	; 255
    112c:	0c 94 46 11 	jmp	0x228c	; 0x228c <__tablejump2__>
		case '0':
		//Hearbeat received
		heartbeat_timer = 3000;
    1130:	88 eb       	ldi	r24, 0xB8	; 184
    1132:	9b e0       	ldi	r25, 0x0B	; 11
    1134:	90 93 93 01 	sts	0x0193, r25	; 0x800193 <heartbeat_timer+0x1>
    1138:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <heartbeat_timer>
		break;
    113c:	b2 c0       	rjmp	.+356    	; 0x12a2 <perform_command+0x192>
		case '1':
		//Textmessage recieved
		display_add_to_buff((char*)args, 16, 32); //Display textmessage
    113e:	40 e2       	ldi	r20, 0x20	; 32
    1140:	60 e1       	ldi	r22, 0x10	; 16
    1142:	ce 01       	movw	r24, r28
    1144:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <display_add_to_buff>
		break;
    1148:	ac c0       	rjmp	.+344    	; 0x12a2 <perform_command+0x192>
		case '2':
		//Play song / horn received
		switch(args[0])
    114a:	e8 81       	ld	r30, Y
    114c:	8e 2f       	mov	r24, r30
    114e:	90 e0       	ldi	r25, 0x00	; 0
    1150:	fc 01       	movw	r30, r24
    1152:	f0 97       	sbiw	r30, 0x30	; 48
    1154:	e3 31       	cpi	r30, 0x13	; 19
    1156:	f1 05       	cpc	r31, r1
    1158:	08 f0       	brcs	.+2      	; 0x115c <perform_command+0x4c>
    115a:	a3 c0       	rjmp	.+326    	; 0x12a2 <perform_command+0x192>
    115c:	e3 5c       	subi	r30, 0xC3	; 195
    115e:	ff 4f       	sbci	r31, 0xFF	; 255
    1160:	0c 94 46 11 	jmp	0x228c	; 0x228c <__tablejump2__>
		{
			case '0':
			song_set(get_horn_song());
    1164:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <get_horn_song>
    1168:	20 c0       	rjmp	.+64     	; 0x11aa <perform_command+0x9a>
			song_start();
			break;
			case '1':
			song_stop();
    116a:	0e 94 01 0d 	call	0x1a02	; 0x1a02 <song_stop>
			break;
    116e:	99 c0       	rjmp	.+306    	; 0x12a2 <perform_command+0x192>
			case '2':
			song_set(get_cantina_band_song());
    1170:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <get_cantina_band_song>
    1174:	1a c0       	rjmp	.+52     	; 0x11aa <perform_command+0x9a>
			song_start();
			break;
			case '3':
			song_set(get_imperial_march_song());
    1176:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <get_imperial_march_song>
    117a:	17 c0       	rjmp	.+46     	; 0x11aa <perform_command+0x9a>
			song_start();
			break;
			case '4':
			song_set(get_soviet_anthem_song());
    117c:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <get_soviet_anthem_song>
    1180:	14 c0       	rjmp	.+40     	; 0x11aa <perform_command+0x9a>
			song_start();
			break;
			case '5':
			song_set(get_allstars_song());
    1182:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <get_allstars_song>
    1186:	11 c0       	rjmp	.+34     	; 0x11aa <perform_command+0x9a>
			song_start();
			break;
			case '6':
			song_set(get_mii_song());
    1188:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <get_mii_song>
    118c:	0e c0       	rjmp	.+28     	; 0x11aa <perform_command+0x9a>
			song_start();
			break;
			case '7':
			song_set(get_halo_theme_song());
    118e:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <get_halo_theme_song>
    1192:	0b c0       	rjmp	.+22     	; 0x11aa <perform_command+0x9a>
			song_start();
			break;
			case '8':	
			song_set(get_mario_song());
    1194:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <get_mario_song>
    1198:	08 c0       	rjmp	.+16     	; 0x11aa <perform_command+0x9a>
			song_start();
			break;
			case '9':
			song_set(get_mario_galaxy_song());
    119a:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <get_mario_galaxy_song>
    119e:	05 c0       	rjmp	.+10     	; 0x11aa <perform_command+0x9a>
			song_start();
			break;
			case 'A':
			song_set(get_pokemon_center_song());
    11a0:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <get_pokemon_center_song>
    11a4:	02 c0       	rjmp	.+4      	; 0x11aa <perform_command+0x9a>
			song_start();
			break;
			case 'B':
			song_set(get_petalburg_song());
    11a6:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <get_petalburg_song>
    11aa:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <song_set>
			song_start();
    11ae:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <song_start>
			break;
    11b2:	77 c0       	rjmp	.+238    	; 0x12a2 <perform_command+0x192>
		}
		break;
		case '3':
		//Set wheel speed command recieved
		if (args[0] == '\0')
    11b4:	88 81       	ld	r24, Y
    11b6:	88 23       	and	r24, r24
    11b8:	09 f4       	brne	.+2      	; 0x11bc <perform_command+0xac>
    11ba:	85 c0       	rjmp	.+266    	; 0x12c6 <perform_command+0x1b6>
			return;
		if (drive_register_registers() == true)
    11bc:	0e 94 0f 0b 	call	0x161e	; 0x161e <drive_register_registers>
    11c0:	88 23       	and	r24, r24
    11c2:	09 f4       	brne	.+2      	; 0x11c6 <perform_command+0xb6>
    11c4:	6e c0       	rjmp	.+220    	; 0x12a2 <perform_command+0x192>
    11c6:	80 e0       	ldi	r24, 0x00	; 0
		{
			uint8_t i = 0;
			while(args[++i] != ' ');
    11c8:	91 e0       	ldi	r25, 0x01	; 1
    11ca:	98 0f       	add	r25, r24
    11cc:	fe 01       	movw	r30, r28
    11ce:	e9 0f       	add	r30, r25
    11d0:	f1 1d       	adc	r31, r1
    11d2:	20 81       	ld	r18, Z
    11d4:	20 32       	cpi	r18, 0x20	; 32
    11d6:	11 f0       	breq	.+4      	; 0x11dc <perform_command+0xcc>
    11d8:	89 2f       	mov	r24, r25
    11da:	f6 cf       	rjmp	.-20     	; 0x11c8 <perform_command+0xb8>
			args[i++] = '\0';
    11dc:	10 82       	st	Z, r1
			motors_set_speed(atoi((char*)args), atoi((char*)(args+i))); //Set given wheelspeed
    11de:	8e 5f       	subi	r24, 0xFE	; 254
    11e0:	9e 01       	movw	r18, r28
    11e2:	28 0f       	add	r18, r24
    11e4:	31 1d       	adc	r19, r1
    11e6:	c9 01       	movw	r24, r18
    11e8:	0e 94 4c 11 	call	0x2298	; 0x2298 <atoi>
    11ec:	18 2f       	mov	r17, r24
    11ee:	ce 01       	movw	r24, r28
    11f0:	0e 94 4c 11 	call	0x2298	; 0x2298 <atoi>
    11f4:	61 2f       	mov	r22, r17
    11f6:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <motors_set_speed>
    11fa:	53 c0       	rjmp	.+166    	; 0x12a2 <perform_command+0x192>
		}
		break;
		case '4':
		//Deadman set/clear
		switch(args[0])
    11fc:	88 81       	ld	r24, Y
    11fe:	81 33       	cpi	r24, 0x31	; 49
    1200:	79 f0       	breq	.+30     	; 0x1220 <perform_command+0x110>
    1202:	30 f4       	brcc	.+12     	; 0x1210 <perform_command+0x100>
    1204:	80 33       	cpi	r24, 0x30	; 48
    1206:	a9 f4       	brne	.+42     	; 0x1232 <perform_command+0x122>
		{
			case '0':
				deadman_switches &=~ REMOTE_AX;
    1208:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <deadman_switches>
    120c:	8e 7f       	andi	r24, 0xFE	; 254
    120e:	0f c0       	rjmp	.+30     	; 0x122e <perform_command+0x11e>
			motors_set_speed(atoi((char*)args), atoi((char*)(args+i))); //Set given wheelspeed
		}
		break;
		case '4':
		//Deadman set/clear
		switch(args[0])
    1210:	82 33       	cpi	r24, 0x32	; 50
    1212:	51 f0       	breq	.+20     	; 0x1228 <perform_command+0x118>
    1214:	83 33       	cpi	r24, 0x33	; 51
    1216:	69 f4       	brne	.+26     	; 0x1232 <perform_command+0x122>
			break;
			case '2':
				deadman_switches &=~ REMOTE_JOY;
			break;
			case '3':
				deadman_switches |= REMOTE_JOY;
    1218:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <deadman_switches>
    121c:	82 60       	ori	r24, 0x02	; 2
    121e:	07 c0       	rjmp	.+14     	; 0x122e <perform_command+0x11e>
		{
			case '0':
				deadman_switches &=~ REMOTE_AX;
			break;
			case '1':
				deadman_switches |= REMOTE_AX;
    1220:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <deadman_switches>
    1224:	81 60       	ori	r24, 0x01	; 1
    1226:	03 c0       	rjmp	.+6      	; 0x122e <perform_command+0x11e>
			break;
			case '2':
				deadman_switches &=~ REMOTE_JOY;
    1228:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <deadman_switches>
    122c:	8d 7f       	andi	r24, 0xFD	; 253
			break;
			case '3':
				deadman_switches |= REMOTE_JOY;
    122e:	80 93 be 01 	sts	0x01BE, r24	; 0x8001be <deadman_switches>
			break;
		}
		//Set led to indicate if a dead man is set or not
		switch(deadman_switches)
    1232:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <deadman_switches>
    1236:	88 23       	and	r24, r24
    1238:	11 f0       	breq	.+4      	; 0x123e <perform_command+0x12e>
    123a:	83 30       	cpi	r24, 0x03	; 3
    123c:	49 f4       	brne	.+18     	; 0x1250 <perform_command+0x140>
			case 0:
			control |= DEADMAN_STOP;
			portextender_port_in(GREEN_LED);
			break;
			case 3:
			control |= DEADMAN_STOP;
    123e:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <control>
    1242:	82 60       	ori	r24, 0x02	; 2
    1244:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <control>
			portextender_port_in(GREEN_LED);
    1248:	81 e0       	ldi	r24, 0x01	; 1
    124a:	0e 94 67 06 	call	0xcce	; 0xcce <portextender_port_in>
			break;
    124e:	29 c0       	rjmp	.+82     	; 0x12a2 <perform_command+0x192>
			default:
			control &=~ DEADMAN_STOP;
    1250:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <control>
    1254:	8d 7f       	andi	r24, 0xFD	; 253
    1256:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <control>
			portextender_port_out(GREEN_LED);
    125a:	81 e0       	ldi	r24, 0x01	; 1
    125c:	0e 94 76 06 	call	0xcec	; 0xcec <portextender_port_out>
			break;
    1260:	20 c0       	rjmp	.+64     	; 0x12a2 <perform_command+0x192>
		}
		break;
		case '5':
		//Emergency break
		control |= EMERGENCY;
    1262:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <control>
    1266:	81 60       	ori	r24, 0x01	; 1
    1268:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <control>
		//Set led for emergency break
		RED_LED_PORT |= RED_LED;
    126c:	40 9a       	sbi	0x08, 0	; 8
		break;
    126e:	19 c0       	rjmp	.+50     	; 0x12a2 <perform_command+0x192>
		case '6':
		//Clear emergency break
		control &=~ EMERGENCY;
    1270:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <control>
    1274:	8e 7f       	andi	r24, 0xFE	; 254
    1276:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <control>
		//Turn off emergency break led
		RED_LED_PORT &=~ RED_LED;
    127a:	40 98       	cbi	0x08, 0	; 8
		break;
    127c:	12 c0       	rjmp	.+36     	; 0x12a2 <perform_command+0x192>
		case '7':
		//PING recieved
		uart_send_line("12"); //Respond with PONG
    127e:	8f e1       	ldi	r24, 0x1F	; 31
    1280:	91 e0       	ldi	r25, 0x01	; 1
    1282:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <uart_send_line>
		break;
    1286:	0d c0       	rjmp	.+26     	; 0x12a2 <perform_command+0x192>
		case '8':
		//Return home command received
			switch(args[0])
    1288:	88 81       	ld	r24, Y
    128a:	80 33       	cpi	r24, 0x30	; 48
    128c:	29 f0       	breq	.+10     	; 0x1298 <perform_command+0x188>
    128e:	81 33       	cpi	r24, 0x31	; 49
    1290:	41 f4       	brne	.+16     	; 0x12a2 <perform_command+0x192>
					drive_register_backtrack();
				}
				break;
				case '1':
				//Reset drive register
				drive_register_init();
    1292:	0e 94 1c 0a 	call	0x1438	; 0x1438 <drive_register_init>
				break;
    1296:	05 c0       	rjmp	.+10     	; 0x12a2 <perform_command+0x192>
		//Return home command received
			switch(args[0])
			{
				case '0':
				//Activate return to home
				if (drive_register_registers() == true)
    1298:	0e 94 0f 0b 	call	0x161e	; 0x161e <drive_register_registers>
    129c:	81 11       	cpse	r24, r1
				{
					drive_register_backtrack();
    129e:	0e 94 12 0b 	call	0x1624	; 0x1624 <drive_register_backtrack>
			}
		break;
	}
	
	//Set if car should break because of emergency break.
	if (control != 0)
    12a2:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <control>
    12a6:	88 23       	and	r24, r24
    12a8:	41 f0       	breq	.+16     	; 0x12ba <perform_command+0x1aa>
	{
		motor_set_lock(true);
    12aa:	81 e0       	ldi	r24, 0x01	; 1
    12ac:	0e 94 31 0c 	call	0x1862	; 0x1862 <motor_set_lock>
	}
	else
	{
		motor_set_lock(false);
	}
}
    12b0:	df 91       	pop	r29
    12b2:	cf 91       	pop	r28
    12b4:	1f 91       	pop	r17
	
	//Set if car should break because of emergency break.
	if (control != 0)
	{
		motor_set_lock(true);
		drive_register_init(); //reset drive register
    12b6:	0c 94 1c 0a 	jmp	0x1438	; 0x1438 <drive_register_init>
	}
	else
	{
		motor_set_lock(false);
    12ba:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    12bc:	df 91       	pop	r29
    12be:	cf 91       	pop	r28
    12c0:	1f 91       	pop	r17
		motor_set_lock(true);
		drive_register_init(); //reset drive register
	}
	else
	{
		motor_set_lock(false);
    12c2:	0c 94 31 0c 	jmp	0x1862	; 0x1862 <motor_set_lock>
	}
}
    12c6:	df 91       	pop	r29
    12c8:	cf 91       	pop	r28
    12ca:	1f 91       	pop	r17
    12cc:	08 95       	ret

000012ce <__vector_7>:
/*
 * Timer2 compare interrupts. Frequency is 1kHz.
 * Used for things that is time sensitive.
 */
ISR(TIMER2_COMPA_vect)
{
    12ce:	1f 92       	push	r1
    12d0:	0f 92       	push	r0
    12d2:	0f b6       	in	r0, 0x3f	; 63
    12d4:	0f 92       	push	r0
    12d6:	11 24       	eor	r1, r1
    12d8:	2f 93       	push	r18
    12da:	3f 93       	push	r19
    12dc:	4f 93       	push	r20
    12de:	5f 93       	push	r21
    12e0:	6f 93       	push	r22
    12e2:	7f 93       	push	r23
    12e4:	8f 93       	push	r24
    12e6:	9f 93       	push	r25
    12e8:	af 93       	push	r26
    12ea:	bf 93       	push	r27
    12ec:	ef 93       	push	r30
    12ee:	ff 93       	push	r31
	if (heartbeat_timer == 0)
    12f0:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <heartbeat_timer>
    12f4:	90 91 93 01 	lds	r25, 0x0193	; 0x800193 <heartbeat_timer+0x1>
    12f8:	89 2b       	or	r24, r25
    12fa:	31 f4       	brne	.+12     	; 0x1308 <__vector_7+0x3a>
	{
		control |= NO_HEARBEAT;
    12fc:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <control>
    1300:	84 60       	ori	r24, 0x04	; 4
    1302:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <control>
    1306:	0e c0       	rjmp	.+28     	; 0x1324 <__vector_7+0x56>
	}
	else
	{
		control &=~ NO_HEARBEAT;
    1308:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <control>
    130c:	8b 7f       	andi	r24, 0xFB	; 251
    130e:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <control>
		heartbeat_timer--;
    1312:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <heartbeat_timer>
    1316:	90 91 93 01 	lds	r25, 0x0193	; 0x800193 <heartbeat_timer+0x1>
    131a:	01 97       	sbiw	r24, 0x01	; 1
    131c:	90 93 93 01 	sts	0x0193, r25	; 0x800193 <heartbeat_timer+0x1>
    1320:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <heartbeat_timer>
	}
	
	//Set if car should break because of emergency break.
	if (control != 0)
    1324:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <control>
    1328:	88 23       	and	r24, r24
    132a:	31 f0       	breq	.+12     	; 0x1338 <__vector_7+0x6a>
	{
		motor_set_lock(true);
    132c:	81 e0       	ldi	r24, 0x01	; 1
    132e:	0e 94 31 0c 	call	0x1862	; 0x1862 <motor_set_lock>
		drive_register_init(); //Reset drive register
    1332:	0e 94 1c 0a 	call	0x1438	; 0x1438 <drive_register_init>
    1336:	03 c0       	rjmp	.+6      	; 0x133e <__vector_7+0x70>
	}
	else
	{
		motor_set_lock(false);
    1338:	80 e0       	ldi	r24, 0x00	; 0
    133a:	0e 94 31 0c 	call	0x1862	; 0x1862 <motor_set_lock>
	}
	
	//If a song is playing
	if (song_playing() == true)
    133e:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <song_playing>
    1342:	81 11       	cpse	r24, r1
	{
		song_play(); //Continue song
    1344:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <song_play>
	}
	
	if (sensor_timer > 0)
    1348:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <sensor_timer>
    134c:	90 91 95 01 	lds	r25, 0x0195	; 0x800195 <sensor_timer+0x1>
    1350:	89 2b       	or	r24, r25
    1352:	49 f0       	breq	.+18     	; 0x1366 <__vector_7+0x98>
	{
		sensor_timer--;
    1354:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <sensor_timer>
    1358:	90 91 95 01 	lds	r25, 0x0195	; 0x800195 <sensor_timer+0x1>
    135c:	01 97       	sbiw	r24, 0x01	; 1
    135e:	90 93 95 01 	sts	0x0195, r25	; 0x800195 <sensor_timer+0x1>
    1362:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <sensor_timer>
	}
	
	srf02_timer_tick();
    1366:	0e 94 b1 06 	call	0xd62	; 0xd62 <srf02_timer_tick>
	drive_register_tick();
    136a:	0e 94 bc 0a 	call	0x1578	; 0x1578 <drive_register_tick>
	if (drive_register_registers() == false)
    136e:	0e 94 0f 0b 	call	0x161e	; 0x161e <drive_register_registers>
    1372:	81 11       	cpse	r24, r1
    1374:	03 c0       	rjmp	.+6      	; 0x137c <__vector_7+0xae>
	{
		portextender_port_out(YELLOW_LED);
    1376:	0e 94 76 06 	call	0xcec	; 0xcec <portextender_port_out>
    137a:	03 c0       	rjmp	.+6      	; 0x1382 <__vector_7+0xb4>
	}
	else
	{
		portextender_port_in(YELLOW_LED);
    137c:	80 e0       	ldi	r24, 0x00	; 0
    137e:	0e 94 67 06 	call	0xcce	; 0xcce <portextender_port_in>
	}
	motor_tick();
    1382:	0e 94 34 0b 	call	0x1668	; 0x1668 <motor_tick>
}
    1386:	ff 91       	pop	r31
    1388:	ef 91       	pop	r30
    138a:	bf 91       	pop	r27
    138c:	af 91       	pop	r26
    138e:	9f 91       	pop	r25
    1390:	8f 91       	pop	r24
    1392:	7f 91       	pop	r23
    1394:	6f 91       	pop	r22
    1396:	5f 91       	pop	r21
    1398:	4f 91       	pop	r20
    139a:	3f 91       	pop	r19
    139c:	2f 91       	pop	r18
    139e:	0f 90       	pop	r0
    13a0:	0f be       	out	0x3f, r0	; 63
    13a2:	0f 90       	pop	r0
    13a4:	1f 90       	pop	r1
    13a6:	18 95       	reti

000013a8 <__vector_18>:

/*
 * UART receive interrupt. Used when receiving MQTT commands. 
 */
ISR(USART_RX_vect){
    13a8:	1f 92       	push	r1
    13aa:	0f 92       	push	r0
    13ac:	0f b6       	in	r0, 0x3f	; 63
    13ae:	0f 92       	push	r0
    13b0:	11 24       	eor	r1, r1
    13b2:	2f 93       	push	r18
    13b4:	3f 93       	push	r19
    13b6:	4f 93       	push	r20
    13b8:	5f 93       	push	r21
    13ba:	6f 93       	push	r22
    13bc:	7f 93       	push	r23
    13be:	8f 93       	push	r24
    13c0:	9f 93       	push	r25
    13c2:	af 93       	push	r26
    13c4:	bf 93       	push	r27
    13c6:	ef 93       	push	r30
    13c8:	ff 93       	push	r31
	uart_linebuf[line_ind] = UDR0;
    13ca:	e0 91 5d 01 	lds	r30, 0x015D	; 0x80015d <line_ind>
    13ce:	f0 e0       	ldi	r31, 0x00	; 0
    13d0:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    13d4:	ea 56       	subi	r30, 0x6A	; 106
    13d6:	fe 4f       	sbci	r31, 0xFE	; 254
    13d8:	80 83       	st	Z, r24
	if(uart_linebuf[line_ind] == '\n')
    13da:	e0 91 5d 01 	lds	r30, 0x015D	; 0x80015d <line_ind>
    13de:	f0 e0       	ldi	r31, 0x00	; 0
    13e0:	ea 56       	subi	r30, 0x6A	; 106
    13e2:	fe 4f       	sbci	r31, 0xFE	; 254
    13e4:	80 81       	ld	r24, Z
    13e6:	8a 30       	cpi	r24, 0x0A	; 10
    13e8:	89 f4       	brne	.+34     	; 0x140c <__vector_18+0x64>
	{
		uart_linebuf[line_ind] = '\0';
    13ea:	e0 91 5d 01 	lds	r30, 0x015D	; 0x80015d <line_ind>
    13ee:	f0 e0       	ldi	r31, 0x00	; 0
    13f0:	ea 56       	subi	r30, 0x6A	; 106
    13f2:	fe 4f       	sbci	r31, 0xFE	; 254
    13f4:	10 82       	st	Z, r1
		perform_command(uart_linebuf[0], uart_linebuf[1], uart_linebuf+2);
    13f6:	60 91 97 01 	lds	r22, 0x0197	; 0x800197 <uart_linebuf+0x1>
    13fa:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <uart_linebuf>
    13fe:	48 e9       	ldi	r20, 0x98	; 152
    1400:	51 e0       	ldi	r21, 0x01	; 1
    1402:	0e 94 88 08 	call	0x1110	; 0x1110 <perform_command>
		line_ind = 0;
    1406:	10 92 5d 01 	sts	0x015D, r1	; 0x80015d <line_ind>
    140a:	05 c0       	rjmp	.+10     	; 0x1416 <__vector_18+0x6e>
	}
	else
	{
	line_ind++;
    140c:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <line_ind>
    1410:	8f 5f       	subi	r24, 0xFF	; 255
    1412:	80 93 5d 01 	sts	0x015D, r24	; 0x80015d <line_ind>
	}
    1416:	ff 91       	pop	r31
    1418:	ef 91       	pop	r30
    141a:	bf 91       	pop	r27
    141c:	af 91       	pop	r26
    141e:	9f 91       	pop	r25
    1420:	8f 91       	pop	r24
    1422:	7f 91       	pop	r23
    1424:	6f 91       	pop	r22
    1426:	5f 91       	pop	r21
    1428:	4f 91       	pop	r20
    142a:	3f 91       	pop	r19
    142c:	2f 91       	pop	r18
    142e:	0f 90       	pop	r0
    1430:	0f be       	out	0x3f, r0	; 63
    1432:	0f 90       	pop	r0
    1434:	1f 90       	pop	r1
    1436:	18 95       	reti

00001438 <drive_register_init>:
/*
 * Initializes the drive register. Can be used as reset.
 */
void drive_register_init()
{
	register_entries = true;
    1438:	81 e0       	ldi	r24, 0x01	; 1
    143a:	80 93 a2 07 	sts	0x07A2, r24	; 0x8007a2 <register_entries>
	entry_registered = false;
    143e:	10 92 c1 01 	sts	0x01C1, r1	; 0x8001c1 <entry_registered>
	time = 0;
    1442:	10 92 9f 07 	sts	0x079F, r1	; 0x80079f <time>
	end_entry = 0;
    1446:	10 92 a4 07 	sts	0x07A4, r1	; 0x8007a4 <end_entry+0x1>
    144a:	10 92 a3 07 	sts	0x07A3, r1	; 0x8007a3 <end_entry>
	current_entry = 0;
    144e:	10 92 a1 07 	sts	0x07A1, r1	; 0x8007a1 <current_entry+0x1>
    1452:	10 92 a0 07 	sts	0x07A0, r1	; 0x8007a0 <current_entry>
	prev_entry = 0;
    1456:	10 92 c0 01 	sts	0x01C0, r1	; 0x8001c0 <prev_entry+0x1>
    145a:	10 92 bf 01 	sts	0x01BF, r1	; 0x8001bf <prev_entry>
	end_backtrack = true;
    145e:	80 93 c2 01 	sts	0x01C2, r24	; 0x8001c2 <end_backtrack>
    1462:	08 95       	ret

00001464 <drive_register_register_entry>:
/*
 * Registers speed thats not standing still.
 */
void drive_register_register_entry(int8_t speed_l, int8_t speed_r)
{
	if (speed_l != 0 || speed_r != 0)
    1464:	81 11       	cpse	r24, r1
    1466:	02 c0       	rjmp	.+4      	; 0x146c <drive_register_register_entry+0x8>
    1468:	66 23       	and	r22, r22
    146a:	81 f0       	breq	.+32     	; 0x148c <drive_register_register_entry+0x28>
	{
		drive_register[current_entry].speed_l = speed_l;
    146c:	e0 91 a0 07 	lds	r30, 0x07A0	; 0x8007a0 <current_entry>
    1470:	f0 91 a1 07 	lds	r31, 0x07A1	; 0x8007a1 <current_entry+0x1>
    1474:	9f 01       	movw	r18, r30
    1476:	22 0f       	add	r18, r18
    1478:	33 1f       	adc	r19, r19
    147a:	e2 0f       	add	r30, r18
    147c:	f3 1f       	adc	r31, r19
    147e:	ed 53       	subi	r30, 0x3D	; 61
    1480:	fe 4f       	sbci	r31, 0xFE	; 254
    1482:	80 83       	st	Z, r24
		drive_register[current_entry].speed_r = speed_r;
    1484:	61 83       	std	Z+1, r22	; 0x01
		entry_registered = true;
    1486:	81 e0       	ldi	r24, 0x01	; 1
    1488:	80 93 c1 01 	sts	0x01C1, r24	; 0x8001c1 <entry_registered>
    148c:	08 95       	ret

0000148e <drive_register_add_entry>:
/*
 * If there is a registered speed. Register time and add go to the next entry in circular buffer.
 */
void drive_register_add_entry()
{
	if (entry_registered == true)
    148e:	80 91 c1 01 	lds	r24, 0x01C1	; 0x8001c1 <entry_registered>
    1492:	88 23       	and	r24, r24
    1494:	09 f4       	brne	.+2      	; 0x1498 <drive_register_add_entry+0xa>
    1496:	45 c0       	rjmp	.+138    	; 0x1522 <drive_register_add_entry+0x94>
	{
		drive_register[current_entry].time = time;
    1498:	80 91 a0 07 	lds	r24, 0x07A0	; 0x8007a0 <current_entry>
    149c:	90 91 a1 07 	lds	r25, 0x07A1	; 0x8007a1 <current_entry+0x1>
    14a0:	fc 01       	movw	r30, r24
    14a2:	ee 0f       	add	r30, r30
    14a4:	ff 1f       	adc	r31, r31
    14a6:	e8 0f       	add	r30, r24
    14a8:	f9 1f       	adc	r31, r25
    14aa:	ed 53       	subi	r30, 0x3D	; 61
    14ac:	fe 4f       	sbci	r31, 0xFE	; 254
    14ae:	20 91 9f 07 	lds	r18, 0x079F	; 0x80079f <time>
    14b2:	22 83       	std	Z+2, r18	; 0x02
		prev_entry = current_entry;
    14b4:	90 93 c0 01 	sts	0x01C0, r25	; 0x8001c0 <prev_entry+0x1>
    14b8:	80 93 bf 01 	sts	0x01BF, r24	; 0x8001bf <prev_entry>
    14bc:	40 91 a3 07 	lds	r20, 0x07A3	; 0x8007a3 <end_entry>
    14c0:	50 91 a4 07 	lds	r21, 0x07A4	; 0x8007a4 <end_entry+0x1>
		
		//Move one step in circular buffer. Both for current entry and if needed end entry.
		if (current_entry == BUFF - 1)
    14c4:	83 3f       	cpi	r24, 0xF3	; 243
    14c6:	21 e0       	ldi	r18, 0x01	; 1
    14c8:	92 07       	cpc	r25, r18
    14ca:	69 f4       	brne	.+26     	; 0x14e6 <drive_register_add_entry+0x58>
		{
			if (end_entry == 0)
    14cc:	45 2b       	or	r20, r21
    14ce:	31 f4       	brne	.+12     	; 0x14dc <drive_register_add_entry+0x4e>
			{
				end_entry++;
    14d0:	81 e0       	ldi	r24, 0x01	; 1
    14d2:	90 e0       	ldi	r25, 0x00	; 0
    14d4:	90 93 a4 07 	sts	0x07A4, r25	; 0x8007a4 <end_entry+0x1>
    14d8:	80 93 a3 07 	sts	0x07A3, r24	; 0x8007a3 <end_entry>
			}
			current_entry = 0;
    14dc:	10 92 a1 07 	sts	0x07A1, r1	; 0x8007a1 <current_entry+0x1>
    14e0:	10 92 a0 07 	sts	0x07A0, r1	; 0x8007a0 <current_entry>
    14e4:	18 c0       	rjmp	.+48     	; 0x1516 <drive_register_add_entry+0x88>
		}
		else
		{
			if (end_entry == current_entry + 1)
    14e6:	9c 01       	movw	r18, r24
    14e8:	2f 5f       	subi	r18, 0xFF	; 255
    14ea:	3f 4f       	sbci	r19, 0xFF	; 255
    14ec:	24 17       	cp	r18, r20
    14ee:	35 07       	cpc	r19, r21
    14f0:	71 f4       	brne	.+28     	; 0x150e <drive_register_add_entry+0x80>
			{
				if (end_entry == BUFF - 1)
    14f2:	23 3f       	cpi	r18, 0xF3	; 243
    14f4:	41 e0       	ldi	r20, 0x01	; 1
    14f6:	34 07       	cpc	r19, r20
    14f8:	29 f4       	brne	.+10     	; 0x1504 <drive_register_add_entry+0x76>
				{
					end_entry = 0;
    14fa:	10 92 a4 07 	sts	0x07A4, r1	; 0x8007a4 <end_entry+0x1>
    14fe:	10 92 a3 07 	sts	0x07A3, r1	; 0x8007a3 <end_entry>
    1502:	05 c0       	rjmp	.+10     	; 0x150e <drive_register_add_entry+0x80>
				}
				else
				{
					end_entry++;
    1504:	02 96       	adiw	r24, 0x02	; 2
    1506:	90 93 a4 07 	sts	0x07A4, r25	; 0x8007a4 <end_entry+0x1>
    150a:	80 93 a3 07 	sts	0x07A3, r24	; 0x8007a3 <end_entry>
				}
			}
			current_entry++;
    150e:	30 93 a1 07 	sts	0x07A1, r19	; 0x8007a1 <current_entry+0x1>
    1512:	20 93 a0 07 	sts	0x07A0, r18	; 0x8007a0 <current_entry>
		}
		
		//Note that registered speed have been added.
		time = 0;
    1516:	10 92 9f 07 	sts	0x079F, r1	; 0x80079f <time>
		entry_registered = false;
    151a:	10 92 c1 01 	sts	0x01C1, r1	; 0x8001c1 <entry_registered>
		end_backtrack = false;
    151e:	10 92 c2 01 	sts	0x01C2, r1	; 0x8001c2 <end_backtrack>
    1522:	08 95       	ret

00001524 <drive_register_pop>:
 * Assigns the speed of the current entry to the motors and assigns the time.
 * Also moves to the previous entry in the circular buffer.
 */
void drive_register_pop()
{
	motors_set_speed(-drive_register[current_entry].speed_l, -drive_register[current_entry].speed_r);
    1524:	e0 91 a0 07 	lds	r30, 0x07A0	; 0x8007a0 <current_entry>
    1528:	f0 91 a1 07 	lds	r31, 0x07A1	; 0x8007a1 <current_entry+0x1>
    152c:	cf 01       	movw	r24, r30
    152e:	88 0f       	add	r24, r24
    1530:	99 1f       	adc	r25, r25
    1532:	e8 0f       	add	r30, r24
    1534:	f9 1f       	adc	r31, r25
    1536:	ed 53       	subi	r30, 0x3D	; 61
    1538:	fe 4f       	sbci	r31, 0xFE	; 254
    153a:	61 81       	ldd	r22, Z+1	; 0x01
    153c:	61 95       	neg	r22
    153e:	80 81       	ld	r24, Z
    1540:	81 95       	neg	r24
    1542:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <motors_set_speed>
	time = drive_register[current_entry].time;
    1546:	80 91 a0 07 	lds	r24, 0x07A0	; 0x8007a0 <current_entry>
    154a:	90 91 a1 07 	lds	r25, 0x07A1	; 0x8007a1 <current_entry+0x1>
    154e:	fc 01       	movw	r30, r24
    1550:	ee 0f       	add	r30, r30
    1552:	ff 1f       	adc	r31, r31
    1554:	e8 0f       	add	r30, r24
    1556:	f9 1f       	adc	r31, r25
    1558:	ed 53       	subi	r30, 0x3D	; 61
    155a:	fe 4f       	sbci	r31, 0xFE	; 254
    155c:	22 81       	ldd	r18, Z+2	; 0x02
    155e:	20 93 9f 07 	sts	0x079F, r18	; 0x80079f <time>
	if (current_entry == 0)
    1562:	00 97       	sbiw	r24, 0x00	; 0
    1564:	19 f4       	brne	.+6      	; 0x156c <drive_register_pop+0x48>
	{
		current_entry = BUFF - 1;
    1566:	83 ef       	ldi	r24, 0xF3	; 243
    1568:	91 e0       	ldi	r25, 0x01	; 1
    156a:	01 c0       	rjmp	.+2      	; 0x156e <drive_register_pop+0x4a>
	}
	else
	{
		current_entry--;
    156c:	01 97       	sbiw	r24, 0x01	; 1
    156e:	90 93 a1 07 	sts	0x07A1, r25	; 0x8007a1 <current_entry+0x1>
    1572:	80 93 a0 07 	sts	0x07A0, r24	; 0x8007a0 <current_entry>
    1576:	08 95       	ret

00001578 <drive_register_tick>:
 * Function that does time sensitive things. It counts in millisecond the time between motor input changes.
 * Also count how long each input should stay when backtracking. Should run on a 1kHz timer.
 */
void drive_register_tick()
{
	if (register_entries == true)
    1578:	80 91 a2 07 	lds	r24, 0x07A2	; 0x8007a2 <register_entries>
    157c:	88 23       	and	r24, r24
    157e:	01 f1       	breq	.+64     	; 0x15c0 <drive_register_tick+0x48>
	{
		if (entry_registered == true)
    1580:	80 91 c1 01 	lds	r24, 0x01C1	; 0x8001c1 <entry_registered>
    1584:	88 23       	and	r24, r24
    1586:	c9 f0       	breq	.+50     	; 0x15ba <drive_register_tick+0x42>
		{
			time++;
    1588:	80 91 9f 07 	lds	r24, 0x079F	; 0x80079f <time>
    158c:	8f 5f       	subi	r24, 0xFF	; 255
    158e:	80 93 9f 07 	sts	0x079F, r24	; 0x80079f <time>
			if (time == 0xff)
    1592:	8f 3f       	cpi	r24, 0xFF	; 255
    1594:	09 f0       	breq	.+2      	; 0x1598 <drive_register_tick+0x20>
    1596:	42 c0       	rjmp	.+132    	; 0x161c <drive_register_tick+0xa4>
			{
				drive_register_add_entry();
    1598:	0e 94 47 0a 	call	0x148e	; 0x148e <drive_register_add_entry>
				drive_register_register_entry(drive_register[prev_entry].speed_l, drive_register[prev_entry].speed_r);
    159c:	e0 91 bf 01 	lds	r30, 0x01BF	; 0x8001bf <prev_entry>
    15a0:	f0 91 c0 01 	lds	r31, 0x01C0	; 0x8001c0 <prev_entry+0x1>
    15a4:	cf 01       	movw	r24, r30
    15a6:	88 0f       	add	r24, r24
    15a8:	99 1f       	adc	r25, r25
    15aa:	e8 0f       	add	r30, r24
    15ac:	f9 1f       	adc	r31, r25
    15ae:	ed 53       	subi	r30, 0x3D	; 61
    15b0:	fe 4f       	sbci	r31, 0xFE	; 254
    15b2:	61 81       	ldd	r22, Z+1	; 0x01
    15b4:	80 81       	ld	r24, Z
    15b6:	0c 94 32 0a 	jmp	0x1464	; 0x1464 <drive_register_register_entry>
			}
		}
		else
		{
			time = 0;
    15ba:	10 92 9f 07 	sts	0x079F, r1	; 0x80079f <time>
    15be:	08 95       	ret
		}
	}
	else
	{
		if (time != 0)
    15c0:	80 91 9f 07 	lds	r24, 0x079F	; 0x80079f <time>
    15c4:	88 23       	and	r24, r24
    15c6:	19 f0       	breq	.+6      	; 0x15ce <drive_register_tick+0x56>
		{
			time--;
    15c8:	81 50       	subi	r24, 0x01	; 1
    15ca:	80 93 9f 07 	sts	0x079F, r24	; 0x80079f <time>
		}
		
		if (time == 0)
    15ce:	80 91 9f 07 	lds	r24, 0x079F	; 0x80079f <time>
    15d2:	81 11       	cpse	r24, r1
    15d4:	23 c0       	rjmp	.+70     	; 0x161c <drive_register_tick+0xa4>
		{
			if (end_backtrack == false)
    15d6:	80 91 c2 01 	lds	r24, 0x01C2	; 0x8001c2 <end_backtrack>
    15da:	81 11       	cpse	r24, r1
    15dc:	10 c0       	rjmp	.+32     	; 0x15fe <drive_register_tick+0x86>
			{
				if (current_entry == end_entry)
    15de:	20 91 a0 07 	lds	r18, 0x07A0	; 0x8007a0 <current_entry>
    15e2:	30 91 a1 07 	lds	r19, 0x07A1	; 0x8007a1 <current_entry+0x1>
    15e6:	80 91 a3 07 	lds	r24, 0x07A3	; 0x8007a3 <end_entry>
    15ea:	90 91 a4 07 	lds	r25, 0x07A4	; 0x8007a4 <end_entry+0x1>
    15ee:	28 17       	cp	r18, r24
    15f0:	39 07       	cpc	r19, r25
    15f2:	19 f4       	brne	.+6      	; 0x15fa <drive_register_tick+0x82>
				{
					end_backtrack = true;
    15f4:	81 e0       	ldi	r24, 0x01	; 1
    15f6:	80 93 c2 01 	sts	0x01C2, r24	; 0x8001c2 <end_backtrack>
				}
				drive_register_pop();
    15fa:	0c 94 92 0a 	jmp	0x1524	; 0x1524 <drive_register_pop>
			}
			else
			{
				drive_register_init();
    15fe:	0e 94 1c 0a 	call	0x1438	; 0x1438 <drive_register_init>
				motors_set_speed(0, 0);
    1602:	60 e0       	ldi	r22, 0x00	; 0
    1604:	80 e0       	ldi	r24, 0x00	; 0
    1606:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <motors_set_speed>
				motor_set_lock(false);
    160a:	80 e0       	ldi	r24, 0x00	; 0
    160c:	0e 94 31 0c 	call	0x1862	; 0x1862 <motor_set_lock>
				motor_forward_set_lock(false);
    1610:	80 e0       	ldi	r24, 0x00	; 0
    1612:	0e 94 11 0c 	call	0x1822	; 0x1822 <motor_forward_set_lock>
				motor_backward_set_lock(false);
    1616:	80 e0       	ldi	r24, 0x00	; 0
    1618:	0c 94 21 0c 	jmp	0x1842	; 0x1842 <motor_backward_set_lock>
    161c:	08 95       	ret

0000161e <drive_register_registers>:
 * Returns if the register registers.
 */
bool drive_register_registers()
{
	return register_entries;
}
    161e:	80 91 a2 07 	lds	r24, 0x07A2	; 0x8007a2 <register_entries>
    1622:	08 95       	ret

00001624 <drive_register_backtrack>:
/*
 * Sets drive register to not register and backtrack.
 */
void drive_register_backtrack()
{
	register_entries = false;
    1624:	10 92 a2 07 	sts	0x07A2, r1	; 0x8007a2 <register_entries>
	drive_register_add_entry(); //Adds the last registered speeds
    1628:	0c 94 47 0a 	jmp	0x148e	; 0x148e <drive_register_add_entry>

0000162c <motors_init>:
/*
 * Initializes timer0 with fast pwm and the rest of what the motors need.
 */
void motors_init()
{
	MOTOR_PWM_DDR |= MOTOR_L_PWM | MOTOR_R_PWM;
    162c:	8a b1       	in	r24, 0x0a	; 10
    162e:	80 66       	ori	r24, 0x60	; 96
    1630:	8a b9       	out	0x0a, r24	; 10
	
	MOTOR_L_F_DDR |= MOTOR_L_FORWARD;
    1632:	26 9a       	sbi	0x04, 6	; 4
	MOTOR_L_B_DDR |= MOTOR_L_BACKWARD;
    1634:	27 9a       	sbi	0x04, 7	; 4
	
	MOTOR_L_F_PORT |= MOTOR_L_FORWARD;
    1636:	2e 9a       	sbi	0x05, 6	; 5
	MOTOR_L_B_PORT |= MOTOR_L_BACKWARD;
    1638:	2f 9a       	sbi	0x05, 7	; 5
	
	MOTOR_R_F_DDR |= MOTOR_R_FORWARD;
    163a:	20 9a       	sbi	0x04, 0	; 4
	MOTOR_R_B_DDR |= MOTOR_R_BACKWARD;
    163c:	57 9a       	sbi	0x0a, 7	; 10
	
	MOTOR_R_F_PORT |= MOTOR_R_FORWARD;
    163e:	28 9a       	sbi	0x05, 0	; 5
	MOTOR_R_B_PORT |= MOTOR_R_BACKWARD;
    1640:	5f 9a       	sbi	0x0b, 7	; 11
	
	TCCR0A |= ((1<<COM0A1) | (1<<COM0B1) | (1<<WGM01) | (1<<WGM00));
    1642:	84 b5       	in	r24, 0x24	; 36
    1644:	83 6a       	ori	r24, 0xA3	; 163
    1646:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1<<CS00);
    1648:	85 b5       	in	r24, 0x25	; 37
    164a:	81 60       	ori	r24, 0x01	; 1
    164c:	85 bd       	out	0x25, r24	; 37
	
	OCR0A = 0;
    164e:	17 bc       	out	0x27, r1	; 39
	OCR0B = 0;
    1650:	18 bc       	out	0x28, r1	; 40
	motor_speed_l = 0;
    1652:	10 92 aa 07 	sts	0x07AA, r1	; 0x8007aa <motor_speed_l>
	motor_speed_r = 0;
    1656:	10 92 a7 07 	sts	0x07A7, r1	; 0x8007a7 <motor_speed_r>
	
	motor_forward_lock = false;
    165a:	10 92 a5 07 	sts	0x07A5, r1	; 0x8007a5 <motor_forward_lock>
	motor_backward_lock = false;
    165e:	10 92 a6 07 	sts	0x07A6, r1	; 0x8007a6 <motor_backward_lock>
	motor_lock = false;
    1662:	10 92 a9 07 	sts	0x07A9, r1	; 0x8007a9 <motor_lock>
    1666:	08 95       	ret

00001668 <motor_tick>:
/*
 * Handles the startup process for the vehicle in lower speeds. Should be called on a 1kHz frequency.
 */
void motor_tick()
{
	if (motor_startup_l == true && timer == 0)
    1668:	80 91 a8 07 	lds	r24, 0x07A8	; 0x8007a8 <motor_startup_l>
    166c:	88 23       	and	r24, r24
    166e:	91 f0       	breq	.+36     	; 0x1694 <motor_tick+0x2c>
    1670:	80 91 ac 07 	lds	r24, 0x07AC	; 0x8007ac <timer>
    1674:	81 11       	cpse	r24, r1
    1676:	0e c0       	rjmp	.+28     	; 0x1694 <motor_tick+0x2c>
	{
		MOTOR_L_SPEED = (abs(motor_speed_l) * 2);
    1678:	80 91 aa 07 	lds	r24, 0x07AA	; 0x8007aa <motor_speed_l>
    167c:	08 2e       	mov	r0, r24
    167e:	00 0c       	add	r0, r0
    1680:	99 0b       	sbc	r25, r25
    1682:	97 ff       	sbrs	r25, 7
    1684:	03 c0       	rjmp	.+6      	; 0x168c <motor_tick+0x24>
    1686:	91 95       	neg	r25
    1688:	81 95       	neg	r24
    168a:	91 09       	sbc	r25, r1
    168c:	88 0f       	add	r24, r24
    168e:	88 bd       	out	0x28, r24	; 40
		motor_startup_l = false;
    1690:	10 92 a8 07 	sts	0x07A8, r1	; 0x8007a8 <motor_startup_l>
	}
	
	if (motor_startup_r == true && timer == 0)
    1694:	80 91 ab 07 	lds	r24, 0x07AB	; 0x8007ab <motor_startup_r>
    1698:	88 23       	and	r24, r24
    169a:	91 f0       	breq	.+36     	; 0x16c0 <motor_tick+0x58>
    169c:	80 91 ac 07 	lds	r24, 0x07AC	; 0x8007ac <timer>
    16a0:	81 11       	cpse	r24, r1
    16a2:	0e c0       	rjmp	.+28     	; 0x16c0 <motor_tick+0x58>
	{
		MOTOR_R_SPEED = (abs(motor_speed_r) * 2);
    16a4:	80 91 a7 07 	lds	r24, 0x07A7	; 0x8007a7 <motor_speed_r>
    16a8:	08 2e       	mov	r0, r24
    16aa:	00 0c       	add	r0, r0
    16ac:	99 0b       	sbc	r25, r25
    16ae:	97 ff       	sbrs	r25, 7
    16b0:	03 c0       	rjmp	.+6      	; 0x16b8 <motor_tick+0x50>
    16b2:	91 95       	neg	r25
    16b4:	81 95       	neg	r24
    16b6:	91 09       	sbc	r25, r1
    16b8:	88 0f       	add	r24, r24
    16ba:	87 bd       	out	0x27, r24	; 39
		motor_startup_r = false;
    16bc:	10 92 ab 07 	sts	0x07AB, r1	; 0x8007ab <motor_startup_r>
	}
	
	if ((motor_startup_l == true || motor_startup_r == true) && timer > 0)
    16c0:	80 91 a8 07 	lds	r24, 0x07A8	; 0x8007a8 <motor_startup_l>
    16c4:	81 11       	cpse	r24, r1
    16c6:	04 c0       	rjmp	.+8      	; 0x16d0 <motor_tick+0x68>
    16c8:	80 91 ab 07 	lds	r24, 0x07AB	; 0x8007ab <motor_startup_r>
    16cc:	88 23       	and	r24, r24
    16ce:	39 f0       	breq	.+14     	; 0x16de <motor_tick+0x76>
    16d0:	80 91 ac 07 	lds	r24, 0x07AC	; 0x8007ac <timer>
    16d4:	88 23       	and	r24, r24
    16d6:	19 f0       	breq	.+6      	; 0x16de <motor_tick+0x76>
	{
		timer--;
    16d8:	81 50       	subi	r24, 0x01	; 1
    16da:	80 93 ac 07 	sts	0x07AC, r24	; 0x8007ac <timer>
    16de:	08 95       	ret

000016e0 <motors_set_speed>:

/*
 * Assigns given speed to the motors.
 */
void motors_set_speed(int8_t speed_l, int8_t speed_r)
{
    16e0:	cf 93       	push	r28
    16e2:	df 93       	push	r29
    16e4:	d8 2f       	mov	r29, r24
    16e6:	c6 2f       	mov	r28, r22
	if (drive_register_registers() == true)
    16e8:	0e 94 0f 0b 	call	0x161e	; 0x161e <drive_register_registers>
    16ec:	88 23       	and	r24, r24
    16ee:	71 f1       	breq	.+92     	; 0x174c <motors_set_speed+0x6c>
	{
		//If left motor is lock
		if ((speed_l < 0 && motor_backward_lock == true) || (speed_l > 0 && motor_forward_lock == true) || (motor_lock == true))
    16f0:	d7 ff       	sbrs	r29, 7
    16f2:	03 c0       	rjmp	.+6      	; 0x16fa <motors_set_speed+0x1a>
    16f4:	80 91 a6 07 	lds	r24, 0x07A6	; 0x8007a6 <motor_backward_lock>
    16f8:	04 c0       	rjmp	.+8      	; 0x1702 <motors_set_speed+0x22>
    16fa:	dd 23       	and	r29, r29
    16fc:	21 f0       	breq	.+8      	; 0x1706 <motors_set_speed+0x26>
    16fe:	80 91 a5 07 	lds	r24, 0x07A5	; 0x8007a5 <motor_forward_lock>
    1702:	81 11       	cpse	r24, r1
    1704:	03 c0       	rjmp	.+6      	; 0x170c <motors_set_speed+0x2c>
    1706:	80 91 a9 07 	lds	r24, 0x07A9	; 0x8007a9 <motor_lock>
    170a:	81 11       	cpse	r24, r1
		{
			speed_l = 0;
    170c:	d0 e0       	ldi	r29, 0x00	; 0
		}
		
		//If right motor is locked
		if ((speed_r < 0 && motor_backward_lock == true) || (speed_r > 0 && motor_forward_lock == true) || (motor_lock == true))
    170e:	c7 ff       	sbrs	r28, 7
    1710:	03 c0       	rjmp	.+6      	; 0x1718 <motors_set_speed+0x38>
    1712:	80 91 a6 07 	lds	r24, 0x07A6	; 0x8007a6 <motor_backward_lock>
    1716:	04 c0       	rjmp	.+8      	; 0x1720 <motors_set_speed+0x40>
    1718:	cc 23       	and	r28, r28
    171a:	21 f0       	breq	.+8      	; 0x1724 <motors_set_speed+0x44>
    171c:	80 91 a5 07 	lds	r24, 0x07A5	; 0x8007a5 <motor_forward_lock>
    1720:	81 11       	cpse	r24, r1
    1722:	03 c0       	rjmp	.+6      	; 0x172a <motors_set_speed+0x4a>
    1724:	80 91 a9 07 	lds	r24, 0x07A9	; 0x8007a9 <motor_lock>
    1728:	81 11       	cpse	r24, r1
		{
			speed_r = 0;
    172a:	c0 e0       	ldi	r28, 0x00	; 0
		}
		
		//Lower speeds is problematic and will not be used
		if (abs(speed_l) < 10)
    172c:	89 e0       	ldi	r24, 0x09	; 9
    172e:	8d 0f       	add	r24, r29
    1730:	83 31       	cpi	r24, 0x13	; 19
    1732:	08 f4       	brcc	.+2      	; 0x1736 <motors_set_speed+0x56>
		{
			speed_l = 0;
    1734:	d0 e0       	ldi	r29, 0x00	; 0
		}
		
		//Lower speeds is problematic and will not be used.
		if (abs(speed_r) < 10)
    1736:	89 e0       	ldi	r24, 0x09	; 9
    1738:	8c 0f       	add	r24, r28
    173a:	83 31       	cpi	r24, 0x13	; 19
    173c:	08 f4       	brcc	.+2      	; 0x1740 <motors_set_speed+0x60>
		{
			speed_r = 0;
    173e:	c0 e0       	ldi	r28, 0x00	; 0
		}
		
		//Registers how the motors moves.
		drive_register_add_entry();
    1740:	0e 94 47 0a 	call	0x148e	; 0x148e <drive_register_add_entry>
		drive_register_register_entry(speed_l, speed_r);
    1744:	6c 2f       	mov	r22, r28
    1746:	8d 2f       	mov	r24, r29
    1748:	0e 94 32 0a 	call	0x1464	; 0x1464 <drive_register_register_entry>
	}
	
	if (speed_l > 0)
    174c:	1d 16       	cp	r1, r29
    174e:	1c f4       	brge	.+6      	; 0x1756 <motors_set_speed+0x76>
	{
		//Left motor forward
		MOTOR_L_F_PORT |= MOTOR_L_FORWARD;
    1750:	2e 9a       	sbi	0x05, 6	; 5
		MOTOR_L_B_PORT &=~ MOTOR_L_BACKWARD;
    1752:	2f 98       	cbi	0x05, 7	; 5
    1754:	08 c0       	rjmp	.+16     	; 0x1766 <motors_set_speed+0x86>
	}
	else if (speed_l < 0)
    1756:	dd 23       	and	r29, r29
    1758:	19 f0       	breq	.+6      	; 0x1760 <motors_set_speed+0x80>
	{
		//Left motor backward
		MOTOR_L_F_PORT &=~ MOTOR_L_FORWARD;
    175a:	2e 98       	cbi	0x05, 6	; 5
		MOTOR_L_B_PORT |= MOTOR_L_BACKWARD;
    175c:	2f 9a       	sbi	0x05, 7	; 5
    175e:	03 c0       	rjmp	.+6      	; 0x1766 <motors_set_speed+0x86>
	}
	else
	{
		//Left motor lock
		//Active breaking
		MOTOR_L_F_PORT |= MOTOR_L_FORWARD;
    1760:	2e 9a       	sbi	0x05, 6	; 5
		MOTOR_L_B_PORT |= MOTOR_L_BACKWARD;	
    1762:	2f 9a       	sbi	0x05, 7	; 5
		speed_l = 127;
    1764:	df e7       	ldi	r29, 0x7F	; 127
	}
	
	if (speed_r > 0)
    1766:	1c 16       	cp	r1, r28
    1768:	1c f4       	brge	.+6      	; 0x1770 <motors_set_speed+0x90>
	{
		//Right motor forwards
		MOTOR_R_F_PORT |= MOTOR_R_FORWARD;
    176a:	28 9a       	sbi	0x05, 0	; 5
		MOTOR_R_B_PORT &=~ MOTOR_R_BACKWARD;
    176c:	5f 98       	cbi	0x0b, 7	; 11
    176e:	08 c0       	rjmp	.+16     	; 0x1780 <motors_set_speed+0xa0>
	}
	else if (speed_r < 0)
    1770:	cc 23       	and	r28, r28
    1772:	19 f0       	breq	.+6      	; 0x177a <motors_set_speed+0x9a>
	{
		//Right motor backward
		MOTOR_R_F_PORT &=~ MOTOR_R_FORWARD;
    1774:	28 98       	cbi	0x05, 0	; 5
		MOTOR_R_B_PORT |= MOTOR_R_BACKWARD;
    1776:	5f 9a       	sbi	0x0b, 7	; 11
    1778:	03 c0       	rjmp	.+6      	; 0x1780 <motors_set_speed+0xa0>
	}
	else
	{
		//Right motor lock
		//Active breaking
		MOTOR_R_F_PORT |= MOTOR_R_FORWARD;
    177a:	28 9a       	sbi	0x05, 0	; 5
		MOTOR_R_B_PORT |= MOTOR_R_BACKWARD;
    177c:	5f 9a       	sbi	0x0b, 7	; 11
		speed_r = 127;
    177e:	cf e7       	ldi	r28, 0x7F	; 127
	}
	
	//If speed is low enough to need a startup process
	if (MOTOR_L_SPEED == 0 && abs(speed_l) < 30 && abs(speed_l) > 0)
    1780:	28 b5       	in	r18, 0x28	; 40
    1782:	8d 2f       	mov	r24, r29
    1784:	0d 2e       	mov	r0, r29
    1786:	00 0c       	add	r0, r0
    1788:	99 0b       	sbc	r25, r25
    178a:	21 11       	cpse	r18, r1
    178c:	19 c0       	rjmp	.+50     	; 0x17c0 <motors_set_speed+0xe0>
    178e:	d3 5e       	subi	r29, 0xE3	; 227
    1790:	db 33       	cpi	r29, 0x3B	; 59
    1792:	b0 f4       	brcc	.+44     	; 0x17c0 <motors_set_speed+0xe0>
    1794:	9c 01       	movw	r18, r24
    1796:	97 ff       	sbrs	r25, 7
    1798:	04 c0       	rjmp	.+8      	; 0x17a2 <motors_set_speed+0xc2>
    179a:	22 27       	eor	r18, r18
    179c:	33 27       	eor	r19, r19
    179e:	28 1b       	sub	r18, r24
    17a0:	39 0b       	sbc	r19, r25
    17a2:	21 15       	cp	r18, r1
    17a4:	31 05       	cpc	r19, r1
    17a6:	61 f0       	breq	.+24     	; 0x17c0 <motors_set_speed+0xe0>
	{
		//Set to have max speed for 20ms
		MOTOR_L_SPEED = 0xff;
    17a8:	8f ef       	ldi	r24, 0xFF	; 255
    17aa:	88 bd       	out	0x28, r24	; 40
		motor_speed_l = (abs(speed_l) * 2);
    17ac:	22 0f       	add	r18, r18
    17ae:	20 93 aa 07 	sts	0x07AA, r18	; 0x8007aa <motor_speed_l>
		motor_startup_l = true;
    17b2:	81 e0       	ldi	r24, 0x01	; 1
    17b4:	80 93 a8 07 	sts	0x07A8, r24	; 0x8007a8 <motor_startup_l>
		timer = 20;
    17b8:	84 e1       	ldi	r24, 0x14	; 20
    17ba:	80 93 ac 07 	sts	0x07AC, r24	; 0x8007ac <timer>
    17be:	07 c0       	rjmp	.+14     	; 0x17ce <motors_set_speed+0xee>
	}
	else
	{
		//Set speed on left motor
		MOTOR_L_SPEED = (abs(speed_l) * 2);
    17c0:	97 ff       	sbrs	r25, 7
    17c2:	03 c0       	rjmp	.+6      	; 0x17ca <motors_set_speed+0xea>
    17c4:	91 95       	neg	r25
    17c6:	81 95       	neg	r24
    17c8:	91 09       	sbc	r25, r1
    17ca:	88 0f       	add	r24, r24
    17cc:	88 bd       	out	0x28, r24	; 40
	}
	
	//If speed is low enough to need a startup process
	if (MOTOR_R_SPEED == 0 && (abs(speed_r) < 30) && abs(speed_r) > 0)
    17ce:	27 b5       	in	r18, 0x27	; 39
    17d0:	8c 2f       	mov	r24, r28
    17d2:	0c 2e       	mov	r0, r28
    17d4:	00 0c       	add	r0, r0
    17d6:	99 0b       	sbc	r25, r25
    17d8:	21 11       	cpse	r18, r1
    17da:	19 c0       	rjmp	.+50     	; 0x180e <motors_set_speed+0x12e>
    17dc:	c3 5e       	subi	r28, 0xE3	; 227
    17de:	cb 33       	cpi	r28, 0x3B	; 59
    17e0:	b0 f4       	brcc	.+44     	; 0x180e <motors_set_speed+0x12e>
    17e2:	9c 01       	movw	r18, r24
    17e4:	97 ff       	sbrs	r25, 7
    17e6:	04 c0       	rjmp	.+8      	; 0x17f0 <motors_set_speed+0x110>
    17e8:	22 27       	eor	r18, r18
    17ea:	33 27       	eor	r19, r19
    17ec:	28 1b       	sub	r18, r24
    17ee:	39 0b       	sbc	r19, r25
    17f0:	21 15       	cp	r18, r1
    17f2:	31 05       	cpc	r19, r1
    17f4:	61 f0       	breq	.+24     	; 0x180e <motors_set_speed+0x12e>
	{
		//Set to have max speed for 20ms
		MOTOR_R_SPEED = 0xff;
    17f6:	8f ef       	ldi	r24, 0xFF	; 255
    17f8:	87 bd       	out	0x27, r24	; 39
		motor_speed_r = (abs(speed_r) * 2);
    17fa:	22 0f       	add	r18, r18
    17fc:	20 93 a7 07 	sts	0x07A7, r18	; 0x8007a7 <motor_speed_r>
		motor_startup_r = true;
    1800:	81 e0       	ldi	r24, 0x01	; 1
    1802:	80 93 ab 07 	sts	0x07AB, r24	; 0x8007ab <motor_startup_r>
		timer = 20;
    1806:	84 e1       	ldi	r24, 0x14	; 20
    1808:	80 93 ac 07 	sts	0x07AC, r24	; 0x8007ac <timer>
    180c:	07 c0       	rjmp	.+14     	; 0x181c <motors_set_speed+0x13c>
	}
	else
	{
		//Set speed on right motor
		MOTOR_R_SPEED = (abs(speed_r) * 2);
    180e:	97 ff       	sbrs	r25, 7
    1810:	03 c0       	rjmp	.+6      	; 0x1818 <motors_set_speed+0x138>
    1812:	91 95       	neg	r25
    1814:	81 95       	neg	r24
    1816:	91 09       	sbc	r25, r1
    1818:	88 0f       	add	r24, r24
    181a:	87 bd       	out	0x27, r24	; 39
	}
}
    181c:	df 91       	pop	r29
    181e:	cf 91       	pop	r28
    1820:	08 95       	ret

00001822 <motor_forward_set_lock>:
/*
 * Sets the forward moving lock.
 */
void motor_forward_set_lock(bool lock)
{
	if (motor_forward_lock == false && lock == true)
    1822:	90 91 a5 07 	lds	r25, 0x07A5	; 0x8007a5 <motor_forward_lock>
    1826:	91 11       	cpse	r25, r1
    1828:	09 c0       	rjmp	.+18     	; 0x183c <motor_forward_set_lock+0x1a>
    182a:	88 23       	and	r24, r24
    182c:	39 f0       	breq	.+14     	; 0x183c <motor_forward_set_lock+0x1a>
	{
		motor_forward_lock = lock;
    182e:	81 e0       	ldi	r24, 0x01	; 1
    1830:	80 93 a5 07 	sts	0x07A5, r24	; 0x8007a5 <motor_forward_lock>
		motors_set_speed(0, 0);
    1834:	60 e0       	ldi	r22, 0x00	; 0
    1836:	80 e0       	ldi	r24, 0x00	; 0
    1838:	0c 94 70 0b 	jmp	0x16e0	; 0x16e0 <motors_set_speed>
	}
	else
	{
		motor_forward_lock = lock;
    183c:	80 93 a5 07 	sts	0x07A5, r24	; 0x8007a5 <motor_forward_lock>
    1840:	08 95       	ret

00001842 <motor_backward_set_lock>:
/*
 * Sets the backward moving lock.
 */
void motor_backward_set_lock(bool lock)
{
	if (motor_backward_lock == false && lock == true)
    1842:	90 91 a6 07 	lds	r25, 0x07A6	; 0x8007a6 <motor_backward_lock>
    1846:	91 11       	cpse	r25, r1
    1848:	09 c0       	rjmp	.+18     	; 0x185c <motor_backward_set_lock+0x1a>
    184a:	88 23       	and	r24, r24
    184c:	39 f0       	breq	.+14     	; 0x185c <motor_backward_set_lock+0x1a>
	{
		motor_backward_lock = lock;
    184e:	81 e0       	ldi	r24, 0x01	; 1
    1850:	80 93 a6 07 	sts	0x07A6, r24	; 0x8007a6 <motor_backward_lock>
		motors_set_speed(0, 0);
    1854:	60 e0       	ldi	r22, 0x00	; 0
    1856:	80 e0       	ldi	r24, 0x00	; 0
    1858:	0c 94 70 0b 	jmp	0x16e0	; 0x16e0 <motors_set_speed>
	}
	else
	{
		motor_backward_lock = lock;
    185c:	80 93 a6 07 	sts	0x07A6, r24	; 0x8007a6 <motor_backward_lock>
    1860:	08 95       	ret

00001862 <motor_set_lock>:
/*
 * Sets the general lock.
 */
void motor_set_lock(bool lock)
{
	if (motor_lock == false && lock == true)
    1862:	90 91 a9 07 	lds	r25, 0x07A9	; 0x8007a9 <motor_lock>
    1866:	91 11       	cpse	r25, r1
    1868:	09 c0       	rjmp	.+18     	; 0x187c <motor_set_lock+0x1a>
    186a:	88 23       	and	r24, r24
    186c:	39 f0       	breq	.+14     	; 0x187c <motor_set_lock+0x1a>
	{
		motor_lock = lock;
    186e:	81 e0       	ldi	r24, 0x01	; 1
    1870:	80 93 a9 07 	sts	0x07A9, r24	; 0x8007a9 <motor_lock>
		motors_set_speed(0, 0);
    1874:	60 e0       	ldi	r22, 0x00	; 0
    1876:	80 e0       	ldi	r24, 0x00	; 0
    1878:	0c 94 70 0b 	jmp	0x16e0	; 0x16e0 <motors_set_speed>
	}
	else
	{
		motor_lock = lock;
    187c:	80 93 a9 07 	sts	0x07A9, r24	; 0x8007a9 <motor_lock>
    1880:	08 95       	ret

00001882 <piezo_init>:
 * Ex. if the note parameter is 4 it will be silent in the length of a quarter note.
 */
void piezo_pause(uint8_t note)
{
	piezo_stop(pace_ms/note);
	piezo_delay(pace_ms/note);
    1882:	80 e4       	ldi	r24, 0x40	; 64
    1884:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    1888:	e1 e8       	ldi	r30, 0x81	; 129
    188a:	f0 e0       	ldi	r31, 0x00	; 0
    188c:	80 81       	ld	r24, Z
    188e:	88 60       	ori	r24, 0x08	; 8
    1890:	80 83       	st	Z, r24
    1892:	21 98       	cbi	0x04, 1	; 4
    1894:	08 95       	ret

00001896 <piezo_stop>:
    1896:	21 98       	cbi	0x04, 1	; 4
    1898:	08 95       	ret

0000189a <piezo_calc_ocr>:

/*
 * Calculates the OCR value to get correct frequency.
 */
uint16_t piezo_calc_ocr(float tone, uint8_t multiplier)
{
    189a:	cf 92       	push	r12
    189c:	df 92       	push	r13
    189e:	ef 92       	push	r14
    18a0:	ff 92       	push	r15
    18a2:	cf 93       	push	r28
    18a4:	c4 2f       	mov	r28, r20
	return (uint16_t)round((double)((F_CPU/(2*128*tone))*multiplier-1));
    18a6:	20 e0       	ldi	r18, 0x00	; 0
    18a8:	30 e0       	ldi	r19, 0x00	; 0
    18aa:	40 e8       	ldi	r20, 0x80	; 128
    18ac:	53 e4       	ldi	r21, 0x43	; 67
    18ae:	0e 94 78 10 	call	0x20f0	; 0x20f0 <__mulsf3>
    18b2:	9b 01       	movw	r18, r22
    18b4:	ac 01       	movw	r20, r24
    18b6:	60 e0       	ldi	r22, 0x00	; 0
    18b8:	74 e2       	ldi	r23, 0x24	; 36
    18ba:	84 ef       	ldi	r24, 0xF4	; 244
    18bc:	9a e4       	ldi	r25, 0x4A	; 74
    18be:	0e 94 25 0f 	call	0x1e4a	; 0x1e4a <__divsf3>
    18c2:	6b 01       	movw	r12, r22
    18c4:	7c 01       	movw	r14, r24
    18c6:	6c 2f       	mov	r22, r28
    18c8:	70 e0       	ldi	r23, 0x00	; 0
    18ca:	80 e0       	ldi	r24, 0x00	; 0
    18cc:	90 e0       	ldi	r25, 0x00	; 0
    18ce:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <__floatsisf>
    18d2:	9b 01       	movw	r18, r22
    18d4:	ac 01       	movw	r20, r24
    18d6:	c7 01       	movw	r24, r14
    18d8:	b6 01       	movw	r22, r12
    18da:	0e 94 78 10 	call	0x20f0	; 0x20f0 <__mulsf3>
    18de:	20 e0       	ldi	r18, 0x00	; 0
    18e0:	30 e0       	ldi	r19, 0x00	; 0
    18e2:	40 e8       	ldi	r20, 0x80	; 128
    18e4:	5f e3       	ldi	r21, 0x3F	; 63
    18e6:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <__subsf3>
    18ea:	0e 94 e5 10 	call	0x21ca	; 0x21ca <round>
    18ee:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <__fixunssfsi>
}
    18f2:	cb 01       	movw	r24, r22
    18f4:	cf 91       	pop	r28
    18f6:	ff 90       	pop	r15
    18f8:	ef 90       	pop	r14
    18fa:	df 90       	pop	r13
    18fc:	cf 90       	pop	r12
    18fe:	08 95       	ret

00001900 <piezo_play_tone_continous>:
 * Starts playing a continous tone.
 * The octave input represent the octave.
 * The tone input represents the tone and takes frequency for the middle octave.
 */
void piezo_play_tone_continous(float tone, uint8_t octave)
{
    1900:	0f 93       	push	r16
    1902:	1f 93       	push	r17
	/* Sets TCCR1B and multiplier to get the right tone to the correct octave. */
	int multiplier;
	switch(octave)
    1904:	04 2f       	mov	r16, r20
    1906:	10 e0       	ldi	r17, 0x00	; 0
    1908:	09 30       	cpi	r16, 0x09	; 9
    190a:	11 05       	cpc	r17, r1
    190c:	08 f0       	brcs	.+2      	; 0x1910 <piezo_play_tone_continous+0x10>
    190e:	59 c0       	rjmp	.+178    	; 0x19c2 <piezo_play_tone_continous+0xc2>
    1910:	f8 01       	movw	r30, r16
    1912:	e0 5b       	subi	r30, 0xB0	; 176
    1914:	ff 4f       	sbci	r31, 0xFF	; 255
	{
		case 8:
		TCCR1B |= (1<<CS11);
    1916:	20 91 81 00 	lds	r18, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
 */
void piezo_play_tone_continous(float tone, uint8_t octave)
{
	/* Sets TCCR1B and multiplier to get the right tone to the correct octave. */
	int multiplier;
	switch(octave)
    191a:	0c 94 46 11 	jmp	0x228c	; 0x228c <__tablejump2__>
	{
		case 8:
		TCCR1B |= (1<<CS11);
    191e:	22 60       	ori	r18, 0x02	; 2
    1920:	20 93 81 00 	sts	0x0081, r18	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
		TCCR1B &=~ ((1<<CS12) | (1<<CS10));
    1924:	20 91 81 00 	lds	r18, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    1928:	2a 7f       	andi	r18, 0xFA	; 250
    192a:	17 c0       	rjmp	.+46     	; 0x195a <piezo_play_tone_continous+0x5a>
		multiplier = 1;
		break;
		
		case 7:
		TCCR1B |= (1<<CS11);
    192c:	22 60       	ori	r18, 0x02	; 2
    192e:	20 93 81 00 	sts	0x0081, r18	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
		TCCR1B &=~ ((1<<CS12) | (1<<CS10));
    1932:	20 91 81 00 	lds	r18, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    1936:	2a 7f       	andi	r18, 0xFA	; 250
    1938:	36 c0       	rjmp	.+108    	; 0x19a6 <piezo_play_tone_continous+0xa6>
		multiplier = 2;
		break;
		
		case 6:
		TCCR1B |= (1<<CS11);
    193a:	22 60       	ori	r18, 0x02	; 2
    193c:	20 93 81 00 	sts	0x0081, r18	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
		TCCR1B &=~ ((1<<CS12) | (1<<CS10));
    1940:	20 91 81 00 	lds	r18, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    1944:	2a 7f       	andi	r18, 0xFA	; 250
    1946:	20 93 81 00 	sts	0x0081, r18	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
		multiplier = 4;
    194a:	44 e0       	ldi	r20, 0x04	; 4
		break;
    194c:	2f c0       	rjmp	.+94     	; 0x19ac <piezo_play_tone_continous+0xac>
		
		case 5:
		TCCR1B |= (1<<CS11) | (1<<CS10);
    194e:	23 60       	ori	r18, 0x03	; 3
    1950:	20 93 81 00 	sts	0x0081, r18	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
		TCCR1B &=~ (1<<CS12);
    1954:	20 91 81 00 	lds	r18, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    1958:	2b 7f       	andi	r18, 0xFB	; 251
    195a:	20 93 81 00 	sts	0x0081, r18	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
		multiplier = 1;
    195e:	41 e0       	ldi	r20, 0x01	; 1
		break;
    1960:	25 c0       	rjmp	.+74     	; 0x19ac <piezo_play_tone_continous+0xac>
		
		case 4:
		TCCR1B |= (1<<CS11) | (1<<CS10);
    1962:	23 60       	ori	r18, 0x03	; 3
    1964:	20 93 81 00 	sts	0x0081, r18	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
		TCCR1B &=~ (1<<CS12);
    1968:	20 91 81 00 	lds	r18, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    196c:	2b 7f       	andi	r18, 0xFB	; 251
    196e:	1b c0       	rjmp	.+54     	; 0x19a6 <piezo_play_tone_continous+0xa6>
		multiplier = 2;
		break;
		
		case 3:
		TCCR1B |= (1<<CS12);
    1970:	24 60       	ori	r18, 0x04	; 4
    1972:	20 93 81 00 	sts	0x0081, r18	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
		TCCR1B &=~ ((1<<CS11) | (1<<CS10));
    1976:	20 91 81 00 	lds	r18, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    197a:	2c 7f       	andi	r18, 0xFC	; 252
    197c:	ee cf       	rjmp	.-36     	; 0x195a <piezo_play_tone_continous+0x5a>
		multiplier = 1;
		break;
		
		case 2:
		TCCR1B |= (1<<CS12);
    197e:	24 60       	ori	r18, 0x04	; 4
    1980:	20 93 81 00 	sts	0x0081, r18	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
		TCCR1B &=~ ((1<<CS11) | (1<<CS10));
    1984:	20 91 81 00 	lds	r18, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    1988:	2c 7f       	andi	r18, 0xFC	; 252
    198a:	0d c0       	rjmp	.+26     	; 0x19a6 <piezo_play_tone_continous+0xa6>
		multiplier = 2;
		break;
		
		case 1:
		TCCR1B |= (1<<CS12) | (1<<CS10);
    198c:	25 60       	ori	r18, 0x05	; 5
    198e:	20 93 81 00 	sts	0x0081, r18	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
		TCCR1B &=~ (1<<CS11);
    1992:	20 91 81 00 	lds	r18, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    1996:	2d 7f       	andi	r18, 0xFD	; 253
    1998:	e0 cf       	rjmp	.-64     	; 0x195a <piezo_play_tone_continous+0x5a>
		multiplier = 1;
		break;
		
		case 0:
		TCCR1B |= (1<<CS12) | (1<<CS10);
    199a:	25 60       	ori	r18, 0x05	; 5
    199c:	20 93 81 00 	sts	0x0081, r18	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
		TCCR1B &=~ (1<<CS11);
    19a0:	20 91 81 00 	lds	r18, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    19a4:	2d 7f       	andi	r18, 0xFD	; 253
    19a6:	20 93 81 00 	sts	0x0081, r18	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
		multiplier = 2;
    19aa:	42 e0       	ldi	r20, 0x02	; 2
		
		default:
		return;
	}
	
	OCR1A = piezo_calc_ocr(tone, multiplier);
    19ac:	0e 94 4d 0c 	call	0x189a	; 0x189a <piezo_calc_ocr>
    19b0:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    19b4:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	TCNT1 = 0;
    19b8:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
    19bc:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	DDRB |= (1<<DDB1);
    19c0:	21 9a       	sbi	0x04, 1	; 4
}
    19c2:	1f 91       	pop	r17
    19c4:	0f 91       	pop	r16
    19c6:	08 95       	ret

000019c8 <song_set>:
/*
 * Sets a song to be played.
 */
void song_set(const song* set_song)
{
	current_song = set_song;
    19c8:	90 93 b1 07 	sts	0x07B1, r25	; 0x8007b1 <current_song+0x1>
    19cc:	80 93 b0 07 	sts	0x07B0, r24	; 0x8007b0 <current_song>
	
	timer = 0;
    19d0:	10 92 ad 07 	sts	0x07AD, r1	; 0x8007ad <timer+0x1>
    19d4:	10 92 ac 07 	sts	0x07AC, r1	; 0x8007ac <timer>
	
	current_note = 0;
    19d8:	10 92 ae 07 	sts	0x07AE, r1	; 0x8007ae <current_note>
	
	playing = false;
    19dc:	10 92 af 07 	sts	0x07AF, r1	; 0x8007af <playing>
    19e0:	08 95       	ret

000019e2 <song_start>:
/*
 * Starts song if there is one set.
 */
void song_start()
{
	if (current_song != NULL)
    19e2:	80 91 b0 07 	lds	r24, 0x07B0	; 0x8007b0 <current_song>
    19e6:	90 91 b1 07 	lds	r25, 0x07B1	; 0x8007b1 <current_song+0x1>
    19ea:	89 2b       	or	r24, r25
    19ec:	49 f0       	breq	.+18     	; 0x1a00 <song_start+0x1e>
	{
		current_note = 0;
    19ee:	10 92 ae 07 	sts	0x07AE, r1	; 0x8007ae <current_note>
		playing = true;
    19f2:	81 e0       	ldi	r24, 0x01	; 1
    19f4:	80 93 af 07 	sts	0x07AF, r24	; 0x8007af <playing>
		timer = 0;
    19f8:	10 92 ad 07 	sts	0x07AD, r1	; 0x8007ad <timer+0x1>
    19fc:	10 92 ac 07 	sts	0x07AC, r1	; 0x8007ac <timer>
    1a00:	08 95       	ret

00001a02 <song_stop>:
/*
 * Stops a playing song.
 */
void song_stop()
{
	playing = false;
    1a02:	10 92 af 07 	sts	0x07AF, r1	; 0x8007af <playing>
	current_song = NULL;
    1a06:	10 92 b1 07 	sts	0x07B1, r1	; 0x8007b1 <current_song+0x1>
    1a0a:	10 92 b0 07 	sts	0x07B0, r1	; 0x8007b0 <current_song>
	piezo_stop();
    1a0e:	0c 94 4b 0c 	jmp	0x1896	; 0x1896 <piezo_stop>

00001a12 <song_playing>:
 * Returns whether a song is playing or not.
 */
bool song_playing()
{
	return playing;
}
    1a12:	80 91 af 07 	lds	r24, 0x07AF	; 0x8007af <playing>
    1a16:	08 95       	ret

00001a18 <song_play>:

/*
 * Continues song and should be called on a frequency of 1kHz.
 */
void song_play()
{
    1a18:	cf 92       	push	r12
    1a1a:	df 92       	push	r13
    1a1c:	ef 92       	push	r14
    1a1e:	ff 92       	push	r15
    1a20:	1f 93       	push	r17
    1a22:	cf 93       	push	r28
    1a24:	df 93       	push	r29
	if (playing)
    1a26:	80 91 af 07 	lds	r24, 0x07AF	; 0x8007af <playing>
    1a2a:	88 23       	and	r24, r24
    1a2c:	09 f4       	brne	.+2      	; 0x1a30 <song_play+0x18>
    1a2e:	6e c0       	rjmp	.+220    	; 0x1b0c <song_play+0xf4>
	{
		if (timer != 0)
    1a30:	80 91 ac 07 	lds	r24, 0x07AC	; 0x8007ac <timer>
    1a34:	90 91 ad 07 	lds	r25, 0x07AD	; 0x8007ad <timer+0x1>
    1a38:	00 97       	sbiw	r24, 0x00	; 0
    1a3a:	29 f0       	breq	.+10     	; 0x1a46 <song_play+0x2e>
		{
			timer--;
    1a3c:	01 97       	sbiw	r24, 0x01	; 1
    1a3e:	90 93 ad 07 	sts	0x07AD, r25	; 0x8007ad <timer+0x1>
    1a42:	80 93 ac 07 	sts	0x07AC, r24	; 0x8007ac <timer>
		}
		
		if (current_note == current_song->number_of_notes && timer == 0) //If its the last note and its time has ended. End song.
    1a46:	e0 91 b0 07 	lds	r30, 0x07B0	; 0x8007b0 <current_song>
    1a4a:	f0 91 b1 07 	lds	r31, 0x07B1	; 0x8007b1 <current_song+0x1>
    1a4e:	20 91 ae 07 	lds	r18, 0x07AE	; 0x8007ae <current_note>
    1a52:	32 81       	ldd	r19, Z+2	; 0x02
    1a54:	80 91 ac 07 	lds	r24, 0x07AC	; 0x8007ac <timer>
    1a58:	90 91 ad 07 	lds	r25, 0x07AD	; 0x8007ad <timer+0x1>
    1a5c:	32 13       	cpse	r19, r18
    1a5e:	0b c0       	rjmp	.+22     	; 0x1a76 <song_play+0x5e>
    1a60:	00 97       	sbiw	r24, 0x00	; 0
    1a62:	49 f4       	brne	.+18     	; 0x1a76 <song_play+0x5e>
			}
			timer = (number) * (current_song->pace_ms/(lenght));
			current_note++;
		}
	}
    1a64:	df 91       	pop	r29
    1a66:	cf 91       	pop	r28
    1a68:	1f 91       	pop	r17
    1a6a:	ff 90       	pop	r15
    1a6c:	ef 90       	pop	r14
    1a6e:	df 90       	pop	r13
    1a70:	cf 90       	pop	r12
			timer--;
		}
		
		if (current_note == current_song->number_of_notes && timer == 0) //If its the last note and its time has ended. End song.
		{
			song_stop();
    1a72:	0c 94 01 0d 	jmp	0x1a02	; 0x1a02 <song_stop>
		}
		else if (timer == 5)
    1a76:	85 30       	cpi	r24, 0x05	; 5
    1a78:	91 05       	cpc	r25, r1
    1a7a:	49 f4       	brne	.+18     	; 0x1a8e <song_play+0x76>
			}
			timer = (number) * (current_song->pace_ms/(lenght));
			current_note++;
		}
	}
    1a7c:	df 91       	pop	r29
    1a7e:	cf 91       	pop	r28
    1a80:	1f 91       	pop	r17
    1a82:	ff 90       	pop	r15
    1a84:	ef 90       	pop	r14
    1a86:	df 90       	pop	r13
    1a88:	cf 90       	pop	r12
		{
			song_stop();
		}
		else if (timer == 5)
		{
			piezo_stop();
    1a8a:	0c 94 4b 0c 	jmp	0x1896	; 0x1896 <piezo_stop>
		}
		else if (timer == 0)
    1a8e:	89 2b       	or	r24, r25
    1a90:	09 f0       	breq	.+2      	; 0x1a94 <song_play+0x7c>
    1a92:	3c c0       	rjmp	.+120    	; 0x1b0c <song_play+0xf4>
		{
			//Loads note values from program memory.
			float tone = pgm_read_float(&(current_song->notes[current_note].tone));
    1a94:	83 81       	ldd	r24, Z+3	; 0x03
    1a96:	94 81       	ldd	r25, Z+4	; 0x04
    1a98:	37 e0       	ldi	r19, 0x07	; 7
    1a9a:	23 9f       	mul	r18, r19
    1a9c:	80 0d       	add	r24, r0
    1a9e:	91 1d       	adc	r25, r1
    1aa0:	11 24       	eor	r1, r1
    1aa2:	fc 01       	movw	r30, r24
    1aa4:	c5 90       	lpm	r12, Z+
    1aa6:	d5 90       	lpm	r13, Z+
    1aa8:	e5 90       	lpm	r14, Z+
    1aaa:	f4 90       	lpm	r15, Z
			uint8_t octave = pgm_read_byte(&(current_song->notes[current_note].octave));
    1aac:	fc 01       	movw	r30, r24
    1aae:	34 96       	adiw	r30, 0x04	; 4
    1ab0:	14 91       	lpm	r17, Z
			uint8_t lenght = pgm_read_byte(&(current_song->notes[current_note].length));
    1ab2:	31 96       	adiw	r30, 0x01	; 1
    1ab4:	d4 91       	lpm	r29, Z
			uint8_t number = pgm_read_byte(&(current_song->notes[current_note].number));
    1ab6:	31 96       	adiw	r30, 0x01	; 1
    1ab8:	c4 91       	lpm	r28, Z
			if (tone != 0)
    1aba:	20 e0       	ldi	r18, 0x00	; 0
    1abc:	30 e0       	ldi	r19, 0x00	; 0
    1abe:	a9 01       	movw	r20, r18
    1ac0:	c7 01       	movw	r24, r14
    1ac2:	b6 01       	movw	r22, r12
    1ac4:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <__cmpsf2>
    1ac8:	88 23       	and	r24, r24
    1aca:	31 f0       	breq	.+12     	; 0x1ad8 <song_play+0xc0>
			{
				piezo_play_tone_continous(tone, octave);
    1acc:	41 2f       	mov	r20, r17
    1ace:	c7 01       	movw	r24, r14
    1ad0:	b6 01       	movw	r22, r12
    1ad2:	0e 94 80 0c 	call	0x1900	; 0x1900 <piezo_play_tone_continous>
    1ad6:	02 c0       	rjmp	.+4      	; 0x1adc <song_play+0xc4>
			}
			else
			{
				piezo_stop();
    1ad8:	0e 94 4b 0c 	call	0x1896	; 0x1896 <piezo_stop>
			}
			timer = (number) * (current_song->pace_ms/(lenght));
    1adc:	e0 91 b0 07 	lds	r30, 0x07B0	; 0x8007b0 <current_song>
    1ae0:	f0 91 b1 07 	lds	r31, 0x07B1	; 0x8007b1 <current_song+0x1>
    1ae4:	6d 2f       	mov	r22, r29
    1ae6:	70 e0       	ldi	r23, 0x00	; 0
    1ae8:	80 81       	ld	r24, Z
    1aea:	91 81       	ldd	r25, Z+1	; 0x01
    1aec:	0e 94 32 11 	call	0x2264	; 0x2264 <__udivmodhi4>
    1af0:	c6 9f       	mul	r28, r22
    1af2:	c0 01       	movw	r24, r0
    1af4:	c7 9f       	mul	r28, r23
    1af6:	90 0d       	add	r25, r0
    1af8:	11 24       	eor	r1, r1
    1afa:	90 93 ad 07 	sts	0x07AD, r25	; 0x8007ad <timer+0x1>
    1afe:	80 93 ac 07 	sts	0x07AC, r24	; 0x8007ac <timer>
			current_note++;
    1b02:	80 91 ae 07 	lds	r24, 0x07AE	; 0x8007ae <current_note>
    1b06:	8f 5f       	subi	r24, 0xFF	; 255
    1b08:	80 93 ae 07 	sts	0x07AE, r24	; 0x8007ae <current_note>
		}
	}
    1b0c:	df 91       	pop	r29
    1b0e:	cf 91       	pop	r28
    1b10:	1f 91       	pop	r17
    1b12:	ff 90       	pop	r15
    1b14:	ef 90       	pop	r14
    1b16:	df 90       	pop	r13
    1b18:	cf 90       	pop	r12
    1b1a:	08 95       	ret

00001b1c <get_mario_song>:
};

const song* get_mario_song()
{
	return &mario_song;
}
    1b1c:	84 e5       	ldi	r24, 0x54	; 84
    1b1e:	91 e0       	ldi	r25, 0x01	; 1
    1b20:	08 95       	ret

00001b22 <get_mii_song>:
};

const song* get_mii_song()
{
	return &mii_song;
}
    1b22:	8f e4       	ldi	r24, 0x4F	; 79
    1b24:	91 e0       	ldi	r25, 0x01	; 1
    1b26:	08 95       	ret

00001b28 <get_allstars_song>:
};

const song* get_allstars_song()
{
	return &allstars_song;
}
    1b28:	8a e4       	ldi	r24, 0x4A	; 74
    1b2a:	91 e0       	ldi	r25, 0x01	; 1
    1b2c:	08 95       	ret

00001b2e <get_halo_theme_song>:
};

const song* get_halo_theme_song()
{
	return &halo_theme_song;
}
    1b2e:	85 e4       	ldi	r24, 0x45	; 69
    1b30:	91 e0       	ldi	r25, 0x01	; 1
    1b32:	08 95       	ret

00001b34 <get_imperial_march_song>:
};

const song* get_imperial_march_song()
{
	return &imperial_march_song;
}
    1b34:	80 e4       	ldi	r24, 0x40	; 64
    1b36:	91 e0       	ldi	r25, 0x01	; 1
    1b38:	08 95       	ret

00001b3a <get_soviet_anthem_song>:
};

const song* get_soviet_anthem_song()
{
	return &soviet_anthem_song;
}
    1b3a:	8b e3       	ldi	r24, 0x3B	; 59
    1b3c:	91 e0       	ldi	r25, 0x01	; 1
    1b3e:	08 95       	ret

00001b40 <get_horn_song>:
};

const song* get_horn_song()
{
	return &horn_song;
}
    1b40:	86 e3       	ldi	r24, 0x36	; 54
    1b42:	91 e0       	ldi	r25, 0x01	; 1
    1b44:	08 95       	ret

00001b46 <get_cantina_band_song>:
};

const song* get_cantina_band_song()
{
	return &cantina_band_song;
}
    1b46:	81 e3       	ldi	r24, 0x31	; 49
    1b48:	91 e0       	ldi	r25, 0x01	; 1
    1b4a:	08 95       	ret

00001b4c <get_mario_galaxy_song>:
};

const song* get_mario_galaxy_song()
{
	return &mario_galaxy_song;
}
    1b4c:	8c e2       	ldi	r24, 0x2C	; 44
    1b4e:	91 e0       	ldi	r25, 0x01	; 1
    1b50:	08 95       	ret

00001b52 <get_pokemon_center_song>:
};

const song* get_pokemon_center_song()
{
	return &pokemon_center_song;
}
    1b52:	87 e2       	ldi	r24, 0x27	; 39
    1b54:	91 e0       	ldi	r25, 0x01	; 1
    1b56:	08 95       	ret

00001b58 <get_petalburg_song>:
};

const song* get_petalburg_song()
{
	return &petalburg_song;
}
    1b58:	82 e2       	ldi	r24, 0x22	; 34
    1b5a:	91 e0       	ldi	r25, 0x01	; 1
    1b5c:	08 95       	ret

00001b5e <display_port_init>:
		spi_master_transmit(0b00010100);
		_delay_us(30);
	}
	PORTC |= (1<<RS_DISP);
	PORTB |= (1<<SS_DISP);
}
    1b5e:	22 9a       	sbi	0x04, 2	; 4
    1b60:	39 9a       	sbi	0x07, 1	; 7
    1b62:	2a 9a       	sbi	0x05, 2	; 5
    1b64:	08 95       	ret

00001b66 <display_init>:
    1b66:	8c b5       	in	r24, 0x2c	; 44
    1b68:	81 60       	ori	r24, 0x01	; 1
    1b6a:	8c bd       	out	0x2c, r24	; 44
    1b6c:	8c b5       	in	r24, 0x2c	; 44
    1b6e:	8d 7f       	andi	r24, 0xFD	; 253
    1b70:	8c bd       	out	0x2c, r24	; 44
    1b72:	2a 98       	cbi	0x05, 2	; 5
    1b74:	89 e3       	ldi	r24, 0x39	; 57
    1b76:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <spi_master_transmit>
    1b7a:	80 e5       	ldi	r24, 0x50	; 80
    1b7c:	8a 95       	dec	r24
    1b7e:	f1 f7       	brne	.-4      	; 0x1b7c <display_init+0x16>
    1b80:	8d e1       	ldi	r24, 0x1D	; 29
    1b82:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <spi_master_transmit>
    1b86:	90 e5       	ldi	r25, 0x50	; 80
    1b88:	9a 95       	dec	r25
    1b8a:	f1 f7       	brne	.-4      	; 0x1b88 <display_init+0x22>
    1b8c:	80 e5       	ldi	r24, 0x50	; 80
    1b8e:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <spi_master_transmit>
    1b92:	80 e5       	ldi	r24, 0x50	; 80
    1b94:	8a 95       	dec	r24
    1b96:	f1 f7       	brne	.-4      	; 0x1b94 <display_init+0x2e>
    1b98:	8c e6       	ldi	r24, 0x6C	; 108
    1b9a:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <spi_master_transmit>
    1b9e:	90 e5       	ldi	r25, 0x50	; 80
    1ba0:	9a 95       	dec	r25
    1ba2:	f1 f7       	brne	.-4      	; 0x1ba0 <display_init+0x3a>
    1ba4:	8c e7       	ldi	r24, 0x7C	; 124
    1ba6:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <spi_master_transmit>
    1baa:	80 e5       	ldi	r24, 0x50	; 80
    1bac:	8a 95       	dec	r24
    1bae:	f1 f7       	brne	.-4      	; 0x1bac <display_init+0x46>
    1bb0:	88 e3       	ldi	r24, 0x38	; 56
    1bb2:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <spi_master_transmit>
    1bb6:	90 e5       	ldi	r25, 0x50	; 80
    1bb8:	9a 95       	dec	r25
    1bba:	f1 f7       	brne	.-4      	; 0x1bb8 <display_init+0x52>
    1bbc:	8c e0       	ldi	r24, 0x0C	; 12
    1bbe:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <spi_master_transmit>
    1bc2:	80 e5       	ldi	r24, 0x50	; 80
    1bc4:	8a 95       	dec	r24
    1bc6:	f1 f7       	brne	.-4      	; 0x1bc4 <display_init+0x5e>
    1bc8:	81 e0       	ldi	r24, 0x01	; 1
    1bca:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <spi_master_transmit>
    1bce:	8f ec       	ldi	r24, 0xCF	; 207
    1bd0:	97 e0       	ldi	r25, 0x07	; 7
    1bd2:	01 97       	sbiw	r24, 0x01	; 1
    1bd4:	f1 f7       	brne	.-4      	; 0x1bd2 <display_init+0x6c>
    1bd6:	00 c0       	rjmp	.+0      	; 0x1bd8 <display_init+0x72>
    1bd8:	00 00       	nop
    1bda:	86 e0       	ldi	r24, 0x06	; 6
    1bdc:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <spi_master_transmit>
    1be0:	8f e3       	ldi	r24, 0x3F	; 63
    1be2:	9f e1       	ldi	r25, 0x1F	; 31
    1be4:	01 97       	sbiw	r24, 0x01	; 1
    1be6:	f1 f7       	brne	.-4      	; 0x1be4 <display_init+0x7e>
    1be8:	00 c0       	rjmp	.+0      	; 0x1bea <display_init+0x84>
    1bea:	00 00       	nop
    1bec:	41 9a       	sbi	0x08, 1	; 8
    1bee:	2a 9a       	sbi	0x05, 2	; 5
    1bf0:	80 e0       	ldi	r24, 0x00	; 0
    1bf2:	90 e0       	ldi	r25, 0x00	; 0
    1bf4:	20 e2       	ldi	r18, 0x20	; 32
    1bf6:	fc 01       	movw	r30, r24
    1bf8:	ee 54       	subi	r30, 0x4E	; 78
    1bfa:	f8 4f       	sbci	r31, 0xF8	; 248
    1bfc:	20 83       	st	Z, r18
    1bfe:	01 96       	adiw	r24, 0x01	; 1
    1c00:	80 33       	cpi	r24, 0x30	; 48
    1c02:	91 05       	cpc	r25, r1
    1c04:	c1 f7       	brne	.-16     	; 0x1bf6 <display_init+0x90>
    1c06:	10 92 e2 07 	sts	0x07E2, r1	; 0x8007e2 <buff+0x30>
    1c0a:	10 92 e3 07 	sts	0x07E3, r1	; 0x8007e3 <buff_uppdated>
    1c0e:	08 95       	ret

00001c10 <display_put_char>:
    1c10:	9c b5       	in	r25, 0x2c	; 44
    1c12:	91 60       	ori	r25, 0x01	; 1
    1c14:	9c bd       	out	0x2c, r25	; 44
    1c16:	9c b5       	in	r25, 0x2c	; 44
    1c18:	9d 7f       	andi	r25, 0xFD	; 253
    1c1a:	9c bd       	out	0x2c, r25	; 44
    1c1c:	2a 98       	cbi	0x05, 2	; 5
    1c1e:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <spi_master_transmit>
    1c22:	80 e5       	ldi	r24, 0x50	; 80
    1c24:	8a 95       	dec	r24
    1c26:	f1 f7       	brne	.-4      	; 0x1c24 <display_put_char+0x14>
    1c28:	2a 9a       	sbi	0x05, 2	; 5
    1c2a:	80 e0       	ldi	r24, 0x00	; 0
    1c2c:	90 e0       	ldi	r25, 0x00	; 0
    1c2e:	08 95       	ret

00001c30 <display_clear>:
/*
 * Clears the display.
 */
void display_clear()
{
	SPCR |= (1<<SPR0);
    1c30:	8c b5       	in	r24, 0x2c	; 44
    1c32:	81 60       	ori	r24, 0x01	; 1
    1c34:	8c bd       	out	0x2c, r24	; 44
	SPCR &=~ (1<<SPR1);
    1c36:	8c b5       	in	r24, 0x2c	; 44
    1c38:	8d 7f       	andi	r24, 0xFD	; 253
    1c3a:	8c bd       	out	0x2c, r24	; 44
	PORTC &=~ (1<<RS_DISP);
    1c3c:	41 98       	cbi	0x08, 1	; 8
	PORTB &=~ (1<<SS_DISP);
    1c3e:	2a 98       	cbi	0x05, 2	; 5
	spi_master_transmit(0x01);
    1c40:	81 e0       	ldi	r24, 0x01	; 1
    1c42:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <spi_master_transmit>
    1c46:	8f e3       	ldi	r24, 0x3F	; 63
    1c48:	9f e1       	ldi	r25, 0x1F	; 31
    1c4a:	01 97       	sbiw	r24, 0x01	; 1
    1c4c:	f1 f7       	brne	.-4      	; 0x1c4a <display_clear+0x1a>
    1c4e:	00 c0       	rjmp	.+0      	; 0x1c50 <display_clear+0x20>
    1c50:	00 00       	nop
	_delay_ms(4);
	PORTC |= (1<<RS_DISP);
    1c52:	41 9a       	sbi	0x08, 1	; 8
	PORTB |= (1<<SS_DISP);
    1c54:	2a 9a       	sbi	0x05, 2	; 5
    1c56:	08 95       	ret

00001c58 <display_buff>:
/*
 * Displays whats in the display buffer if it has changed.
 */
void display_buff(void)
{
	if (buff_uppdated == true)
    1c58:	80 91 e3 07 	lds	r24, 0x07E3	; 0x8007e3 <buff_uppdated>
    1c5c:	88 23       	and	r24, r24
    1c5e:	91 f0       	breq	.+36     	; 0x1c84 <display_buff+0x2c>
	{
		display_clear();
    1c60:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <display_clear>
		printf("%s", buff);
    1c64:	82 eb       	ldi	r24, 0xB2	; 178
    1c66:	97 e0       	ldi	r25, 0x07	; 7
    1c68:	9f 93       	push	r25
    1c6a:	8f 93       	push	r24
    1c6c:	89 e5       	ldi	r24, 0x59	; 89
    1c6e:	91 e0       	ldi	r25, 0x01	; 1
    1c70:	9f 93       	push	r25
    1c72:	8f 93       	push	r24
    1c74:	0e 94 a6 11 	call	0x234c	; 0x234c <printf>
		buff_uppdated = false;
    1c78:	10 92 e3 07 	sts	0x07E3, r1	; 0x8007e3 <buff_uppdated>
    1c7c:	0f 90       	pop	r0
    1c7e:	0f 90       	pop	r0
    1c80:	0f 90       	pop	r0
    1c82:	0f 90       	pop	r0
    1c84:	08 95       	ret

00001c86 <display_add_to_buff>:

/*
 * Adds a string to the display buffer at a position.
 */
void display_add_to_buff(const char* string, uint8_t length, uint8_t position)
{
    1c86:	24 2f       	mov	r18, r20
	strncpy((char*)buff + position, string, length);
    1c88:	46 2f       	mov	r20, r22
    1c8a:	50 e0       	ldi	r21, 0x00	; 0
    1c8c:	30 e0       	ldi	r19, 0x00	; 0
    1c8e:	bc 01       	movw	r22, r24
    1c90:	c9 01       	movw	r24, r18
    1c92:	8e 54       	subi	r24, 0x4E	; 78
    1c94:	98 4f       	sbci	r25, 0xF8	; 248
    1c96:	0e 94 6a 11 	call	0x22d4	; 0x22d4 <strncpy>
	buff_uppdated = true;
    1c9a:	81 e0       	ldi	r24, 0x01	; 1
    1c9c:	80 93 e3 07 	sts	0x07E3, r24	; 0x8007e3 <buff_uppdated>
    1ca0:	08 95       	ret

00001ca2 <spi_master_init>:
/*
 * Initialize spi in master mode.
 */
void spi_master_init(void)
{
	DDRB |= (1<<SCK) | (1<<MOSI);
    1ca2:	84 b1       	in	r24, 0x04	; 4
    1ca4:	88 62       	ori	r24, 0x28	; 40
    1ca6:	84 b9       	out	0x04, r24	; 4
	SPCR |= (1<<SPE) | (1<<MSTR);
    1ca8:	8c b5       	in	r24, 0x2c	; 44
    1caa:	80 65       	ori	r24, 0x50	; 80
    1cac:	8c bd       	out	0x2c, r24	; 44
	SPSR |= (1<<SPI2X);
    1cae:	8d b5       	in	r24, 0x2d	; 45
    1cb0:	81 60       	ori	r24, 0x01	; 1
    1cb2:	8d bd       	out	0x2d, r24	; 45
	SPCR &=~ ((1<<CPOL) | (1<<CPHA)); /* SPI mode 0*/
    1cb4:	8c b5       	in	r24, 0x2c	; 44
    1cb6:	83 7f       	andi	r24, 0xF3	; 243
    1cb8:	8c bd       	out	0x2c, r24	; 44
    1cba:	08 95       	ret

00001cbc <spi_master_transmit>:
/*
 * Sends data through spi.
 */
void spi_master_transmit(uint8_t data)
{
	SPDR = data;
    1cbc:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1<<SPIF)));
    1cbe:	0d b4       	in	r0, 0x2d	; 45
    1cc0:	07 fe       	sbrs	r0, 7
    1cc2:	fd cf       	rjmp	.-6      	; 0x1cbe <spi_master_transmit+0x2>
    1cc4:	08 95       	ret

00001cc6 <uart_send_line>:
 */
bool uart_receive_byte(uint8_t* buffer){
	if(!( UCSR0A & (1<<RXC0))) return false;
	*buffer = UDR0;
	return true;
}
    1cc6:	fc 01       	movw	r30, r24
    1cc8:	91 91       	ld	r25, Z+
    1cca:	99 23       	and	r25, r25
    1ccc:	39 f0       	breq	.+14     	; 0x1cdc <uart_send_line+0x16>
    1cce:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
    1cd2:	85 ff       	sbrs	r24, 5
    1cd4:	fc cf       	rjmp	.-8      	; 0x1cce <uart_send_line+0x8>
    1cd6:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    1cda:	f6 cf       	rjmp	.-20     	; 0x1cc8 <uart_send_line+0x2>
    1cdc:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
    1ce0:	85 ff       	sbrs	r24, 5
    1ce2:	fc cf       	rjmp	.-8      	; 0x1cdc <uart_send_line+0x16>
    1ce4:	8a e0       	ldi	r24, 0x0A	; 10
    1ce6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    1cea:	08 95       	ret

00001cec <uart_init>:

/*
 * Initializes uart.
 */
void uart_init(){
	UBRR0 = 51;		//9600 baud rate
    1cec:	83 e3       	ldi	r24, 0x33	; 51
    1cee:	90 e0       	ldi	r25, 0x00	; 0
    1cf0:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
    1cf4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UCSR0B = (1<<RXEN0)|(1<<TXEN0)|(1<<RXCIE0);
    1cf8:	88 e9       	ldi	r24, 0x98	; 152
    1cfa:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	//Set frame format: 8data, 1stop bit
	UCSR0C = (0<<USBS0)|(3<<UCSZ00);
    1cfe:	86 e0       	ldi	r24, 0x06	; 6
    1d00:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
    1d04:	08 95       	ret

00001d06 <ws2812_sendarray_mask>:
void inline ws2812_sendarray_mask(uint8_t *data,uint16_t datlen,uint8_t maskhi)
{
  uint8_t curbyte,ctr,masklo;
  uint8_t sreg_prev;
  
  ws2812_DDRREG |= maskhi; // Enable output
    1d06:	2a b1       	in	r18, 0x0a	; 10
    1d08:	24 2b       	or	r18, r20
    1d0a:	2a b9       	out	0x0a, r18	; 10
  
  masklo	=~maskhi&ws2812_PORTREG;
    1d0c:	2b b1       	in	r18, 0x0b	; 11
    1d0e:	34 2f       	mov	r19, r20
    1d10:	30 95       	com	r19
    1d12:	23 23       	and	r18, r19
  maskhi |=        ws2812_PORTREG;
    1d14:	3b b1       	in	r19, 0x0b	; 11
    1d16:	43 2b       	or	r20, r19
  
  sreg_prev=SREG;
    1d18:	3f b7       	in	r19, 0x3f	; 63
#ifdef interrupt_is_disabled
  cli();  
    1d1a:	f8 94       	cli
    1d1c:	fc 01       	movw	r30, r24
    1d1e:	68 0f       	add	r22, r24
    1d20:	79 1f       	adc	r23, r25
#endif  

  while (datlen--) {
    1d22:	e6 17       	cp	r30, r22
    1d24:	f7 07       	cpc	r31, r23
    1d26:	61 f0       	breq	.+24     	; 0x1d40 <loop42+0x14>
    curbyte=*data++;
    1d28:	81 91       	ld	r24, Z+
    
    asm volatile(
    1d2a:	98 e0       	ldi	r25, 0x08	; 8

00001d2c <loop42>:
    1d2c:	4b b9       	out	0x0b, r20	; 11
    1d2e:	87 ff       	sbrs	r24, 7
    1d30:	2b b9       	out	0x0b, r18	; 11
    1d32:	88 0f       	add	r24, r24
    1d34:	00 00       	nop
    1d36:	07 f4       	brid	.+0      	; 0x1d38 <loop42+0xc>
    1d38:	2b b9       	out	0x0b, r18	; 11
    1d3a:	9a 95       	dec	r25
    1d3c:	b9 f7       	brne	.-18     	; 0x1d2c <loop42>
    1d3e:	f1 cf       	rjmp	.-30     	; 0x1d22 <ws2812_sendarray_mask+0x1c>
    :	"=&d" (ctr)
    :	"r" (curbyte), "I" (_SFR_IO_ADDR(ws2812_PORTREG)), "r" (maskhi), "r" (masklo)
    );
  }
  
  SREG=sreg_prev;
    1d40:	3f bf       	out	0x3f, r19	; 63
    1d42:	08 95       	ret

00001d44 <ws2812_setleds_pin>:
   ws2812_setleds_pin(ledarray,leds, _BV(ws2812_pin));
}

void inline ws2812_setleds_pin(struct cRGB *ledarray, uint16_t leds, uint8_t pinmask)
{
  ws2812_sendarray_mask((uint8_t*)ledarray,leds+leds+leds,pinmask);
    1d44:	9b 01       	movw	r18, r22
    1d46:	22 0f       	add	r18, r18
    1d48:	33 1f       	adc	r19, r19
    1d4a:	62 0f       	add	r22, r18
    1d4c:	73 1f       	adc	r23, r19
    1d4e:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <ws2812_sendarray_mask>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1d52:	87 e5       	ldi	r24, 0x57	; 87
    1d54:	92 e0       	ldi	r25, 0x02	; 2
    1d56:	01 97       	sbiw	r24, 0x01	; 1
    1d58:	f1 f7       	brne	.-4      	; 0x1d56 <ws2812_setleds_pin+0x12>
    1d5a:	00 c0       	rjmp	.+0      	; 0x1d5c <ws2812_setleds_pin+0x18>
    1d5c:	00 00       	nop
    1d5e:	08 95       	ret

00001d60 <ws2812_setleds>:
#define interrupt_is_disabled
 
// Setleds for standard RGB 
void inline ws2812_setleds(struct cRGB *ledarray, uint16_t leds)
{
   ws2812_setleds_pin(ledarray,leds, _BV(ws2812_pin));
    1d60:	40 e1       	ldi	r20, 0x10	; 16
    1d62:	0c 94 a2 0e 	jmp	0x1d44	; 0x1d44 <ws2812_setleds_pin>

00001d66 <__subsf3>:
    1d66:	50 58       	subi	r21, 0x80	; 128

00001d68 <__addsf3>:
    1d68:	bb 27       	eor	r27, r27
    1d6a:	aa 27       	eor	r26, r26
    1d6c:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <__addsf3x>
    1d70:	0c 94 3e 10 	jmp	0x207c	; 0x207c <__fp_round>
    1d74:	0e 94 30 10 	call	0x2060	; 0x2060 <__fp_pscA>
    1d78:	38 f0       	brcs	.+14     	; 0x1d88 <__addsf3+0x20>
    1d7a:	0e 94 37 10 	call	0x206e	; 0x206e <__fp_pscB>
    1d7e:	20 f0       	brcs	.+8      	; 0x1d88 <__addsf3+0x20>
    1d80:	39 f4       	brne	.+14     	; 0x1d90 <__addsf3+0x28>
    1d82:	9f 3f       	cpi	r25, 0xFF	; 255
    1d84:	19 f4       	brne	.+6      	; 0x1d8c <__addsf3+0x24>
    1d86:	26 f4       	brtc	.+8      	; 0x1d90 <__addsf3+0x28>
    1d88:	0c 94 2d 10 	jmp	0x205a	; 0x205a <__fp_nan>
    1d8c:	0e f4       	brtc	.+2      	; 0x1d90 <__addsf3+0x28>
    1d8e:	e0 95       	com	r30
    1d90:	e7 fb       	bst	r30, 7
    1d92:	0c 94 27 10 	jmp	0x204e	; 0x204e <__fp_inf>

00001d96 <__addsf3x>:
    1d96:	e9 2f       	mov	r30, r25
    1d98:	0e 94 4f 10 	call	0x209e	; 0x209e <__fp_split3>
    1d9c:	58 f3       	brcs	.-42     	; 0x1d74 <__addsf3+0xc>
    1d9e:	ba 17       	cp	r27, r26
    1da0:	62 07       	cpc	r22, r18
    1da2:	73 07       	cpc	r23, r19
    1da4:	84 07       	cpc	r24, r20
    1da6:	95 07       	cpc	r25, r21
    1da8:	20 f0       	brcs	.+8      	; 0x1db2 <__addsf3x+0x1c>
    1daa:	79 f4       	brne	.+30     	; 0x1dca <__addsf3x+0x34>
    1dac:	a6 f5       	brtc	.+104    	; 0x1e16 <__addsf3x+0x80>
    1dae:	0c 94 71 10 	jmp	0x20e2	; 0x20e2 <__fp_zero>
    1db2:	0e f4       	brtc	.+2      	; 0x1db6 <__addsf3x+0x20>
    1db4:	e0 95       	com	r30
    1db6:	0b 2e       	mov	r0, r27
    1db8:	ba 2f       	mov	r27, r26
    1dba:	a0 2d       	mov	r26, r0
    1dbc:	0b 01       	movw	r0, r22
    1dbe:	b9 01       	movw	r22, r18
    1dc0:	90 01       	movw	r18, r0
    1dc2:	0c 01       	movw	r0, r24
    1dc4:	ca 01       	movw	r24, r20
    1dc6:	a0 01       	movw	r20, r0
    1dc8:	11 24       	eor	r1, r1
    1dca:	ff 27       	eor	r31, r31
    1dcc:	59 1b       	sub	r21, r25
    1dce:	99 f0       	breq	.+38     	; 0x1df6 <__addsf3x+0x60>
    1dd0:	59 3f       	cpi	r21, 0xF9	; 249
    1dd2:	50 f4       	brcc	.+20     	; 0x1de8 <__addsf3x+0x52>
    1dd4:	50 3e       	cpi	r21, 0xE0	; 224
    1dd6:	68 f1       	brcs	.+90     	; 0x1e32 <__addsf3x+0x9c>
    1dd8:	1a 16       	cp	r1, r26
    1dda:	f0 40       	sbci	r31, 0x00	; 0
    1ddc:	a2 2f       	mov	r26, r18
    1dde:	23 2f       	mov	r18, r19
    1de0:	34 2f       	mov	r19, r20
    1de2:	44 27       	eor	r20, r20
    1de4:	58 5f       	subi	r21, 0xF8	; 248
    1de6:	f3 cf       	rjmp	.-26     	; 0x1dce <__addsf3x+0x38>
    1de8:	46 95       	lsr	r20
    1dea:	37 95       	ror	r19
    1dec:	27 95       	ror	r18
    1dee:	a7 95       	ror	r26
    1df0:	f0 40       	sbci	r31, 0x00	; 0
    1df2:	53 95       	inc	r21
    1df4:	c9 f7       	brne	.-14     	; 0x1de8 <__addsf3x+0x52>
    1df6:	7e f4       	brtc	.+30     	; 0x1e16 <__addsf3x+0x80>
    1df8:	1f 16       	cp	r1, r31
    1dfa:	ba 0b       	sbc	r27, r26
    1dfc:	62 0b       	sbc	r22, r18
    1dfe:	73 0b       	sbc	r23, r19
    1e00:	84 0b       	sbc	r24, r20
    1e02:	ba f0       	brmi	.+46     	; 0x1e32 <__addsf3x+0x9c>
    1e04:	91 50       	subi	r25, 0x01	; 1
    1e06:	a1 f0       	breq	.+40     	; 0x1e30 <__addsf3x+0x9a>
    1e08:	ff 0f       	add	r31, r31
    1e0a:	bb 1f       	adc	r27, r27
    1e0c:	66 1f       	adc	r22, r22
    1e0e:	77 1f       	adc	r23, r23
    1e10:	88 1f       	adc	r24, r24
    1e12:	c2 f7       	brpl	.-16     	; 0x1e04 <__addsf3x+0x6e>
    1e14:	0e c0       	rjmp	.+28     	; 0x1e32 <__addsf3x+0x9c>
    1e16:	ba 0f       	add	r27, r26
    1e18:	62 1f       	adc	r22, r18
    1e1a:	73 1f       	adc	r23, r19
    1e1c:	84 1f       	adc	r24, r20
    1e1e:	48 f4       	brcc	.+18     	; 0x1e32 <__addsf3x+0x9c>
    1e20:	87 95       	ror	r24
    1e22:	77 95       	ror	r23
    1e24:	67 95       	ror	r22
    1e26:	b7 95       	ror	r27
    1e28:	f7 95       	ror	r31
    1e2a:	9e 3f       	cpi	r25, 0xFE	; 254
    1e2c:	08 f0       	brcs	.+2      	; 0x1e30 <__addsf3x+0x9a>
    1e2e:	b0 cf       	rjmp	.-160    	; 0x1d90 <__addsf3+0x28>
    1e30:	93 95       	inc	r25
    1e32:	88 0f       	add	r24, r24
    1e34:	08 f0       	brcs	.+2      	; 0x1e38 <__addsf3x+0xa2>
    1e36:	99 27       	eor	r25, r25
    1e38:	ee 0f       	add	r30, r30
    1e3a:	97 95       	ror	r25
    1e3c:	87 95       	ror	r24
    1e3e:	08 95       	ret

00001e40 <__cmpsf2>:
    1e40:	0e 94 03 10 	call	0x2006	; 0x2006 <__fp_cmp>
    1e44:	08 f4       	brcc	.+2      	; 0x1e48 <__cmpsf2+0x8>
    1e46:	81 e0       	ldi	r24, 0x01	; 1
    1e48:	08 95       	ret

00001e4a <__divsf3>:
    1e4a:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <__divsf3x>
    1e4e:	0c 94 3e 10 	jmp	0x207c	; 0x207c <__fp_round>
    1e52:	0e 94 37 10 	call	0x206e	; 0x206e <__fp_pscB>
    1e56:	58 f0       	brcs	.+22     	; 0x1e6e <__divsf3+0x24>
    1e58:	0e 94 30 10 	call	0x2060	; 0x2060 <__fp_pscA>
    1e5c:	40 f0       	brcs	.+16     	; 0x1e6e <__divsf3+0x24>
    1e5e:	29 f4       	brne	.+10     	; 0x1e6a <__divsf3+0x20>
    1e60:	5f 3f       	cpi	r21, 0xFF	; 255
    1e62:	29 f0       	breq	.+10     	; 0x1e6e <__divsf3+0x24>
    1e64:	0c 94 27 10 	jmp	0x204e	; 0x204e <__fp_inf>
    1e68:	51 11       	cpse	r21, r1
    1e6a:	0c 94 72 10 	jmp	0x20e4	; 0x20e4 <__fp_szero>
    1e6e:	0c 94 2d 10 	jmp	0x205a	; 0x205a <__fp_nan>

00001e72 <__divsf3x>:
    1e72:	0e 94 4f 10 	call	0x209e	; 0x209e <__fp_split3>
    1e76:	68 f3       	brcs	.-38     	; 0x1e52 <__divsf3+0x8>

00001e78 <__divsf3_pse>:
    1e78:	99 23       	and	r25, r25
    1e7a:	b1 f3       	breq	.-20     	; 0x1e68 <__divsf3+0x1e>
    1e7c:	55 23       	and	r21, r21
    1e7e:	91 f3       	breq	.-28     	; 0x1e64 <__divsf3+0x1a>
    1e80:	95 1b       	sub	r25, r21
    1e82:	55 0b       	sbc	r21, r21
    1e84:	bb 27       	eor	r27, r27
    1e86:	aa 27       	eor	r26, r26
    1e88:	62 17       	cp	r22, r18
    1e8a:	73 07       	cpc	r23, r19
    1e8c:	84 07       	cpc	r24, r20
    1e8e:	38 f0       	brcs	.+14     	; 0x1e9e <__divsf3_pse+0x26>
    1e90:	9f 5f       	subi	r25, 0xFF	; 255
    1e92:	5f 4f       	sbci	r21, 0xFF	; 255
    1e94:	22 0f       	add	r18, r18
    1e96:	33 1f       	adc	r19, r19
    1e98:	44 1f       	adc	r20, r20
    1e9a:	aa 1f       	adc	r26, r26
    1e9c:	a9 f3       	breq	.-22     	; 0x1e88 <__divsf3_pse+0x10>
    1e9e:	35 d0       	rcall	.+106    	; 0x1f0a <__divsf3_pse+0x92>
    1ea0:	0e 2e       	mov	r0, r30
    1ea2:	3a f0       	brmi	.+14     	; 0x1eb2 <__divsf3_pse+0x3a>
    1ea4:	e0 e8       	ldi	r30, 0x80	; 128
    1ea6:	32 d0       	rcall	.+100    	; 0x1f0c <__divsf3_pse+0x94>
    1ea8:	91 50       	subi	r25, 0x01	; 1
    1eaa:	50 40       	sbci	r21, 0x00	; 0
    1eac:	e6 95       	lsr	r30
    1eae:	00 1c       	adc	r0, r0
    1eb0:	ca f7       	brpl	.-14     	; 0x1ea4 <__divsf3_pse+0x2c>
    1eb2:	2b d0       	rcall	.+86     	; 0x1f0a <__divsf3_pse+0x92>
    1eb4:	fe 2f       	mov	r31, r30
    1eb6:	29 d0       	rcall	.+82     	; 0x1f0a <__divsf3_pse+0x92>
    1eb8:	66 0f       	add	r22, r22
    1eba:	77 1f       	adc	r23, r23
    1ebc:	88 1f       	adc	r24, r24
    1ebe:	bb 1f       	adc	r27, r27
    1ec0:	26 17       	cp	r18, r22
    1ec2:	37 07       	cpc	r19, r23
    1ec4:	48 07       	cpc	r20, r24
    1ec6:	ab 07       	cpc	r26, r27
    1ec8:	b0 e8       	ldi	r27, 0x80	; 128
    1eca:	09 f0       	breq	.+2      	; 0x1ece <__divsf3_pse+0x56>
    1ecc:	bb 0b       	sbc	r27, r27
    1ece:	80 2d       	mov	r24, r0
    1ed0:	bf 01       	movw	r22, r30
    1ed2:	ff 27       	eor	r31, r31
    1ed4:	93 58       	subi	r25, 0x83	; 131
    1ed6:	5f 4f       	sbci	r21, 0xFF	; 255
    1ed8:	3a f0       	brmi	.+14     	; 0x1ee8 <__divsf3_pse+0x70>
    1eda:	9e 3f       	cpi	r25, 0xFE	; 254
    1edc:	51 05       	cpc	r21, r1
    1ede:	78 f0       	brcs	.+30     	; 0x1efe <__divsf3_pse+0x86>
    1ee0:	0c 94 27 10 	jmp	0x204e	; 0x204e <__fp_inf>
    1ee4:	0c 94 72 10 	jmp	0x20e4	; 0x20e4 <__fp_szero>
    1ee8:	5f 3f       	cpi	r21, 0xFF	; 255
    1eea:	e4 f3       	brlt	.-8      	; 0x1ee4 <__divsf3_pse+0x6c>
    1eec:	98 3e       	cpi	r25, 0xE8	; 232
    1eee:	d4 f3       	brlt	.-12     	; 0x1ee4 <__divsf3_pse+0x6c>
    1ef0:	86 95       	lsr	r24
    1ef2:	77 95       	ror	r23
    1ef4:	67 95       	ror	r22
    1ef6:	b7 95       	ror	r27
    1ef8:	f7 95       	ror	r31
    1efa:	9f 5f       	subi	r25, 0xFF	; 255
    1efc:	c9 f7       	brne	.-14     	; 0x1ef0 <__divsf3_pse+0x78>
    1efe:	88 0f       	add	r24, r24
    1f00:	91 1d       	adc	r25, r1
    1f02:	96 95       	lsr	r25
    1f04:	87 95       	ror	r24
    1f06:	97 f9       	bld	r25, 7
    1f08:	08 95       	ret
    1f0a:	e1 e0       	ldi	r30, 0x01	; 1
    1f0c:	66 0f       	add	r22, r22
    1f0e:	77 1f       	adc	r23, r23
    1f10:	88 1f       	adc	r24, r24
    1f12:	bb 1f       	adc	r27, r27
    1f14:	62 17       	cp	r22, r18
    1f16:	73 07       	cpc	r23, r19
    1f18:	84 07       	cpc	r24, r20
    1f1a:	ba 07       	cpc	r27, r26
    1f1c:	20 f0       	brcs	.+8      	; 0x1f26 <__divsf3_pse+0xae>
    1f1e:	62 1b       	sub	r22, r18
    1f20:	73 0b       	sbc	r23, r19
    1f22:	84 0b       	sbc	r24, r20
    1f24:	ba 0b       	sbc	r27, r26
    1f26:	ee 1f       	adc	r30, r30
    1f28:	88 f7       	brcc	.-30     	; 0x1f0c <__divsf3_pse+0x94>
    1f2a:	e0 95       	com	r30
    1f2c:	08 95       	ret

00001f2e <__fixunssfsi>:
    1f2e:	0e 94 57 10 	call	0x20ae	; 0x20ae <__fp_splitA>
    1f32:	88 f0       	brcs	.+34     	; 0x1f56 <__fixunssfsi+0x28>
    1f34:	9f 57       	subi	r25, 0x7F	; 127
    1f36:	98 f0       	brcs	.+38     	; 0x1f5e <__fixunssfsi+0x30>
    1f38:	b9 2f       	mov	r27, r25
    1f3a:	99 27       	eor	r25, r25
    1f3c:	b7 51       	subi	r27, 0x17	; 23
    1f3e:	b0 f0       	brcs	.+44     	; 0x1f6c <__fixunssfsi+0x3e>
    1f40:	e1 f0       	breq	.+56     	; 0x1f7a <__fixunssfsi+0x4c>
    1f42:	66 0f       	add	r22, r22
    1f44:	77 1f       	adc	r23, r23
    1f46:	88 1f       	adc	r24, r24
    1f48:	99 1f       	adc	r25, r25
    1f4a:	1a f0       	brmi	.+6      	; 0x1f52 <__fixunssfsi+0x24>
    1f4c:	ba 95       	dec	r27
    1f4e:	c9 f7       	brne	.-14     	; 0x1f42 <__fixunssfsi+0x14>
    1f50:	14 c0       	rjmp	.+40     	; 0x1f7a <__fixunssfsi+0x4c>
    1f52:	b1 30       	cpi	r27, 0x01	; 1
    1f54:	91 f0       	breq	.+36     	; 0x1f7a <__fixunssfsi+0x4c>
    1f56:	0e 94 71 10 	call	0x20e2	; 0x20e2 <__fp_zero>
    1f5a:	b1 e0       	ldi	r27, 0x01	; 1
    1f5c:	08 95       	ret
    1f5e:	0c 94 71 10 	jmp	0x20e2	; 0x20e2 <__fp_zero>
    1f62:	67 2f       	mov	r22, r23
    1f64:	78 2f       	mov	r23, r24
    1f66:	88 27       	eor	r24, r24
    1f68:	b8 5f       	subi	r27, 0xF8	; 248
    1f6a:	39 f0       	breq	.+14     	; 0x1f7a <__fixunssfsi+0x4c>
    1f6c:	b9 3f       	cpi	r27, 0xF9	; 249
    1f6e:	cc f3       	brlt	.-14     	; 0x1f62 <__fixunssfsi+0x34>
    1f70:	86 95       	lsr	r24
    1f72:	77 95       	ror	r23
    1f74:	67 95       	ror	r22
    1f76:	b3 95       	inc	r27
    1f78:	d9 f7       	brne	.-10     	; 0x1f70 <__fixunssfsi+0x42>
    1f7a:	3e f4       	brtc	.+14     	; 0x1f8a <__fixunssfsi+0x5c>
    1f7c:	90 95       	com	r25
    1f7e:	80 95       	com	r24
    1f80:	70 95       	com	r23
    1f82:	61 95       	neg	r22
    1f84:	7f 4f       	sbci	r23, 0xFF	; 255
    1f86:	8f 4f       	sbci	r24, 0xFF	; 255
    1f88:	9f 4f       	sbci	r25, 0xFF	; 255
    1f8a:	08 95       	ret

00001f8c <__floatunsisf>:
    1f8c:	e8 94       	clt
    1f8e:	09 c0       	rjmp	.+18     	; 0x1fa2 <__floatsisf+0x12>

00001f90 <__floatsisf>:
    1f90:	97 fb       	bst	r25, 7
    1f92:	3e f4       	brtc	.+14     	; 0x1fa2 <__floatsisf+0x12>
    1f94:	90 95       	com	r25
    1f96:	80 95       	com	r24
    1f98:	70 95       	com	r23
    1f9a:	61 95       	neg	r22
    1f9c:	7f 4f       	sbci	r23, 0xFF	; 255
    1f9e:	8f 4f       	sbci	r24, 0xFF	; 255
    1fa0:	9f 4f       	sbci	r25, 0xFF	; 255
    1fa2:	99 23       	and	r25, r25
    1fa4:	a9 f0       	breq	.+42     	; 0x1fd0 <__floatsisf+0x40>
    1fa6:	f9 2f       	mov	r31, r25
    1fa8:	96 e9       	ldi	r25, 0x96	; 150
    1faa:	bb 27       	eor	r27, r27
    1fac:	93 95       	inc	r25
    1fae:	f6 95       	lsr	r31
    1fb0:	87 95       	ror	r24
    1fb2:	77 95       	ror	r23
    1fb4:	67 95       	ror	r22
    1fb6:	b7 95       	ror	r27
    1fb8:	f1 11       	cpse	r31, r1
    1fba:	f8 cf       	rjmp	.-16     	; 0x1fac <__floatsisf+0x1c>
    1fbc:	fa f4       	brpl	.+62     	; 0x1ffc <__floatsisf+0x6c>
    1fbe:	bb 0f       	add	r27, r27
    1fc0:	11 f4       	brne	.+4      	; 0x1fc6 <__floatsisf+0x36>
    1fc2:	60 ff       	sbrs	r22, 0
    1fc4:	1b c0       	rjmp	.+54     	; 0x1ffc <__floatsisf+0x6c>
    1fc6:	6f 5f       	subi	r22, 0xFF	; 255
    1fc8:	7f 4f       	sbci	r23, 0xFF	; 255
    1fca:	8f 4f       	sbci	r24, 0xFF	; 255
    1fcc:	9f 4f       	sbci	r25, 0xFF	; 255
    1fce:	16 c0       	rjmp	.+44     	; 0x1ffc <__floatsisf+0x6c>
    1fd0:	88 23       	and	r24, r24
    1fd2:	11 f0       	breq	.+4      	; 0x1fd8 <__floatsisf+0x48>
    1fd4:	96 e9       	ldi	r25, 0x96	; 150
    1fd6:	11 c0       	rjmp	.+34     	; 0x1ffa <__floatsisf+0x6a>
    1fd8:	77 23       	and	r23, r23
    1fda:	21 f0       	breq	.+8      	; 0x1fe4 <__floatsisf+0x54>
    1fdc:	9e e8       	ldi	r25, 0x8E	; 142
    1fde:	87 2f       	mov	r24, r23
    1fe0:	76 2f       	mov	r23, r22
    1fe2:	05 c0       	rjmp	.+10     	; 0x1fee <__floatsisf+0x5e>
    1fe4:	66 23       	and	r22, r22
    1fe6:	71 f0       	breq	.+28     	; 0x2004 <__floatsisf+0x74>
    1fe8:	96 e8       	ldi	r25, 0x86	; 134
    1fea:	86 2f       	mov	r24, r22
    1fec:	70 e0       	ldi	r23, 0x00	; 0
    1fee:	60 e0       	ldi	r22, 0x00	; 0
    1ff0:	2a f0       	brmi	.+10     	; 0x1ffc <__floatsisf+0x6c>
    1ff2:	9a 95       	dec	r25
    1ff4:	66 0f       	add	r22, r22
    1ff6:	77 1f       	adc	r23, r23
    1ff8:	88 1f       	adc	r24, r24
    1ffa:	da f7       	brpl	.-10     	; 0x1ff2 <__floatsisf+0x62>
    1ffc:	88 0f       	add	r24, r24
    1ffe:	96 95       	lsr	r25
    2000:	87 95       	ror	r24
    2002:	97 f9       	bld	r25, 7
    2004:	08 95       	ret

00002006 <__fp_cmp>:
    2006:	99 0f       	add	r25, r25
    2008:	00 08       	sbc	r0, r0
    200a:	55 0f       	add	r21, r21
    200c:	aa 0b       	sbc	r26, r26
    200e:	e0 e8       	ldi	r30, 0x80	; 128
    2010:	fe ef       	ldi	r31, 0xFE	; 254
    2012:	16 16       	cp	r1, r22
    2014:	17 06       	cpc	r1, r23
    2016:	e8 07       	cpc	r30, r24
    2018:	f9 07       	cpc	r31, r25
    201a:	c0 f0       	brcs	.+48     	; 0x204c <__fp_cmp+0x46>
    201c:	12 16       	cp	r1, r18
    201e:	13 06       	cpc	r1, r19
    2020:	e4 07       	cpc	r30, r20
    2022:	f5 07       	cpc	r31, r21
    2024:	98 f0       	brcs	.+38     	; 0x204c <__fp_cmp+0x46>
    2026:	62 1b       	sub	r22, r18
    2028:	73 0b       	sbc	r23, r19
    202a:	84 0b       	sbc	r24, r20
    202c:	95 0b       	sbc	r25, r21
    202e:	39 f4       	brne	.+14     	; 0x203e <__fp_cmp+0x38>
    2030:	0a 26       	eor	r0, r26
    2032:	61 f0       	breq	.+24     	; 0x204c <__fp_cmp+0x46>
    2034:	23 2b       	or	r18, r19
    2036:	24 2b       	or	r18, r20
    2038:	25 2b       	or	r18, r21
    203a:	21 f4       	brne	.+8      	; 0x2044 <__fp_cmp+0x3e>
    203c:	08 95       	ret
    203e:	0a 26       	eor	r0, r26
    2040:	09 f4       	brne	.+2      	; 0x2044 <__fp_cmp+0x3e>
    2042:	a1 40       	sbci	r26, 0x01	; 1
    2044:	a6 95       	lsr	r26
    2046:	8f ef       	ldi	r24, 0xFF	; 255
    2048:	81 1d       	adc	r24, r1
    204a:	81 1d       	adc	r24, r1
    204c:	08 95       	ret

0000204e <__fp_inf>:
    204e:	97 f9       	bld	r25, 7
    2050:	9f 67       	ori	r25, 0x7F	; 127
    2052:	80 e8       	ldi	r24, 0x80	; 128
    2054:	70 e0       	ldi	r23, 0x00	; 0
    2056:	60 e0       	ldi	r22, 0x00	; 0
    2058:	08 95       	ret

0000205a <__fp_nan>:
    205a:	9f ef       	ldi	r25, 0xFF	; 255
    205c:	80 ec       	ldi	r24, 0xC0	; 192
    205e:	08 95       	ret

00002060 <__fp_pscA>:
    2060:	00 24       	eor	r0, r0
    2062:	0a 94       	dec	r0
    2064:	16 16       	cp	r1, r22
    2066:	17 06       	cpc	r1, r23
    2068:	18 06       	cpc	r1, r24
    206a:	09 06       	cpc	r0, r25
    206c:	08 95       	ret

0000206e <__fp_pscB>:
    206e:	00 24       	eor	r0, r0
    2070:	0a 94       	dec	r0
    2072:	12 16       	cp	r1, r18
    2074:	13 06       	cpc	r1, r19
    2076:	14 06       	cpc	r1, r20
    2078:	05 06       	cpc	r0, r21
    207a:	08 95       	ret

0000207c <__fp_round>:
    207c:	09 2e       	mov	r0, r25
    207e:	03 94       	inc	r0
    2080:	00 0c       	add	r0, r0
    2082:	11 f4       	brne	.+4      	; 0x2088 <__fp_round+0xc>
    2084:	88 23       	and	r24, r24
    2086:	52 f0       	brmi	.+20     	; 0x209c <__fp_round+0x20>
    2088:	bb 0f       	add	r27, r27
    208a:	40 f4       	brcc	.+16     	; 0x209c <__fp_round+0x20>
    208c:	bf 2b       	or	r27, r31
    208e:	11 f4       	brne	.+4      	; 0x2094 <__fp_round+0x18>
    2090:	60 ff       	sbrs	r22, 0
    2092:	04 c0       	rjmp	.+8      	; 0x209c <__fp_round+0x20>
    2094:	6f 5f       	subi	r22, 0xFF	; 255
    2096:	7f 4f       	sbci	r23, 0xFF	; 255
    2098:	8f 4f       	sbci	r24, 0xFF	; 255
    209a:	9f 4f       	sbci	r25, 0xFF	; 255
    209c:	08 95       	ret

0000209e <__fp_split3>:
    209e:	57 fd       	sbrc	r21, 7
    20a0:	90 58       	subi	r25, 0x80	; 128
    20a2:	44 0f       	add	r20, r20
    20a4:	55 1f       	adc	r21, r21
    20a6:	59 f0       	breq	.+22     	; 0x20be <__fp_splitA+0x10>
    20a8:	5f 3f       	cpi	r21, 0xFF	; 255
    20aa:	71 f0       	breq	.+28     	; 0x20c8 <__fp_splitA+0x1a>
    20ac:	47 95       	ror	r20

000020ae <__fp_splitA>:
    20ae:	88 0f       	add	r24, r24
    20b0:	97 fb       	bst	r25, 7
    20b2:	99 1f       	adc	r25, r25
    20b4:	61 f0       	breq	.+24     	; 0x20ce <__fp_splitA+0x20>
    20b6:	9f 3f       	cpi	r25, 0xFF	; 255
    20b8:	79 f0       	breq	.+30     	; 0x20d8 <__fp_splitA+0x2a>
    20ba:	87 95       	ror	r24
    20bc:	08 95       	ret
    20be:	12 16       	cp	r1, r18
    20c0:	13 06       	cpc	r1, r19
    20c2:	14 06       	cpc	r1, r20
    20c4:	55 1f       	adc	r21, r21
    20c6:	f2 cf       	rjmp	.-28     	; 0x20ac <__fp_split3+0xe>
    20c8:	46 95       	lsr	r20
    20ca:	f1 df       	rcall	.-30     	; 0x20ae <__fp_splitA>
    20cc:	08 c0       	rjmp	.+16     	; 0x20de <__fp_splitA+0x30>
    20ce:	16 16       	cp	r1, r22
    20d0:	17 06       	cpc	r1, r23
    20d2:	18 06       	cpc	r1, r24
    20d4:	99 1f       	adc	r25, r25
    20d6:	f1 cf       	rjmp	.-30     	; 0x20ba <__fp_splitA+0xc>
    20d8:	86 95       	lsr	r24
    20da:	71 05       	cpc	r23, r1
    20dc:	61 05       	cpc	r22, r1
    20de:	08 94       	sec
    20e0:	08 95       	ret

000020e2 <__fp_zero>:
    20e2:	e8 94       	clt

000020e4 <__fp_szero>:
    20e4:	bb 27       	eor	r27, r27
    20e6:	66 27       	eor	r22, r22
    20e8:	77 27       	eor	r23, r23
    20ea:	cb 01       	movw	r24, r22
    20ec:	97 f9       	bld	r25, 7
    20ee:	08 95       	ret

000020f0 <__mulsf3>:
    20f0:	0e 94 8b 10 	call	0x2116	; 0x2116 <__mulsf3x>
    20f4:	0c 94 3e 10 	jmp	0x207c	; 0x207c <__fp_round>
    20f8:	0e 94 30 10 	call	0x2060	; 0x2060 <__fp_pscA>
    20fc:	38 f0       	brcs	.+14     	; 0x210c <__mulsf3+0x1c>
    20fe:	0e 94 37 10 	call	0x206e	; 0x206e <__fp_pscB>
    2102:	20 f0       	brcs	.+8      	; 0x210c <__mulsf3+0x1c>
    2104:	95 23       	and	r25, r21
    2106:	11 f0       	breq	.+4      	; 0x210c <__mulsf3+0x1c>
    2108:	0c 94 27 10 	jmp	0x204e	; 0x204e <__fp_inf>
    210c:	0c 94 2d 10 	jmp	0x205a	; 0x205a <__fp_nan>
    2110:	11 24       	eor	r1, r1
    2112:	0c 94 72 10 	jmp	0x20e4	; 0x20e4 <__fp_szero>

00002116 <__mulsf3x>:
    2116:	0e 94 4f 10 	call	0x209e	; 0x209e <__fp_split3>
    211a:	70 f3       	brcs	.-36     	; 0x20f8 <__mulsf3+0x8>

0000211c <__mulsf3_pse>:
    211c:	95 9f       	mul	r25, r21
    211e:	c1 f3       	breq	.-16     	; 0x2110 <__mulsf3+0x20>
    2120:	95 0f       	add	r25, r21
    2122:	50 e0       	ldi	r21, 0x00	; 0
    2124:	55 1f       	adc	r21, r21
    2126:	62 9f       	mul	r22, r18
    2128:	f0 01       	movw	r30, r0
    212a:	72 9f       	mul	r23, r18
    212c:	bb 27       	eor	r27, r27
    212e:	f0 0d       	add	r31, r0
    2130:	b1 1d       	adc	r27, r1
    2132:	63 9f       	mul	r22, r19
    2134:	aa 27       	eor	r26, r26
    2136:	f0 0d       	add	r31, r0
    2138:	b1 1d       	adc	r27, r1
    213a:	aa 1f       	adc	r26, r26
    213c:	64 9f       	mul	r22, r20
    213e:	66 27       	eor	r22, r22
    2140:	b0 0d       	add	r27, r0
    2142:	a1 1d       	adc	r26, r1
    2144:	66 1f       	adc	r22, r22
    2146:	82 9f       	mul	r24, r18
    2148:	22 27       	eor	r18, r18
    214a:	b0 0d       	add	r27, r0
    214c:	a1 1d       	adc	r26, r1
    214e:	62 1f       	adc	r22, r18
    2150:	73 9f       	mul	r23, r19
    2152:	b0 0d       	add	r27, r0
    2154:	a1 1d       	adc	r26, r1
    2156:	62 1f       	adc	r22, r18
    2158:	83 9f       	mul	r24, r19
    215a:	a0 0d       	add	r26, r0
    215c:	61 1d       	adc	r22, r1
    215e:	22 1f       	adc	r18, r18
    2160:	74 9f       	mul	r23, r20
    2162:	33 27       	eor	r19, r19
    2164:	a0 0d       	add	r26, r0
    2166:	61 1d       	adc	r22, r1
    2168:	23 1f       	adc	r18, r19
    216a:	84 9f       	mul	r24, r20
    216c:	60 0d       	add	r22, r0
    216e:	21 1d       	adc	r18, r1
    2170:	82 2f       	mov	r24, r18
    2172:	76 2f       	mov	r23, r22
    2174:	6a 2f       	mov	r22, r26
    2176:	11 24       	eor	r1, r1
    2178:	9f 57       	subi	r25, 0x7F	; 127
    217a:	50 40       	sbci	r21, 0x00	; 0
    217c:	9a f0       	brmi	.+38     	; 0x21a4 <__mulsf3_pse+0x88>
    217e:	f1 f0       	breq	.+60     	; 0x21bc <__mulsf3_pse+0xa0>
    2180:	88 23       	and	r24, r24
    2182:	4a f0       	brmi	.+18     	; 0x2196 <__mulsf3_pse+0x7a>
    2184:	ee 0f       	add	r30, r30
    2186:	ff 1f       	adc	r31, r31
    2188:	bb 1f       	adc	r27, r27
    218a:	66 1f       	adc	r22, r22
    218c:	77 1f       	adc	r23, r23
    218e:	88 1f       	adc	r24, r24
    2190:	91 50       	subi	r25, 0x01	; 1
    2192:	50 40       	sbci	r21, 0x00	; 0
    2194:	a9 f7       	brne	.-22     	; 0x2180 <__mulsf3_pse+0x64>
    2196:	9e 3f       	cpi	r25, 0xFE	; 254
    2198:	51 05       	cpc	r21, r1
    219a:	80 f0       	brcs	.+32     	; 0x21bc <__mulsf3_pse+0xa0>
    219c:	0c 94 27 10 	jmp	0x204e	; 0x204e <__fp_inf>
    21a0:	0c 94 72 10 	jmp	0x20e4	; 0x20e4 <__fp_szero>
    21a4:	5f 3f       	cpi	r21, 0xFF	; 255
    21a6:	e4 f3       	brlt	.-8      	; 0x21a0 <__mulsf3_pse+0x84>
    21a8:	98 3e       	cpi	r25, 0xE8	; 232
    21aa:	d4 f3       	brlt	.-12     	; 0x21a0 <__mulsf3_pse+0x84>
    21ac:	86 95       	lsr	r24
    21ae:	77 95       	ror	r23
    21b0:	67 95       	ror	r22
    21b2:	b7 95       	ror	r27
    21b4:	f7 95       	ror	r31
    21b6:	e7 95       	ror	r30
    21b8:	9f 5f       	subi	r25, 0xFF	; 255
    21ba:	c1 f7       	brne	.-16     	; 0x21ac <__mulsf3_pse+0x90>
    21bc:	fe 2b       	or	r31, r30
    21be:	88 0f       	add	r24, r24
    21c0:	91 1d       	adc	r25, r1
    21c2:	96 95       	lsr	r25
    21c4:	87 95       	ror	r24
    21c6:	97 f9       	bld	r25, 7
    21c8:	08 95       	ret

000021ca <round>:
    21ca:	0e 94 57 10 	call	0x20ae	; 0x20ae <__fp_splitA>
    21ce:	e8 f0       	brcs	.+58     	; 0x220a <round+0x40>
    21d0:	9e 37       	cpi	r25, 0x7E	; 126
    21d2:	e8 f0       	brcs	.+58     	; 0x220e <round+0x44>
    21d4:	96 39       	cpi	r25, 0x96	; 150
    21d6:	b8 f4       	brcc	.+46     	; 0x2206 <round+0x3c>
    21d8:	9e 38       	cpi	r25, 0x8E	; 142
    21da:	48 f4       	brcc	.+18     	; 0x21ee <round+0x24>
    21dc:	67 2f       	mov	r22, r23
    21de:	78 2f       	mov	r23, r24
    21e0:	88 27       	eor	r24, r24
    21e2:	98 5f       	subi	r25, 0xF8	; 248
    21e4:	f9 cf       	rjmp	.-14     	; 0x21d8 <round+0xe>
    21e6:	86 95       	lsr	r24
    21e8:	77 95       	ror	r23
    21ea:	67 95       	ror	r22
    21ec:	93 95       	inc	r25
    21ee:	95 39       	cpi	r25, 0x95	; 149
    21f0:	d0 f3       	brcs	.-12     	; 0x21e6 <round+0x1c>
    21f2:	b6 2f       	mov	r27, r22
    21f4:	b1 70       	andi	r27, 0x01	; 1
    21f6:	6b 0f       	add	r22, r27
    21f8:	71 1d       	adc	r23, r1
    21fa:	81 1d       	adc	r24, r1
    21fc:	20 f4       	brcc	.+8      	; 0x2206 <round+0x3c>
    21fe:	87 95       	ror	r24
    2200:	77 95       	ror	r23
    2202:	67 95       	ror	r22
    2204:	93 95       	inc	r25
    2206:	0c 94 09 11 	jmp	0x2212	; 0x2212 <__fp_mintl>
    220a:	0c 94 24 11 	jmp	0x2248	; 0x2248 <__fp_mpack>
    220e:	0c 94 72 10 	jmp	0x20e4	; 0x20e4 <__fp_szero>

00002212 <__fp_mintl>:
    2212:	88 23       	and	r24, r24
    2214:	71 f4       	brne	.+28     	; 0x2232 <__fp_mintl+0x20>
    2216:	77 23       	and	r23, r23
    2218:	21 f0       	breq	.+8      	; 0x2222 <__fp_mintl+0x10>
    221a:	98 50       	subi	r25, 0x08	; 8
    221c:	87 2b       	or	r24, r23
    221e:	76 2f       	mov	r23, r22
    2220:	07 c0       	rjmp	.+14     	; 0x2230 <__fp_mintl+0x1e>
    2222:	66 23       	and	r22, r22
    2224:	11 f4       	brne	.+4      	; 0x222a <__fp_mintl+0x18>
    2226:	99 27       	eor	r25, r25
    2228:	0d c0       	rjmp	.+26     	; 0x2244 <__fp_mintl+0x32>
    222a:	90 51       	subi	r25, 0x10	; 16
    222c:	86 2b       	or	r24, r22
    222e:	70 e0       	ldi	r23, 0x00	; 0
    2230:	60 e0       	ldi	r22, 0x00	; 0
    2232:	2a f0       	brmi	.+10     	; 0x223e <__fp_mintl+0x2c>
    2234:	9a 95       	dec	r25
    2236:	66 0f       	add	r22, r22
    2238:	77 1f       	adc	r23, r23
    223a:	88 1f       	adc	r24, r24
    223c:	da f7       	brpl	.-10     	; 0x2234 <__fp_mintl+0x22>
    223e:	88 0f       	add	r24, r24
    2240:	96 95       	lsr	r25
    2242:	87 95       	ror	r24
    2244:	97 f9       	bld	r25, 7
    2246:	08 95       	ret

00002248 <__fp_mpack>:
    2248:	9f 3f       	cpi	r25, 0xFF	; 255
    224a:	31 f0       	breq	.+12     	; 0x2258 <__fp_mpack_finite+0xc>

0000224c <__fp_mpack_finite>:
    224c:	91 50       	subi	r25, 0x01	; 1
    224e:	20 f4       	brcc	.+8      	; 0x2258 <__fp_mpack_finite+0xc>
    2250:	87 95       	ror	r24
    2252:	77 95       	ror	r23
    2254:	67 95       	ror	r22
    2256:	b7 95       	ror	r27
    2258:	88 0f       	add	r24, r24
    225a:	91 1d       	adc	r25, r1
    225c:	96 95       	lsr	r25
    225e:	87 95       	ror	r24
    2260:	97 f9       	bld	r25, 7
    2262:	08 95       	ret

00002264 <__udivmodhi4>:
    2264:	aa 1b       	sub	r26, r26
    2266:	bb 1b       	sub	r27, r27
    2268:	51 e1       	ldi	r21, 0x11	; 17
    226a:	07 c0       	rjmp	.+14     	; 0x227a <__udivmodhi4_ep>

0000226c <__udivmodhi4_loop>:
    226c:	aa 1f       	adc	r26, r26
    226e:	bb 1f       	adc	r27, r27
    2270:	a6 17       	cp	r26, r22
    2272:	b7 07       	cpc	r27, r23
    2274:	10 f0       	brcs	.+4      	; 0x227a <__udivmodhi4_ep>
    2276:	a6 1b       	sub	r26, r22
    2278:	b7 0b       	sbc	r27, r23

0000227a <__udivmodhi4_ep>:
    227a:	88 1f       	adc	r24, r24
    227c:	99 1f       	adc	r25, r25
    227e:	5a 95       	dec	r21
    2280:	a9 f7       	brne	.-22     	; 0x226c <__udivmodhi4_loop>
    2282:	80 95       	com	r24
    2284:	90 95       	com	r25
    2286:	bc 01       	movw	r22, r24
    2288:	cd 01       	movw	r24, r26
    228a:	08 95       	ret

0000228c <__tablejump2__>:
    228c:	ee 0f       	add	r30, r30
    228e:	ff 1f       	adc	r31, r31
    2290:	05 90       	lpm	r0, Z+
    2292:	f4 91       	lpm	r31, Z
    2294:	e0 2d       	mov	r30, r0
    2296:	09 94       	ijmp

00002298 <atoi>:
    2298:	fc 01       	movw	r30, r24
    229a:	88 27       	eor	r24, r24
    229c:	99 27       	eor	r25, r25
    229e:	e8 94       	clt
    22a0:	21 91       	ld	r18, Z+
    22a2:	20 32       	cpi	r18, 0x20	; 32
    22a4:	e9 f3       	breq	.-6      	; 0x22a0 <atoi+0x8>
    22a6:	29 30       	cpi	r18, 0x09	; 9
    22a8:	10 f0       	brcs	.+4      	; 0x22ae <atoi+0x16>
    22aa:	2e 30       	cpi	r18, 0x0E	; 14
    22ac:	c8 f3       	brcs	.-14     	; 0x22a0 <atoi+0x8>
    22ae:	2b 32       	cpi	r18, 0x2B	; 43
    22b0:	41 f0       	breq	.+16     	; 0x22c2 <atoi+0x2a>
    22b2:	2d 32       	cpi	r18, 0x2D	; 45
    22b4:	39 f4       	brne	.+14     	; 0x22c4 <atoi+0x2c>
    22b6:	68 94       	set
    22b8:	04 c0       	rjmp	.+8      	; 0x22c2 <atoi+0x2a>
    22ba:	0e 94 84 11 	call	0x2308	; 0x2308 <__mulhi_const_10>
    22be:	82 0f       	add	r24, r18
    22c0:	91 1d       	adc	r25, r1
    22c2:	21 91       	ld	r18, Z+
    22c4:	20 53       	subi	r18, 0x30	; 48
    22c6:	2a 30       	cpi	r18, 0x0A	; 10
    22c8:	c0 f3       	brcs	.-16     	; 0x22ba <atoi+0x22>
    22ca:	1e f4       	brtc	.+6      	; 0x22d2 <atoi+0x3a>
    22cc:	90 95       	com	r25
    22ce:	81 95       	neg	r24
    22d0:	9f 4f       	sbci	r25, 0xFF	; 255
    22d2:	08 95       	ret

000022d4 <strncpy>:
    22d4:	fb 01       	movw	r30, r22
    22d6:	dc 01       	movw	r26, r24
    22d8:	41 50       	subi	r20, 0x01	; 1
    22da:	50 40       	sbci	r21, 0x00	; 0
    22dc:	48 f0       	brcs	.+18     	; 0x22f0 <strncpy+0x1c>
    22de:	01 90       	ld	r0, Z+
    22e0:	0d 92       	st	X+, r0
    22e2:	00 20       	and	r0, r0
    22e4:	c9 f7       	brne	.-14     	; 0x22d8 <strncpy+0x4>
    22e6:	01 c0       	rjmp	.+2      	; 0x22ea <strncpy+0x16>
    22e8:	1d 92       	st	X+, r1
    22ea:	41 50       	subi	r20, 0x01	; 1
    22ec:	50 40       	sbci	r21, 0x00	; 0
    22ee:	e0 f7       	brcc	.-8      	; 0x22e8 <strncpy+0x14>
    22f0:	08 95       	ret

000022f2 <__itoa_ncheck>:
    22f2:	bb 27       	eor	r27, r27
    22f4:	4a 30       	cpi	r20, 0x0A	; 10
    22f6:	31 f4       	brne	.+12     	; 0x2304 <__itoa_ncheck+0x12>
    22f8:	99 23       	and	r25, r25
    22fa:	22 f4       	brpl	.+8      	; 0x2304 <__itoa_ncheck+0x12>
    22fc:	bd e2       	ldi	r27, 0x2D	; 45
    22fe:	90 95       	com	r25
    2300:	81 95       	neg	r24
    2302:	9f 4f       	sbci	r25, 0xFF	; 255
    2304:	0c 94 8d 11 	jmp	0x231a	; 0x231a <__utoa_common>

00002308 <__mulhi_const_10>:
    2308:	7a e0       	ldi	r23, 0x0A	; 10
    230a:	97 9f       	mul	r25, r23
    230c:	90 2d       	mov	r25, r0
    230e:	87 9f       	mul	r24, r23
    2310:	80 2d       	mov	r24, r0
    2312:	91 0d       	add	r25, r1
    2314:	11 24       	eor	r1, r1
    2316:	08 95       	ret

00002318 <__utoa_ncheck>:
    2318:	bb 27       	eor	r27, r27

0000231a <__utoa_common>:
    231a:	fb 01       	movw	r30, r22
    231c:	55 27       	eor	r21, r21
    231e:	aa 27       	eor	r26, r26
    2320:	88 0f       	add	r24, r24
    2322:	99 1f       	adc	r25, r25
    2324:	aa 1f       	adc	r26, r26
    2326:	a4 17       	cp	r26, r20
    2328:	10 f0       	brcs	.+4      	; 0x232e <__utoa_common+0x14>
    232a:	a4 1b       	sub	r26, r20
    232c:	83 95       	inc	r24
    232e:	50 51       	subi	r21, 0x10	; 16
    2330:	b9 f7       	brne	.-18     	; 0x2320 <__utoa_common+0x6>
    2332:	a0 5d       	subi	r26, 0xD0	; 208
    2334:	aa 33       	cpi	r26, 0x3A	; 58
    2336:	08 f0       	brcs	.+2      	; 0x233a <__utoa_common+0x20>
    2338:	a9 5d       	subi	r26, 0xD9	; 217
    233a:	a1 93       	st	Z+, r26
    233c:	00 97       	sbiw	r24, 0x00	; 0
    233e:	79 f7       	brne	.-34     	; 0x231e <__utoa_common+0x4>
    2340:	b1 11       	cpse	r27, r1
    2342:	b1 93       	st	Z+, r27
    2344:	11 92       	st	Z+, r1
    2346:	cb 01       	movw	r24, r22
    2348:	0c 94 b3 13 	jmp	0x2766	; 0x2766 <strrev>

0000234c <printf>:
    234c:	a0 e0       	ldi	r26, 0x00	; 0
    234e:	b0 e0       	ldi	r27, 0x00	; 0
    2350:	ec ea       	ldi	r30, 0xAC	; 172
    2352:	f1 e1       	ldi	r31, 0x11	; 17
    2354:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__prologue_saves__+0x20>
    2358:	ae 01       	movw	r20, r28
    235a:	4b 5f       	subi	r20, 0xFB	; 251
    235c:	5f 4f       	sbci	r21, 0xFF	; 255
    235e:	fa 01       	movw	r30, r20
    2360:	61 91       	ld	r22, Z+
    2362:	71 91       	ld	r23, Z+
    2364:	af 01       	movw	r20, r30
    2366:	80 91 e6 07 	lds	r24, 0x07E6	; 0x8007e6 <__iob+0x2>
    236a:	90 91 e7 07 	lds	r25, 0x07E7	; 0x8007e7 <__iob+0x3>
    236e:	0e 94 bc 11 	call	0x2378	; 0x2378 <vfprintf>
    2372:	e2 e0       	ldi	r30, 0x02	; 2
    2374:	0c 94 89 14 	jmp	0x2912	; 0x2912 <__epilogue_restores__+0x20>

00002378 <vfprintf>:
    2378:	ab e0       	ldi	r26, 0x0B	; 11
    237a:	b0 e0       	ldi	r27, 0x00	; 0
    237c:	e2 ec       	ldi	r30, 0xC2	; 194
    237e:	f1 e1       	ldi	r31, 0x11	; 17
    2380:	0c 94 5d 14 	jmp	0x28ba	; 0x28ba <__prologue_saves__>
    2384:	6c 01       	movw	r12, r24
    2386:	7b 01       	movw	r14, r22
    2388:	8a 01       	movw	r16, r20
    238a:	fc 01       	movw	r30, r24
    238c:	17 82       	std	Z+7, r1	; 0x07
    238e:	16 82       	std	Z+6, r1	; 0x06
    2390:	83 81       	ldd	r24, Z+3	; 0x03
    2392:	81 ff       	sbrs	r24, 1
    2394:	cc c1       	rjmp	.+920    	; 0x272e <vfprintf+0x3b6>
    2396:	ce 01       	movw	r24, r28
    2398:	01 96       	adiw	r24, 0x01	; 1
    239a:	3c 01       	movw	r6, r24
    239c:	f6 01       	movw	r30, r12
    239e:	93 81       	ldd	r25, Z+3	; 0x03
    23a0:	f7 01       	movw	r30, r14
    23a2:	93 fd       	sbrc	r25, 3
    23a4:	85 91       	lpm	r24, Z+
    23a6:	93 ff       	sbrs	r25, 3
    23a8:	81 91       	ld	r24, Z+
    23aa:	7f 01       	movw	r14, r30
    23ac:	88 23       	and	r24, r24
    23ae:	09 f4       	brne	.+2      	; 0x23b2 <vfprintf+0x3a>
    23b0:	ba c1       	rjmp	.+884    	; 0x2726 <vfprintf+0x3ae>
    23b2:	85 32       	cpi	r24, 0x25	; 37
    23b4:	39 f4       	brne	.+14     	; 0x23c4 <vfprintf+0x4c>
    23b6:	93 fd       	sbrc	r25, 3
    23b8:	85 91       	lpm	r24, Z+
    23ba:	93 ff       	sbrs	r25, 3
    23bc:	81 91       	ld	r24, Z+
    23be:	7f 01       	movw	r14, r30
    23c0:	85 32       	cpi	r24, 0x25	; 37
    23c2:	29 f4       	brne	.+10     	; 0x23ce <vfprintf+0x56>
    23c4:	b6 01       	movw	r22, r12
    23c6:	90 e0       	ldi	r25, 0x00	; 0
    23c8:	0e 94 c3 13 	call	0x2786	; 0x2786 <fputc>
    23cc:	e7 cf       	rjmp	.-50     	; 0x239c <vfprintf+0x24>
    23ce:	91 2c       	mov	r9, r1
    23d0:	21 2c       	mov	r2, r1
    23d2:	31 2c       	mov	r3, r1
    23d4:	ff e1       	ldi	r31, 0x1F	; 31
    23d6:	f3 15       	cp	r31, r3
    23d8:	d8 f0       	brcs	.+54     	; 0x2410 <vfprintf+0x98>
    23da:	8b 32       	cpi	r24, 0x2B	; 43
    23dc:	79 f0       	breq	.+30     	; 0x23fc <vfprintf+0x84>
    23de:	38 f4       	brcc	.+14     	; 0x23ee <vfprintf+0x76>
    23e0:	80 32       	cpi	r24, 0x20	; 32
    23e2:	79 f0       	breq	.+30     	; 0x2402 <vfprintf+0x8a>
    23e4:	83 32       	cpi	r24, 0x23	; 35
    23e6:	a1 f4       	brne	.+40     	; 0x2410 <vfprintf+0x98>
    23e8:	23 2d       	mov	r18, r3
    23ea:	20 61       	ori	r18, 0x10	; 16
    23ec:	1d c0       	rjmp	.+58     	; 0x2428 <vfprintf+0xb0>
    23ee:	8d 32       	cpi	r24, 0x2D	; 45
    23f0:	61 f0       	breq	.+24     	; 0x240a <vfprintf+0x92>
    23f2:	80 33       	cpi	r24, 0x30	; 48
    23f4:	69 f4       	brne	.+26     	; 0x2410 <vfprintf+0x98>
    23f6:	23 2d       	mov	r18, r3
    23f8:	21 60       	ori	r18, 0x01	; 1
    23fa:	16 c0       	rjmp	.+44     	; 0x2428 <vfprintf+0xb0>
    23fc:	83 2d       	mov	r24, r3
    23fe:	82 60       	ori	r24, 0x02	; 2
    2400:	38 2e       	mov	r3, r24
    2402:	e3 2d       	mov	r30, r3
    2404:	e4 60       	ori	r30, 0x04	; 4
    2406:	3e 2e       	mov	r3, r30
    2408:	2a c0       	rjmp	.+84     	; 0x245e <vfprintf+0xe6>
    240a:	f3 2d       	mov	r31, r3
    240c:	f8 60       	ori	r31, 0x08	; 8
    240e:	1d c0       	rjmp	.+58     	; 0x244a <vfprintf+0xd2>
    2410:	37 fc       	sbrc	r3, 7
    2412:	2d c0       	rjmp	.+90     	; 0x246e <vfprintf+0xf6>
    2414:	20 ed       	ldi	r18, 0xD0	; 208
    2416:	28 0f       	add	r18, r24
    2418:	2a 30       	cpi	r18, 0x0A	; 10
    241a:	40 f0       	brcs	.+16     	; 0x242c <vfprintf+0xb4>
    241c:	8e 32       	cpi	r24, 0x2E	; 46
    241e:	b9 f4       	brne	.+46     	; 0x244e <vfprintf+0xd6>
    2420:	36 fc       	sbrc	r3, 6
    2422:	81 c1       	rjmp	.+770    	; 0x2726 <vfprintf+0x3ae>
    2424:	23 2d       	mov	r18, r3
    2426:	20 64       	ori	r18, 0x40	; 64
    2428:	32 2e       	mov	r3, r18
    242a:	19 c0       	rjmp	.+50     	; 0x245e <vfprintf+0xe6>
    242c:	36 fe       	sbrs	r3, 6
    242e:	06 c0       	rjmp	.+12     	; 0x243c <vfprintf+0xc4>
    2430:	8a e0       	ldi	r24, 0x0A	; 10
    2432:	98 9e       	mul	r9, r24
    2434:	20 0d       	add	r18, r0
    2436:	11 24       	eor	r1, r1
    2438:	92 2e       	mov	r9, r18
    243a:	11 c0       	rjmp	.+34     	; 0x245e <vfprintf+0xe6>
    243c:	ea e0       	ldi	r30, 0x0A	; 10
    243e:	2e 9e       	mul	r2, r30
    2440:	20 0d       	add	r18, r0
    2442:	11 24       	eor	r1, r1
    2444:	22 2e       	mov	r2, r18
    2446:	f3 2d       	mov	r31, r3
    2448:	f0 62       	ori	r31, 0x20	; 32
    244a:	3f 2e       	mov	r3, r31
    244c:	08 c0       	rjmp	.+16     	; 0x245e <vfprintf+0xe6>
    244e:	8c 36       	cpi	r24, 0x6C	; 108
    2450:	21 f4       	brne	.+8      	; 0x245a <vfprintf+0xe2>
    2452:	83 2d       	mov	r24, r3
    2454:	80 68       	ori	r24, 0x80	; 128
    2456:	38 2e       	mov	r3, r24
    2458:	02 c0       	rjmp	.+4      	; 0x245e <vfprintf+0xe6>
    245a:	88 36       	cpi	r24, 0x68	; 104
    245c:	41 f4       	brne	.+16     	; 0x246e <vfprintf+0xf6>
    245e:	f7 01       	movw	r30, r14
    2460:	93 fd       	sbrc	r25, 3
    2462:	85 91       	lpm	r24, Z+
    2464:	93 ff       	sbrs	r25, 3
    2466:	81 91       	ld	r24, Z+
    2468:	7f 01       	movw	r14, r30
    246a:	81 11       	cpse	r24, r1
    246c:	b3 cf       	rjmp	.-154    	; 0x23d4 <vfprintf+0x5c>
    246e:	98 2f       	mov	r25, r24
    2470:	9f 7d       	andi	r25, 0xDF	; 223
    2472:	95 54       	subi	r25, 0x45	; 69
    2474:	93 30       	cpi	r25, 0x03	; 3
    2476:	28 f4       	brcc	.+10     	; 0x2482 <vfprintf+0x10a>
    2478:	0c 5f       	subi	r16, 0xFC	; 252
    247a:	1f 4f       	sbci	r17, 0xFF	; 255
    247c:	9f e3       	ldi	r25, 0x3F	; 63
    247e:	99 83       	std	Y+1, r25	; 0x01
    2480:	0d c0       	rjmp	.+26     	; 0x249c <vfprintf+0x124>
    2482:	83 36       	cpi	r24, 0x63	; 99
    2484:	31 f0       	breq	.+12     	; 0x2492 <vfprintf+0x11a>
    2486:	83 37       	cpi	r24, 0x73	; 115
    2488:	71 f0       	breq	.+28     	; 0x24a6 <vfprintf+0x12e>
    248a:	83 35       	cpi	r24, 0x53	; 83
    248c:	09 f0       	breq	.+2      	; 0x2490 <vfprintf+0x118>
    248e:	59 c0       	rjmp	.+178    	; 0x2542 <vfprintf+0x1ca>
    2490:	21 c0       	rjmp	.+66     	; 0x24d4 <vfprintf+0x15c>
    2492:	f8 01       	movw	r30, r16
    2494:	80 81       	ld	r24, Z
    2496:	89 83       	std	Y+1, r24	; 0x01
    2498:	0e 5f       	subi	r16, 0xFE	; 254
    249a:	1f 4f       	sbci	r17, 0xFF	; 255
    249c:	88 24       	eor	r8, r8
    249e:	83 94       	inc	r8
    24a0:	91 2c       	mov	r9, r1
    24a2:	53 01       	movw	r10, r6
    24a4:	13 c0       	rjmp	.+38     	; 0x24cc <vfprintf+0x154>
    24a6:	28 01       	movw	r4, r16
    24a8:	f2 e0       	ldi	r31, 0x02	; 2
    24aa:	4f 0e       	add	r4, r31
    24ac:	51 1c       	adc	r5, r1
    24ae:	f8 01       	movw	r30, r16
    24b0:	a0 80       	ld	r10, Z
    24b2:	b1 80       	ldd	r11, Z+1	; 0x01
    24b4:	36 fe       	sbrs	r3, 6
    24b6:	03 c0       	rjmp	.+6      	; 0x24be <vfprintf+0x146>
    24b8:	69 2d       	mov	r22, r9
    24ba:	70 e0       	ldi	r23, 0x00	; 0
    24bc:	02 c0       	rjmp	.+4      	; 0x24c2 <vfprintf+0x14a>
    24be:	6f ef       	ldi	r22, 0xFF	; 255
    24c0:	7f ef       	ldi	r23, 0xFF	; 255
    24c2:	c5 01       	movw	r24, r10
    24c4:	0e 94 a8 13 	call	0x2750	; 0x2750 <strnlen>
    24c8:	4c 01       	movw	r8, r24
    24ca:	82 01       	movw	r16, r4
    24cc:	f3 2d       	mov	r31, r3
    24ce:	ff 77       	andi	r31, 0x7F	; 127
    24d0:	3f 2e       	mov	r3, r31
    24d2:	16 c0       	rjmp	.+44     	; 0x2500 <vfprintf+0x188>
    24d4:	28 01       	movw	r4, r16
    24d6:	22 e0       	ldi	r18, 0x02	; 2
    24d8:	42 0e       	add	r4, r18
    24da:	51 1c       	adc	r5, r1
    24dc:	f8 01       	movw	r30, r16
    24de:	a0 80       	ld	r10, Z
    24e0:	b1 80       	ldd	r11, Z+1	; 0x01
    24e2:	36 fe       	sbrs	r3, 6
    24e4:	03 c0       	rjmp	.+6      	; 0x24ec <vfprintf+0x174>
    24e6:	69 2d       	mov	r22, r9
    24e8:	70 e0       	ldi	r23, 0x00	; 0
    24ea:	02 c0       	rjmp	.+4      	; 0x24f0 <vfprintf+0x178>
    24ec:	6f ef       	ldi	r22, 0xFF	; 255
    24ee:	7f ef       	ldi	r23, 0xFF	; 255
    24f0:	c5 01       	movw	r24, r10
    24f2:	0e 94 9d 13 	call	0x273a	; 0x273a <strnlen_P>
    24f6:	4c 01       	movw	r8, r24
    24f8:	f3 2d       	mov	r31, r3
    24fa:	f0 68       	ori	r31, 0x80	; 128
    24fc:	3f 2e       	mov	r3, r31
    24fe:	82 01       	movw	r16, r4
    2500:	33 fc       	sbrc	r3, 3
    2502:	1b c0       	rjmp	.+54     	; 0x253a <vfprintf+0x1c2>
    2504:	82 2d       	mov	r24, r2
    2506:	90 e0       	ldi	r25, 0x00	; 0
    2508:	88 16       	cp	r8, r24
    250a:	99 06       	cpc	r9, r25
    250c:	b0 f4       	brcc	.+44     	; 0x253a <vfprintf+0x1c2>
    250e:	b6 01       	movw	r22, r12
    2510:	80 e2       	ldi	r24, 0x20	; 32
    2512:	90 e0       	ldi	r25, 0x00	; 0
    2514:	0e 94 c3 13 	call	0x2786	; 0x2786 <fputc>
    2518:	2a 94       	dec	r2
    251a:	f4 cf       	rjmp	.-24     	; 0x2504 <vfprintf+0x18c>
    251c:	f5 01       	movw	r30, r10
    251e:	37 fc       	sbrc	r3, 7
    2520:	85 91       	lpm	r24, Z+
    2522:	37 fe       	sbrs	r3, 7
    2524:	81 91       	ld	r24, Z+
    2526:	5f 01       	movw	r10, r30
    2528:	b6 01       	movw	r22, r12
    252a:	90 e0       	ldi	r25, 0x00	; 0
    252c:	0e 94 c3 13 	call	0x2786	; 0x2786 <fputc>
    2530:	21 10       	cpse	r2, r1
    2532:	2a 94       	dec	r2
    2534:	21 e0       	ldi	r18, 0x01	; 1
    2536:	82 1a       	sub	r8, r18
    2538:	91 08       	sbc	r9, r1
    253a:	81 14       	cp	r8, r1
    253c:	91 04       	cpc	r9, r1
    253e:	71 f7       	brne	.-36     	; 0x251c <vfprintf+0x1a4>
    2540:	e8 c0       	rjmp	.+464    	; 0x2712 <vfprintf+0x39a>
    2542:	84 36       	cpi	r24, 0x64	; 100
    2544:	11 f0       	breq	.+4      	; 0x254a <vfprintf+0x1d2>
    2546:	89 36       	cpi	r24, 0x69	; 105
    2548:	41 f5       	brne	.+80     	; 0x259a <vfprintf+0x222>
    254a:	f8 01       	movw	r30, r16
    254c:	37 fe       	sbrs	r3, 7
    254e:	07 c0       	rjmp	.+14     	; 0x255e <vfprintf+0x1e6>
    2550:	60 81       	ld	r22, Z
    2552:	71 81       	ldd	r23, Z+1	; 0x01
    2554:	82 81       	ldd	r24, Z+2	; 0x02
    2556:	93 81       	ldd	r25, Z+3	; 0x03
    2558:	0c 5f       	subi	r16, 0xFC	; 252
    255a:	1f 4f       	sbci	r17, 0xFF	; 255
    255c:	08 c0       	rjmp	.+16     	; 0x256e <vfprintf+0x1f6>
    255e:	60 81       	ld	r22, Z
    2560:	71 81       	ldd	r23, Z+1	; 0x01
    2562:	07 2e       	mov	r0, r23
    2564:	00 0c       	add	r0, r0
    2566:	88 0b       	sbc	r24, r24
    2568:	99 0b       	sbc	r25, r25
    256a:	0e 5f       	subi	r16, 0xFE	; 254
    256c:	1f 4f       	sbci	r17, 0xFF	; 255
    256e:	f3 2d       	mov	r31, r3
    2570:	ff 76       	andi	r31, 0x6F	; 111
    2572:	3f 2e       	mov	r3, r31
    2574:	97 ff       	sbrs	r25, 7
    2576:	09 c0       	rjmp	.+18     	; 0x258a <vfprintf+0x212>
    2578:	90 95       	com	r25
    257a:	80 95       	com	r24
    257c:	70 95       	com	r23
    257e:	61 95       	neg	r22
    2580:	7f 4f       	sbci	r23, 0xFF	; 255
    2582:	8f 4f       	sbci	r24, 0xFF	; 255
    2584:	9f 4f       	sbci	r25, 0xFF	; 255
    2586:	f0 68       	ori	r31, 0x80	; 128
    2588:	3f 2e       	mov	r3, r31
    258a:	2a e0       	ldi	r18, 0x0A	; 10
    258c:	30 e0       	ldi	r19, 0x00	; 0
    258e:	a3 01       	movw	r20, r6
    2590:	0e 94 ff 13 	call	0x27fe	; 0x27fe <__ultoa_invert>
    2594:	88 2e       	mov	r8, r24
    2596:	86 18       	sub	r8, r6
    2598:	45 c0       	rjmp	.+138    	; 0x2624 <vfprintf+0x2ac>
    259a:	85 37       	cpi	r24, 0x75	; 117
    259c:	31 f4       	brne	.+12     	; 0x25aa <vfprintf+0x232>
    259e:	23 2d       	mov	r18, r3
    25a0:	2f 7e       	andi	r18, 0xEF	; 239
    25a2:	b2 2e       	mov	r11, r18
    25a4:	2a e0       	ldi	r18, 0x0A	; 10
    25a6:	30 e0       	ldi	r19, 0x00	; 0
    25a8:	25 c0       	rjmp	.+74     	; 0x25f4 <vfprintf+0x27c>
    25aa:	93 2d       	mov	r25, r3
    25ac:	99 7f       	andi	r25, 0xF9	; 249
    25ae:	b9 2e       	mov	r11, r25
    25b0:	8f 36       	cpi	r24, 0x6F	; 111
    25b2:	c1 f0       	breq	.+48     	; 0x25e4 <vfprintf+0x26c>
    25b4:	18 f4       	brcc	.+6      	; 0x25bc <vfprintf+0x244>
    25b6:	88 35       	cpi	r24, 0x58	; 88
    25b8:	79 f0       	breq	.+30     	; 0x25d8 <vfprintf+0x260>
    25ba:	b5 c0       	rjmp	.+362    	; 0x2726 <vfprintf+0x3ae>
    25bc:	80 37       	cpi	r24, 0x70	; 112
    25be:	19 f0       	breq	.+6      	; 0x25c6 <vfprintf+0x24e>
    25c0:	88 37       	cpi	r24, 0x78	; 120
    25c2:	21 f0       	breq	.+8      	; 0x25cc <vfprintf+0x254>
    25c4:	b0 c0       	rjmp	.+352    	; 0x2726 <vfprintf+0x3ae>
    25c6:	e9 2f       	mov	r30, r25
    25c8:	e0 61       	ori	r30, 0x10	; 16
    25ca:	be 2e       	mov	r11, r30
    25cc:	b4 fe       	sbrs	r11, 4
    25ce:	0d c0       	rjmp	.+26     	; 0x25ea <vfprintf+0x272>
    25d0:	fb 2d       	mov	r31, r11
    25d2:	f4 60       	ori	r31, 0x04	; 4
    25d4:	bf 2e       	mov	r11, r31
    25d6:	09 c0       	rjmp	.+18     	; 0x25ea <vfprintf+0x272>
    25d8:	34 fe       	sbrs	r3, 4
    25da:	0a c0       	rjmp	.+20     	; 0x25f0 <vfprintf+0x278>
    25dc:	29 2f       	mov	r18, r25
    25de:	26 60       	ori	r18, 0x06	; 6
    25e0:	b2 2e       	mov	r11, r18
    25e2:	06 c0       	rjmp	.+12     	; 0x25f0 <vfprintf+0x278>
    25e4:	28 e0       	ldi	r18, 0x08	; 8
    25e6:	30 e0       	ldi	r19, 0x00	; 0
    25e8:	05 c0       	rjmp	.+10     	; 0x25f4 <vfprintf+0x27c>
    25ea:	20 e1       	ldi	r18, 0x10	; 16
    25ec:	30 e0       	ldi	r19, 0x00	; 0
    25ee:	02 c0       	rjmp	.+4      	; 0x25f4 <vfprintf+0x27c>
    25f0:	20 e1       	ldi	r18, 0x10	; 16
    25f2:	32 e0       	ldi	r19, 0x02	; 2
    25f4:	f8 01       	movw	r30, r16
    25f6:	b7 fe       	sbrs	r11, 7
    25f8:	07 c0       	rjmp	.+14     	; 0x2608 <vfprintf+0x290>
    25fa:	60 81       	ld	r22, Z
    25fc:	71 81       	ldd	r23, Z+1	; 0x01
    25fe:	82 81       	ldd	r24, Z+2	; 0x02
    2600:	93 81       	ldd	r25, Z+3	; 0x03
    2602:	0c 5f       	subi	r16, 0xFC	; 252
    2604:	1f 4f       	sbci	r17, 0xFF	; 255
    2606:	06 c0       	rjmp	.+12     	; 0x2614 <vfprintf+0x29c>
    2608:	60 81       	ld	r22, Z
    260a:	71 81       	ldd	r23, Z+1	; 0x01
    260c:	80 e0       	ldi	r24, 0x00	; 0
    260e:	90 e0       	ldi	r25, 0x00	; 0
    2610:	0e 5f       	subi	r16, 0xFE	; 254
    2612:	1f 4f       	sbci	r17, 0xFF	; 255
    2614:	a3 01       	movw	r20, r6
    2616:	0e 94 ff 13 	call	0x27fe	; 0x27fe <__ultoa_invert>
    261a:	88 2e       	mov	r8, r24
    261c:	86 18       	sub	r8, r6
    261e:	fb 2d       	mov	r31, r11
    2620:	ff 77       	andi	r31, 0x7F	; 127
    2622:	3f 2e       	mov	r3, r31
    2624:	36 fe       	sbrs	r3, 6
    2626:	0d c0       	rjmp	.+26     	; 0x2642 <vfprintf+0x2ca>
    2628:	23 2d       	mov	r18, r3
    262a:	2e 7f       	andi	r18, 0xFE	; 254
    262c:	a2 2e       	mov	r10, r18
    262e:	89 14       	cp	r8, r9
    2630:	58 f4       	brcc	.+22     	; 0x2648 <vfprintf+0x2d0>
    2632:	34 fe       	sbrs	r3, 4
    2634:	0b c0       	rjmp	.+22     	; 0x264c <vfprintf+0x2d4>
    2636:	32 fc       	sbrc	r3, 2
    2638:	09 c0       	rjmp	.+18     	; 0x264c <vfprintf+0x2d4>
    263a:	83 2d       	mov	r24, r3
    263c:	8e 7e       	andi	r24, 0xEE	; 238
    263e:	a8 2e       	mov	r10, r24
    2640:	05 c0       	rjmp	.+10     	; 0x264c <vfprintf+0x2d4>
    2642:	b8 2c       	mov	r11, r8
    2644:	a3 2c       	mov	r10, r3
    2646:	03 c0       	rjmp	.+6      	; 0x264e <vfprintf+0x2d6>
    2648:	b8 2c       	mov	r11, r8
    264a:	01 c0       	rjmp	.+2      	; 0x264e <vfprintf+0x2d6>
    264c:	b9 2c       	mov	r11, r9
    264e:	a4 fe       	sbrs	r10, 4
    2650:	0f c0       	rjmp	.+30     	; 0x2670 <vfprintf+0x2f8>
    2652:	fe 01       	movw	r30, r28
    2654:	e8 0d       	add	r30, r8
    2656:	f1 1d       	adc	r31, r1
    2658:	80 81       	ld	r24, Z
    265a:	80 33       	cpi	r24, 0x30	; 48
    265c:	21 f4       	brne	.+8      	; 0x2666 <vfprintf+0x2ee>
    265e:	9a 2d       	mov	r25, r10
    2660:	99 7e       	andi	r25, 0xE9	; 233
    2662:	a9 2e       	mov	r10, r25
    2664:	09 c0       	rjmp	.+18     	; 0x2678 <vfprintf+0x300>
    2666:	a2 fe       	sbrs	r10, 2
    2668:	06 c0       	rjmp	.+12     	; 0x2676 <vfprintf+0x2fe>
    266a:	b3 94       	inc	r11
    266c:	b3 94       	inc	r11
    266e:	04 c0       	rjmp	.+8      	; 0x2678 <vfprintf+0x300>
    2670:	8a 2d       	mov	r24, r10
    2672:	86 78       	andi	r24, 0x86	; 134
    2674:	09 f0       	breq	.+2      	; 0x2678 <vfprintf+0x300>
    2676:	b3 94       	inc	r11
    2678:	a3 fc       	sbrc	r10, 3
    267a:	11 c0       	rjmp	.+34     	; 0x269e <vfprintf+0x326>
    267c:	a0 fe       	sbrs	r10, 0
    267e:	06 c0       	rjmp	.+12     	; 0x268c <vfprintf+0x314>
    2680:	b2 14       	cp	r11, r2
    2682:	88 f4       	brcc	.+34     	; 0x26a6 <vfprintf+0x32e>
    2684:	28 0c       	add	r2, r8
    2686:	92 2c       	mov	r9, r2
    2688:	9b 18       	sub	r9, r11
    268a:	0e c0       	rjmp	.+28     	; 0x26a8 <vfprintf+0x330>
    268c:	b2 14       	cp	r11, r2
    268e:	60 f4       	brcc	.+24     	; 0x26a8 <vfprintf+0x330>
    2690:	b6 01       	movw	r22, r12
    2692:	80 e2       	ldi	r24, 0x20	; 32
    2694:	90 e0       	ldi	r25, 0x00	; 0
    2696:	0e 94 c3 13 	call	0x2786	; 0x2786 <fputc>
    269a:	b3 94       	inc	r11
    269c:	f7 cf       	rjmp	.-18     	; 0x268c <vfprintf+0x314>
    269e:	b2 14       	cp	r11, r2
    26a0:	18 f4       	brcc	.+6      	; 0x26a8 <vfprintf+0x330>
    26a2:	2b 18       	sub	r2, r11
    26a4:	02 c0       	rjmp	.+4      	; 0x26aa <vfprintf+0x332>
    26a6:	98 2c       	mov	r9, r8
    26a8:	21 2c       	mov	r2, r1
    26aa:	a4 fe       	sbrs	r10, 4
    26ac:	10 c0       	rjmp	.+32     	; 0x26ce <vfprintf+0x356>
    26ae:	b6 01       	movw	r22, r12
    26b0:	80 e3       	ldi	r24, 0x30	; 48
    26b2:	90 e0       	ldi	r25, 0x00	; 0
    26b4:	0e 94 c3 13 	call	0x2786	; 0x2786 <fputc>
    26b8:	a2 fe       	sbrs	r10, 2
    26ba:	17 c0       	rjmp	.+46     	; 0x26ea <vfprintf+0x372>
    26bc:	a1 fc       	sbrc	r10, 1
    26be:	03 c0       	rjmp	.+6      	; 0x26c6 <vfprintf+0x34e>
    26c0:	88 e7       	ldi	r24, 0x78	; 120
    26c2:	90 e0       	ldi	r25, 0x00	; 0
    26c4:	02 c0       	rjmp	.+4      	; 0x26ca <vfprintf+0x352>
    26c6:	88 e5       	ldi	r24, 0x58	; 88
    26c8:	90 e0       	ldi	r25, 0x00	; 0
    26ca:	b6 01       	movw	r22, r12
    26cc:	0c c0       	rjmp	.+24     	; 0x26e6 <vfprintf+0x36e>
    26ce:	8a 2d       	mov	r24, r10
    26d0:	86 78       	andi	r24, 0x86	; 134
    26d2:	59 f0       	breq	.+22     	; 0x26ea <vfprintf+0x372>
    26d4:	a1 fe       	sbrs	r10, 1
    26d6:	02 c0       	rjmp	.+4      	; 0x26dc <vfprintf+0x364>
    26d8:	8b e2       	ldi	r24, 0x2B	; 43
    26da:	01 c0       	rjmp	.+2      	; 0x26de <vfprintf+0x366>
    26dc:	80 e2       	ldi	r24, 0x20	; 32
    26de:	a7 fc       	sbrc	r10, 7
    26e0:	8d e2       	ldi	r24, 0x2D	; 45
    26e2:	b6 01       	movw	r22, r12
    26e4:	90 e0       	ldi	r25, 0x00	; 0
    26e6:	0e 94 c3 13 	call	0x2786	; 0x2786 <fputc>
    26ea:	89 14       	cp	r8, r9
    26ec:	38 f4       	brcc	.+14     	; 0x26fc <vfprintf+0x384>
    26ee:	b6 01       	movw	r22, r12
    26f0:	80 e3       	ldi	r24, 0x30	; 48
    26f2:	90 e0       	ldi	r25, 0x00	; 0
    26f4:	0e 94 c3 13 	call	0x2786	; 0x2786 <fputc>
    26f8:	9a 94       	dec	r9
    26fa:	f7 cf       	rjmp	.-18     	; 0x26ea <vfprintf+0x372>
    26fc:	8a 94       	dec	r8
    26fe:	f3 01       	movw	r30, r6
    2700:	e8 0d       	add	r30, r8
    2702:	f1 1d       	adc	r31, r1
    2704:	80 81       	ld	r24, Z
    2706:	b6 01       	movw	r22, r12
    2708:	90 e0       	ldi	r25, 0x00	; 0
    270a:	0e 94 c3 13 	call	0x2786	; 0x2786 <fputc>
    270e:	81 10       	cpse	r8, r1
    2710:	f5 cf       	rjmp	.-22     	; 0x26fc <vfprintf+0x384>
    2712:	22 20       	and	r2, r2
    2714:	09 f4       	brne	.+2      	; 0x2718 <vfprintf+0x3a0>
    2716:	42 ce       	rjmp	.-892    	; 0x239c <vfprintf+0x24>
    2718:	b6 01       	movw	r22, r12
    271a:	80 e2       	ldi	r24, 0x20	; 32
    271c:	90 e0       	ldi	r25, 0x00	; 0
    271e:	0e 94 c3 13 	call	0x2786	; 0x2786 <fputc>
    2722:	2a 94       	dec	r2
    2724:	f6 cf       	rjmp	.-20     	; 0x2712 <vfprintf+0x39a>
    2726:	f6 01       	movw	r30, r12
    2728:	86 81       	ldd	r24, Z+6	; 0x06
    272a:	97 81       	ldd	r25, Z+7	; 0x07
    272c:	02 c0       	rjmp	.+4      	; 0x2732 <vfprintf+0x3ba>
    272e:	8f ef       	ldi	r24, 0xFF	; 255
    2730:	9f ef       	ldi	r25, 0xFF	; 255
    2732:	2b 96       	adiw	r28, 0x0b	; 11
    2734:	e2 e1       	ldi	r30, 0x12	; 18
    2736:	0c 94 79 14 	jmp	0x28f2	; 0x28f2 <__epilogue_restores__>

0000273a <strnlen_P>:
    273a:	fc 01       	movw	r30, r24
    273c:	05 90       	lpm	r0, Z+
    273e:	61 50       	subi	r22, 0x01	; 1
    2740:	70 40       	sbci	r23, 0x00	; 0
    2742:	01 10       	cpse	r0, r1
    2744:	d8 f7       	brcc	.-10     	; 0x273c <strnlen_P+0x2>
    2746:	80 95       	com	r24
    2748:	90 95       	com	r25
    274a:	8e 0f       	add	r24, r30
    274c:	9f 1f       	adc	r25, r31
    274e:	08 95       	ret

00002750 <strnlen>:
    2750:	fc 01       	movw	r30, r24
    2752:	61 50       	subi	r22, 0x01	; 1
    2754:	70 40       	sbci	r23, 0x00	; 0
    2756:	01 90       	ld	r0, Z+
    2758:	01 10       	cpse	r0, r1
    275a:	d8 f7       	brcc	.-10     	; 0x2752 <strnlen+0x2>
    275c:	80 95       	com	r24
    275e:	90 95       	com	r25
    2760:	8e 0f       	add	r24, r30
    2762:	9f 1f       	adc	r25, r31
    2764:	08 95       	ret

00002766 <strrev>:
    2766:	dc 01       	movw	r26, r24
    2768:	fc 01       	movw	r30, r24
    276a:	67 2f       	mov	r22, r23
    276c:	71 91       	ld	r23, Z+
    276e:	77 23       	and	r23, r23
    2770:	e1 f7       	brne	.-8      	; 0x276a <strrev+0x4>
    2772:	32 97       	sbiw	r30, 0x02	; 2
    2774:	04 c0       	rjmp	.+8      	; 0x277e <strrev+0x18>
    2776:	7c 91       	ld	r23, X
    2778:	6d 93       	st	X+, r22
    277a:	70 83       	st	Z, r23
    277c:	62 91       	ld	r22, -Z
    277e:	ae 17       	cp	r26, r30
    2780:	bf 07       	cpc	r27, r31
    2782:	c8 f3       	brcs	.-14     	; 0x2776 <strrev+0x10>
    2784:	08 95       	ret

00002786 <fputc>:
    2786:	0f 93       	push	r16
    2788:	1f 93       	push	r17
    278a:	cf 93       	push	r28
    278c:	df 93       	push	r29
    278e:	fb 01       	movw	r30, r22
    2790:	23 81       	ldd	r18, Z+3	; 0x03
    2792:	21 fd       	sbrc	r18, 1
    2794:	03 c0       	rjmp	.+6      	; 0x279c <fputc+0x16>
    2796:	8f ef       	ldi	r24, 0xFF	; 255
    2798:	9f ef       	ldi	r25, 0xFF	; 255
    279a:	2c c0       	rjmp	.+88     	; 0x27f4 <fputc+0x6e>
    279c:	22 ff       	sbrs	r18, 2
    279e:	16 c0       	rjmp	.+44     	; 0x27cc <fputc+0x46>
    27a0:	46 81       	ldd	r20, Z+6	; 0x06
    27a2:	57 81       	ldd	r21, Z+7	; 0x07
    27a4:	24 81       	ldd	r18, Z+4	; 0x04
    27a6:	35 81       	ldd	r19, Z+5	; 0x05
    27a8:	42 17       	cp	r20, r18
    27aa:	53 07       	cpc	r21, r19
    27ac:	44 f4       	brge	.+16     	; 0x27be <fputc+0x38>
    27ae:	a0 81       	ld	r26, Z
    27b0:	b1 81       	ldd	r27, Z+1	; 0x01
    27b2:	9d 01       	movw	r18, r26
    27b4:	2f 5f       	subi	r18, 0xFF	; 255
    27b6:	3f 4f       	sbci	r19, 0xFF	; 255
    27b8:	31 83       	std	Z+1, r19	; 0x01
    27ba:	20 83       	st	Z, r18
    27bc:	8c 93       	st	X, r24
    27be:	26 81       	ldd	r18, Z+6	; 0x06
    27c0:	37 81       	ldd	r19, Z+7	; 0x07
    27c2:	2f 5f       	subi	r18, 0xFF	; 255
    27c4:	3f 4f       	sbci	r19, 0xFF	; 255
    27c6:	37 83       	std	Z+7, r19	; 0x07
    27c8:	26 83       	std	Z+6, r18	; 0x06
    27ca:	14 c0       	rjmp	.+40     	; 0x27f4 <fputc+0x6e>
    27cc:	8b 01       	movw	r16, r22
    27ce:	ec 01       	movw	r28, r24
    27d0:	fb 01       	movw	r30, r22
    27d2:	00 84       	ldd	r0, Z+8	; 0x08
    27d4:	f1 85       	ldd	r31, Z+9	; 0x09
    27d6:	e0 2d       	mov	r30, r0
    27d8:	09 95       	icall
    27da:	89 2b       	or	r24, r25
    27dc:	e1 f6       	brne	.-72     	; 0x2796 <fputc+0x10>
    27de:	d8 01       	movw	r26, r16
    27e0:	16 96       	adiw	r26, 0x06	; 6
    27e2:	8d 91       	ld	r24, X+
    27e4:	9c 91       	ld	r25, X
    27e6:	17 97       	sbiw	r26, 0x07	; 7
    27e8:	01 96       	adiw	r24, 0x01	; 1
    27ea:	17 96       	adiw	r26, 0x07	; 7
    27ec:	9c 93       	st	X, r25
    27ee:	8e 93       	st	-X, r24
    27f0:	16 97       	sbiw	r26, 0x06	; 6
    27f2:	ce 01       	movw	r24, r28
    27f4:	df 91       	pop	r29
    27f6:	cf 91       	pop	r28
    27f8:	1f 91       	pop	r17
    27fa:	0f 91       	pop	r16
    27fc:	08 95       	ret

000027fe <__ultoa_invert>:
    27fe:	fa 01       	movw	r30, r20
    2800:	aa 27       	eor	r26, r26
    2802:	28 30       	cpi	r18, 0x08	; 8
    2804:	51 f1       	breq	.+84     	; 0x285a <__ultoa_invert+0x5c>
    2806:	20 31       	cpi	r18, 0x10	; 16
    2808:	81 f1       	breq	.+96     	; 0x286a <__ultoa_invert+0x6c>
    280a:	e8 94       	clt
    280c:	6f 93       	push	r22
    280e:	6e 7f       	andi	r22, 0xFE	; 254
    2810:	6e 5f       	subi	r22, 0xFE	; 254
    2812:	7f 4f       	sbci	r23, 0xFF	; 255
    2814:	8f 4f       	sbci	r24, 0xFF	; 255
    2816:	9f 4f       	sbci	r25, 0xFF	; 255
    2818:	af 4f       	sbci	r26, 0xFF	; 255
    281a:	b1 e0       	ldi	r27, 0x01	; 1
    281c:	3e d0       	rcall	.+124    	; 0x289a <__ultoa_invert+0x9c>
    281e:	b4 e0       	ldi	r27, 0x04	; 4
    2820:	3c d0       	rcall	.+120    	; 0x289a <__ultoa_invert+0x9c>
    2822:	67 0f       	add	r22, r23
    2824:	78 1f       	adc	r23, r24
    2826:	89 1f       	adc	r24, r25
    2828:	9a 1f       	adc	r25, r26
    282a:	a1 1d       	adc	r26, r1
    282c:	68 0f       	add	r22, r24
    282e:	79 1f       	adc	r23, r25
    2830:	8a 1f       	adc	r24, r26
    2832:	91 1d       	adc	r25, r1
    2834:	a1 1d       	adc	r26, r1
    2836:	6a 0f       	add	r22, r26
    2838:	71 1d       	adc	r23, r1
    283a:	81 1d       	adc	r24, r1
    283c:	91 1d       	adc	r25, r1
    283e:	a1 1d       	adc	r26, r1
    2840:	20 d0       	rcall	.+64     	; 0x2882 <__ultoa_invert+0x84>
    2842:	09 f4       	brne	.+2      	; 0x2846 <__ultoa_invert+0x48>
    2844:	68 94       	set
    2846:	3f 91       	pop	r19
    2848:	2a e0       	ldi	r18, 0x0A	; 10
    284a:	26 9f       	mul	r18, r22
    284c:	11 24       	eor	r1, r1
    284e:	30 19       	sub	r19, r0
    2850:	30 5d       	subi	r19, 0xD0	; 208
    2852:	31 93       	st	Z+, r19
    2854:	de f6       	brtc	.-74     	; 0x280c <__ultoa_invert+0xe>
    2856:	cf 01       	movw	r24, r30
    2858:	08 95       	ret
    285a:	46 2f       	mov	r20, r22
    285c:	47 70       	andi	r20, 0x07	; 7
    285e:	40 5d       	subi	r20, 0xD0	; 208
    2860:	41 93       	st	Z+, r20
    2862:	b3 e0       	ldi	r27, 0x03	; 3
    2864:	0f d0       	rcall	.+30     	; 0x2884 <__ultoa_invert+0x86>
    2866:	c9 f7       	brne	.-14     	; 0x285a <__ultoa_invert+0x5c>
    2868:	f6 cf       	rjmp	.-20     	; 0x2856 <__ultoa_invert+0x58>
    286a:	46 2f       	mov	r20, r22
    286c:	4f 70       	andi	r20, 0x0F	; 15
    286e:	40 5d       	subi	r20, 0xD0	; 208
    2870:	4a 33       	cpi	r20, 0x3A	; 58
    2872:	18 f0       	brcs	.+6      	; 0x287a <__ultoa_invert+0x7c>
    2874:	49 5d       	subi	r20, 0xD9	; 217
    2876:	31 fd       	sbrc	r19, 1
    2878:	40 52       	subi	r20, 0x20	; 32
    287a:	41 93       	st	Z+, r20
    287c:	02 d0       	rcall	.+4      	; 0x2882 <__ultoa_invert+0x84>
    287e:	a9 f7       	brne	.-22     	; 0x286a <__ultoa_invert+0x6c>
    2880:	ea cf       	rjmp	.-44     	; 0x2856 <__ultoa_invert+0x58>
    2882:	b4 e0       	ldi	r27, 0x04	; 4
    2884:	a6 95       	lsr	r26
    2886:	97 95       	ror	r25
    2888:	87 95       	ror	r24
    288a:	77 95       	ror	r23
    288c:	67 95       	ror	r22
    288e:	ba 95       	dec	r27
    2890:	c9 f7       	brne	.-14     	; 0x2884 <__ultoa_invert+0x86>
    2892:	00 97       	sbiw	r24, 0x00	; 0
    2894:	61 05       	cpc	r22, r1
    2896:	71 05       	cpc	r23, r1
    2898:	08 95       	ret
    289a:	9b 01       	movw	r18, r22
    289c:	ac 01       	movw	r20, r24
    289e:	0a 2e       	mov	r0, r26
    28a0:	06 94       	lsr	r0
    28a2:	57 95       	ror	r21
    28a4:	47 95       	ror	r20
    28a6:	37 95       	ror	r19
    28a8:	27 95       	ror	r18
    28aa:	ba 95       	dec	r27
    28ac:	c9 f7       	brne	.-14     	; 0x28a0 <__ultoa_invert+0xa2>
    28ae:	62 0f       	add	r22, r18
    28b0:	73 1f       	adc	r23, r19
    28b2:	84 1f       	adc	r24, r20
    28b4:	95 1f       	adc	r25, r21
    28b6:	a0 1d       	adc	r26, r0
    28b8:	08 95       	ret

000028ba <__prologue_saves__>:
    28ba:	2f 92       	push	r2
    28bc:	3f 92       	push	r3
    28be:	4f 92       	push	r4
    28c0:	5f 92       	push	r5
    28c2:	6f 92       	push	r6
    28c4:	7f 92       	push	r7
    28c6:	8f 92       	push	r8
    28c8:	9f 92       	push	r9
    28ca:	af 92       	push	r10
    28cc:	bf 92       	push	r11
    28ce:	cf 92       	push	r12
    28d0:	df 92       	push	r13
    28d2:	ef 92       	push	r14
    28d4:	ff 92       	push	r15
    28d6:	0f 93       	push	r16
    28d8:	1f 93       	push	r17
    28da:	cf 93       	push	r28
    28dc:	df 93       	push	r29
    28de:	cd b7       	in	r28, 0x3d	; 61
    28e0:	de b7       	in	r29, 0x3e	; 62
    28e2:	ca 1b       	sub	r28, r26
    28e4:	db 0b       	sbc	r29, r27
    28e6:	0f b6       	in	r0, 0x3f	; 63
    28e8:	f8 94       	cli
    28ea:	de bf       	out	0x3e, r29	; 62
    28ec:	0f be       	out	0x3f, r0	; 63
    28ee:	cd bf       	out	0x3d, r28	; 61
    28f0:	09 94       	ijmp

000028f2 <__epilogue_restores__>:
    28f2:	2a 88       	ldd	r2, Y+18	; 0x12
    28f4:	39 88       	ldd	r3, Y+17	; 0x11
    28f6:	48 88       	ldd	r4, Y+16	; 0x10
    28f8:	5f 84       	ldd	r5, Y+15	; 0x0f
    28fa:	6e 84       	ldd	r6, Y+14	; 0x0e
    28fc:	7d 84       	ldd	r7, Y+13	; 0x0d
    28fe:	8c 84       	ldd	r8, Y+12	; 0x0c
    2900:	9b 84       	ldd	r9, Y+11	; 0x0b
    2902:	aa 84       	ldd	r10, Y+10	; 0x0a
    2904:	b9 84       	ldd	r11, Y+9	; 0x09
    2906:	c8 84       	ldd	r12, Y+8	; 0x08
    2908:	df 80       	ldd	r13, Y+7	; 0x07
    290a:	ee 80       	ldd	r14, Y+6	; 0x06
    290c:	fd 80       	ldd	r15, Y+5	; 0x05
    290e:	0c 81       	ldd	r16, Y+4	; 0x04
    2910:	1b 81       	ldd	r17, Y+3	; 0x03
    2912:	aa 81       	ldd	r26, Y+2	; 0x02
    2914:	b9 81       	ldd	r27, Y+1	; 0x01
    2916:	ce 0f       	add	r28, r30
    2918:	d1 1d       	adc	r29, r1
    291a:	0f b6       	in	r0, 0x3f	; 63
    291c:	f8 94       	cli
    291e:	de bf       	out	0x3e, r29	; 62
    2920:	0f be       	out	0x3f, r0	; 63
    2922:	cd bf       	out	0x3d, r28	; 61
    2924:	ed 01       	movw	r28, r26
    2926:	08 95       	ret

00002928 <_exit>:
    2928:	f8 94       	cli

0000292a <__stop_program>:
    292a:	ff cf       	rjmp	.-2      	; 0x292a <__stop_program>
