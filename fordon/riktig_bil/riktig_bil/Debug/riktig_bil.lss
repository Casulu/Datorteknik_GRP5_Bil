
riktig_bil.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000066  00800100  00002bf2  00002c86  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002bf2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000068e  00800166  00800166  00002cec  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002cec  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002d48  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003e0  00000000  00000000  00002d88  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000052d1  00000000  00000000  00003168  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000180c  00000000  00000000  00008439  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000265c  00000000  00000000  00009c45  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007d0  00000000  00000000  0000c2a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000df7  00000000  00000000  0000ca74  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002d6f  00000000  00000000  0000d86b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000328  00000000  00000000  000105da  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 e4 07 	jmp	0xfc8	; 0xfc8 <__ctors_end>
       4:	0c 94 01 08 	jmp	0x1002	; 0x1002 <__bad_interrupt>
       8:	0c 94 01 08 	jmp	0x1002	; 0x1002 <__bad_interrupt>
       c:	0c 94 01 08 	jmp	0x1002	; 0x1002 <__bad_interrupt>
      10:	0c 94 01 08 	jmp	0x1002	; 0x1002 <__bad_interrupt>
      14:	0c 94 01 08 	jmp	0x1002	; 0x1002 <__bad_interrupt>
      18:	0c 94 01 08 	jmp	0x1002	; 0x1002 <__bad_interrupt>
      1c:	0c 94 c4 0a 	jmp	0x1588	; 0x1588 <__vector_7>
      20:	0c 94 01 08 	jmp	0x1002	; 0x1002 <__bad_interrupt>
      24:	0c 94 01 08 	jmp	0x1002	; 0x1002 <__bad_interrupt>
      28:	0c 94 01 08 	jmp	0x1002	; 0x1002 <__bad_interrupt>
      2c:	0c 94 01 08 	jmp	0x1002	; 0x1002 <__bad_interrupt>
      30:	0c 94 01 08 	jmp	0x1002	; 0x1002 <__bad_interrupt>
      34:	0c 94 01 08 	jmp	0x1002	; 0x1002 <__bad_interrupt>
      38:	0c 94 01 08 	jmp	0x1002	; 0x1002 <__bad_interrupt>
      3c:	0c 94 01 08 	jmp	0x1002	; 0x1002 <__bad_interrupt>
      40:	0c 94 01 08 	jmp	0x1002	; 0x1002 <__bad_interrupt>
      44:	0c 94 01 08 	jmp	0x1002	; 0x1002 <__bad_interrupt>
      48:	0c 94 31 0b 	jmp	0x1662	; 0x1662 <__vector_18>
      4c:	0c 94 01 08 	jmp	0x1002	; 0x1002 <__bad_interrupt>
      50:	0c 94 01 08 	jmp	0x1002	; 0x1002 <__bad_interrupt>
      54:	0c 94 01 08 	jmp	0x1002	; 0x1002 <__bad_interrupt>
      58:	0c 94 01 08 	jmp	0x1002	; 0x1002 <__bad_interrupt>
      5c:	0c 94 01 08 	jmp	0x1002	; 0x1002 <__bad_interrupt>
      60:	0c 94 01 08 	jmp	0x1002	; 0x1002 <__bad_interrupt>
      64:	0c 94 01 08 	jmp	0x1002	; 0x1002 <__bad_interrupt>
      68:	ef 09       	sbc	r30, r15
      6a:	f6 09       	sbc	r31, r6
      6c:	fc 09       	sbc	r31, r12
      6e:	37 0a       	sbc	r3, r23
      70:	5b 0a       	sbc	r5, r27
      72:	8e 0a       	sbc	r8, r30
      74:	95 0a       	sbc	r9, r21
      76:	9c 0a       	sbc	r9, r28
      78:	a1 0a       	sbc	r10, r17
      7a:	09 0a       	sbc	r0, r25
      7c:	0c 0a       	sbc	r0, r28
      7e:	0f 0a       	sbc	r0, r31
      80:	12 0a       	sbc	r1, r18
      82:	15 0a       	sbc	r1, r21
      84:	18 0a       	sbc	r1, r24
      86:	1b 0a       	sbc	r1, r27
      88:	1e 0a       	sbc	r1, r30
      8a:	21 0a       	sbc	r2, r17
      8c:	24 0a       	sbc	r2, r20
      8e:	ae 0a       	sbc	r10, r30
      90:	ae 0a       	sbc	r10, r30
      92:	ae 0a       	sbc	r10, r30
      94:	ae 0a       	sbc	r10, r30
      96:	ae 0a       	sbc	r10, r30
      98:	ae 0a       	sbc	r10, r30
      9a:	ae 0a       	sbc	r10, r30
      9c:	27 0a       	sbc	r2, r23
      9e:	2a 0a       	sbc	r2, r26
      a0:	2d 0a       	sbc	r2, r29
      a2:	30 0a       	sbc	r3, r16
      a4:	2a 0e       	add	r2, r26
      a6:	23 0e       	add	r2, r19
      a8:	1c 0e       	add	r1, r28
      aa:	15 0e       	add	r1, r21
      ac:	0e 0e       	add	r0, r30
      ae:	04 0e       	add	r0, r20
      b0:	fa 0d       	add	r31, r10
      b2:	f3 0d       	add	r31, r3
      b4:	ec 0d       	add	r30, r12

000000b6 <__trampolines_end>:
      b6:	a4 d0       	rcall	.+328    	; 0x200 <__trampolines_end+0x14a>
      b8:	82 43       	sbci	r24, 0x32	; 50
      ba:	00 04       	cpc	r0, r0
      bc:	01 0a       	sbc	r0, r17
      be:	97 8a       	std	Z+23, r9	; 0x17
      c0:	43 00       	.word	0x0043	; ????
      c2:	04 01       	movw	r0, r8
      c4:	7b d4       	rcall	.+2294   	; 0x9bc <__stack+0xbd>
      c6:	92 43       	sbci	r25, 0x32	; 50
      c8:	00 04       	cpc	r0, r0
      ca:	01 a4       	ldd	r0, Z+41	; 0x29
      cc:	90 9b       	sbis	0x12, 0	; 18
      ce:	43 00       	.word	0x0043	; ????
      d0:	04 01       	movw	r0, r8
      d2:	a4 d0       	rcall	.+328    	; 0x21c <__trampolines_end+0x166>
      d4:	a4 43       	sbci	r26, 0x34	; 52
      d6:	00 04       	cpc	r0, r0
      d8:	01 71       	andi	r16, 0x11	; 17
      da:	9d ae       	std	Y+61, r9	; 0x3d
      dc:	43 00       	.word	0x0043	; ????
      de:	04 01       	movw	r0, r8
      e0:	b8 fe       	.word	0xfeb8	; ????
      e2:	b8 43       	sbci	r27, 0x38	; 56
      e4:	00 04       	cpc	r0, r0
      e6:	01 00       	.word	0x0001	; ????
      e8:	00 c4       	rjmp	.+2048   	; 0x8ea <mario_galaxy_notes+0x15>
      ea:	43 00       	.word	0x0043	; ????
      ec:	04 01       	movw	r0, r8
      ee:	66 a6       	std	Z+46, r6	; 0x2e
      f0:	cf 43       	sbci	r28, 0x3F	; 63
      f2:	00 04       	cpc	r0, r0
      f4:	01 00       	.word	0x0001	; ????
      f6:	00 dc       	rcall	.-2048   	; 0xfffff8f8 <__eeprom_end+0xff7ef8f8>
      f8:	43 00       	.word	0x0043	; ????
      fa:	04 01       	movw	r0, r8
      fc:	7b 14       	cp	r7, r11
      fe:	e9 43       	sbci	r30, 0x39	; 57
     100:	00 04       	cpc	r0, r0
     102:	01 a4       	ldd	r0, Z+41	; 0x29
     104:	f0 f6       	brcc	.-68     	; 0xc2 <__trampolines_end+0xc>
     106:	43 00       	.word	0x0043	; ????
     108:	04 01       	movw	r0, r8
     10a:	00 00       	nop
     10c:	00 00       	nop
     10e:	00 01       	movw	r0, r0
     110:	01 a4       	ldd	r0, Z+41	; 0x29
     112:	d0 82       	st	Z, r13
     114:	43 01       	movw	r8, r6
     116:	04 01       	movw	r0, r8
     118:	0a 97       	sbiw	r24, 0x0a	; 10
     11a:	8a 43       	sbci	r24, 0x3A	; 58
     11c:	01 04       	cpc	r0, r1
     11e:	01 7b       	andi	r16, 0xB1	; 177
     120:	d4 92       	xch	Z, r13
     122:	43 01       	movw	r8, r6
     124:	04 01       	movw	r0, r8
     126:	a4 90       	lpm	r10, Z
     128:	9b 43       	sbci	r25, 0x3B	; 59
     12a:	01 04       	cpc	r0, r1
     12c:	01 a4       	ldd	r0, Z+41	; 0x29
     12e:	d0 a4       	ldd	r13, Z+40	; 0x28
     130:	43 01       	movw	r8, r6
     132:	04 01       	movw	r0, r8
     134:	71 9d       	mul	r23, r1
     136:	ae 43       	sbci	r26, 0x3E	; 62
     138:	01 04       	cpc	r0, r1
     13a:	01 b8       	out	0x01, r0	; 1
     13c:	fe b8       	out	0x0e, r15	; 14
     13e:	43 01       	movw	r8, r6
     140:	04 01       	movw	r0, r8
     142:	00 00       	nop
     144:	c4 43       	sbci	r28, 0x34	; 52
     146:	01 04       	cpc	r0, r1
     148:	01 66       	ori	r16, 0x61	; 97
     14a:	a6 cf       	rjmp	.-180    	; 0x98 <__SREG__+0x59>
     14c:	43 01       	movw	r8, r6
     14e:	04 01       	movw	r0, r8
     150:	00 00       	nop
     152:	dc 43       	sbci	r29, 0x3C	; 60
     154:	01 04       	cpc	r0, r1
     156:	01 7b       	andi	r16, 0xB1	; 177
     158:	14 e9       	ldi	r17, 0x94	; 148
     15a:	43 01       	movw	r8, r6
     15c:	04 01       	movw	r0, r8
     15e:	a4 f0       	brlt	.+40     	; 0x188 <__trampolines_end+0xd2>
     160:	f6 43       	sbci	r31, 0x36	; 54
     162:	01 04       	cpc	r0, r1
     164:	01 00       	.word	0x0001	; ????
     166:	00 00       	nop
     168:	00 00       	nop
     16a:	01 01       	movw	r0, r2
     16c:	a4 d0       	rcall	.+328    	; 0x2b6 <__trampolines_end+0x200>
     16e:	82 43       	sbci	r24, 0x32	; 50
     170:	02 04       	cpc	r0, r2
     172:	01 0a       	sbc	r0, r17
     174:	97 8a       	std	Z+23, r9	; 0x17
     176:	43 02       	muls	r20, r19
     178:	04 01       	movw	r0, r8
     17a:	7b d4       	rcall	.+2294   	; 0xa72 <__stack+0x173>
     17c:	92 43       	sbci	r25, 0x32	; 50
     17e:	02 04       	cpc	r0, r2
     180:	01 a4       	ldd	r0, Z+41	; 0x29
     182:	90 9b       	sbis	0x12, 0	; 18
     184:	43 02       	muls	r20, r19
     186:	04 01       	movw	r0, r8
     188:	a4 d0       	rcall	.+328    	; 0x2d2 <__trampolines_end+0x21c>
     18a:	a4 43       	sbci	r26, 0x34	; 52
     18c:	02 04       	cpc	r0, r2
     18e:	01 71       	andi	r16, 0x11	; 17
     190:	9d ae       	std	Y+61, r9	; 0x3d
     192:	43 02       	muls	r20, r19
     194:	04 01       	movw	r0, r8
     196:	b8 fe       	.word	0xfeb8	; ????
     198:	b8 43       	sbci	r27, 0x38	; 56
     19a:	02 04       	cpc	r0, r2
     19c:	01 00       	.word	0x0001	; ????
     19e:	00 c4       	rjmp	.+2048   	; 0x9a0 <__stack+0xa1>
     1a0:	43 02       	muls	r20, r19
     1a2:	04 01       	movw	r0, r8
     1a4:	66 a6       	std	Z+46, r6	; 0x2e
     1a6:	cf 43       	sbci	r28, 0x3F	; 63
     1a8:	02 04       	cpc	r0, r2
     1aa:	01 00       	.word	0x0001	; ????
     1ac:	00 dc       	rcall	.-2048   	; 0xfffff9ae <__eeprom_end+0xff7ef9ae>
     1ae:	43 02       	muls	r20, r19
     1b0:	04 01       	movw	r0, r8
     1b2:	7b 14       	cp	r7, r11
     1b4:	e9 43       	sbci	r30, 0x39	; 57
     1b6:	02 04       	cpc	r0, r2
     1b8:	01 a4       	ldd	r0, Z+41	; 0x29
     1ba:	f0 f6       	brcc	.-68     	; 0x178 <__trampolines_end+0xc2>
     1bc:	43 02       	muls	r20, r19
     1be:	04 01       	movw	r0, r8
     1c0:	00 00       	nop
     1c2:	00 00       	nop
     1c4:	00 01       	movw	r0, r0
     1c6:	01 a4       	ldd	r0, Z+41	; 0x29
     1c8:	d0 82       	st	Z, r13
     1ca:	43 03       	mulsu	r20, r19
     1cc:	04 01       	movw	r0, r8
     1ce:	0a 97       	sbiw	r24, 0x0a	; 10
     1d0:	8a 43       	sbci	r24, 0x3A	; 58
     1d2:	03 04       	cpc	r0, r3
     1d4:	01 7b       	andi	r16, 0xB1	; 177
     1d6:	d4 92       	xch	Z, r13
     1d8:	43 03       	mulsu	r20, r19
     1da:	04 01       	movw	r0, r8
     1dc:	a4 90       	lpm	r10, Z
     1de:	9b 43       	sbci	r25, 0x3B	; 59
     1e0:	03 04       	cpc	r0, r3
     1e2:	01 a4       	ldd	r0, Z+41	; 0x29
     1e4:	d0 a4       	ldd	r13, Z+40	; 0x28
     1e6:	43 03       	mulsu	r20, r19
     1e8:	04 01       	movw	r0, r8
     1ea:	71 9d       	mul	r23, r1
     1ec:	ae 43       	sbci	r26, 0x3E	; 62
     1ee:	03 04       	cpc	r0, r3
     1f0:	01 b8       	out	0x01, r0	; 1
     1f2:	fe b8       	out	0x0e, r15	; 14
     1f4:	43 03       	mulsu	r20, r19
     1f6:	04 01       	movw	r0, r8
     1f8:	00 00       	nop
     1fa:	c4 43       	sbci	r28, 0x34	; 52
     1fc:	03 04       	cpc	r0, r3
     1fe:	01 66       	ori	r16, 0x61	; 97
     200:	a6 cf       	rjmp	.-180    	; 0x14e <__trampolines_end+0x98>
     202:	43 03       	mulsu	r20, r19
     204:	04 01       	movw	r0, r8
     206:	00 00       	nop
     208:	dc 43       	sbci	r29, 0x3C	; 60
     20a:	03 04       	cpc	r0, r3
     20c:	01 7b       	andi	r16, 0xB1	; 177
     20e:	14 e9       	ldi	r17, 0x94	; 148
     210:	43 03       	mulsu	r20, r19
     212:	04 01       	movw	r0, r8
     214:	a4 f0       	brlt	.+40     	; 0x23e <__trampolines_end+0x188>
     216:	f6 43       	sbci	r31, 0x36	; 54
     218:	03 04       	cpc	r0, r3
     21a:	01 00       	.word	0x0001	; ????
     21c:	00 00       	nop
     21e:	00 00       	nop
     220:	01 01       	movw	r0, r2
     222:	a4 d0       	rcall	.+328    	; 0x36c <__trampolines_end+0x2b6>
     224:	82 43       	sbci	r24, 0x32	; 50
     226:	04 04       	cpc	r0, r4
     228:	01 0a       	sbc	r0, r17
     22a:	97 8a       	std	Z+23, r9	; 0x17
     22c:	43 04       	cpc	r4, r3
     22e:	04 01       	movw	r0, r8
     230:	7b d4       	rcall	.+2294   	; 0xb28 <cantina_band_notes+0xa8>
     232:	92 43       	sbci	r25, 0x32	; 50
     234:	04 04       	cpc	r0, r4
     236:	01 a4       	ldd	r0, Z+41	; 0x29
     238:	90 9b       	sbis	0x12, 0	; 18
     23a:	43 04       	cpc	r4, r3
     23c:	04 01       	movw	r0, r8
     23e:	a4 d0       	rcall	.+328    	; 0x388 <__trampolines_end+0x2d2>
     240:	a4 43       	sbci	r26, 0x34	; 52
     242:	04 04       	cpc	r0, r4
     244:	01 71       	andi	r16, 0x11	; 17
     246:	9d ae       	std	Y+61, r9	; 0x3d
     248:	43 04       	cpc	r4, r3
     24a:	04 01       	movw	r0, r8
     24c:	b8 fe       	.word	0xfeb8	; ????
     24e:	b8 43       	sbci	r27, 0x38	; 56
     250:	04 04       	cpc	r0, r4
     252:	01 00       	.word	0x0001	; ????
     254:	00 c4       	rjmp	.+2048   	; 0xa56 <__stack+0x157>
     256:	43 04       	cpc	r4, r3
     258:	04 01       	movw	r0, r8
     25a:	66 a6       	std	Z+46, r6	; 0x2e
     25c:	cf 43       	sbci	r28, 0x3F	; 63
     25e:	04 04       	cpc	r0, r4
     260:	01 00       	.word	0x0001	; ????
     262:	00 dc       	rcall	.-2048   	; 0xfffffa64 <__eeprom_end+0xff7efa64>
     264:	43 04       	cpc	r4, r3
     266:	04 01       	movw	r0, r8
     268:	7b 14       	cp	r7, r11
     26a:	e9 43       	sbci	r30, 0x39	; 57
     26c:	04 04       	cpc	r0, r4
     26e:	01 a4       	ldd	r0, Z+41	; 0x29
     270:	f0 f6       	brcc	.-68     	; 0x22e <__trampolines_end+0x178>
     272:	43 04       	cpc	r4, r3
     274:	04 01       	movw	r0, r8
     276:	00 00       	nop
     278:	00 00       	nop
     27a:	00 01       	movw	r0, r0
     27c:	01 a4       	ldd	r0, Z+41	; 0x29
     27e:	d0 82       	st	Z, r13
     280:	43 05       	cpc	r20, r3
     282:	04 01       	movw	r0, r8
     284:	0a 97       	sbiw	r24, 0x0a	; 10
     286:	8a 43       	sbci	r24, 0x3A	; 58
     288:	05 04       	cpc	r0, r5
     28a:	01 7b       	andi	r16, 0xB1	; 177
     28c:	d4 92       	xch	Z, r13
     28e:	43 05       	cpc	r20, r3
     290:	04 01       	movw	r0, r8
     292:	a4 90       	lpm	r10, Z
     294:	9b 43       	sbci	r25, 0x3B	; 59
     296:	05 04       	cpc	r0, r5
     298:	01 a4       	ldd	r0, Z+41	; 0x29
     29a:	d0 a4       	ldd	r13, Z+40	; 0x28
     29c:	43 05       	cpc	r20, r3
     29e:	04 01       	movw	r0, r8
     2a0:	71 9d       	mul	r23, r1
     2a2:	ae 43       	sbci	r26, 0x3E	; 62
     2a4:	05 04       	cpc	r0, r5
     2a6:	01 b8       	out	0x01, r0	; 1
     2a8:	fe b8       	out	0x0e, r15	; 14
     2aa:	43 05       	cpc	r20, r3
     2ac:	04 01       	movw	r0, r8
     2ae:	00 00       	nop
     2b0:	c4 43       	sbci	r28, 0x34	; 52
     2b2:	05 04       	cpc	r0, r5
     2b4:	01 66       	ori	r16, 0x61	; 97
     2b6:	a6 cf       	rjmp	.-180    	; 0x204 <__trampolines_end+0x14e>
     2b8:	43 05       	cpc	r20, r3
     2ba:	04 01       	movw	r0, r8
     2bc:	00 00       	nop
     2be:	dc 43       	sbci	r29, 0x3C	; 60
     2c0:	05 04       	cpc	r0, r5
     2c2:	01 7b       	andi	r16, 0xB1	; 177
     2c4:	14 e9       	ldi	r17, 0x94	; 148
     2c6:	43 05       	cpc	r20, r3
     2c8:	04 01       	movw	r0, r8
     2ca:	a4 f0       	brlt	.+40     	; 0x2f4 <__trampolines_end+0x23e>
     2cc:	f6 43       	sbci	r31, 0x36	; 54
     2ce:	05 04       	cpc	r0, r5
     2d0:	01 00       	.word	0x0001	; ????
     2d2:	00 00       	nop
     2d4:	00 00       	nop
     2d6:	01 01       	movw	r0, r2
     2d8:	a4 d0       	rcall	.+328    	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
     2da:	82 43       	sbci	r24, 0x32	; 50
     2dc:	06 04       	cpc	r0, r6
     2de:	01 0a       	sbc	r0, r17
     2e0:	97 8a       	std	Z+23, r9	; 0x17
     2e2:	43 06       	cpc	r4, r19
     2e4:	04 01       	movw	r0, r8
     2e6:	7b d4       	rcall	.+2294   	; 0xbde <cantina_band_notes+0x15e>
     2e8:	92 43       	sbci	r25, 0x32	; 50
     2ea:	06 04       	cpc	r0, r6
     2ec:	01 a4       	ldd	r0, Z+41	; 0x29
     2ee:	90 9b       	sbis	0x12, 0	; 18
     2f0:	43 06       	cpc	r4, r19
     2f2:	04 01       	movw	r0, r8
     2f4:	a4 d0       	rcall	.+328    	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
     2f6:	a4 43       	sbci	r26, 0x34	; 52
     2f8:	06 04       	cpc	r0, r6
     2fa:	01 71       	andi	r16, 0x11	; 17
     2fc:	9d ae       	std	Y+61, r9	; 0x3d
     2fe:	43 06       	cpc	r4, r19
     300:	04 01       	movw	r0, r8
     302:	b8 fe       	.word	0xfeb8	; ????
     304:	b8 43       	sbci	r27, 0x38	; 56
     306:	06 04       	cpc	r0, r6
     308:	01 00       	.word	0x0001	; ????
     30a:	00 c4       	rjmp	.+2048   	; 0xb0c <cantina_band_notes+0x8c>
     30c:	43 06       	cpc	r4, r19
     30e:	04 01       	movw	r0, r8
     310:	66 a6       	std	Z+46, r6	; 0x2e
     312:	cf 43       	sbci	r28, 0x3F	; 63
     314:	06 04       	cpc	r0, r6
     316:	01 00       	.word	0x0001	; ????
     318:	00 dc       	rcall	.-2048   	; 0xfffffb1a <__eeprom_end+0xff7efb1a>
     31a:	43 06       	cpc	r4, r19
     31c:	04 01       	movw	r0, r8
     31e:	7b 14       	cp	r7, r11
     320:	e9 43       	sbci	r30, 0x39	; 57
     322:	06 04       	cpc	r0, r6
     324:	01 a4       	ldd	r0, Z+41	; 0x29
     326:	f0 f6       	brcc	.-68     	; 0x2e4 <__trampolines_end+0x22e>
     328:	43 06       	cpc	r4, r19
     32a:	04 01       	movw	r0, r8
     32c:	00 00       	nop
     32e:	00 00       	nop
     330:	00 01       	movw	r0, r0
     332:	01 a4       	ldd	r0, Z+41	; 0x29
     334:	d0 82       	st	Z, r13
     336:	43 07       	cpc	r20, r19
     338:	04 01       	movw	r0, r8
     33a:	0a 97       	sbiw	r24, 0x0a	; 10
     33c:	8a 43       	sbci	r24, 0x3A	; 58
     33e:	07 04       	cpc	r0, r7
     340:	01 7b       	andi	r16, 0xB1	; 177
     342:	d4 92       	xch	Z, r13
     344:	43 07       	cpc	r20, r19
     346:	04 01       	movw	r0, r8
     348:	a4 90       	lpm	r10, Z
     34a:	9b 43       	sbci	r25, 0x3B	; 59
     34c:	07 04       	cpc	r0, r7
     34e:	01 a4       	ldd	r0, Z+41	; 0x29
     350:	d0 a4       	ldd	r13, Z+40	; 0x28
     352:	43 07       	cpc	r20, r19
     354:	04 01       	movw	r0, r8
     356:	71 9d       	mul	r23, r1
     358:	ae 43       	sbci	r26, 0x3E	; 62
     35a:	07 04       	cpc	r0, r7
     35c:	01 b8       	out	0x01, r0	; 1
     35e:	fe b8       	out	0x0e, r15	; 14
     360:	43 07       	cpc	r20, r19
     362:	04 01       	movw	r0, r8
     364:	00 00       	nop
     366:	c4 43       	sbci	r28, 0x34	; 52
     368:	07 04       	cpc	r0, r7
     36a:	01 66       	ori	r16, 0x61	; 97
     36c:	a6 cf       	rjmp	.-180    	; 0x2ba <__trampolines_end+0x204>
     36e:	43 07       	cpc	r20, r19
     370:	04 01       	movw	r0, r8
     372:	00 00       	nop
     374:	dc 43       	sbci	r29, 0x3C	; 60
     376:	07 04       	cpc	r0, r7
     378:	01 7b       	andi	r16, 0xB1	; 177
     37a:	14 e9       	ldi	r17, 0x94	; 148
     37c:	43 07       	cpc	r20, r19
     37e:	04 01       	movw	r0, r8
     380:	a4 f0       	brlt	.+40     	; 0x3aa <__trampolines_end+0x2f4>
     382:	f6 43       	sbci	r31, 0x36	; 54
     384:	07 04       	cpc	r0, r7
     386:	01 00       	.word	0x0001	; ????
     388:	00 00       	nop
     38a:	00 00       	nop
     38c:	01 01       	movw	r0, r2
     38e:	a4 d0       	rcall	.+328    	; 0x4d8 <__EEPROM_REGION_LENGTH__+0xd8>
     390:	82 43       	sbci	r24, 0x32	; 50
     392:	08 04       	cpc	r0, r8
     394:	01 0a       	sbc	r0, r17
     396:	97 8a       	std	Z+23, r9	; 0x17
     398:	43 08       	sbc	r4, r3
     39a:	04 01       	movw	r0, r8
     39c:	7b d4       	rcall	.+2294   	; 0xc94 <soviet_anthem_notes+0x54>
     39e:	92 43       	sbci	r25, 0x32	; 50
     3a0:	08 04       	cpc	r0, r8
     3a2:	01 a4       	ldd	r0, Z+41	; 0x29
     3a4:	90 9b       	sbis	0x12, 0	; 18
     3a6:	43 08       	sbc	r4, r3
     3a8:	04 01       	movw	r0, r8
     3aa:	a4 d0       	rcall	.+328    	; 0x4f4 <__EEPROM_REGION_LENGTH__+0xf4>
     3ac:	a4 43       	sbci	r26, 0x34	; 52
     3ae:	08 04       	cpc	r0, r8
     3b0:	01 71       	andi	r16, 0x11	; 17
     3b2:	9d ae       	std	Y+61, r9	; 0x3d
     3b4:	43 08       	sbc	r4, r3
     3b6:	04 01       	movw	r0, r8
     3b8:	b8 fe       	.word	0xfeb8	; ????
     3ba:	b8 43       	sbci	r27, 0x38	; 56
     3bc:	08 04       	cpc	r0, r8
     3be:	01 00       	.word	0x0001	; ????
     3c0:	00 c4       	rjmp	.+2048   	; 0xbc2 <cantina_band_notes+0x142>
     3c2:	43 08       	sbc	r4, r3
     3c4:	04 01       	movw	r0, r8
     3c6:	66 a6       	std	Z+46, r6	; 0x2e
     3c8:	cf 43       	sbci	r28, 0x3F	; 63
     3ca:	08 04       	cpc	r0, r8
     3cc:	01 00       	.word	0x0001	; ????
     3ce:	00 dc       	rcall	.-2048   	; 0xfffffbd0 <__eeprom_end+0xff7efbd0>
     3d0:	43 08       	sbc	r4, r3
     3d2:	04 01       	movw	r0, r8
     3d4:	7b 14       	cp	r7, r11
     3d6:	e9 43       	sbci	r30, 0x39	; 57
     3d8:	08 04       	cpc	r0, r8
     3da:	01 a4       	ldd	r0, Z+41	; 0x29
     3dc:	f0 f6       	brcc	.-68     	; 0x39a <__trampolines_end+0x2e4>
     3de:	43 08       	sbc	r4, r3
     3e0:	04 01       	movw	r0, r8

000003e2 <petalburg_notes>:
     3e2:	7b 14 e9 43 04 08 01 00 00 00 00 00 08 01 a4 d0     {..C............
     3f2:	82 43 05 08 01 00 00 00 00 00 08 01 7b d4 92 43     .C..........{..C
     402:	05 10 03 a4 90 9b 43 05 10 03 71 9d ae 43 05 10     ......C...q..C..
     412:	02 a4 90 9b 43 05 10 03 00 00 00 00 00 10 01 a4     ....C...........
     422:	90 9b 43 05 10 01 71 9d ae 43 05 10 01 a4 90 9b     ..C...q..C......
     432:	43 05 08 01 7b d4 92 43 05 10 03 00 00 00 00 00     C...{..C........
     442:	10 01 7b d4 92 43 05 10 01 a4 90 9b 43 05 10 01     ..{..C......C...
     452:	7b d4 92 43 05 08 01 a4 d0 82 43 05 02 01 00 00     {..C......C.....
     462:	00 00 00 08 01 71 9d ae 43 05 08 01 66 a6 cf 43     .....q..C...f..C
     472:	05 08 01 71 9d ae 43 05 08 01 71 9d ae 43 05 10     ...q..C...q..C..
     482:	03 00 00 00 00 00 10 01 71 9d ae 43 05 10 01 00     ........q..C....
     492:	00 c4 43 05 10 01 66 a6 cf 43 05 08 01 a4 d0 82     ..C...f..C......
     4a2:	43 05 10 03 00 00 00 00 00 10 01 a4 d0 82 43 05     C.............C.
     4b2:	10 01 7b d4 92 43 05 10 01 a4 90 9b 43 05 08 01     ..{..C......C...
     4c2:	7b d4 92 43 05 08 03 a4 d0 82 43 05 08 01 7b 14     {..C......C...{.
     4d2:	e9 43 04 02 01 00 00 c4 43 05 10 03 00 00 00 00     .C......C.......
     4e2:	00 10 01 00 00 c4 43 05 10 01 66 a6 cf 43 05 10     ......C...f..C..
     4f2:	01 00 00 c4 43 05 08 01 71 9d ae 43 05 10 03 00     ....C...q..C....
     502:	00 00 00 00 10 01 71 9d ae 43 05 10 01 00 00 c4     ......q..C......
     512:	43 05 10 01 71 9d ae 43 05 08 01 a4 90 9b 43 05     C...q..C......C.
     522:	02 01 00 00 00 00 00 08 01 7b 14 e9 43 04 08 01     .........{..C...
     532:	a4 90 9b 43 05 08 01 7b 14 e9 43 05 08 01 66 a6     ...C...{..C...f.
     542:	cf 43 05 10 03 00 00 00 00 00 10 01 66 a6 cf 43     .C..........f..C
     552:	05 10 01 7b 14 e9 43 05 10 01 66 a6 cf 43 05 08     ...{..C...f..C..
     562:	01 00 00 c4 43 05 10 03 00 00 00 00 00 10 01 00     ....C...........
     572:	00 c4 43 05 10 01 66 a6 cf 43 05 10 01 00 00 c4     ..C...f..C......
     582:	43 05 08 01 0a 97 8a 43 05 08 03 a4 90 9b 43 05     C......C......C.
     592:	08 01 71 9d ae 43 05 04 01 00 00 c4 43 04 08 01     ..q..C......C...
     5a2:	66 a6 cf 43 04 08 01 7b 14 e9 43 04 08 01 00 00     f..C...{..C.....
     5b2:	00 00 00 08 04 7b 14 e9 43 04 08 01 a4 d0 82 43     .....{..C......C
     5c2:	04 08 01 0a 97 8a 43 04 08 01 a4 d0 82 43 04 08     ......C......C..
     5d2:	01 00 00 00 00 00 08 04 00 00 c4 43 04 08 01 a4     ...........C....
     5e2:	d0 82 43 04 08 01 00 00 c4 43 04 08 01 66 a6 cf     ..C......C...f..
     5f2:	43 04 08 01 00 00 00 00 00 08 04 66 a6 cf 43 04     C..........f..C.
     602:	08 01 00 00 c4 43 04 08 01 66 a6 cf 43 04 08 01     .....C...f..C...
     612:	00 00 c4 43 04 10 03 7b 14 e9 43 04 10 01 00 00     ...C...{..C.....
     622:	00 00 00 08 01 a4 90 9b 43 05 08 01 00 00 c4 43     ........C......C
     632:	04 02 01 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

0000070e <pokemon_center_notes>:
     70e:	7b d4 92 43 05 08 01 00 00 dc 43 04 08 01 7b d4     {..C......C...{.
     71e:	92 43 05 08 01 00 00 dc 43 05 04 01 00 00 c4 43     .C......C......C
     72e:	05 04 01 b8 fe b8 43 05 08 01 a4 d0 a4 43 05 08     ......C......C..
     73e:	01 0a 97 8a 43 05 08 03 00 00 00 00 00 02 01 0a     ....C...........
     74e:	97 8a 43 05 08 01 00 00 dc 43 04 08 01 0a 97 8a     ..C......C......
     75e:	43 05 08 01 b8 fe b8 43 05 04 01 a4 d0 a4 43 05     C......C......C.
     76e:	04 01 0a 97 8a 43 05 08 01 7b d4 92 43 05 08 01     .....C...{..C...
     77e:	b8 fe b8 43 05 08 03 00 00 00 00 00 02 01 7b d4     ...C..........{.
     78e:	92 43 05 08 01 00 00 dc 43 04 08 01 7b d4 92 43     .C......C...{..C
     79e:	05 08 01 00 00 dc 43 05 04 01 00 00 c4 43 05 04     ......C......C..
     7ae:	01 b8 fe b8 43 05 08 01 a4 d0 a4 43 05 08 01 0a     ....C......C....
     7be:	97 8a 43 05 08 03 00 00 00 00 00 02 01 0a 97 8a     ..C.............
     7ce:	43 05 08 01 00 00 dc 43 04 08 01 0a 97 8a 43 05     C......C......C.
     7de:	08 01 b8 fe b8 43 05 04 01 a4 d0 a4 43 05 04 01     .....C......C...
     7ee:	0a 97 8a 43 05 08 01 7b d4 92 43 05 02 01 00 00     ...C...{..C.....
     7fe:	00 00 00 02 01 b8 fe b8 43 05 02 01 00 00 dc 43     ........C......C
     80e:	05 02 01 00 00 c4 43 05 08 01 00 00 dc 43 05 08     ......C......C..
     81e:	01 00 00 c4 43 05 08 01 b8 fe b8 43 05 08 01 a4     ....C......C....
     82e:	d0 a4 43 05 02 01 0a 97 8a 43 05 02 01 a4 d0 a4     ..C......C......
     83e:	43 05 02 01 b8 fe b8 43 05 08 01 00 00 c4 43 05     C......C......C.
     84e:	08 01 b8 fe b8 43 05 08 01 a4 d0 a4 43 05 08 01     .....C......C...
     85e:	7b d4 92 43 05 02 01 b8 fe b8 43 05 02 01 00 00     {..C......C.....
     86e:	dc 43 05 02 01 00 00 c4 43 05 08 01 b8 fe b8 43     .C......C......C
     87e:	05 08 01 00 00 c4 43 05 08 01 00 00 dc 43 05 08     ......C......C..
     88e:	01 a4 f0 f6 43 05 02 01 00 00 dc 43 05 04 01 00     ....C......C....
     89e:	00 c4 43 05 08 01 b8 fe b8 43 05 08 01 00 00 c4     ..C......C......
     8ae:	43 05 02 01 b8 fe b8 43 05 08 01 00 00 c4 43 05     C......C......C.
     8be:	08 01 b8 fe b8 43 05 08 01 a4 d0 a4 43 05 08 01     .....C......C...
     8ce:	7b d4 92 43 05 02 01                                {..C...

000008d5 <mario_galaxy_notes>:
     8d5:	71 9d ae 43 05 08 05 a4 d0 a4 43 05 08 01 00 00     q..C......C.....
     8e5:	c4 43 05 08 01 71 9d ae 43 05 08 01 a4 d0 82 43     .C...q..C......C
     8f5:	05 08 05 00 00 dc 43 04 08 01 7b 14 e9 43 04 08     ......C...{..C..
     905:	01 a4 d0 82 43 05 08 01 a4 d0 82 43 05 08 03 7b     ....C......C...{
     915:	14 e9 43 04 08 05 00 00 00 00 00 01 01 00 00 c4     ..C.............
     925:	43 05 08 05 b8 fe b8 43 05 08 01 00 00 dc 43 05     C......C......C.
     935:	08 01 00 00 c4 43 05 08 01 71 9d ae 43 05 08 03     .....C...q..C...
     945:	a4 d0 a4 43 05 04 01 7b d4 92 43 05 04 01 a4 d0     ...C...{..C.....
     955:	a4 43 05 08 01 7b d4 92 43 05 08 03 a4 d0 82 43     .C...{..C......C
     965:	05 08 05 00 00 00 00 00 01 01 a4 d0 82 43 06 08     .............C..
     975:	05 a4 f0 f6 43 05 08 01 7b d4 92 43 06 08 01 a4     ....C...{..C....
     985:	d0 82 43 06 08 01 7b 14 e9 43 05 08 03 00 00 dc     ..C...{..C......
     995:	43 05 08 05 7b 14 e9 43 05 08 05 00 00 dc 43 05     C...{..C......C.
     9a5:	08 01 a4 d0 82 43 06 08 01 7b 14 e9 43 05 08 01     .....C...{..C...
     9b5:	00 00 dc 43 05 08 03 00 00 c4 43 05 08 05 00 00     ...C......C.....
     9c5:	dc 43 05 08 05 66 a6 cf 43 05 08 01 7b 14 e9 43     .C...f..C...{..C
     9d5:	05 08 01 00 00 dc 43 05 08 01 00 00 c4 43 05 08     ......C......C..
     9e5:	03 71 9d ae 43 05 08 02 00 00 dc 43 05 04 01 00     .q..C......C....
     9f5:	00 c4 43 05 08 01 71 9d ae 43 05 08 03 a4 d0 a4     ..C...q..C......
     a05:	43 05 08 05 71 9d ae 43 05 08 03 00 00 c4 43 05     C...q..C......C.
     a15:	08 05 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

00000a80 <cantina_band_notes>:
     a80:	00 00 dc 43 04 04 01 7b d4 92 43 05 04 01 00 00     ...C...{..C.....
     a90:	dc 43 04 04 01 7b d4 92 43 05 04 01 00 00 dc 43     .C...{..C......C
     aa0:	04 04 01 7b d4 92 43 05 04 01 00 00 dc 43 04 08     ...{..C......C..
     ab0:	01 66 a6 cf 43 04 08 01 00 00 dc 43 04 04 01 00     .f..C......C....
     ac0:	00 dc 43 04 08 01 66 a6 cf 43 04 08 01 00 00 dc     ..C...f..C......
     ad0:	43 04 08 01 00 00 c4 43 04 08 01 00 00 00 00 00     C......C........
     ae0:	08 01 b8 fe b8 43 04 08 01 00 00 c4 43 04 08 01     .....C......C...
     af0:	b8 fe b8 43 04 08 01 71 9d ae 43 04 02 01 7b d4     ...C...q..C...{.
     b00:	92 43 04 04 01 00 00 00 00 00 04 01 00 00 dc 43     .C.............C
     b10:	04 04 01 7b d4 92 43 05 04 01 00 00 dc 43 04 04     ...{..C......C..
     b20:	01 7b d4 92 43 05 04 01 00 00 dc 43 04 04 01 7b     .{..C......C...{
     b30:	d4 92 43 05 04 01 00 00 dc 43 04 08 01 66 a6 cf     ..C......C...f..
     b40:	43 04 08 01 00 00 dc 43 04 04 01 00 00 c4 43 04     C......C......C.
     b50:	04 01 00 00 c4 43 04 04 01 b8 fe b8 43 04 04 01     .....C......C...
     b60:	00 00 c4 43 04 04 01 a4 d0 82 43 05 04 01 7b 14     ...C......C...{.
     b70:	e9 43 04 04 01 00 00 dc 43 04 04 01 00 00 c4 43     .C......C......C
     b80:	04 04 01 00 00 dc 43 04 04 01 7b d4 92 43 05 04     ......C...{..C..
     b90:	01 00 00 dc 43 04 04 01 7b d4 92 43 05 04 01 00     ....C...{..C....
     ba0:	00 dc 43 04 04 01 7b d4 92 43 05 04 01 00 00 dc     ..C...{..C......
     bb0:	43 04 08 01 66 a6 cf 43 04 08 01 00 00 dc 43 04     C...f..C......C.
     bc0:	04 01 a4 d0 82 43 05 04 01 a4 d0 82 43 05 04 01     .....C......C...
     bd0:	00 00 dc 43 04 04 01 00 00 c4 43 04 04 01 71 9d     ...C......C...q.
     be0:	ae 43 04 02 01 7b d4 92 43 04 02 01 7b d4 92 43     .C...{..C...{..C
     bf0:	04 02 01 71 9d ae 43 04 02 01 00 00 dc 43 04 02     ...q..C......C..
     c00:	01 a4 d0 82 43 05 02 01 a4 90 9b 43 05 04 01 7b     ....C......C...{
     c10:	d4 92 43 05 04 01 66 a6 cf 43 04 08 01 00 00 dc     ..C...f..C......
     c20:	43 04 04 01 71 9d ae 43 04 08 01                    C...q..C...

00000c2b <horn_notes>:
     c2b:	00 00 dc 43 04 08 01 00 00 00 00 00 08 01 00 00     ...C............
     c3b:	dc 43 04 08 01                                      .C...

00000c40 <soviet_anthem_notes>:
     c40:	a4 d0 82 43 05 04 03 00 00 00 00 00 08 01 00 00     ...C............
     c50:	c4 43 04 08 01 a4 d0 82 43 05 04 01 00 00 c4 43     .C......C......C
     c60:	04 10 03 00 00 dc 43 04 10 01 a4 f0 f6 43 04 04     ......C......C..
     c70:	01 a4 d0 a4 43 04 08 01 a4 d0 a4 43 04 08 01 00     ....C......C....
     c80:	00 dc 43 04 04 01 00 00 c4 43 04 10 03 71 9d ae     ..C......C...q..
     c90:	43 04 10 01 00 00 c4 43 04 04 01 a4 d0 82 43 04     C......C......C.
     ca0:	08 01 a4 d0 82 43 04 08 01 7b d4 92 43 04 04 01     .....C...{..C...
     cb0:	7b d4 92 43 04 10 03 a4 d0 a4 43 04 10 01 71 9d     {..C......C...q.
     cc0:	ae 43 04 04 01 71 9d ae 43 04 10 03 00 00 c4 43     .C...q..C......C
     cd0:	04 10 01 00 00 dc 43 04 04 01 a4 f0 f6 43 04 08     ......C......C..
     ce0:	01 a4 d0 82 43 05 08 01 7b d4 92 43 05 08 03 00     ....C...{..C....
     cf0:	00 c4 43 04 08 01                                   ..C...

00000cf6 <imperial_march_notes>:
     cf6:	00 00 c4 43 04 04 01 00 00 c4 43 04 04 01 00 00     ...C......C.....
     d06:	c4 43 04 04 01 a4 90 9b 43 04 10 03 7b 14 e9 43     .C......C...{..C
     d16:	04 10 01 00 00 c4 43 04 04 01 a4 90 9b 43 04 10     ......C......C..
     d26:	03 7b 14 e9 43 04 10 01 00 00 c4 43 04 02 01 7b     .{..C......C...{
     d36:	d4 92 43 05 04 01 7b d4 92 43 05 04 01 7b d4 92     ..C...{..C...{..
     d46:	43 05 04 01 a4 90 9b 43 05 10 03 7b 14 e9 43 04     C......C...{..C.
     d56:	10 01 b8 fe b8 43 04 04 01 a4 90 9b 43 04 10 03     .....C......C...
     d66:	7b 14 e9 43 04 10 01 00 00 c4 43 04 04 01           {..C......C...

00000d74 <halo_theme_notes>:
     d74:	a4 d0 a4 43 04 02 01 00 00 c4 43 04 04 01 b8 fe     ...C......C.....
     d84:	b8 43 04 04 01 00 00 dc 43 04 04 01 00 00 c4 43     .C......C......C
     d94:	04 04 01 b8 fe b8 43 04 02 01 a4 d0 a4 43 04 01     ......C......C..
     da4:	01 00 00 00 00 00 02 01 a4 f0 f6 43 04 04 01 0a     ...........C....
     db4:	97 8a 43 05 04 01 7b d4 92 43 05 02 01 0a 97 8a     ..C...{..C......
     dc4:	43 05 04 01 00 00 dc 43 04 04 01 0a 97 8a 43 05     C......C......C.
     dd4:	04 01 a4 f0 f6 43 04 04 03 00 00 00 00 00 04 01     .....C..........
     de4:	a4 f0 f6 43 03 04 01 7b d4 92 43 04 04 01 a4 d0     ...C...{..C.....
     df4:	a4 43 04 04 01 00 00 c4 43 04 04 01 00 00 dc 43     .C......C......C
     e04:	04 04 01 b8 fe b8 43 04 02 01 a4 d0 a4 43 04 04     ......C......C..
     e14:	01 00 00 c4 43 04 04 01 b8 fe b8 43 04 04 01 a4     ....C......C....
     e24:	d0 a4 43 04 04 01 b8 fe b8 43 04 04 01 7b d4 92     ..C......C...{..
     e34:	43 04 04 03 a4 d0 a4 43 04 02 01                    C......C...

00000e3f <allstars_notes>:
     e3f:	b8 fe b8 43 04 04 01 0a 97 8a 43 05 08 01 7b 14     ...C......C...{.
     e4f:	e9 43 04 08 01 7b 14 e9 43 04 04 01 66 a6 cf 43     .C...{..C...f..C
     e5f:	04 08 01 b8 fe b8 43 04 08 01 b8 fe b8 43 04 08     ......C......C..
     e6f:	01 a4 f0 f6 43 04 04 01 7b 14 e9 43 04 08 01 7b     ....C...{..C...{
     e7f:	14 e9 43 04 08 01 66 a6 cf 43 04 08 01 66 a6 cf     ..C...f..C...f..
     e8f:	43 04 08 01 b8 fe b8 43 04 04 01 b8 fe b8 43 04     C......C......C.
     e9f:	08 01                                               ..

00000ea1 <mii_notes>:
     ea1:	b8 fe b8 43 04 04 01 00 00 dc 43 04 08 01 0a 97     ...C......C.....
     eb1:	8a 43 05 08 01 00 00 00 00 00 08 01 00 00 dc 43     .C.............C
     ec1:	04 08 01 00 00 00 00 00 08 01 b8 fe b8 43 04 08     .............C..
     ed1:	01 7b d4 92 43 04 20 03 00 00 00 00 00 20 01 7b     .{..C. ...... .{
     ee1:	d4 92 43 04 20 03 00 00 00 00 00 20 01 7b d4 92     ..C. ...... .{..
     ef1:	43 04 20 03 00 00 00 00 00 20 01 00 00 00 00 00     C. ...... ......
     f01:	08 01 00 00 00 00 00 08 01 00 00 00 00 00 04 01     ................
     f11:	00 00 00 00 00 08 01 0a 97 8a 43 04 08 01 7b d4     ..........C...{.
     f21:	92 43 04 08 01 b8 fe b8 43 04 08 01 00 00 dc 43     .C......C......C
     f31:	04 08 01 0a 97 8a 43 05 08 01 00 00 00 00 00 08     ......C.........
     f41:	01 00 00 dc 43 04 08 01 00 00 00 00 00 08 01 b8     ....C...........
     f51:	fe b8 43 04 08 01 a4 d0 a4 43 05 08 03 a4 90 9b     ..C......C......
     f61:	43 05 08 01 7b d4 92 43 05 04 01                    C...{..C...

00000f6c <heartbeat_notes>:
     f6c:	a4 d0 82 43 05 08 01                                ...C...

00000f73 <mario_notes>:
     f73:	a4 d0 a4 43 05 08 01 a4 d0 a4 43 05 08 01 00 00     ...C......C.....
     f83:	00 00 00 08 01 a4 d0 a4 43 05 08 01 00 00 00 00     ........C.......
     f93:	00 08 01 a4 d0 82 43 05 08 01 a4 d0 a4 43 05 08     ......C......C..
     fa3:	01 00 00 00 00 00 08 01 00 00 c4 43 05 08 01 00     ...........C....
     fb3:	00 00 00 00 04 01 00 00 00 00 00 08 01 00 00 c4     ................
     fc3:	43 04 08 01 00                                      C....

00000fc8 <__ctors_end>:
     fc8:	11 24       	eor	r1, r1
     fca:	1f be       	out	0x3f, r1	; 63
     fcc:	cf ef       	ldi	r28, 0xFF	; 255
     fce:	d8 e0       	ldi	r29, 0x08	; 8
     fd0:	de bf       	out	0x3e, r29	; 62
     fd2:	cd bf       	out	0x3d, r28	; 61

00000fd4 <__do_copy_data>:
     fd4:	11 e0       	ldi	r17, 0x01	; 1
     fd6:	a0 e0       	ldi	r26, 0x00	; 0
     fd8:	b1 e0       	ldi	r27, 0x01	; 1
     fda:	e2 ef       	ldi	r30, 0xF2	; 242
     fdc:	fb e2       	ldi	r31, 0x2B	; 43
     fde:	02 c0       	rjmp	.+4      	; 0xfe4 <__do_copy_data+0x10>
     fe0:	05 90       	lpm	r0, Z+
     fe2:	0d 92       	st	X+, r0
     fe4:	a6 36       	cpi	r26, 0x66	; 102
     fe6:	b1 07       	cpc	r27, r17
     fe8:	d9 f7       	brne	.-10     	; 0xfe0 <__do_copy_data+0xc>

00000fea <__do_clear_bss>:
     fea:	27 e0       	ldi	r18, 0x07	; 7
     fec:	a6 e6       	ldi	r26, 0x66	; 102
     fee:	b1 e0       	ldi	r27, 0x01	; 1
     ff0:	01 c0       	rjmp	.+2      	; 0xff4 <.do_clear_bss_start>

00000ff2 <.do_clear_bss_loop>:
     ff2:	1d 92       	st	X+, r1

00000ff4 <.do_clear_bss_start>:
     ff4:	a4 3f       	cpi	r26, 0xF4	; 244
     ff6:	b2 07       	cpc	r27, r18
     ff8:	e1 f7       	brne	.-8      	; 0xff2 <.do_clear_bss_loop>
     ffa:	0e 94 08 09 	call	0x1210	; 0x1210 <main>
     ffe:	0c 94 f7 15 	jmp	0x2bee	; 0x2bee <_exit>

00001002 <__bad_interrupt>:
    1002:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00001006 <portextender_read>:

/*
 * Reads from portextender.
 */
uint8_t portextender_read()
{
    1006:	cf 93       	push	r28
	i2c_start_wait(0x70 + I2C_READ);
    1008:	81 e7       	ldi	r24, 0x71	; 113
    100a:	0e 94 66 08 	call	0x10cc	; 0x10cc <i2c_start_wait>
	uint8_t data = i2c_readNak();
    100e:	0e 94 a6 08 	call	0x114c	; 0x114c <i2c_readNak>
    1012:	c8 2f       	mov	r28, r24
	i2c_stop();
    1014:	0e 94 8d 08 	call	0x111a	; 0x111a <i2c_stop>
	return data;
}
    1018:	8c 2f       	mov	r24, r28
    101a:	cf 91       	pop	r28
    101c:	08 95       	ret

0000101e <portextender_write>:
/*
 * Writes set data to the portextender.
 */
void portextender_write()
{
	if (portextender_new_data == true)
    101e:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <__data_end>
    1022:	88 23       	and	r24, r24
    1024:	59 f0       	breq	.+22     	; 0x103c <portextender_write+0x1e>
	{
		i2c_start_wait(0x70 + I2C_WRITE);
    1026:	80 e7       	ldi	r24, 0x70	; 112
    1028:	0e 94 66 08 	call	0x10cc	; 0x10cc <i2c_start_wait>
		i2c_write(portextender_data);
    102c:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <portextender_data>
    1030:	0e 94 95 08 	call	0x112a	; 0x112a <i2c_write>
		i2c_stop();
    1034:	0e 94 8d 08 	call	0x111a	; 0x111a <i2c_stop>
		portextender_new_data = false;
    1038:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <__data_end>
    103c:	08 95       	ret

0000103e <portextender_port_in>:
/*
 * Set a port as input port in write data.
 */
void portextender_port_in(uint8_t port)
{
	portextender_data = portextender_data | (1<<port);
    103e:	21 e0       	ldi	r18, 0x01	; 1
    1040:	30 e0       	ldi	r19, 0x00	; 0
    1042:	01 c0       	rjmp	.+2      	; 0x1046 <portextender_port_in+0x8>
    1044:	22 0f       	add	r18, r18
    1046:	8a 95       	dec	r24
    1048:	ea f7       	brpl	.-6      	; 0x1044 <portextender_port_in+0x6>
    104a:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <portextender_data>
    104e:	28 2b       	or	r18, r24
    1050:	20 93 68 01 	sts	0x0168, r18	; 0x800168 <portextender_data>
	portextender_new_data = true;
    1054:	81 e0       	ldi	r24, 0x01	; 1
    1056:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <__data_end>
    105a:	08 95       	ret

0000105c <portextender_port_out>:
/*
 * Set a port as output port in write data.
 */
void portextender_port_out(uint8_t port)
{
	portextender_data = portextender_data & ~(1<<port);
    105c:	21 e0       	ldi	r18, 0x01	; 1
    105e:	30 e0       	ldi	r19, 0x00	; 0
    1060:	01 c0       	rjmp	.+2      	; 0x1064 <portextender_port_out+0x8>
    1062:	22 0f       	add	r18, r18
    1064:	8a 95       	dec	r24
    1066:	ea f7       	brpl	.-6      	; 0x1062 <portextender_port_out+0x6>
    1068:	20 95       	com	r18
    106a:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <portextender_data>
    106e:	28 23       	and	r18, r24
    1070:	20 93 68 01 	sts	0x0168, r18	; 0x800168 <portextender_data>
	portextender_new_data = true;
    1074:	81 e0       	ldi	r24, 0x01	; 1
    1076:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <__data_end>
    107a:	08 95       	ret

0000107c <portextender_set_data>:
/*
 * Sets the full byte of write data.
 */
void portextender_set_data(uint8_t data)
{
	portextender_data = data;
    107c:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <portextender_data>
	portextender_new_data = true;
    1080:	81 e0       	ldi	r24, 0x01	; 1
    1082:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <__data_end>
    1086:	08 95       	ret

00001088 <srf02_timer_tick>:
/*
 * Counts down a timer. Should run on a 1kHz timer.
 */
void srf02_timer_tick()
{
	if (srf02_timer > 0)
    1088:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <srf02_timer>
    108c:	90 91 6a 01 	lds	r25, 0x016A	; 0x80016a <srf02_timer+0x1>
    1090:	00 97       	sbiw	r24, 0x00	; 0
    1092:	29 f0       	breq	.+10     	; 0x109e <srf02_timer_tick+0x16>
	{
		srf02_timer--;
    1094:	01 97       	sbiw	r24, 0x01	; 1
    1096:	90 93 6a 01 	sts	0x016A, r25	; 0x80016a <srf02_timer+0x1>
    109a:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <srf02_timer>
    109e:	08 95       	ret

000010a0 <srf02_timer_alarm>:
/*
 * Returns if the timer reached 0.
 */
bool srf02_timer_alarm()
{
	return (srf02_timer == 0);
    10a0:	81 e0       	ldi	r24, 0x01	; 1
    10a2:	20 91 69 01 	lds	r18, 0x0169	; 0x800169 <srf02_timer>
    10a6:	30 91 6a 01 	lds	r19, 0x016A	; 0x80016a <srf02_timer+0x1>
    10aa:	23 2b       	or	r18, r19
    10ac:	09 f0       	breq	.+2      	; 0x10b0 <srf02_timer_alarm+0x10>
    10ae:	80 e0       	ldi	r24, 0x00	; 0
}
    10b0:	08 95       	ret

000010b2 <srf02_timer_reset>:
/*
 * Resets timer to 70ms.
 */
void srf02_timer_reset()
{
	srf02_timer = 70;
    10b2:	86 e4       	ldi	r24, 0x46	; 70
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	90 93 6a 01 	sts	0x016A, r25	; 0x80016a <srf02_timer+0x1>
    10ba:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <srf02_timer>
    10be:	08 95       	ret

000010c0 <i2c_init>:
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
	while(!(TWCR & (1<<TWINT)));    

    return TWDR;

}/* i2c_readAck */
    10c0:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
    10c4:	80 e2       	ldi	r24, 0x20	; 32
    10c6:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
    10ca:	08 95       	ret

000010cc <i2c_start_wait>:
    10cc:	24 ea       	ldi	r18, 0xA4	; 164
    10ce:	34 e8       	ldi	r19, 0x84	; 132
    10d0:	44 e9       	ldi	r20, 0x94	; 148
    10d2:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    10d6:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    10da:	97 ff       	sbrs	r25, 7
    10dc:	fc cf       	rjmp	.-8      	; 0x10d6 <i2c_start_wait+0xa>
    10de:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
    10e2:	98 7f       	andi	r25, 0xF8	; 248
    10e4:	98 30       	cpi	r25, 0x08	; 8
    10e6:	11 f0       	breq	.+4      	; 0x10ec <i2c_start_wait+0x20>
    10e8:	90 31       	cpi	r25, 0x10	; 16
    10ea:	99 f7       	brne	.-26     	; 0x10d2 <i2c_start_wait+0x6>
    10ec:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    10f0:	30 93 bc 00 	sts	0x00BC, r19	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    10f4:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    10f8:	97 ff       	sbrs	r25, 7
    10fa:	fc cf       	rjmp	.-8      	; 0x10f4 <i2c_start_wait+0x28>
    10fc:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
    1100:	98 7f       	andi	r25, 0xF8	; 248
    1102:	90 32       	cpi	r25, 0x20	; 32
    1104:	11 f0       	breq	.+4      	; 0x110a <i2c_start_wait+0x3e>
    1106:	98 35       	cpi	r25, 0x58	; 88
    1108:	39 f4       	brne	.+14     	; 0x1118 <i2c_start_wait+0x4c>
    110a:	40 93 bc 00 	sts	0x00BC, r20	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    110e:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    1112:	94 fd       	sbrc	r25, 4
    1114:	fc cf       	rjmp	.-8      	; 0x110e <i2c_start_wait+0x42>
    1116:	dd cf       	rjmp	.-70     	; 0x10d2 <i2c_start_wait+0x6>
    1118:	08 95       	ret

0000111a <i2c_stop>:
    111a:	84 e9       	ldi	r24, 0x94	; 148
    111c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    1120:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    1124:	84 fd       	sbrc	r24, 4
    1126:	fc cf       	rjmp	.-8      	; 0x1120 <i2c_stop+0x6>
    1128:	08 95       	ret

0000112a <i2c_write>:
    112a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    112e:	84 e8       	ldi	r24, 0x84	; 132
    1130:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    1134:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    1138:	87 ff       	sbrs	r24, 7
    113a:	fc cf       	rjmp	.-8      	; 0x1134 <i2c_write+0xa>
    113c:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
    1140:	98 7f       	andi	r25, 0xF8	; 248
    1142:	81 e0       	ldi	r24, 0x01	; 1
    1144:	98 32       	cpi	r25, 0x28	; 40
    1146:	09 f4       	brne	.+2      	; 0x114a <i2c_write+0x20>
    1148:	80 e0       	ldi	r24, 0x00	; 0
    114a:	08 95       	ret

0000114c <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
    114c:	84 e8       	ldi	r24, 0x84	; 132
    114e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(!(TWCR & (1<<TWINT)));
    1152:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    1156:	87 ff       	sbrs	r24, 7
    1158:	fc cf       	rjmp	.-8      	; 0x1152 <i2c_readNak+0x6>
	
    return TWDR;
    115a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>

}/* i2c_readNak */
    115e:	08 95       	ret

00001160 <ledstrip_init>:

/*
 * Sets a initiali color on the ledstip.
 */
void ledstrip_init()
{
    1160:	cf 93       	push	r28
    1162:	df 93       	push	r29
    1164:	cd b7       	in	r28, 0x3d	; 61
    1166:	de b7       	in	r29, 0x3e	; 62
    1168:	e9 97       	sbiw	r28, 0x39	; 57
    116a:	0f b6       	in	r0, 0x3f	; 63
    116c:	f8 94       	cli
    116e:	de bf       	out	0x3e, r29	; 62
    1170:	0f be       	out	0x3f, r0	; 63
    1172:	cd bf       	out	0x3d, r28	; 61
	struct cRGB leds[NUM_LEDS];
	
	leds[0].b = 0;
    1174:	1b 82       	std	Y+3, r1	; 0x03
	leds[0].g = 0;
    1176:	19 82       	std	Y+1, r1	; 0x01
	leds[0].r = 255;
    1178:	8f ef       	ldi	r24, 0xFF	; 255
    117a:	8a 83       	std	Y+2, r24	; 0x02
	leds[1].b = 0;
    117c:	1e 82       	std	Y+6, r1	; 0x06
	leds[1].g = 255;
    117e:	8c 83       	std	Y+4, r24	; 0x04
	leds[1].r = 255;
    1180:	8d 83       	std	Y+5, r24	; 0x05
	leds[2].b = 0;
    1182:	19 86       	std	Y+9, r1	; 0x09
	leds[2].g = 255;
    1184:	8f 83       	std	Y+7, r24	; 0x07
	leds[2].r = 255;
    1186:	88 87       	std	Y+8, r24	; 0x08
	leds[3].b = 0;
    1188:	1c 86       	std	Y+12, r1	; 0x0c
	leds[3].g = 0;
    118a:	1a 86       	std	Y+10, r1	; 0x0a
	leds[3].r = 255;
    118c:	8b 87       	std	Y+11, r24	; 0x0b
	leds[4].b = 0;
    118e:	1f 86       	std	Y+15, r1	; 0x0f
	leds[4].g = 0;
    1190:	1d 86       	std	Y+13, r1	; 0x0d
	leds[4].r = 255;
    1192:	8e 87       	std	Y+14, r24	; 0x0e
	leds[5].b = 0;
    1194:	1a 8a       	std	Y+18, r1	; 0x12
	leds[5].g = 255;
    1196:	88 8b       	std	Y+16, r24	; 0x10
	leds[5].r = 255;
    1198:	89 8b       	std	Y+17, r24	; 0x11
	leds[6].b = 0;
    119a:	1d 8a       	std	Y+21, r1	; 0x15
	leds[6].g = 255;
    119c:	8b 8b       	std	Y+19, r24	; 0x13
	leds[6].r = 255;
    119e:	8c 8b       	std	Y+20, r24	; 0x14
	leds[7].b = 0;
    11a0:	18 8e       	std	Y+24, r1	; 0x18
	leds[7].g = 0;
    11a2:	1e 8a       	std	Y+22, r1	; 0x16
	leds[7].r = 255;
    11a4:	8f 8b       	std	Y+23, r24	; 0x17
    11a6:	fe 01       	movw	r30, r28
    11a8:	31 96       	adiw	r30, 0x01	; 1
	for (int i = 8; i < NUM_LEDS; i++)
    11aa:	28 e0       	ldi	r18, 0x08	; 8
    11ac:	30 e0       	ldi	r19, 0x00	; 0
    11ae:	cf 01       	movw	r24, r30
			leds[i].g = 255;
			leds[i].r = 255;
		}
		else
		{
			leds[i].b = 255;
    11b0:	4f ef       	ldi	r20, 0xFF	; 255
	leds[7].b = 0;
	leds[7].g = 0;
	leds[7].r = 255;
	for (int i = 8; i < NUM_LEDS; i++)
	{
		if (i % 2 == 1)
    11b2:	20 ff       	sbrs	r18, 0
    11b4:	04 c0       	rjmp	.+8      	; 0x11be <ledstrip_init+0x5e>
		{
			leds[i].b = 0;
    11b6:	12 8e       	std	Z+26, r1	; 0x1a
			leds[i].g = 255;
    11b8:	40 8f       	std	Z+24, r20	; 0x18
			leds[i].r = 255;
    11ba:	41 8f       	std	Z+25, r20	; 0x19
    11bc:	03 c0       	rjmp	.+6      	; 0x11c4 <ledstrip_init+0x64>
		}
		else
		{
			leds[i].b = 255;
    11be:	42 8f       	std	Z+26, r20	; 0x1a
			leds[i].g = 0;
    11c0:	10 8e       	std	Z+24, r1	; 0x18
			leds[i].r = 0;
    11c2:	11 8e       	std	Z+25, r1	; 0x19
	leds[6].g = 255;
	leds[6].r = 255;
	leds[7].b = 0;
	leds[7].g = 0;
	leds[7].r = 255;
	for (int i = 8; i < NUM_LEDS; i++)
    11c4:	2f 5f       	subi	r18, 0xFF	; 255
    11c6:	3f 4f       	sbci	r19, 0xFF	; 255
    11c8:	33 96       	adiw	r30, 0x03	; 3
    11ca:	23 31       	cpi	r18, 0x13	; 19
    11cc:	31 05       	cpc	r19, r1
    11ce:	89 f7       	brne	.-30     	; 0x11b2 <ledstrip_init+0x52>
			leds[i].b = 255;
			leds[i].g = 0;
			leds[i].r = 0;
		}
	}
	ws2812_setleds(leds, NUM_LEDS);
    11d0:	63 e1       	ldi	r22, 0x13	; 19
    11d2:	70 e0       	ldi	r23, 0x00	; 0
    11d4:	0e 94 13 10 	call	0x2026	; 0x2026 <ws2812_setleds>
}
    11d8:	e9 96       	adiw	r28, 0x39	; 57
    11da:	0f b6       	in	r0, 0x3f	; 63
    11dc:	f8 94       	cli
    11de:	de bf       	out	0x3e, r29	; 62
    11e0:	0f be       	out	0x3f, r0	; 63
    11e2:	cd bf       	out	0x3d, r28	; 61
    11e4:	df 91       	pop	r29
    11e6:	cf 91       	pop	r28
    11e8:	08 95       	ret

000011ea <timer_init>:
/*
 * Initializes a 1kHz CTC timer.
 */
void timer_init()
{
	OCR2A = 125;
    11ea:	8d e7       	ldi	r24, 0x7D	; 125
    11ec:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
	TCCR2A |= (1<<WGM21);
    11f0:	e0 eb       	ldi	r30, 0xB0	; 176
    11f2:	f0 e0       	ldi	r31, 0x00	; 0
    11f4:	80 81       	ld	r24, Z
    11f6:	82 60       	ori	r24, 0x02	; 2
    11f8:	80 83       	st	Z, r24
	TCCR2B |= (1<<CS22);
    11fa:	e1 eb       	ldi	r30, 0xB1	; 177
    11fc:	f0 e0       	ldi	r31, 0x00	; 0
    11fe:	80 81       	ld	r24, Z
    1200:	84 60       	ori	r24, 0x04	; 4
    1202:	80 83       	st	Z, r24
	TIMSK2 |= (1<<OCIE2A);
    1204:	e0 e7       	ldi	r30, 0x70	; 112
    1206:	f0 e0       	ldi	r31, 0x00	; 0
    1208:	80 81       	ld	r24, Z
    120a:	82 60       	ori	r24, 0x02	; 2
    120c:	80 83       	st	Z, r24
    120e:	08 95       	ret

00001210 <main>:
 * Bit 2: No hearbeat
 */
volatile uint8_t control;

int main(void)
{
    1210:	cf 93       	push	r28
    1212:	df 93       	push	r29
    1214:	cd b7       	in	r28, 0x3d	; 61
    1216:	de b7       	in	r29, 0x3e	; 62
    1218:	61 97       	sbiw	r28, 0x11	; 17
    121a:	0f b6       	in	r0, 0x3f	; 63
    121c:	f8 94       	cli
    121e:	de bf       	out	0x3e, r29	; 62
    1220:	0f be       	out	0x3f, r0	; 63
    1222:	cd bf       	out	0x3d, r28	; 61
	heartbeat_timer = 0;
    1224:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <heartbeat_timer+0x1>
    1228:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <heartbeat_timer>
	sensor_timer = 0;
    122c:	10 92 9f 01 	sts	0x019F, r1	; 0x80019f <sensor_timer+0x1>
    1230:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <sensor_timer>
	control = 0;
    1234:	10 92 6b 01 	sts	0x016B, r1	; 0x80016b <control>
	control |= DEADMAN_STOP;
    1238:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <control>
    123c:	82 60       	ori	r24, 0x02	; 2
    123e:	80 93 6b 01 	sts	0x016B, r24	; 0x80016b <control>
	stdout = &mystdout;
    1242:	80 e0       	ldi	r24, 0x00	; 0
    1244:	91 e0       	ldi	r25, 0x01	; 1
    1246:	90 93 f1 07 	sts	0x07F1, r25	; 0x8007f1 <__iob+0x3>
    124a:	80 93 f0 07 	sts	0x07F0, r24	; 0x8007f0 <__iob+0x2>
	display_port_init();
    124e:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <display_port_init>
	spi_master_init();
    1252:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <spi_master_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1256:	2f ef       	ldi	r18, 0xFF	; 255
    1258:	84 e3       	ldi	r24, 0x34	; 52
    125a:	9c e0       	ldi	r25, 0x0C	; 12
    125c:	21 50       	subi	r18, 0x01	; 1
    125e:	80 40       	sbci	r24, 0x00	; 0
    1260:	90 40       	sbci	r25, 0x00	; 0
    1262:	e1 f7       	brne	.-8      	; 0x125c <main+0x4c>
    1264:	00 c0       	rjmp	.+0      	; 0x1266 <main+0x56>
    1266:	00 00       	nop
	_delay_ms(500);
	display_init();
    1268:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <display_init>
	uart_init();
    126c:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <uart_init>
	motors_init();
    1270:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <motors_init>
	piezo_init();
    1274:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <piezo_init>
	i2c_init();
    1278:	0e 94 60 08 	call	0x10c0	; 0x10c0 <i2c_init>
	timer_init();
    127c:	0e 94 f5 08 	call	0x11ea	; 0x11ea <timer_init>
	portextender_set_data(0xff);
    1280:	8f ef       	ldi	r24, 0xFF	; 255
    1282:	0e 94 3e 08 	call	0x107c	; 0x107c <portextender_set_data>
	drive_register_init();
    1286:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <drive_register_init>
	RED_LED_PORT &=~ RED_LED;
    128a:	40 98       	cbi	0x08, 0	; 8
	RED_LED_DDR |= RED_LED;
    128c:	38 9a       	sbi	0x07, 0	; 7
	ledstrip_init();
    128e:	0e 94 b0 08 	call	0x1160	; 0x1160 <ledstrip_init>
	sei();
    1292:	78 94       	sei
	char msg[17] = "11";
    1294:	83 e0       	ldi	r24, 0x03	; 3
    1296:	ee e0       	ldi	r30, 0x0E	; 14
    1298:	f1 e0       	ldi	r31, 0x01	; 1
    129a:	8e 01       	movw	r16, r28
    129c:	0f 5f       	subi	r16, 0xFF	; 255
    129e:	1f 4f       	sbci	r17, 0xFF	; 255
    12a0:	d8 01       	movw	r26, r16
    12a2:	01 90       	ld	r0, Z+
    12a4:	0d 92       	st	X+, r0
    12a6:	8a 95       	dec	r24
    12a8:	e1 f7       	brne	.-8      	; 0x12a2 <main+0x92>
    12aa:	fe 01       	movw	r30, r28
    12ac:	34 96       	adiw	r30, 0x04	; 4
    12ae:	8e e0       	ldi	r24, 0x0E	; 14
    12b0:	df 01       	movw	r26, r30
    12b2:	1d 92       	st	X+, r1
    12b4:	8a 95       	dec	r24
    12b6:	e9 f7       	brne	.-6      	; 0x12b2 <main+0xa2>
	uint8_t len = 0;
	uint16_t distance_front = 0;
	uint16_t distance_back = 0;
	/*srf02_trigger(SRF_FRONT);
	srf02_trigger(SRF_BACK);*/
	srf02_timer_reset();
    12b8:	0e 94 59 08 	call	0x10b2	; 0x10b2 <srf02_timer_reset>
	ledstrip_init();
	sei();
	char msg[17] = "11";
	uint8_t len = 0;
	uint16_t distance_front = 0;
	uint16_t distance_back = 0;
    12bc:	c1 2c       	mov	r12, r1
    12be:	d1 2c       	mov	r13, r1
	RED_LED_DDR |= RED_LED;
	ledstrip_init();
	sei();
	char msg[17] = "11";
	uint8_t len = 0;
	uint16_t distance_front = 0;
    12c0:	e1 2c       	mov	r14, r1
    12c2:	f1 2c       	mov	r15, r1
		
		//Send sensor data every quarter second.
		if (sensor_timer == 0)
		{
			for(uint8_t i = 2; i < 6; i++){
				msg[i] = ((portextender_data & (1<<i)) > 0)+'0';
    12c4:	aa 24       	eor	r10, r10
    12c6:	a3 94       	inc	r10
    12c8:	b1 2c       	mov	r11, r1
			}
			msg[6] = ' ';
    12ca:	30 e2       	ldi	r19, 0x20	; 32
    12cc:	73 2e       	mov	r7, r19
			msg[++len] = '\0';
			itoa(distance_back, msg+len, 10);
			len = strlen(msg);
			msg[len] = '\0';
			uart_send_line(msg);
			sensor_timer = 250;
    12ce:	4a ef       	ldi	r20, 0xFA	; 250
    12d0:	84 2e       	mov	r8, r20
    12d2:	91 2c       	mov	r9, r1
	srf02_trigger(SRF_BACK);*/
	srf02_timer_reset();
    while (1) 
    {
	    //Write set data to portextender
	    portextender_write();
    12d4:	0e 94 0f 08 	call	0x101e	; 0x101e <portextender_write>
		
	    //Every 70ms recieve data from the range sensor and send another sound wave.
		if (srf02_timer_alarm() == true)
    12d8:	0e 94 50 08 	call	0x10a0	; 0x10a0 <srf02_timer_alarm>
    12dc:	88 23       	and	r24, r24
    12de:	41 f0       	breq	.+16     	; 0x12f0 <main+0xe0>
			distance_back = srf02_read(SRF_BACK);
			srf02_trigger(SRF_FRONT);
			srf02_trigger(SRF_BACK);*/
			distance_front = 40;
			distance_back = 40;
			srf02_timer_reset();
    12e0:	0e 94 59 08 	call	0x10b2	; 0x10b2 <srf02_timer_reset>
			/*distance_front = srf02_read(SRF_FRONT);
			distance_back = srf02_read(SRF_BACK);
			srf02_trigger(SRF_FRONT);
			srf02_trigger(SRF_BACK);*/
			distance_front = 40;
			distance_back = 40;
    12e4:	88 e2       	ldi	r24, 0x28	; 40
    12e6:	c8 2e       	mov	r12, r24
    12e8:	d1 2c       	mov	r13, r1
		{
			/*distance_front = srf02_read(SRF_FRONT);
			distance_back = srf02_read(SRF_BACK);
			srf02_trigger(SRF_FRONT);
			srf02_trigger(SRF_BACK);*/
			distance_front = 40;
    12ea:	98 e2       	ldi	r25, 0x28	; 40
    12ec:	e9 2e       	mov	r14, r25
    12ee:	f1 2c       	mov	r15, r1
			distance_back = 40;
			srf02_timer_reset();
		}
		
		//Set if vehicle is close to the wall infront it or not
		if (distance_front <= (15 + 12) && distance_front > 0) //Sensor is about 11.5?12 cm from edge, if 0 sensor did not detect anything
    12f0:	c7 01       	movw	r24, r14
    12f2:	01 97       	sbiw	r24, 0x01	; 1
    12f4:	4b 97       	sbiw	r24, 0x1b	; 27
    12f6:	10 f4       	brcc	.+4      	; 0x12fc <main+0xec>
		{
			motor_forward_set_lock(true);
    12f8:	81 e0       	ldi	r24, 0x01	; 1
    12fa:	01 c0       	rjmp	.+2      	; 0x12fe <main+0xee>
		}
		else
		{
			motor_forward_set_lock(false);
    12fc:	80 e0       	ldi	r24, 0x00	; 0
    12fe:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <motor_forward_set_lock>
		}
		
		//Set if vehicle is close to the wall behind it or not
		if (distance_back <= (15 + 12) && distance_back > 0) //Sensor is about 11.5?12 cm from edge, if 0 sensor did not detect anything
    1302:	c6 01       	movw	r24, r12
    1304:	01 97       	sbiw	r24, 0x01	; 1
    1306:	4b 97       	sbiw	r24, 0x1b	; 27
    1308:	10 f4       	brcc	.+4      	; 0x130e <main+0xfe>
		{
			motor_backward_set_lock(true);
    130a:	81 e0       	ldi	r24, 0x01	; 1
    130c:	01 c0       	rjmp	.+2      	; 0x1310 <main+0x100>
		}
		else
		{
			motor_backward_set_lock(false);
    130e:	80 e0       	ldi	r24, 0x00	; 0
    1310:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <motor_backward_set_lock>
		}
		
		uint8_t portextender_data = portextender_read();
    1314:	0e 94 03 08 	call	0x1006	; 0x1006 <portextender_read>
		
		//Send sensor data every quarter second.
		if (sensor_timer == 0)
    1318:	20 91 9e 01 	lds	r18, 0x019E	; 0x80019e <sensor_timer>
    131c:	30 91 9f 01 	lds	r19, 0x019F	; 0x80019f <sensor_timer+0x1>
    1320:	23 2b       	or	r18, r19
    1322:	09 f0       	breq	.+2      	; 0x1326 <main+0x116>
    1324:	49 c0       	rjmp	.+146    	; 0x13b8 <main+0x1a8>
    1326:	fe 01       	movw	r30, r28
    1328:	33 96       	adiw	r30, 0x03	; 3
    132a:	22 e0       	ldi	r18, 0x02	; 2
    132c:	30 e0       	ldi	r19, 0x00	; 0
		{
			for(uint8_t i = 2; i < 6; i++){
				msg[i] = ((portextender_data & (1<<i)) > 0)+'0';
    132e:	90 e0       	ldi	r25, 0x00	; 0
    1330:	a5 01       	movw	r20, r10
    1332:	02 2e       	mov	r0, r18
    1334:	02 c0       	rjmp	.+4      	; 0x133a <main+0x12a>
    1336:	44 0f       	add	r20, r20
    1338:	55 1f       	adc	r21, r21
    133a:	0a 94       	dec	r0
    133c:	e2 f7       	brpl	.-8      	; 0x1336 <main+0x126>
    133e:	48 23       	and	r20, r24
    1340:	59 23       	and	r21, r25
    1342:	45 2b       	or	r20, r21
    1344:	11 f4       	brne	.+4      	; 0x134a <main+0x13a>
    1346:	40 e3       	ldi	r20, 0x30	; 48
    1348:	01 c0       	rjmp	.+2      	; 0x134c <main+0x13c>
    134a:	41 e3       	ldi	r20, 0x31	; 49
    134c:	41 93       	st	Z+, r20
    134e:	2f 5f       	subi	r18, 0xFF	; 255
    1350:	3f 4f       	sbci	r19, 0xFF	; 255
		uint8_t portextender_data = portextender_read();
		
		//Send sensor data every quarter second.
		if (sensor_timer == 0)
		{
			for(uint8_t i = 2; i < 6; i++){
    1352:	26 30       	cpi	r18, 0x06	; 6
    1354:	31 05       	cpc	r19, r1
    1356:	61 f7       	brne	.-40     	; 0x1330 <main+0x120>
				msg[i] = ((portextender_data & (1<<i)) > 0)+'0';
			}
			msg[6] = ' ';
    1358:	7f 82       	std	Y+7, r7	; 0x07
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    135a:	4a e0       	ldi	r20, 0x0A	; 10
    135c:	be 01       	movw	r22, r28
    135e:	68 5f       	subi	r22, 0xF8	; 248
    1360:	7f 4f       	sbci	r23, 0xFF	; 255
    1362:	c7 01       	movw	r24, r14
    1364:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <__itoa_ncheck>
			itoa(distance_front, msg+7, 10);
			len = strlen(msg);
    1368:	f8 01       	movw	r30, r16
    136a:	01 90       	ld	r0, Z+
    136c:	00 20       	and	r0, r0
    136e:	e9 f7       	brne	.-6      	; 0x136a <main+0x15a>
    1370:	31 97       	sbiw	r30, 0x01	; 1
    1372:	e0 1b       	sub	r30, r16
    1374:	f1 0b       	sbc	r31, r17
			msg[len] = ' ';
    1376:	d8 01       	movw	r26, r16
    1378:	ae 0f       	add	r26, r30
    137a:	b1 1d       	adc	r27, r1
    137c:	7c 92       	st	X, r7
			msg[++len] = '\0';
    137e:	ef 5f       	subi	r30, 0xFF	; 255
    1380:	b8 01       	movw	r22, r16
    1382:	6e 0f       	add	r22, r30
    1384:	71 1d       	adc	r23, r1
    1386:	fb 01       	movw	r30, r22
    1388:	10 82       	st	Z, r1
    138a:	4a e0       	ldi	r20, 0x0A	; 10
    138c:	c6 01       	movw	r24, r12
    138e:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <__itoa_ncheck>
			itoa(distance_back, msg+len, 10);
			len = strlen(msg);
    1392:	f8 01       	movw	r30, r16
    1394:	01 90       	ld	r0, Z+
    1396:	00 20       	and	r0, r0
    1398:	e9 f7       	brne	.-6      	; 0x1394 <main+0x184>
    139a:	31 97       	sbiw	r30, 0x01	; 1
    139c:	e0 1b       	sub	r30, r16
    139e:	f1 0b       	sbc	r31, r17
			msg[len] = '\0';
    13a0:	c8 01       	movw	r24, r16
    13a2:	8e 0f       	add	r24, r30
    13a4:	91 1d       	adc	r25, r1
    13a6:	fc 01       	movw	r30, r24
    13a8:	10 82       	st	Z, r1
			uart_send_line(msg);
    13aa:	c8 01       	movw	r24, r16
    13ac:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <uart_send_line>
			sensor_timer = 250;
    13b0:	90 92 9f 01 	sts	0x019F, r9	; 0x80019f <sensor_timer+0x1>
    13b4:	80 92 9e 01 	sts	0x019E, r8	; 0x80019e <sensor_timer>
		}
		
		display_buff(); //Displayes the content of a display buffer
    13b8:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <display_buff>
    }
    13bc:	8b cf       	rjmp	.-234    	; 0x12d4 <main+0xc4>

000013be <perform_command>:

/*
 * Preforms a command from MQTT.
 */
void perform_command(uint8_t topic, uint8_t command, volatile uint8_t* args)
{
    13be:	1f 93       	push	r17
    13c0:	cf 93       	push	r28
    13c2:	df 93       	push	r29
    13c4:	ea 01       	movw	r28, r20
	switch(command){
    13c6:	86 2f       	mov	r24, r22
    13c8:	90 e0       	ldi	r25, 0x00	; 0
    13ca:	fc 01       	movw	r30, r24
    13cc:	f0 97       	sbiw	r30, 0x30	; 48
    13ce:	e9 30       	cpi	r30, 0x09	; 9
    13d0:	f1 05       	cpc	r31, r1
    13d2:	08 f0       	brcs	.+2      	; 0x13d6 <perform_command+0x18>
    13d4:	c3 c0       	rjmp	.+390    	; 0x155c <perform_command+0x19e>
    13d6:	ec 5c       	subi	r30, 0xCC	; 204
    13d8:	ff 4f       	sbci	r31, 0xFF	; 255
    13da:	0c 94 a9 12 	jmp	0x2552	; 0x2552 <__tablejump2__>
		case '0':
		//Hearbeat received
		heartbeat_timer = 3000;
    13de:	88 eb       	ldi	r24, 0xB8	; 184
    13e0:	9b e0       	ldi	r25, 0x0B	; 11
    13e2:	90 93 9d 01 	sts	0x019D, r25	; 0x80019d <heartbeat_timer+0x1>
    13e6:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <heartbeat_timer>
		break;
    13ea:	b8 c0       	rjmp	.+368    	; 0x155c <perform_command+0x19e>
		case '1':
		//Textmessage recieved
		display_add_to_buff((char*)args, 16, 32); //Display textmessage
    13ec:	40 e2       	ldi	r20, 0x20	; 32
    13ee:	60 e1       	ldi	r22, 0x10	; 16
    13f0:	ce 01       	movw	r24, r28
    13f2:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <display_add_to_buff>
		break;
    13f6:	b2 c0       	rjmp	.+356    	; 0x155c <perform_command+0x19e>
		case '2':
		//Play song / horn received
		switch(args[0])
    13f8:	e8 81       	ld	r30, Y
    13fa:	8e 2f       	mov	r24, r30
    13fc:	90 e0       	ldi	r25, 0x00	; 0
    13fe:	fc 01       	movw	r30, r24
    1400:	f0 97       	sbiw	r30, 0x30	; 48
    1402:	e5 31       	cpi	r30, 0x15	; 21
    1404:	f1 05       	cpc	r31, r1
    1406:	08 f0       	brcs	.+2      	; 0x140a <perform_command+0x4c>
    1408:	a9 c0       	rjmp	.+338    	; 0x155c <perform_command+0x19e>
    140a:	e3 5c       	subi	r30, 0xC3	; 195
    140c:	ff 4f       	sbci	r31, 0xFF	; 255
    140e:	0c 94 a9 12 	jmp	0x2552	; 0x2552 <__tablejump2__>
		{
			case '0':
			song_set(get_horn_song());
    1412:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <get_horn_song>
    1416:	26 c0       	rjmp	.+76     	; 0x1464 <perform_command+0xa6>
			song_start();
			break;
			case '1':
			song_stop();
    1418:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <song_stop>
			break;
    141c:	9f c0       	rjmp	.+318    	; 0x155c <perform_command+0x19e>
			case '2':
			song_set(get_cantina_band_song());
    141e:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <get_cantina_band_song>
    1422:	20 c0       	rjmp	.+64     	; 0x1464 <perform_command+0xa6>
			song_start();
			break;
			case '3':
			song_set(get_imperial_march_song());
    1424:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <get_imperial_march_song>
    1428:	1d c0       	rjmp	.+58     	; 0x1464 <perform_command+0xa6>
			song_start();
			break;
			case '4':
			song_set(get_soviet_anthem_song());
    142a:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <get_soviet_anthem_song>
    142e:	1a c0       	rjmp	.+52     	; 0x1464 <perform_command+0xa6>
			song_start();
			break;
			case '5':
			song_set(get_allstars_song());
    1430:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <get_allstars_song>
    1434:	17 c0       	rjmp	.+46     	; 0x1464 <perform_command+0xa6>
			song_start();
			break;
			case '6':
			song_set(get_mii_song());
    1436:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <get_mii_song>
    143a:	14 c0       	rjmp	.+40     	; 0x1464 <perform_command+0xa6>
			song_start();
			break;
			case '7':
			song_set(get_halo_theme_song());
    143c:	0e 94 f7 0e 	call	0x1dee	; 0x1dee <get_halo_theme_song>
    1440:	11 c0       	rjmp	.+34     	; 0x1464 <perform_command+0xa6>
			song_start();
			break;
			case '8':	
			song_set(get_mario_song());
    1442:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <get_mario_song>
    1446:	0e c0       	rjmp	.+28     	; 0x1464 <perform_command+0xa6>
			song_start();
			break;
			case '9':
			song_set(get_mario_galaxy_song());
    1448:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <get_mario_galaxy_song>
    144c:	0b c0       	rjmp	.+22     	; 0x1464 <perform_command+0xa6>
			song_start();
			break;
			case 'A':
			song_set(get_pokemon_center_song());
    144e:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <get_pokemon_center_song>
    1452:	08 c0       	rjmp	.+16     	; 0x1464 <perform_command+0xa6>
			song_start();
			break;
			case 'B':
			song_set(get_petalburg_song());
    1454:	0e 94 0c 0f 	call	0x1e18	; 0x1e18 <get_petalburg_song>
    1458:	05 c0       	rjmp	.+10     	; 0x1464 <perform_command+0xa6>
			song_start();
			break;
			case 'C':
			song_set(get_heartbeat_song());
    145a:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <get_heartbeat_song>
    145e:	02 c0       	rjmp	.+4      	; 0x1464 <perform_command+0xa6>
			song_start();
			break;
			case 'D':
			song_set(get_test_song());
    1460:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <get_test_song>
    1464:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <song_set>
			song_start();
    1468:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <song_start>
			break;
    146c:	77 c0       	rjmp	.+238    	; 0x155c <perform_command+0x19e>
		}
		break;
		case '3':
		//Set wheel speed command recieved
		if (args[0] == '\0')
    146e:	88 81       	ld	r24, Y
    1470:	88 23       	and	r24, r24
    1472:	09 f4       	brne	.+2      	; 0x1476 <perform_command+0xb8>
    1474:	85 c0       	rjmp	.+266    	; 0x1580 <perform_command+0x1c2>
			return;
		if (drive_register_registers() == true)
    1476:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <drive_register_registers>
    147a:	88 23       	and	r24, r24
    147c:	09 f4       	brne	.+2      	; 0x1480 <perform_command+0xc2>
    147e:	6e c0       	rjmp	.+220    	; 0x155c <perform_command+0x19e>
    1480:	80 e0       	ldi	r24, 0x00	; 0
		{
			uint8_t i = 0;
			while(args[++i] != ' ');
    1482:	91 e0       	ldi	r25, 0x01	; 1
    1484:	98 0f       	add	r25, r24
    1486:	fe 01       	movw	r30, r28
    1488:	e9 0f       	add	r30, r25
    148a:	f1 1d       	adc	r31, r1
    148c:	20 81       	ld	r18, Z
    148e:	20 32       	cpi	r18, 0x20	; 32
    1490:	11 f0       	breq	.+4      	; 0x1496 <perform_command+0xd8>
    1492:	89 2f       	mov	r24, r25
    1494:	f6 cf       	rjmp	.-20     	; 0x1482 <perform_command+0xc4>
			args[i++] = '\0';
    1496:	10 82       	st	Z, r1
			motors_set_speed(atoi((char*)args), atoi((char*)(args+i))); //Set given wheelspeed
    1498:	8e 5f       	subi	r24, 0xFE	; 254
    149a:	9e 01       	movw	r18, r28
    149c:	28 0f       	add	r18, r24
    149e:	31 1d       	adc	r19, r1
    14a0:	c9 01       	movw	r24, r18
    14a2:	0e 94 af 12 	call	0x255e	; 0x255e <atoi>
    14a6:	18 2f       	mov	r17, r24
    14a8:	ce 01       	movw	r24, r28
    14aa:	0e 94 af 12 	call	0x255e	; 0x255e <atoi>
    14ae:	61 2f       	mov	r22, r17
    14b0:	0e 94 cd 0c 	call	0x199a	; 0x199a <motors_set_speed>
    14b4:	53 c0       	rjmp	.+166    	; 0x155c <perform_command+0x19e>
		}
		break;
		case '4':
		//Deadman set/clear
		switch(args[0])
    14b6:	88 81       	ld	r24, Y
    14b8:	81 33       	cpi	r24, 0x31	; 49
    14ba:	79 f0       	breq	.+30     	; 0x14da <perform_command+0x11c>
    14bc:	30 f4       	brcc	.+12     	; 0x14ca <perform_command+0x10c>
    14be:	80 33       	cpi	r24, 0x30	; 48
    14c0:	a9 f4       	brne	.+42     	; 0x14ec <perform_command+0x12e>
		{
			case '0':
				deadman_switches &=~ REMOTE_AX;
    14c2:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <deadman_switches>
    14c6:	8e 7f       	andi	r24, 0xFE	; 254
    14c8:	0f c0       	rjmp	.+30     	; 0x14e8 <perform_command+0x12a>
			motors_set_speed(atoi((char*)args), atoi((char*)(args+i))); //Set given wheelspeed
		}
		break;
		case '4':
		//Deadman set/clear
		switch(args[0])
    14ca:	82 33       	cpi	r24, 0x32	; 50
    14cc:	51 f0       	breq	.+20     	; 0x14e2 <perform_command+0x124>
    14ce:	83 33       	cpi	r24, 0x33	; 51
    14d0:	69 f4       	brne	.+26     	; 0x14ec <perform_command+0x12e>
			break;
			case '2':
				deadman_switches &=~ REMOTE_JOY;
			break;
			case '3':
				deadman_switches |= REMOTE_JOY;
    14d2:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <deadman_switches>
    14d6:	82 60       	ori	r24, 0x02	; 2
    14d8:	07 c0       	rjmp	.+14     	; 0x14e8 <perform_command+0x12a>
		{
			case '0':
				deadman_switches &=~ REMOTE_AX;
			break;
			case '1':
				deadman_switches |= REMOTE_AX;
    14da:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <deadman_switches>
    14de:	81 60       	ori	r24, 0x01	; 1
    14e0:	03 c0       	rjmp	.+6      	; 0x14e8 <perform_command+0x12a>
			break;
			case '2':
				deadman_switches &=~ REMOTE_JOY;
    14e2:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <deadman_switches>
    14e6:	8d 7f       	andi	r24, 0xFD	; 253
			break;
			case '3':
				deadman_switches |= REMOTE_JOY;
    14e8:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <deadman_switches>
			break;
		}
		//Set led to indicate if a dead man is set or not
		switch(deadman_switches)
    14ec:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <deadman_switches>
    14f0:	88 23       	and	r24, r24
    14f2:	11 f0       	breq	.+4      	; 0x14f8 <perform_command+0x13a>
    14f4:	83 30       	cpi	r24, 0x03	; 3
    14f6:	49 f4       	brne	.+18     	; 0x150a <perform_command+0x14c>
			case 0:
			control |= DEADMAN_STOP;
			portextender_port_in(GREEN_LED);
			break;
			case 3:
			control |= DEADMAN_STOP;
    14f8:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <control>
    14fc:	82 60       	ori	r24, 0x02	; 2
    14fe:	80 93 6b 01 	sts	0x016B, r24	; 0x80016b <control>
			portextender_port_in(GREEN_LED);
    1502:	81 e0       	ldi	r24, 0x01	; 1
    1504:	0e 94 1f 08 	call	0x103e	; 0x103e <portextender_port_in>
			break;
    1508:	29 c0       	rjmp	.+82     	; 0x155c <perform_command+0x19e>
			default:
			control &=~ DEADMAN_STOP;
    150a:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <control>
    150e:	8d 7f       	andi	r24, 0xFD	; 253
    1510:	80 93 6b 01 	sts	0x016B, r24	; 0x80016b <control>
			portextender_port_out(GREEN_LED);
    1514:	81 e0       	ldi	r24, 0x01	; 1
    1516:	0e 94 2e 08 	call	0x105c	; 0x105c <portextender_port_out>
			break;
    151a:	20 c0       	rjmp	.+64     	; 0x155c <perform_command+0x19e>
		}
		break;
		case '5':
		//Emergency break
		control |= EMERGENCY;
    151c:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <control>
    1520:	81 60       	ori	r24, 0x01	; 1
    1522:	80 93 6b 01 	sts	0x016B, r24	; 0x80016b <control>
		//Set led for emergency break
		RED_LED_PORT |= RED_LED;
    1526:	40 9a       	sbi	0x08, 0	; 8
		break;
    1528:	19 c0       	rjmp	.+50     	; 0x155c <perform_command+0x19e>
		case '6':
		//Clear emergency break
		control &=~ EMERGENCY;
    152a:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <control>
    152e:	8e 7f       	andi	r24, 0xFE	; 254
    1530:	80 93 6b 01 	sts	0x016B, r24	; 0x80016b <control>
		//Turn off emergency break led
		RED_LED_PORT &=~ RED_LED;
    1534:	40 98       	cbi	0x08, 0	; 8
		break;
    1536:	12 c0       	rjmp	.+36     	; 0x155c <perform_command+0x19e>
		case '7':
		//PING recieved
		uart_send_line("12"); //Respond with PONG
    1538:	8f e1       	ldi	r24, 0x1F	; 31
    153a:	91 e0       	ldi	r25, 0x01	; 1
    153c:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <uart_send_line>
		break;
    1540:	0d c0       	rjmp	.+26     	; 0x155c <perform_command+0x19e>
		case '8':
		//Return home command received
			switch(args[0])
    1542:	88 81       	ld	r24, Y
    1544:	80 33       	cpi	r24, 0x30	; 48
    1546:	29 f0       	breq	.+10     	; 0x1552 <perform_command+0x194>
    1548:	81 33       	cpi	r24, 0x31	; 49
    154a:	41 f4       	brne	.+16     	; 0x155c <perform_command+0x19e>
					drive_register_backtrack();
				}
				break;
				case '1':
				//Reset drive register
				drive_register_init();
    154c:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <drive_register_init>
				break;
    1550:	05 c0       	rjmp	.+10     	; 0x155c <perform_command+0x19e>
		//Return home command received
			switch(args[0])
			{
				case '0':
				//Activate return to home
				if (drive_register_registers() == true)
    1552:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <drive_register_registers>
    1556:	81 11       	cpse	r24, r1
				{
					drive_register_backtrack();
    1558:	0e 94 6f 0c 	call	0x18de	; 0x18de <drive_register_backtrack>
			}
		break;
	}
	
	//Set if car should break because of emergency break.
	if (control != 0)
    155c:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <control>
    1560:	88 23       	and	r24, r24
    1562:	41 f0       	breq	.+16     	; 0x1574 <perform_command+0x1b6>
	{
		motor_set_lock(true);
    1564:	81 e0       	ldi	r24, 0x01	; 1
    1566:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <motor_set_lock>
	}
	else
	{
		motor_set_lock(false);
	}
}
    156a:	df 91       	pop	r29
    156c:	cf 91       	pop	r28
    156e:	1f 91       	pop	r17
	
	//Set if car should break because of emergency break.
	if (control != 0)
	{
		motor_set_lock(true);
		drive_register_init(); //reset drive register
    1570:	0c 94 79 0b 	jmp	0x16f2	; 0x16f2 <drive_register_init>
	}
	else
	{
		motor_set_lock(false);
    1574:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    1576:	df 91       	pop	r29
    1578:	cf 91       	pop	r28
    157a:	1f 91       	pop	r17
		motor_set_lock(true);
		drive_register_init(); //reset drive register
	}
	else
	{
		motor_set_lock(false);
    157c:	0c 94 8e 0d 	jmp	0x1b1c	; 0x1b1c <motor_set_lock>
	}
}
    1580:	df 91       	pop	r29
    1582:	cf 91       	pop	r28
    1584:	1f 91       	pop	r17
    1586:	08 95       	ret

00001588 <__vector_7>:
/*
 * Timer2 compare interrupts. Frequency is 1kHz.
 * Used for things that is time sensitive.
 */
ISR(TIMER2_COMPA_vect)
{
    1588:	1f 92       	push	r1
    158a:	0f 92       	push	r0
    158c:	0f b6       	in	r0, 0x3f	; 63
    158e:	0f 92       	push	r0
    1590:	11 24       	eor	r1, r1
    1592:	2f 93       	push	r18
    1594:	3f 93       	push	r19
    1596:	4f 93       	push	r20
    1598:	5f 93       	push	r21
    159a:	6f 93       	push	r22
    159c:	7f 93       	push	r23
    159e:	8f 93       	push	r24
    15a0:	9f 93       	push	r25
    15a2:	af 93       	push	r26
    15a4:	bf 93       	push	r27
    15a6:	ef 93       	push	r30
    15a8:	ff 93       	push	r31
	if (heartbeat_timer == 0)
    15aa:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <heartbeat_timer>
    15ae:	90 91 9d 01 	lds	r25, 0x019D	; 0x80019d <heartbeat_timer+0x1>
    15b2:	89 2b       	or	r24, r25
    15b4:	31 f4       	brne	.+12     	; 0x15c2 <__vector_7+0x3a>
	{
		control |= NO_HEARBEAT;
    15b6:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <control>
    15ba:	84 60       	ori	r24, 0x04	; 4
    15bc:	80 93 6b 01 	sts	0x016B, r24	; 0x80016b <control>
    15c0:	0e c0       	rjmp	.+28     	; 0x15de <__vector_7+0x56>
	}
	else
	{
		control &=~ NO_HEARBEAT;
    15c2:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <control>
    15c6:	8b 7f       	andi	r24, 0xFB	; 251
    15c8:	80 93 6b 01 	sts	0x016B, r24	; 0x80016b <control>
		heartbeat_timer--;
    15cc:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <heartbeat_timer>
    15d0:	90 91 9d 01 	lds	r25, 0x019D	; 0x80019d <heartbeat_timer+0x1>
    15d4:	01 97       	sbiw	r24, 0x01	; 1
    15d6:	90 93 9d 01 	sts	0x019D, r25	; 0x80019d <heartbeat_timer+0x1>
    15da:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <heartbeat_timer>
	}
	
	//Set if car should break because of emergency break.
	if (control != 0)
    15de:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <control>
    15e2:	88 23       	and	r24, r24
    15e4:	31 f0       	breq	.+12     	; 0x15f2 <__vector_7+0x6a>
	{
		motor_set_lock(true);
    15e6:	81 e0       	ldi	r24, 0x01	; 1
    15e8:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <motor_set_lock>
		drive_register_init(); //Reset drive register
    15ec:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <drive_register_init>
    15f0:	03 c0       	rjmp	.+6      	; 0x15f8 <__vector_7+0x70>
	}
	else
	{
		motor_set_lock(false);
    15f2:	80 e0       	ldi	r24, 0x00	; 0
    15f4:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <motor_set_lock>
	}
	
	//If a song is playing
	if (song_playing() == true)
    15f8:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <song_playing>
    15fc:	81 11       	cpse	r24, r1
	{
		song_play(); //Continue song
    15fe:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <song_play>
	}
	
	if (sensor_timer > 0)
    1602:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <sensor_timer>
    1606:	90 91 9f 01 	lds	r25, 0x019F	; 0x80019f <sensor_timer+0x1>
    160a:	89 2b       	or	r24, r25
    160c:	49 f0       	breq	.+18     	; 0x1620 <__vector_7+0x98>
	{
		sensor_timer--;
    160e:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <sensor_timer>
    1612:	90 91 9f 01 	lds	r25, 0x019F	; 0x80019f <sensor_timer+0x1>
    1616:	01 97       	sbiw	r24, 0x01	; 1
    1618:	90 93 9f 01 	sts	0x019F, r25	; 0x80019f <sensor_timer+0x1>
    161c:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <sensor_timer>
	}
	
	srf02_timer_tick();
    1620:	0e 94 44 08 	call	0x1088	; 0x1088 <srf02_timer_tick>
	drive_register_tick();
    1624:	0e 94 19 0c 	call	0x1832	; 0x1832 <drive_register_tick>
	if (drive_register_registers() == false)
    1628:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <drive_register_registers>
    162c:	81 11       	cpse	r24, r1
    162e:	03 c0       	rjmp	.+6      	; 0x1636 <__vector_7+0xae>
	{
		portextender_port_out(YELLOW_LED);
    1630:	0e 94 2e 08 	call	0x105c	; 0x105c <portextender_port_out>
    1634:	03 c0       	rjmp	.+6      	; 0x163c <__vector_7+0xb4>
	}
	else
	{
		portextender_port_in(YELLOW_LED);
    1636:	80 e0       	ldi	r24, 0x00	; 0
    1638:	0e 94 1f 08 	call	0x103e	; 0x103e <portextender_port_in>
	}
	motor_tick();
    163c:	0e 94 91 0c 	call	0x1922	; 0x1922 <motor_tick>
}
    1640:	ff 91       	pop	r31
    1642:	ef 91       	pop	r30
    1644:	bf 91       	pop	r27
    1646:	af 91       	pop	r26
    1648:	9f 91       	pop	r25
    164a:	8f 91       	pop	r24
    164c:	7f 91       	pop	r23
    164e:	6f 91       	pop	r22
    1650:	5f 91       	pop	r21
    1652:	4f 91       	pop	r20
    1654:	3f 91       	pop	r19
    1656:	2f 91       	pop	r18
    1658:	0f 90       	pop	r0
    165a:	0f be       	out	0x3f, r0	; 63
    165c:	0f 90       	pop	r0
    165e:	1f 90       	pop	r1
    1660:	18 95       	reti

00001662 <__vector_18>:

/*
 * UART receive interrupt. Used when receiving MQTT commands. 
 */
ISR(USART_RX_vect){
    1662:	1f 92       	push	r1
    1664:	0f 92       	push	r0
    1666:	0f b6       	in	r0, 0x3f	; 63
    1668:	0f 92       	push	r0
    166a:	11 24       	eor	r1, r1
    166c:	2f 93       	push	r18
    166e:	3f 93       	push	r19
    1670:	4f 93       	push	r20
    1672:	5f 93       	push	r21
    1674:	6f 93       	push	r22
    1676:	7f 93       	push	r23
    1678:	8f 93       	push	r24
    167a:	9f 93       	push	r25
    167c:	af 93       	push	r26
    167e:	bf 93       	push	r27
    1680:	ef 93       	push	r30
    1682:	ff 93       	push	r31
	uart_linebuf[line_ind] = UDR0;
    1684:	e0 91 67 01 	lds	r30, 0x0167	; 0x800167 <line_ind>
    1688:	f0 e0       	ldi	r31, 0x00	; 0
    168a:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    168e:	e0 56       	subi	r30, 0x60	; 96
    1690:	fe 4f       	sbci	r31, 0xFE	; 254
    1692:	80 83       	st	Z, r24
	if(uart_linebuf[line_ind] == '\n')
    1694:	e0 91 67 01 	lds	r30, 0x0167	; 0x800167 <line_ind>
    1698:	f0 e0       	ldi	r31, 0x00	; 0
    169a:	e0 56       	subi	r30, 0x60	; 96
    169c:	fe 4f       	sbci	r31, 0xFE	; 254
    169e:	80 81       	ld	r24, Z
    16a0:	8a 30       	cpi	r24, 0x0A	; 10
    16a2:	89 f4       	brne	.+34     	; 0x16c6 <__vector_18+0x64>
	{
		uart_linebuf[line_ind] = '\0';
    16a4:	e0 91 67 01 	lds	r30, 0x0167	; 0x800167 <line_ind>
    16a8:	f0 e0       	ldi	r31, 0x00	; 0
    16aa:	e0 56       	subi	r30, 0x60	; 96
    16ac:	fe 4f       	sbci	r31, 0xFE	; 254
    16ae:	10 82       	st	Z, r1
		perform_command(uart_linebuf[0], uart_linebuf[1], uart_linebuf+2);
    16b0:	60 91 a1 01 	lds	r22, 0x01A1	; 0x8001a1 <uart_linebuf+0x1>
    16b4:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <uart_linebuf>
    16b8:	42 ea       	ldi	r20, 0xA2	; 162
    16ba:	51 e0       	ldi	r21, 0x01	; 1
    16bc:	0e 94 df 09 	call	0x13be	; 0x13be <perform_command>
		line_ind = 0;
    16c0:	10 92 67 01 	sts	0x0167, r1	; 0x800167 <line_ind>
    16c4:	05 c0       	rjmp	.+10     	; 0x16d0 <__vector_18+0x6e>
	}
	else
	{
	line_ind++;
    16c6:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <line_ind>
    16ca:	8f 5f       	subi	r24, 0xFF	; 255
    16cc:	80 93 67 01 	sts	0x0167, r24	; 0x800167 <line_ind>
	}
    16d0:	ff 91       	pop	r31
    16d2:	ef 91       	pop	r30
    16d4:	bf 91       	pop	r27
    16d6:	af 91       	pop	r26
    16d8:	9f 91       	pop	r25
    16da:	8f 91       	pop	r24
    16dc:	7f 91       	pop	r23
    16de:	6f 91       	pop	r22
    16e0:	5f 91       	pop	r21
    16e2:	4f 91       	pop	r20
    16e4:	3f 91       	pop	r19
    16e6:	2f 91       	pop	r18
    16e8:	0f 90       	pop	r0
    16ea:	0f be       	out	0x3f, r0	; 63
    16ec:	0f 90       	pop	r0
    16ee:	1f 90       	pop	r1
    16f0:	18 95       	reti

000016f2 <drive_register_init>:
/*
 * Initializes the drive register. Can be used as reset.
 */
void drive_register_init()
{
	register_entries = true;
    16f2:	81 e0       	ldi	r24, 0x01	; 1
    16f4:	80 93 ac 07 	sts	0x07AC, r24	; 0x8007ac <register_entries>
	entry_registered = false;
    16f8:	10 92 cb 01 	sts	0x01CB, r1	; 0x8001cb <entry_registered>
	time = 0;
    16fc:	10 92 a9 07 	sts	0x07A9, r1	; 0x8007a9 <time>
	end_entry = 0;
    1700:	10 92 ae 07 	sts	0x07AE, r1	; 0x8007ae <end_entry+0x1>
    1704:	10 92 ad 07 	sts	0x07AD, r1	; 0x8007ad <end_entry>
	current_entry = 0;
    1708:	10 92 ab 07 	sts	0x07AB, r1	; 0x8007ab <current_entry+0x1>
    170c:	10 92 aa 07 	sts	0x07AA, r1	; 0x8007aa <current_entry>
	prev_entry = 0;
    1710:	10 92 ca 01 	sts	0x01CA, r1	; 0x8001ca <prev_entry+0x1>
    1714:	10 92 c9 01 	sts	0x01C9, r1	; 0x8001c9 <prev_entry>
	end_backtrack = true;
    1718:	80 93 cc 01 	sts	0x01CC, r24	; 0x8001cc <end_backtrack>
    171c:	08 95       	ret

0000171e <drive_register_register_entry>:
/*
 * Registers speed thats not standing still.
 */
void drive_register_register_entry(int8_t speed_l, int8_t speed_r)
{
	if (speed_l != 0 || speed_r != 0)
    171e:	81 11       	cpse	r24, r1
    1720:	02 c0       	rjmp	.+4      	; 0x1726 <drive_register_register_entry+0x8>
    1722:	66 23       	and	r22, r22
    1724:	81 f0       	breq	.+32     	; 0x1746 <drive_register_register_entry+0x28>
	{
		drive_register[current_entry].speed_l = speed_l;
    1726:	e0 91 aa 07 	lds	r30, 0x07AA	; 0x8007aa <current_entry>
    172a:	f0 91 ab 07 	lds	r31, 0x07AB	; 0x8007ab <current_entry+0x1>
    172e:	9f 01       	movw	r18, r30
    1730:	22 0f       	add	r18, r18
    1732:	33 1f       	adc	r19, r19
    1734:	e2 0f       	add	r30, r18
    1736:	f3 1f       	adc	r31, r19
    1738:	e3 53       	subi	r30, 0x33	; 51
    173a:	fe 4f       	sbci	r31, 0xFE	; 254
    173c:	80 83       	st	Z, r24
		drive_register[current_entry].speed_r = speed_r;
    173e:	61 83       	std	Z+1, r22	; 0x01
		entry_registered = true;
    1740:	81 e0       	ldi	r24, 0x01	; 1
    1742:	80 93 cb 01 	sts	0x01CB, r24	; 0x8001cb <entry_registered>
    1746:	08 95       	ret

00001748 <drive_register_add_entry>:
/*
 * If there is a registered speed. Register time and add go to the next entry in circular buffer.
 */
void drive_register_add_entry()
{
	if (entry_registered == true)
    1748:	80 91 cb 01 	lds	r24, 0x01CB	; 0x8001cb <entry_registered>
    174c:	88 23       	and	r24, r24
    174e:	09 f4       	brne	.+2      	; 0x1752 <drive_register_add_entry+0xa>
    1750:	45 c0       	rjmp	.+138    	; 0x17dc <drive_register_add_entry+0x94>
	{
		drive_register[current_entry].time = time;
    1752:	80 91 aa 07 	lds	r24, 0x07AA	; 0x8007aa <current_entry>
    1756:	90 91 ab 07 	lds	r25, 0x07AB	; 0x8007ab <current_entry+0x1>
    175a:	fc 01       	movw	r30, r24
    175c:	ee 0f       	add	r30, r30
    175e:	ff 1f       	adc	r31, r31
    1760:	e8 0f       	add	r30, r24
    1762:	f9 1f       	adc	r31, r25
    1764:	e3 53       	subi	r30, 0x33	; 51
    1766:	fe 4f       	sbci	r31, 0xFE	; 254
    1768:	20 91 a9 07 	lds	r18, 0x07A9	; 0x8007a9 <time>
    176c:	22 83       	std	Z+2, r18	; 0x02
		prev_entry = current_entry;
    176e:	90 93 ca 01 	sts	0x01CA, r25	; 0x8001ca <prev_entry+0x1>
    1772:	80 93 c9 01 	sts	0x01C9, r24	; 0x8001c9 <prev_entry>
    1776:	40 91 ad 07 	lds	r20, 0x07AD	; 0x8007ad <end_entry>
    177a:	50 91 ae 07 	lds	r21, 0x07AE	; 0x8007ae <end_entry+0x1>
		
		//Move one step in circular buffer. Both for current entry and if needed end entry.
		if (current_entry == BUFF - 1)
    177e:	83 3f       	cpi	r24, 0xF3	; 243
    1780:	21 e0       	ldi	r18, 0x01	; 1
    1782:	92 07       	cpc	r25, r18
    1784:	69 f4       	brne	.+26     	; 0x17a0 <drive_register_add_entry+0x58>
		{
			if (end_entry == 0)
    1786:	45 2b       	or	r20, r21
    1788:	31 f4       	brne	.+12     	; 0x1796 <drive_register_add_entry+0x4e>
			{
				end_entry++;
    178a:	81 e0       	ldi	r24, 0x01	; 1
    178c:	90 e0       	ldi	r25, 0x00	; 0
    178e:	90 93 ae 07 	sts	0x07AE, r25	; 0x8007ae <end_entry+0x1>
    1792:	80 93 ad 07 	sts	0x07AD, r24	; 0x8007ad <end_entry>
			}
			current_entry = 0;
    1796:	10 92 ab 07 	sts	0x07AB, r1	; 0x8007ab <current_entry+0x1>
    179a:	10 92 aa 07 	sts	0x07AA, r1	; 0x8007aa <current_entry>
    179e:	18 c0       	rjmp	.+48     	; 0x17d0 <drive_register_add_entry+0x88>
		}
		else
		{
			if (end_entry == current_entry + 1)
    17a0:	9c 01       	movw	r18, r24
    17a2:	2f 5f       	subi	r18, 0xFF	; 255
    17a4:	3f 4f       	sbci	r19, 0xFF	; 255
    17a6:	24 17       	cp	r18, r20
    17a8:	35 07       	cpc	r19, r21
    17aa:	71 f4       	brne	.+28     	; 0x17c8 <drive_register_add_entry+0x80>
			{
				if (end_entry == BUFF - 1)
    17ac:	23 3f       	cpi	r18, 0xF3	; 243
    17ae:	41 e0       	ldi	r20, 0x01	; 1
    17b0:	34 07       	cpc	r19, r20
    17b2:	29 f4       	brne	.+10     	; 0x17be <drive_register_add_entry+0x76>
				{
					end_entry = 0;
    17b4:	10 92 ae 07 	sts	0x07AE, r1	; 0x8007ae <end_entry+0x1>
    17b8:	10 92 ad 07 	sts	0x07AD, r1	; 0x8007ad <end_entry>
    17bc:	05 c0       	rjmp	.+10     	; 0x17c8 <drive_register_add_entry+0x80>
				}
				else
				{
					end_entry++;
    17be:	02 96       	adiw	r24, 0x02	; 2
    17c0:	90 93 ae 07 	sts	0x07AE, r25	; 0x8007ae <end_entry+0x1>
    17c4:	80 93 ad 07 	sts	0x07AD, r24	; 0x8007ad <end_entry>
				}
			}
			current_entry++;
    17c8:	30 93 ab 07 	sts	0x07AB, r19	; 0x8007ab <current_entry+0x1>
    17cc:	20 93 aa 07 	sts	0x07AA, r18	; 0x8007aa <current_entry>
		}
		
		//Note that registered speed have been added.
		time = 0;
    17d0:	10 92 a9 07 	sts	0x07A9, r1	; 0x8007a9 <time>
		entry_registered = false;
    17d4:	10 92 cb 01 	sts	0x01CB, r1	; 0x8001cb <entry_registered>
		end_backtrack = false;
    17d8:	10 92 cc 01 	sts	0x01CC, r1	; 0x8001cc <end_backtrack>
    17dc:	08 95       	ret

000017de <drive_register_pop>:
 * Assigns the speed of the current entry to the motors and assigns the time.
 * Also moves to the previous entry in the circular buffer.
 */
void drive_register_pop()
{
	motors_set_speed(-drive_register[current_entry].speed_l, -drive_register[current_entry].speed_r);
    17de:	e0 91 aa 07 	lds	r30, 0x07AA	; 0x8007aa <current_entry>
    17e2:	f0 91 ab 07 	lds	r31, 0x07AB	; 0x8007ab <current_entry+0x1>
    17e6:	cf 01       	movw	r24, r30
    17e8:	88 0f       	add	r24, r24
    17ea:	99 1f       	adc	r25, r25
    17ec:	e8 0f       	add	r30, r24
    17ee:	f9 1f       	adc	r31, r25
    17f0:	e3 53       	subi	r30, 0x33	; 51
    17f2:	fe 4f       	sbci	r31, 0xFE	; 254
    17f4:	61 81       	ldd	r22, Z+1	; 0x01
    17f6:	61 95       	neg	r22
    17f8:	80 81       	ld	r24, Z
    17fa:	81 95       	neg	r24
    17fc:	0e 94 cd 0c 	call	0x199a	; 0x199a <motors_set_speed>
	time = drive_register[current_entry].time;
    1800:	80 91 aa 07 	lds	r24, 0x07AA	; 0x8007aa <current_entry>
    1804:	90 91 ab 07 	lds	r25, 0x07AB	; 0x8007ab <current_entry+0x1>
    1808:	fc 01       	movw	r30, r24
    180a:	ee 0f       	add	r30, r30
    180c:	ff 1f       	adc	r31, r31
    180e:	e8 0f       	add	r30, r24
    1810:	f9 1f       	adc	r31, r25
    1812:	e3 53       	subi	r30, 0x33	; 51
    1814:	fe 4f       	sbci	r31, 0xFE	; 254
    1816:	22 81       	ldd	r18, Z+2	; 0x02
    1818:	20 93 a9 07 	sts	0x07A9, r18	; 0x8007a9 <time>
	if (current_entry == 0)
    181c:	00 97       	sbiw	r24, 0x00	; 0
    181e:	19 f4       	brne	.+6      	; 0x1826 <drive_register_pop+0x48>
	{
		current_entry = BUFF - 1;
    1820:	83 ef       	ldi	r24, 0xF3	; 243
    1822:	91 e0       	ldi	r25, 0x01	; 1
    1824:	01 c0       	rjmp	.+2      	; 0x1828 <drive_register_pop+0x4a>
	}
	else
	{
		current_entry--;
    1826:	01 97       	sbiw	r24, 0x01	; 1
    1828:	90 93 ab 07 	sts	0x07AB, r25	; 0x8007ab <current_entry+0x1>
    182c:	80 93 aa 07 	sts	0x07AA, r24	; 0x8007aa <current_entry>
    1830:	08 95       	ret

00001832 <drive_register_tick>:
 * Function that does time sensitive things. It counts in millisecond the time between motor input changes.
 * Also count how long each input should stay when backtracking. Should run on a 1kHz timer.
 */
void drive_register_tick()
{
	if (register_entries == true)
    1832:	80 91 ac 07 	lds	r24, 0x07AC	; 0x8007ac <register_entries>
    1836:	88 23       	and	r24, r24
    1838:	01 f1       	breq	.+64     	; 0x187a <drive_register_tick+0x48>
	{
		if (entry_registered == true)
    183a:	80 91 cb 01 	lds	r24, 0x01CB	; 0x8001cb <entry_registered>
    183e:	88 23       	and	r24, r24
    1840:	c9 f0       	breq	.+50     	; 0x1874 <drive_register_tick+0x42>
		{
			time++;
    1842:	80 91 a9 07 	lds	r24, 0x07A9	; 0x8007a9 <time>
    1846:	8f 5f       	subi	r24, 0xFF	; 255
    1848:	80 93 a9 07 	sts	0x07A9, r24	; 0x8007a9 <time>
			if (time == 0xff)
    184c:	8f 3f       	cpi	r24, 0xFF	; 255
    184e:	09 f0       	breq	.+2      	; 0x1852 <drive_register_tick+0x20>
    1850:	42 c0       	rjmp	.+132    	; 0x18d6 <drive_register_tick+0xa4>
			{
				drive_register_add_entry();
    1852:	0e 94 a4 0b 	call	0x1748	; 0x1748 <drive_register_add_entry>
				drive_register_register_entry(drive_register[prev_entry].speed_l, drive_register[prev_entry].speed_r);
    1856:	e0 91 c9 01 	lds	r30, 0x01C9	; 0x8001c9 <prev_entry>
    185a:	f0 91 ca 01 	lds	r31, 0x01CA	; 0x8001ca <prev_entry+0x1>
    185e:	cf 01       	movw	r24, r30
    1860:	88 0f       	add	r24, r24
    1862:	99 1f       	adc	r25, r25
    1864:	e8 0f       	add	r30, r24
    1866:	f9 1f       	adc	r31, r25
    1868:	e3 53       	subi	r30, 0x33	; 51
    186a:	fe 4f       	sbci	r31, 0xFE	; 254
    186c:	61 81       	ldd	r22, Z+1	; 0x01
    186e:	80 81       	ld	r24, Z
    1870:	0c 94 8f 0b 	jmp	0x171e	; 0x171e <drive_register_register_entry>
			}
		}
		else
		{
			time = 0;
    1874:	10 92 a9 07 	sts	0x07A9, r1	; 0x8007a9 <time>
    1878:	08 95       	ret
		}
	}
	else
	{
		if (time != 0)
    187a:	80 91 a9 07 	lds	r24, 0x07A9	; 0x8007a9 <time>
    187e:	88 23       	and	r24, r24
    1880:	19 f0       	breq	.+6      	; 0x1888 <drive_register_tick+0x56>
		{
			time--;
    1882:	81 50       	subi	r24, 0x01	; 1
    1884:	80 93 a9 07 	sts	0x07A9, r24	; 0x8007a9 <time>
		}
		
		if (time == 0)
    1888:	80 91 a9 07 	lds	r24, 0x07A9	; 0x8007a9 <time>
    188c:	81 11       	cpse	r24, r1
    188e:	23 c0       	rjmp	.+70     	; 0x18d6 <drive_register_tick+0xa4>
		{
			if (end_backtrack == false)
    1890:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <end_backtrack>
    1894:	81 11       	cpse	r24, r1
    1896:	10 c0       	rjmp	.+32     	; 0x18b8 <drive_register_tick+0x86>
			{
				if (current_entry == end_entry)
    1898:	20 91 aa 07 	lds	r18, 0x07AA	; 0x8007aa <current_entry>
    189c:	30 91 ab 07 	lds	r19, 0x07AB	; 0x8007ab <current_entry+0x1>
    18a0:	80 91 ad 07 	lds	r24, 0x07AD	; 0x8007ad <end_entry>
    18a4:	90 91 ae 07 	lds	r25, 0x07AE	; 0x8007ae <end_entry+0x1>
    18a8:	28 17       	cp	r18, r24
    18aa:	39 07       	cpc	r19, r25
    18ac:	19 f4       	brne	.+6      	; 0x18b4 <drive_register_tick+0x82>
				{
					end_backtrack = true;
    18ae:	81 e0       	ldi	r24, 0x01	; 1
    18b0:	80 93 cc 01 	sts	0x01CC, r24	; 0x8001cc <end_backtrack>
				}
				drive_register_pop();
    18b4:	0c 94 ef 0b 	jmp	0x17de	; 0x17de <drive_register_pop>
			}
			else
			{
				drive_register_init();
    18b8:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <drive_register_init>
				motors_set_speed(0, 0);
    18bc:	60 e0       	ldi	r22, 0x00	; 0
    18be:	80 e0       	ldi	r24, 0x00	; 0
    18c0:	0e 94 cd 0c 	call	0x199a	; 0x199a <motors_set_speed>
				motor_set_lock(false);
    18c4:	80 e0       	ldi	r24, 0x00	; 0
    18c6:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <motor_set_lock>
				motor_forward_set_lock(false);
    18ca:	80 e0       	ldi	r24, 0x00	; 0
    18cc:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <motor_forward_set_lock>
				motor_backward_set_lock(false);
    18d0:	80 e0       	ldi	r24, 0x00	; 0
    18d2:	0c 94 7e 0d 	jmp	0x1afc	; 0x1afc <motor_backward_set_lock>
    18d6:	08 95       	ret

000018d8 <drive_register_registers>:
 * Returns if the register registers.
 */
bool drive_register_registers()
{
	return register_entries;
}
    18d8:	80 91 ac 07 	lds	r24, 0x07AC	; 0x8007ac <register_entries>
    18dc:	08 95       	ret

000018de <drive_register_backtrack>:
/*
 * Sets drive register to not register and backtrack.
 */
void drive_register_backtrack()
{
	register_entries = false;
    18de:	10 92 ac 07 	sts	0x07AC, r1	; 0x8007ac <register_entries>
	drive_register_add_entry(); //Adds the last
    18e2:	0c 94 a4 0b 	jmp	0x1748	; 0x1748 <drive_register_add_entry>

000018e6 <motors_init>:
/*
 * Initializes timer0 with fast pwm and the rest of what the motors need.
 */
void motors_init()
{
	MOTOR_PWM_DDR |= MOTOR_L_PWM | MOTOR_R_PWM;
    18e6:	8a b1       	in	r24, 0x0a	; 10
    18e8:	80 66       	ori	r24, 0x60	; 96
    18ea:	8a b9       	out	0x0a, r24	; 10
	
	MOTOR_L_F_DDR |= MOTOR_L_FORWARD;
    18ec:	26 9a       	sbi	0x04, 6	; 4
	MOTOR_L_B_DDR |= MOTOR_L_BACKWARD;
    18ee:	27 9a       	sbi	0x04, 7	; 4
	
	MOTOR_L_F_PORT |= MOTOR_L_FORWARD;
    18f0:	2e 9a       	sbi	0x05, 6	; 5
	MOTOR_L_B_PORT |= MOTOR_L_BACKWARD;
    18f2:	2f 9a       	sbi	0x05, 7	; 5
	
	MOTOR_R_F_DDR |= MOTOR_R_FORWARD;
    18f4:	20 9a       	sbi	0x04, 0	; 4
	MOTOR_R_B_DDR |= MOTOR_R_BACKWARD;
    18f6:	57 9a       	sbi	0x0a, 7	; 10
	
	MOTOR_R_F_PORT |= MOTOR_R_FORWARD;
    18f8:	28 9a       	sbi	0x05, 0	; 5
	MOTOR_R_B_PORT |= MOTOR_R_BACKWARD;
    18fa:	5f 9a       	sbi	0x0b, 7	; 11
	
	TCCR0A |= ((1<<COM0A1) | (1<<COM0B1) | (1<<WGM01) | (1<<WGM00));
    18fc:	84 b5       	in	r24, 0x24	; 36
    18fe:	83 6a       	ori	r24, 0xA3	; 163
    1900:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1<<CS00);
    1902:	85 b5       	in	r24, 0x25	; 37
    1904:	81 60       	ori	r24, 0x01	; 1
    1906:	85 bd       	out	0x25, r24	; 37
	
	OCR0A = 0;
    1908:	17 bc       	out	0x27, r1	; 39
	OCR0B = 0;
    190a:	18 bc       	out	0x28, r1	; 40
	motor_speed_l = 0;
    190c:	10 92 b4 07 	sts	0x07B4, r1	; 0x8007b4 <motor_speed_l>
	motor_speed_r = 0;
    1910:	10 92 b1 07 	sts	0x07B1, r1	; 0x8007b1 <motor_speed_r>
	
	motor_forward_lock = false;
    1914:	10 92 af 07 	sts	0x07AF, r1	; 0x8007af <motor_forward_lock>
	motor_backward_lock = false;
    1918:	10 92 b0 07 	sts	0x07B0, r1	; 0x8007b0 <motor_backward_lock>
	motor_lock = false;
    191c:	10 92 b3 07 	sts	0x07B3, r1	; 0x8007b3 <motor_lock>
    1920:	08 95       	ret

00001922 <motor_tick>:
/*
 * Handles the startup process for the vehicle in lower speeds. Should be called on a 1kHz frequency.
 */
void motor_tick()
{
	if (motor_startup_l == true && timer == 0)
    1922:	80 91 b2 07 	lds	r24, 0x07B2	; 0x8007b2 <motor_startup_l>
    1926:	88 23       	and	r24, r24
    1928:	91 f0       	breq	.+36     	; 0x194e <motor_tick+0x2c>
    192a:	80 91 b6 07 	lds	r24, 0x07B6	; 0x8007b6 <timer>
    192e:	81 11       	cpse	r24, r1
    1930:	0e c0       	rjmp	.+28     	; 0x194e <motor_tick+0x2c>
	{
		MOTOR_L_SPEED = (abs(motor_speed_l) * 2);
    1932:	80 91 b4 07 	lds	r24, 0x07B4	; 0x8007b4 <motor_speed_l>
    1936:	08 2e       	mov	r0, r24
    1938:	00 0c       	add	r0, r0
    193a:	99 0b       	sbc	r25, r25
    193c:	97 ff       	sbrs	r25, 7
    193e:	03 c0       	rjmp	.+6      	; 0x1946 <motor_tick+0x24>
    1940:	91 95       	neg	r25
    1942:	81 95       	neg	r24
    1944:	91 09       	sbc	r25, r1
    1946:	88 0f       	add	r24, r24
    1948:	88 bd       	out	0x28, r24	; 40
		motor_startup_l = false;
    194a:	10 92 b2 07 	sts	0x07B2, r1	; 0x8007b2 <motor_startup_l>
	}
	
	if (motor_startup_r == true && timer == 0)
    194e:	80 91 b5 07 	lds	r24, 0x07B5	; 0x8007b5 <motor_startup_r>
    1952:	88 23       	and	r24, r24
    1954:	91 f0       	breq	.+36     	; 0x197a <motor_tick+0x58>
    1956:	80 91 b6 07 	lds	r24, 0x07B6	; 0x8007b6 <timer>
    195a:	81 11       	cpse	r24, r1
    195c:	0e c0       	rjmp	.+28     	; 0x197a <motor_tick+0x58>
	{
		MOTOR_R_SPEED = (abs(motor_speed_r) * 2);
    195e:	80 91 b1 07 	lds	r24, 0x07B1	; 0x8007b1 <motor_speed_r>
    1962:	08 2e       	mov	r0, r24
    1964:	00 0c       	add	r0, r0
    1966:	99 0b       	sbc	r25, r25
    1968:	97 ff       	sbrs	r25, 7
    196a:	03 c0       	rjmp	.+6      	; 0x1972 <motor_tick+0x50>
    196c:	91 95       	neg	r25
    196e:	81 95       	neg	r24
    1970:	91 09       	sbc	r25, r1
    1972:	88 0f       	add	r24, r24
    1974:	87 bd       	out	0x27, r24	; 39
		motor_startup_r = false;
    1976:	10 92 b5 07 	sts	0x07B5, r1	; 0x8007b5 <motor_startup_r>
	}
	
	if ((motor_startup_l == true || motor_startup_r == true) && timer > 0)
    197a:	80 91 b2 07 	lds	r24, 0x07B2	; 0x8007b2 <motor_startup_l>
    197e:	81 11       	cpse	r24, r1
    1980:	04 c0       	rjmp	.+8      	; 0x198a <motor_tick+0x68>
    1982:	80 91 b5 07 	lds	r24, 0x07B5	; 0x8007b5 <motor_startup_r>
    1986:	88 23       	and	r24, r24
    1988:	39 f0       	breq	.+14     	; 0x1998 <motor_tick+0x76>
    198a:	80 91 b6 07 	lds	r24, 0x07B6	; 0x8007b6 <timer>
    198e:	88 23       	and	r24, r24
    1990:	19 f0       	breq	.+6      	; 0x1998 <motor_tick+0x76>
	{
		timer--;
    1992:	81 50       	subi	r24, 0x01	; 1
    1994:	80 93 b6 07 	sts	0x07B6, r24	; 0x8007b6 <timer>
    1998:	08 95       	ret

0000199a <motors_set_speed>:

/*
 * Assigns given speed to the motors.
 */
void motors_set_speed(int8_t speed_l, int8_t speed_r)
{
    199a:	cf 93       	push	r28
    199c:	df 93       	push	r29
    199e:	d8 2f       	mov	r29, r24
    19a0:	c6 2f       	mov	r28, r22
	if (drive_register_registers() == true)
    19a2:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <drive_register_registers>
    19a6:	88 23       	and	r24, r24
    19a8:	71 f1       	breq	.+92     	; 0x1a06 <motors_set_speed+0x6c>
	{
		//If left motor is lock
		if ((speed_l < 0 && motor_backward_lock == true) || (speed_l > 0 && motor_forward_lock == true) || (motor_lock == true))
    19aa:	d7 ff       	sbrs	r29, 7
    19ac:	03 c0       	rjmp	.+6      	; 0x19b4 <motors_set_speed+0x1a>
    19ae:	80 91 b0 07 	lds	r24, 0x07B0	; 0x8007b0 <motor_backward_lock>
    19b2:	04 c0       	rjmp	.+8      	; 0x19bc <motors_set_speed+0x22>
    19b4:	dd 23       	and	r29, r29
    19b6:	21 f0       	breq	.+8      	; 0x19c0 <motors_set_speed+0x26>
    19b8:	80 91 af 07 	lds	r24, 0x07AF	; 0x8007af <motor_forward_lock>
    19bc:	81 11       	cpse	r24, r1
    19be:	03 c0       	rjmp	.+6      	; 0x19c6 <motors_set_speed+0x2c>
    19c0:	80 91 b3 07 	lds	r24, 0x07B3	; 0x8007b3 <motor_lock>
    19c4:	81 11       	cpse	r24, r1
		{
			speed_l = 0;
    19c6:	d0 e0       	ldi	r29, 0x00	; 0
		}
		
		//If right motor is locked
		if ((speed_r < 0 && motor_backward_lock == true) || (speed_r > 0 && motor_forward_lock == true) || (motor_lock == true))
    19c8:	c7 ff       	sbrs	r28, 7
    19ca:	03 c0       	rjmp	.+6      	; 0x19d2 <motors_set_speed+0x38>
    19cc:	80 91 b0 07 	lds	r24, 0x07B0	; 0x8007b0 <motor_backward_lock>
    19d0:	04 c0       	rjmp	.+8      	; 0x19da <motors_set_speed+0x40>
    19d2:	cc 23       	and	r28, r28
    19d4:	21 f0       	breq	.+8      	; 0x19de <motors_set_speed+0x44>
    19d6:	80 91 af 07 	lds	r24, 0x07AF	; 0x8007af <motor_forward_lock>
    19da:	81 11       	cpse	r24, r1
    19dc:	03 c0       	rjmp	.+6      	; 0x19e4 <motors_set_speed+0x4a>
    19de:	80 91 b3 07 	lds	r24, 0x07B3	; 0x8007b3 <motor_lock>
    19e2:	81 11       	cpse	r24, r1
		{
			speed_r = 0;
    19e4:	c0 e0       	ldi	r28, 0x00	; 0
		}
		
		//Lower speeds is problematic and will not be used
		if (abs(speed_l) < 10)
    19e6:	89 e0       	ldi	r24, 0x09	; 9
    19e8:	8d 0f       	add	r24, r29
    19ea:	83 31       	cpi	r24, 0x13	; 19
    19ec:	08 f4       	brcc	.+2      	; 0x19f0 <motors_set_speed+0x56>
		{
			speed_l = 0;
    19ee:	d0 e0       	ldi	r29, 0x00	; 0
		}
		
		//Lower speeds is problematic and will not be used.
		if (abs(speed_r) < 10)
    19f0:	89 e0       	ldi	r24, 0x09	; 9
    19f2:	8c 0f       	add	r24, r28
    19f4:	83 31       	cpi	r24, 0x13	; 19
    19f6:	08 f4       	brcc	.+2      	; 0x19fa <motors_set_speed+0x60>
		{
			speed_r = 0;
    19f8:	c0 e0       	ldi	r28, 0x00	; 0
		}
		
		//Registers how the motors moves.
		drive_register_add_entry();
    19fa:	0e 94 a4 0b 	call	0x1748	; 0x1748 <drive_register_add_entry>
		drive_register_register_entry(speed_l, speed_r);
    19fe:	6c 2f       	mov	r22, r28
    1a00:	8d 2f       	mov	r24, r29
    1a02:	0e 94 8f 0b 	call	0x171e	; 0x171e <drive_register_register_entry>
	}
	
	if (speed_l > 0)
    1a06:	1d 16       	cp	r1, r29
    1a08:	1c f4       	brge	.+6      	; 0x1a10 <motors_set_speed+0x76>
	{
		//Left motor forward
		MOTOR_L_F_PORT |= MOTOR_L_FORWARD;
    1a0a:	2e 9a       	sbi	0x05, 6	; 5
		MOTOR_L_B_PORT &=~ MOTOR_L_BACKWARD;
    1a0c:	2f 98       	cbi	0x05, 7	; 5
    1a0e:	08 c0       	rjmp	.+16     	; 0x1a20 <motors_set_speed+0x86>
	}
	else if (speed_l < 0)
    1a10:	dd 23       	and	r29, r29
    1a12:	19 f0       	breq	.+6      	; 0x1a1a <motors_set_speed+0x80>
	{
		//Left motor backward
		MOTOR_L_F_PORT &=~ MOTOR_L_FORWARD;
    1a14:	2e 98       	cbi	0x05, 6	; 5
		MOTOR_L_B_PORT |= MOTOR_L_BACKWARD;
    1a16:	2f 9a       	sbi	0x05, 7	; 5
    1a18:	03 c0       	rjmp	.+6      	; 0x1a20 <motors_set_speed+0x86>
	}
	else
	{
		//Left motor lock
		//Active breaking
		MOTOR_L_F_PORT |= MOTOR_L_FORWARD;
    1a1a:	2e 9a       	sbi	0x05, 6	; 5
		MOTOR_L_B_PORT |= MOTOR_L_BACKWARD;	
    1a1c:	2f 9a       	sbi	0x05, 7	; 5
		speed_l = 127;
    1a1e:	df e7       	ldi	r29, 0x7F	; 127
	}
	
	if (speed_r > 0)
    1a20:	1c 16       	cp	r1, r28
    1a22:	1c f4       	brge	.+6      	; 0x1a2a <motors_set_speed+0x90>
	{
		//Right motor forwards
		MOTOR_R_F_PORT |= MOTOR_R_FORWARD;
    1a24:	28 9a       	sbi	0x05, 0	; 5
		MOTOR_R_B_PORT &=~ MOTOR_R_BACKWARD;
    1a26:	5f 98       	cbi	0x0b, 7	; 11
    1a28:	08 c0       	rjmp	.+16     	; 0x1a3a <motors_set_speed+0xa0>
	}
	else if (speed_r < 0)
    1a2a:	cc 23       	and	r28, r28
    1a2c:	19 f0       	breq	.+6      	; 0x1a34 <motors_set_speed+0x9a>
	{
		//Right motor backward
		MOTOR_R_F_PORT &=~ MOTOR_R_FORWARD;
    1a2e:	28 98       	cbi	0x05, 0	; 5
		MOTOR_R_B_PORT |= MOTOR_R_BACKWARD;
    1a30:	5f 9a       	sbi	0x0b, 7	; 11
    1a32:	03 c0       	rjmp	.+6      	; 0x1a3a <motors_set_speed+0xa0>
	}
	else
	{
		//Right motor lock
		//Active breaking
		MOTOR_R_F_PORT |= MOTOR_R_FORWARD;
    1a34:	28 9a       	sbi	0x05, 0	; 5
		MOTOR_R_B_PORT |= MOTOR_R_BACKWARD;
    1a36:	5f 9a       	sbi	0x0b, 7	; 11
		speed_r = 127;
    1a38:	cf e7       	ldi	r28, 0x7F	; 127
	}
	
	//If speed is low enough to need a startup process
	if (MOTOR_L_SPEED == 0 && abs(speed_l) < 30 && abs(speed_l) > 0)
    1a3a:	28 b5       	in	r18, 0x28	; 40
    1a3c:	8d 2f       	mov	r24, r29
    1a3e:	0d 2e       	mov	r0, r29
    1a40:	00 0c       	add	r0, r0
    1a42:	99 0b       	sbc	r25, r25
    1a44:	21 11       	cpse	r18, r1
    1a46:	19 c0       	rjmp	.+50     	; 0x1a7a <motors_set_speed+0xe0>
    1a48:	d3 5e       	subi	r29, 0xE3	; 227
    1a4a:	db 33       	cpi	r29, 0x3B	; 59
    1a4c:	b0 f4       	brcc	.+44     	; 0x1a7a <motors_set_speed+0xe0>
    1a4e:	9c 01       	movw	r18, r24
    1a50:	97 ff       	sbrs	r25, 7
    1a52:	04 c0       	rjmp	.+8      	; 0x1a5c <motors_set_speed+0xc2>
    1a54:	22 27       	eor	r18, r18
    1a56:	33 27       	eor	r19, r19
    1a58:	28 1b       	sub	r18, r24
    1a5a:	39 0b       	sbc	r19, r25
    1a5c:	21 15       	cp	r18, r1
    1a5e:	31 05       	cpc	r19, r1
    1a60:	61 f0       	breq	.+24     	; 0x1a7a <motors_set_speed+0xe0>
	{
		//Set to have max speed for 20ms
		MOTOR_L_SPEED = 0xff;
    1a62:	8f ef       	ldi	r24, 0xFF	; 255
    1a64:	88 bd       	out	0x28, r24	; 40
		motor_speed_l = (abs(speed_l) * 2);
    1a66:	22 0f       	add	r18, r18
    1a68:	20 93 b4 07 	sts	0x07B4, r18	; 0x8007b4 <motor_speed_l>
		motor_startup_l = true;
    1a6c:	81 e0       	ldi	r24, 0x01	; 1
    1a6e:	80 93 b2 07 	sts	0x07B2, r24	; 0x8007b2 <motor_startup_l>
		timer = 20;
    1a72:	84 e1       	ldi	r24, 0x14	; 20
    1a74:	80 93 b6 07 	sts	0x07B6, r24	; 0x8007b6 <timer>
    1a78:	07 c0       	rjmp	.+14     	; 0x1a88 <motors_set_speed+0xee>
	}
	else
	{
		//Set speed on left motor
		MOTOR_L_SPEED = (abs(speed_l) * 2);
    1a7a:	97 ff       	sbrs	r25, 7
    1a7c:	03 c0       	rjmp	.+6      	; 0x1a84 <motors_set_speed+0xea>
    1a7e:	91 95       	neg	r25
    1a80:	81 95       	neg	r24
    1a82:	91 09       	sbc	r25, r1
    1a84:	88 0f       	add	r24, r24
    1a86:	88 bd       	out	0x28, r24	; 40
	}
	
	//If speed is low enough to need a startup process
	if (MOTOR_R_SPEED == 0 && (abs(speed_r) < 30) && abs(speed_r) > 0)
    1a88:	27 b5       	in	r18, 0x27	; 39
    1a8a:	8c 2f       	mov	r24, r28
    1a8c:	0c 2e       	mov	r0, r28
    1a8e:	00 0c       	add	r0, r0
    1a90:	99 0b       	sbc	r25, r25
    1a92:	21 11       	cpse	r18, r1
    1a94:	19 c0       	rjmp	.+50     	; 0x1ac8 <motors_set_speed+0x12e>
    1a96:	c3 5e       	subi	r28, 0xE3	; 227
    1a98:	cb 33       	cpi	r28, 0x3B	; 59
    1a9a:	b0 f4       	brcc	.+44     	; 0x1ac8 <motors_set_speed+0x12e>
    1a9c:	9c 01       	movw	r18, r24
    1a9e:	97 ff       	sbrs	r25, 7
    1aa0:	04 c0       	rjmp	.+8      	; 0x1aaa <motors_set_speed+0x110>
    1aa2:	22 27       	eor	r18, r18
    1aa4:	33 27       	eor	r19, r19
    1aa6:	28 1b       	sub	r18, r24
    1aa8:	39 0b       	sbc	r19, r25
    1aaa:	21 15       	cp	r18, r1
    1aac:	31 05       	cpc	r19, r1
    1aae:	61 f0       	breq	.+24     	; 0x1ac8 <motors_set_speed+0x12e>
	{
		//Set to have max speed for 20ms
		MOTOR_R_SPEED = 0xff;
    1ab0:	8f ef       	ldi	r24, 0xFF	; 255
    1ab2:	87 bd       	out	0x27, r24	; 39
		motor_speed_r = (abs(speed_r) * 2);
    1ab4:	22 0f       	add	r18, r18
    1ab6:	20 93 b1 07 	sts	0x07B1, r18	; 0x8007b1 <motor_speed_r>
		motor_startup_r = true;
    1aba:	81 e0       	ldi	r24, 0x01	; 1
    1abc:	80 93 b5 07 	sts	0x07B5, r24	; 0x8007b5 <motor_startup_r>
		timer = 20;
    1ac0:	84 e1       	ldi	r24, 0x14	; 20
    1ac2:	80 93 b6 07 	sts	0x07B6, r24	; 0x8007b6 <timer>
    1ac6:	07 c0       	rjmp	.+14     	; 0x1ad6 <motors_set_speed+0x13c>
	}
	else
	{
		//Set speed on right motor
		MOTOR_R_SPEED = (abs(speed_r) * 2);
    1ac8:	97 ff       	sbrs	r25, 7
    1aca:	03 c0       	rjmp	.+6      	; 0x1ad2 <motors_set_speed+0x138>
    1acc:	91 95       	neg	r25
    1ace:	81 95       	neg	r24
    1ad0:	91 09       	sbc	r25, r1
    1ad2:	88 0f       	add	r24, r24
    1ad4:	87 bd       	out	0x27, r24	; 39
	}
}
    1ad6:	df 91       	pop	r29
    1ad8:	cf 91       	pop	r28
    1ada:	08 95       	ret

00001adc <motor_forward_set_lock>:
/*
 * Sets the forward moving lock.
 */
void motor_forward_set_lock(bool lock)
{
	if (motor_forward_lock == false && lock == true)
    1adc:	90 91 af 07 	lds	r25, 0x07AF	; 0x8007af <motor_forward_lock>
    1ae0:	91 11       	cpse	r25, r1
    1ae2:	09 c0       	rjmp	.+18     	; 0x1af6 <motor_forward_set_lock+0x1a>
    1ae4:	88 23       	and	r24, r24
    1ae6:	39 f0       	breq	.+14     	; 0x1af6 <motor_forward_set_lock+0x1a>
	{
		motor_forward_lock = lock;
    1ae8:	81 e0       	ldi	r24, 0x01	; 1
    1aea:	80 93 af 07 	sts	0x07AF, r24	; 0x8007af <motor_forward_lock>
		motors_set_speed(0, 0);
    1aee:	60 e0       	ldi	r22, 0x00	; 0
    1af0:	80 e0       	ldi	r24, 0x00	; 0
    1af2:	0c 94 cd 0c 	jmp	0x199a	; 0x199a <motors_set_speed>
	}
	else
	{
		motor_forward_lock = lock;
    1af6:	80 93 af 07 	sts	0x07AF, r24	; 0x8007af <motor_forward_lock>
    1afa:	08 95       	ret

00001afc <motor_backward_set_lock>:
/*
 * Sets the backward moving lock.
 */
void motor_backward_set_lock(bool lock)
{
	if (motor_backward_lock == false && lock == true)
    1afc:	90 91 b0 07 	lds	r25, 0x07B0	; 0x8007b0 <motor_backward_lock>
    1b00:	91 11       	cpse	r25, r1
    1b02:	09 c0       	rjmp	.+18     	; 0x1b16 <motor_backward_set_lock+0x1a>
    1b04:	88 23       	and	r24, r24
    1b06:	39 f0       	breq	.+14     	; 0x1b16 <motor_backward_set_lock+0x1a>
	{
		motor_backward_lock = lock;
    1b08:	81 e0       	ldi	r24, 0x01	; 1
    1b0a:	80 93 b0 07 	sts	0x07B0, r24	; 0x8007b0 <motor_backward_lock>
		motors_set_speed(0, 0);
    1b0e:	60 e0       	ldi	r22, 0x00	; 0
    1b10:	80 e0       	ldi	r24, 0x00	; 0
    1b12:	0c 94 cd 0c 	jmp	0x199a	; 0x199a <motors_set_speed>
	}
	else
	{
		motor_backward_lock = lock;
    1b16:	80 93 b0 07 	sts	0x07B0, r24	; 0x8007b0 <motor_backward_lock>
    1b1a:	08 95       	ret

00001b1c <motor_set_lock>:
/*
 * Sets the general lock.
 */
void motor_set_lock(bool lock)
{
	if (motor_lock == false && lock == true)
    1b1c:	90 91 b3 07 	lds	r25, 0x07B3	; 0x8007b3 <motor_lock>
    1b20:	91 11       	cpse	r25, r1
    1b22:	09 c0       	rjmp	.+18     	; 0x1b36 <motor_set_lock+0x1a>
    1b24:	88 23       	and	r24, r24
    1b26:	39 f0       	breq	.+14     	; 0x1b36 <motor_set_lock+0x1a>
	{
		motor_lock = lock;
    1b28:	81 e0       	ldi	r24, 0x01	; 1
    1b2a:	80 93 b3 07 	sts	0x07B3, r24	; 0x8007b3 <motor_lock>
		motors_set_speed(0, 0);
    1b2e:	60 e0       	ldi	r22, 0x00	; 0
    1b30:	80 e0       	ldi	r24, 0x00	; 0
    1b32:	0c 94 cd 0c 	jmp	0x199a	; 0x199a <motors_set_speed>
	}
	else
	{
		motor_lock = lock;
    1b36:	80 93 b3 07 	sts	0x07B3, r24	; 0x8007b3 <motor_lock>
    1b3a:	08 95       	ret

00001b3c <piezo_init>:
 * Ex. if the note parameter is 4 it will be silent in the length of a quarter note.
 */
void piezo_pause(uint8_t note)
{
	piezo_stop(pace_ms/note);
	piezo_delay(pace_ms/note);
    1b3c:	80 e4       	ldi	r24, 0x40	; 64
    1b3e:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    1b42:	e1 e8       	ldi	r30, 0x81	; 129
    1b44:	f0 e0       	ldi	r31, 0x00	; 0
    1b46:	80 81       	ld	r24, Z
    1b48:	88 60       	ori	r24, 0x08	; 8
    1b4a:	80 83       	st	Z, r24
    1b4c:	21 98       	cbi	0x04, 1	; 4
    1b4e:	08 95       	ret

00001b50 <piezo_stop>:
    1b50:	21 98       	cbi	0x04, 1	; 4
    1b52:	08 95       	ret

00001b54 <piezo_calc_ocr>:

/*
 * Calculates the OCR value to get correct frequency.
 */
uint16_t piezo_calc_ocr(float tone, uint8_t multiplier)
{
    1b54:	cf 92       	push	r12
    1b56:	df 92       	push	r13
    1b58:	ef 92       	push	r14
    1b5a:	ff 92       	push	r15
    1b5c:	cf 93       	push	r28
    1b5e:	c4 2f       	mov	r28, r20
	return (uint16_t)round((double)((F_CPU/(2*128*tone))*multiplier-1));
    1b60:	20 e0       	ldi	r18, 0x00	; 0
    1b62:	30 e0       	ldi	r19, 0x00	; 0
    1b64:	40 e8       	ldi	r20, 0x80	; 128
    1b66:	53 e4       	ldi	r21, 0x43	; 67
    1b68:	0e 94 db 11 	call	0x23b6	; 0x23b6 <__mulsf3>
    1b6c:	9b 01       	movw	r18, r22
    1b6e:	ac 01       	movw	r20, r24
    1b70:	60 e0       	ldi	r22, 0x00	; 0
    1b72:	74 e2       	ldi	r23, 0x24	; 36
    1b74:	84 ef       	ldi	r24, 0xF4	; 244
    1b76:	9a e4       	ldi	r25, 0x4A	; 74
    1b78:	0e 94 88 10 	call	0x2110	; 0x2110 <__divsf3>
    1b7c:	6b 01       	movw	r12, r22
    1b7e:	7c 01       	movw	r14, r24
    1b80:	6c 2f       	mov	r22, r28
    1b82:	70 e0       	ldi	r23, 0x00	; 0
    1b84:	80 e0       	ldi	r24, 0x00	; 0
    1b86:	90 e0       	ldi	r25, 0x00	; 0
    1b88:	0e 94 2b 11 	call	0x2256	; 0x2256 <__floatsisf>
    1b8c:	9b 01       	movw	r18, r22
    1b8e:	ac 01       	movw	r20, r24
    1b90:	c7 01       	movw	r24, r14
    1b92:	b6 01       	movw	r22, r12
    1b94:	0e 94 db 11 	call	0x23b6	; 0x23b6 <__mulsf3>
    1b98:	20 e0       	ldi	r18, 0x00	; 0
    1b9a:	30 e0       	ldi	r19, 0x00	; 0
    1b9c:	40 e8       	ldi	r20, 0x80	; 128
    1b9e:	5f e3       	ldi	r21, 0x3F	; 63
    1ba0:	0e 94 16 10 	call	0x202c	; 0x202c <__subsf3>
    1ba4:	0e 94 48 12 	call	0x2490	; 0x2490 <round>
    1ba8:	0e 94 fa 10 	call	0x21f4	; 0x21f4 <__fixunssfsi>
}
    1bac:	cb 01       	movw	r24, r22
    1bae:	cf 91       	pop	r28
    1bb0:	ff 90       	pop	r15
    1bb2:	ef 90       	pop	r14
    1bb4:	df 90       	pop	r13
    1bb6:	cf 90       	pop	r12
    1bb8:	08 95       	ret

00001bba <piezo_play_tone_continous>:
 * Starts playing a continous tone.
 * The octave input represent the octave.
 * The tone input represents the tone and takes frequency for the middle octave.
 */
void piezo_play_tone_continous(float tone, uint8_t octave)
{
    1bba:	0f 93       	push	r16
    1bbc:	1f 93       	push	r17
	/* Sets TCCR1B and multiplier to get the right tone to the correct octave. */
	int multiplier;
	switch(octave)
    1bbe:	04 2f       	mov	r16, r20
    1bc0:	10 e0       	ldi	r17, 0x00	; 0
    1bc2:	09 30       	cpi	r16, 0x09	; 9
    1bc4:	11 05       	cpc	r17, r1
    1bc6:	08 f0       	brcs	.+2      	; 0x1bca <piezo_play_tone_continous+0x10>
    1bc8:	59 c0       	rjmp	.+178    	; 0x1c7c <piezo_play_tone_continous+0xc2>
    1bca:	f8 01       	movw	r30, r16
    1bcc:	ee 5a       	subi	r30, 0xAE	; 174
    1bce:	ff 4f       	sbci	r31, 0xFF	; 255
	{
		case 8:
		TCCR1B |= (1<<CS11);
    1bd0:	20 91 81 00 	lds	r18, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
 */
void piezo_play_tone_continous(float tone, uint8_t octave)
{
	/* Sets TCCR1B and multiplier to get the right tone to the correct octave. */
	int multiplier;
	switch(octave)
    1bd4:	0c 94 a9 12 	jmp	0x2552	; 0x2552 <__tablejump2__>
	{
		case 8:
		TCCR1B |= (1<<CS11);
    1bd8:	22 60       	ori	r18, 0x02	; 2
    1bda:	20 93 81 00 	sts	0x0081, r18	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
		TCCR1B &=~ ((1<<CS12) | (1<<CS10));
    1bde:	20 91 81 00 	lds	r18, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    1be2:	2a 7f       	andi	r18, 0xFA	; 250
    1be4:	17 c0       	rjmp	.+46     	; 0x1c14 <piezo_play_tone_continous+0x5a>
		multiplier = 1;
		break;
		
		case 7:
		TCCR1B |= (1<<CS11);
    1be6:	22 60       	ori	r18, 0x02	; 2
    1be8:	20 93 81 00 	sts	0x0081, r18	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
		TCCR1B &=~ ((1<<CS12) | (1<<CS10));
    1bec:	20 91 81 00 	lds	r18, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    1bf0:	2a 7f       	andi	r18, 0xFA	; 250
    1bf2:	36 c0       	rjmp	.+108    	; 0x1c60 <piezo_play_tone_continous+0xa6>
		multiplier = 2;
		break;
		
		case 6:
		TCCR1B |= (1<<CS11);
    1bf4:	22 60       	ori	r18, 0x02	; 2
    1bf6:	20 93 81 00 	sts	0x0081, r18	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
		TCCR1B &=~ ((1<<CS12) | (1<<CS10));
    1bfa:	20 91 81 00 	lds	r18, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    1bfe:	2a 7f       	andi	r18, 0xFA	; 250
    1c00:	20 93 81 00 	sts	0x0081, r18	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
		multiplier = 4;
    1c04:	44 e0       	ldi	r20, 0x04	; 4
		break;
    1c06:	2f c0       	rjmp	.+94     	; 0x1c66 <piezo_play_tone_continous+0xac>
		
		case 5:
		TCCR1B |= (1<<CS11) | (1<<CS10);
    1c08:	23 60       	ori	r18, 0x03	; 3
    1c0a:	20 93 81 00 	sts	0x0081, r18	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
		TCCR1B &=~ (1<<CS12);
    1c0e:	20 91 81 00 	lds	r18, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    1c12:	2b 7f       	andi	r18, 0xFB	; 251
    1c14:	20 93 81 00 	sts	0x0081, r18	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
		multiplier = 1;
    1c18:	41 e0       	ldi	r20, 0x01	; 1
		break;
    1c1a:	25 c0       	rjmp	.+74     	; 0x1c66 <piezo_play_tone_continous+0xac>
		
		case 4:
		TCCR1B |= (1<<CS11) | (1<<CS10);
    1c1c:	23 60       	ori	r18, 0x03	; 3
    1c1e:	20 93 81 00 	sts	0x0081, r18	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
		TCCR1B &=~ (1<<CS12);
    1c22:	20 91 81 00 	lds	r18, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    1c26:	2b 7f       	andi	r18, 0xFB	; 251
    1c28:	1b c0       	rjmp	.+54     	; 0x1c60 <piezo_play_tone_continous+0xa6>
		multiplier = 2;
		break;
		
		case 3:
		TCCR1B |= (1<<CS12);
    1c2a:	24 60       	ori	r18, 0x04	; 4
    1c2c:	20 93 81 00 	sts	0x0081, r18	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
		TCCR1B &=~ ((1<<CS11) | (1<<CS10));
    1c30:	20 91 81 00 	lds	r18, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    1c34:	2c 7f       	andi	r18, 0xFC	; 252
    1c36:	ee cf       	rjmp	.-36     	; 0x1c14 <piezo_play_tone_continous+0x5a>
		multiplier = 1;
		break;
		
		case 2:
		TCCR1B |= (1<<CS12);
    1c38:	24 60       	ori	r18, 0x04	; 4
    1c3a:	20 93 81 00 	sts	0x0081, r18	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
		TCCR1B &=~ ((1<<CS11) | (1<<CS10));
    1c3e:	20 91 81 00 	lds	r18, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    1c42:	2c 7f       	andi	r18, 0xFC	; 252
    1c44:	0d c0       	rjmp	.+26     	; 0x1c60 <piezo_play_tone_continous+0xa6>
		multiplier = 2;
		break;
		
		case 1:
		TCCR1B |= (1<<CS12) | (1<<CS10);
    1c46:	25 60       	ori	r18, 0x05	; 5
    1c48:	20 93 81 00 	sts	0x0081, r18	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
		TCCR1B &=~ (1<<CS11);
    1c4c:	20 91 81 00 	lds	r18, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    1c50:	2d 7f       	andi	r18, 0xFD	; 253
    1c52:	e0 cf       	rjmp	.-64     	; 0x1c14 <piezo_play_tone_continous+0x5a>
		multiplier = 1;
		break;
		
		case 0:
		TCCR1B |= (1<<CS12) | (1<<CS10);
    1c54:	25 60       	ori	r18, 0x05	; 5
    1c56:	20 93 81 00 	sts	0x0081, r18	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
		TCCR1B &=~ (1<<CS11);
    1c5a:	20 91 81 00 	lds	r18, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    1c5e:	2d 7f       	andi	r18, 0xFD	; 253
    1c60:	20 93 81 00 	sts	0x0081, r18	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
		multiplier = 2;
    1c64:	42 e0       	ldi	r20, 0x02	; 2
		
		default:
		return;
	}
	
	OCR1A = piezo_calc_ocr(tone, multiplier);
    1c66:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <piezo_calc_ocr>
    1c6a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    1c6e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	TCNT1 = 0;
    1c72:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
    1c76:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	DDRB |= (1<<DDB1);
    1c7a:	21 9a       	sbi	0x04, 1	; 4
}
    1c7c:	1f 91       	pop	r17
    1c7e:	0f 91       	pop	r16
    1c80:	08 95       	ret

00001c82 <song_set>:
/*
 * Sets a song to be played.
 */
void song_set(const song* set_song)
{
	current_song = set_song;
    1c82:	90 93 bb 07 	sts	0x07BB, r25	; 0x8007bb <current_song+0x1>
    1c86:	80 93 ba 07 	sts	0x07BA, r24	; 0x8007ba <current_song>
	
	timer = 0;
    1c8a:	10 92 b7 07 	sts	0x07B7, r1	; 0x8007b7 <timer+0x1>
    1c8e:	10 92 b6 07 	sts	0x07B6, r1	; 0x8007b6 <timer>
	
	current_note = 0;
    1c92:	10 92 b8 07 	sts	0x07B8, r1	; 0x8007b8 <current_note>
	
	playing = false;
    1c96:	10 92 b9 07 	sts	0x07B9, r1	; 0x8007b9 <playing>
    1c9a:	08 95       	ret

00001c9c <song_start>:
/*
 * Starts song if there is one set.
 */
void song_start()
{
	if (current_song != NULL)
    1c9c:	80 91 ba 07 	lds	r24, 0x07BA	; 0x8007ba <current_song>
    1ca0:	90 91 bb 07 	lds	r25, 0x07BB	; 0x8007bb <current_song+0x1>
    1ca4:	89 2b       	or	r24, r25
    1ca6:	49 f0       	breq	.+18     	; 0x1cba <song_start+0x1e>
	{
		current_note = 0;
    1ca8:	10 92 b8 07 	sts	0x07B8, r1	; 0x8007b8 <current_note>
		playing = true;
    1cac:	81 e0       	ldi	r24, 0x01	; 1
    1cae:	80 93 b9 07 	sts	0x07B9, r24	; 0x8007b9 <playing>
		timer = 0;
    1cb2:	10 92 b7 07 	sts	0x07B7, r1	; 0x8007b7 <timer+0x1>
    1cb6:	10 92 b6 07 	sts	0x07B6, r1	; 0x8007b6 <timer>
    1cba:	08 95       	ret

00001cbc <song_stop>:
/*
 * Stops a playing song.
 */
void song_stop()
{
	playing = false;
    1cbc:	10 92 b9 07 	sts	0x07B9, r1	; 0x8007b9 <playing>
	current_song = NULL;
    1cc0:	10 92 bb 07 	sts	0x07BB, r1	; 0x8007bb <current_song+0x1>
    1cc4:	10 92 ba 07 	sts	0x07BA, r1	; 0x8007ba <current_song>
	piezo_stop();
    1cc8:	0c 94 a8 0d 	jmp	0x1b50	; 0x1b50 <piezo_stop>

00001ccc <song_playing>:
 * Returns whether a song is playing or not.
 */
bool song_playing()
{
	return playing;
}
    1ccc:	80 91 b9 07 	lds	r24, 0x07B9	; 0x8007b9 <playing>
    1cd0:	08 95       	ret

00001cd2 <song_play>:

/*
 * Continues song and should be called on a frequency of 1kHz.
 */
void song_play()
{
    1cd2:	cf 92       	push	r12
    1cd4:	df 92       	push	r13
    1cd6:	ef 92       	push	r14
    1cd8:	ff 92       	push	r15
    1cda:	1f 93       	push	r17
    1cdc:	cf 93       	push	r28
    1cde:	df 93       	push	r29
	if (playing)
    1ce0:	80 91 b9 07 	lds	r24, 0x07B9	; 0x8007b9 <playing>
    1ce4:	88 23       	and	r24, r24
    1ce6:	09 f4       	brne	.+2      	; 0x1cea <song_play+0x18>
    1ce8:	6e c0       	rjmp	.+220    	; 0x1dc6 <song_play+0xf4>
	{
		if (timer != 0)
    1cea:	80 91 b6 07 	lds	r24, 0x07B6	; 0x8007b6 <timer>
    1cee:	90 91 b7 07 	lds	r25, 0x07B7	; 0x8007b7 <timer+0x1>
    1cf2:	00 97       	sbiw	r24, 0x00	; 0
    1cf4:	29 f0       	breq	.+10     	; 0x1d00 <song_play+0x2e>
		{
			timer--;
    1cf6:	01 97       	sbiw	r24, 0x01	; 1
    1cf8:	90 93 b7 07 	sts	0x07B7, r25	; 0x8007b7 <timer+0x1>
    1cfc:	80 93 b6 07 	sts	0x07B6, r24	; 0x8007b6 <timer>
		}
		
		if (current_note == current_song->number_of_notes && timer == 0) //If its the last note and its time has ended. End song.
    1d00:	e0 91 ba 07 	lds	r30, 0x07BA	; 0x8007ba <current_song>
    1d04:	f0 91 bb 07 	lds	r31, 0x07BB	; 0x8007bb <current_song+0x1>
    1d08:	20 91 b8 07 	lds	r18, 0x07B8	; 0x8007b8 <current_note>
    1d0c:	32 81       	ldd	r19, Z+2	; 0x02
    1d0e:	80 91 b6 07 	lds	r24, 0x07B6	; 0x8007b6 <timer>
    1d12:	90 91 b7 07 	lds	r25, 0x07B7	; 0x8007b7 <timer+0x1>
    1d16:	32 13       	cpse	r19, r18
    1d18:	0b c0       	rjmp	.+22     	; 0x1d30 <song_play+0x5e>
    1d1a:	00 97       	sbiw	r24, 0x00	; 0
    1d1c:	49 f4       	brne	.+18     	; 0x1d30 <song_play+0x5e>
			}
			timer = (number) * (current_song->pace_ms/(lenght));
			current_note++;
		}
	}
    1d1e:	df 91       	pop	r29
    1d20:	cf 91       	pop	r28
    1d22:	1f 91       	pop	r17
    1d24:	ff 90       	pop	r15
    1d26:	ef 90       	pop	r14
    1d28:	df 90       	pop	r13
    1d2a:	cf 90       	pop	r12
			timer--;
		}
		
		if (current_note == current_song->number_of_notes && timer == 0) //If its the last note and its time has ended. End song.
		{
			song_stop();
    1d2c:	0c 94 5e 0e 	jmp	0x1cbc	; 0x1cbc <song_stop>
		}
		else if (timer == 5)
    1d30:	85 30       	cpi	r24, 0x05	; 5
    1d32:	91 05       	cpc	r25, r1
    1d34:	49 f4       	brne	.+18     	; 0x1d48 <song_play+0x76>
			}
			timer = (number) * (current_song->pace_ms/(lenght));
			current_note++;
		}
	}
    1d36:	df 91       	pop	r29
    1d38:	cf 91       	pop	r28
    1d3a:	1f 91       	pop	r17
    1d3c:	ff 90       	pop	r15
    1d3e:	ef 90       	pop	r14
    1d40:	df 90       	pop	r13
    1d42:	cf 90       	pop	r12
		{
			song_stop();
		}
		else if (timer == 5)
		{
			piezo_stop();
    1d44:	0c 94 a8 0d 	jmp	0x1b50	; 0x1b50 <piezo_stop>
		}
		else if (timer == 0)
    1d48:	89 2b       	or	r24, r25
    1d4a:	09 f0       	breq	.+2      	; 0x1d4e <song_play+0x7c>
    1d4c:	3c c0       	rjmp	.+120    	; 0x1dc6 <song_play+0xf4>
		{
			//Loads note values from program memory.
			float tone = pgm_read_float(&(current_song->notes[current_note].tone));
    1d4e:	83 81       	ldd	r24, Z+3	; 0x03
    1d50:	94 81       	ldd	r25, Z+4	; 0x04
    1d52:	37 e0       	ldi	r19, 0x07	; 7
    1d54:	23 9f       	mul	r18, r19
    1d56:	80 0d       	add	r24, r0
    1d58:	91 1d       	adc	r25, r1
    1d5a:	11 24       	eor	r1, r1
    1d5c:	fc 01       	movw	r30, r24
    1d5e:	c5 90       	lpm	r12, Z+
    1d60:	d5 90       	lpm	r13, Z+
    1d62:	e5 90       	lpm	r14, Z+
    1d64:	f4 90       	lpm	r15, Z
			uint8_t octave = pgm_read_byte(&(current_song->notes[current_note].octave));
    1d66:	fc 01       	movw	r30, r24
    1d68:	34 96       	adiw	r30, 0x04	; 4
    1d6a:	14 91       	lpm	r17, Z
			uint8_t lenght = pgm_read_byte(&(current_song->notes[current_note].length));
    1d6c:	31 96       	adiw	r30, 0x01	; 1
    1d6e:	d4 91       	lpm	r29, Z
			uint8_t number = pgm_read_byte(&(current_song->notes[current_note].number));
    1d70:	31 96       	adiw	r30, 0x01	; 1
    1d72:	c4 91       	lpm	r28, Z
			if (tone != 0)
    1d74:	20 e0       	ldi	r18, 0x00	; 0
    1d76:	30 e0       	ldi	r19, 0x00	; 0
    1d78:	a9 01       	movw	r20, r18
    1d7a:	c7 01       	movw	r24, r14
    1d7c:	b6 01       	movw	r22, r12
    1d7e:	0e 94 83 10 	call	0x2106	; 0x2106 <__cmpsf2>
    1d82:	88 23       	and	r24, r24
    1d84:	31 f0       	breq	.+12     	; 0x1d92 <song_play+0xc0>
			{
				piezo_play_tone_continous(tone, octave);
    1d86:	41 2f       	mov	r20, r17
    1d88:	c7 01       	movw	r24, r14
    1d8a:	b6 01       	movw	r22, r12
    1d8c:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <piezo_play_tone_continous>
    1d90:	02 c0       	rjmp	.+4      	; 0x1d96 <song_play+0xc4>
			}
			else
			{
				piezo_stop();
    1d92:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <piezo_stop>
			}
			timer = (number) * (current_song->pace_ms/(lenght));
    1d96:	e0 91 ba 07 	lds	r30, 0x07BA	; 0x8007ba <current_song>
    1d9a:	f0 91 bb 07 	lds	r31, 0x07BB	; 0x8007bb <current_song+0x1>
    1d9e:	6d 2f       	mov	r22, r29
    1da0:	70 e0       	ldi	r23, 0x00	; 0
    1da2:	80 81       	ld	r24, Z
    1da4:	91 81       	ldd	r25, Z+1	; 0x01
    1da6:	0e 94 95 12 	call	0x252a	; 0x252a <__udivmodhi4>
    1daa:	c6 9f       	mul	r28, r22
    1dac:	c0 01       	movw	r24, r0
    1dae:	c7 9f       	mul	r28, r23
    1db0:	90 0d       	add	r25, r0
    1db2:	11 24       	eor	r1, r1
    1db4:	90 93 b7 07 	sts	0x07B7, r25	; 0x8007b7 <timer+0x1>
    1db8:	80 93 b6 07 	sts	0x07B6, r24	; 0x8007b6 <timer>
			current_note++;
    1dbc:	80 91 b8 07 	lds	r24, 0x07B8	; 0x8007b8 <current_note>
    1dc0:	8f 5f       	subi	r24, 0xFF	; 255
    1dc2:	80 93 b8 07 	sts	0x07B8, r24	; 0x8007b8 <current_note>
		}
	}
    1dc6:	df 91       	pop	r29
    1dc8:	cf 91       	pop	r28
    1dca:	1f 91       	pop	r17
    1dcc:	ff 90       	pop	r15
    1dce:	ef 90       	pop	r14
    1dd0:	df 90       	pop	r13
    1dd2:	cf 90       	pop	r12
    1dd4:	08 95       	ret

00001dd6 <get_mario_song>:
};

const song* get_mario_song()
{
	return &mario_song;
}
    1dd6:	8e e5       	ldi	r24, 0x5E	; 94
    1dd8:	91 e0       	ldi	r25, 0x01	; 1
    1dda:	08 95       	ret

00001ddc <get_heartbeat_song>:
};

const song* get_heartbeat_song()
{
	return &heartbeat_song;
}
    1ddc:	89 e5       	ldi	r24, 0x59	; 89
    1dde:	91 e0       	ldi	r25, 0x01	; 1
    1de0:	08 95       	ret

00001de2 <get_mii_song>:
};

const song* get_mii_song()
{
	return &mii_song;
}
    1de2:	84 e5       	ldi	r24, 0x54	; 84
    1de4:	91 e0       	ldi	r25, 0x01	; 1
    1de6:	08 95       	ret

00001de8 <get_allstars_song>:
};

const song* get_allstars_song()
{
	return &allstars_song;
}
    1de8:	8f e4       	ldi	r24, 0x4F	; 79
    1dea:	91 e0       	ldi	r25, 0x01	; 1
    1dec:	08 95       	ret

00001dee <get_halo_theme_song>:
};

const song* get_halo_theme_song()
{
	return &halo_theme_song;
}
    1dee:	8a e4       	ldi	r24, 0x4A	; 74
    1df0:	91 e0       	ldi	r25, 0x01	; 1
    1df2:	08 95       	ret

00001df4 <get_imperial_march_song>:
};

const song* get_imperial_march_song()
{
	return &imperial_march_song;
}
    1df4:	85 e4       	ldi	r24, 0x45	; 69
    1df6:	91 e0       	ldi	r25, 0x01	; 1
    1df8:	08 95       	ret

00001dfa <get_soviet_anthem_song>:
};

const song* get_soviet_anthem_song()
{
	return &soviet_anthem_song;
}
    1dfa:	80 e4       	ldi	r24, 0x40	; 64
    1dfc:	91 e0       	ldi	r25, 0x01	; 1
    1dfe:	08 95       	ret

00001e00 <get_horn_song>:
};

const song* get_horn_song()
{
	return &horn_song;
}
    1e00:	8b e3       	ldi	r24, 0x3B	; 59
    1e02:	91 e0       	ldi	r25, 0x01	; 1
    1e04:	08 95       	ret

00001e06 <get_cantina_band_song>:
};

const song* get_cantina_band_song()
{
	return &cantina_band_song;
}
    1e06:	86 e3       	ldi	r24, 0x36	; 54
    1e08:	91 e0       	ldi	r25, 0x01	; 1
    1e0a:	08 95       	ret

00001e0c <get_mario_galaxy_song>:
};

const song* get_mario_galaxy_song()
{
	return &mario_galaxy_song;
}
    1e0c:	81 e3       	ldi	r24, 0x31	; 49
    1e0e:	91 e0       	ldi	r25, 0x01	; 1
    1e10:	08 95       	ret

00001e12 <get_pokemon_center_song>:
};

const song* get_pokemon_center_song()
{
	return &pokemon_center_song;
}
    1e12:	8c e2       	ldi	r24, 0x2C	; 44
    1e14:	91 e0       	ldi	r25, 0x01	; 1
    1e16:	08 95       	ret

00001e18 <get_petalburg_song>:
};

const song* get_petalburg_song()
{
	return &petalburg_song;
}
    1e18:	87 e2       	ldi	r24, 0x27	; 39
    1e1a:	91 e0       	ldi	r25, 0x01	; 1
    1e1c:	08 95       	ret

00001e1e <get_test_song>:
};

const song* get_test_song()
{
	return &test_song;
}
    1e1e:	82 e2       	ldi	r24, 0x22	; 34
    1e20:	91 e0       	ldi	r25, 0x01	; 1
    1e22:	08 95       	ret

00001e24 <display_port_init>:
		spi_master_transmit(0b00010100);
		_delay_us(30);
	}
	PORTC |= (1<<RS_DISP);
	PORTB |= (1<<SS_DISP);
}
    1e24:	22 9a       	sbi	0x04, 2	; 4
    1e26:	39 9a       	sbi	0x07, 1	; 7
    1e28:	2a 9a       	sbi	0x05, 2	; 5
    1e2a:	08 95       	ret

00001e2c <display_init>:
    1e2c:	8c b5       	in	r24, 0x2c	; 44
    1e2e:	81 60       	ori	r24, 0x01	; 1
    1e30:	8c bd       	out	0x2c, r24	; 44
    1e32:	8c b5       	in	r24, 0x2c	; 44
    1e34:	8d 7f       	andi	r24, 0xFD	; 253
    1e36:	8c bd       	out	0x2c, r24	; 44
    1e38:	2a 98       	cbi	0x05, 2	; 5
    1e3a:	89 e3       	ldi	r24, 0x39	; 57
    1e3c:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <spi_master_transmit>
    1e40:	80 e5       	ldi	r24, 0x50	; 80
    1e42:	8a 95       	dec	r24
    1e44:	f1 f7       	brne	.-4      	; 0x1e42 <display_init+0x16>
    1e46:	8d e1       	ldi	r24, 0x1D	; 29
    1e48:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <spi_master_transmit>
    1e4c:	90 e5       	ldi	r25, 0x50	; 80
    1e4e:	9a 95       	dec	r25
    1e50:	f1 f7       	brne	.-4      	; 0x1e4e <display_init+0x22>
    1e52:	80 e5       	ldi	r24, 0x50	; 80
    1e54:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <spi_master_transmit>
    1e58:	80 e5       	ldi	r24, 0x50	; 80
    1e5a:	8a 95       	dec	r24
    1e5c:	f1 f7       	brne	.-4      	; 0x1e5a <display_init+0x2e>
    1e5e:	8c e6       	ldi	r24, 0x6C	; 108
    1e60:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <spi_master_transmit>
    1e64:	90 e5       	ldi	r25, 0x50	; 80
    1e66:	9a 95       	dec	r25
    1e68:	f1 f7       	brne	.-4      	; 0x1e66 <display_init+0x3a>
    1e6a:	8c e7       	ldi	r24, 0x7C	; 124
    1e6c:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <spi_master_transmit>
    1e70:	80 e5       	ldi	r24, 0x50	; 80
    1e72:	8a 95       	dec	r24
    1e74:	f1 f7       	brne	.-4      	; 0x1e72 <display_init+0x46>
    1e76:	88 e3       	ldi	r24, 0x38	; 56
    1e78:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <spi_master_transmit>
    1e7c:	90 e5       	ldi	r25, 0x50	; 80
    1e7e:	9a 95       	dec	r25
    1e80:	f1 f7       	brne	.-4      	; 0x1e7e <display_init+0x52>
    1e82:	8c e0       	ldi	r24, 0x0C	; 12
    1e84:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <spi_master_transmit>
    1e88:	80 e5       	ldi	r24, 0x50	; 80
    1e8a:	8a 95       	dec	r24
    1e8c:	f1 f7       	brne	.-4      	; 0x1e8a <display_init+0x5e>
    1e8e:	81 e0       	ldi	r24, 0x01	; 1
    1e90:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <spi_master_transmit>
    1e94:	8f ec       	ldi	r24, 0xCF	; 207
    1e96:	97 e0       	ldi	r25, 0x07	; 7
    1e98:	01 97       	sbiw	r24, 0x01	; 1
    1e9a:	f1 f7       	brne	.-4      	; 0x1e98 <display_init+0x6c>
    1e9c:	00 c0       	rjmp	.+0      	; 0x1e9e <display_init+0x72>
    1e9e:	00 00       	nop
    1ea0:	86 e0       	ldi	r24, 0x06	; 6
    1ea2:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <spi_master_transmit>
    1ea6:	8f e3       	ldi	r24, 0x3F	; 63
    1ea8:	9f e1       	ldi	r25, 0x1F	; 31
    1eaa:	01 97       	sbiw	r24, 0x01	; 1
    1eac:	f1 f7       	brne	.-4      	; 0x1eaa <display_init+0x7e>
    1eae:	00 c0       	rjmp	.+0      	; 0x1eb0 <display_init+0x84>
    1eb0:	00 00       	nop
    1eb2:	41 9a       	sbi	0x08, 1	; 8
    1eb4:	2a 9a       	sbi	0x05, 2	; 5
    1eb6:	80 e0       	ldi	r24, 0x00	; 0
    1eb8:	90 e0       	ldi	r25, 0x00	; 0
    1eba:	20 e2       	ldi	r18, 0x20	; 32
    1ebc:	fc 01       	movw	r30, r24
    1ebe:	e4 54       	subi	r30, 0x44	; 68
    1ec0:	f8 4f       	sbci	r31, 0xF8	; 248
    1ec2:	20 83       	st	Z, r18
    1ec4:	01 96       	adiw	r24, 0x01	; 1
    1ec6:	80 33       	cpi	r24, 0x30	; 48
    1ec8:	91 05       	cpc	r25, r1
    1eca:	c1 f7       	brne	.-16     	; 0x1ebc <display_init+0x90>
    1ecc:	10 92 ec 07 	sts	0x07EC, r1	; 0x8007ec <buff+0x30>
    1ed0:	10 92 ed 07 	sts	0x07ED, r1	; 0x8007ed <buff_uppdated>
    1ed4:	08 95       	ret

00001ed6 <display_put_char>:
    1ed6:	9c b5       	in	r25, 0x2c	; 44
    1ed8:	91 60       	ori	r25, 0x01	; 1
    1eda:	9c bd       	out	0x2c, r25	; 44
    1edc:	9c b5       	in	r25, 0x2c	; 44
    1ede:	9d 7f       	andi	r25, 0xFD	; 253
    1ee0:	9c bd       	out	0x2c, r25	; 44
    1ee2:	2a 98       	cbi	0x05, 2	; 5
    1ee4:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <spi_master_transmit>
    1ee8:	80 e5       	ldi	r24, 0x50	; 80
    1eea:	8a 95       	dec	r24
    1eec:	f1 f7       	brne	.-4      	; 0x1eea <display_put_char+0x14>
    1eee:	2a 9a       	sbi	0x05, 2	; 5
    1ef0:	80 e0       	ldi	r24, 0x00	; 0
    1ef2:	90 e0       	ldi	r25, 0x00	; 0
    1ef4:	08 95       	ret

00001ef6 <display_clear>:
/*
 * Clears the display.
 */
void display_clear()
{
	SPCR |= (1<<SPR0);
    1ef6:	8c b5       	in	r24, 0x2c	; 44
    1ef8:	81 60       	ori	r24, 0x01	; 1
    1efa:	8c bd       	out	0x2c, r24	; 44
	SPCR &=~ (1<<SPR1);
    1efc:	8c b5       	in	r24, 0x2c	; 44
    1efe:	8d 7f       	andi	r24, 0xFD	; 253
    1f00:	8c bd       	out	0x2c, r24	; 44
	PORTC &=~ (1<<RS_DISP);
    1f02:	41 98       	cbi	0x08, 1	; 8
	PORTB &=~ (1<<SS_DISP);
    1f04:	2a 98       	cbi	0x05, 2	; 5
	spi_master_transmit(0x01);
    1f06:	81 e0       	ldi	r24, 0x01	; 1
    1f08:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <spi_master_transmit>
    1f0c:	8f e3       	ldi	r24, 0x3F	; 63
    1f0e:	9f e1       	ldi	r25, 0x1F	; 31
    1f10:	01 97       	sbiw	r24, 0x01	; 1
    1f12:	f1 f7       	brne	.-4      	; 0x1f10 <display_clear+0x1a>
    1f14:	00 c0       	rjmp	.+0      	; 0x1f16 <display_clear+0x20>
    1f16:	00 00       	nop
	_delay_ms(4);
	PORTC |= (1<<RS_DISP);
    1f18:	41 9a       	sbi	0x08, 1	; 8
	PORTB |= (1<<SS_DISP);
    1f1a:	2a 9a       	sbi	0x05, 2	; 5
    1f1c:	08 95       	ret

00001f1e <display_buff>:
/*
 * Displays whats in the display buffer if it has changed.
 */
void display_buff(void)
{
	if (buff_uppdated == true)
    1f1e:	80 91 ed 07 	lds	r24, 0x07ED	; 0x8007ed <buff_uppdated>
    1f22:	88 23       	and	r24, r24
    1f24:	91 f0       	breq	.+36     	; 0x1f4a <display_buff+0x2c>
	{
		display_clear();
    1f26:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <display_clear>
		printf("%s", buff);
    1f2a:	8c eb       	ldi	r24, 0xBC	; 188
    1f2c:	97 e0       	ldi	r25, 0x07	; 7
    1f2e:	9f 93       	push	r25
    1f30:	8f 93       	push	r24
    1f32:	83 e6       	ldi	r24, 0x63	; 99
    1f34:	91 e0       	ldi	r25, 0x01	; 1
    1f36:	9f 93       	push	r25
    1f38:	8f 93       	push	r24
    1f3a:	0e 94 09 13 	call	0x2612	; 0x2612 <printf>
		buff_uppdated = false;
    1f3e:	10 92 ed 07 	sts	0x07ED, r1	; 0x8007ed <buff_uppdated>
    1f42:	0f 90       	pop	r0
    1f44:	0f 90       	pop	r0
    1f46:	0f 90       	pop	r0
    1f48:	0f 90       	pop	r0
    1f4a:	08 95       	ret

00001f4c <display_add_to_buff>:

/*
 * Adds a string to the display buffer at a position.
 */
void display_add_to_buff(const char* string, uint8_t length, uint8_t position)
{
    1f4c:	24 2f       	mov	r18, r20
	strncpy((char*)buff + position, string, length);
    1f4e:	46 2f       	mov	r20, r22
    1f50:	50 e0       	ldi	r21, 0x00	; 0
    1f52:	30 e0       	ldi	r19, 0x00	; 0
    1f54:	bc 01       	movw	r22, r24
    1f56:	c9 01       	movw	r24, r18
    1f58:	84 54       	subi	r24, 0x44	; 68
    1f5a:	98 4f       	sbci	r25, 0xF8	; 248
    1f5c:	0e 94 cd 12 	call	0x259a	; 0x259a <strncpy>
	buff_uppdated = true;
    1f60:	81 e0       	ldi	r24, 0x01	; 1
    1f62:	80 93 ed 07 	sts	0x07ED, r24	; 0x8007ed <buff_uppdated>
    1f66:	08 95       	ret

00001f68 <spi_master_init>:
/*
 * Initialize spi in master mode.
 */
void spi_master_init(void)
{
	DDRB |= (1<<SCK) | (1<<MOSI);
    1f68:	84 b1       	in	r24, 0x04	; 4
    1f6a:	88 62       	ori	r24, 0x28	; 40
    1f6c:	84 b9       	out	0x04, r24	; 4
	SPCR |= (1<<SPE) | (1<<MSTR);
    1f6e:	8c b5       	in	r24, 0x2c	; 44
    1f70:	80 65       	ori	r24, 0x50	; 80
    1f72:	8c bd       	out	0x2c, r24	; 44
	SPSR |= (1<<SPI2X);
    1f74:	8d b5       	in	r24, 0x2d	; 45
    1f76:	81 60       	ori	r24, 0x01	; 1
    1f78:	8d bd       	out	0x2d, r24	; 45
	SPCR &=~ ((1<<CPOL) | (1<<CPHA)); /* SPI mode 0*/
    1f7a:	8c b5       	in	r24, 0x2c	; 44
    1f7c:	83 7f       	andi	r24, 0xF3	; 243
    1f7e:	8c bd       	out	0x2c, r24	; 44
    1f80:	08 95       	ret

00001f82 <spi_master_transmit>:
/*
 * Sends data through spi.
 */
void spi_master_transmit(uint8_t data)
{
	SPDR = data;
    1f82:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1<<SPIF)));
    1f84:	0d b4       	in	r0, 0x2d	; 45
    1f86:	07 fe       	sbrs	r0, 7
    1f88:	fd cf       	rjmp	.-6      	; 0x1f84 <spi_master_transmit+0x2>
    1f8a:	08 95       	ret

00001f8c <uart_send_line>:
 */
bool uart_receive_byte(uint8_t* buffer){
	if(!( UCSR0A & (1<<RXC0))) return false;
	*buffer = UDR0;
	return true;
}
    1f8c:	fc 01       	movw	r30, r24
    1f8e:	91 91       	ld	r25, Z+
    1f90:	99 23       	and	r25, r25
    1f92:	39 f0       	breq	.+14     	; 0x1fa2 <uart_send_line+0x16>
    1f94:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
    1f98:	85 ff       	sbrs	r24, 5
    1f9a:	fc cf       	rjmp	.-8      	; 0x1f94 <uart_send_line+0x8>
    1f9c:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    1fa0:	f6 cf       	rjmp	.-20     	; 0x1f8e <uart_send_line+0x2>
    1fa2:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
    1fa6:	85 ff       	sbrs	r24, 5
    1fa8:	fc cf       	rjmp	.-8      	; 0x1fa2 <uart_send_line+0x16>
    1faa:	8a e0       	ldi	r24, 0x0A	; 10
    1fac:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    1fb0:	08 95       	ret

00001fb2 <uart_init>:

/*
 * Initializes uart.
 */
void uart_init(){
	UBRR0 = 51;		//9600 baud rate
    1fb2:	83 e3       	ldi	r24, 0x33	; 51
    1fb4:	90 e0       	ldi	r25, 0x00	; 0
    1fb6:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
    1fba:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UCSR0B = (1<<RXEN0)|(1<<TXEN0)|(1<<RXCIE0);
    1fbe:	88 e9       	ldi	r24, 0x98	; 152
    1fc0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	//Set frame format: 8data, 1stop bit
	UCSR0C = (0<<USBS0)|(3<<UCSZ00);
    1fc4:	86 e0       	ldi	r24, 0x06	; 6
    1fc6:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
    1fca:	08 95       	ret

00001fcc <ws2812_sendarray_mask>:
void inline ws2812_sendarray_mask(uint8_t *data,uint16_t datlen,uint8_t maskhi)
{
  uint8_t curbyte,ctr,masklo;
  uint8_t sreg_prev;
  
  ws2812_DDRREG |= maskhi; // Enable output
    1fcc:	2a b1       	in	r18, 0x0a	; 10
    1fce:	24 2b       	or	r18, r20
    1fd0:	2a b9       	out	0x0a, r18	; 10
  
  masklo	=~maskhi&ws2812_PORTREG;
    1fd2:	2b b1       	in	r18, 0x0b	; 11
    1fd4:	34 2f       	mov	r19, r20
    1fd6:	30 95       	com	r19
    1fd8:	23 23       	and	r18, r19
  maskhi |=        ws2812_PORTREG;
    1fda:	3b b1       	in	r19, 0x0b	; 11
    1fdc:	43 2b       	or	r20, r19
  
  sreg_prev=SREG;
    1fde:	3f b7       	in	r19, 0x3f	; 63
#ifdef interrupt_is_disabled
  cli();  
    1fe0:	f8 94       	cli
    1fe2:	fc 01       	movw	r30, r24
    1fe4:	68 0f       	add	r22, r24
    1fe6:	79 1f       	adc	r23, r25
#endif  

  while (datlen--) {
    1fe8:	e6 17       	cp	r30, r22
    1fea:	f7 07       	cpc	r31, r23
    1fec:	61 f0       	breq	.+24     	; 0x2006 <loop42+0x14>
    curbyte=*data++;
    1fee:	81 91       	ld	r24, Z+
    
    asm volatile(
    1ff0:	98 e0       	ldi	r25, 0x08	; 8

00001ff2 <loop42>:
    1ff2:	4b b9       	out	0x0b, r20	; 11
    1ff4:	87 ff       	sbrs	r24, 7
    1ff6:	2b b9       	out	0x0b, r18	; 11
    1ff8:	88 0f       	add	r24, r24
    1ffa:	00 00       	nop
    1ffc:	07 f4       	brid	.+0      	; 0x1ffe <loop42+0xc>
    1ffe:	2b b9       	out	0x0b, r18	; 11
    2000:	9a 95       	dec	r25
    2002:	b9 f7       	brne	.-18     	; 0x1ff2 <loop42>
    2004:	f1 cf       	rjmp	.-30     	; 0x1fe8 <ws2812_sendarray_mask+0x1c>
    :	"=&d" (ctr)
    :	"r" (curbyte), "I" (_SFR_IO_ADDR(ws2812_PORTREG)), "r" (maskhi), "r" (masklo)
    );
  }
  
  SREG=sreg_prev;
    2006:	3f bf       	out	0x3f, r19	; 63
    2008:	08 95       	ret

0000200a <ws2812_setleds_pin>:
   ws2812_setleds_pin(ledarray,leds, _BV(ws2812_pin));
}

void inline ws2812_setleds_pin(struct cRGB *ledarray, uint16_t leds, uint8_t pinmask)
{
  ws2812_sendarray_mask((uint8_t*)ledarray,leds+leds+leds,pinmask);
    200a:	9b 01       	movw	r18, r22
    200c:	22 0f       	add	r18, r18
    200e:	33 1f       	adc	r19, r19
    2010:	62 0f       	add	r22, r18
    2012:	73 1f       	adc	r23, r19
    2014:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <ws2812_sendarray_mask>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2018:	87 e5       	ldi	r24, 0x57	; 87
    201a:	92 e0       	ldi	r25, 0x02	; 2
    201c:	01 97       	sbiw	r24, 0x01	; 1
    201e:	f1 f7       	brne	.-4      	; 0x201c <ws2812_setleds_pin+0x12>
    2020:	00 c0       	rjmp	.+0      	; 0x2022 <ws2812_setleds_pin+0x18>
    2022:	00 00       	nop
    2024:	08 95       	ret

00002026 <ws2812_setleds>:
#define interrupt_is_disabled
 
// Setleds for standard RGB 
void inline ws2812_setleds(struct cRGB *ledarray, uint16_t leds)
{
   ws2812_setleds_pin(ledarray,leds, _BV(ws2812_pin));
    2026:	40 e1       	ldi	r20, 0x10	; 16
    2028:	0c 94 05 10 	jmp	0x200a	; 0x200a <ws2812_setleds_pin>

0000202c <__subsf3>:
    202c:	50 58       	subi	r21, 0x80	; 128

0000202e <__addsf3>:
    202e:	bb 27       	eor	r27, r27
    2030:	aa 27       	eor	r26, r26
    2032:	0e 94 2e 10 	call	0x205c	; 0x205c <__addsf3x>
    2036:	0c 94 a1 11 	jmp	0x2342	; 0x2342 <__fp_round>
    203a:	0e 94 93 11 	call	0x2326	; 0x2326 <__fp_pscA>
    203e:	38 f0       	brcs	.+14     	; 0x204e <__addsf3+0x20>
    2040:	0e 94 9a 11 	call	0x2334	; 0x2334 <__fp_pscB>
    2044:	20 f0       	brcs	.+8      	; 0x204e <__addsf3+0x20>
    2046:	39 f4       	brne	.+14     	; 0x2056 <__addsf3+0x28>
    2048:	9f 3f       	cpi	r25, 0xFF	; 255
    204a:	19 f4       	brne	.+6      	; 0x2052 <__addsf3+0x24>
    204c:	26 f4       	brtc	.+8      	; 0x2056 <__addsf3+0x28>
    204e:	0c 94 90 11 	jmp	0x2320	; 0x2320 <__fp_nan>
    2052:	0e f4       	brtc	.+2      	; 0x2056 <__addsf3+0x28>
    2054:	e0 95       	com	r30
    2056:	e7 fb       	bst	r30, 7
    2058:	0c 94 8a 11 	jmp	0x2314	; 0x2314 <__fp_inf>

0000205c <__addsf3x>:
    205c:	e9 2f       	mov	r30, r25
    205e:	0e 94 b2 11 	call	0x2364	; 0x2364 <__fp_split3>
    2062:	58 f3       	brcs	.-42     	; 0x203a <__addsf3+0xc>
    2064:	ba 17       	cp	r27, r26
    2066:	62 07       	cpc	r22, r18
    2068:	73 07       	cpc	r23, r19
    206a:	84 07       	cpc	r24, r20
    206c:	95 07       	cpc	r25, r21
    206e:	20 f0       	brcs	.+8      	; 0x2078 <__addsf3x+0x1c>
    2070:	79 f4       	brne	.+30     	; 0x2090 <__addsf3x+0x34>
    2072:	a6 f5       	brtc	.+104    	; 0x20dc <__addsf3x+0x80>
    2074:	0c 94 d4 11 	jmp	0x23a8	; 0x23a8 <__fp_zero>
    2078:	0e f4       	brtc	.+2      	; 0x207c <__addsf3x+0x20>
    207a:	e0 95       	com	r30
    207c:	0b 2e       	mov	r0, r27
    207e:	ba 2f       	mov	r27, r26
    2080:	a0 2d       	mov	r26, r0
    2082:	0b 01       	movw	r0, r22
    2084:	b9 01       	movw	r22, r18
    2086:	90 01       	movw	r18, r0
    2088:	0c 01       	movw	r0, r24
    208a:	ca 01       	movw	r24, r20
    208c:	a0 01       	movw	r20, r0
    208e:	11 24       	eor	r1, r1
    2090:	ff 27       	eor	r31, r31
    2092:	59 1b       	sub	r21, r25
    2094:	99 f0       	breq	.+38     	; 0x20bc <__addsf3x+0x60>
    2096:	59 3f       	cpi	r21, 0xF9	; 249
    2098:	50 f4       	brcc	.+20     	; 0x20ae <__addsf3x+0x52>
    209a:	50 3e       	cpi	r21, 0xE0	; 224
    209c:	68 f1       	brcs	.+90     	; 0x20f8 <__addsf3x+0x9c>
    209e:	1a 16       	cp	r1, r26
    20a0:	f0 40       	sbci	r31, 0x00	; 0
    20a2:	a2 2f       	mov	r26, r18
    20a4:	23 2f       	mov	r18, r19
    20a6:	34 2f       	mov	r19, r20
    20a8:	44 27       	eor	r20, r20
    20aa:	58 5f       	subi	r21, 0xF8	; 248
    20ac:	f3 cf       	rjmp	.-26     	; 0x2094 <__addsf3x+0x38>
    20ae:	46 95       	lsr	r20
    20b0:	37 95       	ror	r19
    20b2:	27 95       	ror	r18
    20b4:	a7 95       	ror	r26
    20b6:	f0 40       	sbci	r31, 0x00	; 0
    20b8:	53 95       	inc	r21
    20ba:	c9 f7       	brne	.-14     	; 0x20ae <__addsf3x+0x52>
    20bc:	7e f4       	brtc	.+30     	; 0x20dc <__addsf3x+0x80>
    20be:	1f 16       	cp	r1, r31
    20c0:	ba 0b       	sbc	r27, r26
    20c2:	62 0b       	sbc	r22, r18
    20c4:	73 0b       	sbc	r23, r19
    20c6:	84 0b       	sbc	r24, r20
    20c8:	ba f0       	brmi	.+46     	; 0x20f8 <__addsf3x+0x9c>
    20ca:	91 50       	subi	r25, 0x01	; 1
    20cc:	a1 f0       	breq	.+40     	; 0x20f6 <__addsf3x+0x9a>
    20ce:	ff 0f       	add	r31, r31
    20d0:	bb 1f       	adc	r27, r27
    20d2:	66 1f       	adc	r22, r22
    20d4:	77 1f       	adc	r23, r23
    20d6:	88 1f       	adc	r24, r24
    20d8:	c2 f7       	brpl	.-16     	; 0x20ca <__addsf3x+0x6e>
    20da:	0e c0       	rjmp	.+28     	; 0x20f8 <__addsf3x+0x9c>
    20dc:	ba 0f       	add	r27, r26
    20de:	62 1f       	adc	r22, r18
    20e0:	73 1f       	adc	r23, r19
    20e2:	84 1f       	adc	r24, r20
    20e4:	48 f4       	brcc	.+18     	; 0x20f8 <__addsf3x+0x9c>
    20e6:	87 95       	ror	r24
    20e8:	77 95       	ror	r23
    20ea:	67 95       	ror	r22
    20ec:	b7 95       	ror	r27
    20ee:	f7 95       	ror	r31
    20f0:	9e 3f       	cpi	r25, 0xFE	; 254
    20f2:	08 f0       	brcs	.+2      	; 0x20f6 <__addsf3x+0x9a>
    20f4:	b0 cf       	rjmp	.-160    	; 0x2056 <__addsf3+0x28>
    20f6:	93 95       	inc	r25
    20f8:	88 0f       	add	r24, r24
    20fa:	08 f0       	brcs	.+2      	; 0x20fe <__addsf3x+0xa2>
    20fc:	99 27       	eor	r25, r25
    20fe:	ee 0f       	add	r30, r30
    2100:	97 95       	ror	r25
    2102:	87 95       	ror	r24
    2104:	08 95       	ret

00002106 <__cmpsf2>:
    2106:	0e 94 66 11 	call	0x22cc	; 0x22cc <__fp_cmp>
    210a:	08 f4       	brcc	.+2      	; 0x210e <__cmpsf2+0x8>
    210c:	81 e0       	ldi	r24, 0x01	; 1
    210e:	08 95       	ret

00002110 <__divsf3>:
    2110:	0e 94 9c 10 	call	0x2138	; 0x2138 <__divsf3x>
    2114:	0c 94 a1 11 	jmp	0x2342	; 0x2342 <__fp_round>
    2118:	0e 94 9a 11 	call	0x2334	; 0x2334 <__fp_pscB>
    211c:	58 f0       	brcs	.+22     	; 0x2134 <__divsf3+0x24>
    211e:	0e 94 93 11 	call	0x2326	; 0x2326 <__fp_pscA>
    2122:	40 f0       	brcs	.+16     	; 0x2134 <__divsf3+0x24>
    2124:	29 f4       	brne	.+10     	; 0x2130 <__divsf3+0x20>
    2126:	5f 3f       	cpi	r21, 0xFF	; 255
    2128:	29 f0       	breq	.+10     	; 0x2134 <__divsf3+0x24>
    212a:	0c 94 8a 11 	jmp	0x2314	; 0x2314 <__fp_inf>
    212e:	51 11       	cpse	r21, r1
    2130:	0c 94 d5 11 	jmp	0x23aa	; 0x23aa <__fp_szero>
    2134:	0c 94 90 11 	jmp	0x2320	; 0x2320 <__fp_nan>

00002138 <__divsf3x>:
    2138:	0e 94 b2 11 	call	0x2364	; 0x2364 <__fp_split3>
    213c:	68 f3       	brcs	.-38     	; 0x2118 <__divsf3+0x8>

0000213e <__divsf3_pse>:
    213e:	99 23       	and	r25, r25
    2140:	b1 f3       	breq	.-20     	; 0x212e <__divsf3+0x1e>
    2142:	55 23       	and	r21, r21
    2144:	91 f3       	breq	.-28     	; 0x212a <__divsf3+0x1a>
    2146:	95 1b       	sub	r25, r21
    2148:	55 0b       	sbc	r21, r21
    214a:	bb 27       	eor	r27, r27
    214c:	aa 27       	eor	r26, r26
    214e:	62 17       	cp	r22, r18
    2150:	73 07       	cpc	r23, r19
    2152:	84 07       	cpc	r24, r20
    2154:	38 f0       	brcs	.+14     	; 0x2164 <__divsf3_pse+0x26>
    2156:	9f 5f       	subi	r25, 0xFF	; 255
    2158:	5f 4f       	sbci	r21, 0xFF	; 255
    215a:	22 0f       	add	r18, r18
    215c:	33 1f       	adc	r19, r19
    215e:	44 1f       	adc	r20, r20
    2160:	aa 1f       	adc	r26, r26
    2162:	a9 f3       	breq	.-22     	; 0x214e <__divsf3_pse+0x10>
    2164:	35 d0       	rcall	.+106    	; 0x21d0 <__divsf3_pse+0x92>
    2166:	0e 2e       	mov	r0, r30
    2168:	3a f0       	brmi	.+14     	; 0x2178 <__divsf3_pse+0x3a>
    216a:	e0 e8       	ldi	r30, 0x80	; 128
    216c:	32 d0       	rcall	.+100    	; 0x21d2 <__divsf3_pse+0x94>
    216e:	91 50       	subi	r25, 0x01	; 1
    2170:	50 40       	sbci	r21, 0x00	; 0
    2172:	e6 95       	lsr	r30
    2174:	00 1c       	adc	r0, r0
    2176:	ca f7       	brpl	.-14     	; 0x216a <__divsf3_pse+0x2c>
    2178:	2b d0       	rcall	.+86     	; 0x21d0 <__divsf3_pse+0x92>
    217a:	fe 2f       	mov	r31, r30
    217c:	29 d0       	rcall	.+82     	; 0x21d0 <__divsf3_pse+0x92>
    217e:	66 0f       	add	r22, r22
    2180:	77 1f       	adc	r23, r23
    2182:	88 1f       	adc	r24, r24
    2184:	bb 1f       	adc	r27, r27
    2186:	26 17       	cp	r18, r22
    2188:	37 07       	cpc	r19, r23
    218a:	48 07       	cpc	r20, r24
    218c:	ab 07       	cpc	r26, r27
    218e:	b0 e8       	ldi	r27, 0x80	; 128
    2190:	09 f0       	breq	.+2      	; 0x2194 <__divsf3_pse+0x56>
    2192:	bb 0b       	sbc	r27, r27
    2194:	80 2d       	mov	r24, r0
    2196:	bf 01       	movw	r22, r30
    2198:	ff 27       	eor	r31, r31
    219a:	93 58       	subi	r25, 0x83	; 131
    219c:	5f 4f       	sbci	r21, 0xFF	; 255
    219e:	3a f0       	brmi	.+14     	; 0x21ae <__divsf3_pse+0x70>
    21a0:	9e 3f       	cpi	r25, 0xFE	; 254
    21a2:	51 05       	cpc	r21, r1
    21a4:	78 f0       	brcs	.+30     	; 0x21c4 <__divsf3_pse+0x86>
    21a6:	0c 94 8a 11 	jmp	0x2314	; 0x2314 <__fp_inf>
    21aa:	0c 94 d5 11 	jmp	0x23aa	; 0x23aa <__fp_szero>
    21ae:	5f 3f       	cpi	r21, 0xFF	; 255
    21b0:	e4 f3       	brlt	.-8      	; 0x21aa <__divsf3_pse+0x6c>
    21b2:	98 3e       	cpi	r25, 0xE8	; 232
    21b4:	d4 f3       	brlt	.-12     	; 0x21aa <__divsf3_pse+0x6c>
    21b6:	86 95       	lsr	r24
    21b8:	77 95       	ror	r23
    21ba:	67 95       	ror	r22
    21bc:	b7 95       	ror	r27
    21be:	f7 95       	ror	r31
    21c0:	9f 5f       	subi	r25, 0xFF	; 255
    21c2:	c9 f7       	brne	.-14     	; 0x21b6 <__divsf3_pse+0x78>
    21c4:	88 0f       	add	r24, r24
    21c6:	91 1d       	adc	r25, r1
    21c8:	96 95       	lsr	r25
    21ca:	87 95       	ror	r24
    21cc:	97 f9       	bld	r25, 7
    21ce:	08 95       	ret
    21d0:	e1 e0       	ldi	r30, 0x01	; 1
    21d2:	66 0f       	add	r22, r22
    21d4:	77 1f       	adc	r23, r23
    21d6:	88 1f       	adc	r24, r24
    21d8:	bb 1f       	adc	r27, r27
    21da:	62 17       	cp	r22, r18
    21dc:	73 07       	cpc	r23, r19
    21de:	84 07       	cpc	r24, r20
    21e0:	ba 07       	cpc	r27, r26
    21e2:	20 f0       	brcs	.+8      	; 0x21ec <__divsf3_pse+0xae>
    21e4:	62 1b       	sub	r22, r18
    21e6:	73 0b       	sbc	r23, r19
    21e8:	84 0b       	sbc	r24, r20
    21ea:	ba 0b       	sbc	r27, r26
    21ec:	ee 1f       	adc	r30, r30
    21ee:	88 f7       	brcc	.-30     	; 0x21d2 <__divsf3_pse+0x94>
    21f0:	e0 95       	com	r30
    21f2:	08 95       	ret

000021f4 <__fixunssfsi>:
    21f4:	0e 94 ba 11 	call	0x2374	; 0x2374 <__fp_splitA>
    21f8:	88 f0       	brcs	.+34     	; 0x221c <__fixunssfsi+0x28>
    21fa:	9f 57       	subi	r25, 0x7F	; 127
    21fc:	98 f0       	brcs	.+38     	; 0x2224 <__fixunssfsi+0x30>
    21fe:	b9 2f       	mov	r27, r25
    2200:	99 27       	eor	r25, r25
    2202:	b7 51       	subi	r27, 0x17	; 23
    2204:	b0 f0       	brcs	.+44     	; 0x2232 <__fixunssfsi+0x3e>
    2206:	e1 f0       	breq	.+56     	; 0x2240 <__fixunssfsi+0x4c>
    2208:	66 0f       	add	r22, r22
    220a:	77 1f       	adc	r23, r23
    220c:	88 1f       	adc	r24, r24
    220e:	99 1f       	adc	r25, r25
    2210:	1a f0       	brmi	.+6      	; 0x2218 <__fixunssfsi+0x24>
    2212:	ba 95       	dec	r27
    2214:	c9 f7       	brne	.-14     	; 0x2208 <__fixunssfsi+0x14>
    2216:	14 c0       	rjmp	.+40     	; 0x2240 <__fixunssfsi+0x4c>
    2218:	b1 30       	cpi	r27, 0x01	; 1
    221a:	91 f0       	breq	.+36     	; 0x2240 <__fixunssfsi+0x4c>
    221c:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <__fp_zero>
    2220:	b1 e0       	ldi	r27, 0x01	; 1
    2222:	08 95       	ret
    2224:	0c 94 d4 11 	jmp	0x23a8	; 0x23a8 <__fp_zero>
    2228:	67 2f       	mov	r22, r23
    222a:	78 2f       	mov	r23, r24
    222c:	88 27       	eor	r24, r24
    222e:	b8 5f       	subi	r27, 0xF8	; 248
    2230:	39 f0       	breq	.+14     	; 0x2240 <__fixunssfsi+0x4c>
    2232:	b9 3f       	cpi	r27, 0xF9	; 249
    2234:	cc f3       	brlt	.-14     	; 0x2228 <__fixunssfsi+0x34>
    2236:	86 95       	lsr	r24
    2238:	77 95       	ror	r23
    223a:	67 95       	ror	r22
    223c:	b3 95       	inc	r27
    223e:	d9 f7       	brne	.-10     	; 0x2236 <__fixunssfsi+0x42>
    2240:	3e f4       	brtc	.+14     	; 0x2250 <__fixunssfsi+0x5c>
    2242:	90 95       	com	r25
    2244:	80 95       	com	r24
    2246:	70 95       	com	r23
    2248:	61 95       	neg	r22
    224a:	7f 4f       	sbci	r23, 0xFF	; 255
    224c:	8f 4f       	sbci	r24, 0xFF	; 255
    224e:	9f 4f       	sbci	r25, 0xFF	; 255
    2250:	08 95       	ret

00002252 <__floatunsisf>:
    2252:	e8 94       	clt
    2254:	09 c0       	rjmp	.+18     	; 0x2268 <__floatsisf+0x12>

00002256 <__floatsisf>:
    2256:	97 fb       	bst	r25, 7
    2258:	3e f4       	brtc	.+14     	; 0x2268 <__floatsisf+0x12>
    225a:	90 95       	com	r25
    225c:	80 95       	com	r24
    225e:	70 95       	com	r23
    2260:	61 95       	neg	r22
    2262:	7f 4f       	sbci	r23, 0xFF	; 255
    2264:	8f 4f       	sbci	r24, 0xFF	; 255
    2266:	9f 4f       	sbci	r25, 0xFF	; 255
    2268:	99 23       	and	r25, r25
    226a:	a9 f0       	breq	.+42     	; 0x2296 <__floatsisf+0x40>
    226c:	f9 2f       	mov	r31, r25
    226e:	96 e9       	ldi	r25, 0x96	; 150
    2270:	bb 27       	eor	r27, r27
    2272:	93 95       	inc	r25
    2274:	f6 95       	lsr	r31
    2276:	87 95       	ror	r24
    2278:	77 95       	ror	r23
    227a:	67 95       	ror	r22
    227c:	b7 95       	ror	r27
    227e:	f1 11       	cpse	r31, r1
    2280:	f8 cf       	rjmp	.-16     	; 0x2272 <__floatsisf+0x1c>
    2282:	fa f4       	brpl	.+62     	; 0x22c2 <__floatsisf+0x6c>
    2284:	bb 0f       	add	r27, r27
    2286:	11 f4       	brne	.+4      	; 0x228c <__floatsisf+0x36>
    2288:	60 ff       	sbrs	r22, 0
    228a:	1b c0       	rjmp	.+54     	; 0x22c2 <__floatsisf+0x6c>
    228c:	6f 5f       	subi	r22, 0xFF	; 255
    228e:	7f 4f       	sbci	r23, 0xFF	; 255
    2290:	8f 4f       	sbci	r24, 0xFF	; 255
    2292:	9f 4f       	sbci	r25, 0xFF	; 255
    2294:	16 c0       	rjmp	.+44     	; 0x22c2 <__floatsisf+0x6c>
    2296:	88 23       	and	r24, r24
    2298:	11 f0       	breq	.+4      	; 0x229e <__floatsisf+0x48>
    229a:	96 e9       	ldi	r25, 0x96	; 150
    229c:	11 c0       	rjmp	.+34     	; 0x22c0 <__floatsisf+0x6a>
    229e:	77 23       	and	r23, r23
    22a0:	21 f0       	breq	.+8      	; 0x22aa <__floatsisf+0x54>
    22a2:	9e e8       	ldi	r25, 0x8E	; 142
    22a4:	87 2f       	mov	r24, r23
    22a6:	76 2f       	mov	r23, r22
    22a8:	05 c0       	rjmp	.+10     	; 0x22b4 <__floatsisf+0x5e>
    22aa:	66 23       	and	r22, r22
    22ac:	71 f0       	breq	.+28     	; 0x22ca <__floatsisf+0x74>
    22ae:	96 e8       	ldi	r25, 0x86	; 134
    22b0:	86 2f       	mov	r24, r22
    22b2:	70 e0       	ldi	r23, 0x00	; 0
    22b4:	60 e0       	ldi	r22, 0x00	; 0
    22b6:	2a f0       	brmi	.+10     	; 0x22c2 <__floatsisf+0x6c>
    22b8:	9a 95       	dec	r25
    22ba:	66 0f       	add	r22, r22
    22bc:	77 1f       	adc	r23, r23
    22be:	88 1f       	adc	r24, r24
    22c0:	da f7       	brpl	.-10     	; 0x22b8 <__floatsisf+0x62>
    22c2:	88 0f       	add	r24, r24
    22c4:	96 95       	lsr	r25
    22c6:	87 95       	ror	r24
    22c8:	97 f9       	bld	r25, 7
    22ca:	08 95       	ret

000022cc <__fp_cmp>:
    22cc:	99 0f       	add	r25, r25
    22ce:	00 08       	sbc	r0, r0
    22d0:	55 0f       	add	r21, r21
    22d2:	aa 0b       	sbc	r26, r26
    22d4:	e0 e8       	ldi	r30, 0x80	; 128
    22d6:	fe ef       	ldi	r31, 0xFE	; 254
    22d8:	16 16       	cp	r1, r22
    22da:	17 06       	cpc	r1, r23
    22dc:	e8 07       	cpc	r30, r24
    22de:	f9 07       	cpc	r31, r25
    22e0:	c0 f0       	brcs	.+48     	; 0x2312 <__fp_cmp+0x46>
    22e2:	12 16       	cp	r1, r18
    22e4:	13 06       	cpc	r1, r19
    22e6:	e4 07       	cpc	r30, r20
    22e8:	f5 07       	cpc	r31, r21
    22ea:	98 f0       	brcs	.+38     	; 0x2312 <__fp_cmp+0x46>
    22ec:	62 1b       	sub	r22, r18
    22ee:	73 0b       	sbc	r23, r19
    22f0:	84 0b       	sbc	r24, r20
    22f2:	95 0b       	sbc	r25, r21
    22f4:	39 f4       	brne	.+14     	; 0x2304 <__fp_cmp+0x38>
    22f6:	0a 26       	eor	r0, r26
    22f8:	61 f0       	breq	.+24     	; 0x2312 <__fp_cmp+0x46>
    22fa:	23 2b       	or	r18, r19
    22fc:	24 2b       	or	r18, r20
    22fe:	25 2b       	or	r18, r21
    2300:	21 f4       	brne	.+8      	; 0x230a <__fp_cmp+0x3e>
    2302:	08 95       	ret
    2304:	0a 26       	eor	r0, r26
    2306:	09 f4       	brne	.+2      	; 0x230a <__fp_cmp+0x3e>
    2308:	a1 40       	sbci	r26, 0x01	; 1
    230a:	a6 95       	lsr	r26
    230c:	8f ef       	ldi	r24, 0xFF	; 255
    230e:	81 1d       	adc	r24, r1
    2310:	81 1d       	adc	r24, r1
    2312:	08 95       	ret

00002314 <__fp_inf>:
    2314:	97 f9       	bld	r25, 7
    2316:	9f 67       	ori	r25, 0x7F	; 127
    2318:	80 e8       	ldi	r24, 0x80	; 128
    231a:	70 e0       	ldi	r23, 0x00	; 0
    231c:	60 e0       	ldi	r22, 0x00	; 0
    231e:	08 95       	ret

00002320 <__fp_nan>:
    2320:	9f ef       	ldi	r25, 0xFF	; 255
    2322:	80 ec       	ldi	r24, 0xC0	; 192
    2324:	08 95       	ret

00002326 <__fp_pscA>:
    2326:	00 24       	eor	r0, r0
    2328:	0a 94       	dec	r0
    232a:	16 16       	cp	r1, r22
    232c:	17 06       	cpc	r1, r23
    232e:	18 06       	cpc	r1, r24
    2330:	09 06       	cpc	r0, r25
    2332:	08 95       	ret

00002334 <__fp_pscB>:
    2334:	00 24       	eor	r0, r0
    2336:	0a 94       	dec	r0
    2338:	12 16       	cp	r1, r18
    233a:	13 06       	cpc	r1, r19
    233c:	14 06       	cpc	r1, r20
    233e:	05 06       	cpc	r0, r21
    2340:	08 95       	ret

00002342 <__fp_round>:
    2342:	09 2e       	mov	r0, r25
    2344:	03 94       	inc	r0
    2346:	00 0c       	add	r0, r0
    2348:	11 f4       	brne	.+4      	; 0x234e <__fp_round+0xc>
    234a:	88 23       	and	r24, r24
    234c:	52 f0       	brmi	.+20     	; 0x2362 <__fp_round+0x20>
    234e:	bb 0f       	add	r27, r27
    2350:	40 f4       	brcc	.+16     	; 0x2362 <__fp_round+0x20>
    2352:	bf 2b       	or	r27, r31
    2354:	11 f4       	brne	.+4      	; 0x235a <__fp_round+0x18>
    2356:	60 ff       	sbrs	r22, 0
    2358:	04 c0       	rjmp	.+8      	; 0x2362 <__fp_round+0x20>
    235a:	6f 5f       	subi	r22, 0xFF	; 255
    235c:	7f 4f       	sbci	r23, 0xFF	; 255
    235e:	8f 4f       	sbci	r24, 0xFF	; 255
    2360:	9f 4f       	sbci	r25, 0xFF	; 255
    2362:	08 95       	ret

00002364 <__fp_split3>:
    2364:	57 fd       	sbrc	r21, 7
    2366:	90 58       	subi	r25, 0x80	; 128
    2368:	44 0f       	add	r20, r20
    236a:	55 1f       	adc	r21, r21
    236c:	59 f0       	breq	.+22     	; 0x2384 <__fp_splitA+0x10>
    236e:	5f 3f       	cpi	r21, 0xFF	; 255
    2370:	71 f0       	breq	.+28     	; 0x238e <__fp_splitA+0x1a>
    2372:	47 95       	ror	r20

00002374 <__fp_splitA>:
    2374:	88 0f       	add	r24, r24
    2376:	97 fb       	bst	r25, 7
    2378:	99 1f       	adc	r25, r25
    237a:	61 f0       	breq	.+24     	; 0x2394 <__fp_splitA+0x20>
    237c:	9f 3f       	cpi	r25, 0xFF	; 255
    237e:	79 f0       	breq	.+30     	; 0x239e <__fp_splitA+0x2a>
    2380:	87 95       	ror	r24
    2382:	08 95       	ret
    2384:	12 16       	cp	r1, r18
    2386:	13 06       	cpc	r1, r19
    2388:	14 06       	cpc	r1, r20
    238a:	55 1f       	adc	r21, r21
    238c:	f2 cf       	rjmp	.-28     	; 0x2372 <__fp_split3+0xe>
    238e:	46 95       	lsr	r20
    2390:	f1 df       	rcall	.-30     	; 0x2374 <__fp_splitA>
    2392:	08 c0       	rjmp	.+16     	; 0x23a4 <__fp_splitA+0x30>
    2394:	16 16       	cp	r1, r22
    2396:	17 06       	cpc	r1, r23
    2398:	18 06       	cpc	r1, r24
    239a:	99 1f       	adc	r25, r25
    239c:	f1 cf       	rjmp	.-30     	; 0x2380 <__fp_splitA+0xc>
    239e:	86 95       	lsr	r24
    23a0:	71 05       	cpc	r23, r1
    23a2:	61 05       	cpc	r22, r1
    23a4:	08 94       	sec
    23a6:	08 95       	ret

000023a8 <__fp_zero>:
    23a8:	e8 94       	clt

000023aa <__fp_szero>:
    23aa:	bb 27       	eor	r27, r27
    23ac:	66 27       	eor	r22, r22
    23ae:	77 27       	eor	r23, r23
    23b0:	cb 01       	movw	r24, r22
    23b2:	97 f9       	bld	r25, 7
    23b4:	08 95       	ret

000023b6 <__mulsf3>:
    23b6:	0e 94 ee 11 	call	0x23dc	; 0x23dc <__mulsf3x>
    23ba:	0c 94 a1 11 	jmp	0x2342	; 0x2342 <__fp_round>
    23be:	0e 94 93 11 	call	0x2326	; 0x2326 <__fp_pscA>
    23c2:	38 f0       	brcs	.+14     	; 0x23d2 <__mulsf3+0x1c>
    23c4:	0e 94 9a 11 	call	0x2334	; 0x2334 <__fp_pscB>
    23c8:	20 f0       	brcs	.+8      	; 0x23d2 <__mulsf3+0x1c>
    23ca:	95 23       	and	r25, r21
    23cc:	11 f0       	breq	.+4      	; 0x23d2 <__mulsf3+0x1c>
    23ce:	0c 94 8a 11 	jmp	0x2314	; 0x2314 <__fp_inf>
    23d2:	0c 94 90 11 	jmp	0x2320	; 0x2320 <__fp_nan>
    23d6:	11 24       	eor	r1, r1
    23d8:	0c 94 d5 11 	jmp	0x23aa	; 0x23aa <__fp_szero>

000023dc <__mulsf3x>:
    23dc:	0e 94 b2 11 	call	0x2364	; 0x2364 <__fp_split3>
    23e0:	70 f3       	brcs	.-36     	; 0x23be <__mulsf3+0x8>

000023e2 <__mulsf3_pse>:
    23e2:	95 9f       	mul	r25, r21
    23e4:	c1 f3       	breq	.-16     	; 0x23d6 <__mulsf3+0x20>
    23e6:	95 0f       	add	r25, r21
    23e8:	50 e0       	ldi	r21, 0x00	; 0
    23ea:	55 1f       	adc	r21, r21
    23ec:	62 9f       	mul	r22, r18
    23ee:	f0 01       	movw	r30, r0
    23f0:	72 9f       	mul	r23, r18
    23f2:	bb 27       	eor	r27, r27
    23f4:	f0 0d       	add	r31, r0
    23f6:	b1 1d       	adc	r27, r1
    23f8:	63 9f       	mul	r22, r19
    23fa:	aa 27       	eor	r26, r26
    23fc:	f0 0d       	add	r31, r0
    23fe:	b1 1d       	adc	r27, r1
    2400:	aa 1f       	adc	r26, r26
    2402:	64 9f       	mul	r22, r20
    2404:	66 27       	eor	r22, r22
    2406:	b0 0d       	add	r27, r0
    2408:	a1 1d       	adc	r26, r1
    240a:	66 1f       	adc	r22, r22
    240c:	82 9f       	mul	r24, r18
    240e:	22 27       	eor	r18, r18
    2410:	b0 0d       	add	r27, r0
    2412:	a1 1d       	adc	r26, r1
    2414:	62 1f       	adc	r22, r18
    2416:	73 9f       	mul	r23, r19
    2418:	b0 0d       	add	r27, r0
    241a:	a1 1d       	adc	r26, r1
    241c:	62 1f       	adc	r22, r18
    241e:	83 9f       	mul	r24, r19
    2420:	a0 0d       	add	r26, r0
    2422:	61 1d       	adc	r22, r1
    2424:	22 1f       	adc	r18, r18
    2426:	74 9f       	mul	r23, r20
    2428:	33 27       	eor	r19, r19
    242a:	a0 0d       	add	r26, r0
    242c:	61 1d       	adc	r22, r1
    242e:	23 1f       	adc	r18, r19
    2430:	84 9f       	mul	r24, r20
    2432:	60 0d       	add	r22, r0
    2434:	21 1d       	adc	r18, r1
    2436:	82 2f       	mov	r24, r18
    2438:	76 2f       	mov	r23, r22
    243a:	6a 2f       	mov	r22, r26
    243c:	11 24       	eor	r1, r1
    243e:	9f 57       	subi	r25, 0x7F	; 127
    2440:	50 40       	sbci	r21, 0x00	; 0
    2442:	9a f0       	brmi	.+38     	; 0x246a <__mulsf3_pse+0x88>
    2444:	f1 f0       	breq	.+60     	; 0x2482 <__mulsf3_pse+0xa0>
    2446:	88 23       	and	r24, r24
    2448:	4a f0       	brmi	.+18     	; 0x245c <__mulsf3_pse+0x7a>
    244a:	ee 0f       	add	r30, r30
    244c:	ff 1f       	adc	r31, r31
    244e:	bb 1f       	adc	r27, r27
    2450:	66 1f       	adc	r22, r22
    2452:	77 1f       	adc	r23, r23
    2454:	88 1f       	adc	r24, r24
    2456:	91 50       	subi	r25, 0x01	; 1
    2458:	50 40       	sbci	r21, 0x00	; 0
    245a:	a9 f7       	brne	.-22     	; 0x2446 <__mulsf3_pse+0x64>
    245c:	9e 3f       	cpi	r25, 0xFE	; 254
    245e:	51 05       	cpc	r21, r1
    2460:	80 f0       	brcs	.+32     	; 0x2482 <__mulsf3_pse+0xa0>
    2462:	0c 94 8a 11 	jmp	0x2314	; 0x2314 <__fp_inf>
    2466:	0c 94 d5 11 	jmp	0x23aa	; 0x23aa <__fp_szero>
    246a:	5f 3f       	cpi	r21, 0xFF	; 255
    246c:	e4 f3       	brlt	.-8      	; 0x2466 <__mulsf3_pse+0x84>
    246e:	98 3e       	cpi	r25, 0xE8	; 232
    2470:	d4 f3       	brlt	.-12     	; 0x2466 <__mulsf3_pse+0x84>
    2472:	86 95       	lsr	r24
    2474:	77 95       	ror	r23
    2476:	67 95       	ror	r22
    2478:	b7 95       	ror	r27
    247a:	f7 95       	ror	r31
    247c:	e7 95       	ror	r30
    247e:	9f 5f       	subi	r25, 0xFF	; 255
    2480:	c1 f7       	brne	.-16     	; 0x2472 <__mulsf3_pse+0x90>
    2482:	fe 2b       	or	r31, r30
    2484:	88 0f       	add	r24, r24
    2486:	91 1d       	adc	r25, r1
    2488:	96 95       	lsr	r25
    248a:	87 95       	ror	r24
    248c:	97 f9       	bld	r25, 7
    248e:	08 95       	ret

00002490 <round>:
    2490:	0e 94 ba 11 	call	0x2374	; 0x2374 <__fp_splitA>
    2494:	e8 f0       	brcs	.+58     	; 0x24d0 <round+0x40>
    2496:	9e 37       	cpi	r25, 0x7E	; 126
    2498:	e8 f0       	brcs	.+58     	; 0x24d4 <round+0x44>
    249a:	96 39       	cpi	r25, 0x96	; 150
    249c:	b8 f4       	brcc	.+46     	; 0x24cc <round+0x3c>
    249e:	9e 38       	cpi	r25, 0x8E	; 142
    24a0:	48 f4       	brcc	.+18     	; 0x24b4 <round+0x24>
    24a2:	67 2f       	mov	r22, r23
    24a4:	78 2f       	mov	r23, r24
    24a6:	88 27       	eor	r24, r24
    24a8:	98 5f       	subi	r25, 0xF8	; 248
    24aa:	f9 cf       	rjmp	.-14     	; 0x249e <round+0xe>
    24ac:	86 95       	lsr	r24
    24ae:	77 95       	ror	r23
    24b0:	67 95       	ror	r22
    24b2:	93 95       	inc	r25
    24b4:	95 39       	cpi	r25, 0x95	; 149
    24b6:	d0 f3       	brcs	.-12     	; 0x24ac <round+0x1c>
    24b8:	b6 2f       	mov	r27, r22
    24ba:	b1 70       	andi	r27, 0x01	; 1
    24bc:	6b 0f       	add	r22, r27
    24be:	71 1d       	adc	r23, r1
    24c0:	81 1d       	adc	r24, r1
    24c2:	20 f4       	brcc	.+8      	; 0x24cc <round+0x3c>
    24c4:	87 95       	ror	r24
    24c6:	77 95       	ror	r23
    24c8:	67 95       	ror	r22
    24ca:	93 95       	inc	r25
    24cc:	0c 94 6c 12 	jmp	0x24d8	; 0x24d8 <__fp_mintl>
    24d0:	0c 94 87 12 	jmp	0x250e	; 0x250e <__fp_mpack>
    24d4:	0c 94 d5 11 	jmp	0x23aa	; 0x23aa <__fp_szero>

000024d8 <__fp_mintl>:
    24d8:	88 23       	and	r24, r24
    24da:	71 f4       	brne	.+28     	; 0x24f8 <__fp_mintl+0x20>
    24dc:	77 23       	and	r23, r23
    24de:	21 f0       	breq	.+8      	; 0x24e8 <__fp_mintl+0x10>
    24e0:	98 50       	subi	r25, 0x08	; 8
    24e2:	87 2b       	or	r24, r23
    24e4:	76 2f       	mov	r23, r22
    24e6:	07 c0       	rjmp	.+14     	; 0x24f6 <__fp_mintl+0x1e>
    24e8:	66 23       	and	r22, r22
    24ea:	11 f4       	brne	.+4      	; 0x24f0 <__fp_mintl+0x18>
    24ec:	99 27       	eor	r25, r25
    24ee:	0d c0       	rjmp	.+26     	; 0x250a <__fp_mintl+0x32>
    24f0:	90 51       	subi	r25, 0x10	; 16
    24f2:	86 2b       	or	r24, r22
    24f4:	70 e0       	ldi	r23, 0x00	; 0
    24f6:	60 e0       	ldi	r22, 0x00	; 0
    24f8:	2a f0       	brmi	.+10     	; 0x2504 <__fp_mintl+0x2c>
    24fa:	9a 95       	dec	r25
    24fc:	66 0f       	add	r22, r22
    24fe:	77 1f       	adc	r23, r23
    2500:	88 1f       	adc	r24, r24
    2502:	da f7       	brpl	.-10     	; 0x24fa <__fp_mintl+0x22>
    2504:	88 0f       	add	r24, r24
    2506:	96 95       	lsr	r25
    2508:	87 95       	ror	r24
    250a:	97 f9       	bld	r25, 7
    250c:	08 95       	ret

0000250e <__fp_mpack>:
    250e:	9f 3f       	cpi	r25, 0xFF	; 255
    2510:	31 f0       	breq	.+12     	; 0x251e <__fp_mpack_finite+0xc>

00002512 <__fp_mpack_finite>:
    2512:	91 50       	subi	r25, 0x01	; 1
    2514:	20 f4       	brcc	.+8      	; 0x251e <__fp_mpack_finite+0xc>
    2516:	87 95       	ror	r24
    2518:	77 95       	ror	r23
    251a:	67 95       	ror	r22
    251c:	b7 95       	ror	r27
    251e:	88 0f       	add	r24, r24
    2520:	91 1d       	adc	r25, r1
    2522:	96 95       	lsr	r25
    2524:	87 95       	ror	r24
    2526:	97 f9       	bld	r25, 7
    2528:	08 95       	ret

0000252a <__udivmodhi4>:
    252a:	aa 1b       	sub	r26, r26
    252c:	bb 1b       	sub	r27, r27
    252e:	51 e1       	ldi	r21, 0x11	; 17
    2530:	07 c0       	rjmp	.+14     	; 0x2540 <__udivmodhi4_ep>

00002532 <__udivmodhi4_loop>:
    2532:	aa 1f       	adc	r26, r26
    2534:	bb 1f       	adc	r27, r27
    2536:	a6 17       	cp	r26, r22
    2538:	b7 07       	cpc	r27, r23
    253a:	10 f0       	brcs	.+4      	; 0x2540 <__udivmodhi4_ep>
    253c:	a6 1b       	sub	r26, r22
    253e:	b7 0b       	sbc	r27, r23

00002540 <__udivmodhi4_ep>:
    2540:	88 1f       	adc	r24, r24
    2542:	99 1f       	adc	r25, r25
    2544:	5a 95       	dec	r21
    2546:	a9 f7       	brne	.-22     	; 0x2532 <__udivmodhi4_loop>
    2548:	80 95       	com	r24
    254a:	90 95       	com	r25
    254c:	bc 01       	movw	r22, r24
    254e:	cd 01       	movw	r24, r26
    2550:	08 95       	ret

00002552 <__tablejump2__>:
    2552:	ee 0f       	add	r30, r30
    2554:	ff 1f       	adc	r31, r31
    2556:	05 90       	lpm	r0, Z+
    2558:	f4 91       	lpm	r31, Z
    255a:	e0 2d       	mov	r30, r0
    255c:	09 94       	ijmp

0000255e <atoi>:
    255e:	fc 01       	movw	r30, r24
    2560:	88 27       	eor	r24, r24
    2562:	99 27       	eor	r25, r25
    2564:	e8 94       	clt
    2566:	21 91       	ld	r18, Z+
    2568:	20 32       	cpi	r18, 0x20	; 32
    256a:	e9 f3       	breq	.-6      	; 0x2566 <atoi+0x8>
    256c:	29 30       	cpi	r18, 0x09	; 9
    256e:	10 f0       	brcs	.+4      	; 0x2574 <atoi+0x16>
    2570:	2e 30       	cpi	r18, 0x0E	; 14
    2572:	c8 f3       	brcs	.-14     	; 0x2566 <atoi+0x8>
    2574:	2b 32       	cpi	r18, 0x2B	; 43
    2576:	41 f0       	breq	.+16     	; 0x2588 <atoi+0x2a>
    2578:	2d 32       	cpi	r18, 0x2D	; 45
    257a:	39 f4       	brne	.+14     	; 0x258a <atoi+0x2c>
    257c:	68 94       	set
    257e:	04 c0       	rjmp	.+8      	; 0x2588 <atoi+0x2a>
    2580:	0e 94 e7 12 	call	0x25ce	; 0x25ce <__mulhi_const_10>
    2584:	82 0f       	add	r24, r18
    2586:	91 1d       	adc	r25, r1
    2588:	21 91       	ld	r18, Z+
    258a:	20 53       	subi	r18, 0x30	; 48
    258c:	2a 30       	cpi	r18, 0x0A	; 10
    258e:	c0 f3       	brcs	.-16     	; 0x2580 <atoi+0x22>
    2590:	1e f4       	brtc	.+6      	; 0x2598 <atoi+0x3a>
    2592:	90 95       	com	r25
    2594:	81 95       	neg	r24
    2596:	9f 4f       	sbci	r25, 0xFF	; 255
    2598:	08 95       	ret

0000259a <strncpy>:
    259a:	fb 01       	movw	r30, r22
    259c:	dc 01       	movw	r26, r24
    259e:	41 50       	subi	r20, 0x01	; 1
    25a0:	50 40       	sbci	r21, 0x00	; 0
    25a2:	48 f0       	brcs	.+18     	; 0x25b6 <strncpy+0x1c>
    25a4:	01 90       	ld	r0, Z+
    25a6:	0d 92       	st	X+, r0
    25a8:	00 20       	and	r0, r0
    25aa:	c9 f7       	brne	.-14     	; 0x259e <strncpy+0x4>
    25ac:	01 c0       	rjmp	.+2      	; 0x25b0 <strncpy+0x16>
    25ae:	1d 92       	st	X+, r1
    25b0:	41 50       	subi	r20, 0x01	; 1
    25b2:	50 40       	sbci	r21, 0x00	; 0
    25b4:	e0 f7       	brcc	.-8      	; 0x25ae <strncpy+0x14>
    25b6:	08 95       	ret

000025b8 <__itoa_ncheck>:
    25b8:	bb 27       	eor	r27, r27
    25ba:	4a 30       	cpi	r20, 0x0A	; 10
    25bc:	31 f4       	brne	.+12     	; 0x25ca <__itoa_ncheck+0x12>
    25be:	99 23       	and	r25, r25
    25c0:	22 f4       	brpl	.+8      	; 0x25ca <__itoa_ncheck+0x12>
    25c2:	bd e2       	ldi	r27, 0x2D	; 45
    25c4:	90 95       	com	r25
    25c6:	81 95       	neg	r24
    25c8:	9f 4f       	sbci	r25, 0xFF	; 255
    25ca:	0c 94 f0 12 	jmp	0x25e0	; 0x25e0 <__utoa_common>

000025ce <__mulhi_const_10>:
    25ce:	7a e0       	ldi	r23, 0x0A	; 10
    25d0:	97 9f       	mul	r25, r23
    25d2:	90 2d       	mov	r25, r0
    25d4:	87 9f       	mul	r24, r23
    25d6:	80 2d       	mov	r24, r0
    25d8:	91 0d       	add	r25, r1
    25da:	11 24       	eor	r1, r1
    25dc:	08 95       	ret

000025de <__utoa_ncheck>:
    25de:	bb 27       	eor	r27, r27

000025e0 <__utoa_common>:
    25e0:	fb 01       	movw	r30, r22
    25e2:	55 27       	eor	r21, r21
    25e4:	aa 27       	eor	r26, r26
    25e6:	88 0f       	add	r24, r24
    25e8:	99 1f       	adc	r25, r25
    25ea:	aa 1f       	adc	r26, r26
    25ec:	a4 17       	cp	r26, r20
    25ee:	10 f0       	brcs	.+4      	; 0x25f4 <__utoa_common+0x14>
    25f0:	a4 1b       	sub	r26, r20
    25f2:	83 95       	inc	r24
    25f4:	50 51       	subi	r21, 0x10	; 16
    25f6:	b9 f7       	brne	.-18     	; 0x25e6 <__utoa_common+0x6>
    25f8:	a0 5d       	subi	r26, 0xD0	; 208
    25fa:	aa 33       	cpi	r26, 0x3A	; 58
    25fc:	08 f0       	brcs	.+2      	; 0x2600 <__utoa_common+0x20>
    25fe:	a9 5d       	subi	r26, 0xD9	; 217
    2600:	a1 93       	st	Z+, r26
    2602:	00 97       	sbiw	r24, 0x00	; 0
    2604:	79 f7       	brne	.-34     	; 0x25e4 <__utoa_common+0x4>
    2606:	b1 11       	cpse	r27, r1
    2608:	b1 93       	st	Z+, r27
    260a:	11 92       	st	Z+, r1
    260c:	cb 01       	movw	r24, r22
    260e:	0c 94 16 15 	jmp	0x2a2c	; 0x2a2c <strrev>

00002612 <printf>:
    2612:	a0 e0       	ldi	r26, 0x00	; 0
    2614:	b0 e0       	ldi	r27, 0x00	; 0
    2616:	ef e0       	ldi	r30, 0x0F	; 15
    2618:	f3 e1       	ldi	r31, 0x13	; 19
    261a:	0c 94 d0 15 	jmp	0x2ba0	; 0x2ba0 <__prologue_saves__+0x20>
    261e:	ae 01       	movw	r20, r28
    2620:	4b 5f       	subi	r20, 0xFB	; 251
    2622:	5f 4f       	sbci	r21, 0xFF	; 255
    2624:	fa 01       	movw	r30, r20
    2626:	61 91       	ld	r22, Z+
    2628:	71 91       	ld	r23, Z+
    262a:	af 01       	movw	r20, r30
    262c:	80 91 f0 07 	lds	r24, 0x07F0	; 0x8007f0 <__iob+0x2>
    2630:	90 91 f1 07 	lds	r25, 0x07F1	; 0x8007f1 <__iob+0x3>
    2634:	0e 94 1f 13 	call	0x263e	; 0x263e <vfprintf>
    2638:	e2 e0       	ldi	r30, 0x02	; 2
    263a:	0c 94 ec 15 	jmp	0x2bd8	; 0x2bd8 <__epilogue_restores__+0x20>

0000263e <vfprintf>:
    263e:	ab e0       	ldi	r26, 0x0B	; 11
    2640:	b0 e0       	ldi	r27, 0x00	; 0
    2642:	e5 e2       	ldi	r30, 0x25	; 37
    2644:	f3 e1       	ldi	r31, 0x13	; 19
    2646:	0c 94 c0 15 	jmp	0x2b80	; 0x2b80 <__prologue_saves__>
    264a:	6c 01       	movw	r12, r24
    264c:	7b 01       	movw	r14, r22
    264e:	8a 01       	movw	r16, r20
    2650:	fc 01       	movw	r30, r24
    2652:	17 82       	std	Z+7, r1	; 0x07
    2654:	16 82       	std	Z+6, r1	; 0x06
    2656:	83 81       	ldd	r24, Z+3	; 0x03
    2658:	81 ff       	sbrs	r24, 1
    265a:	cc c1       	rjmp	.+920    	; 0x29f4 <vfprintf+0x3b6>
    265c:	ce 01       	movw	r24, r28
    265e:	01 96       	adiw	r24, 0x01	; 1
    2660:	3c 01       	movw	r6, r24
    2662:	f6 01       	movw	r30, r12
    2664:	93 81       	ldd	r25, Z+3	; 0x03
    2666:	f7 01       	movw	r30, r14
    2668:	93 fd       	sbrc	r25, 3
    266a:	85 91       	lpm	r24, Z+
    266c:	93 ff       	sbrs	r25, 3
    266e:	81 91       	ld	r24, Z+
    2670:	7f 01       	movw	r14, r30
    2672:	88 23       	and	r24, r24
    2674:	09 f4       	brne	.+2      	; 0x2678 <vfprintf+0x3a>
    2676:	ba c1       	rjmp	.+884    	; 0x29ec <vfprintf+0x3ae>
    2678:	85 32       	cpi	r24, 0x25	; 37
    267a:	39 f4       	brne	.+14     	; 0x268a <vfprintf+0x4c>
    267c:	93 fd       	sbrc	r25, 3
    267e:	85 91       	lpm	r24, Z+
    2680:	93 ff       	sbrs	r25, 3
    2682:	81 91       	ld	r24, Z+
    2684:	7f 01       	movw	r14, r30
    2686:	85 32       	cpi	r24, 0x25	; 37
    2688:	29 f4       	brne	.+10     	; 0x2694 <vfprintf+0x56>
    268a:	b6 01       	movw	r22, r12
    268c:	90 e0       	ldi	r25, 0x00	; 0
    268e:	0e 94 26 15 	call	0x2a4c	; 0x2a4c <fputc>
    2692:	e7 cf       	rjmp	.-50     	; 0x2662 <vfprintf+0x24>
    2694:	91 2c       	mov	r9, r1
    2696:	21 2c       	mov	r2, r1
    2698:	31 2c       	mov	r3, r1
    269a:	ff e1       	ldi	r31, 0x1F	; 31
    269c:	f3 15       	cp	r31, r3
    269e:	d8 f0       	brcs	.+54     	; 0x26d6 <vfprintf+0x98>
    26a0:	8b 32       	cpi	r24, 0x2B	; 43
    26a2:	79 f0       	breq	.+30     	; 0x26c2 <vfprintf+0x84>
    26a4:	38 f4       	brcc	.+14     	; 0x26b4 <vfprintf+0x76>
    26a6:	80 32       	cpi	r24, 0x20	; 32
    26a8:	79 f0       	breq	.+30     	; 0x26c8 <vfprintf+0x8a>
    26aa:	83 32       	cpi	r24, 0x23	; 35
    26ac:	a1 f4       	brne	.+40     	; 0x26d6 <vfprintf+0x98>
    26ae:	23 2d       	mov	r18, r3
    26b0:	20 61       	ori	r18, 0x10	; 16
    26b2:	1d c0       	rjmp	.+58     	; 0x26ee <vfprintf+0xb0>
    26b4:	8d 32       	cpi	r24, 0x2D	; 45
    26b6:	61 f0       	breq	.+24     	; 0x26d0 <vfprintf+0x92>
    26b8:	80 33       	cpi	r24, 0x30	; 48
    26ba:	69 f4       	brne	.+26     	; 0x26d6 <vfprintf+0x98>
    26bc:	23 2d       	mov	r18, r3
    26be:	21 60       	ori	r18, 0x01	; 1
    26c0:	16 c0       	rjmp	.+44     	; 0x26ee <vfprintf+0xb0>
    26c2:	83 2d       	mov	r24, r3
    26c4:	82 60       	ori	r24, 0x02	; 2
    26c6:	38 2e       	mov	r3, r24
    26c8:	e3 2d       	mov	r30, r3
    26ca:	e4 60       	ori	r30, 0x04	; 4
    26cc:	3e 2e       	mov	r3, r30
    26ce:	2a c0       	rjmp	.+84     	; 0x2724 <vfprintf+0xe6>
    26d0:	f3 2d       	mov	r31, r3
    26d2:	f8 60       	ori	r31, 0x08	; 8
    26d4:	1d c0       	rjmp	.+58     	; 0x2710 <vfprintf+0xd2>
    26d6:	37 fc       	sbrc	r3, 7
    26d8:	2d c0       	rjmp	.+90     	; 0x2734 <vfprintf+0xf6>
    26da:	20 ed       	ldi	r18, 0xD0	; 208
    26dc:	28 0f       	add	r18, r24
    26de:	2a 30       	cpi	r18, 0x0A	; 10
    26e0:	40 f0       	brcs	.+16     	; 0x26f2 <vfprintf+0xb4>
    26e2:	8e 32       	cpi	r24, 0x2E	; 46
    26e4:	b9 f4       	brne	.+46     	; 0x2714 <vfprintf+0xd6>
    26e6:	36 fc       	sbrc	r3, 6
    26e8:	81 c1       	rjmp	.+770    	; 0x29ec <vfprintf+0x3ae>
    26ea:	23 2d       	mov	r18, r3
    26ec:	20 64       	ori	r18, 0x40	; 64
    26ee:	32 2e       	mov	r3, r18
    26f0:	19 c0       	rjmp	.+50     	; 0x2724 <vfprintf+0xe6>
    26f2:	36 fe       	sbrs	r3, 6
    26f4:	06 c0       	rjmp	.+12     	; 0x2702 <vfprintf+0xc4>
    26f6:	8a e0       	ldi	r24, 0x0A	; 10
    26f8:	98 9e       	mul	r9, r24
    26fa:	20 0d       	add	r18, r0
    26fc:	11 24       	eor	r1, r1
    26fe:	92 2e       	mov	r9, r18
    2700:	11 c0       	rjmp	.+34     	; 0x2724 <vfprintf+0xe6>
    2702:	ea e0       	ldi	r30, 0x0A	; 10
    2704:	2e 9e       	mul	r2, r30
    2706:	20 0d       	add	r18, r0
    2708:	11 24       	eor	r1, r1
    270a:	22 2e       	mov	r2, r18
    270c:	f3 2d       	mov	r31, r3
    270e:	f0 62       	ori	r31, 0x20	; 32
    2710:	3f 2e       	mov	r3, r31
    2712:	08 c0       	rjmp	.+16     	; 0x2724 <vfprintf+0xe6>
    2714:	8c 36       	cpi	r24, 0x6C	; 108
    2716:	21 f4       	brne	.+8      	; 0x2720 <vfprintf+0xe2>
    2718:	83 2d       	mov	r24, r3
    271a:	80 68       	ori	r24, 0x80	; 128
    271c:	38 2e       	mov	r3, r24
    271e:	02 c0       	rjmp	.+4      	; 0x2724 <vfprintf+0xe6>
    2720:	88 36       	cpi	r24, 0x68	; 104
    2722:	41 f4       	brne	.+16     	; 0x2734 <vfprintf+0xf6>
    2724:	f7 01       	movw	r30, r14
    2726:	93 fd       	sbrc	r25, 3
    2728:	85 91       	lpm	r24, Z+
    272a:	93 ff       	sbrs	r25, 3
    272c:	81 91       	ld	r24, Z+
    272e:	7f 01       	movw	r14, r30
    2730:	81 11       	cpse	r24, r1
    2732:	b3 cf       	rjmp	.-154    	; 0x269a <vfprintf+0x5c>
    2734:	98 2f       	mov	r25, r24
    2736:	9f 7d       	andi	r25, 0xDF	; 223
    2738:	95 54       	subi	r25, 0x45	; 69
    273a:	93 30       	cpi	r25, 0x03	; 3
    273c:	28 f4       	brcc	.+10     	; 0x2748 <vfprintf+0x10a>
    273e:	0c 5f       	subi	r16, 0xFC	; 252
    2740:	1f 4f       	sbci	r17, 0xFF	; 255
    2742:	9f e3       	ldi	r25, 0x3F	; 63
    2744:	99 83       	std	Y+1, r25	; 0x01
    2746:	0d c0       	rjmp	.+26     	; 0x2762 <vfprintf+0x124>
    2748:	83 36       	cpi	r24, 0x63	; 99
    274a:	31 f0       	breq	.+12     	; 0x2758 <vfprintf+0x11a>
    274c:	83 37       	cpi	r24, 0x73	; 115
    274e:	71 f0       	breq	.+28     	; 0x276c <vfprintf+0x12e>
    2750:	83 35       	cpi	r24, 0x53	; 83
    2752:	09 f0       	breq	.+2      	; 0x2756 <vfprintf+0x118>
    2754:	59 c0       	rjmp	.+178    	; 0x2808 <vfprintf+0x1ca>
    2756:	21 c0       	rjmp	.+66     	; 0x279a <vfprintf+0x15c>
    2758:	f8 01       	movw	r30, r16
    275a:	80 81       	ld	r24, Z
    275c:	89 83       	std	Y+1, r24	; 0x01
    275e:	0e 5f       	subi	r16, 0xFE	; 254
    2760:	1f 4f       	sbci	r17, 0xFF	; 255
    2762:	88 24       	eor	r8, r8
    2764:	83 94       	inc	r8
    2766:	91 2c       	mov	r9, r1
    2768:	53 01       	movw	r10, r6
    276a:	13 c0       	rjmp	.+38     	; 0x2792 <vfprintf+0x154>
    276c:	28 01       	movw	r4, r16
    276e:	f2 e0       	ldi	r31, 0x02	; 2
    2770:	4f 0e       	add	r4, r31
    2772:	51 1c       	adc	r5, r1
    2774:	f8 01       	movw	r30, r16
    2776:	a0 80       	ld	r10, Z
    2778:	b1 80       	ldd	r11, Z+1	; 0x01
    277a:	36 fe       	sbrs	r3, 6
    277c:	03 c0       	rjmp	.+6      	; 0x2784 <vfprintf+0x146>
    277e:	69 2d       	mov	r22, r9
    2780:	70 e0       	ldi	r23, 0x00	; 0
    2782:	02 c0       	rjmp	.+4      	; 0x2788 <vfprintf+0x14a>
    2784:	6f ef       	ldi	r22, 0xFF	; 255
    2786:	7f ef       	ldi	r23, 0xFF	; 255
    2788:	c5 01       	movw	r24, r10
    278a:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <strnlen>
    278e:	4c 01       	movw	r8, r24
    2790:	82 01       	movw	r16, r4
    2792:	f3 2d       	mov	r31, r3
    2794:	ff 77       	andi	r31, 0x7F	; 127
    2796:	3f 2e       	mov	r3, r31
    2798:	16 c0       	rjmp	.+44     	; 0x27c6 <vfprintf+0x188>
    279a:	28 01       	movw	r4, r16
    279c:	22 e0       	ldi	r18, 0x02	; 2
    279e:	42 0e       	add	r4, r18
    27a0:	51 1c       	adc	r5, r1
    27a2:	f8 01       	movw	r30, r16
    27a4:	a0 80       	ld	r10, Z
    27a6:	b1 80       	ldd	r11, Z+1	; 0x01
    27a8:	36 fe       	sbrs	r3, 6
    27aa:	03 c0       	rjmp	.+6      	; 0x27b2 <vfprintf+0x174>
    27ac:	69 2d       	mov	r22, r9
    27ae:	70 e0       	ldi	r23, 0x00	; 0
    27b0:	02 c0       	rjmp	.+4      	; 0x27b6 <vfprintf+0x178>
    27b2:	6f ef       	ldi	r22, 0xFF	; 255
    27b4:	7f ef       	ldi	r23, 0xFF	; 255
    27b6:	c5 01       	movw	r24, r10
    27b8:	0e 94 00 15 	call	0x2a00	; 0x2a00 <strnlen_P>
    27bc:	4c 01       	movw	r8, r24
    27be:	f3 2d       	mov	r31, r3
    27c0:	f0 68       	ori	r31, 0x80	; 128
    27c2:	3f 2e       	mov	r3, r31
    27c4:	82 01       	movw	r16, r4
    27c6:	33 fc       	sbrc	r3, 3
    27c8:	1b c0       	rjmp	.+54     	; 0x2800 <vfprintf+0x1c2>
    27ca:	82 2d       	mov	r24, r2
    27cc:	90 e0       	ldi	r25, 0x00	; 0
    27ce:	88 16       	cp	r8, r24
    27d0:	99 06       	cpc	r9, r25
    27d2:	b0 f4       	brcc	.+44     	; 0x2800 <vfprintf+0x1c2>
    27d4:	b6 01       	movw	r22, r12
    27d6:	80 e2       	ldi	r24, 0x20	; 32
    27d8:	90 e0       	ldi	r25, 0x00	; 0
    27da:	0e 94 26 15 	call	0x2a4c	; 0x2a4c <fputc>
    27de:	2a 94       	dec	r2
    27e0:	f4 cf       	rjmp	.-24     	; 0x27ca <vfprintf+0x18c>
    27e2:	f5 01       	movw	r30, r10
    27e4:	37 fc       	sbrc	r3, 7
    27e6:	85 91       	lpm	r24, Z+
    27e8:	37 fe       	sbrs	r3, 7
    27ea:	81 91       	ld	r24, Z+
    27ec:	5f 01       	movw	r10, r30
    27ee:	b6 01       	movw	r22, r12
    27f0:	90 e0       	ldi	r25, 0x00	; 0
    27f2:	0e 94 26 15 	call	0x2a4c	; 0x2a4c <fputc>
    27f6:	21 10       	cpse	r2, r1
    27f8:	2a 94       	dec	r2
    27fa:	21 e0       	ldi	r18, 0x01	; 1
    27fc:	82 1a       	sub	r8, r18
    27fe:	91 08       	sbc	r9, r1
    2800:	81 14       	cp	r8, r1
    2802:	91 04       	cpc	r9, r1
    2804:	71 f7       	brne	.-36     	; 0x27e2 <vfprintf+0x1a4>
    2806:	e8 c0       	rjmp	.+464    	; 0x29d8 <vfprintf+0x39a>
    2808:	84 36       	cpi	r24, 0x64	; 100
    280a:	11 f0       	breq	.+4      	; 0x2810 <vfprintf+0x1d2>
    280c:	89 36       	cpi	r24, 0x69	; 105
    280e:	41 f5       	brne	.+80     	; 0x2860 <vfprintf+0x222>
    2810:	f8 01       	movw	r30, r16
    2812:	37 fe       	sbrs	r3, 7
    2814:	07 c0       	rjmp	.+14     	; 0x2824 <vfprintf+0x1e6>
    2816:	60 81       	ld	r22, Z
    2818:	71 81       	ldd	r23, Z+1	; 0x01
    281a:	82 81       	ldd	r24, Z+2	; 0x02
    281c:	93 81       	ldd	r25, Z+3	; 0x03
    281e:	0c 5f       	subi	r16, 0xFC	; 252
    2820:	1f 4f       	sbci	r17, 0xFF	; 255
    2822:	08 c0       	rjmp	.+16     	; 0x2834 <vfprintf+0x1f6>
    2824:	60 81       	ld	r22, Z
    2826:	71 81       	ldd	r23, Z+1	; 0x01
    2828:	07 2e       	mov	r0, r23
    282a:	00 0c       	add	r0, r0
    282c:	88 0b       	sbc	r24, r24
    282e:	99 0b       	sbc	r25, r25
    2830:	0e 5f       	subi	r16, 0xFE	; 254
    2832:	1f 4f       	sbci	r17, 0xFF	; 255
    2834:	f3 2d       	mov	r31, r3
    2836:	ff 76       	andi	r31, 0x6F	; 111
    2838:	3f 2e       	mov	r3, r31
    283a:	97 ff       	sbrs	r25, 7
    283c:	09 c0       	rjmp	.+18     	; 0x2850 <vfprintf+0x212>
    283e:	90 95       	com	r25
    2840:	80 95       	com	r24
    2842:	70 95       	com	r23
    2844:	61 95       	neg	r22
    2846:	7f 4f       	sbci	r23, 0xFF	; 255
    2848:	8f 4f       	sbci	r24, 0xFF	; 255
    284a:	9f 4f       	sbci	r25, 0xFF	; 255
    284c:	f0 68       	ori	r31, 0x80	; 128
    284e:	3f 2e       	mov	r3, r31
    2850:	2a e0       	ldi	r18, 0x0A	; 10
    2852:	30 e0       	ldi	r19, 0x00	; 0
    2854:	a3 01       	movw	r20, r6
    2856:	0e 94 62 15 	call	0x2ac4	; 0x2ac4 <__ultoa_invert>
    285a:	88 2e       	mov	r8, r24
    285c:	86 18       	sub	r8, r6
    285e:	45 c0       	rjmp	.+138    	; 0x28ea <vfprintf+0x2ac>
    2860:	85 37       	cpi	r24, 0x75	; 117
    2862:	31 f4       	brne	.+12     	; 0x2870 <vfprintf+0x232>
    2864:	23 2d       	mov	r18, r3
    2866:	2f 7e       	andi	r18, 0xEF	; 239
    2868:	b2 2e       	mov	r11, r18
    286a:	2a e0       	ldi	r18, 0x0A	; 10
    286c:	30 e0       	ldi	r19, 0x00	; 0
    286e:	25 c0       	rjmp	.+74     	; 0x28ba <vfprintf+0x27c>
    2870:	93 2d       	mov	r25, r3
    2872:	99 7f       	andi	r25, 0xF9	; 249
    2874:	b9 2e       	mov	r11, r25
    2876:	8f 36       	cpi	r24, 0x6F	; 111
    2878:	c1 f0       	breq	.+48     	; 0x28aa <vfprintf+0x26c>
    287a:	18 f4       	brcc	.+6      	; 0x2882 <vfprintf+0x244>
    287c:	88 35       	cpi	r24, 0x58	; 88
    287e:	79 f0       	breq	.+30     	; 0x289e <vfprintf+0x260>
    2880:	b5 c0       	rjmp	.+362    	; 0x29ec <vfprintf+0x3ae>
    2882:	80 37       	cpi	r24, 0x70	; 112
    2884:	19 f0       	breq	.+6      	; 0x288c <vfprintf+0x24e>
    2886:	88 37       	cpi	r24, 0x78	; 120
    2888:	21 f0       	breq	.+8      	; 0x2892 <vfprintf+0x254>
    288a:	b0 c0       	rjmp	.+352    	; 0x29ec <vfprintf+0x3ae>
    288c:	e9 2f       	mov	r30, r25
    288e:	e0 61       	ori	r30, 0x10	; 16
    2890:	be 2e       	mov	r11, r30
    2892:	b4 fe       	sbrs	r11, 4
    2894:	0d c0       	rjmp	.+26     	; 0x28b0 <vfprintf+0x272>
    2896:	fb 2d       	mov	r31, r11
    2898:	f4 60       	ori	r31, 0x04	; 4
    289a:	bf 2e       	mov	r11, r31
    289c:	09 c0       	rjmp	.+18     	; 0x28b0 <vfprintf+0x272>
    289e:	34 fe       	sbrs	r3, 4
    28a0:	0a c0       	rjmp	.+20     	; 0x28b6 <vfprintf+0x278>
    28a2:	29 2f       	mov	r18, r25
    28a4:	26 60       	ori	r18, 0x06	; 6
    28a6:	b2 2e       	mov	r11, r18
    28a8:	06 c0       	rjmp	.+12     	; 0x28b6 <vfprintf+0x278>
    28aa:	28 e0       	ldi	r18, 0x08	; 8
    28ac:	30 e0       	ldi	r19, 0x00	; 0
    28ae:	05 c0       	rjmp	.+10     	; 0x28ba <vfprintf+0x27c>
    28b0:	20 e1       	ldi	r18, 0x10	; 16
    28b2:	30 e0       	ldi	r19, 0x00	; 0
    28b4:	02 c0       	rjmp	.+4      	; 0x28ba <vfprintf+0x27c>
    28b6:	20 e1       	ldi	r18, 0x10	; 16
    28b8:	32 e0       	ldi	r19, 0x02	; 2
    28ba:	f8 01       	movw	r30, r16
    28bc:	b7 fe       	sbrs	r11, 7
    28be:	07 c0       	rjmp	.+14     	; 0x28ce <vfprintf+0x290>
    28c0:	60 81       	ld	r22, Z
    28c2:	71 81       	ldd	r23, Z+1	; 0x01
    28c4:	82 81       	ldd	r24, Z+2	; 0x02
    28c6:	93 81       	ldd	r25, Z+3	; 0x03
    28c8:	0c 5f       	subi	r16, 0xFC	; 252
    28ca:	1f 4f       	sbci	r17, 0xFF	; 255
    28cc:	06 c0       	rjmp	.+12     	; 0x28da <vfprintf+0x29c>
    28ce:	60 81       	ld	r22, Z
    28d0:	71 81       	ldd	r23, Z+1	; 0x01
    28d2:	80 e0       	ldi	r24, 0x00	; 0
    28d4:	90 e0       	ldi	r25, 0x00	; 0
    28d6:	0e 5f       	subi	r16, 0xFE	; 254
    28d8:	1f 4f       	sbci	r17, 0xFF	; 255
    28da:	a3 01       	movw	r20, r6
    28dc:	0e 94 62 15 	call	0x2ac4	; 0x2ac4 <__ultoa_invert>
    28e0:	88 2e       	mov	r8, r24
    28e2:	86 18       	sub	r8, r6
    28e4:	fb 2d       	mov	r31, r11
    28e6:	ff 77       	andi	r31, 0x7F	; 127
    28e8:	3f 2e       	mov	r3, r31
    28ea:	36 fe       	sbrs	r3, 6
    28ec:	0d c0       	rjmp	.+26     	; 0x2908 <vfprintf+0x2ca>
    28ee:	23 2d       	mov	r18, r3
    28f0:	2e 7f       	andi	r18, 0xFE	; 254
    28f2:	a2 2e       	mov	r10, r18
    28f4:	89 14       	cp	r8, r9
    28f6:	58 f4       	brcc	.+22     	; 0x290e <vfprintf+0x2d0>
    28f8:	34 fe       	sbrs	r3, 4
    28fa:	0b c0       	rjmp	.+22     	; 0x2912 <vfprintf+0x2d4>
    28fc:	32 fc       	sbrc	r3, 2
    28fe:	09 c0       	rjmp	.+18     	; 0x2912 <vfprintf+0x2d4>
    2900:	83 2d       	mov	r24, r3
    2902:	8e 7e       	andi	r24, 0xEE	; 238
    2904:	a8 2e       	mov	r10, r24
    2906:	05 c0       	rjmp	.+10     	; 0x2912 <vfprintf+0x2d4>
    2908:	b8 2c       	mov	r11, r8
    290a:	a3 2c       	mov	r10, r3
    290c:	03 c0       	rjmp	.+6      	; 0x2914 <vfprintf+0x2d6>
    290e:	b8 2c       	mov	r11, r8
    2910:	01 c0       	rjmp	.+2      	; 0x2914 <vfprintf+0x2d6>
    2912:	b9 2c       	mov	r11, r9
    2914:	a4 fe       	sbrs	r10, 4
    2916:	0f c0       	rjmp	.+30     	; 0x2936 <vfprintf+0x2f8>
    2918:	fe 01       	movw	r30, r28
    291a:	e8 0d       	add	r30, r8
    291c:	f1 1d       	adc	r31, r1
    291e:	80 81       	ld	r24, Z
    2920:	80 33       	cpi	r24, 0x30	; 48
    2922:	21 f4       	brne	.+8      	; 0x292c <vfprintf+0x2ee>
    2924:	9a 2d       	mov	r25, r10
    2926:	99 7e       	andi	r25, 0xE9	; 233
    2928:	a9 2e       	mov	r10, r25
    292a:	09 c0       	rjmp	.+18     	; 0x293e <vfprintf+0x300>
    292c:	a2 fe       	sbrs	r10, 2
    292e:	06 c0       	rjmp	.+12     	; 0x293c <vfprintf+0x2fe>
    2930:	b3 94       	inc	r11
    2932:	b3 94       	inc	r11
    2934:	04 c0       	rjmp	.+8      	; 0x293e <vfprintf+0x300>
    2936:	8a 2d       	mov	r24, r10
    2938:	86 78       	andi	r24, 0x86	; 134
    293a:	09 f0       	breq	.+2      	; 0x293e <vfprintf+0x300>
    293c:	b3 94       	inc	r11
    293e:	a3 fc       	sbrc	r10, 3
    2940:	11 c0       	rjmp	.+34     	; 0x2964 <vfprintf+0x326>
    2942:	a0 fe       	sbrs	r10, 0
    2944:	06 c0       	rjmp	.+12     	; 0x2952 <vfprintf+0x314>
    2946:	b2 14       	cp	r11, r2
    2948:	88 f4       	brcc	.+34     	; 0x296c <vfprintf+0x32e>
    294a:	28 0c       	add	r2, r8
    294c:	92 2c       	mov	r9, r2
    294e:	9b 18       	sub	r9, r11
    2950:	0e c0       	rjmp	.+28     	; 0x296e <vfprintf+0x330>
    2952:	b2 14       	cp	r11, r2
    2954:	60 f4       	brcc	.+24     	; 0x296e <vfprintf+0x330>
    2956:	b6 01       	movw	r22, r12
    2958:	80 e2       	ldi	r24, 0x20	; 32
    295a:	90 e0       	ldi	r25, 0x00	; 0
    295c:	0e 94 26 15 	call	0x2a4c	; 0x2a4c <fputc>
    2960:	b3 94       	inc	r11
    2962:	f7 cf       	rjmp	.-18     	; 0x2952 <vfprintf+0x314>
    2964:	b2 14       	cp	r11, r2
    2966:	18 f4       	brcc	.+6      	; 0x296e <vfprintf+0x330>
    2968:	2b 18       	sub	r2, r11
    296a:	02 c0       	rjmp	.+4      	; 0x2970 <vfprintf+0x332>
    296c:	98 2c       	mov	r9, r8
    296e:	21 2c       	mov	r2, r1
    2970:	a4 fe       	sbrs	r10, 4
    2972:	10 c0       	rjmp	.+32     	; 0x2994 <vfprintf+0x356>
    2974:	b6 01       	movw	r22, r12
    2976:	80 e3       	ldi	r24, 0x30	; 48
    2978:	90 e0       	ldi	r25, 0x00	; 0
    297a:	0e 94 26 15 	call	0x2a4c	; 0x2a4c <fputc>
    297e:	a2 fe       	sbrs	r10, 2
    2980:	17 c0       	rjmp	.+46     	; 0x29b0 <vfprintf+0x372>
    2982:	a1 fc       	sbrc	r10, 1
    2984:	03 c0       	rjmp	.+6      	; 0x298c <vfprintf+0x34e>
    2986:	88 e7       	ldi	r24, 0x78	; 120
    2988:	90 e0       	ldi	r25, 0x00	; 0
    298a:	02 c0       	rjmp	.+4      	; 0x2990 <vfprintf+0x352>
    298c:	88 e5       	ldi	r24, 0x58	; 88
    298e:	90 e0       	ldi	r25, 0x00	; 0
    2990:	b6 01       	movw	r22, r12
    2992:	0c c0       	rjmp	.+24     	; 0x29ac <vfprintf+0x36e>
    2994:	8a 2d       	mov	r24, r10
    2996:	86 78       	andi	r24, 0x86	; 134
    2998:	59 f0       	breq	.+22     	; 0x29b0 <vfprintf+0x372>
    299a:	a1 fe       	sbrs	r10, 1
    299c:	02 c0       	rjmp	.+4      	; 0x29a2 <vfprintf+0x364>
    299e:	8b e2       	ldi	r24, 0x2B	; 43
    29a0:	01 c0       	rjmp	.+2      	; 0x29a4 <vfprintf+0x366>
    29a2:	80 e2       	ldi	r24, 0x20	; 32
    29a4:	a7 fc       	sbrc	r10, 7
    29a6:	8d e2       	ldi	r24, 0x2D	; 45
    29a8:	b6 01       	movw	r22, r12
    29aa:	90 e0       	ldi	r25, 0x00	; 0
    29ac:	0e 94 26 15 	call	0x2a4c	; 0x2a4c <fputc>
    29b0:	89 14       	cp	r8, r9
    29b2:	38 f4       	brcc	.+14     	; 0x29c2 <vfprintf+0x384>
    29b4:	b6 01       	movw	r22, r12
    29b6:	80 e3       	ldi	r24, 0x30	; 48
    29b8:	90 e0       	ldi	r25, 0x00	; 0
    29ba:	0e 94 26 15 	call	0x2a4c	; 0x2a4c <fputc>
    29be:	9a 94       	dec	r9
    29c0:	f7 cf       	rjmp	.-18     	; 0x29b0 <vfprintf+0x372>
    29c2:	8a 94       	dec	r8
    29c4:	f3 01       	movw	r30, r6
    29c6:	e8 0d       	add	r30, r8
    29c8:	f1 1d       	adc	r31, r1
    29ca:	80 81       	ld	r24, Z
    29cc:	b6 01       	movw	r22, r12
    29ce:	90 e0       	ldi	r25, 0x00	; 0
    29d0:	0e 94 26 15 	call	0x2a4c	; 0x2a4c <fputc>
    29d4:	81 10       	cpse	r8, r1
    29d6:	f5 cf       	rjmp	.-22     	; 0x29c2 <vfprintf+0x384>
    29d8:	22 20       	and	r2, r2
    29da:	09 f4       	brne	.+2      	; 0x29de <vfprintf+0x3a0>
    29dc:	42 ce       	rjmp	.-892    	; 0x2662 <vfprintf+0x24>
    29de:	b6 01       	movw	r22, r12
    29e0:	80 e2       	ldi	r24, 0x20	; 32
    29e2:	90 e0       	ldi	r25, 0x00	; 0
    29e4:	0e 94 26 15 	call	0x2a4c	; 0x2a4c <fputc>
    29e8:	2a 94       	dec	r2
    29ea:	f6 cf       	rjmp	.-20     	; 0x29d8 <vfprintf+0x39a>
    29ec:	f6 01       	movw	r30, r12
    29ee:	86 81       	ldd	r24, Z+6	; 0x06
    29f0:	97 81       	ldd	r25, Z+7	; 0x07
    29f2:	02 c0       	rjmp	.+4      	; 0x29f8 <vfprintf+0x3ba>
    29f4:	8f ef       	ldi	r24, 0xFF	; 255
    29f6:	9f ef       	ldi	r25, 0xFF	; 255
    29f8:	2b 96       	adiw	r28, 0x0b	; 11
    29fa:	e2 e1       	ldi	r30, 0x12	; 18
    29fc:	0c 94 dc 15 	jmp	0x2bb8	; 0x2bb8 <__epilogue_restores__>

00002a00 <strnlen_P>:
    2a00:	fc 01       	movw	r30, r24
    2a02:	05 90       	lpm	r0, Z+
    2a04:	61 50       	subi	r22, 0x01	; 1
    2a06:	70 40       	sbci	r23, 0x00	; 0
    2a08:	01 10       	cpse	r0, r1
    2a0a:	d8 f7       	brcc	.-10     	; 0x2a02 <strnlen_P+0x2>
    2a0c:	80 95       	com	r24
    2a0e:	90 95       	com	r25
    2a10:	8e 0f       	add	r24, r30
    2a12:	9f 1f       	adc	r25, r31
    2a14:	08 95       	ret

00002a16 <strnlen>:
    2a16:	fc 01       	movw	r30, r24
    2a18:	61 50       	subi	r22, 0x01	; 1
    2a1a:	70 40       	sbci	r23, 0x00	; 0
    2a1c:	01 90       	ld	r0, Z+
    2a1e:	01 10       	cpse	r0, r1
    2a20:	d8 f7       	brcc	.-10     	; 0x2a18 <strnlen+0x2>
    2a22:	80 95       	com	r24
    2a24:	90 95       	com	r25
    2a26:	8e 0f       	add	r24, r30
    2a28:	9f 1f       	adc	r25, r31
    2a2a:	08 95       	ret

00002a2c <strrev>:
    2a2c:	dc 01       	movw	r26, r24
    2a2e:	fc 01       	movw	r30, r24
    2a30:	67 2f       	mov	r22, r23
    2a32:	71 91       	ld	r23, Z+
    2a34:	77 23       	and	r23, r23
    2a36:	e1 f7       	brne	.-8      	; 0x2a30 <strrev+0x4>
    2a38:	32 97       	sbiw	r30, 0x02	; 2
    2a3a:	04 c0       	rjmp	.+8      	; 0x2a44 <strrev+0x18>
    2a3c:	7c 91       	ld	r23, X
    2a3e:	6d 93       	st	X+, r22
    2a40:	70 83       	st	Z, r23
    2a42:	62 91       	ld	r22, -Z
    2a44:	ae 17       	cp	r26, r30
    2a46:	bf 07       	cpc	r27, r31
    2a48:	c8 f3       	brcs	.-14     	; 0x2a3c <strrev+0x10>
    2a4a:	08 95       	ret

00002a4c <fputc>:
    2a4c:	0f 93       	push	r16
    2a4e:	1f 93       	push	r17
    2a50:	cf 93       	push	r28
    2a52:	df 93       	push	r29
    2a54:	fb 01       	movw	r30, r22
    2a56:	23 81       	ldd	r18, Z+3	; 0x03
    2a58:	21 fd       	sbrc	r18, 1
    2a5a:	03 c0       	rjmp	.+6      	; 0x2a62 <fputc+0x16>
    2a5c:	8f ef       	ldi	r24, 0xFF	; 255
    2a5e:	9f ef       	ldi	r25, 0xFF	; 255
    2a60:	2c c0       	rjmp	.+88     	; 0x2aba <fputc+0x6e>
    2a62:	22 ff       	sbrs	r18, 2
    2a64:	16 c0       	rjmp	.+44     	; 0x2a92 <fputc+0x46>
    2a66:	46 81       	ldd	r20, Z+6	; 0x06
    2a68:	57 81       	ldd	r21, Z+7	; 0x07
    2a6a:	24 81       	ldd	r18, Z+4	; 0x04
    2a6c:	35 81       	ldd	r19, Z+5	; 0x05
    2a6e:	42 17       	cp	r20, r18
    2a70:	53 07       	cpc	r21, r19
    2a72:	44 f4       	brge	.+16     	; 0x2a84 <fputc+0x38>
    2a74:	a0 81       	ld	r26, Z
    2a76:	b1 81       	ldd	r27, Z+1	; 0x01
    2a78:	9d 01       	movw	r18, r26
    2a7a:	2f 5f       	subi	r18, 0xFF	; 255
    2a7c:	3f 4f       	sbci	r19, 0xFF	; 255
    2a7e:	31 83       	std	Z+1, r19	; 0x01
    2a80:	20 83       	st	Z, r18
    2a82:	8c 93       	st	X, r24
    2a84:	26 81       	ldd	r18, Z+6	; 0x06
    2a86:	37 81       	ldd	r19, Z+7	; 0x07
    2a88:	2f 5f       	subi	r18, 0xFF	; 255
    2a8a:	3f 4f       	sbci	r19, 0xFF	; 255
    2a8c:	37 83       	std	Z+7, r19	; 0x07
    2a8e:	26 83       	std	Z+6, r18	; 0x06
    2a90:	14 c0       	rjmp	.+40     	; 0x2aba <fputc+0x6e>
    2a92:	8b 01       	movw	r16, r22
    2a94:	ec 01       	movw	r28, r24
    2a96:	fb 01       	movw	r30, r22
    2a98:	00 84       	ldd	r0, Z+8	; 0x08
    2a9a:	f1 85       	ldd	r31, Z+9	; 0x09
    2a9c:	e0 2d       	mov	r30, r0
    2a9e:	09 95       	icall
    2aa0:	89 2b       	or	r24, r25
    2aa2:	e1 f6       	brne	.-72     	; 0x2a5c <fputc+0x10>
    2aa4:	d8 01       	movw	r26, r16
    2aa6:	16 96       	adiw	r26, 0x06	; 6
    2aa8:	8d 91       	ld	r24, X+
    2aaa:	9c 91       	ld	r25, X
    2aac:	17 97       	sbiw	r26, 0x07	; 7
    2aae:	01 96       	adiw	r24, 0x01	; 1
    2ab0:	17 96       	adiw	r26, 0x07	; 7
    2ab2:	9c 93       	st	X, r25
    2ab4:	8e 93       	st	-X, r24
    2ab6:	16 97       	sbiw	r26, 0x06	; 6
    2ab8:	ce 01       	movw	r24, r28
    2aba:	df 91       	pop	r29
    2abc:	cf 91       	pop	r28
    2abe:	1f 91       	pop	r17
    2ac0:	0f 91       	pop	r16
    2ac2:	08 95       	ret

00002ac4 <__ultoa_invert>:
    2ac4:	fa 01       	movw	r30, r20
    2ac6:	aa 27       	eor	r26, r26
    2ac8:	28 30       	cpi	r18, 0x08	; 8
    2aca:	51 f1       	breq	.+84     	; 0x2b20 <__ultoa_invert+0x5c>
    2acc:	20 31       	cpi	r18, 0x10	; 16
    2ace:	81 f1       	breq	.+96     	; 0x2b30 <__ultoa_invert+0x6c>
    2ad0:	e8 94       	clt
    2ad2:	6f 93       	push	r22
    2ad4:	6e 7f       	andi	r22, 0xFE	; 254
    2ad6:	6e 5f       	subi	r22, 0xFE	; 254
    2ad8:	7f 4f       	sbci	r23, 0xFF	; 255
    2ada:	8f 4f       	sbci	r24, 0xFF	; 255
    2adc:	9f 4f       	sbci	r25, 0xFF	; 255
    2ade:	af 4f       	sbci	r26, 0xFF	; 255
    2ae0:	b1 e0       	ldi	r27, 0x01	; 1
    2ae2:	3e d0       	rcall	.+124    	; 0x2b60 <__ultoa_invert+0x9c>
    2ae4:	b4 e0       	ldi	r27, 0x04	; 4
    2ae6:	3c d0       	rcall	.+120    	; 0x2b60 <__ultoa_invert+0x9c>
    2ae8:	67 0f       	add	r22, r23
    2aea:	78 1f       	adc	r23, r24
    2aec:	89 1f       	adc	r24, r25
    2aee:	9a 1f       	adc	r25, r26
    2af0:	a1 1d       	adc	r26, r1
    2af2:	68 0f       	add	r22, r24
    2af4:	79 1f       	adc	r23, r25
    2af6:	8a 1f       	adc	r24, r26
    2af8:	91 1d       	adc	r25, r1
    2afa:	a1 1d       	adc	r26, r1
    2afc:	6a 0f       	add	r22, r26
    2afe:	71 1d       	adc	r23, r1
    2b00:	81 1d       	adc	r24, r1
    2b02:	91 1d       	adc	r25, r1
    2b04:	a1 1d       	adc	r26, r1
    2b06:	20 d0       	rcall	.+64     	; 0x2b48 <__ultoa_invert+0x84>
    2b08:	09 f4       	brne	.+2      	; 0x2b0c <__ultoa_invert+0x48>
    2b0a:	68 94       	set
    2b0c:	3f 91       	pop	r19
    2b0e:	2a e0       	ldi	r18, 0x0A	; 10
    2b10:	26 9f       	mul	r18, r22
    2b12:	11 24       	eor	r1, r1
    2b14:	30 19       	sub	r19, r0
    2b16:	30 5d       	subi	r19, 0xD0	; 208
    2b18:	31 93       	st	Z+, r19
    2b1a:	de f6       	brtc	.-74     	; 0x2ad2 <__ultoa_invert+0xe>
    2b1c:	cf 01       	movw	r24, r30
    2b1e:	08 95       	ret
    2b20:	46 2f       	mov	r20, r22
    2b22:	47 70       	andi	r20, 0x07	; 7
    2b24:	40 5d       	subi	r20, 0xD0	; 208
    2b26:	41 93       	st	Z+, r20
    2b28:	b3 e0       	ldi	r27, 0x03	; 3
    2b2a:	0f d0       	rcall	.+30     	; 0x2b4a <__ultoa_invert+0x86>
    2b2c:	c9 f7       	brne	.-14     	; 0x2b20 <__ultoa_invert+0x5c>
    2b2e:	f6 cf       	rjmp	.-20     	; 0x2b1c <__ultoa_invert+0x58>
    2b30:	46 2f       	mov	r20, r22
    2b32:	4f 70       	andi	r20, 0x0F	; 15
    2b34:	40 5d       	subi	r20, 0xD0	; 208
    2b36:	4a 33       	cpi	r20, 0x3A	; 58
    2b38:	18 f0       	brcs	.+6      	; 0x2b40 <__ultoa_invert+0x7c>
    2b3a:	49 5d       	subi	r20, 0xD9	; 217
    2b3c:	31 fd       	sbrc	r19, 1
    2b3e:	40 52       	subi	r20, 0x20	; 32
    2b40:	41 93       	st	Z+, r20
    2b42:	02 d0       	rcall	.+4      	; 0x2b48 <__ultoa_invert+0x84>
    2b44:	a9 f7       	brne	.-22     	; 0x2b30 <__ultoa_invert+0x6c>
    2b46:	ea cf       	rjmp	.-44     	; 0x2b1c <__ultoa_invert+0x58>
    2b48:	b4 e0       	ldi	r27, 0x04	; 4
    2b4a:	a6 95       	lsr	r26
    2b4c:	97 95       	ror	r25
    2b4e:	87 95       	ror	r24
    2b50:	77 95       	ror	r23
    2b52:	67 95       	ror	r22
    2b54:	ba 95       	dec	r27
    2b56:	c9 f7       	brne	.-14     	; 0x2b4a <__ultoa_invert+0x86>
    2b58:	00 97       	sbiw	r24, 0x00	; 0
    2b5a:	61 05       	cpc	r22, r1
    2b5c:	71 05       	cpc	r23, r1
    2b5e:	08 95       	ret
    2b60:	9b 01       	movw	r18, r22
    2b62:	ac 01       	movw	r20, r24
    2b64:	0a 2e       	mov	r0, r26
    2b66:	06 94       	lsr	r0
    2b68:	57 95       	ror	r21
    2b6a:	47 95       	ror	r20
    2b6c:	37 95       	ror	r19
    2b6e:	27 95       	ror	r18
    2b70:	ba 95       	dec	r27
    2b72:	c9 f7       	brne	.-14     	; 0x2b66 <__ultoa_invert+0xa2>
    2b74:	62 0f       	add	r22, r18
    2b76:	73 1f       	adc	r23, r19
    2b78:	84 1f       	adc	r24, r20
    2b7a:	95 1f       	adc	r25, r21
    2b7c:	a0 1d       	adc	r26, r0
    2b7e:	08 95       	ret

00002b80 <__prologue_saves__>:
    2b80:	2f 92       	push	r2
    2b82:	3f 92       	push	r3
    2b84:	4f 92       	push	r4
    2b86:	5f 92       	push	r5
    2b88:	6f 92       	push	r6
    2b8a:	7f 92       	push	r7
    2b8c:	8f 92       	push	r8
    2b8e:	9f 92       	push	r9
    2b90:	af 92       	push	r10
    2b92:	bf 92       	push	r11
    2b94:	cf 92       	push	r12
    2b96:	df 92       	push	r13
    2b98:	ef 92       	push	r14
    2b9a:	ff 92       	push	r15
    2b9c:	0f 93       	push	r16
    2b9e:	1f 93       	push	r17
    2ba0:	cf 93       	push	r28
    2ba2:	df 93       	push	r29
    2ba4:	cd b7       	in	r28, 0x3d	; 61
    2ba6:	de b7       	in	r29, 0x3e	; 62
    2ba8:	ca 1b       	sub	r28, r26
    2baa:	db 0b       	sbc	r29, r27
    2bac:	0f b6       	in	r0, 0x3f	; 63
    2bae:	f8 94       	cli
    2bb0:	de bf       	out	0x3e, r29	; 62
    2bb2:	0f be       	out	0x3f, r0	; 63
    2bb4:	cd bf       	out	0x3d, r28	; 61
    2bb6:	09 94       	ijmp

00002bb8 <__epilogue_restores__>:
    2bb8:	2a 88       	ldd	r2, Y+18	; 0x12
    2bba:	39 88       	ldd	r3, Y+17	; 0x11
    2bbc:	48 88       	ldd	r4, Y+16	; 0x10
    2bbe:	5f 84       	ldd	r5, Y+15	; 0x0f
    2bc0:	6e 84       	ldd	r6, Y+14	; 0x0e
    2bc2:	7d 84       	ldd	r7, Y+13	; 0x0d
    2bc4:	8c 84       	ldd	r8, Y+12	; 0x0c
    2bc6:	9b 84       	ldd	r9, Y+11	; 0x0b
    2bc8:	aa 84       	ldd	r10, Y+10	; 0x0a
    2bca:	b9 84       	ldd	r11, Y+9	; 0x09
    2bcc:	c8 84       	ldd	r12, Y+8	; 0x08
    2bce:	df 80       	ldd	r13, Y+7	; 0x07
    2bd0:	ee 80       	ldd	r14, Y+6	; 0x06
    2bd2:	fd 80       	ldd	r15, Y+5	; 0x05
    2bd4:	0c 81       	ldd	r16, Y+4	; 0x04
    2bd6:	1b 81       	ldd	r17, Y+3	; 0x03
    2bd8:	aa 81       	ldd	r26, Y+2	; 0x02
    2bda:	b9 81       	ldd	r27, Y+1	; 0x01
    2bdc:	ce 0f       	add	r28, r30
    2bde:	d1 1d       	adc	r29, r1
    2be0:	0f b6       	in	r0, 0x3f	; 63
    2be2:	f8 94       	cli
    2be4:	de bf       	out	0x3e, r29	; 62
    2be6:	0f be       	out	0x3f, r0	; 63
    2be8:	cd bf       	out	0x3d, r28	; 61
    2bea:	ed 01       	movw	r28, r26
    2bec:	08 95       	ret

00002bee <_exit>:
    2bee:	f8 94       	cli

00002bf0 <__stop_program>:
    2bf0:	ff cf       	rjmp	.-2      	; 0x2bf0 <__stop_program>
