
Remote 1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000090  00800100  0000188e  00001922  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000188e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000d8  00800190  00800190  000019b2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000019b2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000019e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001f0  00000000  00000000  00001a24  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001f52  00000000  00000000  00001c14  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000fdf  00000000  00000000  00003b66  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001137  00000000  00000000  00004b45  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000510  00000000  00000000  00005c7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000084a  00000000  00000000  0000618c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001189  00000000  00000000  000069d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001b0  00000000  00000000  00007b5f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 fa 02 	jmp	0x5f4	; 0x5f4 <__ctors_end>
       4:	0c 94 1b 05 	jmp	0xa36	; 0xa36 <__vector_1>
       8:	0c 94 59 05 	jmp	0xab2	; 0xab2 <__vector_2>
       c:	0c 94 17 03 	jmp	0x62e	; 0x62e <__bad_interrupt>
      10:	0c 94 17 03 	jmp	0x62e	; 0x62e <__bad_interrupt>
      14:	0c 94 17 03 	jmp	0x62e	; 0x62e <__bad_interrupt>
      18:	0c 94 17 03 	jmp	0x62e	; 0x62e <__bad_interrupt>
      1c:	0c 94 b5 03 	jmp	0x76a	; 0x76a <__vector_7>
      20:	0c 94 17 03 	jmp	0x62e	; 0x62e <__bad_interrupt>
      24:	0c 94 17 03 	jmp	0x62e	; 0x62e <__bad_interrupt>
      28:	0c 94 17 03 	jmp	0x62e	; 0x62e <__bad_interrupt>
      2c:	0c 94 ce 07 	jmp	0xf9c	; 0xf9c <__vector_11>
      30:	0c 94 17 03 	jmp	0x62e	; 0x62e <__bad_interrupt>
      34:	0c 94 17 03 	jmp	0x62e	; 0x62e <__bad_interrupt>
      38:	0c 94 17 03 	jmp	0x62e	; 0x62e <__bad_interrupt>
      3c:	0c 94 17 03 	jmp	0x62e	; 0x62e <__bad_interrupt>
      40:	0c 94 17 03 	jmp	0x62e	; 0x62e <__bad_interrupt>
      44:	0c 94 17 03 	jmp	0x62e	; 0x62e <__bad_interrupt>
      48:	0c 94 c7 04 	jmp	0x98e	; 0x98e <__vector_18>
      4c:	0c 94 17 03 	jmp	0x62e	; 0x62e <__bad_interrupt>
      50:	0c 94 17 03 	jmp	0x62e	; 0x62e <__bad_interrupt>
      54:	0c 94 17 03 	jmp	0x62e	; 0x62e <__bad_interrupt>
      58:	0c 94 17 03 	jmp	0x62e	; 0x62e <__bad_interrupt>
      5c:	0c 94 17 03 	jmp	0x62e	; 0x62e <__bad_interrupt>
      60:	0c 94 17 03 	jmp	0x62e	; 0x62e <__bad_interrupt>
      64:	0c 94 17 03 	jmp	0x62e	; 0x62e <__bad_interrupt>
      68:	07 63       	ori	r16, 0x37	; 55
      6a:	42 36       	cpi	r20, 0x62	; 98
      6c:	b7 9b       	sbis	0x16, 7	; 22
      6e:	d8 a7       	std	Y+40, r29	; 0x28
      70:	1a 39       	cpi	r17, 0x9A	; 154
      72:	68 56       	subi	r22, 0x68	; 104
      74:	18 ae       	std	Y+56, r1	; 0x38
      76:	ba ab       	std	Y+50, r27	; 0x32
      78:	55 8c       	ldd	r5, Z+29	; 0x1d
      7a:	1d 3c       	cpi	r17, 0xCD	; 205
      7c:	b7 cc       	rjmp	.-1682   	; 0xfffff9ec <__eeprom_end+0xff7ef9ec>
      7e:	57 63       	ori	r21, 0x37	; 55
      80:	bd 6d       	ori	r27, 0xDD	; 221
      82:	ed fd       	.word	0xfded	; ????
      84:	75 3e       	cpi	r23, 0xE5	; 229
      86:	f6 17       	cp	r31, r22
      88:	72 31       	cpi	r23, 0x12	; 18
      8a:	bf 00       	.word	0x00bf	; ????
      8c:	00 00       	nop
      8e:	80 3f       	cpi	r24, 0xF0	; 240
      90:	08 00       	.word	0x0008	; ????
      92:	00 00       	nop
      94:	be 92       	st	-X, r11
      96:	24 49       	sbci	r18, 0x94	; 148
      98:	12 3e       	cpi	r17, 0xE2	; 226
      9a:	ab aa       	std	Y+51, r10	; 0x33
      9c:	aa 2a       	or	r10, r26
      9e:	be cd       	rjmp	.-1156   	; 0xfffffc1c <__eeprom_end+0xff7efc1c>
      a0:	cc cc       	rjmp	.-1640   	; 0xfffffa3a <__eeprom_end+0xff7efa3a>
      a2:	4c 3e       	cpi	r20, 0xEC	; 236
      a4:	00 00       	nop
      a6:	00 80       	ld	r0, Z
      a8:	be ab       	std	Y+54, r27	; 0x36
      aa:	aa aa       	std	Y+50, r10	; 0x32
      ac:	aa 3e       	cpi	r26, 0xEA	; 234
      ae:	00 00       	nop
      b0:	00 00       	nop
      b2:	bf 00       	.word	0x00bf	; ????
      b4:	00 00       	nop
      b6:	80 3f       	cpi	r24, 0xF0	; 240
      b8:	00 00       	nop
      ba:	00 00       	nop
      bc:	00 08       	sbc	r0, r0
      be:	41 78       	andi	r20, 0x81	; 129
      c0:	d3 bb       	out	0x13, r29	; 19
      c2:	43 87       	std	Z+11, r20	; 0x0b
      c4:	d1 13       	cpse	r29, r17
      c6:	3d 19       	sub	r19, r13
      c8:	0e 3c       	cpi	r16, 0xCE	; 206
      ca:	c3 bd       	out	0x23, r28	; 35
      cc:	42 82       	std	Z+2, r4	; 0x02
      ce:	ad 2b       	or	r26, r29
      d0:	3e 68       	ori	r19, 0x8E	; 142
      d2:	ec 82       	std	Y+4, r14	; 0x04
      d4:	76 be       	out	0x36, r7	; 54
      d6:	d9 8f       	std	Y+25, r29	; 0x19
      d8:	e1 a9       	ldd	r30, Z+49	; 0x31
      da:	3e 4c       	sbci	r19, 0xCE	; 206
      dc:	80 ef       	ldi	r24, 0xF0	; 240
      de:	ff be       	out	0x3f, r15	; 63
      e0:	01 c4       	rjmp	.+2050   	; 0x8e4 <display_sensors+0x8a>
      e2:	ff 7f       	andi	r31, 0xFF	; 255
      e4:	3f 00       	.word	0x003f	; ????
      e6:	00 00       	nop
	...

000000ea <__trampolines_end>:
      ea:	39 15       	cp	r19, r9
      ec:	55 6e       	ori	r21, 0xE5	; 229
      ee:	72 38       	cpi	r23, 0x82	; 130
      f0:	0c 01       	movw	r0, r24
      f2:	06 71       	Address 0x000000f2 is out of bounds.
.word	0xffff	; ????

000000f3 <melodies>:
      f3:	71 80 71 00 00 00 00 00 00 00 00 00 00 00 00 00     q.q.............
	...
     1f3:	63 6c 6f 6c 48 63 6c 6f 6c 48 63 6d 60 6d 6a 60     clolHclolHcm`mj`
     203:	6a 48 68 00 00 00 00 00 00 00 00 00 00 00 00 00     jHh.............
	...
     2f3:	2d 4d 60 68 4d 68 88 8a 4c 85 80 65 4a 68 88 86     -M`hMh..L..eJh..
     303:	48 81 80 61 63 83 80 63 83 85 66 86 80 66 86 88     H..ac..c..f..f..
     313:	4a 6c 6d 4f 6f 68 51 6f 8f 8d 4f 6c 68 4d 6c 8c     JlmOohQo..OlhMl.
     323:	8a 4c 85 80 65 4a 68 88 86 48 61 80 81 4d 6c 8c     .L..eJh..Ha..Ml.
     333:	8a 68 6c 6d 6f 31 6f 6d 6c 6d 4f 6f 88 80 68 6c     .hlmo1omlmOo..hl
     343:	6d 6f 2d 6c 6a 68 6a 4c 6c 85 80 65 68 6a 6c 4d     mo-ljhjLl..ehjlM
     353:	6a 8a 8c 4d 6a 8a 8c 4d 6a 6d 52 72 60 32 71 6f     j..Mj..MjmRr`2qo
     363:	6d 6f 51 71 8d 80 2d 2f 6d 6c 6a 6c 4d 6d 8a 80     moQq..-/mljlMm..
     373:	2a 4d 6c 8c 8a 48 61 80 81 28 4a 4c 2d 6d 00 00     *Ml..Ha..(JL-m..
	...
     3f3:	4a 4c 4e 4f 51 53 6a 80 8a 4c 6e 80 8e 6f 8f 80     JLNOQSj..Ln..o..
     403:	4f 40 4a 4c 4e 4f 51 53 6a 80 8a 4c 6e 80 8e 6f     O@JLNOQSj..Ln..o
     413:	8f 80 4f 40 56 53 76 96 80 76 74 31 54 51 54 36     ..O@VSv..vt1TQT6
     423:	76 96 80 56 53 76 96 80 76 74 31 4a 4c 4e 2f 4f     v..VSv..vt1JLN/O
	...
     4f3:	61 81 80 41 68 88 80 48 6a 8a 80 4a 28 66 86 80     a..Ah..Hj..J(f..
     503:	46 65 85 80 45 63 83 80 43 21 68 88 80 48 66 86     Fe..Ec..C!h..Hf.
     513:	80 46 65 85 80 45 23 68 88 80 48 66 86 80 46 65     .Fe..E#h..Hf..Fe
     523:	85 80 45 23 61 81 80 41 68 88 80 48 6a 8a 80 4a     ..E#a..Ah..Hj..J
     533:	28 66 86 80 46 65 85 80 45 63 83 80 43 21 00 00     (f..Fe..Ec..C!..
	...

000005f4 <__ctors_end>:
     5f4:	11 24       	eor	r1, r1
     5f6:	1f be       	out	0x3f, r1	; 63
     5f8:	cf ef       	ldi	r28, 0xFF	; 255
     5fa:	d8 e0       	ldi	r29, 0x08	; 8
     5fc:	de bf       	out	0x3e, r29	; 62
     5fe:	cd bf       	out	0x3d, r28	; 61

00000600 <__do_copy_data>:
     600:	11 e0       	ldi	r17, 0x01	; 1
     602:	a0 e0       	ldi	r26, 0x00	; 0
     604:	b1 e0       	ldi	r27, 0x01	; 1
     606:	ee e8       	ldi	r30, 0x8E	; 142
     608:	f8 e1       	ldi	r31, 0x18	; 24
     60a:	02 c0       	rjmp	.+4      	; 0x610 <__do_copy_data+0x10>
     60c:	05 90       	lpm	r0, Z+
     60e:	0d 92       	st	X+, r0
     610:	a0 39       	cpi	r26, 0x90	; 144
     612:	b1 07       	cpc	r27, r17
     614:	d9 f7       	brne	.-10     	; 0x60c <__do_copy_data+0xc>

00000616 <__do_clear_bss>:
     616:	22 e0       	ldi	r18, 0x02	; 2
     618:	a0 e9       	ldi	r26, 0x90	; 144
     61a:	b1 e0       	ldi	r27, 0x01	; 1
     61c:	01 c0       	rjmp	.+2      	; 0x620 <.do_clear_bss_start>

0000061e <.do_clear_bss_loop>:
     61e:	1d 92       	st	X+, r1

00000620 <.do_clear_bss_start>:
     620:	a8 36       	cpi	r26, 0x68	; 104
     622:	b2 07       	cpc	r27, r18
     624:	e1 f7       	brne	.-8      	; 0x61e <.do_clear_bss_loop>
     626:	0e 94 93 05 	call	0xb26	; 0xb26 <main>
     62a:	0c 94 45 0c 	jmp	0x188a	; 0x188a <_exit>

0000062e <__bad_interrupt>:
     62e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000632 <uart_put_char>:
		last_right = right;
	}
}

int uart_put_char(char c, FILE* stream){
	uart_send_byte(c);
     632:	0e 94 ef 05 	call	0xbde	; 0xbde <uart_send_byte>
	return 0;
}
     636:	80 e0       	ldi	r24, 0x00	; 0
     638:	90 e0       	ldi	r25, 0x00	; 0
     63a:	08 95       	ret

0000063c <send_move_command>:
		}
		_delay_ms(100);
    }
}

void send_move_command(){
     63c:	0f 93       	push	r16
     63e:	1f 93       	push	r17
     640:	cf 93       	push	r28
     642:	df 93       	push	r29
	if(command_hundreths == CMD_DELAY){
     644:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <command_hundreths>
     648:	84 31       	cpi	r24, 0x14	; 20
     64a:	09 f0       	breq	.+2      	; 0x64e <send_move_command+0x12>
     64c:	7b c0       	rjmp	.+246    	; 0x744 <send_move_command+0x108>
		command_hundreths = 0;
     64e:	10 92 96 01 	sts	0x0196, r1	; 0x800196 <command_hundreths>
		int16_t adjusted_x = x_rest - read_avg_adc(1, 25);
     652:	c0 91 11 01 	lds	r28, 0x0111	; 0x800111 <x_rest>
     656:	d0 91 12 01 	lds	r29, 0x0112	; 0x800112 <x_rest+0x1>
     65a:	69 e1       	ldi	r22, 0x19	; 25
     65c:	70 e0       	ldi	r23, 0x00	; 0
     65e:	81 e0       	ldi	r24, 0x01	; 1
     660:	0e 94 28 06 	call	0xc50	; 0xc50 <read_avg_adc>
     664:	c8 1b       	sub	r28, r24
     666:	d9 0b       	sbc	r29, r25
		int16_t adjusted_y = y_rest - read_avg_adc(2, 25);
     668:	00 91 0f 01 	lds	r16, 0x010F	; 0x80010f <y_rest>
     66c:	10 91 10 01 	lds	r17, 0x0110	; 0x800110 <y_rest+0x1>
     670:	69 e1       	ldi	r22, 0x19	; 25
     672:	70 e0       	ldi	r23, 0x00	; 0
     674:	82 e0       	ldi	r24, 0x02	; 2
     676:	0e 94 28 06 	call	0xc50	; 0xc50 <read_avg_adc>
     67a:	98 01       	movw	r18, r16
     67c:	28 1b       	sub	r18, r24
     67e:	39 0b       	sbc	r19, r25
		int16_t left = adjusted_x+adjusted_y;
     680:	8e 01       	movw	r16, r28
     682:	02 0f       	add	r16, r18
     684:	13 1f       	adc	r17, r19
		int16_t right = adjusted_x-adjusted_y;
     686:	c2 1b       	sub	r28, r18
     688:	d3 0b       	sbc	r29, r19
		if(left > 127){
     68a:	00 38       	cpi	r16, 0x80	; 128
     68c:	11 05       	cpc	r17, r1
     68e:	5c f4       	brge	.+22     	; 0x6a6 <send_move_command+0x6a>
			left = 127;
		}
		else if(left < -127){
     690:	01 38       	cpi	r16, 0x81	; 129
     692:	3f ef       	ldi	r19, 0xFF	; 255
     694:	13 07       	cpc	r17, r19
     696:	54 f0       	brlt	.+20     	; 0x6ac <send_move_command+0x70>
			left = -127;
		} else if(left > -5 && left < 5) left = 0;
     698:	c8 01       	movw	r24, r16
     69a:	04 96       	adiw	r24, 0x04	; 4
     69c:	09 97       	sbiw	r24, 0x09	; 9
     69e:	40 f4       	brcc	.+16     	; 0x6b0 <send_move_command+0x74>
     6a0:	00 e0       	ldi	r16, 0x00	; 0
     6a2:	10 e0       	ldi	r17, 0x00	; 0
     6a4:	05 c0       	rjmp	.+10     	; 0x6b0 <send_move_command+0x74>
		int16_t adjusted_x = x_rest - read_avg_adc(1, 25);
		int16_t adjusted_y = y_rest - read_avg_adc(2, 25);
		int16_t left = adjusted_x+adjusted_y;
		int16_t right = adjusted_x-adjusted_y;
		if(left > 127){
			left = 127;
     6a6:	0f e7       	ldi	r16, 0x7F	; 127
     6a8:	10 e0       	ldi	r17, 0x00	; 0
     6aa:	02 c0       	rjmp	.+4      	; 0x6b0 <send_move_command+0x74>
		}
		else if(left < -127){
			left = -127;
     6ac:	01 e8       	ldi	r16, 0x81	; 129
     6ae:	1f ef       	ldi	r17, 0xFF	; 255
		} else if(left > -5 && left < 5) left = 0;
		
		if(right > 127) {
     6b0:	c0 38       	cpi	r28, 0x80	; 128
     6b2:	d1 05       	cpc	r29, r1
     6b4:	5c f4       	brge	.+22     	; 0x6cc <send_move_command+0x90>
			right = 127;
		}
		else if(right < -127){
     6b6:	c1 38       	cpi	r28, 0x81	; 129
     6b8:	8f ef       	ldi	r24, 0xFF	; 255
     6ba:	d8 07       	cpc	r29, r24
     6bc:	54 f0       	brlt	.+20     	; 0x6d2 <send_move_command+0x96>
			right = -127;
		} else if(right > -5 && right < 5) right = 0;
     6be:	ce 01       	movw	r24, r28
     6c0:	04 96       	adiw	r24, 0x04	; 4
     6c2:	09 97       	sbiw	r24, 0x09	; 9
     6c4:	40 f4       	brcc	.+16     	; 0x6d6 <send_move_command+0x9a>
     6c6:	c0 e0       	ldi	r28, 0x00	; 0
     6c8:	d0 e0       	ldi	r29, 0x00	; 0
     6ca:	05 c0       	rjmp	.+10     	; 0x6d6 <send_move_command+0x9a>
		else if(left < -127){
			left = -127;
		} else if(left > -5 && left < 5) left = 0;
		
		if(right > 127) {
			right = 127;
     6cc:	cf e7       	ldi	r28, 0x7F	; 127
     6ce:	d0 e0       	ldi	r29, 0x00	; 0
     6d0:	02 c0       	rjmp	.+4      	; 0x6d6 <send_move_command+0x9a>
		}
		else if(right < -127){
			right = -127;
     6d2:	c1 e8       	ldi	r28, 0x81	; 129
     6d4:	df ef       	ldi	r29, 0xFF	; 255
		} else if(right > -5 && right < 5) right = 0;
		
		if(left != last_left || right != last_right){
     6d6:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <last_left>
     6da:	90 91 93 01 	lds	r25, 0x0193	; 0x800193 <last_left+0x1>
     6de:	80 17       	cp	r24, r16
     6e0:	91 07       	cpc	r25, r17
     6e2:	39 f4       	brne	.+14     	; 0x6f2 <send_move_command+0xb6>
     6e4:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <__data_end>
     6e8:	90 91 91 01 	lds	r25, 0x0191	; 0x800191 <__data_end+0x1>
     6ec:	8c 17       	cp	r24, r28
     6ee:	9d 07       	cpc	r25, r29
     6f0:	09 f1       	breq	.+66     	; 0x734 <send_move_command+0xf8>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     6f2:	4a e0       	ldi	r20, 0x0A	; 10
     6f4:	62 e0       	ldi	r22, 0x02	; 2
     6f6:	71 e0       	ldi	r23, 0x01	; 1
     6f8:	c8 01       	movw	r24, r16
     6fa:	0e 94 10 0c 	call	0x1820	; 0x1820 <__itoa_ncheck>
			itoa(left, itoabuf+2, 10);
			uint8_t len = strlen(itoabuf);
     6fe:	e0 e0       	ldi	r30, 0x00	; 0
     700:	f1 e0       	ldi	r31, 0x01	; 1
     702:	01 90       	ld	r0, Z+
     704:	00 20       	and	r0, r0
     706:	e9 f7       	brne	.-6      	; 0x702 <send_move_command+0xc6>
     708:	31 97       	sbiw	r30, 0x01	; 1
     70a:	e0 50       	subi	r30, 0x00	; 0
     70c:	f1 40       	sbci	r31, 0x01	; 1
			itoabuf[len++] = ' ';
     70e:	df 01       	movw	r26, r30
     710:	bb 27       	eor	r27, r27
     712:	a0 50       	subi	r26, 0x00	; 0
     714:	bf 4f       	sbci	r27, 0xFF	; 255
     716:	80 e2       	ldi	r24, 0x20	; 32
     718:	8c 93       	st	X, r24
     71a:	ef 5f       	subi	r30, 0xFF	; 255
     71c:	6e 2f       	mov	r22, r30
     71e:	70 e0       	ldi	r23, 0x00	; 0
     720:	60 50       	subi	r22, 0x00	; 0
     722:	7f 4f       	sbci	r23, 0xFF	; 255
     724:	4a e0       	ldi	r20, 0x0A	; 10
     726:	ce 01       	movw	r24, r28
     728:	0e 94 10 0c 	call	0x1820	; 0x1820 <__itoa_ncheck>
			itoa(right, itoabuf+len, 10);
			uart_send_line(itoabuf);
     72c:	80 e0       	ldi	r24, 0x00	; 0
     72e:	91 e0       	ldi	r25, 0x01	; 1
     730:	0e 94 f6 05 	call	0xbec	; 0xbec <uart_send_line>
		}
		last_left = left;
     734:	10 93 93 01 	sts	0x0193, r17	; 0x800193 <last_left+0x1>
     738:	00 93 92 01 	sts	0x0192, r16	; 0x800192 <last_left>
		last_right = right;
     73c:	d0 93 91 01 	sts	0x0191, r29	; 0x800191 <__data_end+0x1>
     740:	c0 93 90 01 	sts	0x0190, r28	; 0x800190 <__data_end>
	}
}
     744:	df 91       	pop	r29
     746:	cf 91       	pop	r28
     748:	1f 91       	pop	r17
     74a:	0f 91       	pop	r16
     74c:	08 95       	ret

0000074e <print_lcd_static>:
	uart_send_byte(c);
	return 0;
}

void print_lcd_static(){
	set_cursor_pos(0);
     74e:	80 e0       	ldi	r24, 0x00	; 0
     750:	0e 94 9f 06 	call	0xd3e	; 0xd3e <set_cursor_pos>
	write_lcd_string("Fram: __cm PIR:_");
     754:	82 e2       	ldi	r24, 0x22	; 34
     756:	91 e0       	ldi	r25, 0x01	; 1
     758:	0e 94 7f 06 	call	0xcfe	; 0xcfe <write_lcd_string>
	set_cursor_pos(16);
     75c:	80 e1       	ldi	r24, 0x10	; 16
     75e:	0e 94 9f 06 	call	0xd3e	; 0xd3e <set_cursor_pos>
	write_lcd_string("Bak: __cm  C: __");
     762:	83 e3       	ldi	r24, 0x33	; 51
     764:	91 e0       	ldi	r25, 0x01	; 1
     766:	0c 94 7f 06 	jmp	0xcfe	; 0xcfe <write_lcd_string>

0000076a <__vector_7>:
}

ISR(TIMER2_COMPA_vect){
     76a:	1f 92       	push	r1
     76c:	0f 92       	push	r0
     76e:	0f b6       	in	r0, 0x3f	; 63
     770:	0f 92       	push	r0
     772:	11 24       	eor	r1, r1
     774:	2f 93       	push	r18
     776:	3f 93       	push	r19
     778:	4f 93       	push	r20
     77a:	5f 93       	push	r21
     77c:	6f 93       	push	r22
     77e:	7f 93       	push	r23
     780:	8f 93       	push	r24
     782:	9f 93       	push	r25
     784:	af 93       	push	r26
     786:	bf 93       	push	r27
     788:	ef 93       	push	r30
     78a:	ff 93       	push	r31
	if(++heart_hundreths > 50){
     78c:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <heart_hundreths>
     790:	8f 5f       	subi	r24, 0xFF	; 255
     792:	80 93 97 01 	sts	0x0197, r24	; 0x800197 <heart_hundreths>
     796:	83 33       	cpi	r24, 0x33	; 51
     798:	18 f0       	brcs	.+6      	; 0x7a0 <__vector_7+0x36>
		LED_PORT |= 1<<LEDR2;
     79a:	5f 9a       	sbi	0x0b, 7	; 11
		heart_hundreths = 0;
     79c:	10 92 97 01 	sts	0x0197, r1	; 0x800197 <heart_hundreths>
	}
	if(command_hundreths < CMD_DELAY){
     7a0:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <command_hundreths>
     7a4:	84 31       	cpi	r24, 0x14	; 20
     7a6:	28 f4       	brcc	.+10     	; 0x7b2 <__vector_7+0x48>
		command_hundreths++;
     7a8:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <command_hundreths>
     7ac:	8f 5f       	subi	r24, 0xFF	; 255
     7ae:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <command_hundreths>
	}
	if(debounce_hundreths > 0) debounce_hundreths--;
     7b2:	80 91 95 01 	lds	r24, 0x0195	; 0x800195 <debounce_hundreths>
     7b6:	88 23       	and	r24, r24
     7b8:	29 f0       	breq	.+10     	; 0x7c4 <__vector_7+0x5a>
     7ba:	80 91 95 01 	lds	r24, 0x0195	; 0x800195 <debounce_hundreths>
     7be:	81 50       	subi	r24, 0x01	; 1
     7c0:	80 93 95 01 	sts	0x0195, r24	; 0x800195 <debounce_hundreths>
	messages_timerproc();
     7c4:	0e 94 ac 06 	call	0xd58	; 0xd58 <messages_timerproc>
}
     7c8:	ff 91       	pop	r31
     7ca:	ef 91       	pop	r30
     7cc:	bf 91       	pop	r27
     7ce:	af 91       	pop	r26
     7d0:	9f 91       	pop	r25
     7d2:	8f 91       	pop	r24
     7d4:	7f 91       	pop	r23
     7d6:	6f 91       	pop	r22
     7d8:	5f 91       	pop	r21
     7da:	4f 91       	pop	r20
     7dc:	3f 91       	pop	r19
     7de:	2f 91       	pop	r18
     7e0:	0f 90       	pop	r0
     7e2:	0f be       	out	0x3f, r0	; 63
     7e4:	0f 90       	pop	r0
     7e6:	1f 90       	pop	r1
     7e8:	18 95       	reti

000007ea <timer_init>:

void timer_init(){
	/* Start 100Hz system timer with TC2 for counting time */
	OCR2A = 77;
     7ea:	8d e4       	ldi	r24, 0x4D	; 77
     7ec:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
	TCCR2A = 1<<WGM21;
     7f0:	82 e0       	ldi	r24, 0x02	; 2
     7f2:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
	TCCR2B = 7;
     7f6:	97 e0       	ldi	r25, 0x07	; 7
     7f8:	90 93 b1 00 	sts	0x00B1, r25	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
	TIMSK2 = 1<<OCIE2A;
     7fc:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f8070>
     800:	08 95       	ret

00000802 <perform_command>:
}

void perform_command(uint8_t topic, uint8_t command, volatile uint8_t* args){
	switch(topic){
     802:	81 33       	cpi	r24, 0x31	; 49
     804:	19 f0       	breq	.+6      	; 0x80c <perform_command+0xa>
     806:	82 33       	cpi	r24, 0x32	; 50
     808:	b9 f0       	breq	.+46     	; 0x838 <perform_command+0x36>
     80a:	08 95       	ret
		case '1': //From car
			switch(command){
     80c:	61 33       	cpi	r22, 0x31	; 49
     80e:	41 f0       	breq	.+16     	; 0x820 <perform_command+0x1e>
     810:	62 33       	cpi	r22, 0x32	; 50
     812:	79 f0       	breq	.+30     	; 0x832 <perform_command+0x30>
     814:	60 33       	cpi	r22, 0x30	; 48
     816:	01 f5       	brne	.+64     	; 0x858 <perform_command+0x56>
				case '0':
					messages_force("Stopp!          ");
     818:	84 e4       	ldi	r24, 0x44	; 68
     81a:	91 e0       	ldi	r25, 0x01	; 1
     81c:	0c 94 d4 06 	jmp	0xda8	; 0xda8 <messages_force>
     820:	ba 01       	movw	r22, r20
					break;
				case '1':
					strcpy((char*)sensor_buf, (char*)args);
     822:	81 e4       	ldi	r24, 0x41	; 65
     824:	92 e0       	ldi	r25, 0x02	; 2
     826:	0e 94 09 0c 	call	0x1812	; 0x1812 <strcpy>
					sensors_received = true;
     82a:	81 e0       	ldi	r24, 0x01	; 1
     82c:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <sensors_received>
     830:	08 95       	ret
					break;
				case '2':
					messages_queue("PONG            ");
     832:	85 e5       	ldi	r24, 0x55	; 85
     834:	91 e0       	ldi	r25, 0x01	; 1
     836:	09 c0       	rjmp	.+18     	; 0x84a <perform_command+0x48>
			}
			break;
		case '2': //To remote
			switch(command){
     838:	61 33       	cpi	r22, 0x31	; 49
     83a:	31 f0       	breq	.+12     	; 0x848 <perform_command+0x46>
     83c:	62 33       	cpi	r22, 0x32	; 50
     83e:	39 f0       	breq	.+14     	; 0x84e <perform_command+0x4c>
     840:	60 33       	cpi	r22, 0x30	; 48
     842:	51 f4       	brne	.+20     	; 0x858 <perform_command+0x56>
				case '0':
					LED_PORT &= ~(1<<LEDR2);
     844:	5f 98       	cbi	0x0b, 7	; 11
					break;
     846:	08 95       	ret
				case '1':
					messages_queue((char*)args);
     848:	ca 01       	movw	r24, r20
     84a:	0c 94 e5 06 	jmp	0xdca	; 0xdca <messages_queue>
					break;
				case '2':
					Summer_PlayMelody(args[0]-'0');
     84e:	fa 01       	movw	r30, r20
     850:	80 81       	ld	r24, Z
     852:	80 53       	subi	r24, 0x30	; 48
     854:	0c 94 24 08 	jmp	0x1048	; 0x1048 <Summer_PlayMelody>
     858:	08 95       	ret

0000085a <display_sensors>:
			}
			break;
	}
}

void display_sensors(){
     85a:	1f 93       	push	r17
     85c:	cf 93       	push	r28
     85e:	df 93       	push	r29
	char* args = (char*)sensor_buf;
	
	set_cursor_pos(CR_POS);
     860:	8f e1       	ldi	r24, 0x1F	; 31
     862:	0e 94 9f 06 	call	0xd3e	; 0xd3e <set_cursor_pos>
	write_lcd_char((args[0] == '0') ? 'R' : '_');
     866:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <sensor_buf>
     86a:	80 33       	cpi	r24, 0x30	; 48
     86c:	11 f0       	breq	.+4      	; 0x872 <display_sensors+0x18>
     86e:	8f e5       	ldi	r24, 0x5F	; 95
     870:	01 c0       	rjmp	.+2      	; 0x874 <display_sensors+0x1a>
     872:	82 e5       	ldi	r24, 0x52	; 82
     874:	0e 94 71 06 	call	0xce2	; 0xce2 <write_lcd_char>
	set_cursor_pos(CL_POS);
     878:	8e e1       	ldi	r24, 0x1E	; 30
     87a:	0e 94 9f 06 	call	0xd3e	; 0xd3e <set_cursor_pos>
	write_lcd_char((args[1] == '0') ? 'L' : '_');
     87e:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <sensor_buf+0x1>
     882:	80 33       	cpi	r24, 0x30	; 48
     884:	11 f0       	breq	.+4      	; 0x88a <display_sensors+0x30>
     886:	8f e5       	ldi	r24, 0x5F	; 95
     888:	01 c0       	rjmp	.+2      	; 0x88c <display_sensors+0x32>
     88a:	8c e4       	ldi	r24, 0x4C	; 76
     88c:	0e 94 71 06 	call	0xce2	; 0xce2 <write_lcd_char>
	set_cursor_pos(PIR_POS);
     890:	8f e0       	ldi	r24, 0x0F	; 15
     892:	0e 94 9f 06 	call	0xd3e	; 0xd3e <set_cursor_pos>
	write_lcd_char((args[3] == '0') ? 'X' : '_');
     896:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <sensor_buf+0x3>
     89a:	80 33       	cpi	r24, 0x30	; 48
     89c:	11 f0       	breq	.+4      	; 0x8a2 <display_sensors+0x48>
     89e:	8f e5       	ldi	r24, 0x5F	; 95
     8a0:	01 c0       	rjmp	.+2      	; 0x8a4 <display_sensors+0x4a>
     8a2:	88 e5       	ldi	r24, 0x58	; 88
     8a4:	0e 94 71 06 	call	0xce2	; 0xce2 <write_lcd_char>
	if(args[2] == '0'){
     8a8:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <sensor_buf+0x2>
     8ac:	80 33       	cpi	r24, 0x30	; 48
     8ae:	39 f4       	brne	.+14     	; 0x8be <display_sensors+0x64>
		if(!(LED_PORT & 1<<LEDR1)){
     8b0:	5e 99       	sbic	0x0b, 6	; 11
     8b2:	06 c0       	rjmp	.+12     	; 0x8c0 <display_sensors+0x66>
			Summer_PlayMelody(MELODY_HONK);
     8b4:	80 e0       	ldi	r24, 0x00	; 0
     8b6:	0e 94 24 08 	call	0x1048	; 0x1048 <Summer_PlayMelody>
			LED_PORT |= 1<<LEDR1;
     8ba:	5e 9a       	sbi	0x0b, 6	; 11
     8bc:	01 c0       	rjmp	.+2      	; 0x8c0 <display_sensors+0x66>
		}
		} else{
		LED_PORT &= ~(1<<LEDR1);
     8be:	5e 98       	cbi	0x0b, 6	; 11
	}
	
	
	uint8_t b = 5;
     8c0:	c5 e0       	ldi	r28, 0x05	; 5
	while(args[++b] != ' ');
     8c2:	81 e0       	ldi	r24, 0x01	; 1
     8c4:	8c 0f       	add	r24, r28
     8c6:	e8 2f       	mov	r30, r24
     8c8:	f0 e0       	ldi	r31, 0x00	; 0
     8ca:	ef 5b       	subi	r30, 0xBF	; 191
     8cc:	fd 4f       	sbci	r31, 0xFD	; 253
     8ce:	90 81       	ld	r25, Z
     8d0:	90 32       	cpi	r25, 0x20	; 32
     8d2:	11 f0       	breq	.+4      	; 0x8d8 <display_sensors+0x7e>
     8d4:	c8 2f       	mov	r28, r24
     8d6:	f5 cf       	rjmp	.-22     	; 0x8c2 <display_sensors+0x68>
	args[b++] = '\0';
     8d8:	ce 5f       	subi	r28, 0xFE	; 254
     8da:	10 82       	st	Z, r1
     8dc:	8c 2f       	mov	r24, r28
	uint8_t k = b;
	while(args[++k] != ' ');
     8de:	91 e0       	ldi	r25, 0x01	; 1
     8e0:	98 0f       	add	r25, r24
     8e2:	e9 2f       	mov	r30, r25
     8e4:	f0 e0       	ldi	r31, 0x00	; 0
     8e6:	ef 5b       	subi	r30, 0xBF	; 191
     8e8:	fd 4f       	sbci	r31, 0xFD	; 253
     8ea:	20 81       	ld	r18, Z
     8ec:	20 32       	cpi	r18, 0x20	; 32
     8ee:	11 f0       	breq	.+4      	; 0x8f4 <display_sensors+0x9a>
     8f0:	89 2f       	mov	r24, r25
     8f2:	f5 cf       	rjmp	.-22     	; 0x8de <display_sensors+0x84>
	args[k++] = '\0';
     8f4:	d2 e0       	ldi	r29, 0x02	; 2
     8f6:	d8 0f       	add	r29, r24
     8f8:	10 82       	st	Z, r1
	
	
	set_cursor_pos(FRONT_POS);
     8fa:	85 e0       	ldi	r24, 0x05	; 5
     8fc:	0e 94 9f 06 	call	0xd3e	; 0xd3e <set_cursor_pos>
	if(b == 7 && args[0] == '0'){ //0 is sent for front
     900:	c7 30       	cpi	r28, 0x07	; 7
     902:	39 f4       	brne	.+14     	; 0x912 <__stack+0x13>
     904:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <sensor_buf>
     908:	80 33       	cpi	r24, 0x30	; 48
     90a:	19 f4       	brne	.+6      	; 0x912 <__stack+0x13>
		write_lcd_string("!!!");
     90c:	86 e6       	ldi	r24, 0x66	; 102
     90e:	91 e0       	ldi	r25, 0x01	; 1
     910:	13 c0       	rjmp	.+38     	; 0x938 <__stack+0x39>
	} else{
		for (int8_t i = 3-strlen(args+5); i > 0; i--) write_lcd_char(' ');
     912:	e6 e4       	ldi	r30, 0x46	; 70
     914:	f2 e0       	ldi	r31, 0x02	; 2
     916:	01 90       	ld	r0, Z+
     918:	00 20       	and	r0, r0
     91a:	e9 f7       	brne	.-6      	; 0x916 <__stack+0x17>
     91c:	cf 01       	movw	r24, r30
     91e:	87 54       	subi	r24, 0x47	; 71
     920:	92 40       	sbci	r25, 0x02	; 2
     922:	13 e0       	ldi	r17, 0x03	; 3
     924:	18 1b       	sub	r17, r24
     926:	11 16       	cp	r1, r17
     928:	2c f4       	brge	.+10     	; 0x934 <__stack+0x35>
     92a:	80 e2       	ldi	r24, 0x20	; 32
     92c:	0e 94 71 06 	call	0xce2	; 0xce2 <write_lcd_char>
     930:	11 50       	subi	r17, 0x01	; 1
     932:	f9 cf       	rjmp	.-14     	; 0x926 <__stack+0x27>
		write_lcd_string(args+5);
     934:	86 e4       	ldi	r24, 0x46	; 70
     936:	92 e0       	ldi	r25, 0x02	; 2
     938:	0e 94 7f 06 	call	0xcfe	; 0xcfe <write_lcd_string>
	}
	
	set_cursor_pos(BACK_POS);
     93c:	84 e1       	ldi	r24, 0x14	; 20
     93e:	0e 94 9f 06 	call	0xd3e	; 0xd3e <set_cursor_pos>
	if(k-b == 2 && args[b] == '0'){ //0 is sent for back
     942:	8d 2f       	mov	r24, r29
     944:	90 e0       	ldi	r25, 0x00	; 0
     946:	d0 e0       	ldi	r29, 0x00	; 0
     948:	8c 1b       	sub	r24, r28
     94a:	9d 0b       	sbc	r25, r29
     94c:	02 97       	sbiw	r24, 0x02	; 2
     94e:	49 f4       	brne	.+18     	; 0x962 <__stack+0x63>
     950:	fe 01       	movw	r30, r28
     952:	ef 5b       	subi	r30, 0xBF	; 191
     954:	fd 4f       	sbci	r31, 0xFD	; 253
     956:	80 81       	ld	r24, Z
     958:	80 33       	cpi	r24, 0x30	; 48
     95a:	19 f4       	brne	.+6      	; 0x962 <__stack+0x63>
		write_lcd_string("!!!");
     95c:	86 e6       	ldi	r24, 0x66	; 102
     95e:	91 e0       	ldi	r25, 0x01	; 1
     960:	11 c0       	rjmp	.+34     	; 0x984 <__stack+0x85>
	} else{
		for (int8_t i = 3-strlen(args+b); i > 0; i--) write_lcd_char(' ');
     962:	cf 5b       	subi	r28, 0xBF	; 191
     964:	dd 4f       	sbci	r29, 0xFD	; 253
     966:	fe 01       	movw	r30, r28
     968:	01 90       	ld	r0, Z+
     96a:	00 20       	and	r0, r0
     96c:	e9 f7       	brne	.-6      	; 0x968 <__stack+0x69>
     96e:	1c 2f       	mov	r17, r28
     970:	1e 1b       	sub	r17, r30
     972:	1c 5f       	subi	r17, 0xFC	; 252
     974:	11 16       	cp	r1, r17
     976:	2c f4       	brge	.+10     	; 0x982 <__stack+0x83>
     978:	80 e2       	ldi	r24, 0x20	; 32
     97a:	0e 94 71 06 	call	0xce2	; 0xce2 <write_lcd_char>
     97e:	11 50       	subi	r17, 0x01	; 1
     980:	f9 cf       	rjmp	.-14     	; 0x974 <__stack+0x75>
		write_lcd_string(args+b);
     982:	ce 01       	movw	r24, r28
	}
}
     984:	df 91       	pop	r29
     986:	cf 91       	pop	r28
     988:	1f 91       	pop	r17
	set_cursor_pos(BACK_POS);
	if(k-b == 2 && args[b] == '0'){ //0 is sent for back
		write_lcd_string("!!!");
	} else{
		for (int8_t i = 3-strlen(args+b); i > 0; i--) write_lcd_char(' ');
		write_lcd_string(args+b);
     98a:	0c 94 7f 06 	jmp	0xcfe	; 0xcfe <write_lcd_string>

0000098e <__vector_18>:
	}
}

ISR(USART_RX_vect){
     98e:	1f 92       	push	r1
     990:	0f 92       	push	r0
     992:	0f b6       	in	r0, 0x3f	; 63
     994:	0f 92       	push	r0
     996:	11 24       	eor	r1, r1
     998:	2f 93       	push	r18
     99a:	3f 93       	push	r19
     99c:	4f 93       	push	r20
     99e:	5f 93       	push	r21
     9a0:	6f 93       	push	r22
     9a2:	7f 93       	push	r23
     9a4:	8f 93       	push	r24
     9a6:	9f 93       	push	r25
     9a8:	af 93       	push	r26
     9aa:	bf 93       	push	r27
     9ac:	ef 93       	push	r30
     9ae:	ff 93       	push	r31
	uart_linebuf[uart_bufind] = UDR0;
     9b0:	e0 91 98 01 	lds	r30, 0x0198	; 0x800198 <uart_bufind>
     9b4:	f0 e0       	ldi	r31, 0x00	; 0
     9b6:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     9ba:	e3 5d       	subi	r30, 0xD3	; 211
     9bc:	fd 4f       	sbci	r31, 0xFD	; 253
     9be:	80 83       	st	Z, r24
	if(uart_linebuf[uart_bufind] == '\n'){
     9c0:	e0 91 98 01 	lds	r30, 0x0198	; 0x800198 <uart_bufind>
     9c4:	f0 e0       	ldi	r31, 0x00	; 0
     9c6:	e3 5d       	subi	r30, 0xD3	; 211
     9c8:	fd 4f       	sbci	r31, 0xFD	; 253
     9ca:	80 81       	ld	r24, Z
     9cc:	8a 30       	cpi	r24, 0x0A	; 10
     9ce:	89 f4       	brne	.+34     	; 0x9f2 <__vector_18+0x64>
		uart_linebuf[uart_bufind] = '\0';
     9d0:	e0 91 98 01 	lds	r30, 0x0198	; 0x800198 <uart_bufind>
     9d4:	f0 e0       	ldi	r31, 0x00	; 0
     9d6:	e3 5d       	subi	r30, 0xD3	; 211
     9d8:	fd 4f       	sbci	r31, 0xFD	; 253
     9da:	10 82       	st	Z, r1
		//Do something
		perform_command(uart_linebuf[0], uart_linebuf[1], uart_linebuf+2);
     9dc:	60 91 2e 02 	lds	r22, 0x022E	; 0x80022e <uart_linebuf+0x1>
     9e0:	80 91 2d 02 	lds	r24, 0x022D	; 0x80022d <uart_linebuf>
     9e4:	4f e2       	ldi	r20, 0x2F	; 47
     9e6:	52 e0       	ldi	r21, 0x02	; 2
     9e8:	0e 94 01 04 	call	0x802	; 0x802 <perform_command>
		//Done something
		uart_bufind = 0;
     9ec:	10 92 98 01 	sts	0x0198, r1	; 0x800198 <uart_bufind>
     9f0:	05 c0       	rjmp	.+10     	; 0x9fc <__vector_18+0x6e>
	} else{
		uart_bufind++;
     9f2:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <uart_bufind>
     9f6:	8f 5f       	subi	r24, 0xFF	; 255
     9f8:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <uart_bufind>
	}
}
     9fc:	ff 91       	pop	r31
     9fe:	ef 91       	pop	r30
     a00:	bf 91       	pop	r27
     a02:	af 91       	pop	r26
     a04:	9f 91       	pop	r25
     a06:	8f 91       	pop	r24
     a08:	7f 91       	pop	r23
     a0a:	6f 91       	pop	r22
     a0c:	5f 91       	pop	r21
     a0e:	4f 91       	pop	r20
     a10:	3f 91       	pop	r19
     a12:	2f 91       	pop	r18
     a14:	0f 90       	pop	r0
     a16:	0f be       	out	0x3f, r0	; 63
     a18:	0f 90       	pop	r0
     a1a:	1f 90       	pop	r1
     a1c:	18 95       	reti

00000a1e <btn_init>:

void btn_init(){
	BTN_DDR &= ~((1<<HONKBTN)|(1<<DEADMANBTN)|(1<<EXTRABTN));
     a1e:	8a b1       	in	r24, 0x0a	; 10
     a20:	83 7e       	andi	r24, 0xE3	; 227
     a22:	8a b9       	out	0x0a, r24	; 10
	BTN_PORT |= (1<<HONKBTN)|(1<<DEADMANBTN)|(1<<EXTRABTN);
     a24:	8b b1       	in	r24, 0x0b	; 11
     a26:	8c 61       	ori	r24, 0x1C	; 28
     a28:	8b b9       	out	0x0b, r24	; 11
	EICRA = (2<<ISC00)|(2<<ISC10);
     a2a:	8a e0       	ldi	r24, 0x0A	; 10
     a2c:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
	EIMSK = 3;
     a30:	83 e0       	ldi	r24, 0x03	; 3
     a32:	8d bb       	out	0x1d, r24	; 29
     a34:	08 95       	ret

00000a36 <__vector_1>:
}

//Extra
ISR(INT0_vect){
     a36:	1f 92       	push	r1
     a38:	0f 92       	push	r0
     a3a:	0f b6       	in	r0, 0x3f	; 63
     a3c:	0f 92       	push	r0
     a3e:	11 24       	eor	r1, r1
     a40:	2f 93       	push	r18
     a42:	3f 93       	push	r19
     a44:	4f 93       	push	r20
     a46:	5f 93       	push	r21
     a48:	6f 93       	push	r22
     a4a:	7f 93       	push	r23
     a4c:	8f 93       	push	r24
     a4e:	9f 93       	push	r25
     a50:	af 93       	push	r26
     a52:	bf 93       	push	r27
     a54:	ef 93       	push	r30
     a56:	ff 93       	push	r31
	if((BTN_PIN & 1<<DEADMANBTN) && (read_avg_adc(0, 5) > 630)){
     a58:	4c 9b       	sbis	0x09, 4	; 9
     a5a:	1a c0       	rjmp	.+52     	; 0xa90 <__vector_1+0x5a>
     a5c:	65 e0       	ldi	r22, 0x05	; 5
     a5e:	70 e0       	ldi	r23, 0x00	; 0
     a60:	80 e0       	ldi	r24, 0x00	; 0
     a62:	0e 94 28 06 	call	0xc50	; 0xc50 <read_avg_adc>
     a66:	87 37       	cpi	r24, 0x77	; 119
     a68:	92 40       	sbci	r25, 0x02	; 2
     a6a:	90 f0       	brcs	.+36     	; 0xa90 <__vector_1+0x5a>
		x_rest = read_avg_adc(1, 25);
     a6c:	69 e1       	ldi	r22, 0x19	; 25
     a6e:	70 e0       	ldi	r23, 0x00	; 0
     a70:	81 e0       	ldi	r24, 0x01	; 1
     a72:	0e 94 28 06 	call	0xc50	; 0xc50 <read_avg_adc>
     a76:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <x_rest+0x1>
     a7a:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <x_rest>
		y_rest = read_avg_adc(2, 25);
     a7e:	69 e1       	ldi	r22, 0x19	; 25
     a80:	70 e0       	ldi	r23, 0x00	; 0
     a82:	82 e0       	ldi	r24, 0x02	; 2
     a84:	0e 94 28 06 	call	0xc50	; 0xc50 <read_avg_adc>
     a88:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <y_rest+0x1>
     a8c:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <y_rest>
	}
}
     a90:	ff 91       	pop	r31
     a92:	ef 91       	pop	r30
     a94:	bf 91       	pop	r27
     a96:	af 91       	pop	r26
     a98:	9f 91       	pop	r25
     a9a:	8f 91       	pop	r24
     a9c:	7f 91       	pop	r23
     a9e:	6f 91       	pop	r22
     aa0:	5f 91       	pop	r21
     aa2:	4f 91       	pop	r20
     aa4:	3f 91       	pop	r19
     aa6:	2f 91       	pop	r18
     aa8:	0f 90       	pop	r0
     aaa:	0f be       	out	0x3f, r0	; 63
     aac:	0f 90       	pop	r0
     aae:	1f 90       	pop	r1
     ab0:	18 95       	reti

00000ab2 <__vector_2>:

//Honk
ISR(INT1_vect){
     ab2:	1f 92       	push	r1
     ab4:	0f 92       	push	r0
     ab6:	0f b6       	in	r0, 0x3f	; 63
     ab8:	0f 92       	push	r0
     aba:	11 24       	eor	r1, r1
     abc:	2f 93       	push	r18
     abe:	3f 93       	push	r19
     ac0:	4f 93       	push	r20
     ac2:	5f 93       	push	r21
     ac4:	6f 93       	push	r22
     ac6:	7f 93       	push	r23
     ac8:	8f 93       	push	r24
     aca:	9f 93       	push	r25
     acc:	af 93       	push	r26
     ace:	bf 93       	push	r27
     ad0:	ef 93       	push	r30
     ad2:	ff 93       	push	r31
	if(debounce_hundreths == 0){
     ad4:	80 91 95 01 	lds	r24, 0x0195	; 0x800195 <debounce_hundreths>
     ad8:	81 11       	cpse	r24, r1
     ada:	0c c0       	rjmp	.+24     	; 0xaf4 <__vector_2+0x42>
		if(!(BTN_PIN & 1<<DEADMANBTN)){
     adc:	4c 99       	sbic	0x09, 4	; 9
     ade:	03 c0       	rjmp	.+6      	; 0xae6 <__vector_2+0x34>
			uart_send_line("020");
     ae0:	8a e6       	ldi	r24, 0x6A	; 106
     ae2:	91 e0       	ldi	r25, 0x01	; 1
     ae4:	02 c0       	rjmp	.+4      	; 0xaea <__vector_2+0x38>
			} else{
			uart_send_line("32");
     ae6:	8e e6       	ldi	r24, 0x6E	; 110
     ae8:	91 e0       	ldi	r25, 0x01	; 1
     aea:	0e 94 f6 05 	call	0xbec	; 0xbec <uart_send_line>
		}
		debounce_hundreths = DEBOUNCE_VAL;	
     aee:	84 e1       	ldi	r24, 0x14	; 20
     af0:	80 93 95 01 	sts	0x0195, r24	; 0x800195 <debounce_hundreths>
	}
}
     af4:	ff 91       	pop	r31
     af6:	ef 91       	pop	r30
     af8:	bf 91       	pop	r27
     afa:	af 91       	pop	r26
     afc:	9f 91       	pop	r25
     afe:	8f 91       	pop	r24
     b00:	7f 91       	pop	r23
     b02:	6f 91       	pop	r22
     b04:	5f 91       	pop	r21
     b06:	4f 91       	pop	r20
     b08:	3f 91       	pop	r19
     b0a:	2f 91       	pop	r18
     b0c:	0f 90       	pop	r0
     b0e:	0f be       	out	0x3f, r0	; 63
     b10:	0f 90       	pop	r0
     b12:	1f 90       	pop	r1
     b14:	18 95       	reti

00000b16 <led_init>:

void led_init(){
	LED_DDR |= (1<<LEDG)|(1<<LEDR1)|(1<<LEDR2);
     b16:	8a b1       	in	r24, 0x0a	; 10
     b18:	80 6e       	ori	r24, 0xE0	; 224
     b1a:	8a b9       	out	0x0a, r24	; 10
	LED_PORT &= ~((1<<LEDG)|(1<<LEDR1));
     b1c:	8b b1       	in	r24, 0x0b	; 11
     b1e:	8f 79       	andi	r24, 0x9F	; 159
     b20:	8b b9       	out	0x0b, r24	; 11
	LED_PORT |= 1<<LEDR2;
     b22:	5f 9a       	sbi	0x0b, 7	; 11
     b24:	08 95       	ret

00000b26 <main>:
char itoabuf[15] = "03";


int main(void)
{
	spi_init();
     b26:	0e 94 42 07 	call	0xe84	; 0xe84 <spi_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b2a:	2f ef       	ldi	r18, 0xFF	; 255
     b2c:	80 e7       	ldi	r24, 0x70	; 112
     b2e:	92 e0       	ldi	r25, 0x02	; 2
     b30:	21 50       	subi	r18, 0x01	; 1
     b32:	80 40       	sbci	r24, 0x00	; 0
     b34:	90 40       	sbci	r25, 0x00	; 0
     b36:	e1 f7       	brne	.-8      	; 0xb30 <main+0xa>
     b38:	00 c0       	rjmp	.+0      	; 0xb3a <main+0x14>
     b3a:	00 00       	nop
	_delay_ms(100);
	lcd_init();
     b3c:	0e 94 53 06 	call	0xca6	; 0xca6 <lcd_init>
	adc_init();
     b40:	0e 94 1c 06 	call	0xc38	; 0xc38 <adc_init>
	uart_init();
     b44:	0e 94 11 06 	call	0xc22	; 0xc22 <uart_init>
	uart_flush();
     b48:	0e 94 09 06 	call	0xc12	; 0xc12 <uart_flush>
	led_init();
     b4c:	0e 94 8b 05 	call	0xb16	; 0xb16 <led_init>
	btn_init();
     b50:	0e 94 0f 05 	call	0xa1e	; 0xa1e <btn_init>
	Summer_Init();
     b54:	0e 94 1c 08 	call	0x1038	; 0x1038 <Summer_Init>
	timer_init();
     b58:	0e 94 f5 03 	call	0x7ea	; 0x7ea <timer_init>
	print_lcd_static();
     b5c:	0e 94 a7 03 	call	0x74e	; 0x74e <print_lcd_static>
	stdout = &uartstdout;
     b60:	83 e1       	ldi	r24, 0x13	; 19
     b62:	91 e0       	ldi	r25, 0x01	; 1
     b64:	90 93 65 02 	sts	0x0265, r25	; 0x800265 <__iob+0x3>
     b68:	80 93 64 02 	sts	0x0264, r24	; 0x800264 <__iob+0x2>
	sei();
     b6c:	78 94       	sei
  
    while (1) 
    {
		messages_move_queue();
     b6e:	0e 94 18 07 	call	0xe30	; 0xe30 <messages_move_queue>
		if(!output_buf_read){
     b72:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <output_buf_read>
     b76:	81 11       	cpse	r24, r1
     b78:	0d c0       	rjmp	.+26     	; 0xb94 <main+0x6e>
			set_cursor_pos(32);
     b7a:	80 e2       	ldi	r24, 0x20	; 32
     b7c:	0e 94 9f 06 	call	0xd3e	; 0xd3e <set_cursor_pos>
			char* buffer = (char*)messages_get_buffer();
     b80:	0e 94 3c 07 	call	0xe78	; 0xe78 <messages_get_buffer>
			write_lcd_string((buffer[0] == '\0') ? "                " : buffer);
     b84:	fc 01       	movw	r30, r24
     b86:	20 81       	ld	r18, Z
     b88:	21 11       	cpse	r18, r1
     b8a:	02 c0       	rjmp	.+4      	; 0xb90 <main+0x6a>
     b8c:	81 e7       	ldi	r24, 0x71	; 113
     b8e:	91 e0       	ldi	r25, 0x01	; 1
     b90:	0e 94 7f 06 	call	0xcfe	; 0xcfe <write_lcd_string>
		}
		
		if(sensors_received){
     b94:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <sensors_received>
     b98:	88 23       	and	r24, r24
     b9a:	21 f0       	breq	.+8      	; 0xba4 <main+0x7e>
			 display_sensors();
     b9c:	0e 94 2d 04 	call	0x85a	; 0x85a <display_sensors>
			 sensors_received = false;
     ba0:	10 92 94 01 	sts	0x0194, r1	; 0x800194 <sensors_received>
		}
		if(!(BTN_PIN & 1<<DEADMANBTN)){
     ba4:	4c 99       	sbic	0x09, 4	; 9
     ba6:	0a c0       	rjmp	.+20     	; 0xbbc <main+0x96>
			if(!(LED_PORT & (1<<LEDG))){
     ba8:	5d 99       	sbic	0x0b, 5	; 11
     baa:	05 c0       	rjmp	.+10     	; 0xbb6 <main+0x90>
				uart_send_line("041");
     bac:	82 e8       	ldi	r24, 0x82	; 130
     bae:	91 e0       	ldi	r25, 0x01	; 1
     bb0:	0e 94 f6 05 	call	0xbec	; 0xbec <uart_send_line>
				LED_PORT |= 1<<LEDG;
     bb4:	5d 9a       	sbi	0x0b, 5	; 11
			}
			send_move_command();
     bb6:	0e 94 1e 03 	call	0x63c	; 0x63c <send_move_command>
     bba:	07 c0       	rjmp	.+14     	; 0xbca <main+0xa4>
		} else{
			if(LED_PORT & (1<<LEDG)){
     bbc:	5d 9b       	sbis	0x0b, 5	; 11
     bbe:	05 c0       	rjmp	.+10     	; 0xbca <main+0xa4>
				uart_send_line("040");
     bc0:	86 e8       	ldi	r24, 0x86	; 134
     bc2:	91 e0       	ldi	r25, 0x01	; 1
     bc4:	0e 94 f6 05 	call	0xbec	; 0xbec <uart_send_line>
				LED_PORT &= ~(1<<LEDG);
     bc8:	5d 98       	cbi	0x0b, 5	; 11
     bca:	ff ef       	ldi	r31, 0xFF	; 255
     bcc:	20 e7       	ldi	r18, 0x70	; 112
     bce:	82 e0       	ldi	r24, 0x02	; 2
     bd0:	f1 50       	subi	r31, 0x01	; 1
     bd2:	20 40       	sbci	r18, 0x00	; 0
     bd4:	80 40       	sbci	r24, 0x00	; 0
     bd6:	e1 f7       	brne	.-8      	; 0xbd0 <main+0xaa>
     bd8:	00 c0       	rjmp	.+0      	; 0xbda <main+0xb4>
     bda:	00 00       	nop
     bdc:	c8 cf       	rjmp	.-112    	; 0xb6e <main+0x48>

00000bde <uart_send_byte>:

bool uart_receive_byte(uint8_t* buffer){
	if(!( UCSR0A & (1<<RXC0))) return false;
	*buffer = UDR0;
	return true;
}
     bde:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     be2:	95 ff       	sbrs	r25, 5
     be4:	fc cf       	rjmp	.-8      	; 0xbde <uart_send_byte>
     be6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     bea:	08 95       	ret

00000bec <uart_send_line>:
     bec:	fc 01       	movw	r30, r24
     bee:	91 91       	ld	r25, Z+
     bf0:	99 23       	and	r25, r25
     bf2:	39 f0       	breq	.+14     	; 0xc02 <uart_send_line+0x16>
     bf4:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     bf8:	85 ff       	sbrs	r24, 5
     bfa:	fc cf       	rjmp	.-8      	; 0xbf4 <uart_send_line+0x8>
     bfc:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     c00:	f6 cf       	rjmp	.-20     	; 0xbee <uart_send_line+0x2>
     c02:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     c06:	85 ff       	sbrs	r24, 5
     c08:	fc cf       	rjmp	.-8      	; 0xc02 <uart_send_line+0x16>
     c0a:	8a e0       	ldi	r24, 0x0A	; 10
     c0c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     c10:	08 95       	ret

00000c12 <uart_flush>:

void uart_flush(){
	uint8_t dummy;
	while ( UCSR0A & (1<<RXC0) ) dummy = UDR0;
     c12:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     c16:	87 ff       	sbrs	r24, 7
     c18:	03 c0       	rjmp	.+6      	; 0xc20 <uart_flush+0xe>
     c1a:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     c1e:	f9 cf       	rjmp	.-14     	; 0xc12 <uart_flush>
}
     c20:	08 95       	ret

00000c22 <uart_init>:

void uart_init(){
	UBRR0 = 0;		//0==500000 baud rate.  12==38400 baud rate
     c22:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
     c26:	10 92 c4 00 	sts	0x00C4, r1	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UCSR0B = (1<<RXEN0)|(1<<TXEN0)|(1<<RXCIE0);
     c2a:	88 e9       	ldi	r24, 0x98	; 152
     c2c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	/* Set frame format: 8data, 1stop bit */
	UCSR0C = (0<<USBS0)|(3<<UCSZ00);
     c30:	86 e0       	ldi	r24, 0x06	; 6
     c32:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
     c36:	08 95       	ret

00000c38 <adc_init>:
	//Start conversion
	ADCSRA |= 1<<ADSC;
	//Wait for completion and return result
	while( ADCSRA & 1<<ADSC);
	return ADC;
}
     c38:	87 b1       	in	r24, 0x07	; 7
     c3a:	88 7f       	andi	r24, 0xF8	; 248
     c3c:	87 b9       	out	0x07, r24	; 7
     c3e:	86 e8       	ldi	r24, 0x86	; 134
     c40:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     c44:	88 e3       	ldi	r24, 0x38	; 56
     c46:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7f807e>
     c4a:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
     c4e:	08 95       	ret

00000c50 <read_avg_adc>:
/* the average ADC-value from ADCH and ADCL	from the given amount		*/
/* of iterations														*/
/* @param port The port to read from (0-3)								*/
/* @param iterations The amount of iterations to take average from		*/
/************************************************************************/
uint16_t read_avg_adc(uint8_t port, uint16_t iterations){
     c50:	9b 01       	movw	r18, r22
	//Choose port and reference voltage
	ADMUX = port|(1<<REFS0);
     c52:	80 64       	ori	r24, 0x40	; 64
     c54:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	uint32_t sum = 0;
	//Start given amount of conversions and add up results
	for (uint8_t i = 0; i < iterations; i++){
     c58:	40 e0       	ldi	r20, 0x00	; 0
/* @param iterations The amount of iterations to take average from		*/
/************************************************************************/
uint16_t read_avg_adc(uint8_t port, uint16_t iterations){
	//Choose port and reference voltage
	ADMUX = port|(1<<REFS0);
	uint32_t sum = 0;
     c5a:	60 e0       	ldi	r22, 0x00	; 0
     c5c:	70 e0       	ldi	r23, 0x00	; 0
     c5e:	cb 01       	movw	r24, r22
	//Start given amount of conversions and add up results
	for (uint8_t i = 0; i < iterations; i++){
     c60:	e4 2f       	mov	r30, r20
     c62:	f0 e0       	ldi	r31, 0x00	; 0
     c64:	e2 17       	cp	r30, r18
     c66:	f3 07       	cpc	r31, r19
     c68:	98 f4       	brcc	.+38     	; 0xc90 <read_avg_adc+0x40>
		ADCSRA |= 1<<ADSC;
     c6a:	50 91 7a 00 	lds	r21, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     c6e:	50 64       	ori	r21, 0x40	; 64
     c70:	50 93 7a 00 	sts	0x007A, r21	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
		while( ADCSRA & 1<<ADSC);
     c74:	50 91 7a 00 	lds	r21, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     c78:	56 fd       	sbrc	r21, 6
     c7a:	fc cf       	rjmp	.-8      	; 0xc74 <read_avg_adc+0x24>
		sum += ADC;
     c7c:	e0 91 78 00 	lds	r30, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     c80:	f0 91 79 00 	lds	r31, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     c84:	6e 0f       	add	r22, r30
     c86:	7f 1f       	adc	r23, r31
     c88:	81 1d       	adc	r24, r1
     c8a:	91 1d       	adc	r25, r1
uint16_t read_avg_adc(uint8_t port, uint16_t iterations){
	//Choose port and reference voltage
	ADMUX = port|(1<<REFS0);
	uint32_t sum = 0;
	//Start given amount of conversions and add up results
	for (uint8_t i = 0; i < iterations; i++){
     c8c:	4f 5f       	subi	r20, 0xFF	; 255
     c8e:	e8 cf       	rjmp	.-48     	; 0xc60 <read_avg_adc+0x10>
		ADCSRA |= 1<<ADSC;
		while( ADCSRA & 1<<ADSC);
		sum += ADC;
	}
	//Return truncated average
	return (uint16_t)(sum/iterations);
     c90:	40 e0       	ldi	r20, 0x00	; 0
     c92:	50 e0       	ldi	r21, 0x00	; 0
     c94:	0e 94 c8 0b 	call	0x1790	; 0x1790 <__udivmodsi4>
     c98:	c9 01       	movw	r24, r18
     c9a:	08 95       	ret

00000c9c <spi_tx>:
/************************************************************************/
void clear_LCD(){
	PORTB &= ~(1<<CSB);   //Clear CSB
	spi_tx(0x01);
	_delay_ms(1.5);
	cursor_pos = 0;
     c9c:	8e bd       	out	0x2e, r24	; 46
     c9e:	0d b4       	in	r0, 0x2d	; 45
     ca0:	07 fe       	sbrs	r0, 7
     ca2:	fd cf       	rjmp	.-6      	; 0xc9e <spi_tx+0x2>
     ca4:	08 95       	ret

00000ca6 <lcd_init>:
     ca6:	cf 93       	push	r28
     ca8:	df 93       	push	r29
     caa:	84 b1       	in	r24, 0x04	; 4
     cac:	85 60       	ori	r24, 0x05	; 5
     cae:	84 b9       	out	0x04, r24	; 4
     cb0:	85 b1       	in	r24, 0x05	; 5
     cb2:	8a 7f       	andi	r24, 0xFA	; 250
     cb4:	85 b9       	out	0x05, r24	; 5
     cb6:	ca ee       	ldi	r28, 0xEA	; 234
     cb8:	d0 e0       	ldi	r29, 0x00	; 0
     cba:	fe 01       	movw	r30, r28
     cbc:	84 91       	lpm	r24, Z
     cbe:	0e 94 4e 06 	call	0xc9c	; 0xc9c <spi_tx>
     cc2:	87 eb       	ldi	r24, 0xB7	; 183
     cc4:	9b e0       	ldi	r25, 0x0B	; 11
     cc6:	01 97       	sbiw	r24, 0x01	; 1
     cc8:	f1 f7       	brne	.-4      	; 0xcc6 <lcd_init+0x20>
     cca:	00 c0       	rjmp	.+0      	; 0xccc <lcd_init+0x26>
     ccc:	00 00       	nop
     cce:	21 96       	adiw	r28, 0x01	; 1
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	c3 3f       	cpi	r28, 0xF3	; 243
     cd4:	d9 07       	cpc	r29, r25
     cd6:	89 f7       	brne	.-30     	; 0xcba <lcd_init+0x14>
     cd8:	10 92 99 01 	sts	0x0199, r1	; 0x800199 <cursor_pos>
     cdc:	df 91       	pop	r29
     cde:	cf 91       	pop	r28
     ce0:	08 95       	ret

00000ce2 <write_lcd_char>:
     ce2:	28 9a       	sbi	0x05, 0	; 5
     ce4:	2a 98       	cbi	0x05, 2	; 5
     ce6:	0e 94 4e 06 	call	0xc9c	; 0xc9c <spi_tx>
     cea:	80 e5       	ldi	r24, 0x50	; 80
     cec:	8a 95       	dec	r24
     cee:	f1 f7       	brne	.-4      	; 0xcec <write_lcd_char+0xa>
     cf0:	28 98       	cbi	0x05, 0	; 5
     cf2:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <cursor_pos>
     cf6:	8f 5f       	subi	r24, 0xFF	; 255
     cf8:	80 93 99 01 	sts	0x0199, r24	; 0x800199 <cursor_pos>
     cfc:	08 95       	ret

00000cfe <write_lcd_string>:
     cfe:	1f 93       	push	r17
     d00:	cf 93       	push	r28
     d02:	df 93       	push	r29
     d04:	ec 01       	movw	r28, r24
     d06:	28 9a       	sbi	0x05, 0	; 5
     d08:	2a 98       	cbi	0x05, 2	; 5
     d0a:	80 e0       	ldi	r24, 0x00	; 0
     d0c:	11 e0       	ldi	r17, 0x01	; 1
     d0e:	18 0f       	add	r17, r24
     d10:	fe 01       	movw	r30, r28
     d12:	e8 0f       	add	r30, r24
     d14:	f1 1d       	adc	r31, r1
     d16:	80 81       	ld	r24, Z
     d18:	88 23       	and	r24, r24
     d1a:	61 f0       	breq	.+24     	; 0xd34 <write_lcd_string+0x36>
     d1c:	0e 94 4e 06 	call	0xc9c	; 0xc9c <spi_tx>
     d20:	80 e5       	ldi	r24, 0x50	; 80
     d22:	8a 95       	dec	r24
     d24:	f1 f7       	brne	.-4      	; 0xd22 <write_lcd_string+0x24>
     d26:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <cursor_pos>
     d2a:	8f 5f       	subi	r24, 0xFF	; 255
     d2c:	80 93 99 01 	sts	0x0199, r24	; 0x800199 <cursor_pos>
     d30:	81 2f       	mov	r24, r17
     d32:	ec cf       	rjmp	.-40     	; 0xd0c <write_lcd_string+0xe>
     d34:	28 98       	cbi	0x05, 0	; 5
     d36:	df 91       	pop	r29
     d38:	cf 91       	pop	r28
     d3a:	1f 91       	pop	r17
     d3c:	08 95       	ret

00000d3e <set_cursor_pos>:

/************************************************************************/
/* Sets the LCD cursors position.										*/
/* @param pos The position to set to									*/
/************************************************************************/
void set_cursor_pos(uint8_t pos){
     d3e:	cf 93       	push	r28
     d40:	c8 2f       	mov	r28, r24
	PORTB &= ~(1<<CSB);   //Clear CSB
     d42:	2a 98       	cbi	0x05, 2	; 5
	spi_tx(pos|0x80);
     d44:	80 68       	ori	r24, 0x80	; 128
     d46:	0e 94 4e 06 	call	0xc9c	; 0xc9c <spi_tx>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     d4a:	80 e5       	ldi	r24, 0x50	; 80
     d4c:	8a 95       	dec	r24
     d4e:	f1 f7       	brne	.-4      	; 0xd4c <set_cursor_pos+0xe>
	_delay_us(30);
	cursor_pos = pos;
     d50:	c0 93 99 01 	sts	0x0199, r28	; 0x800199 <cursor_pos>
}
     d54:	cf 91       	pop	r28
     d56:	08 95       	ret

00000d58 <messages_timerproc>:
/*bool for tracking if any message is active*/
static volatile bool message_displaying = false;

/*Keeps time running and clears buffer on deactivation of a message*/
void messages_timerproc(){
	if(message_displaying && ++message_parts > 100){
     d58:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <message_displaying>
     d5c:	88 23       	and	r24, r24
     d5e:	19 f1       	breq	.+70     	; 0xda6 <messages_timerproc+0x4e>
     d60:	80 91 27 02 	lds	r24, 0x0227	; 0x800227 <message_parts>
     d64:	90 91 28 02 	lds	r25, 0x0228	; 0x800228 <message_parts+0x1>
     d68:	01 96       	adiw	r24, 0x01	; 1
     d6a:	90 93 28 02 	sts	0x0228, r25	; 0x800228 <message_parts+0x1>
     d6e:	80 93 27 02 	sts	0x0227, r24	; 0x800227 <message_parts>
     d72:	85 36       	cpi	r24, 0x65	; 101
     d74:	91 05       	cpc	r25, r1
     d76:	b8 f0       	brcs	.+46     	; 0xda6 <messages_timerproc+0x4e>
		if(++message_seconds > DISP_TIME){
     d78:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <message_seconds>
     d7c:	8f 5f       	subi	r24, 0xFF	; 255
     d7e:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <message_seconds>
     d82:	86 30       	cpi	r24, 0x06	; 6
     d84:	60 f0       	brcs	.+24     	; 0xd9e <messages_timerproc+0x46>
			message_seconds = 0;
     d86:	10 92 26 02 	sts	0x0226, r1	; 0x800226 <message_seconds>
			message_displaying = false;
     d8a:	10 92 9a 01 	sts	0x019A, r1	; 0x80019a <message_displaying>
			strcpy((char*)output_buf, "");
     d8e:	61 e8       	ldi	r22, 0x81	; 129
     d90:	71 e0       	ldi	r23, 0x01	; 1
     d92:	81 e5       	ldi	r24, 0x51	; 81
     d94:	92 e0       	ldi	r25, 0x02	; 2
     d96:	0e 94 09 0c 	call	0x1812	; 0x1812 <strcpy>
			output_buf_read = false;
     d9a:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <output_buf_read>
		}
		message_parts = 0;
     d9e:	10 92 28 02 	sts	0x0228, r1	; 0x800228 <message_parts+0x1>
     da2:	10 92 27 02 	sts	0x0227, r1	; 0x800227 <message_parts>
     da6:	08 95       	ret

00000da8 <messages_force>:
	}
}

/*Forces a message to be copied into buffer and marks buffer as changed*/
void messages_force(char* msg){
	message_displaying = true;
     da8:	21 e0       	ldi	r18, 0x01	; 1
     daa:	20 93 9a 01 	sts	0x019A, r18	; 0x80019a <message_displaying>
	/*Reset time counter to display for full time*/
	message_parts = 0;
     dae:	10 92 28 02 	sts	0x0228, r1	; 0x800228 <message_parts+0x1>
     db2:	10 92 27 02 	sts	0x0227, r1	; 0x800227 <message_parts>
	message_seconds = 0;
     db6:	10 92 26 02 	sts	0x0226, r1	; 0x800226 <message_seconds>
	strcpy((char*)output_buf, msg);
     dba:	bc 01       	movw	r22, r24
     dbc:	81 e5       	ldi	r24, 0x51	; 81
     dbe:	92 e0       	ldi	r25, 0x02	; 2
     dc0:	0e 94 09 0c 	call	0x1812	; 0x1812 <strcpy>
	output_buf_read = false;
     dc4:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <output_buf_read>
     dc8:	08 95       	ret

00000dca <messages_queue>:
}

/*Queues a message. Forces front most message out of queue if queue is full*/
void messages_queue(char* msg){
     dca:	cf 93       	push	r28
     dcc:	df 93       	push	r29
     dce:	ec 01       	movw	r28, r24
	if(message_count == MSGBUF_SIZE){
     dd0:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <message_count>
     dd4:	88 30       	cpi	r24, 0x08	; 8
     dd6:	81 f4       	brne	.+32     	; 0xdf8 <messages_queue+0x2e>
		messages_force((char*)(message_buf)[MOD_BUFSIZE(message_extract_ind++)]);
     dd8:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <message_extract_ind>
     ddc:	91 e0       	ldi	r25, 0x01	; 1
     dde:	98 0f       	add	r25, r24
     de0:	90 93 9c 01 	sts	0x019C, r25	; 0x80019c <message_extract_ind>
     de4:	87 70       	andi	r24, 0x07	; 7
     de6:	21 e1       	ldi	r18, 0x11	; 17
     de8:	82 9f       	mul	r24, r18
     dea:	c0 01       	movw	r24, r0
     dec:	11 24       	eor	r1, r1
     dee:	82 56       	subi	r24, 0x62	; 98
     df0:	9e 4f       	sbci	r25, 0xFE	; 254
     df2:	0e 94 d4 06 	call	0xda8	; 0xda8 <messages_force>
     df6:	0a c0       	rjmp	.+20     	; 0xe0c <messages_queue+0x42>
	} else if(++message_count > MSGBUF_SIZE) message_count = MSGBUF_SIZE;
     df8:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <message_count>
     dfc:	8f 5f       	subi	r24, 0xFF	; 255
     dfe:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <message_count>
     e02:	89 30       	cpi	r24, 0x09	; 9
     e04:	18 f0       	brcs	.+6      	; 0xe0c <messages_queue+0x42>
     e06:	88 e0       	ldi	r24, 0x08	; 8
     e08:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <message_count>
	strcpy((char*)(message_buf)[MOD_BUFSIZE(message_insert_ind++)], msg);
     e0c:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <message_insert_ind>
     e10:	91 e0       	ldi	r25, 0x01	; 1
     e12:	98 0f       	add	r25, r24
     e14:	90 93 9d 01 	sts	0x019D, r25	; 0x80019d <message_insert_ind>
     e18:	87 70       	andi	r24, 0x07	; 7
     e1a:	21 e1       	ldi	r18, 0x11	; 17
     e1c:	82 9f       	mul	r24, r18
     e1e:	c0 01       	movw	r24, r0
     e20:	11 24       	eor	r1, r1
     e22:	be 01       	movw	r22, r28
     e24:	82 56       	subi	r24, 0x62	; 98
     e26:	9e 4f       	sbci	r25, 0xFE	; 254
}
     e28:	df 91       	pop	r29
     e2a:	cf 91       	pop	r28
/*Queues a message. Forces front most message out of queue if queue is full*/
void messages_queue(char* msg){
	if(message_count == MSGBUF_SIZE){
		messages_force((char*)(message_buf)[MOD_BUFSIZE(message_extract_ind++)]);
	} else if(++message_count > MSGBUF_SIZE) message_count = MSGBUF_SIZE;
	strcpy((char*)(message_buf)[MOD_BUFSIZE(message_insert_ind++)], msg);
     e2c:	0c 94 09 0c 	jmp	0x1812	; 0x1812 <strcpy>

00000e30 <messages_move_queue>:
}

/*Moves queue along if no message is active*/
void messages_move_queue(){
	if(message_count > 0 && !message_displaying){
     e30:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <message_count>
     e34:	88 23       	and	r24, r24
     e36:	f9 f0       	breq	.+62     	; 0xe76 <messages_move_queue+0x46>
     e38:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <message_displaying>
     e3c:	81 11       	cpse	r24, r1
     e3e:	1b c0       	rjmp	.+54     	; 0xe76 <messages_move_queue+0x46>
		/*Copy next message to output buffer and increment/decremnt index and counter*/
		strcpy((char*)output_buf, (char*)(message_buf)[MOD_BUFSIZE(message_extract_ind++)]);
     e40:	60 91 9c 01 	lds	r22, 0x019C	; 0x80019c <message_extract_ind>
     e44:	81 e0       	ldi	r24, 0x01	; 1
     e46:	86 0f       	add	r24, r22
     e48:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <message_extract_ind>
     e4c:	67 70       	andi	r22, 0x07	; 7
     e4e:	81 e1       	ldi	r24, 0x11	; 17
     e50:	68 9f       	mul	r22, r24
     e52:	b0 01       	movw	r22, r0
     e54:	11 24       	eor	r1, r1
     e56:	62 56       	subi	r22, 0x62	; 98
     e58:	7e 4f       	sbci	r23, 0xFE	; 254
     e5a:	81 e5       	ldi	r24, 0x51	; 81
     e5c:	92 e0       	ldi	r25, 0x02	; 2
     e5e:	0e 94 09 0c 	call	0x1812	; 0x1812 <strcpy>
		output_buf_read = false;
     e62:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <output_buf_read>
		message_displaying = true;
     e66:	81 e0       	ldi	r24, 0x01	; 1
     e68:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <message_displaying>
		message_count--;
     e6c:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <message_count>
     e70:	81 50       	subi	r24, 0x01	; 1
     e72:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <message_count>
     e76:	08 95       	ret

00000e78 <messages_get_buffer>:
	}
}

/*Mark buffer as read and return pointer to buffer*/
volatile char* messages_get_buffer(){
	output_buf_read = true;
     e78:	81 e0       	ldi	r24, 0x01	; 1
     e7a:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <output_buf_read>
	return output_buf;
     e7e:	81 e5       	ldi	r24, 0x51	; 81
     e80:	92 e0       	ldi	r25, 0x02	; 2
     e82:	08 95       	ret

00000e84 <spi_init>:
/************************************************************************/
/* Initiates the MCU SPI as master with 16 as prescaler factor           */
/************************************************************************/
void spi_init(){
	// Set MOSI and SCK as out
	DDRB |= (1<<MOSI) | (1<<SCK) | (1<<SS);
     e84:	84 b1       	in	r24, 0x04	; 4
     e86:	8c 62       	ori	r24, 0x2C	; 44
     e88:	84 b9       	out	0x04, r24	; 4
	DDRB &= ~(1<<MISO);
     e8a:	24 98       	cbi	0x04, 4	; 4
	//Enable SPI in master mode with fck/4 as clock
	SPCR = (1<<SPE) | (1<<MSTR);
     e8c:	80 e5       	ldi	r24, 0x50	; 80
     e8e:	8c bd       	out	0x2c, r24	; 44
     e90:	08 95       	ret

00000e92 <Summer_PlayNote>:
static volatile uint16_t note_time = 0; // The timer cycles left for current note
static volatile uint8_t cur_melody;     // The index of the current melody
static volatile uint8_t current_note;   // The index of the curent note

// Plays a single note on the buzzer
void Summer_PlayNote(uint8_t note){
     e92:	cf 92       	push	r12
     e94:	df 92       	push	r13
     e96:	ef 92       	push	r14
     e98:	ff 92       	push	r15
     e9a:	cf 93       	push	r28
     e9c:	df 93       	push	r29
     e9e:	d8 2f       	mov	r29, r24
    if(GET_PITCH_EXP(note) == -1){  // Stop buzzer if note is a rest
     ea0:	68 2f       	mov	r22, r24
     ea2:	70 e0       	ldi	r23, 0x00	; 0
     ea4:	6f 71       	andi	r22, 0x1F	; 31
#ifdef SUMMER_USE_SW
        rest = true;
#else
        TCCR1A &= ~(1<<COM1A0);
     ea6:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
static volatile uint8_t cur_melody;     // The index of the current melody
static volatile uint8_t current_note;   // The index of the curent note

// Plays a single note on the buzzer
void Summer_PlayNote(uint8_t note){
    if(GET_PITCH_EXP(note) == -1){  // Stop buzzer if note is a rest
     eaa:	61 15       	cp	r22, r1
     eac:	71 05       	cpc	r23, r1
     eae:	21 f4       	brne	.+8      	; 0xeb8 <Summer_PlayNote+0x26>
#ifdef SUMMER_USE_SW
        rest = true;
#else
        TCCR1A &= ~(1<<COM1A0);
     eb0:	8f 7b       	andi	r24, 0xBF	; 191
     eb2:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
     eb6:	21 c0       	rjmp	.+66     	; 0xefa <Summer_PlayNote+0x68>
#endif
    } else{                         // Start buzzer and set correct frequency
#ifdef SUMMER_USE_SW
        rest = false;
#else
        TCCR1A |= (1<<COM1A0);
     eb8:	80 64       	ori	r24, 0x40	; 64
     eba:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
#endif
        OCR1A = LOWC_OCR / (pow(ROOT12_2,GET_PITCH_EXP(note)));
     ebe:	61 50       	subi	r22, 0x01	; 1
     ec0:	71 09       	sbc	r23, r1
     ec2:	07 2e       	mov	r0, r23
     ec4:	00 0c       	add	r0, r0
     ec6:	88 0b       	sbc	r24, r24
     ec8:	99 0b       	sbc	r25, r25
     eca:	0e 94 dd 08 	call	0x11ba	; 0x11ba <__floatsisf>
     ece:	9b 01       	movw	r18, r22
     ed0:	ac 01       	movw	r20, r24
     ed2:	6d e7       	ldi	r22, 0x7D	; 125
     ed4:	7c e9       	ldi	r23, 0x9C	; 156
     ed6:	87 e8       	ldi	r24, 0x87	; 135
     ed8:	9f e3       	ldi	r25, 0x3F	; 63
     eda:	0e 94 69 09 	call	0x12d2	; 0x12d2 <pow>
     ede:	9b 01       	movw	r18, r22
     ee0:	ac 01       	movw	r20, r24
     ee2:	60 e0       	ldi	r22, 0x00	; 0
     ee4:	70 e6       	ldi	r23, 0x60	; 96
     ee6:	80 e7       	ldi	r24, 0x70	; 112
     ee8:	96 e4       	ldi	r25, 0x46	; 70
     eea:	0e 94 3a 08 	call	0x1074	; 0x1074 <__divsf3>
     eee:	0e 94 ac 08 	call	0x1158	; 0x1158 <__fixunssfsi>
     ef2:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     ef6:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
    }
    // cycles needed = frequency / (bar time) / (note length divisor)
    note_time = ((F_CPU/(OCR1A + 1))/(bpms[cur_melody]/(240.0)))/GET_DURATION_DIV(note);
     efa:	20 91 88 00 	lds	r18, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
     efe:	30 91 89 00 	lds	r19, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     f02:	c0 91 2a 02 	lds	r28, 0x022A	; 0x80022a <cur_melody>
     f06:	2f 5f       	subi	r18, 0xFF	; 255
     f08:	3f 4f       	sbci	r19, 0xFF	; 255
     f0a:	40 e0       	ldi	r20, 0x00	; 0
     f0c:	50 e0       	ldi	r21, 0x00	; 0
     f0e:	60 e0       	ldi	r22, 0x00	; 0
     f10:	72 e1       	ldi	r23, 0x12	; 18
     f12:	8a e7       	ldi	r24, 0x7A	; 122
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <__divmodsi4>
     f1a:	ca 01       	movw	r24, r20
     f1c:	b9 01       	movw	r22, r18
     f1e:	0e 94 dd 08 	call	0x11ba	; 0x11ba <__floatsisf>
     f22:	6b 01       	movw	r12, r22
     f24:	7c 01       	movw	r14, r24
     f26:	ec 2f       	mov	r30, r28
     f28:	f0 e0       	ldi	r31, 0x00	; 0
     f2a:	e6 57       	subi	r30, 0x76	; 118
     f2c:	fe 4f       	sbci	r31, 0xFE	; 254
     f2e:	60 81       	ld	r22, Z
     f30:	70 e0       	ldi	r23, 0x00	; 0
     f32:	80 e0       	ldi	r24, 0x00	; 0
     f34:	90 e0       	ldi	r25, 0x00	; 0
     f36:	0e 94 dd 08 	call	0x11ba	; 0x11ba <__floatsisf>
     f3a:	20 e0       	ldi	r18, 0x00	; 0
     f3c:	30 e0       	ldi	r19, 0x00	; 0
     f3e:	40 e7       	ldi	r20, 0x70	; 112
     f40:	53 e4       	ldi	r21, 0x43	; 67
     f42:	0e 94 3a 08 	call	0x1074	; 0x1074 <__divsf3>
     f46:	9b 01       	movw	r18, r22
     f48:	ac 01       	movw	r20, r24
     f4a:	c7 01       	movw	r24, r14
     f4c:	b6 01       	movw	r22, r12
     f4e:	0e 94 3a 08 	call	0x1074	; 0x1074 <__divsf3>
     f52:	6b 01       	movw	r12, r22
     f54:	7c 01       	movw	r14, r24
     f56:	d2 95       	swap	r29
     f58:	d6 95       	lsr	r29
     f5a:	d7 70       	andi	r29, 0x07	; 7
     f5c:	61 e0       	ldi	r22, 0x01	; 1
     f5e:	70 e0       	ldi	r23, 0x00	; 0
     f60:	02 c0       	rjmp	.+4      	; 0xf66 <Summer_PlayNote+0xd4>
     f62:	66 0f       	add	r22, r22
     f64:	77 1f       	adc	r23, r23
     f66:	da 95       	dec	r29
     f68:	e2 f7       	brpl	.-8      	; 0xf62 <Summer_PlayNote+0xd0>
     f6a:	07 2e       	mov	r0, r23
     f6c:	00 0c       	add	r0, r0
     f6e:	88 0b       	sbc	r24, r24
     f70:	99 0b       	sbc	r25, r25
     f72:	0e 94 dd 08 	call	0x11ba	; 0x11ba <__floatsisf>
     f76:	9b 01       	movw	r18, r22
     f78:	ac 01       	movw	r20, r24
     f7a:	c7 01       	movw	r24, r14
     f7c:	b6 01       	movw	r22, r12
     f7e:	0e 94 3a 08 	call	0x1074	; 0x1074 <__divsf3>
     f82:	0e 94 ac 08 	call	0x1158	; 0x1158 <__fixunssfsi>
     f86:	70 93 2c 02 	sts	0x022C, r23	; 0x80022c <note_time+0x1>
     f8a:	60 93 2b 02 	sts	0x022B, r22	; 0x80022b <note_time>
}
     f8e:	df 91       	pop	r29
     f90:	cf 91       	pop	r28
     f92:	ff 90       	pop	r15
     f94:	ef 90       	pop	r14
     f96:	df 90       	pop	r13
     f98:	cf 90       	pop	r12
     f9a:	08 95       	ret

00000f9c <__vector_11>:

// Interrupt vector to play next note after the current notes length is passed
// Stops the melody when it encounters a 0xFF
ISR(TIMER1_COMPA_vect){
     f9c:	1f 92       	push	r1
     f9e:	0f 92       	push	r0
     fa0:	0f b6       	in	r0, 0x3f	; 63
     fa2:	0f 92       	push	r0
     fa4:	11 24       	eor	r1, r1
     fa6:	2f 93       	push	r18
     fa8:	3f 93       	push	r19
     faa:	4f 93       	push	r20
     fac:	5f 93       	push	r21
     fae:	6f 93       	push	r22
     fb0:	7f 93       	push	r23
     fb2:	8f 93       	push	r24
     fb4:	9f 93       	push	r25
     fb6:	af 93       	push	r26
     fb8:	bf 93       	push	r27
     fba:	ef 93       	push	r30
     fbc:	ff 93       	push	r31
    if(rest)
        SW_SUMMER_PORT &= ~(1<<SUMMER_PIN);
    else
        SW_SUMMER_PORT ^= (1<<SUMMER_PIN);
#endif
    note_time--; 
     fbe:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <note_time>
     fc2:	90 91 2c 02 	lds	r25, 0x022C	; 0x80022c <note_time+0x1>
     fc6:	01 97       	sbiw	r24, 0x01	; 1
     fc8:	90 93 2c 02 	sts	0x022C, r25	; 0x80022c <note_time+0x1>
     fcc:	80 93 2b 02 	sts	0x022B, r24	; 0x80022b <note_time>
    if (note_time == 0){
     fd0:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <note_time>
     fd4:	90 91 2c 02 	lds	r25, 0x022C	; 0x80022c <note_time+0x1>
     fd8:	89 2b       	or	r24, r25
     fda:	e9 f4       	brne	.+58     	; 0x1016 <__vector_11+0x7a>
        current_note++;
     fdc:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <current_note>
     fe0:	8f 5f       	subi	r24, 0xFF	; 255
     fe2:	80 93 29 02 	sts	0x0229, r24	; 0x800229 <current_note>
        // Read next note from program memory
        uint8_t note = pgm_read_byte(&(melodies[cur_melody][current_note]));
     fe6:	e0 91 2a 02 	lds	r30, 0x022A	; 0x80022a <cur_melody>
     fea:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <current_note>
     fee:	f0 e0       	ldi	r31, 0x00	; 0
     ff0:	fe 2f       	mov	r31, r30
     ff2:	ee 27       	eor	r30, r30
     ff4:	e8 0f       	add	r30, r24
     ff6:	f1 1d       	adc	r31, r1
     ff8:	ed 50       	subi	r30, 0x0D	; 13
     ffa:	ff 4f       	sbci	r31, 0xFF	; 255
     ffc:	84 91       	lpm	r24, Z
        if(note == 0x00){   // Stop buzzer if 0xFF
     ffe:	81 11       	cpse	r24, r1
    1000:	08 c0       	rjmp	.+16     	; 0x1012 <__vector_11+0x76>
            TIMSK1 = 0;
    1002:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
            TCCR1B &= ~(1<<CS10);
    1006:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    100a:	8e 7f       	andi	r24, 0xFE	; 254
    100c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    1010:	02 c0       	rjmp	.+4      	; 0x1016 <__vector_11+0x7a>
#ifdef SUMMER_USE_SW
            SW_SUMMER_PORT &= ~(1<<SUMMER_PIN);
#endif
        } else
            Summer_PlayNote(note);
    1012:	0e 94 49 07 	call	0xe92	; 0xe92 <Summer_PlayNote>
    }
}
    1016:	ff 91       	pop	r31
    1018:	ef 91       	pop	r30
    101a:	bf 91       	pop	r27
    101c:	af 91       	pop	r26
    101e:	9f 91       	pop	r25
    1020:	8f 91       	pop	r24
    1022:	7f 91       	pop	r23
    1024:	6f 91       	pop	r22
    1026:	5f 91       	pop	r21
    1028:	4f 91       	pop	r20
    102a:	3f 91       	pop	r19
    102c:	2f 91       	pop	r18
    102e:	0f 90       	pop	r0
    1030:	0f be       	out	0x3f, r0	; 63
    1032:	0f 90       	pop	r0
    1034:	1f 90       	pop	r1
    1036:	18 95       	reti

00001038 <Summer_Init>:

// ------------- PUBLIC -------------

// Initializes the summer
void Summer_Init(void){
    SUMMER_DDR |= (1<<SUMMER_PIN);
    1038:	21 9a       	sbi	0x04, 1	; 4
    // Start timer
#ifdef SUMMER_USE_SW
    TCCR1A = 0;
#else
    TCCR1A = (1<<COM1A0);
    103a:	80 e4       	ldi	r24, 0x40	; 64
    103c:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
#endif
    TCCR1B = (1<<WGM12);
    1040:	88 e0       	ldi	r24, 0x08	; 8
    1042:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    1046:	08 95       	ret

00001048 <Summer_PlayMelody>:
}

// Plays a specified melody on the buzzer
void Summer_PlayMelody(uint8_t melody){
    cur_melody = melody;
    1048:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <cur_melody>
    current_note = 0;
    104c:	10 92 29 02 	sts	0x0229, r1	; 0x800229 <current_note>
    Summer_PlayNote(pgm_read_byte(&(melodies[melody][0])));
    1050:	e8 2f       	mov	r30, r24
    1052:	f0 e0       	ldi	r31, 0x00	; 0
    1054:	fe 2f       	mov	r31, r30
    1056:	ee 27       	eor	r30, r30
    1058:	ed 50       	subi	r30, 0x0D	; 13
    105a:	ff 4f       	sbci	r31, 0xFF	; 255
    105c:	84 91       	lpm	r24, Z
    105e:	0e 94 49 07 	call	0xe92	; 0xe92 <Summer_PlayNote>
    TIMSK1 = (1<<OCIE1A);
    1062:	82 e0       	ldi	r24, 0x02	; 2
    1064:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
    TCCR1B |= (1<<CS10);
    1068:	e1 e8       	ldi	r30, 0x81	; 129
    106a:	f0 e0       	ldi	r31, 0x00	; 0
    106c:	80 81       	ld	r24, Z
    106e:	81 60       	ori	r24, 0x01	; 1
    1070:	80 83       	st	Z, r24
    1072:	08 95       	ret

00001074 <__divsf3>:
    1074:	0e 94 4e 08 	call	0x109c	; 0x109c <__divsf3x>
    1078:	0c 94 2f 09 	jmp	0x125e	; 0x125e <__fp_round>
    107c:	0e 94 28 09 	call	0x1250	; 0x1250 <__fp_pscB>
    1080:	58 f0       	brcs	.+22     	; 0x1098 <__divsf3+0x24>
    1082:	0e 94 21 09 	call	0x1242	; 0x1242 <__fp_pscA>
    1086:	40 f0       	brcs	.+16     	; 0x1098 <__divsf3+0x24>
    1088:	29 f4       	brne	.+10     	; 0x1094 <__divsf3+0x20>
    108a:	5f 3f       	cpi	r21, 0xFF	; 255
    108c:	29 f0       	breq	.+10     	; 0x1098 <__divsf3+0x24>
    108e:	0c 94 18 09 	jmp	0x1230	; 0x1230 <__fp_inf>
    1092:	51 11       	cpse	r21, r1
    1094:	0c 94 63 09 	jmp	0x12c6	; 0x12c6 <__fp_szero>
    1098:	0c 94 1e 09 	jmp	0x123c	; 0x123c <__fp_nan>

0000109c <__divsf3x>:
    109c:	0e 94 40 09 	call	0x1280	; 0x1280 <__fp_split3>
    10a0:	68 f3       	brcs	.-38     	; 0x107c <__divsf3+0x8>

000010a2 <__divsf3_pse>:
    10a2:	99 23       	and	r25, r25
    10a4:	b1 f3       	breq	.-20     	; 0x1092 <__divsf3+0x1e>
    10a6:	55 23       	and	r21, r21
    10a8:	91 f3       	breq	.-28     	; 0x108e <__divsf3+0x1a>
    10aa:	95 1b       	sub	r25, r21
    10ac:	55 0b       	sbc	r21, r21
    10ae:	bb 27       	eor	r27, r27
    10b0:	aa 27       	eor	r26, r26
    10b2:	62 17       	cp	r22, r18
    10b4:	73 07       	cpc	r23, r19
    10b6:	84 07       	cpc	r24, r20
    10b8:	38 f0       	brcs	.+14     	; 0x10c8 <__divsf3_pse+0x26>
    10ba:	9f 5f       	subi	r25, 0xFF	; 255
    10bc:	5f 4f       	sbci	r21, 0xFF	; 255
    10be:	22 0f       	add	r18, r18
    10c0:	33 1f       	adc	r19, r19
    10c2:	44 1f       	adc	r20, r20
    10c4:	aa 1f       	adc	r26, r26
    10c6:	a9 f3       	breq	.-22     	; 0x10b2 <__divsf3_pse+0x10>
    10c8:	35 d0       	rcall	.+106    	; 0x1134 <__divsf3_pse+0x92>
    10ca:	0e 2e       	mov	r0, r30
    10cc:	3a f0       	brmi	.+14     	; 0x10dc <__divsf3_pse+0x3a>
    10ce:	e0 e8       	ldi	r30, 0x80	; 128
    10d0:	32 d0       	rcall	.+100    	; 0x1136 <__divsf3_pse+0x94>
    10d2:	91 50       	subi	r25, 0x01	; 1
    10d4:	50 40       	sbci	r21, 0x00	; 0
    10d6:	e6 95       	lsr	r30
    10d8:	00 1c       	adc	r0, r0
    10da:	ca f7       	brpl	.-14     	; 0x10ce <__divsf3_pse+0x2c>
    10dc:	2b d0       	rcall	.+86     	; 0x1134 <__divsf3_pse+0x92>
    10de:	fe 2f       	mov	r31, r30
    10e0:	29 d0       	rcall	.+82     	; 0x1134 <__divsf3_pse+0x92>
    10e2:	66 0f       	add	r22, r22
    10e4:	77 1f       	adc	r23, r23
    10e6:	88 1f       	adc	r24, r24
    10e8:	bb 1f       	adc	r27, r27
    10ea:	26 17       	cp	r18, r22
    10ec:	37 07       	cpc	r19, r23
    10ee:	48 07       	cpc	r20, r24
    10f0:	ab 07       	cpc	r26, r27
    10f2:	b0 e8       	ldi	r27, 0x80	; 128
    10f4:	09 f0       	breq	.+2      	; 0x10f8 <__divsf3_pse+0x56>
    10f6:	bb 0b       	sbc	r27, r27
    10f8:	80 2d       	mov	r24, r0
    10fa:	bf 01       	movw	r22, r30
    10fc:	ff 27       	eor	r31, r31
    10fe:	93 58       	subi	r25, 0x83	; 131
    1100:	5f 4f       	sbci	r21, 0xFF	; 255
    1102:	3a f0       	brmi	.+14     	; 0x1112 <__divsf3_pse+0x70>
    1104:	9e 3f       	cpi	r25, 0xFE	; 254
    1106:	51 05       	cpc	r21, r1
    1108:	78 f0       	brcs	.+30     	; 0x1128 <__divsf3_pse+0x86>
    110a:	0c 94 18 09 	jmp	0x1230	; 0x1230 <__fp_inf>
    110e:	0c 94 63 09 	jmp	0x12c6	; 0x12c6 <__fp_szero>
    1112:	5f 3f       	cpi	r21, 0xFF	; 255
    1114:	e4 f3       	brlt	.-8      	; 0x110e <__divsf3_pse+0x6c>
    1116:	98 3e       	cpi	r25, 0xE8	; 232
    1118:	d4 f3       	brlt	.-12     	; 0x110e <__divsf3_pse+0x6c>
    111a:	86 95       	lsr	r24
    111c:	77 95       	ror	r23
    111e:	67 95       	ror	r22
    1120:	b7 95       	ror	r27
    1122:	f7 95       	ror	r31
    1124:	9f 5f       	subi	r25, 0xFF	; 255
    1126:	c9 f7       	brne	.-14     	; 0x111a <__divsf3_pse+0x78>
    1128:	88 0f       	add	r24, r24
    112a:	91 1d       	adc	r25, r1
    112c:	96 95       	lsr	r25
    112e:	87 95       	ror	r24
    1130:	97 f9       	bld	r25, 7
    1132:	08 95       	ret
    1134:	e1 e0       	ldi	r30, 0x01	; 1
    1136:	66 0f       	add	r22, r22
    1138:	77 1f       	adc	r23, r23
    113a:	88 1f       	adc	r24, r24
    113c:	bb 1f       	adc	r27, r27
    113e:	62 17       	cp	r22, r18
    1140:	73 07       	cpc	r23, r19
    1142:	84 07       	cpc	r24, r20
    1144:	ba 07       	cpc	r27, r26
    1146:	20 f0       	brcs	.+8      	; 0x1150 <__divsf3_pse+0xae>
    1148:	62 1b       	sub	r22, r18
    114a:	73 0b       	sbc	r23, r19
    114c:	84 0b       	sbc	r24, r20
    114e:	ba 0b       	sbc	r27, r26
    1150:	ee 1f       	adc	r30, r30
    1152:	88 f7       	brcc	.-30     	; 0x1136 <__divsf3_pse+0x94>
    1154:	e0 95       	com	r30
    1156:	08 95       	ret

00001158 <__fixunssfsi>:
    1158:	0e 94 48 09 	call	0x1290	; 0x1290 <__fp_splitA>
    115c:	88 f0       	brcs	.+34     	; 0x1180 <__fixunssfsi+0x28>
    115e:	9f 57       	subi	r25, 0x7F	; 127
    1160:	98 f0       	brcs	.+38     	; 0x1188 <__fixunssfsi+0x30>
    1162:	b9 2f       	mov	r27, r25
    1164:	99 27       	eor	r25, r25
    1166:	b7 51       	subi	r27, 0x17	; 23
    1168:	b0 f0       	brcs	.+44     	; 0x1196 <__fixunssfsi+0x3e>
    116a:	e1 f0       	breq	.+56     	; 0x11a4 <__fixunssfsi+0x4c>
    116c:	66 0f       	add	r22, r22
    116e:	77 1f       	adc	r23, r23
    1170:	88 1f       	adc	r24, r24
    1172:	99 1f       	adc	r25, r25
    1174:	1a f0       	brmi	.+6      	; 0x117c <__fixunssfsi+0x24>
    1176:	ba 95       	dec	r27
    1178:	c9 f7       	brne	.-14     	; 0x116c <__fixunssfsi+0x14>
    117a:	14 c0       	rjmp	.+40     	; 0x11a4 <__fixunssfsi+0x4c>
    117c:	b1 30       	cpi	r27, 0x01	; 1
    117e:	91 f0       	breq	.+36     	; 0x11a4 <__fixunssfsi+0x4c>
    1180:	0e 94 62 09 	call	0x12c4	; 0x12c4 <__fp_zero>
    1184:	b1 e0       	ldi	r27, 0x01	; 1
    1186:	08 95       	ret
    1188:	0c 94 62 09 	jmp	0x12c4	; 0x12c4 <__fp_zero>
    118c:	67 2f       	mov	r22, r23
    118e:	78 2f       	mov	r23, r24
    1190:	88 27       	eor	r24, r24
    1192:	b8 5f       	subi	r27, 0xF8	; 248
    1194:	39 f0       	breq	.+14     	; 0x11a4 <__fixunssfsi+0x4c>
    1196:	b9 3f       	cpi	r27, 0xF9	; 249
    1198:	cc f3       	brlt	.-14     	; 0x118c <__fixunssfsi+0x34>
    119a:	86 95       	lsr	r24
    119c:	77 95       	ror	r23
    119e:	67 95       	ror	r22
    11a0:	b3 95       	inc	r27
    11a2:	d9 f7       	brne	.-10     	; 0x119a <__fixunssfsi+0x42>
    11a4:	3e f4       	brtc	.+14     	; 0x11b4 <__fixunssfsi+0x5c>
    11a6:	90 95       	com	r25
    11a8:	80 95       	com	r24
    11aa:	70 95       	com	r23
    11ac:	61 95       	neg	r22
    11ae:	7f 4f       	sbci	r23, 0xFF	; 255
    11b0:	8f 4f       	sbci	r24, 0xFF	; 255
    11b2:	9f 4f       	sbci	r25, 0xFF	; 255
    11b4:	08 95       	ret

000011b6 <__floatunsisf>:
    11b6:	e8 94       	clt
    11b8:	09 c0       	rjmp	.+18     	; 0x11cc <__floatsisf+0x12>

000011ba <__floatsisf>:
    11ba:	97 fb       	bst	r25, 7
    11bc:	3e f4       	brtc	.+14     	; 0x11cc <__floatsisf+0x12>
    11be:	90 95       	com	r25
    11c0:	80 95       	com	r24
    11c2:	70 95       	com	r23
    11c4:	61 95       	neg	r22
    11c6:	7f 4f       	sbci	r23, 0xFF	; 255
    11c8:	8f 4f       	sbci	r24, 0xFF	; 255
    11ca:	9f 4f       	sbci	r25, 0xFF	; 255
    11cc:	99 23       	and	r25, r25
    11ce:	a9 f0       	breq	.+42     	; 0x11fa <__floatsisf+0x40>
    11d0:	f9 2f       	mov	r31, r25
    11d2:	96 e9       	ldi	r25, 0x96	; 150
    11d4:	bb 27       	eor	r27, r27
    11d6:	93 95       	inc	r25
    11d8:	f6 95       	lsr	r31
    11da:	87 95       	ror	r24
    11dc:	77 95       	ror	r23
    11de:	67 95       	ror	r22
    11e0:	b7 95       	ror	r27
    11e2:	f1 11       	cpse	r31, r1
    11e4:	f8 cf       	rjmp	.-16     	; 0x11d6 <__floatsisf+0x1c>
    11e6:	fa f4       	brpl	.+62     	; 0x1226 <__floatsisf+0x6c>
    11e8:	bb 0f       	add	r27, r27
    11ea:	11 f4       	brne	.+4      	; 0x11f0 <__floatsisf+0x36>
    11ec:	60 ff       	sbrs	r22, 0
    11ee:	1b c0       	rjmp	.+54     	; 0x1226 <__floatsisf+0x6c>
    11f0:	6f 5f       	subi	r22, 0xFF	; 255
    11f2:	7f 4f       	sbci	r23, 0xFF	; 255
    11f4:	8f 4f       	sbci	r24, 0xFF	; 255
    11f6:	9f 4f       	sbci	r25, 0xFF	; 255
    11f8:	16 c0       	rjmp	.+44     	; 0x1226 <__floatsisf+0x6c>
    11fa:	88 23       	and	r24, r24
    11fc:	11 f0       	breq	.+4      	; 0x1202 <__floatsisf+0x48>
    11fe:	96 e9       	ldi	r25, 0x96	; 150
    1200:	11 c0       	rjmp	.+34     	; 0x1224 <__floatsisf+0x6a>
    1202:	77 23       	and	r23, r23
    1204:	21 f0       	breq	.+8      	; 0x120e <__floatsisf+0x54>
    1206:	9e e8       	ldi	r25, 0x8E	; 142
    1208:	87 2f       	mov	r24, r23
    120a:	76 2f       	mov	r23, r22
    120c:	05 c0       	rjmp	.+10     	; 0x1218 <__floatsisf+0x5e>
    120e:	66 23       	and	r22, r22
    1210:	71 f0       	breq	.+28     	; 0x122e <__floatsisf+0x74>
    1212:	96 e8       	ldi	r25, 0x86	; 134
    1214:	86 2f       	mov	r24, r22
    1216:	70 e0       	ldi	r23, 0x00	; 0
    1218:	60 e0       	ldi	r22, 0x00	; 0
    121a:	2a f0       	brmi	.+10     	; 0x1226 <__floatsisf+0x6c>
    121c:	9a 95       	dec	r25
    121e:	66 0f       	add	r22, r22
    1220:	77 1f       	adc	r23, r23
    1222:	88 1f       	adc	r24, r24
    1224:	da f7       	brpl	.-10     	; 0x121c <__floatsisf+0x62>
    1226:	88 0f       	add	r24, r24
    1228:	96 95       	lsr	r25
    122a:	87 95       	ror	r24
    122c:	97 f9       	bld	r25, 7
    122e:	08 95       	ret

00001230 <__fp_inf>:
    1230:	97 f9       	bld	r25, 7
    1232:	9f 67       	ori	r25, 0x7F	; 127
    1234:	80 e8       	ldi	r24, 0x80	; 128
    1236:	70 e0       	ldi	r23, 0x00	; 0
    1238:	60 e0       	ldi	r22, 0x00	; 0
    123a:	08 95       	ret

0000123c <__fp_nan>:
    123c:	9f ef       	ldi	r25, 0xFF	; 255
    123e:	80 ec       	ldi	r24, 0xC0	; 192
    1240:	08 95       	ret

00001242 <__fp_pscA>:
    1242:	00 24       	eor	r0, r0
    1244:	0a 94       	dec	r0
    1246:	16 16       	cp	r1, r22
    1248:	17 06       	cpc	r1, r23
    124a:	18 06       	cpc	r1, r24
    124c:	09 06       	cpc	r0, r25
    124e:	08 95       	ret

00001250 <__fp_pscB>:
    1250:	00 24       	eor	r0, r0
    1252:	0a 94       	dec	r0
    1254:	12 16       	cp	r1, r18
    1256:	13 06       	cpc	r1, r19
    1258:	14 06       	cpc	r1, r20
    125a:	05 06       	cpc	r0, r21
    125c:	08 95       	ret

0000125e <__fp_round>:
    125e:	09 2e       	mov	r0, r25
    1260:	03 94       	inc	r0
    1262:	00 0c       	add	r0, r0
    1264:	11 f4       	brne	.+4      	; 0x126a <__fp_round+0xc>
    1266:	88 23       	and	r24, r24
    1268:	52 f0       	brmi	.+20     	; 0x127e <__fp_round+0x20>
    126a:	bb 0f       	add	r27, r27
    126c:	40 f4       	brcc	.+16     	; 0x127e <__fp_round+0x20>
    126e:	bf 2b       	or	r27, r31
    1270:	11 f4       	brne	.+4      	; 0x1276 <__fp_round+0x18>
    1272:	60 ff       	sbrs	r22, 0
    1274:	04 c0       	rjmp	.+8      	; 0x127e <__fp_round+0x20>
    1276:	6f 5f       	subi	r22, 0xFF	; 255
    1278:	7f 4f       	sbci	r23, 0xFF	; 255
    127a:	8f 4f       	sbci	r24, 0xFF	; 255
    127c:	9f 4f       	sbci	r25, 0xFF	; 255
    127e:	08 95       	ret

00001280 <__fp_split3>:
    1280:	57 fd       	sbrc	r21, 7
    1282:	90 58       	subi	r25, 0x80	; 128
    1284:	44 0f       	add	r20, r20
    1286:	55 1f       	adc	r21, r21
    1288:	59 f0       	breq	.+22     	; 0x12a0 <__fp_splitA+0x10>
    128a:	5f 3f       	cpi	r21, 0xFF	; 255
    128c:	71 f0       	breq	.+28     	; 0x12aa <__fp_splitA+0x1a>
    128e:	47 95       	ror	r20

00001290 <__fp_splitA>:
    1290:	88 0f       	add	r24, r24
    1292:	97 fb       	bst	r25, 7
    1294:	99 1f       	adc	r25, r25
    1296:	61 f0       	breq	.+24     	; 0x12b0 <__fp_splitA+0x20>
    1298:	9f 3f       	cpi	r25, 0xFF	; 255
    129a:	79 f0       	breq	.+30     	; 0x12ba <__fp_splitA+0x2a>
    129c:	87 95       	ror	r24
    129e:	08 95       	ret
    12a0:	12 16       	cp	r1, r18
    12a2:	13 06       	cpc	r1, r19
    12a4:	14 06       	cpc	r1, r20
    12a6:	55 1f       	adc	r21, r21
    12a8:	f2 cf       	rjmp	.-28     	; 0x128e <__fp_split3+0xe>
    12aa:	46 95       	lsr	r20
    12ac:	f1 df       	rcall	.-30     	; 0x1290 <__fp_splitA>
    12ae:	08 c0       	rjmp	.+16     	; 0x12c0 <__fp_splitA+0x30>
    12b0:	16 16       	cp	r1, r22
    12b2:	17 06       	cpc	r1, r23
    12b4:	18 06       	cpc	r1, r24
    12b6:	99 1f       	adc	r25, r25
    12b8:	f1 cf       	rjmp	.-30     	; 0x129c <__fp_splitA+0xc>
    12ba:	86 95       	lsr	r24
    12bc:	71 05       	cpc	r23, r1
    12be:	61 05       	cpc	r22, r1
    12c0:	08 94       	sec
    12c2:	08 95       	ret

000012c4 <__fp_zero>:
    12c4:	e8 94       	clt

000012c6 <__fp_szero>:
    12c6:	bb 27       	eor	r27, r27
    12c8:	66 27       	eor	r22, r22
    12ca:	77 27       	eor	r23, r23
    12cc:	cb 01       	movw	r24, r22
    12ce:	97 f9       	bld	r25, 7
    12d0:	08 95       	ret

000012d2 <pow>:
    12d2:	fa 01       	movw	r30, r20
    12d4:	ee 0f       	add	r30, r30
    12d6:	ff 1f       	adc	r31, r31
    12d8:	30 96       	adiw	r30, 0x00	; 0
    12da:	21 05       	cpc	r18, r1
    12dc:	31 05       	cpc	r19, r1
    12de:	a1 f1       	breq	.+104    	; 0x1348 <pow+0x76>
    12e0:	61 15       	cp	r22, r1
    12e2:	71 05       	cpc	r23, r1
    12e4:	61 f4       	brne	.+24     	; 0x12fe <pow+0x2c>
    12e6:	80 38       	cpi	r24, 0x80	; 128
    12e8:	bf e3       	ldi	r27, 0x3F	; 63
    12ea:	9b 07       	cpc	r25, r27
    12ec:	49 f1       	breq	.+82     	; 0x1340 <pow+0x6e>
    12ee:	68 94       	set
    12f0:	90 38       	cpi	r25, 0x80	; 128
    12f2:	81 05       	cpc	r24, r1
    12f4:	61 f0       	breq	.+24     	; 0x130e <pow+0x3c>
    12f6:	80 38       	cpi	r24, 0x80	; 128
    12f8:	bf ef       	ldi	r27, 0xFF	; 255
    12fa:	9b 07       	cpc	r25, r27
    12fc:	41 f0       	breq	.+16     	; 0x130e <pow+0x3c>
    12fe:	99 23       	and	r25, r25
    1300:	4a f5       	brpl	.+82     	; 0x1354 <pow+0x82>
    1302:	ff 3f       	cpi	r31, 0xFF	; 255
    1304:	e1 05       	cpc	r30, r1
    1306:	31 05       	cpc	r19, r1
    1308:	21 05       	cpc	r18, r1
    130a:	19 f1       	breq	.+70     	; 0x1352 <pow+0x80>
    130c:	e8 94       	clt
    130e:	08 94       	sec
    1310:	e7 95       	ror	r30
    1312:	d9 01       	movw	r26, r18
    1314:	aa 23       	and	r26, r26
    1316:	29 f4       	brne	.+10     	; 0x1322 <pow+0x50>
    1318:	ab 2f       	mov	r26, r27
    131a:	be 2f       	mov	r27, r30
    131c:	f8 5f       	subi	r31, 0xF8	; 248
    131e:	d0 f3       	brcs	.-12     	; 0x1314 <pow+0x42>
    1320:	10 c0       	rjmp	.+32     	; 0x1342 <pow+0x70>
    1322:	ff 5f       	subi	r31, 0xFF	; 255
    1324:	70 f4       	brcc	.+28     	; 0x1342 <pow+0x70>
    1326:	a6 95       	lsr	r26
    1328:	e0 f7       	brcc	.-8      	; 0x1322 <pow+0x50>
    132a:	f7 39       	cpi	r31, 0x97	; 151
    132c:	50 f0       	brcs	.+20     	; 0x1342 <pow+0x70>
    132e:	19 f0       	breq	.+6      	; 0x1336 <pow+0x64>
    1330:	ff 3a       	cpi	r31, 0xAF	; 175
    1332:	38 f4       	brcc	.+14     	; 0x1342 <pow+0x70>
    1334:	9f 77       	andi	r25, 0x7F	; 127
    1336:	9f 93       	push	r25
    1338:	0d d0       	rcall	.+26     	; 0x1354 <pow+0x82>
    133a:	0f 90       	pop	r0
    133c:	07 fc       	sbrc	r0, 7
    133e:	90 58       	subi	r25, 0x80	; 128
    1340:	08 95       	ret
    1342:	46 f0       	brts	.+16     	; 0x1354 <pow+0x82>
    1344:	0c 94 1e 09 	jmp	0x123c	; 0x123c <__fp_nan>
    1348:	60 e0       	ldi	r22, 0x00	; 0
    134a:	70 e0       	ldi	r23, 0x00	; 0
    134c:	80 e8       	ldi	r24, 0x80	; 128
    134e:	9f e3       	ldi	r25, 0x3F	; 63
    1350:	08 95       	ret
    1352:	4f e7       	ldi	r20, 0x7F	; 127
    1354:	9f 77       	andi	r25, 0x7F	; 127
    1356:	5f 93       	push	r21
    1358:	4f 93       	push	r20
    135a:	3f 93       	push	r19
    135c:	2f 93       	push	r18
    135e:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <log>
    1362:	2f 91       	pop	r18
    1364:	3f 91       	pop	r19
    1366:	4f 91       	pop	r20
    1368:	5f 91       	pop	r21
    136a:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <__mulsf3>
    136e:	0c 94 c1 09 	jmp	0x1382	; 0x1382 <exp>
    1372:	29 f4       	brne	.+10     	; 0x137e <pow+0xac>
    1374:	16 f0       	brts	.+4      	; 0x137a <pow+0xa8>
    1376:	0c 94 18 09 	jmp	0x1230	; 0x1230 <__fp_inf>
    137a:	0c 94 62 09 	jmp	0x12c4	; 0x12c4 <__fp_zero>
    137e:	0c 94 1e 09 	jmp	0x123c	; 0x123c <__fp_nan>

00001382 <exp>:
    1382:	0e 94 48 09 	call	0x1290	; 0x1290 <__fp_splitA>
    1386:	a8 f3       	brcs	.-22     	; 0x1372 <pow+0xa0>
    1388:	96 38       	cpi	r25, 0x86	; 134
    138a:	a0 f7       	brcc	.-24     	; 0x1374 <pow+0xa2>
    138c:	07 f8       	bld	r0, 7
    138e:	0f 92       	push	r0
    1390:	e8 94       	clt
    1392:	2b e3       	ldi	r18, 0x3B	; 59
    1394:	3a ea       	ldi	r19, 0xAA	; 170
    1396:	48 eb       	ldi	r20, 0xB8	; 184
    1398:	5f e7       	ldi	r21, 0x7F	; 127
    139a:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <__mulsf3_pse>
    139e:	0f 92       	push	r0
    13a0:	0f 92       	push	r0
    13a2:	0f 92       	push	r0
    13a4:	4d b7       	in	r20, 0x3d	; 61
    13a6:	5e b7       	in	r21, 0x3e	; 62
    13a8:	0f 92       	push	r0
    13aa:	0e 94 ac 0a 	call	0x1558	; 0x1558 <modf>
    13ae:	e8 e6       	ldi	r30, 0x68	; 104
    13b0:	f0 e0       	ldi	r31, 0x00	; 0
    13b2:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <__fp_powser>
    13b6:	4f 91       	pop	r20
    13b8:	5f 91       	pop	r21
    13ba:	ef 91       	pop	r30
    13bc:	ff 91       	pop	r31
    13be:	e5 95       	asr	r30
    13c0:	ee 1f       	adc	r30, r30
    13c2:	ff 1f       	adc	r31, r31
    13c4:	49 f0       	breq	.+18     	; 0x13d8 <exp+0x56>
    13c6:	fe 57       	subi	r31, 0x7E	; 126
    13c8:	e0 68       	ori	r30, 0x80	; 128
    13ca:	44 27       	eor	r20, r20
    13cc:	ee 0f       	add	r30, r30
    13ce:	44 1f       	adc	r20, r20
    13d0:	fa 95       	dec	r31
    13d2:	e1 f7       	brne	.-8      	; 0x13cc <exp+0x4a>
    13d4:	41 95       	neg	r20
    13d6:	55 0b       	sbc	r21, r21
    13d8:	0e 94 26 0a 	call	0x144c	; 0x144c <ldexp>
    13dc:	0f 90       	pop	r0
    13de:	07 fe       	sbrs	r0, 7
    13e0:	0c 94 1a 0a 	jmp	0x1434	; 0x1434 <inverse>
    13e4:	08 95       	ret

000013e6 <__fp_powser>:
    13e6:	df 93       	push	r29
    13e8:	cf 93       	push	r28
    13ea:	1f 93       	push	r17
    13ec:	0f 93       	push	r16
    13ee:	ff 92       	push	r15
    13f0:	ef 92       	push	r14
    13f2:	df 92       	push	r13
    13f4:	7b 01       	movw	r14, r22
    13f6:	8c 01       	movw	r16, r24
    13f8:	68 94       	set
    13fa:	06 c0       	rjmp	.+12     	; 0x1408 <__fp_powser+0x22>
    13fc:	da 2e       	mov	r13, r26
    13fe:	ef 01       	movw	r28, r30
    1400:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <__mulsf3x>
    1404:	fe 01       	movw	r30, r28
    1406:	e8 94       	clt
    1408:	a5 91       	lpm	r26, Z+
    140a:	25 91       	lpm	r18, Z+
    140c:	35 91       	lpm	r19, Z+
    140e:	45 91       	lpm	r20, Z+
    1410:	55 91       	lpm	r21, Z+
    1412:	a6 f3       	brts	.-24     	; 0x13fc <__fp_powser+0x16>
    1414:	ef 01       	movw	r28, r30
    1416:	0e 94 65 0b 	call	0x16ca	; 0x16ca <__addsf3x>
    141a:	fe 01       	movw	r30, r28
    141c:	97 01       	movw	r18, r14
    141e:	a8 01       	movw	r20, r16
    1420:	da 94       	dec	r13
    1422:	69 f7       	brne	.-38     	; 0x13fe <__fp_powser+0x18>
    1424:	df 90       	pop	r13
    1426:	ef 90       	pop	r14
    1428:	ff 90       	pop	r15
    142a:	0f 91       	pop	r16
    142c:	1f 91       	pop	r17
    142e:	cf 91       	pop	r28
    1430:	df 91       	pop	r29
    1432:	08 95       	ret

00001434 <inverse>:
    1434:	9b 01       	movw	r18, r22
    1436:	ac 01       	movw	r20, r24
    1438:	60 e0       	ldi	r22, 0x00	; 0
    143a:	70 e0       	ldi	r23, 0x00	; 0
    143c:	80 e8       	ldi	r24, 0x80	; 128
    143e:	9f e3       	ldi	r25, 0x3F	; 63
    1440:	0c 94 3a 08 	jmp	0x1074	; 0x1074 <__divsf3>
    1444:	0c 94 18 09 	jmp	0x1230	; 0x1230 <__fp_inf>
    1448:	0c 94 ba 0b 	jmp	0x1774	; 0x1774 <__fp_mpack>

0000144c <ldexp>:
    144c:	0e 94 48 09 	call	0x1290	; 0x1290 <__fp_splitA>
    1450:	d8 f3       	brcs	.-10     	; 0x1448 <inverse+0x14>
    1452:	99 23       	and	r25, r25
    1454:	c9 f3       	breq	.-14     	; 0x1448 <inverse+0x14>
    1456:	94 0f       	add	r25, r20
    1458:	51 1d       	adc	r21, r1
    145a:	a3 f3       	brvs	.-24     	; 0x1444 <inverse+0x10>
    145c:	91 50       	subi	r25, 0x01	; 1
    145e:	50 40       	sbci	r21, 0x00	; 0
    1460:	94 f0       	brlt	.+36     	; 0x1486 <ldexp+0x3a>
    1462:	59 f0       	breq	.+22     	; 0x147a <ldexp+0x2e>
    1464:	88 23       	and	r24, r24
    1466:	32 f0       	brmi	.+12     	; 0x1474 <ldexp+0x28>
    1468:	66 0f       	add	r22, r22
    146a:	77 1f       	adc	r23, r23
    146c:	88 1f       	adc	r24, r24
    146e:	91 50       	subi	r25, 0x01	; 1
    1470:	50 40       	sbci	r21, 0x00	; 0
    1472:	c1 f7       	brne	.-16     	; 0x1464 <ldexp+0x18>
    1474:	9e 3f       	cpi	r25, 0xFE	; 254
    1476:	51 05       	cpc	r21, r1
    1478:	2c f7       	brge	.-54     	; 0x1444 <inverse+0x10>
    147a:	88 0f       	add	r24, r24
    147c:	91 1d       	adc	r25, r1
    147e:	96 95       	lsr	r25
    1480:	87 95       	ror	r24
    1482:	97 f9       	bld	r25, 7
    1484:	08 95       	ret
    1486:	5f 3f       	cpi	r21, 0xFF	; 255
    1488:	ac f0       	brlt	.+42     	; 0x14b4 <ldexp+0x68>
    148a:	98 3e       	cpi	r25, 0xE8	; 232
    148c:	9c f0       	brlt	.+38     	; 0x14b4 <ldexp+0x68>
    148e:	bb 27       	eor	r27, r27
    1490:	86 95       	lsr	r24
    1492:	77 95       	ror	r23
    1494:	67 95       	ror	r22
    1496:	b7 95       	ror	r27
    1498:	08 f4       	brcc	.+2      	; 0x149c <ldexp+0x50>
    149a:	b1 60       	ori	r27, 0x01	; 1
    149c:	93 95       	inc	r25
    149e:	c1 f7       	brne	.-16     	; 0x1490 <ldexp+0x44>
    14a0:	bb 0f       	add	r27, r27
    14a2:	58 f7       	brcc	.-42     	; 0x147a <ldexp+0x2e>
    14a4:	11 f4       	brne	.+4      	; 0x14aa <ldexp+0x5e>
    14a6:	60 ff       	sbrs	r22, 0
    14a8:	e8 cf       	rjmp	.-48     	; 0x147a <ldexp+0x2e>
    14aa:	6f 5f       	subi	r22, 0xFF	; 255
    14ac:	7f 4f       	sbci	r23, 0xFF	; 255
    14ae:	8f 4f       	sbci	r24, 0xFF	; 255
    14b0:	9f 4f       	sbci	r25, 0xFF	; 255
    14b2:	e3 cf       	rjmp	.-58     	; 0x147a <ldexp+0x2e>
    14b4:	0c 94 63 09 	jmp	0x12c6	; 0x12c6 <__fp_szero>
    14b8:	16 f0       	brts	.+4      	; 0x14be <ldexp+0x72>
    14ba:	0c 94 ba 0b 	jmp	0x1774	; 0x1774 <__fp_mpack>
    14be:	0c 94 1e 09 	jmp	0x123c	; 0x123c <__fp_nan>
    14c2:	68 94       	set
    14c4:	0c 94 18 09 	jmp	0x1230	; 0x1230 <__fp_inf>

000014c8 <log>:
    14c8:	0e 94 48 09 	call	0x1290	; 0x1290 <__fp_splitA>
    14cc:	a8 f3       	brcs	.-22     	; 0x14b8 <ldexp+0x6c>
    14ce:	99 23       	and	r25, r25
    14d0:	c1 f3       	breq	.-16     	; 0x14c2 <ldexp+0x76>
    14d2:	ae f3       	brts	.-22     	; 0x14be <ldexp+0x72>
    14d4:	df 93       	push	r29
    14d6:	cf 93       	push	r28
    14d8:	1f 93       	push	r17
    14da:	0f 93       	push	r16
    14dc:	ff 92       	push	r15
    14de:	c9 2f       	mov	r28, r25
    14e0:	dd 27       	eor	r29, r29
    14e2:	88 23       	and	r24, r24
    14e4:	2a f0       	brmi	.+10     	; 0x14f0 <log+0x28>
    14e6:	21 97       	sbiw	r28, 0x01	; 1
    14e8:	66 0f       	add	r22, r22
    14ea:	77 1f       	adc	r23, r23
    14ec:	88 1f       	adc	r24, r24
    14ee:	da f7       	brpl	.-10     	; 0x14e6 <log+0x1e>
    14f0:	20 e0       	ldi	r18, 0x00	; 0
    14f2:	30 e0       	ldi	r19, 0x00	; 0
    14f4:	40 e8       	ldi	r20, 0x80	; 128
    14f6:	5f eb       	ldi	r21, 0xBF	; 191
    14f8:	9f e3       	ldi	r25, 0x3F	; 63
    14fa:	88 39       	cpi	r24, 0x98	; 152
    14fc:	20 f0       	brcs	.+8      	; 0x1506 <log+0x3e>
    14fe:	80 3e       	cpi	r24, 0xE0	; 224
    1500:	38 f0       	brcs	.+14     	; 0x1510 <log+0x48>
    1502:	21 96       	adiw	r28, 0x01	; 1
    1504:	8f 77       	andi	r24, 0x7F	; 127
    1506:	0e 94 4e 0b 	call	0x169c	; 0x169c <__addsf3>
    150a:	e0 e9       	ldi	r30, 0x90	; 144
    150c:	f0 e0       	ldi	r31, 0x00	; 0
    150e:	04 c0       	rjmp	.+8      	; 0x1518 <log+0x50>
    1510:	0e 94 4e 0b 	call	0x169c	; 0x169c <__addsf3>
    1514:	ed eb       	ldi	r30, 0xBD	; 189
    1516:	f0 e0       	ldi	r31, 0x00	; 0
    1518:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <__fp_powser>
    151c:	8b 01       	movw	r16, r22
    151e:	be 01       	movw	r22, r28
    1520:	ec 01       	movw	r28, r24
    1522:	fb 2e       	mov	r15, r27
    1524:	6f 57       	subi	r22, 0x7F	; 127
    1526:	71 09       	sbc	r23, r1
    1528:	75 95       	asr	r23
    152a:	77 1f       	adc	r23, r23
    152c:	88 0b       	sbc	r24, r24
    152e:	99 0b       	sbc	r25, r25
    1530:	0e 94 dd 08 	call	0x11ba	; 0x11ba <__floatsisf>
    1534:	28 e1       	ldi	r18, 0x18	; 24
    1536:	32 e7       	ldi	r19, 0x72	; 114
    1538:	41 e3       	ldi	r20, 0x31	; 49
    153a:	5f e3       	ldi	r21, 0x3F	; 63
    153c:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <__mulsf3x>
    1540:	af 2d       	mov	r26, r15
    1542:	98 01       	movw	r18, r16
    1544:	ae 01       	movw	r20, r28
    1546:	ff 90       	pop	r15
    1548:	0f 91       	pop	r16
    154a:	1f 91       	pop	r17
    154c:	cf 91       	pop	r28
    154e:	df 91       	pop	r29
    1550:	0e 94 65 0b 	call	0x16ca	; 0x16ca <__addsf3x>
    1554:	0c 94 2f 09 	jmp	0x125e	; 0x125e <__fp_round>

00001558 <modf>:
    1558:	fa 01       	movw	r30, r20
    155a:	dc 01       	movw	r26, r24
    155c:	aa 0f       	add	r26, r26
    155e:	bb 1f       	adc	r27, r27
    1560:	9b 01       	movw	r18, r22
    1562:	ac 01       	movw	r20, r24
    1564:	bf 57       	subi	r27, 0x7F	; 127
    1566:	28 f4       	brcc	.+10     	; 0x1572 <modf+0x1a>
    1568:	22 27       	eor	r18, r18
    156a:	33 27       	eor	r19, r19
    156c:	44 27       	eor	r20, r20
    156e:	50 78       	andi	r21, 0x80	; 128
    1570:	20 c0       	rjmp	.+64     	; 0x15b2 <modf+0x5a>
    1572:	b7 51       	subi	r27, 0x17	; 23
    1574:	90 f4       	brcc	.+36     	; 0x159a <modf+0x42>
    1576:	ab 2f       	mov	r26, r27
    1578:	00 24       	eor	r0, r0
    157a:	46 95       	lsr	r20
    157c:	37 95       	ror	r19
    157e:	27 95       	ror	r18
    1580:	01 1c       	adc	r0, r1
    1582:	a3 95       	inc	r26
    1584:	d2 f3       	brmi	.-12     	; 0x157a <modf+0x22>
    1586:	00 20       	and	r0, r0
    1588:	71 f0       	breq	.+28     	; 0x15a6 <modf+0x4e>
    158a:	22 0f       	add	r18, r18
    158c:	33 1f       	adc	r19, r19
    158e:	44 1f       	adc	r20, r20
    1590:	b3 95       	inc	r27
    1592:	da f3       	brmi	.-10     	; 0x158a <modf+0x32>
    1594:	0e d0       	rcall	.+28     	; 0x15b2 <modf+0x5a>
    1596:	0c 94 4d 0b 	jmp	0x169a	; 0x169a <__subsf3>
    159a:	61 30       	cpi	r22, 0x01	; 1
    159c:	71 05       	cpc	r23, r1
    159e:	a0 e8       	ldi	r26, 0x80	; 128
    15a0:	8a 07       	cpc	r24, r26
    15a2:	b9 46       	sbci	r27, 0x69	; 105
    15a4:	30 f4       	brcc	.+12     	; 0x15b2 <modf+0x5a>
    15a6:	9b 01       	movw	r18, r22
    15a8:	ac 01       	movw	r20, r24
    15aa:	66 27       	eor	r22, r22
    15ac:	77 27       	eor	r23, r23
    15ae:	88 27       	eor	r24, r24
    15b0:	90 78       	andi	r25, 0x80	; 128
    15b2:	30 96       	adiw	r30, 0x00	; 0
    15b4:	21 f0       	breq	.+8      	; 0x15be <modf+0x66>
    15b6:	20 83       	st	Z, r18
    15b8:	31 83       	std	Z+1, r19	; 0x01
    15ba:	42 83       	std	Z+2, r20	; 0x02
    15bc:	53 83       	std	Z+3, r21	; 0x03
    15be:	08 95       	ret

000015c0 <__mulsf3>:
    15c0:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <__mulsf3x>
    15c4:	0c 94 2f 09 	jmp	0x125e	; 0x125e <__fp_round>
    15c8:	0e 94 21 09 	call	0x1242	; 0x1242 <__fp_pscA>
    15cc:	38 f0       	brcs	.+14     	; 0x15dc <__mulsf3+0x1c>
    15ce:	0e 94 28 09 	call	0x1250	; 0x1250 <__fp_pscB>
    15d2:	20 f0       	brcs	.+8      	; 0x15dc <__mulsf3+0x1c>
    15d4:	95 23       	and	r25, r21
    15d6:	11 f0       	breq	.+4      	; 0x15dc <__mulsf3+0x1c>
    15d8:	0c 94 18 09 	jmp	0x1230	; 0x1230 <__fp_inf>
    15dc:	0c 94 1e 09 	jmp	0x123c	; 0x123c <__fp_nan>
    15e0:	11 24       	eor	r1, r1
    15e2:	0c 94 63 09 	jmp	0x12c6	; 0x12c6 <__fp_szero>

000015e6 <__mulsf3x>:
    15e6:	0e 94 40 09 	call	0x1280	; 0x1280 <__fp_split3>
    15ea:	70 f3       	brcs	.-36     	; 0x15c8 <__mulsf3+0x8>

000015ec <__mulsf3_pse>:
    15ec:	95 9f       	mul	r25, r21
    15ee:	c1 f3       	breq	.-16     	; 0x15e0 <__mulsf3+0x20>
    15f0:	95 0f       	add	r25, r21
    15f2:	50 e0       	ldi	r21, 0x00	; 0
    15f4:	55 1f       	adc	r21, r21
    15f6:	62 9f       	mul	r22, r18
    15f8:	f0 01       	movw	r30, r0
    15fa:	72 9f       	mul	r23, r18
    15fc:	bb 27       	eor	r27, r27
    15fe:	f0 0d       	add	r31, r0
    1600:	b1 1d       	adc	r27, r1
    1602:	63 9f       	mul	r22, r19
    1604:	aa 27       	eor	r26, r26
    1606:	f0 0d       	add	r31, r0
    1608:	b1 1d       	adc	r27, r1
    160a:	aa 1f       	adc	r26, r26
    160c:	64 9f       	mul	r22, r20
    160e:	66 27       	eor	r22, r22
    1610:	b0 0d       	add	r27, r0
    1612:	a1 1d       	adc	r26, r1
    1614:	66 1f       	adc	r22, r22
    1616:	82 9f       	mul	r24, r18
    1618:	22 27       	eor	r18, r18
    161a:	b0 0d       	add	r27, r0
    161c:	a1 1d       	adc	r26, r1
    161e:	62 1f       	adc	r22, r18
    1620:	73 9f       	mul	r23, r19
    1622:	b0 0d       	add	r27, r0
    1624:	a1 1d       	adc	r26, r1
    1626:	62 1f       	adc	r22, r18
    1628:	83 9f       	mul	r24, r19
    162a:	a0 0d       	add	r26, r0
    162c:	61 1d       	adc	r22, r1
    162e:	22 1f       	adc	r18, r18
    1630:	74 9f       	mul	r23, r20
    1632:	33 27       	eor	r19, r19
    1634:	a0 0d       	add	r26, r0
    1636:	61 1d       	adc	r22, r1
    1638:	23 1f       	adc	r18, r19
    163a:	84 9f       	mul	r24, r20
    163c:	60 0d       	add	r22, r0
    163e:	21 1d       	adc	r18, r1
    1640:	82 2f       	mov	r24, r18
    1642:	76 2f       	mov	r23, r22
    1644:	6a 2f       	mov	r22, r26
    1646:	11 24       	eor	r1, r1
    1648:	9f 57       	subi	r25, 0x7F	; 127
    164a:	50 40       	sbci	r21, 0x00	; 0
    164c:	9a f0       	brmi	.+38     	; 0x1674 <__mulsf3_pse+0x88>
    164e:	f1 f0       	breq	.+60     	; 0x168c <__mulsf3_pse+0xa0>
    1650:	88 23       	and	r24, r24
    1652:	4a f0       	brmi	.+18     	; 0x1666 <__mulsf3_pse+0x7a>
    1654:	ee 0f       	add	r30, r30
    1656:	ff 1f       	adc	r31, r31
    1658:	bb 1f       	adc	r27, r27
    165a:	66 1f       	adc	r22, r22
    165c:	77 1f       	adc	r23, r23
    165e:	88 1f       	adc	r24, r24
    1660:	91 50       	subi	r25, 0x01	; 1
    1662:	50 40       	sbci	r21, 0x00	; 0
    1664:	a9 f7       	brne	.-22     	; 0x1650 <__mulsf3_pse+0x64>
    1666:	9e 3f       	cpi	r25, 0xFE	; 254
    1668:	51 05       	cpc	r21, r1
    166a:	80 f0       	brcs	.+32     	; 0x168c <__mulsf3_pse+0xa0>
    166c:	0c 94 18 09 	jmp	0x1230	; 0x1230 <__fp_inf>
    1670:	0c 94 63 09 	jmp	0x12c6	; 0x12c6 <__fp_szero>
    1674:	5f 3f       	cpi	r21, 0xFF	; 255
    1676:	e4 f3       	brlt	.-8      	; 0x1670 <__mulsf3_pse+0x84>
    1678:	98 3e       	cpi	r25, 0xE8	; 232
    167a:	d4 f3       	brlt	.-12     	; 0x1670 <__mulsf3_pse+0x84>
    167c:	86 95       	lsr	r24
    167e:	77 95       	ror	r23
    1680:	67 95       	ror	r22
    1682:	b7 95       	ror	r27
    1684:	f7 95       	ror	r31
    1686:	e7 95       	ror	r30
    1688:	9f 5f       	subi	r25, 0xFF	; 255
    168a:	c1 f7       	brne	.-16     	; 0x167c <__mulsf3_pse+0x90>
    168c:	fe 2b       	or	r31, r30
    168e:	88 0f       	add	r24, r24
    1690:	91 1d       	adc	r25, r1
    1692:	96 95       	lsr	r25
    1694:	87 95       	ror	r24
    1696:	97 f9       	bld	r25, 7
    1698:	08 95       	ret

0000169a <__subsf3>:
    169a:	50 58       	subi	r21, 0x80	; 128

0000169c <__addsf3>:
    169c:	bb 27       	eor	r27, r27
    169e:	aa 27       	eor	r26, r26
    16a0:	0e 94 65 0b 	call	0x16ca	; 0x16ca <__addsf3x>
    16a4:	0c 94 2f 09 	jmp	0x125e	; 0x125e <__fp_round>
    16a8:	0e 94 21 09 	call	0x1242	; 0x1242 <__fp_pscA>
    16ac:	38 f0       	brcs	.+14     	; 0x16bc <__addsf3+0x20>
    16ae:	0e 94 28 09 	call	0x1250	; 0x1250 <__fp_pscB>
    16b2:	20 f0       	brcs	.+8      	; 0x16bc <__addsf3+0x20>
    16b4:	39 f4       	brne	.+14     	; 0x16c4 <__addsf3+0x28>
    16b6:	9f 3f       	cpi	r25, 0xFF	; 255
    16b8:	19 f4       	brne	.+6      	; 0x16c0 <__addsf3+0x24>
    16ba:	26 f4       	brtc	.+8      	; 0x16c4 <__addsf3+0x28>
    16bc:	0c 94 1e 09 	jmp	0x123c	; 0x123c <__fp_nan>
    16c0:	0e f4       	brtc	.+2      	; 0x16c4 <__addsf3+0x28>
    16c2:	e0 95       	com	r30
    16c4:	e7 fb       	bst	r30, 7
    16c6:	0c 94 18 09 	jmp	0x1230	; 0x1230 <__fp_inf>

000016ca <__addsf3x>:
    16ca:	e9 2f       	mov	r30, r25
    16cc:	0e 94 40 09 	call	0x1280	; 0x1280 <__fp_split3>
    16d0:	58 f3       	brcs	.-42     	; 0x16a8 <__addsf3+0xc>
    16d2:	ba 17       	cp	r27, r26
    16d4:	62 07       	cpc	r22, r18
    16d6:	73 07       	cpc	r23, r19
    16d8:	84 07       	cpc	r24, r20
    16da:	95 07       	cpc	r25, r21
    16dc:	20 f0       	brcs	.+8      	; 0x16e6 <__addsf3x+0x1c>
    16de:	79 f4       	brne	.+30     	; 0x16fe <__addsf3x+0x34>
    16e0:	a6 f5       	brtc	.+104    	; 0x174a <__addsf3x+0x80>
    16e2:	0c 94 62 09 	jmp	0x12c4	; 0x12c4 <__fp_zero>
    16e6:	0e f4       	brtc	.+2      	; 0x16ea <__addsf3x+0x20>
    16e8:	e0 95       	com	r30
    16ea:	0b 2e       	mov	r0, r27
    16ec:	ba 2f       	mov	r27, r26
    16ee:	a0 2d       	mov	r26, r0
    16f0:	0b 01       	movw	r0, r22
    16f2:	b9 01       	movw	r22, r18
    16f4:	90 01       	movw	r18, r0
    16f6:	0c 01       	movw	r0, r24
    16f8:	ca 01       	movw	r24, r20
    16fa:	a0 01       	movw	r20, r0
    16fc:	11 24       	eor	r1, r1
    16fe:	ff 27       	eor	r31, r31
    1700:	59 1b       	sub	r21, r25
    1702:	99 f0       	breq	.+38     	; 0x172a <__addsf3x+0x60>
    1704:	59 3f       	cpi	r21, 0xF9	; 249
    1706:	50 f4       	brcc	.+20     	; 0x171c <__addsf3x+0x52>
    1708:	50 3e       	cpi	r21, 0xE0	; 224
    170a:	68 f1       	brcs	.+90     	; 0x1766 <__addsf3x+0x9c>
    170c:	1a 16       	cp	r1, r26
    170e:	f0 40       	sbci	r31, 0x00	; 0
    1710:	a2 2f       	mov	r26, r18
    1712:	23 2f       	mov	r18, r19
    1714:	34 2f       	mov	r19, r20
    1716:	44 27       	eor	r20, r20
    1718:	58 5f       	subi	r21, 0xF8	; 248
    171a:	f3 cf       	rjmp	.-26     	; 0x1702 <__addsf3x+0x38>
    171c:	46 95       	lsr	r20
    171e:	37 95       	ror	r19
    1720:	27 95       	ror	r18
    1722:	a7 95       	ror	r26
    1724:	f0 40       	sbci	r31, 0x00	; 0
    1726:	53 95       	inc	r21
    1728:	c9 f7       	brne	.-14     	; 0x171c <__addsf3x+0x52>
    172a:	7e f4       	brtc	.+30     	; 0x174a <__addsf3x+0x80>
    172c:	1f 16       	cp	r1, r31
    172e:	ba 0b       	sbc	r27, r26
    1730:	62 0b       	sbc	r22, r18
    1732:	73 0b       	sbc	r23, r19
    1734:	84 0b       	sbc	r24, r20
    1736:	ba f0       	brmi	.+46     	; 0x1766 <__addsf3x+0x9c>
    1738:	91 50       	subi	r25, 0x01	; 1
    173a:	a1 f0       	breq	.+40     	; 0x1764 <__addsf3x+0x9a>
    173c:	ff 0f       	add	r31, r31
    173e:	bb 1f       	adc	r27, r27
    1740:	66 1f       	adc	r22, r22
    1742:	77 1f       	adc	r23, r23
    1744:	88 1f       	adc	r24, r24
    1746:	c2 f7       	brpl	.-16     	; 0x1738 <__addsf3x+0x6e>
    1748:	0e c0       	rjmp	.+28     	; 0x1766 <__addsf3x+0x9c>
    174a:	ba 0f       	add	r27, r26
    174c:	62 1f       	adc	r22, r18
    174e:	73 1f       	adc	r23, r19
    1750:	84 1f       	adc	r24, r20
    1752:	48 f4       	brcc	.+18     	; 0x1766 <__addsf3x+0x9c>
    1754:	87 95       	ror	r24
    1756:	77 95       	ror	r23
    1758:	67 95       	ror	r22
    175a:	b7 95       	ror	r27
    175c:	f7 95       	ror	r31
    175e:	9e 3f       	cpi	r25, 0xFE	; 254
    1760:	08 f0       	brcs	.+2      	; 0x1764 <__addsf3x+0x9a>
    1762:	b0 cf       	rjmp	.-160    	; 0x16c4 <__addsf3+0x28>
    1764:	93 95       	inc	r25
    1766:	88 0f       	add	r24, r24
    1768:	08 f0       	brcs	.+2      	; 0x176c <__addsf3x+0xa2>
    176a:	99 27       	eor	r25, r25
    176c:	ee 0f       	add	r30, r30
    176e:	97 95       	ror	r25
    1770:	87 95       	ror	r24
    1772:	08 95       	ret

00001774 <__fp_mpack>:
    1774:	9f 3f       	cpi	r25, 0xFF	; 255
    1776:	31 f0       	breq	.+12     	; 0x1784 <__fp_mpack_finite+0xc>

00001778 <__fp_mpack_finite>:
    1778:	91 50       	subi	r25, 0x01	; 1
    177a:	20 f4       	brcc	.+8      	; 0x1784 <__fp_mpack_finite+0xc>
    177c:	87 95       	ror	r24
    177e:	77 95       	ror	r23
    1780:	67 95       	ror	r22
    1782:	b7 95       	ror	r27
    1784:	88 0f       	add	r24, r24
    1786:	91 1d       	adc	r25, r1
    1788:	96 95       	lsr	r25
    178a:	87 95       	ror	r24
    178c:	97 f9       	bld	r25, 7
    178e:	08 95       	ret

00001790 <__udivmodsi4>:
    1790:	a1 e2       	ldi	r26, 0x21	; 33
    1792:	1a 2e       	mov	r1, r26
    1794:	aa 1b       	sub	r26, r26
    1796:	bb 1b       	sub	r27, r27
    1798:	fd 01       	movw	r30, r26
    179a:	0d c0       	rjmp	.+26     	; 0x17b6 <__udivmodsi4_ep>

0000179c <__udivmodsi4_loop>:
    179c:	aa 1f       	adc	r26, r26
    179e:	bb 1f       	adc	r27, r27
    17a0:	ee 1f       	adc	r30, r30
    17a2:	ff 1f       	adc	r31, r31
    17a4:	a2 17       	cp	r26, r18
    17a6:	b3 07       	cpc	r27, r19
    17a8:	e4 07       	cpc	r30, r20
    17aa:	f5 07       	cpc	r31, r21
    17ac:	20 f0       	brcs	.+8      	; 0x17b6 <__udivmodsi4_ep>
    17ae:	a2 1b       	sub	r26, r18
    17b0:	b3 0b       	sbc	r27, r19
    17b2:	e4 0b       	sbc	r30, r20
    17b4:	f5 0b       	sbc	r31, r21

000017b6 <__udivmodsi4_ep>:
    17b6:	66 1f       	adc	r22, r22
    17b8:	77 1f       	adc	r23, r23
    17ba:	88 1f       	adc	r24, r24
    17bc:	99 1f       	adc	r25, r25
    17be:	1a 94       	dec	r1
    17c0:	69 f7       	brne	.-38     	; 0x179c <__udivmodsi4_loop>
    17c2:	60 95       	com	r22
    17c4:	70 95       	com	r23
    17c6:	80 95       	com	r24
    17c8:	90 95       	com	r25
    17ca:	9b 01       	movw	r18, r22
    17cc:	ac 01       	movw	r20, r24
    17ce:	bd 01       	movw	r22, r26
    17d0:	cf 01       	movw	r24, r30
    17d2:	08 95       	ret

000017d4 <__divmodsi4>:
    17d4:	05 2e       	mov	r0, r21
    17d6:	97 fb       	bst	r25, 7
    17d8:	1e f4       	brtc	.+6      	; 0x17e0 <__divmodsi4+0xc>
    17da:	00 94       	com	r0
    17dc:	0e 94 01 0c 	call	0x1802	; 0x1802 <__negsi2>
    17e0:	57 fd       	sbrc	r21, 7
    17e2:	07 d0       	rcall	.+14     	; 0x17f2 <__divmodsi4_neg2>
    17e4:	0e 94 c8 0b 	call	0x1790	; 0x1790 <__udivmodsi4>
    17e8:	07 fc       	sbrc	r0, 7
    17ea:	03 d0       	rcall	.+6      	; 0x17f2 <__divmodsi4_neg2>
    17ec:	4e f4       	brtc	.+18     	; 0x1800 <__divmodsi4_exit>
    17ee:	0c 94 01 0c 	jmp	0x1802	; 0x1802 <__negsi2>

000017f2 <__divmodsi4_neg2>:
    17f2:	50 95       	com	r21
    17f4:	40 95       	com	r20
    17f6:	30 95       	com	r19
    17f8:	21 95       	neg	r18
    17fa:	3f 4f       	sbci	r19, 0xFF	; 255
    17fc:	4f 4f       	sbci	r20, 0xFF	; 255
    17fe:	5f 4f       	sbci	r21, 0xFF	; 255

00001800 <__divmodsi4_exit>:
    1800:	08 95       	ret

00001802 <__negsi2>:
    1802:	90 95       	com	r25
    1804:	80 95       	com	r24
    1806:	70 95       	com	r23
    1808:	61 95       	neg	r22
    180a:	7f 4f       	sbci	r23, 0xFF	; 255
    180c:	8f 4f       	sbci	r24, 0xFF	; 255
    180e:	9f 4f       	sbci	r25, 0xFF	; 255
    1810:	08 95       	ret

00001812 <strcpy>:
    1812:	fb 01       	movw	r30, r22
    1814:	dc 01       	movw	r26, r24
    1816:	01 90       	ld	r0, Z+
    1818:	0d 92       	st	X+, r0
    181a:	00 20       	and	r0, r0
    181c:	e1 f7       	brne	.-8      	; 0x1816 <strcpy+0x4>
    181e:	08 95       	ret

00001820 <__itoa_ncheck>:
    1820:	bb 27       	eor	r27, r27
    1822:	4a 30       	cpi	r20, 0x0A	; 10
    1824:	31 f4       	brne	.+12     	; 0x1832 <__itoa_ncheck+0x12>
    1826:	99 23       	and	r25, r25
    1828:	22 f4       	brpl	.+8      	; 0x1832 <__itoa_ncheck+0x12>
    182a:	bd e2       	ldi	r27, 0x2D	; 45
    182c:	90 95       	com	r25
    182e:	81 95       	neg	r24
    1830:	9f 4f       	sbci	r25, 0xFF	; 255
    1832:	0c 94 1c 0c 	jmp	0x1838	; 0x1838 <__utoa_common>

00001836 <__utoa_ncheck>:
    1836:	bb 27       	eor	r27, r27

00001838 <__utoa_common>:
    1838:	fb 01       	movw	r30, r22
    183a:	55 27       	eor	r21, r21
    183c:	aa 27       	eor	r26, r26
    183e:	88 0f       	add	r24, r24
    1840:	99 1f       	adc	r25, r25
    1842:	aa 1f       	adc	r26, r26
    1844:	a4 17       	cp	r26, r20
    1846:	10 f0       	brcs	.+4      	; 0x184c <__utoa_common+0x14>
    1848:	a4 1b       	sub	r26, r20
    184a:	83 95       	inc	r24
    184c:	50 51       	subi	r21, 0x10	; 16
    184e:	b9 f7       	brne	.-18     	; 0x183e <__utoa_common+0x6>
    1850:	a0 5d       	subi	r26, 0xD0	; 208
    1852:	aa 33       	cpi	r26, 0x3A	; 58
    1854:	08 f0       	brcs	.+2      	; 0x1858 <__utoa_common+0x20>
    1856:	a9 5d       	subi	r26, 0xD9	; 217
    1858:	a1 93       	st	Z+, r26
    185a:	00 97       	sbiw	r24, 0x00	; 0
    185c:	79 f7       	brne	.-34     	; 0x183c <__utoa_common+0x4>
    185e:	b1 11       	cpse	r27, r1
    1860:	b1 93       	st	Z+, r27
    1862:	11 92       	st	Z+, r1
    1864:	cb 01       	movw	r24, r22
    1866:	0c 94 35 0c 	jmp	0x186a	; 0x186a <strrev>

0000186a <strrev>:
    186a:	dc 01       	movw	r26, r24
    186c:	fc 01       	movw	r30, r24
    186e:	67 2f       	mov	r22, r23
    1870:	71 91       	ld	r23, Z+
    1872:	77 23       	and	r23, r23
    1874:	e1 f7       	brne	.-8      	; 0x186e <strrev+0x4>
    1876:	32 97       	sbiw	r30, 0x02	; 2
    1878:	04 c0       	rjmp	.+8      	; 0x1882 <strrev+0x18>
    187a:	7c 91       	ld	r23, X
    187c:	6d 93       	st	X+, r22
    187e:	70 83       	st	Z, r23
    1880:	62 91       	ld	r22, -Z
    1882:	ae 17       	cp	r26, r30
    1884:	bf 07       	cpc	r27, r31
    1886:	c8 f3       	brcs	.-14     	; 0x187a <strrev+0x10>
    1888:	08 95       	ret

0000188a <_exit>:
    188a:	f8 94       	cli

0000188c <__stop_program>:
    188c:	ff cf       	rjmp	.-2      	; 0x188c <__stop_program>
