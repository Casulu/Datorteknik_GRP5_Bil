
Remote 1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000de  00800100  000021fc  00002290  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000021fc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001f7  008001de  008001de  0000236e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000236e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000023a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000298  00000000  00000000  000023e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002d1b  00000000  00000000  00002678  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000113d  00000000  00000000  00005393  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001afe  00000000  00000000  000064d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006c4  00000000  00000000  00007fd0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b22  00000000  00000000  00008694  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001d63  00000000  00000000  000091b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002a8  00000000  00000000  0000af19  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 13 03 	jmp	0x626	; 0x626 <__ctors_end>
       4:	0c 94 6f 09 	jmp	0x12de	; 0x12de <__vector_1>
       8:	0c 94 ec 09 	jmp	0x13d8	; 0x13d8 <__vector_2>
       c:	0c 94 30 03 	jmp	0x660	; 0x660 <__bad_interrupt>
      10:	0c 94 30 03 	jmp	0x660	; 0x660 <__bad_interrupt>
      14:	0c 94 30 03 	jmp	0x660	; 0x660 <__bad_interrupt>
      18:	0c 94 30 03 	jmp	0x660	; 0x660 <__bad_interrupt>
      1c:	0c 94 e7 08 	jmp	0x11ce	; 0x11ce <__vector_7>
      20:	0c 94 30 03 	jmp	0x660	; 0x660 <__bad_interrupt>
      24:	0c 94 30 03 	jmp	0x660	; 0x660 <__bad_interrupt>
      28:	0c 94 30 03 	jmp	0x660	; 0x660 <__bad_interrupt>
      2c:	0c 94 9d 0c 	jmp	0x193a	; 0x193a <__vector_11>
      30:	0c 94 30 03 	jmp	0x660	; 0x660 <__bad_interrupt>
      34:	0c 94 30 03 	jmp	0x660	; 0x660 <__bad_interrupt>
      38:	0c 94 30 03 	jmp	0x660	; 0x660 <__bad_interrupt>
      3c:	0c 94 30 03 	jmp	0x660	; 0x660 <__bad_interrupt>
      40:	0c 94 30 03 	jmp	0x660	; 0x660 <__bad_interrupt>
      44:	0c 94 30 03 	jmp	0x660	; 0x660 <__bad_interrupt>
      48:	0c 94 91 08 	jmp	0x1122	; 0x1122 <__vector_18>
      4c:	0c 94 30 03 	jmp	0x660	; 0x660 <__bad_interrupt>
      50:	0c 94 30 03 	jmp	0x660	; 0x660 <__bad_interrupt>
      54:	0c 94 30 03 	jmp	0x660	; 0x660 <__bad_interrupt>
      58:	0c 94 30 03 	jmp	0x660	; 0x660 <__bad_interrupt>
      5c:	0c 94 30 03 	jmp	0x660	; 0x660 <__bad_interrupt>
      60:	0c 94 30 03 	jmp	0x660	; 0x660 <__bad_interrupt>
      64:	0c 94 30 03 	jmp	0x660	; 0x660 <__bad_interrupt>
      68:	07 63       	ori	r16, 0x37	; 55
      6a:	42 36       	cpi	r20, 0x62	; 98
      6c:	b7 9b       	sbis	0x16, 7	; 22
      6e:	d8 a7       	std	Y+40, r29	; 0x28
      70:	1a 39       	cpi	r17, 0x9A	; 154
      72:	68 56       	subi	r22, 0x68	; 104
      74:	18 ae       	std	Y+56, r1	; 0x38
      76:	ba ab       	std	Y+50, r27	; 0x32
      78:	55 8c       	ldd	r5, Z+29	; 0x1d
      7a:	1d 3c       	cpi	r17, 0xCD	; 205
      7c:	b7 cc       	rjmp	.-1682   	; 0xfffff9ec <__eeprom_end+0xff7ef9ec>
      7e:	57 63       	ori	r21, 0x37	; 55
      80:	bd 6d       	ori	r27, 0xDD	; 221
      82:	ed fd       	.word	0xfded	; ????
      84:	75 3e       	cpi	r23, 0xE5	; 229
      86:	f6 17       	cp	r31, r22
      88:	72 31       	cpi	r23, 0x12	; 18
      8a:	bf 00       	.word	0x00bf	; ????
      8c:	00 00       	nop
      8e:	80 3f       	cpi	r24, 0xF0	; 240
      90:	08 00       	.word	0x0008	; ????
      92:	00 00       	nop
      94:	be 92       	st	-X, r11
      96:	24 49       	sbci	r18, 0x94	; 148
      98:	12 3e       	cpi	r17, 0xE2	; 226
      9a:	ab aa       	std	Y+51, r10	; 0x33
      9c:	aa 2a       	or	r10, r26
      9e:	be cd       	rjmp	.-1156   	; 0xfffffc1c <__eeprom_end+0xff7efc1c>
      a0:	cc cc       	rjmp	.-1640   	; 0xfffffa3a <__eeprom_end+0xff7efa3a>
      a2:	4c 3e       	cpi	r20, 0xEC	; 236
      a4:	00 00       	nop
      a6:	00 80       	ld	r0, Z
      a8:	be ab       	std	Y+54, r27	; 0x36
      aa:	aa aa       	std	Y+50, r10	; 0x32
      ac:	aa 3e       	cpi	r26, 0xEA	; 234
      ae:	00 00       	nop
      b0:	00 00       	nop
      b2:	bf 00       	.word	0x00bf	; ????
      b4:	00 00       	nop
      b6:	80 3f       	cpi	r24, 0xF0	; 240
      b8:	00 00       	nop
      ba:	00 00       	nop
      bc:	00 08       	sbc	r0, r0
      be:	41 78       	andi	r20, 0x81	; 129
      c0:	d3 bb       	out	0x13, r29	; 19
      c2:	43 87       	std	Z+11, r20	; 0x0b
      c4:	d1 13       	cpse	r29, r17
      c6:	3d 19       	sub	r19, r13
      c8:	0e 3c       	cpi	r16, 0xCE	; 206
      ca:	c3 bd       	out	0x23, r28	; 35
      cc:	42 82       	std	Z+2, r4	; 0x02
      ce:	ad 2b       	or	r26, r29
      d0:	3e 68       	ori	r19, 0x8E	; 142
      d2:	ec 82       	std	Y+4, r14	; 0x04
      d4:	76 be       	out	0x36, r7	; 54
      d6:	d9 8f       	std	Y+25, r29	; 0x19
      d8:	e1 a9       	ldd	r30, Z+49	; 0x31
      da:	3e 4c       	sbci	r19, 0xCE	; 206
      dc:	80 ef       	ldi	r24, 0xF0	; 240
      de:	ff be       	out	0x3f, r15	; 63
      e0:	01 c4       	rjmp	.+2050   	; 0x8e4 <fiveinarow_render+0x50>
      e2:	ff 7f       	andi	r31, 0xFF	; 255
      e4:	3f 00       	.word	0x003f	; ????
      e6:	00 00       	nop
	...

000000ea <__trampolines_end>:
      ea:	0e 11       	cpse	r16, r14
      ec:	11 11       	cpse	r17, r1
      ee:	11 11       	cpse	r17, r1
      f0:	0e 1f       	adc	r16, r30

000000f2 <x_under_char>:
      f2:	11 11 0a 04 0a 11 11 1f                             ........

000000fa <under_char>:
      fa:	00 00 00 00 00 00 00 1f                             ........

00000102 <o_curs_char>:
     102:	0e 15 15 1f 15 15 0e 00                             ........

0000010a <x_curs_char>:
     10a:	11 15 1f 0e 1f 15 11 00                             ........

00000112 <melodies>:
     112:	b4 71 80 71 00 00 00 00 00 00 00 00 00 00 00 00     .q.q............
	...
     212:	00 00 4b 2d 4d 60 68 4d 68 88 8a 4c 85 80 65 4a     ..K-M`hMh..L..eJ
     222:	68 88 86 48 81 80 61 63 83 80 63 83 85 66 86 80     h..H..ac..c..f..
     232:	66 86 88 4a 6c 6d 4f 6f 68 51 6f 8f 8d 4f 6c 68     f..JlmOohQo..Olh
     242:	4d 6c 8c 8a 4c 85 80 65 4a 68 88 86 48 61 80 81     Ml..L..eJh..Ha..
     252:	4d 6c 8c 8a 68 6c 6d 6f 31 6f 6d 6c 6d 4f 6f 88     Ml..hlmo1omlmOo.
     262:	80 68 6c 6d 6f 2d 6c 6a 68 6a 4c 6c 85 80 65 68     .hlmo-ljhjLl..eh
     272:	6a 6c 4d 6a 8a 8c 4d 6a 8a 8c 4d 6a 6d 52 72 60     jlMj..Mj..MjmRr`
     282:	32 71 6f 6d 6f 51 71 8d 80 2d 2f 6d 6c 6a 6c 4d     2qomoQq..-/mljlM
     292:	6d 8a 80 2a 4d 6c 8c 8a 48 61 80 81 28 4a 4c 2d     m..*Ml..Ha..(JL-
     2a2:	6d 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     m...............
	...
     316:	64 8d 80 90 80 92 80 93 80 92 80 90 80 8d 40 80     d.............@.
     326:	8b 8f 8d 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     416:	00 00 64 80 83 88 8a 6b 80 83 88 8a 6b 60 80 80     ..d....k....k`..
     426:	84 88 8a 6b 80 84 88 8a 6b 80 81 86 88 6a 80 81     ...k....k....j..
     436:	86 88 6a 60 80 80 88 8a 88 67 00 00 00 00 00 00     ..j`.....g......
	...
     51a:	60 60 6e e0 6e e0 6e 72 73 72 73 53 60 6e 72 73     ``n.n.nrsrsS`nrs
     52a:	72 73 53 60 6e 72 73 72 73 53 60 6e 73 e0 73 60     rsS`nrsrsS`ns.s`
     53a:	53 72 60 72 e0 52 e0 72 73 72 73 60 6e 72 73 72     Sr`r.R.rsrs`nrsr
     54a:	73 53 60 6e 72 73 e0 73 e0 73 33 53 40 60 6e e0     sS`nrs.s.s3S@`n.
     55a:	6e e0 6e 60 72 73 72 73 53 00 00 00 00 00 00 00     n.n`rsrsS.......
	...

0000061c <initseq>:
     61c:	39 15 55 6e 72 38 0c 01 06 00                       9.Unr8....

00000626 <__ctors_end>:
     626:	11 24       	eor	r1, r1
     628:	1f be       	out	0x3f, r1	; 63
     62a:	cf ef       	ldi	r28, 0xFF	; 255
     62c:	d8 e0       	ldi	r29, 0x08	; 8
     62e:	de bf       	out	0x3e, r29	; 62
     630:	cd bf       	out	0x3d, r28	; 61

00000632 <__do_copy_data>:
     632:	11 e0       	ldi	r17, 0x01	; 1
     634:	a0 e0       	ldi	r26, 0x00	; 0
     636:	b1 e0       	ldi	r27, 0x01	; 1
     638:	ec ef       	ldi	r30, 0xFC	; 252
     63a:	f1 e2       	ldi	r31, 0x21	; 33
     63c:	02 c0       	rjmp	.+4      	; 0x642 <__do_copy_data+0x10>
     63e:	05 90       	lpm	r0, Z+
     640:	0d 92       	st	X+, r0
     642:	ae 3d       	cpi	r26, 0xDE	; 222
     644:	b1 07       	cpc	r27, r17
     646:	d9 f7       	brne	.-10     	; 0x63e <__do_copy_data+0xc>

00000648 <__do_clear_bss>:
     648:	23 e0       	ldi	r18, 0x03	; 3
     64a:	ae ed       	ldi	r26, 0xDE	; 222
     64c:	b1 e0       	ldi	r27, 0x01	; 1
     64e:	01 c0       	rjmp	.+2      	; 0x652 <.do_clear_bss_start>

00000650 <.do_clear_bss_loop>:
     650:	1d 92       	st	X+, r1

00000652 <.do_clear_bss_start>:
     652:	a5 3d       	cpi	r26, 0xD5	; 213
     654:	b2 07       	cpc	r27, r18
     656:	e1 f7       	brne	.-8      	; 0x650 <.do_clear_bss_loop>
     658:	0e 94 26 0a 	call	0x144c	; 0x144c <main>
     65c:	0c 94 fc 10 	jmp	0x21f8	; 0x21f8 <_exit>

00000660 <__bad_interrupt>:
     660:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000664 <fiveinarow_is_char>:
	return false;
}

//Internal helper functions
bool fiveinarow_is_char(uint8_t x, uint8_t y, char c){
	if(x > 14)return false;
     664:	8f 30       	cpi	r24, 0x0F	; 15
     666:	68 f4       	brcc	.+26     	; 0x682 <fiveinarow_is_char+0x1e>
	if(y > 14)return false;
     668:	6f 30       	cpi	r22, 0x0F	; 15
     66a:	58 f4       	brcc	.+22     	; 0x682 <fiveinarow_is_char+0x1e>
	if(row_markers[x][y] == c)return true;
     66c:	9f e0       	ldi	r25, 0x0F	; 15
     66e:	89 9f       	mul	r24, r25
     670:	f0 01       	movw	r30, r0
     672:	11 24       	eor	r1, r1
     674:	ed 51       	subi	r30, 0x1D	; 29
     676:	fe 4f       	sbci	r31, 0xFE	; 254
     678:	e6 0f       	add	r30, r22
     67a:	f1 1d       	adc	r31, r1
     67c:	90 81       	ld	r25, Z
     67e:	81 e0       	ldi	r24, 0x01	; 1
     680:	94 13       	cpse	r25, r20
	return false;
}

//Internal helper functions
bool fiveinarow_is_char(uint8_t x, uint8_t y, char c){
	if(x > 14)return false;
     682:	80 e0       	ldi	r24, 0x00	; 0
	if(y > 14)return false;
	if(row_markers[x][y] == c)return true;
	return false;
     684:	08 95       	ret

00000686 <fiveinarow_init>:
static const uint8_t under_char[8] PROGMEM = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F};
static const uint8_t x_under_char[8] PROGMEM = {0x11, 0x11, 0x0A, 0x04, 0x0A, 0x11, 0x11, 0x1F};
static const uint8_t o_under_char[8] PROGMEM = {0x0E, 0x11, 0x11, 0x11, 0x11, 0x11, 0x0E, 0x1F};

void fiveinarow_init(){
	set_character_pgm(X_CURS_CODE, x_curs_char);
     686:	6a e0       	ldi	r22, 0x0A	; 10
     688:	71 e0       	ldi	r23, 0x01	; 1
     68a:	81 e0       	ldi	r24, 0x01	; 1
     68c:	0e 94 39 0b 	call	0x1672	; 0x1672 <set_character_pgm>
	set_character_pgm(O_CURS_CODE, o_curs_char);
     690:	62 e0       	ldi	r22, 0x02	; 2
     692:	71 e0       	ldi	r23, 0x01	; 1
     694:	82 e0       	ldi	r24, 0x02	; 2
     696:	0e 94 39 0b 	call	0x1672	; 0x1672 <set_character_pgm>
	set_character_pgm(UNDER_CODE, under_char);
     69a:	6a ef       	ldi	r22, 0xFA	; 250
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	83 e0       	ldi	r24, 0x03	; 3
     6a0:	0e 94 39 0b 	call	0x1672	; 0x1672 <set_character_pgm>
	set_character_pgm(X_UNDER_CODE, x_under_char);
     6a4:	62 ef       	ldi	r22, 0xF2	; 242
     6a6:	70 e0       	ldi	r23, 0x00	; 0
     6a8:	84 e0       	ldi	r24, 0x04	; 4
     6aa:	0e 94 39 0b 	call	0x1672	; 0x1672 <set_character_pgm>
	set_character_pgm(O_UNDER_CODE, o_under_char);
     6ae:	6a ee       	ldi	r22, 0xEA	; 234
     6b0:	70 e0       	ldi	r23, 0x00	; 0
     6b2:	85 e0       	ldi	r24, 0x05	; 5
     6b4:	0c 94 39 0b 	jmp	0x1672	; 0x1672 <set_character_pgm>

000006b8 <fiveinarow_setup>:
}

void fiveinarow_setup(bool turn){
	row_cursor_x = 7;
     6b8:	97 e0       	ldi	r25, 0x07	; 7
     6ba:	90 93 e2 01 	sts	0x01E2, r25	; 0x8001e2 <row_cursor_x>
	row_cursor_y = 7;
     6be:	90 93 e1 01 	sts	0x01E1, r25	; 0x8001e1 <row_cursor_y>
	row_display_pos = 6;
     6c2:	96 e0       	ldi	r25, 0x06	; 6
     6c4:	90 93 de 01 	sts	0x01DE, r25	; 0x8001de <__data_end>
	row_player_turn = turn;
     6c8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     6cc:	20 e0       	ldi	r18, 0x00	; 0
     6ce:	30 e0       	ldi	r19, 0x00	; 0
	
	for(uint8_t q = 0; q < 15; q++){
		for(uint8_t i = 0; i < 15; i++){
			row_markers[i][q] = ' ';
     6d0:	4f e0       	ldi	r20, 0x0F	; 15
     6d2:	50 e2       	ldi	r21, 0x20	; 32
	set_character_pgm(UNDER_CODE, under_char);
	set_character_pgm(X_UNDER_CODE, x_under_char);
	set_character_pgm(O_UNDER_CODE, o_under_char);
}

void fiveinarow_setup(bool turn){
     6d4:	80 e0       	ldi	r24, 0x00	; 0
     6d6:	90 e0       	ldi	r25, 0x00	; 0
	row_display_pos = 6;
	row_player_turn = turn;
	
	for(uint8_t q = 0; q < 15; q++){
		for(uint8_t i = 0; i < 15; i++){
			row_markers[i][q] = ' ';
     6d8:	48 9f       	mul	r20, r24
     6da:	f0 01       	movw	r30, r0
     6dc:	49 9f       	mul	r20, r25
     6de:	f0 0d       	add	r31, r0
     6e0:	11 24       	eor	r1, r1
     6e2:	ed 51       	subi	r30, 0x1D	; 29
     6e4:	fe 4f       	sbci	r31, 0xFE	; 254
     6e6:	e2 0f       	add	r30, r18
     6e8:	f3 1f       	adc	r31, r19
     6ea:	50 83       	st	Z, r21
     6ec:	01 96       	adiw	r24, 0x01	; 1
	row_cursor_y = 7;
	row_display_pos = 6;
	row_player_turn = turn;
	
	for(uint8_t q = 0; q < 15; q++){
		for(uint8_t i = 0; i < 15; i++){
     6ee:	8f 30       	cpi	r24, 0x0F	; 15
     6f0:	91 05       	cpc	r25, r1
     6f2:	91 f7       	brne	.-28     	; 0x6d8 <fiveinarow_setup+0x20>
     6f4:	2f 5f       	subi	r18, 0xFF	; 255
     6f6:	3f 4f       	sbci	r19, 0xFF	; 255
	row_cursor_x = 7;
	row_cursor_y = 7;
	row_display_pos = 6;
	row_player_turn = turn;
	
	for(uint8_t q = 0; q < 15; q++){
     6f8:	2f 30       	cpi	r18, 0x0F	; 15
     6fa:	31 05       	cpc	r19, r1
     6fc:	59 f7       	brne	.-42     	; 0x6d4 <fiveinarow_setup+0x1c>
     6fe:	08 95       	ret

00000700 <fiveinarow_left>:
			row_markers[i][q] = ' ';
		}
	}
}
void fiveinarow_left(){
	if(row_cursor_x == 0)row_cursor_x = 1;
     700:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <row_cursor_x>
     704:	81 11       	cpse	r24, r1
     706:	03 c0       	rjmp	.+6      	; 0x70e <fiveinarow_left+0xe>
     708:	81 e0       	ldi	r24, 0x01	; 1
     70a:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <row_cursor_x>
	row_cursor_x--;
     70e:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <row_cursor_x>
     712:	81 50       	subi	r24, 0x01	; 1
     714:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <row_cursor_x>
     718:	08 95       	ret

0000071a <fiveinarow_right>:
}

void fiveinarow_right(){
	row_cursor_x++;
     71a:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <row_cursor_x>
     71e:	8f 5f       	subi	r24, 0xFF	; 255
     720:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <row_cursor_x>
	if(row_cursor_x > 14)row_cursor_x = 14;
     724:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <row_cursor_x>
     728:	8f 30       	cpi	r24, 0x0F	; 15
     72a:	18 f0       	brcs	.+6      	; 0x732 <fiveinarow_right+0x18>
     72c:	8e e0       	ldi	r24, 0x0E	; 14
     72e:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <row_cursor_x>
     732:	08 95       	ret

00000734 <fiveinarow_up>:
}

void fiveinarow_up(){
	if(row_cursor_y == 0)row_cursor_y = 1;
     734:	80 91 e1 01 	lds	r24, 0x01E1	; 0x8001e1 <row_cursor_y>
     738:	81 11       	cpse	r24, r1
     73a:	03 c0       	rjmp	.+6      	; 0x742 <fiveinarow_up+0xe>
     73c:	81 e0       	ldi	r24, 0x01	; 1
     73e:	80 93 e1 01 	sts	0x01E1, r24	; 0x8001e1 <row_cursor_y>
	row_cursor_y--;
     742:	80 91 e1 01 	lds	r24, 0x01E1	; 0x8001e1 <row_cursor_y>
     746:	81 50       	subi	r24, 0x01	; 1
     748:	80 93 e1 01 	sts	0x01E1, r24	; 0x8001e1 <row_cursor_y>
	
	if(row_cursor_y < row_display_pos)row_display_pos = row_cursor_y;
     74c:	90 91 e1 01 	lds	r25, 0x01E1	; 0x8001e1 <row_cursor_y>
     750:	80 91 de 01 	lds	r24, 0x01DE	; 0x8001de <__data_end>
     754:	98 17       	cp	r25, r24
     756:	20 f4       	brcc	.+8      	; 0x760 <fiveinarow_up+0x2c>
     758:	80 91 e1 01 	lds	r24, 0x01E1	; 0x8001e1 <row_cursor_y>
     75c:	80 93 de 01 	sts	0x01DE, r24	; 0x8001de <__data_end>
     760:	08 95       	ret

00000762 <fiveinarow_down>:
}

void fiveinarow_down(){
	row_cursor_y++;
     762:	80 91 e1 01 	lds	r24, 0x01E1	; 0x8001e1 <row_cursor_y>
     766:	8f 5f       	subi	r24, 0xFF	; 255
     768:	80 93 e1 01 	sts	0x01E1, r24	; 0x8001e1 <row_cursor_y>
	if(row_cursor_y > 14)row_cursor_y = 14;
     76c:	80 91 e1 01 	lds	r24, 0x01E1	; 0x8001e1 <row_cursor_y>
     770:	8f 30       	cpi	r24, 0x0F	; 15
     772:	18 f0       	brcs	.+6      	; 0x77a <fiveinarow_down+0x18>
     774:	8e e0       	ldi	r24, 0x0E	; 14
     776:	80 93 e1 01 	sts	0x01E1, r24	; 0x8001e1 <row_cursor_y>
	
	if(row_cursor_y > row_display_pos+2)row_display_pos = row_cursor_y-2;
     77a:	20 91 e1 01 	lds	r18, 0x01E1	; 0x8001e1 <row_cursor_y>
     77e:	80 91 de 01 	lds	r24, 0x01DE	; 0x8001de <__data_end>
     782:	30 e0       	ldi	r19, 0x00	; 0
     784:	90 e0       	ldi	r25, 0x00	; 0
     786:	02 96       	adiw	r24, 0x02	; 2
     788:	82 17       	cp	r24, r18
     78a:	93 07       	cpc	r25, r19
     78c:	2c f4       	brge	.+10     	; 0x798 <fiveinarow_down+0x36>
     78e:	80 91 e1 01 	lds	r24, 0x01E1	; 0x8001e1 <row_cursor_y>
     792:	82 50       	subi	r24, 0x02	; 2
     794:	80 93 de 01 	sts	0x01DE, r24	; 0x8001de <__data_end>
     798:	08 95       	ret

0000079a <fiveinarow_place>:
}

void fiveinarow_place(char* message, char topic){
     79a:	dc 01       	movw	r26, r24
	if(row_player_turn && row_markers[row_cursor_x][row_cursor_y] == ' '){
     79c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     7a0:	88 23       	and	r24, r24
     7a2:	d1 f1       	breq	.+116    	; 0x818 <__DATA_REGION_LENGTH__+0x18>
     7a4:	e0 91 e2 01 	lds	r30, 0x01E2	; 0x8001e2 <row_cursor_x>
     7a8:	80 91 e1 01 	lds	r24, 0x01E1	; 0x8001e1 <row_cursor_y>
     7ac:	9f e0       	ldi	r25, 0x0F	; 15
     7ae:	9e 9f       	mul	r25, r30
     7b0:	f0 01       	movw	r30, r0
     7b2:	11 24       	eor	r1, r1
     7b4:	ed 51       	subi	r30, 0x1D	; 29
     7b6:	fe 4f       	sbci	r31, 0xFE	; 254
     7b8:	e8 0f       	add	r30, r24
     7ba:	f1 1d       	adc	r31, r1
     7bc:	80 81       	ld	r24, Z
     7be:	80 32       	cpi	r24, 0x20	; 32
     7c0:	59 f5       	brne	.+86     	; 0x818 <__DATA_REGION_LENGTH__+0x18>
		row_last_x = row_cursor_x;
     7c2:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <row_cursor_x>
     7c6:	80 93 e0 01 	sts	0x01E0, r24	; 0x8001e0 <row_last_x>
		row_last_y = row_cursor_y;
     7ca:	80 91 e1 01 	lds	r24, 0x01E1	; 0x8001e1 <row_cursor_y>
     7ce:	80 93 df 01 	sts	0x01DF, r24	; 0x8001df <row_last_y>
		row_player_turn = false;
     7d2:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
		
		row_markers[row_cursor_x][row_cursor_y] = 'X';
     7d6:	e0 91 e2 01 	lds	r30, 0x01E2	; 0x8001e2 <row_cursor_x>
     7da:	80 91 e1 01 	lds	r24, 0x01E1	; 0x8001e1 <row_cursor_y>
     7de:	9e 9f       	mul	r25, r30
     7e0:	f0 01       	movw	r30, r0
     7e2:	11 24       	eor	r1, r1
     7e4:	ed 51       	subi	r30, 0x1D	; 29
     7e6:	fe 4f       	sbci	r31, 0xFE	; 254
     7e8:	e8 0f       	add	r30, r24
     7ea:	f1 1d       	adc	r31, r1
     7ec:	88 e5       	ldi	r24, 0x58	; 88
     7ee:	80 83       	st	Z, r24
		message[0] = topic;
     7f0:	6c 93       	st	X, r22
		message[1] = '3';
     7f2:	83 e3       	ldi	r24, 0x33	; 51
     7f4:	11 96       	adiw	r26, 0x01	; 1
     7f6:	8c 93       	st	X, r24
     7f8:	11 97       	sbiw	r26, 0x01	; 1
		message[2] = row_cursor_x+48;
     7fa:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <row_cursor_x>
     7fe:	80 5d       	subi	r24, 0xD0	; 208
     800:	12 96       	adiw	r26, 0x02	; 2
     802:	8c 93       	st	X, r24
     804:	12 97       	sbiw	r26, 0x02	; 2
		message[3] = row_cursor_y+48;
     806:	80 91 e1 01 	lds	r24, 0x01E1	; 0x8001e1 <row_cursor_y>
     80a:	80 5d       	subi	r24, 0xD0	; 208
     80c:	13 96       	adiw	r26, 0x03	; 3
     80e:	8c 93       	st	X, r24
     810:	13 97       	sbiw	r26, 0x03	; 3
		message[4] = '\0';
     812:	14 96       	adiw	r26, 0x04	; 4
     814:	1c 92       	st	X, r1
     816:	08 95       	ret
	}else{
		message[0] = '\0';
     818:	1c 92       	st	X, r1
     81a:	08 95       	ret

0000081c <fiveinarow_recive>:
	}
	
}

void fiveinarow_recive(char* message){
     81c:	fc 01       	movw	r30, r24
	row_player_turn = true;
     81e:	81 e0       	ldi	r24, 0x01	; 1
     820:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>

	row_last_x = message[2]-48;
     824:	92 81       	ldd	r25, Z+2	; 0x02
     826:	90 53       	subi	r25, 0x30	; 48
     828:	90 93 e0 01 	sts	0x01E0, r25	; 0x8001e0 <row_last_x>
	row_last_y = message[3]-48;
     82c:	83 81       	ldd	r24, Z+3	; 0x03
     82e:	80 53       	subi	r24, 0x30	; 48
     830:	80 93 df 01 	sts	0x01DF, r24	; 0x8001df <row_last_y>
	
	row_cursor_x = row_last_x;
     834:	80 91 e0 01 	lds	r24, 0x01E0	; 0x8001e0 <row_last_x>
     838:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <row_cursor_x>
	row_cursor_y = row_last_y;
     83c:	80 91 df 01 	lds	r24, 0x01DF	; 0x8001df <row_last_y>
     840:	80 93 e1 01 	sts	0x01E1, r24	; 0x8001e1 <row_cursor_y>
	
	row_markers[row_last_x][row_last_y] = 'O';
     844:	e0 91 e0 01 	lds	r30, 0x01E0	; 0x8001e0 <row_last_x>
     848:	80 91 df 01 	lds	r24, 0x01DF	; 0x8001df <row_last_y>
     84c:	9f e0       	ldi	r25, 0x0F	; 15
     84e:	e9 9f       	mul	r30, r25
     850:	f0 01       	movw	r30, r0
     852:	11 24       	eor	r1, r1
     854:	ed 51       	subi	r30, 0x1D	; 29
     856:	fe 4f       	sbci	r31, 0xFE	; 254
     858:	e8 0f       	add	r30, r24
     85a:	f1 1d       	adc	r31, r1
     85c:	8f e4       	ldi	r24, 0x4F	; 79
     85e:	80 83       	st	Z, r24
	if(row_last_y < row_display_pos){
     860:	90 91 df 01 	lds	r25, 0x01DF	; 0x8001df <row_last_y>
     864:	80 91 de 01 	lds	r24, 0x01DE	; 0x8001de <__data_end>
     868:	98 17       	cp	r25, r24
     86a:	20 f4       	brcc	.+8      	; 0x874 <fiveinarow_recive+0x58>
		row_display_pos = row_last_y;
     86c:	80 91 df 01 	lds	r24, 0x01DF	; 0x8001df <row_last_y>
     870:	80 93 de 01 	sts	0x01DE, r24	; 0x8001de <__data_end>
		//if(row_cursor_y < row_display_pos)row_cursor_y = row_display_pos;
	}
	if(row_last_y > row_display_pos+2){
     874:	20 91 df 01 	lds	r18, 0x01DF	; 0x8001df <row_last_y>
     878:	80 91 de 01 	lds	r24, 0x01DE	; 0x8001de <__data_end>
     87c:	30 e0       	ldi	r19, 0x00	; 0
     87e:	90 e0       	ldi	r25, 0x00	; 0
     880:	02 96       	adiw	r24, 0x02	; 2
     882:	82 17       	cp	r24, r18
     884:	93 07       	cpc	r25, r19
     886:	2c f4       	brge	.+10     	; 0x892 <fiveinarow_recive+0x76>
		row_display_pos = row_last_y-2;
     888:	80 91 df 01 	lds	r24, 0x01DF	; 0x8001df <row_last_y>
     88c:	82 50       	subi	r24, 0x02	; 2
     88e:	80 93 de 01 	sts	0x01DE, r24	; 0x8001de <__data_end>
     892:	08 95       	ret

00000894 <fiveinarow_render>:
		//if(row_cursor_y > row_display_pos+2)row_cursor_y = row_display_pos+2;
	}
}

void fiveinarow_render(char* row_buf){	
     894:	cf 93       	push	r28
     896:	df 93       	push	r29
	uint8_t index = 0;
	for(uint8_t q = row_display_pos; q < row_display_pos+3; q++){
     898:	20 91 de 01 	lds	r18, 0x01DE	; 0x8001de <__data_end>
		//if(row_cursor_y > row_display_pos+2)row_cursor_y = row_display_pos+2;
	}
}

void fiveinarow_render(char* row_buf){	
	uint8_t index = 0;
     89c:	30 e0       	ldi	r19, 0x00	; 0
			row_buf[index] = q+56;
		}
		index++;
		
		for(uint8_t i = 0; i < 15; i++){
			row_buf[index] = row_markers[i][q];
     89e:	bf e0       	ldi	r27, 0x0F	; 15
	}
}

void fiveinarow_render(char* row_buf){	
	uint8_t index = 0;
	for(uint8_t q = row_display_pos; q < row_display_pos+3; q++){
     8a0:	40 91 de 01 	lds	r20, 0x01DE	; 0x8001de <__data_end>
     8a4:	62 2f       	mov	r22, r18
     8a6:	70 e0       	ldi	r23, 0x00	; 0
     8a8:	50 e0       	ldi	r21, 0x00	; 0
     8aa:	4e 5f       	subi	r20, 0xFE	; 254
     8ac:	5f 4f       	sbci	r21, 0xFF	; 255
     8ae:	46 17       	cp	r20, r22
     8b0:	57 07       	cpc	r21, r23
     8b2:	3c f1       	brlt	.+78     	; 0x902 <__stack+0x3>
     8b4:	43 2f       	mov	r20, r19
     8b6:	50 e0       	ldi	r21, 0x00	; 0
		if(q < 9){
			row_buf[index] = q+49;
     8b8:	ec 01       	movw	r28, r24
     8ba:	c4 0f       	add	r28, r20
     8bc:	d5 1f       	adc	r29, r21
}

void fiveinarow_render(char* row_buf){	
	uint8_t index = 0;
	for(uint8_t q = row_display_pos; q < row_display_pos+3; q++){
		if(q < 9){
     8be:	29 30       	cpi	r18, 0x09	; 9
     8c0:	10 f4       	brcc	.+4      	; 0x8c6 <fiveinarow_render+0x32>
			row_buf[index] = q+49;
     8c2:	e1 e3       	ldi	r30, 0x31	; 49
     8c4:	01 c0       	rjmp	.+2      	; 0x8c8 <fiveinarow_render+0x34>
		}else{
			row_buf[index] = q+56;
     8c6:	e8 e3       	ldi	r30, 0x38	; 56
     8c8:	e2 0f       	add	r30, r18
     8ca:	e8 83       	st	Y, r30
		}
		index++;
     8cc:	a1 e0       	ldi	r26, 0x01	; 1
     8ce:	a3 0f       	add	r26, r19
     8d0:	40 e0       	ldi	r20, 0x00	; 0
     8d2:	50 e0       	ldi	r21, 0x00	; 0
		
		for(uint8_t i = 0; i < 15; i++){
			row_buf[index] = row_markers[i][q];
     8d4:	b4 9f       	mul	r27, r20
     8d6:	f0 01       	movw	r30, r0
     8d8:	b5 9f       	mul	r27, r21
     8da:	f0 0d       	add	r31, r0
     8dc:	11 24       	eor	r1, r1
     8de:	ed 51       	subi	r30, 0x1D	; 29
     8e0:	fe 4f       	sbci	r31, 0xFE	; 254
     8e2:	e6 0f       	add	r30, r22
     8e4:	f7 1f       	adc	r31, r23
     8e6:	c0 81       	ld	r28, Z
     8e8:	fc 01       	movw	r30, r24
     8ea:	ea 0f       	add	r30, r26
     8ec:	f1 1d       	adc	r31, r1
     8ee:	c0 83       	st	Z, r28
			index++;
     8f0:	af 5f       	subi	r26, 0xFF	; 255
     8f2:	4f 5f       	subi	r20, 0xFF	; 255
     8f4:	5f 4f       	sbci	r21, 0xFF	; 255
		}else{
			row_buf[index] = q+56;
		}
		index++;
		
		for(uint8_t i = 0; i < 15; i++){
     8f6:	4f 30       	cpi	r20, 0x0F	; 15
     8f8:	51 05       	cpc	r21, r1
     8fa:	61 f7       	brne	.-40     	; 0x8d4 <fiveinarow_render+0x40>
     8fc:	30 5f       	subi	r19, 0xF0	; 240
	}
}

void fiveinarow_render(char* row_buf){	
	uint8_t index = 0;
	for(uint8_t q = row_display_pos; q < row_display_pos+3; q++){
     8fe:	2f 5f       	subi	r18, 0xFF	; 255
     900:	cf cf       	rjmp	.-98     	; 0x8a0 <fiveinarow_render+0xc>
		for(uint8_t i = 0; i < 15; i++){
			row_buf[index] = row_markers[i][q];
			index++;
		}
	}
	uint8_t cursor_string_pos = ((row_cursor_y-row_display_pos)*16)+row_cursor_x+1;
     902:	20 91 e1 01 	lds	r18, 0x01E1	; 0x8001e1 <row_cursor_y>
     906:	30 91 de 01 	lds	r19, 0x01DE	; 0x8001de <__data_end>
     90a:	e0 91 e2 01 	lds	r30, 0x01E2	; 0x8001e2 <row_cursor_x>
     90e:	23 1b       	sub	r18, r19
     910:	ef 5f       	subi	r30, 0xFF	; 255
     912:	30 e1       	ldi	r19, 0x10	; 16
     914:	23 9f       	mul	r18, r19
     916:	e0 0d       	add	r30, r0
     918:	11 24       	eor	r1, r1
	if(row_player_turn){
     91a:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     91e:	f0 e0       	ldi	r31, 0x00	; 0
		switch(row_buf[cursor_string_pos]){
     920:	e8 0f       	add	r30, r24
     922:	f9 1f       	adc	r31, r25
			row_buf[index] = row_markers[i][q];
			index++;
		}
	}
	uint8_t cursor_string_pos = ((row_cursor_y-row_display_pos)*16)+row_cursor_x+1;
	if(row_player_turn){
     924:	22 23       	and	r18, r18
     926:	59 f0       	breq	.+22     	; 0x93e <__stack+0x3f>
		switch(row_buf[cursor_string_pos]){
     928:	20 81       	ld	r18, Z
     92a:	2f 34       	cpi	r18, 0x4F	; 79
     92c:	21 f0       	breq	.+8      	; 0x936 <__stack+0x37>
     92e:	28 35       	cpi	r18, 0x58	; 88
     930:	21 f4       	brne	.+8      	; 0x93a <__stack+0x3b>
			case 'X':
				row_buf[cursor_string_pos] = X_CURS_CODE;
     932:	21 e0       	ldi	r18, 0x01	; 1
     934:	0e c0       	rjmp	.+28     	; 0x952 <__stack+0x53>
				break;
			case 'O':
				row_buf[cursor_string_pos] = O_CURS_CODE;
     936:	22 e0       	ldi	r18, 0x02	; 2
     938:	0c c0       	rjmp	.+24     	; 0x952 <__stack+0x53>
				break;
			default:
				row_buf[cursor_string_pos] = '*';
     93a:	2a e2       	ldi	r18, 0x2A	; 42
     93c:	0a c0       	rjmp	.+20     	; 0x952 <__stack+0x53>
				break;
		}	
	} else{
		switch(row_buf[cursor_string_pos]){
     93e:	20 81       	ld	r18, Z
     940:	2f 34       	cpi	r18, 0x4F	; 79
     942:	21 f0       	breq	.+8      	; 0x94c <__stack+0x4d>
     944:	28 35       	cpi	r18, 0x58	; 88
     946:	21 f4       	brne	.+8      	; 0x950 <__stack+0x51>
			case 'X':
				row_buf[cursor_string_pos] = X_UNDER_CODE;
     948:	24 e0       	ldi	r18, 0x04	; 4
     94a:	03 c0       	rjmp	.+6      	; 0x952 <__stack+0x53>
				break;
			case 'O':
				row_buf[cursor_string_pos] = O_UNDER_CODE;
     94c:	25 e0       	ldi	r18, 0x05	; 5
     94e:	01 c0       	rjmp	.+2      	; 0x952 <__stack+0x53>
				break;
			default:
				row_buf[cursor_string_pos] = UNDER_CODE;
     950:	23 e0       	ldi	r18, 0x03	; 3
     952:	20 83       	st	Z, r18
				break;
		}
	}
	
	row_buf[48] = '\0';
     954:	fc 01       	movw	r30, r24
     956:	10 aa       	std	Z+48, r1	; 0x30
}
     958:	df 91       	pop	r29
     95a:	cf 91       	pop	r28
     95c:	08 95       	ret

0000095e <fiveinarow_check_win>:

bool fiveinarow_check_win(){
     95e:	ff 92       	push	r15
     960:	0f 93       	push	r16
     962:	1f 93       	push	r17
     964:	cf 93       	push	r28
     966:	df 93       	push	r29
	char last_player = row_markers[row_last_x][row_last_y];
     968:	e0 91 e0 01 	lds	r30, 0x01E0	; 0x8001e0 <row_last_x>
     96c:	80 91 df 01 	lds	r24, 0x01DF	; 0x8001df <row_last_y>
     970:	9f e0       	ldi	r25, 0x0F	; 15
     972:	e9 9f       	mul	r30, r25
     974:	f0 01       	movw	r30, r0
     976:	11 24       	eor	r1, r1
     978:	ed 51       	subi	r30, 0x1D	; 29
     97a:	fe 4f       	sbci	r31, 0xFE	; 254
     97c:	e8 0f       	add	r30, r24
     97e:	f1 1d       	adc	r31, r1
     980:	c0 81       	ld	r28, Z
	uint8_t test_x;
	uint8_t test_y;
	
	//Horizontal
	row_lenght = 1;
	test_x = row_last_x;
     982:	10 91 e0 01 	lds	r17, 0x01E0	; 0x8001e0 <row_last_x>
	test_y = row_last_y;
     986:	00 91 df 01 	lds	r16, 0x01DF	; 0x8001df <row_last_y>
	uint8_t row_lenght;
	uint8_t test_x;
	uint8_t test_y;
	
	//Horizontal
	row_lenght = 1;
     98a:	d1 e0       	ldi	r29, 0x01	; 1
	test_x = row_last_x;
	test_y = row_last_y;
	while(fiveinarow_is_char(--test_x, test_y, last_player))row_lenght++;
     98c:	4c 2f       	mov	r20, r28
     98e:	60 2f       	mov	r22, r16
     990:	81 2f       	mov	r24, r17
     992:	8d 1b       	sub	r24, r29
     994:	0e 94 32 03 	call	0x664	; 0x664 <fiveinarow_is_char>
     998:	88 23       	and	r24, r24
     99a:	11 f0       	breq	.+4      	; 0x9a0 <fiveinarow_check_win+0x42>
     99c:	df 5f       	subi	r29, 0xFF	; 255
     99e:	f6 cf       	rjmp	.-20     	; 0x98c <fiveinarow_check_win+0x2e>
	test_x = row_last_x;	
     9a0:	10 91 e0 01 	lds	r17, 0x01E0	; 0x8001e0 <row_last_x>
     9a4:	d1 1b       	sub	r29, r17
     9a6:	fd 2e       	mov	r15, r29
     9a8:	f1 0e       	add	r15, r17
	while(fiveinarow_is_char(++test_x, test_y, last_player))row_lenght++;
     9aa:	1f 5f       	subi	r17, 0xFF	; 255
     9ac:	4c 2f       	mov	r20, r28
     9ae:	60 2f       	mov	r22, r16
     9b0:	81 2f       	mov	r24, r17
     9b2:	0e 94 32 03 	call	0x664	; 0x664 <fiveinarow_is_char>
     9b6:	81 11       	cpse	r24, r1
     9b8:	f6 cf       	rjmp	.-20     	; 0x9a6 <fiveinarow_check_win+0x48>
	if(row_lenght >= 5)return true;
     9ba:	84 e0       	ldi	r24, 0x04	; 4
     9bc:	8f 15       	cp	r24, r15
     9be:	10 f4       	brcc	.+4      	; 0x9c4 <fiveinarow_check_win+0x66>
     9c0:	81 e0       	ldi	r24, 0x01	; 1
     9c2:	69 c0       	rjmp	.+210    	; 0xa96 <fiveinarow_check_win+0x138>
	
	//Vertical
	row_lenght = 1;
	test_x = row_last_x;
     9c4:	00 91 e0 01 	lds	r16, 0x01E0	; 0x8001e0 <row_last_x>
	test_y = row_last_y;
     9c8:	10 91 df 01 	lds	r17, 0x01DF	; 0x8001df <row_last_y>
	test_x = row_last_x;	
	while(fiveinarow_is_char(++test_x, test_y, last_player))row_lenght++;
	if(row_lenght >= 5)return true;
	
	//Vertical
	row_lenght = 1;
     9cc:	d1 e0       	ldi	r29, 0x01	; 1
	test_x = row_last_x;
	test_y = row_last_y;
	while(fiveinarow_is_char(test_x, --test_y, last_player))row_lenght++;
     9ce:	4c 2f       	mov	r20, r28
     9d0:	61 2f       	mov	r22, r17
     9d2:	6d 1b       	sub	r22, r29
     9d4:	80 2f       	mov	r24, r16
     9d6:	0e 94 32 03 	call	0x664	; 0x664 <fiveinarow_is_char>
     9da:	88 23       	and	r24, r24
     9dc:	11 f0       	breq	.+4      	; 0x9e2 <fiveinarow_check_win+0x84>
     9de:	df 5f       	subi	r29, 0xFF	; 255
     9e0:	f6 cf       	rjmp	.-20     	; 0x9ce <fiveinarow_check_win+0x70>
	test_y = row_last_y;
     9e2:	10 91 df 01 	lds	r17, 0x01DF	; 0x8001df <row_last_y>
     9e6:	d1 1b       	sub	r29, r17
     9e8:	fd 2e       	mov	r15, r29
     9ea:	f1 0e       	add	r15, r17
	while(fiveinarow_is_char(test_x, ++test_y, last_player))row_lenght++;
     9ec:	1f 5f       	subi	r17, 0xFF	; 255
     9ee:	4c 2f       	mov	r20, r28
     9f0:	61 2f       	mov	r22, r17
     9f2:	80 2f       	mov	r24, r16
     9f4:	0e 94 32 03 	call	0x664	; 0x664 <fiveinarow_is_char>
     9f8:	81 11       	cpse	r24, r1
     9fa:	f6 cf       	rjmp	.-20     	; 0x9e8 <fiveinarow_check_win+0x8a>
	if(row_lenght >= 5)return true;
     9fc:	94 e0       	ldi	r25, 0x04	; 4
     9fe:	9f 15       	cp	r25, r15
     a00:	f8 f2       	brcs	.-66     	; 0x9c0 <fiveinarow_check_win+0x62>
	
	//Diagonal forward
	row_lenght = 1;
	test_x = row_last_x;
     a02:	d0 91 e0 01 	lds	r29, 0x01E0	; 0x8001e0 <row_last_x>
	test_y = row_last_y;
     a06:	00 91 df 01 	lds	r16, 0x01DF	; 0x8001df <row_last_y>
	test_y = row_last_y;
	while(fiveinarow_is_char(test_x, ++test_y, last_player))row_lenght++;
	if(row_lenght >= 5)return true;
	
	//Diagonal forward
	row_lenght = 1;
     a0a:	11 e0       	ldi	r17, 0x01	; 1
	test_x = row_last_x;
	test_y = row_last_y;
	while(fiveinarow_is_char(--test_x, --test_y, last_player))row_lenght++;
     a0c:	4c 2f       	mov	r20, r28
     a0e:	60 2f       	mov	r22, r16
     a10:	61 1b       	sub	r22, r17
     a12:	8d 2f       	mov	r24, r29
     a14:	81 1b       	sub	r24, r17
     a16:	0e 94 32 03 	call	0x664	; 0x664 <fiveinarow_is_char>
     a1a:	88 23       	and	r24, r24
     a1c:	11 f0       	breq	.+4      	; 0xa22 <fiveinarow_check_win+0xc4>
     a1e:	1f 5f       	subi	r17, 0xFF	; 255
     a20:	f5 cf       	rjmp	.-22     	; 0xa0c <fiveinarow_check_win+0xae>
	test_x = row_last_x;
     a22:	00 91 e0 01 	lds	r16, 0x01E0	; 0x8001e0 <row_last_x>
	test_y = row_last_y;
     a26:	d0 91 df 01 	lds	r29, 0x01DF	; 0x8001df <row_last_y>
     a2a:	1d 1b       	sub	r17, r29
	while(fiveinarow_is_char(++test_x, ++test_y, last_player))row_lenght++;
     a2c:	0d 1b       	sub	r16, r29
     a2e:	f1 2e       	mov	r15, r17
     a30:	fd 0e       	add	r15, r29
     a32:	df 5f       	subi	r29, 0xFF	; 255
     a34:	4c 2f       	mov	r20, r28
     a36:	6d 2f       	mov	r22, r29
     a38:	80 2f       	mov	r24, r16
     a3a:	8d 0f       	add	r24, r29
     a3c:	0e 94 32 03 	call	0x664	; 0x664 <fiveinarow_is_char>
     a40:	81 11       	cpse	r24, r1
     a42:	f5 cf       	rjmp	.-22     	; 0xa2e <fiveinarow_check_win+0xd0>
	if(row_lenght >= 5)return true;
     a44:	84 e0       	ldi	r24, 0x04	; 4
     a46:	8f 15       	cp	r24, r15
     a48:	08 f4       	brcc	.+2      	; 0xa4c <fiveinarow_check_win+0xee>
     a4a:	ba cf       	rjmp	.-140    	; 0x9c0 <fiveinarow_check_win+0x62>
	
	//Diagonal backwards
	row_lenght = 1;
	test_x = row_last_x;
     a4c:	d0 91 e0 01 	lds	r29, 0x01E0	; 0x8001e0 <row_last_x>
	test_y = row_last_y;
     a50:	00 91 df 01 	lds	r16, 0x01DF	; 0x8001df <row_last_y>
	test_y = row_last_y;
	while(fiveinarow_is_char(++test_x, ++test_y, last_player))row_lenght++;
	if(row_lenght >= 5)return true;
	
	//Diagonal backwards
	row_lenght = 1;
     a54:	11 e0       	ldi	r17, 0x01	; 1
	test_x = row_last_x;
	test_y = row_last_y;
	while(fiveinarow_is_char(--test_x, ++test_y, last_player))row_lenght++;
     a56:	4c 2f       	mov	r20, r28
     a58:	61 2f       	mov	r22, r17
     a5a:	60 0f       	add	r22, r16
     a5c:	8d 2f       	mov	r24, r29
     a5e:	81 1b       	sub	r24, r17
     a60:	0e 94 32 03 	call	0x664	; 0x664 <fiveinarow_is_char>
     a64:	88 23       	and	r24, r24
     a66:	11 f0       	breq	.+4      	; 0xa6c <fiveinarow_check_win+0x10e>
     a68:	1f 5f       	subi	r17, 0xFF	; 255
     a6a:	f5 cf       	rjmp	.-22     	; 0xa56 <fiveinarow_check_win+0xf8>
	test_x = row_last_x;
     a6c:	d0 91 e0 01 	lds	r29, 0x01E0	; 0x8001e0 <row_last_x>
	test_y = row_last_y;
     a70:	00 91 df 01 	lds	r16, 0x01DF	; 0x8001df <row_last_y>
     a74:	1d 1b       	sub	r17, r29
     a76:	f1 2e       	mov	r15, r17
     a78:	fd 0e       	add	r15, r29
	while(fiveinarow_is_char(++test_x, --test_y, last_player))row_lenght++;
     a7a:	01 50       	subi	r16, 0x01	; 1
     a7c:	df 5f       	subi	r29, 0xFF	; 255
     a7e:	4c 2f       	mov	r20, r28
     a80:	60 2f       	mov	r22, r16
     a82:	8d 2f       	mov	r24, r29
     a84:	0e 94 32 03 	call	0x664	; 0x664 <fiveinarow_is_char>
     a88:	81 11       	cpse	r24, r1
     a8a:	f5 cf       	rjmp	.-22     	; 0xa76 <fiveinarow_check_win+0x118>
	if(row_lenght >= 5)return true;
     a8c:	81 e0       	ldi	r24, 0x01	; 1
     a8e:	94 e0       	ldi	r25, 0x04	; 4
     a90:	9f 15       	cp	r25, r15
     a92:	08 f0       	brcs	.+2      	; 0xa96 <fiveinarow_check_win+0x138>
     a94:	80 e0       	ldi	r24, 0x00	; 0
	
	return false;
}
     a96:	df 91       	pop	r29
     a98:	cf 91       	pop	r28
     a9a:	1f 91       	pop	r17
     a9c:	0f 91       	pop	r16
     a9e:	ff 90       	pop	r15
     aa0:	08 95       	ret

00000aa2 <draw_five_map>:
		}
	}
}

void draw_five_map(){
	fiveinarow_render(row_buf);
     aa2:	8a e6       	ldi	r24, 0x6A	; 106
     aa4:	93 e0       	ldi	r25, 0x03	; 3
     aa6:	0e 94 4a 04 	call	0x894	; 0x894 <fiveinarow_render>
	set_cursor_pos(0);
     aaa:	80 e0       	ldi	r24, 0x00	; 0
     aac:	0e 94 13 0b 	call	0x1626	; 0x1626 <set_cursor_pos>
	write_lcd_string(row_buf);
     ab0:	8a e6       	ldi	r24, 0x6A	; 106
     ab2:	93 e0       	ldi	r25, 0x03	; 3
     ab4:	0c 94 ee 0a 	jmp	0x15dc	; 0x15dc <write_lcd_string>

00000ab8 <enter_main_mode>:
	}
	_delay_ms(30);
}

void enter_main_mode(char* message){
	program_mode = MAIN_MODE;
     ab8:	10 92 c8 02 	sts	0x02C8, r1	; 0x8002c8 <program_mode>
	/*Reset variables and force given message in buffer*/
	game_prompted = false;
     abc:	10 92 c7 02 	sts	0x02C7, r1	; 0x8002c7 <game_prompted>
	redraw = true;
     ac0:	21 e0       	ldi	r18, 0x01	; 1
     ac2:	20 93 01 01 	sts	0x0101, r18	; 0x800101 <redraw>
	request_sent = false;
     ac6:	10 92 c6 02 	sts	0x02C6, r1	; 0x8002c6 <request_sent>
	messages_force(message);
     aca:	0c 94 89 0b 	jmp	0x1712	; 0x1712 <messages_force>

00000ace <do_fir_actions>:
	fiveinarow_render(row_buf);
	set_cursor_pos(0);
	write_lcd_string(row_buf);
}

void do_fir_actions(){
     ace:	0f 93       	push	r16
     ad0:	1f 93       	push	r17
     ad2:	cf 93       	push	r28
     ad4:	df 93       	push	r29
	if(game_over !=  0){ /*Game is over*/
     ad6:	80 91 c4 02 	lds	r24, 0x02C4	; 0x8002c4 <game_over>
     ada:	88 23       	and	r24, r24
     adc:	b9 f0       	breq	.+46     	; 0xb0c <do_fir_actions+0x3e>
		draw_five_map();
     ade:	0e 94 51 05 	call	0xaa2	; 0xaa2 <draw_five_map>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     ae2:	2f ef       	ldi	r18, 0xFF	; 255
     ae4:	8d e3       	ldi	r24, 0x3D	; 61
     ae6:	99 e4       	ldi	r25, 0x49	; 73
     ae8:	21 50       	subi	r18, 0x01	; 1
     aea:	80 40       	sbci	r24, 0x00	; 0
     aec:	90 40       	sbci	r25, 0x00	; 0
     aee:	e1 f7       	brne	.-8      	; 0xae8 <do_fir_actions+0x1a>
     af0:	00 c0       	rjmp	.+0      	; 0xaf2 <do_fir_actions+0x24>
     af2:	00 00       	nop
		_delay_ms(3000);
		enter_main_mode(game_over == 1 ? "You won!" : "You lost!");
     af4:	80 91 c4 02 	lds	r24, 0x02C4	; 0x8002c4 <game_over>
     af8:	81 30       	cpi	r24, 0x01	; 1
     afa:	19 f0       	breq	.+6      	; 0xb02 <do_fir_actions+0x34>
     afc:	87 e2       	ldi	r24, 0x27	; 39
     afe:	91 e0       	ldi	r25, 0x01	; 1
     b00:	02 c0       	rjmp	.+4      	; 0xb06 <do_fir_actions+0x38>
     b02:	8e e1       	ldi	r24, 0x1E	; 30
     b04:	91 e0       	ldi	r25, 0x01	; 1
     b06:	0e 94 5c 05 	call	0xab8	; 0xab8 <enter_main_mode>
     b0a:	6d c0       	rjmp	.+218    	; 0xbe6 <do_fir_actions+0x118>
	} else{ /*Game is running*/
		if(DEADMAN_PRESSED){ /*If deadmans is pressed, attempt to place at cursor*/
     b0c:	4c 99       	sbic	0x09, 4	; 9
     b0e:	23 c0       	rjmp	.+70     	; 0xb56 <do_fir_actions+0x88>
			fiveinarow_place(placebuf, '3');
     b10:	63 e3       	ldi	r22, 0x33	; 51
     b12:	8b e9       	ldi	r24, 0x9B	; 155
     b14:	93 e0       	ldi	r25, 0x03	; 3
     b16:	0e 94 cd 03 	call	0x79a	; 0x79a <fiveinarow_place>
			if(placebuf[0] != '\0'){ /*If could be placed*/
     b1a:	80 91 9b 03 	lds	r24, 0x039B	; 0x80039b <placebuf>
     b1e:	88 23       	and	r24, r24
     b20:	09 f4       	brne	.+2      	; 0xb24 <do_fir_actions+0x56>
     b22:	61 c0       	rjmp	.+194    	; 0xbe6 <do_fir_actions+0x118>
				music_play_note(NOTE(F_PITCH, 2, SIXTEENTH_NOTE), 100);
     b24:	64 e6       	ldi	r22, 0x64	; 100
     b26:	82 e9       	ldi	r24, 0x92	; 146
     b28:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <music_play_note>
				if(fiveinarow_check_win()){ /*Check for win*/
     b2c:	0e 94 af 04 	call	0x95e	; 0x95e <fiveinarow_check_win>
     b30:	88 23       	and	r24, r24
     b32:	49 f0       	breq	.+18     	; 0xb46 <do_fir_actions+0x78>
					game_over = 1;
     b34:	81 e0       	ldi	r24, 0x01	; 1
     b36:	80 93 c4 02 	sts	0x02C4, r24	; 0x8002c4 <game_over>
					punished = false;
     b3a:	10 92 c5 02 	sts	0x02C5, r1	; 0x8002c5 <punished>
					music_play_song_pgm(melodies[AMOGUS_SONG]);
     b3e:	86 e1       	ldi	r24, 0x16	; 22
     b40:	93 e0       	ldi	r25, 0x03	; 3
     b42:	0e 94 89 0c 	call	0x1912	; 0x1912 <music_play_song_pgm>
				}
				uart_send_line(placebuf);
     b46:	8b e9       	ldi	r24, 0x9B	; 155
     b48:	93 e0       	ldi	r25, 0x03	; 3
     b4a:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <uart_send_line>
				redraw = true;
     b4e:	81 e0       	ldi	r24, 0x01	; 1
     b50:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <redraw>
     b54:	48 c0       	rjmp	.+144    	; 0xbe6 <do_fir_actions+0x118>
			}
		} else { /*If deadmans is not pressed. Check for moving cursor*/
			uint16_t x = read_avg_adc(1, 20);
     b56:	64 e1       	ldi	r22, 0x14	; 20
     b58:	70 e0       	ldi	r23, 0x00	; 0
     b5a:	81 e0       	ldi	r24, 0x01	; 1
     b5c:	0e 94 95 0a 	call	0x152a	; 0x152a <read_avg_adc>
     b60:	8c 01       	movw	r16, r24
			uint16_t y = read_avg_adc(2, 20);
     b62:	64 e1       	ldi	r22, 0x14	; 20
     b64:	70 e0       	ldi	r23, 0x00	; 0
     b66:	82 e0       	ldi	r24, 0x02	; 2
     b68:	0e 94 95 0a 	call	0x152a	; 0x152a <read_avg_adc>
     b6c:	ec 01       	movw	r28, r24
			
			
			if(fir_cursor_move_delay == 0){
     b6e:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <fir_cursor_move_delay>
     b72:	81 11       	cpse	r24, r1
     b74:	33 c0       	rjmp	.+102    	; 0xbdc <do_fir_actions+0x10e>
				if(x > x_rest+20){
     b76:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <x_rest>
     b7a:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <x_rest+0x1>
     b7e:	44 96       	adiw	r24, 0x14	; 20
     b80:	80 17       	cp	r24, r16
     b82:	91 07       	cpc	r25, r17
     b84:	18 f4       	brcc	.+6      	; 0xb8c <do_fir_actions+0xbe>
					fiveinarow_down();
     b86:	0e 94 b1 03 	call	0x762	; 0x762 <fiveinarow_down>
     b8a:	0a c0       	rjmp	.+20     	; 0xba0 <do_fir_actions+0xd2>
					redraw = true;
				}
				else if(x < x_rest-15){
     b8c:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <x_rest>
     b90:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <x_rest+0x1>
     b94:	0f 97       	sbiw	r24, 0x0f	; 15
     b96:	08 17       	cp	r16, r24
     b98:	19 07       	cpc	r17, r25
     b9a:	28 f4       	brcc	.+10     	; 0xba6 <do_fir_actions+0xd8>
					fiveinarow_up();
     b9c:	0e 94 9a 03 	call	0x734	; 0x734 <fiveinarow_up>
					redraw = true;
     ba0:	81 e0       	ldi	r24, 0x01	; 1
     ba2:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <redraw>
				}
				if(y > y_rest+20){
     ba6:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <y_rest>
     baa:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <y_rest+0x1>
     bae:	44 96       	adiw	r24, 0x14	; 20
     bb0:	8c 17       	cp	r24, r28
     bb2:	9d 07       	cpc	r25, r29
     bb4:	18 f4       	brcc	.+6      	; 0xbbc <do_fir_actions+0xee>
					fiveinarow_left();
     bb6:	0e 94 80 03 	call	0x700	; 0x700 <fiveinarow_left>
     bba:	0a c0       	rjmp	.+20     	; 0xbd0 <do_fir_actions+0x102>
					redraw = true;
				}
				else if(y < y_rest-20){
     bbc:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <y_rest>
     bc0:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <y_rest+0x1>
     bc4:	44 97       	sbiw	r24, 0x14	; 20
     bc6:	c8 17       	cp	r28, r24
     bc8:	d9 07       	cpc	r29, r25
     bca:	28 f4       	brcc	.+10     	; 0xbd6 <do_fir_actions+0x108>
					fiveinarow_right();
     bcc:	0e 94 8d 03 	call	0x71a	; 0x71a <fiveinarow_right>
					redraw = true;
     bd0:	81 e0       	ldi	r24, 0x01	; 1
     bd2:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <redraw>
				}
				fir_cursor_move_delay = MOVE_DELAY_VAL;
     bd6:	8d e2       	ldi	r24, 0x2D	; 45
     bd8:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <fir_cursor_move_delay>
			}
			if(redraw){
     bdc:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <redraw>
     be0:	81 11       	cpse	r24, r1
				draw_five_map();
     be2:	0e 94 51 05 	call	0xaa2	; 0xaa2 <draw_five_map>
     be6:	8f e5       	ldi	r24, 0x5F	; 95
     be8:	9a ee       	ldi	r25, 0xEA	; 234
     bea:	01 97       	sbiw	r24, 0x01	; 1
     bec:	f1 f7       	brne	.-4      	; 0xbea <do_fir_actions+0x11c>
     bee:	00 c0       	rjmp	.+0      	; 0xbf0 <do_fir_actions+0x122>
     bf0:	00 00       	nop
			}
		}
	}
	_delay_ms(30);
}
     bf2:	df 91       	pop	r29
     bf4:	cf 91       	pop	r28
     bf6:	1f 91       	pop	r17
     bf8:	0f 91       	pop	r16
     bfa:	08 95       	ret

00000bfc <enter_fir_mode>:
	request_sent = false;
	messages_force(message);
}

void enter_fir_mode(){
	program_mode = FIR_MODE;
     bfc:	81 e0       	ldi	r24, 0x01	; 1
     bfe:	80 93 c8 02 	sts	0x02C8, r24	; 0x8002c8 <program_mode>
	game_over = 0;
     c02:	10 92 c4 02 	sts	0x02C4, r1	; 0x8002c4 <game_over>
	redraw = true;
     c06:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <redraw>
	if(LED_PORT & (1<<LEDG)){ /*If deadmans is active, disable*/
     c0a:	5d 9b       	sbis	0x0b, 5	; 11
     c0c:	05 c0       	rjmp	.+10     	; 0xc18 <enter_fir_mode+0x1c>
		uart_send_line("040");
     c0e:	81 e3       	ldi	r24, 0x31	; 49
     c10:	91 e0       	ldi	r25, 0x01	; 1
     c12:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <uart_send_line>
		LED_PORT &= ~(1<<LEDG);
     c16:	5d 98       	cbi	0x0b, 5	; 11
     c18:	08 95       	ret

00000c1a <send_move_command>:
		} else gamebtn_last = 0;
	}
	_delay_ms(50);
}

void send_move_command(){
     c1a:	0f 93       	push	r16
     c1c:	1f 93       	push	r17
     c1e:	cf 93       	push	r28
     c20:	df 93       	push	r29
	
	int16_t x_diff = x_rest - read_avg_adc(1, 25);
     c22:	c0 91 15 01 	lds	r28, 0x0115	; 0x800115 <x_rest>
     c26:	d0 91 16 01 	lds	r29, 0x0116	; 0x800116 <x_rest+0x1>
     c2a:	69 e1       	ldi	r22, 0x19	; 25
     c2c:	70 e0       	ldi	r23, 0x00	; 0
     c2e:	81 e0       	ldi	r24, 0x01	; 1
     c30:	0e 94 95 0a 	call	0x152a	; 0x152a <read_avg_adc>
     c34:	c8 1b       	sub	r28, r24
     c36:	d9 0b       	sbc	r29, r25
	int16_t y_diff = y_rest - read_avg_adc(2, 25);
     c38:	00 91 13 01 	lds	r16, 0x0113	; 0x800113 <y_rest>
     c3c:	10 91 14 01 	lds	r17, 0x0114	; 0x800114 <y_rest+0x1>
     c40:	69 e1       	ldi	r22, 0x19	; 25
     c42:	70 e0       	ldi	r23, 0x00	; 0
     c44:	82 e0       	ldi	r24, 0x02	; 2
     c46:	0e 94 95 0a 	call	0x152a	; 0x152a <read_avg_adc>
     c4a:	98 01       	movw	r18, r16
     c4c:	28 1b       	sub	r18, r24
     c4e:	39 0b       	sbc	r19, r25
	int16_t left = x_diff+y_diff;
     c50:	8e 01       	movw	r16, r28
     c52:	02 0f       	add	r16, r18
     c54:	13 1f       	adc	r17, r19
	int16_t right = x_diff-y_diff;
     c56:	c2 1b       	sub	r28, r18
     c58:	d3 0b       	sbc	r29, r19
	/*Keep values within bounds*/
	if(left > 127){
     c5a:	00 38       	cpi	r16, 0x80	; 128
     c5c:	11 05       	cpc	r17, r1
     c5e:	5c f4       	brge	.+22     	; 0xc76 <send_move_command+0x5c>
		left = 127;
	}
	else if(left < -127){
     c60:	01 38       	cpi	r16, 0x81	; 129
     c62:	3f ef       	ldi	r19, 0xFF	; 255
     c64:	13 07       	cpc	r17, r19
     c66:	54 f0       	brlt	.+20     	; 0xc7c <send_move_command+0x62>
		left = -127;
	} else if(left > -5 && left < 5) left = 0;
     c68:	c8 01       	movw	r24, r16
     c6a:	04 96       	adiw	r24, 0x04	; 4
     c6c:	09 97       	sbiw	r24, 0x09	; 9
     c6e:	40 f4       	brcc	.+16     	; 0xc80 <send_move_command+0x66>
     c70:	00 e0       	ldi	r16, 0x00	; 0
     c72:	10 e0       	ldi	r17, 0x00	; 0
     c74:	05 c0       	rjmp	.+10     	; 0xc80 <send_move_command+0x66>
	int16_t y_diff = y_rest - read_avg_adc(2, 25);
	int16_t left = x_diff+y_diff;
	int16_t right = x_diff-y_diff;
	/*Keep values within bounds*/
	if(left > 127){
		left = 127;
     c76:	0f e7       	ldi	r16, 0x7F	; 127
     c78:	10 e0       	ldi	r17, 0x00	; 0
     c7a:	02 c0       	rjmp	.+4      	; 0xc80 <send_move_command+0x66>
	}
	else if(left < -127){
		left = -127;
     c7c:	01 e8       	ldi	r16, 0x81	; 129
     c7e:	1f ef       	ldi	r17, 0xFF	; 255
	} else if(left > -5 && left < 5) left = 0;
		
	if(right > 127) {
     c80:	c0 38       	cpi	r28, 0x80	; 128
     c82:	d1 05       	cpc	r29, r1
     c84:	5c f4       	brge	.+22     	; 0xc9c <send_move_command+0x82>
		right = 127;
	}
	else if(right < -127){
     c86:	c1 38       	cpi	r28, 0x81	; 129
     c88:	8f ef       	ldi	r24, 0xFF	; 255
     c8a:	d8 07       	cpc	r29, r24
     c8c:	54 f0       	brlt	.+20     	; 0xca2 <send_move_command+0x88>
		right = -127;
	} else if(right > -5 && right < 5) right = 0;
     c8e:	ce 01       	movw	r24, r28
     c90:	04 96       	adiw	r24, 0x04	; 4
     c92:	09 97       	sbiw	r24, 0x09	; 9
     c94:	40 f4       	brcc	.+16     	; 0xca6 <send_move_command+0x8c>
     c96:	c0 e0       	ldi	r28, 0x00	; 0
     c98:	d0 e0       	ldi	r29, 0x00	; 0
     c9a:	05 c0       	rjmp	.+10     	; 0xca6 <send_move_command+0x8c>
	else if(left < -127){
		left = -127;
	} else if(left > -5 && left < 5) left = 0;
		
	if(right > 127) {
		right = 127;
     c9c:	cf e7       	ldi	r28, 0x7F	; 127
     c9e:	d0 e0       	ldi	r29, 0x00	; 0
     ca0:	02 c0       	rjmp	.+4      	; 0xca6 <send_move_command+0x8c>
	}
	else if(right < -127){
		right = -127;
     ca2:	c1 e8       	ldi	r28, 0x81	; 129
     ca4:	df ef       	ldi	r29, 0xFF	; 255
	/*if(HALFSWITCH_TOGGLED){
		left = left/2;
		right = right/2;
	}*/
	/*Ignore duplicate values*/
	if(left != last_left || right != last_right){
     ca6:	80 91 cb 02 	lds	r24, 0x02CB	; 0x8002cb <last_left>
     caa:	90 91 cc 02 	lds	r25, 0x02CC	; 0x8002cc <last_left+0x1>
     cae:	08 17       	cp	r16, r24
     cb0:	19 07       	cpc	r17, r25
     cb2:	39 f4       	brne	.+14     	; 0xcc2 <send_move_command+0xa8>
     cb4:	80 91 c9 02 	lds	r24, 0x02C9	; 0x8002c9 <last_right>
     cb8:	90 91 ca 02 	lds	r25, 0x02CA	; 0x8002ca <last_right+0x1>
     cbc:	c8 17       	cp	r28, r24
     cbe:	d9 07       	cpc	r29, r25
     cc0:	19 f1       	breq	.+70     	; 0xd08 <send_move_command+0xee>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     cc2:	4a e0       	ldi	r20, 0x0A	; 10
     cc4:	64 e0       	ldi	r22, 0x04	; 4
     cc6:	71 e0       	ldi	r23, 0x01	; 1
     cc8:	c8 01       	movw	r24, r16
     cca:	0e 94 c7 10 	call	0x218e	; 0x218e <__itoa_ncheck>
		/*Build output string*/
		itoa(left, itoabuf+2, 10);
		uint8_t len = strlen(itoabuf);
     cce:	e2 e0       	ldi	r30, 0x02	; 2
     cd0:	f1 e0       	ldi	r31, 0x01	; 1
     cd2:	01 90       	ld	r0, Z+
     cd4:	00 20       	and	r0, r0
     cd6:	e9 f7       	brne	.-6      	; 0xcd2 <send_move_command+0xb8>
     cd8:	31 97       	sbiw	r30, 0x01	; 1
     cda:	e2 50       	subi	r30, 0x02	; 2
     cdc:	f1 40       	sbci	r31, 0x01	; 1
		itoabuf[len++] = ' ';
     cde:	df 01       	movw	r26, r30
     ce0:	bb 27       	eor	r27, r27
     ce2:	ae 5f       	subi	r26, 0xFE	; 254
     ce4:	be 4f       	sbci	r27, 0xFE	; 254
     ce6:	80 e2       	ldi	r24, 0x20	; 32
     ce8:	8c 93       	st	X, r24
     cea:	ef 5f       	subi	r30, 0xFF	; 255
     cec:	6e 2f       	mov	r22, r30
     cee:	70 e0       	ldi	r23, 0x00	; 0
     cf0:	6e 5f       	subi	r22, 0xFE	; 254
     cf2:	7e 4f       	sbci	r23, 0xFE	; 254
     cf4:	4a e0       	ldi	r20, 0x0A	; 10
     cf6:	ce 01       	movw	r24, r28
     cf8:	0e 94 c7 10 	call	0x218e	; 0x218e <__itoa_ncheck>
		itoa(right, itoabuf+len, 10);
		/*Send string*/
		uart_send_line(itoabuf);
     cfc:	82 e0       	ldi	r24, 0x02	; 2
     cfe:	91 e0       	ldi	r25, 0x01	; 1
     d00:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <uart_send_line>
		move_command_hundreths = 0; /*Reset cooldown*/
     d04:	10 92 d0 02 	sts	0x02D0, r1	; 0x8002d0 <move_command_hundreths>
	}
	last_left = left;
     d08:	10 93 cc 02 	sts	0x02CC, r17	; 0x8002cc <last_left+0x1>
     d0c:	00 93 cb 02 	sts	0x02CB, r16	; 0x8002cb <last_left>
	last_right = right;
     d10:	d0 93 ca 02 	sts	0x02CA, r29	; 0x8002ca <last_right+0x1>
     d14:	c0 93 c9 02 	sts	0x02C9, r28	; 0x8002c9 <last_right>
}
     d18:	df 91       	pop	r29
     d1a:	cf 91       	pop	r28
     d1c:	1f 91       	pop	r17
     d1e:	0f 91       	pop	r16
     d20:	08 95       	ret

00000d22 <print_lcd_static>:

void print_lcd_static(){
	set_cursor_pos(0);
     d22:	80 e0       	ldi	r24, 0x00	; 0
     d24:	0e 94 13 0b 	call	0x1626	; 0x1626 <set_cursor_pos>
	write_lcd_string("Fram: ??cm PIR:?");
     d28:	85 e3       	ldi	r24, 0x35	; 53
     d2a:	91 e0       	ldi	r25, 0x01	; 1
     d2c:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <write_lcd_string>
	set_cursor_pos(16);
     d30:	80 e1       	ldi	r24, 0x10	; 16
     d32:	0e 94 13 0b 	call	0x1626	; 0x1626 <set_cursor_pos>
	write_lcd_string("Bak: ??cm  C: ??");
     d36:	86 e4       	ldi	r24, 0x46	; 70
     d38:	91 e0       	ldi	r25, 0x01	; 1
     d3a:	0c 94 ee 0a 	jmp	0x15dc	; 0x15dc <write_lcd_string>

00000d3e <timer_init>:
}

void timer_init(){
	/* Start 100Hz system timer with TC2 for counting time */
	OCR2A = 77;
     d3e:	8d e4       	ldi	r24, 0x4D	; 77
     d40:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
	TCCR2A = 1<<WGM21;
     d44:	82 e0       	ldi	r24, 0x02	; 2
     d46:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
	TCCR2B = 7;
     d4a:	97 e0       	ldi	r25, 0x07	; 7
     d4c:	90 93 b1 00 	sts	0x00B1, r25	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
	TIMSK2 = 1<<OCIE2A;
     d50:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f8070>
     d54:	08 95       	ret

00000d56 <process_fir_command>:
			}
			break;
	}
}

void process_fir_command(volatile uint8_t* args){
     d56:	1f 93       	push	r17
     d58:	cf 93       	push	r28
     d5a:	df 93       	push	r29
     d5c:	ec 01       	movw	r28, r24
	if(program_mode == FIR_MODE){ /*If already in a game*/
     d5e:	10 91 c8 02 	lds	r17, 0x02C8	; 0x8002c8 <program_mode>
		if(*args >= 'A'){ /*Protocol dictates that argument over 'A' is "Cancel match" during match*/
     d62:	88 81       	ld	r24, Y
			break;
	}
}

void process_fir_command(volatile uint8_t* args){
	if(program_mode == FIR_MODE){ /*If already in a game*/
     d64:	11 30       	cpi	r17, 0x01	; 1
     d66:	69 f5       	brne	.+90     	; 0xdc2 <process_fir_command+0x6c>
		if(*args >= 'A'){ /*Protocol dictates that argument over 'A' is "Cancel match" during match*/
     d68:	81 34       	cpi	r24, 0x41	; 65
     d6a:	38 f0       	brcs	.+14     	; 0xd7a <process_fir_command+0x24>
			enter_main_mode("Game canceled");
     d6c:	87 e5       	ldi	r24, 0x57	; 87
     d6e:	91 e0       	ldi	r25, 0x01	; 1
			enter_fir_mode();
			fiveinarow_setup(false); /*Start match where opponent starts first*/
			fiveinarow_recive((char*)(args-2)); /*Receive first move*/
			music_play_note(NOTE(G_PITCH, 2, SIXTEENTH_NOTE), 100);
		}
}
     d70:	df 91       	pop	r29
     d72:	cf 91       	pop	r28
     d74:	1f 91       	pop	r17
}

void process_fir_command(volatile uint8_t* args){
	if(program_mode == FIR_MODE){ /*If already in a game*/
		if(*args >= 'A'){ /*Protocol dictates that argument over 'A' is "Cancel match" during match*/
			enter_main_mode("Game canceled");
     d76:	0c 94 5c 05 	jmp	0xab8	; 0xab8 <enter_main_mode>
			} else{ /*All other arguments during match are moves*/
				if(!row_player_turn){
     d7a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     d7e:	81 11       	cpse	r24, r1
     d80:	3b c0       	rjmp	.+118    	; 0xdf8 <process_fir_command+0xa2>
					fiveinarow_recive((char*)(args-2));
     d82:	ce 01       	movw	r24, r28
     d84:	02 97       	sbiw	r24, 0x02	; 2
     d86:	0e 94 0e 04 	call	0x81c	; 0x81c <fiveinarow_recive>
					music_play_note(NOTE(G_PITCH, 2, SIXTEENTH_NOTE), 100);
     d8a:	64 e6       	ldi	r22, 0x64	; 100
     d8c:	84 e9       	ldi	r24, 0x94	; 148
     d8e:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <music_play_note>
					if(fiveinarow_check_win()){
     d92:	0e 94 af 04 	call	0x95e	; 0x95e <fiveinarow_check_win>
     d96:	88 23       	and	r24, r24
     d98:	91 f0       	breq	.+36     	; 0xdbe <process_fir_command+0x68>
						game_over = 2; /*Mark game as over and lost*/
     d9a:	82 e0       	ldi	r24, 0x02	; 2
     d9c:	80 93 c4 02 	sts	0x02C4, r24	; 0x8002c4 <game_over>
						punished = true;
     da0:	10 93 c5 02 	sts	0x02C5, r17	; 0x8002c5 <punished>
						punished_timout_hundreths = 100;
     da4:	84 e6       	ldi	r24, 0x64	; 100
     da6:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <punished_timout_hundreths>
						punished_timout_seconds = PUNISH_TIMEOUT_VAL;
     daa:	88 e5       	ldi	r24, 0x58	; 88
     dac:	92 e0       	ldi	r25, 0x02	; 2
     dae:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <punished_timout_seconds+0x1>
     db2:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <punished_timout_seconds>
						music_play_song_pgm(melodies[UNTITLED_SONG]);
     db6:	8a e1       	ldi	r24, 0x1A	; 26
     db8:	95 e0       	ldi	r25, 0x05	; 5
     dba:	0e 94 89 0c 	call	0x1912	; 0x1912 <music_play_song_pgm>
					}
					redraw = true;
     dbe:	81 e0       	ldi	r24, 0x01	; 1
     dc0:	05 c0       	rjmp	.+10     	; 0xdcc <process_fir_command+0x76>
				}
			}
		} else if(*args < '0'){ /*Protocol dictates that outside of a match < '0' means "Shall we play?"*/
     dc2:	80 33       	cpi	r24, 0x30	; 48
     dc4:	30 f4       	brcc	.+12     	; 0xdd2 <process_fir_command+0x7c>
			game_prompted = true;
     dc6:	81 e0       	ldi	r24, 0x01	; 1
     dc8:	80 93 c7 02 	sts	0x02C7, r24	; 0x8002c7 <game_prompted>
			redraw = true;
     dcc:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <redraw>
     dd0:	13 c0       	rjmp	.+38     	; 0xdf8 <process_fir_command+0xa2>
		} else if(*args < 'A'){ /*Else the command received is the first move of the opponent*/
     dd2:	88 81       	ld	r24, Y
     dd4:	81 34       	cpi	r24, 0x41	; 65
     dd6:	80 f4       	brcc	.+32     	; 0xdf8 <process_fir_command+0xa2>
			enter_fir_mode();
     dd8:	0e 94 fe 05 	call	0xbfc	; 0xbfc <enter_fir_mode>
			fiveinarow_setup(false); /*Start match where opponent starts first*/
     ddc:	80 e0       	ldi	r24, 0x00	; 0
     dde:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <fiveinarow_setup>
			fiveinarow_recive((char*)(args-2)); /*Receive first move*/
     de2:	ce 01       	movw	r24, r28
     de4:	02 97       	sbiw	r24, 0x02	; 2
     de6:	0e 94 0e 04 	call	0x81c	; 0x81c <fiveinarow_recive>
			music_play_note(NOTE(G_PITCH, 2, SIXTEENTH_NOTE), 100);
     dea:	64 e6       	ldi	r22, 0x64	; 100
     dec:	84 e9       	ldi	r24, 0x94	; 148
		}
}
     dee:	df 91       	pop	r29
     df0:	cf 91       	pop	r28
     df2:	1f 91       	pop	r17
			redraw = true;
		} else if(*args < 'A'){ /*Else the command received is the first move of the opponent*/
			enter_fir_mode();
			fiveinarow_setup(false); /*Start match where opponent starts first*/
			fiveinarow_recive((char*)(args-2)); /*Receive first move*/
			music_play_note(NOTE(G_PITCH, 2, SIXTEENTH_NOTE), 100);
     df4:	0c 94 ff 0b 	jmp	0x17fe	; 0x17fe <music_play_note>
		}
}
     df8:	df 91       	pop	r29
     dfa:	cf 91       	pop	r28
     dfc:	1f 91       	pop	r17
     dfe:	08 95       	ret

00000e00 <perform_command>:
	TCCR2A = 1<<WGM21;
	TCCR2B = 7;
	TIMSK2 = 1<<OCIE2A;
}

void perform_command(uint8_t topic, uint8_t command, volatile uint8_t* args){
     e00:	28 2f       	mov	r18, r24
     e02:	ca 01       	movw	r24, r20
	switch(topic){
     e04:	21 33       	cpi	r18, 0x31	; 49
     e06:	19 f0       	breq	.+6      	; 0xe0e <perform_command+0xe>
     e08:	22 33       	cpi	r18, 0x32	; 50
     e0a:	b9 f0       	breq	.+46     	; 0xe3a <perform_command+0x3a>
     e0c:	08 95       	ret
		case '1': //From car
			switch(command){
     e0e:	61 33       	cpi	r22, 0x31	; 49
     e10:	41 f0       	breq	.+16     	; 0xe22 <perform_command+0x22>
     e12:	62 33       	cpi	r22, 0x32	; 50
     e14:	79 f0       	breq	.+30     	; 0xe34 <perform_command+0x34>
     e16:	60 33       	cpi	r22, 0x30	; 48
     e18:	e1 f5       	brne	.+120    	; 0xe92 <perform_command+0x92>
				case '0': /*Emergency break triggered*/
					messages_force("Stopp!          ");
     e1a:	85 e6       	ldi	r24, 0x65	; 101
     e1c:	91 e0       	ldi	r25, 0x01	; 1
     e1e:	0c 94 89 0b 	jmp	0x1712	; 0x1712 <messages_force>
     e22:	ba 01       	movw	r22, r20
					break;
				case '1': /*Sensor data received*/
					strcpy((char*)sensor_buf, (char*)args);
     e24:	84 eb       	ldi	r24, 0xB4	; 180
     e26:	93 e0       	ldi	r25, 0x03	; 3
     e28:	0e 94 c0 10 	call	0x2180	; 0x2180 <strcpy>
					sensors_received = true;
     e2c:	81 e0       	ldi	r24, 0x01	; 1
     e2e:	80 93 cd 02 	sts	0x02CD, r24	; 0x8002cd <sensors_received>
					break;
     e32:	08 95       	ret
				case '2': /*PONG response to a PING*/
					messages_queue("PONG            ");
     e34:	86 e7       	ldi	r24, 0x76	; 118
     e36:	91 e0       	ldi	r25, 0x01	; 1
     e38:	0f c0       	rjmp	.+30     	; 0xe58 <perform_command+0x58>
			}
			break;
		case '2': //To remote
			switch(command){
     e3a:	62 33       	cpi	r22, 0x32	; 50
     e3c:	79 f0       	breq	.+30     	; 0xe5c <perform_command+0x5c>
     e3e:	28 f4       	brcc	.+10     	; 0xe4a <perform_command+0x4a>
     e40:	60 33       	cpi	r22, 0x30	; 48
     e42:	41 f0       	breq	.+16     	; 0xe54 <perform_command+0x54>
     e44:	61 33       	cpi	r22, 0x31	; 49
     e46:	41 f0       	breq	.+16     	; 0xe58 <perform_command+0x58>
     e48:	08 95       	ret
     e4a:	63 33       	cpi	r22, 0x33	; 51
     e4c:	b9 f0       	breq	.+46     	; 0xe7c <perform_command+0x7c>
     e4e:	64 33       	cpi	r22, 0x34	; 52
     e50:	b9 f0       	breq	.+46     	; 0xe80 <perform_command+0x80>
     e52:	08 95       	ret
				case '0': /*Heartbeat received*/
					LED_PORT &= ~(1<<LEDR2);
     e54:	5f 98       	cbi	0x0b, 7	; 11
     e56:	08 95       	ret
					break;
				case '1': /*Message received*/
					messages_queue((char*)args);
     e58:	0c 94 9a 0b 	jmp	0x1734	; 0x1734 <messages_queue>
					break;
				case '2': /*Honk request received*/
					music_play_song_pgm(melodies[args[0]-'0']);
     e5c:	fa 01       	movw	r30, r20
     e5e:	20 81       	ld	r18, Z
     e60:	30 e0       	ldi	r19, 0x00	; 0
     e62:	20 53       	subi	r18, 0x30	; 48
     e64:	31 09       	sbc	r19, r1
     e66:	c9 01       	movw	r24, r18
     e68:	88 0f       	add	r24, r24
     e6a:	99 1f       	adc	r25, r25
     e6c:	32 2f       	mov	r19, r18
     e6e:	22 27       	eor	r18, r18
     e70:	82 0f       	add	r24, r18
     e72:	93 1f       	adc	r25, r19
     e74:	8e 5e       	subi	r24, 0xEE	; 238
     e76:	9e 4f       	sbci	r25, 0xFE	; 254
     e78:	0c 94 89 0c 	jmp	0x1912	; 0x1912 <music_play_song_pgm>
					break;
				case '3': /*Five in a row related command received*/
					process_fir_command(args);
     e7c:	0c 94 ab 06 	jmp	0xd56	; 0xd56 <process_fir_command>
					break;
				case '4': /*Received deadman info from rem2*/
					/*Set lamp to correspond with opponents deadman switch*/
					if(args[0] == '1'){
     e80:	fa 01       	movw	r30, r20
     e82:	80 81       	ld	r24, Z
     e84:	81 33       	cpi	r24, 0x31	; 49
     e86:	11 f4       	brne	.+4      	; 0xe8c <perform_command+0x8c>
						LED_PORT |= 1<<LEDR1;
     e88:	5e 9a       	sbi	0x0b, 6	; 11
     e8a:	08 95       	ret
					} else{
						LED_PORT &= ~(1<<LEDR1);
     e8c:	5e 98       	cbi	0x0b, 6	; 11
						/*Clear punished state when rem2 releases deadmans switch*/
						punished = false;
     e8e:	10 92 c5 02 	sts	0x02C5, r1	; 0x8002c5 <punished>
     e92:	08 95       	ret

00000e94 <display_sensors>:
			fiveinarow_recive((char*)(args-2)); /*Receive first move*/
			music_play_note(NOTE(G_PITCH, 2, SIXTEENTH_NOTE), 100);
		}
}

void display_sensors(){
     e94:	1f 93       	push	r17
     e96:	cf 93       	push	r28
     e98:	df 93       	push	r29
	char* args = (char*)sensor_buf;
	/*Write out contact sensors, PIR-sensor*/
	set_cursor_pos(CR_POS);
     e9a:	8f e1       	ldi	r24, 0x1F	; 31
     e9c:	0e 94 13 0b 	call	0x1626	; 0x1626 <set_cursor_pos>
	write_lcd_char((args[0] == '0') ? 'R' : '_');
     ea0:	80 91 b4 03 	lds	r24, 0x03B4	; 0x8003b4 <sensor_buf>
     ea4:	80 33       	cpi	r24, 0x30	; 48
     ea6:	11 f0       	breq	.+4      	; 0xeac <display_sensors+0x18>
     ea8:	8f e5       	ldi	r24, 0x5F	; 95
     eaa:	01 c0       	rjmp	.+2      	; 0xeae <display_sensors+0x1a>
     eac:	82 e5       	ldi	r24, 0x52	; 82
     eae:	0e 94 df 0a 	call	0x15be	; 0x15be <write_lcd_char>
	set_cursor_pos(CL_POS);
     eb2:	8e e1       	ldi	r24, 0x1E	; 30
     eb4:	0e 94 13 0b 	call	0x1626	; 0x1626 <set_cursor_pos>
	write_lcd_char((args[1] == '0') ? 'L' : '_');
     eb8:	80 91 b5 03 	lds	r24, 0x03B5	; 0x8003b5 <sensor_buf+0x1>
     ebc:	80 33       	cpi	r24, 0x30	; 48
     ebe:	11 f0       	breq	.+4      	; 0xec4 <display_sensors+0x30>
     ec0:	8f e5       	ldi	r24, 0x5F	; 95
     ec2:	01 c0       	rjmp	.+2      	; 0xec6 <display_sensors+0x32>
     ec4:	8c e4       	ldi	r24, 0x4C	; 76
     ec6:	0e 94 df 0a 	call	0x15be	; 0x15be <write_lcd_char>
	set_cursor_pos(PIR_POS);
     eca:	8f e0       	ldi	r24, 0x0F	; 15
     ecc:	0e 94 13 0b 	call	0x1626	; 0x1626 <set_cursor_pos>
	write_lcd_char((args[3] == '0') ? 'X' : '_');
     ed0:	80 91 b7 03 	lds	r24, 0x03B7	; 0x8003b7 <sensor_buf+0x3>
     ed4:	80 33       	cpi	r24, 0x30	; 48
     ed6:	11 f0       	breq	.+4      	; 0xedc <display_sensors+0x48>
     ed8:	8f e5       	ldi	r24, 0x5F	; 95
     eda:	01 c0       	rjmp	.+2      	; 0xede <display_sensors+0x4a>
     edc:	88 e5       	ldi	r24, 0x58	; 88
     ede:	0e 94 df 0a 	call	0x15be	; 0x15be <write_lcd_char>
	/*If button is pressed, honk*/
	if(args[2] == '0') music_play_song_pgm(melodies[HONK_SONG]);
     ee2:	80 91 b6 03 	lds	r24, 0x03B6	; 0x8003b6 <sensor_buf+0x2>
     ee6:	80 33       	cpi	r24, 0x30	; 48
     ee8:	21 f4       	brne	.+8      	; 0xef2 <display_sensors+0x5e>
     eea:	82 e1       	ldi	r24, 0x12	; 18
     eec:	91 e0       	ldi	r25, 0x01	; 1
     eee:	0e 94 89 0c 	call	0x1912	; 0x1912 <music_play_song_pgm>
	
	/*Read through arguments and store indices of range data*/
	uint8_t b = 5;
     ef2:	c5 e0       	ldi	r28, 0x05	; 5
	while(args[++b] != ' ');
     ef4:	81 e0       	ldi	r24, 0x01	; 1
     ef6:	8c 0f       	add	r24, r28
     ef8:	e8 2f       	mov	r30, r24
     efa:	f0 e0       	ldi	r31, 0x00	; 0
     efc:	ec 54       	subi	r30, 0x4C	; 76
     efe:	fc 4f       	sbci	r31, 0xFC	; 252
     f00:	90 81       	ld	r25, Z
     f02:	90 32       	cpi	r25, 0x20	; 32
     f04:	11 f0       	breq	.+4      	; 0xf0a <display_sensors+0x76>
     f06:	c8 2f       	mov	r28, r24
     f08:	f5 cf       	rjmp	.-22     	; 0xef4 <display_sensors+0x60>
	args[b++] = '\0';
     f0a:	ce 5f       	subi	r28, 0xFE	; 254
     f0c:	10 82       	st	Z, r1
     f0e:	8c 2f       	mov	r24, r28
	uint8_t k = b;
	while(args[++k] != ' ');
     f10:	91 e0       	ldi	r25, 0x01	; 1
     f12:	98 0f       	add	r25, r24
     f14:	e9 2f       	mov	r30, r25
     f16:	f0 e0       	ldi	r31, 0x00	; 0
     f18:	ec 54       	subi	r30, 0x4C	; 76
     f1a:	fc 4f       	sbci	r31, 0xFC	; 252
     f1c:	20 81       	ld	r18, Z
     f1e:	20 32       	cpi	r18, 0x20	; 32
     f20:	11 f0       	breq	.+4      	; 0xf26 <display_sensors+0x92>
     f22:	89 2f       	mov	r24, r25
     f24:	f5 cf       	rjmp	.-22     	; 0xf10 <display_sensors+0x7c>
	args[k++] = '\0';
     f26:	d2 e0       	ldi	r29, 0x02	; 2
     f28:	d8 0f       	add	r29, r24
     f2a:	10 82       	st	Z, r1
	
	/*Write front value*/
	set_cursor_pos(FRONT_POS);
     f2c:	85 e0       	ldi	r24, 0x05	; 5
     f2e:	0e 94 13 0b 	call	0x1626	; 0x1626 <set_cursor_pos>
	if(b == 7 && args[5] == '0'){ //0 is sent for front
     f32:	c7 30       	cpi	r28, 0x07	; 7
     f34:	39 f4       	brne	.+14     	; 0xf44 <display_sensors+0xb0>
     f36:	80 91 b9 03 	lds	r24, 0x03B9	; 0x8003b9 <sensor_buf+0x5>
     f3a:	80 33       	cpi	r24, 0x30	; 48
     f3c:	19 f4       	brne	.+6      	; 0xf44 <display_sensors+0xb0>
		write_lcd_string("!!!");
     f3e:	87 e8       	ldi	r24, 0x87	; 135
     f40:	91 e0       	ldi	r25, 0x01	; 1
     f42:	13 c0       	rjmp	.+38     	; 0xf6a <display_sensors+0xd6>
	} else{
		for (int8_t i = 3-strlen(args+5); i > 0; i--) write_lcd_char(' ');
     f44:	e9 eb       	ldi	r30, 0xB9	; 185
     f46:	f3 e0       	ldi	r31, 0x03	; 3
     f48:	01 90       	ld	r0, Z+
     f4a:	00 20       	and	r0, r0
     f4c:	e9 f7       	brne	.-6      	; 0xf48 <display_sensors+0xb4>
     f4e:	cf 01       	movw	r24, r30
     f50:	8a 5b       	subi	r24, 0xBA	; 186
     f52:	93 40       	sbci	r25, 0x03	; 3
     f54:	13 e0       	ldi	r17, 0x03	; 3
     f56:	18 1b       	sub	r17, r24
     f58:	11 16       	cp	r1, r17
     f5a:	2c f4       	brge	.+10     	; 0xf66 <display_sensors+0xd2>
     f5c:	80 e2       	ldi	r24, 0x20	; 32
     f5e:	0e 94 df 0a 	call	0x15be	; 0x15be <write_lcd_char>
     f62:	11 50       	subi	r17, 0x01	; 1
     f64:	f9 cf       	rjmp	.-14     	; 0xf58 <display_sensors+0xc4>
		write_lcd_string(args+5);
     f66:	89 eb       	ldi	r24, 0xB9	; 185
     f68:	93 e0       	ldi	r25, 0x03	; 3
     f6a:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <write_lcd_string>
	}
	
	/*Write back value*/
	set_cursor_pos(BACK_POS);
     f6e:	84 e1       	ldi	r24, 0x14	; 20
     f70:	0e 94 13 0b 	call	0x1626	; 0x1626 <set_cursor_pos>
	if(k-b == 2 && args[b] == '0'){ //0 is sent for back
     f74:	8d 2f       	mov	r24, r29
     f76:	90 e0       	ldi	r25, 0x00	; 0
     f78:	d0 e0       	ldi	r29, 0x00	; 0
     f7a:	8c 1b       	sub	r24, r28
     f7c:	9d 0b       	sbc	r25, r29
     f7e:	02 97       	sbiw	r24, 0x02	; 2
     f80:	49 f4       	brne	.+18     	; 0xf94 <display_sensors+0x100>
     f82:	fe 01       	movw	r30, r28
     f84:	ec 54       	subi	r30, 0x4C	; 76
     f86:	fc 4f       	sbci	r31, 0xFC	; 252
     f88:	80 81       	ld	r24, Z
     f8a:	80 33       	cpi	r24, 0x30	; 48
     f8c:	19 f4       	brne	.+6      	; 0xf94 <display_sensors+0x100>
		write_lcd_string("!!!");
     f8e:	87 e8       	ldi	r24, 0x87	; 135
     f90:	91 e0       	ldi	r25, 0x01	; 1
     f92:	11 c0       	rjmp	.+34     	; 0xfb6 <display_sensors+0x122>
	} else{
		for (int8_t i = 3-strlen(args+b); i > 0; i--) write_lcd_char(' ');
     f94:	cc 54       	subi	r28, 0x4C	; 76
     f96:	dc 4f       	sbci	r29, 0xFC	; 252
     f98:	fe 01       	movw	r30, r28
     f9a:	01 90       	ld	r0, Z+
     f9c:	00 20       	and	r0, r0
     f9e:	e9 f7       	brne	.-6      	; 0xf9a <display_sensors+0x106>
     fa0:	1c 2f       	mov	r17, r28
     fa2:	1e 1b       	sub	r17, r30
     fa4:	1c 5f       	subi	r17, 0xFC	; 252
     fa6:	11 16       	cp	r1, r17
     fa8:	2c f4       	brge	.+10     	; 0xfb4 <display_sensors+0x120>
     faa:	80 e2       	ldi	r24, 0x20	; 32
     fac:	0e 94 df 0a 	call	0x15be	; 0x15be <write_lcd_char>
     fb0:	11 50       	subi	r17, 0x01	; 1
     fb2:	f9 cf       	rjmp	.-14     	; 0xfa6 <display_sensors+0x112>
		write_lcd_string(args+b);
     fb4:	ce 01       	movw	r24, r28
	}
}
     fb6:	df 91       	pop	r29
     fb8:	cf 91       	pop	r28
     fba:	1f 91       	pop	r17
	set_cursor_pos(BACK_POS);
	if(k-b == 2 && args[b] == '0'){ //0 is sent for back
		write_lcd_string("!!!");
	} else{
		for (int8_t i = 3-strlen(args+b); i > 0; i--) write_lcd_char(' ');
		write_lcd_string(args+b);
     fbc:	0c 94 ee 0a 	jmp	0x15dc	; 0x15dc <write_lcd_string>

00000fc0 <do_main_actions>:
		uart_send_line("040");
		LED_PORT &= ~(1<<LEDG);
	}
}

void do_main_actions(){
     fc0:	cf 93       	push	r28
     fc2:	df 93       	push	r29
	/*If a game has been prompted, draw prompt screen if not drawn and poll for accept*/
	if(game_prompted){
     fc4:	80 91 c7 02 	lds	r24, 0x02C7	; 0x8002c7 <game_prompted>
     fc8:	88 23       	and	r24, r24
     fca:	01 f1       	breq	.+64     	; 0x100c <do_main_actions+0x4c>
		if(redraw){
     fcc:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <redraw>
     fd0:	88 23       	and	r24, r24
     fd2:	59 f0       	breq	.+22     	; 0xfea <do_main_actions+0x2a>
			clear_LCD();
     fd4:	0e 94 06 0b 	call	0x160c	; 0x160c <clear_LCD>
			set_cursor_pos(16);
     fd8:	80 e1       	ldi	r24, 0x10	; 16
     fda:	0e 94 13 0b 	call	0x1626	; 0x1626 <set_cursor_pos>
			write_lcd_string("Want to play?");
     fde:	8c e9       	ldi	r24, 0x9C	; 156
     fe0:	91 e0       	ldi	r25, 0x01	; 1
     fe2:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <write_lcd_string>
			redraw = false;
     fe6:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <redraw>
		}
		if(DEADMAN_PRESSED){
     fea:	4c 99       	sbic	0x09, 4	; 9
     fec:	8e c0       	rjmp	.+284    	; 0x110a <do_main_actions+0x14a>
			enter_fir_mode();
     fee:	0e 94 fe 05 	call	0xbfc	; 0xbfc <enter_fir_mode>
			fiveinarow_setup(true); /*Game starts with player as first turn*/
     ff2:	81 e0       	ldi	r24, 0x01	; 1
     ff4:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <fiveinarow_setup>
     ff8:	2f ef       	ldi	r18, 0xFF	; 255
     ffa:	80 e7       	ldi	r24, 0x70	; 112
     ffc:	92 e0       	ldi	r25, 0x02	; 2
     ffe:	21 50       	subi	r18, 0x01	; 1
    1000:	80 40       	sbci	r24, 0x00	; 0
    1002:	90 40       	sbci	r25, 0x00	; 0
    1004:	e1 f7       	brne	.-8      	; 0xffe <do_main_actions+0x3e>
    1006:	00 c0       	rjmp	.+0      	; 0x1008 <do_main_actions+0x48>
    1008:	00 00       	nop
    100a:	7f c0       	rjmp	.+254    	; 0x110a <do_main_actions+0x14a>
			_delay_ms(100);			/* Avoid debounce*/
		}
		/*Canceling a game prompt is handled in ISR*/
	} else{
		/*Redraw static text if returning from other screen*/
		if(redraw){
    100c:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <redraw>
    1010:	88 23       	and	r24, r24
    1012:	51 f0       	breq	.+20     	; 0x1028 <do_main_actions+0x68>
			clear_line(0);
    1014:	80 e0       	ldi	r24, 0x00	; 0
    1016:	0e 94 20 0b 	call	0x1640	; 0x1640 <clear_line>
			clear_line(1);
    101a:	81 e0       	ldi	r24, 0x01	; 1
    101c:	0e 94 20 0b 	call	0x1640	; 0x1640 <clear_line>
			print_lcd_static();
    1020:	0e 94 91 06 	call	0xd22	; 0xd22 <print_lcd_static>
			redraw = false;
    1024:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <redraw>
		}
		/*Move along message queue (if message done, handled by module) and write buffer if not read before*/
		messages_move_queue();
    1028:	0e 94 cd 0b 	call	0x179a	; 0x179a <messages_move_queue>
		if(!output_buf_read){
    102c:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <output_buf_read>
    1030:	81 11       	cpse	r24, r1
    1032:	0d c0       	rjmp	.+26     	; 0x104e <do_main_actions+0x8e>
			set_cursor_pos(32);
    1034:	80 e2       	ldi	r24, 0x20	; 32
    1036:	0e 94 13 0b 	call	0x1626	; 0x1626 <set_cursor_pos>
			char* buffer = (char*)messages_get_buffer();
    103a:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <messages_get_buffer>
			/*If buffer is empty, write clear line. Otherwise write buffer*/
			write_lcd_string((buffer[0] != '\0') ? buffer :  "                ");
    103e:	fc 01       	movw	r30, r24
    1040:	20 81       	ld	r18, Z
    1042:	21 11       	cpse	r18, r1
    1044:	02 c0       	rjmp	.+4      	; 0x104a <do_main_actions+0x8a>
    1046:	8b e8       	ldi	r24, 0x8B	; 139
    1048:	91 e0       	ldi	r25, 0x01	; 1
    104a:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <write_lcd_string>
		}
		/*If sensor data was recived in ISR write data to screen*/
		if(sensors_received){
    104e:	80 91 cd 02 	lds	r24, 0x02CD	; 0x8002cd <sensors_received>
    1052:	88 23       	and	r24, r24
    1054:	21 f0       	breq	.+8      	; 0x105e <do_main_actions+0x9e>
			display_sensors();
    1056:	0e 94 4a 07 	call	0xe94	; 0xe94 <display_sensors>
			sensors_received = false;
    105a:	10 92 cd 02 	sts	0x02CD, r1	; 0x8002cd <sensors_received>
		}
		/*Poll for deadmans switch. If pressed (And not pusnished) send status to car and send move_commands*/
		if(DEADMAN_PRESSED && !punished){
    105e:	4c 99       	sbic	0x09, 4	; 9
    1060:	16 c0       	rjmp	.+44     	; 0x108e <do_main_actions+0xce>
    1062:	80 91 c5 02 	lds	r24, 0x02C5	; 0x8002c5 <punished>
    1066:	81 11       	cpse	r24, r1
    1068:	12 c0       	rjmp	.+36     	; 0x108e <do_main_actions+0xce>
			if(!(LED_PORT & (1<<LEDG))){
    106a:	5d 99       	sbic	0x0b, 5	; 11
    106c:	09 c0       	rjmp	.+18     	; 0x1080 <do_main_actions+0xc0>
				uart_send_line("041");
    106e:	8a ea       	ldi	r24, 0xAA	; 170
    1070:	91 e0       	ldi	r25, 0x01	; 1
    1072:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <uart_send_line>
				uart_send_line("341");
    1076:	8e ea       	ldi	r24, 0xAE	; 174
    1078:	91 e0       	ldi	r25, 0x01	; 1
    107a:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <uart_send_line>
				LED_PORT |= 1<<LEDG;
    107e:	5d 9a       	sbi	0x0b, 5	; 11
			}
			if(move_command_hundreths == CMD_DELAY) /*If no cooldown*/ send_move_command();
    1080:	80 91 d0 02 	lds	r24, 0x02D0	; 0x8002d0 <move_command_hundreths>
    1084:	84 31       	cpi	r24, 0x14	; 20
    1086:	71 f4       	brne	.+28     	; 0x10a4 <do_main_actions+0xe4>
    1088:	0e 94 0d 06 	call	0xc1a	; 0xc1a <send_move_command>
    108c:	0b c0       	rjmp	.+22     	; 0x10a4 <do_main_actions+0xe4>
		} else if(LED_PORT & (1<<LEDG)){ /*If button is not pressed AND LED indicating dms is on*/
    108e:	5d 9b       	sbis	0x0b, 5	; 11
    1090:	09 c0       	rjmp	.+18     	; 0x10a4 <do_main_actions+0xe4>
			uart_send_line("040"); /*Send deadman off to car*/
    1092:	81 e3       	ldi	r24, 0x31	; 49
    1094:	91 e0       	ldi	r25, 0x01	; 1
    1096:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <uart_send_line>
			uart_send_line("340"); /*Send deadman off to rem2*/
    109a:	82 eb       	ldi	r24, 0xB2	; 178
    109c:	91 e0       	ldi	r25, 0x01	; 1
    109e:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <uart_send_line>
			LED_PORT &= ~(1<<LEDG); /*Disable LED*/
    10a2:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		if(GAMEBTN_PRESSED){
    10a4:	1e 99       	sbic	0x03, 6	; 3
    10a6:	2f c0       	rjmp	.+94     	; 0x1106 <do_main_actions+0x146>
			if(DEADMAN_PRESSED){
    10a8:	4c 99       	sbic	0x09, 4	; 9
    10aa:	16 c0       	rjmp	.+44     	; 0x10d8 <do_main_actions+0x118>
				if(gamebtn_last != GAMEBTN_PRESSED) uart_send_line("080"); /*Return car to home*/;
    10ac:	23 b1       	in	r18, 0x03	; 3
    10ae:	80 91 d2 02 	lds	r24, 0x02D2	; 0x8002d2 <gamebtn_last>
    10b2:	90 e0       	ldi	r25, 0x00	; 0
    10b4:	22 95       	swap	r18
    10b6:	26 95       	lsr	r18
    10b8:	26 95       	lsr	r18
    10ba:	23 70       	andi	r18, 0x03	; 3
    10bc:	31 e0       	ldi	r19, 0x01	; 1
    10be:	23 27       	eor	r18, r19
    10c0:	21 70       	andi	r18, 0x01	; 1
    10c2:	c2 2f       	mov	r28, r18
    10c4:	f0 e0       	ldi	r31, 0x00	; 0
    10c6:	df 2f       	mov	r29, r31
    10c8:	8c 17       	cp	r24, r28
    10ca:	9d 07       	cpc	r25, r29
    10cc:	c1 f0       	breq	.+48     	; 0x10fe <do_main_actions+0x13e>
    10ce:	86 eb       	ldi	r24, 0xB6	; 182
    10d0:	91 e0       	ldi	r25, 0x01	; 1
    10d2:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <uart_send_line>
    10d6:	13 c0       	rjmp	.+38     	; 0x10fe <do_main_actions+0x13e>
			} else if(!request_sent){ /*If button is pressed and no request is waiting, send game request*/
    10d8:	80 91 c6 02 	lds	r24, 0x02C6	; 0x8002c6 <request_sent>
    10dc:	81 11       	cpse	r24, r1
    10de:	0f c0       	rjmp	.+30     	; 0x10fe <do_main_actions+0x13e>
				uart_send_line("33."); /*Game request to rem2. '.' < '0'*/
    10e0:	8a eb       	ldi	r24, 0xBA	; 186
    10e2:	91 e0       	ldi	r25, 0x01	; 1
    10e4:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <uart_send_line>
				messages_force("Invitation sent");
    10e8:	8e eb       	ldi	r24, 0xBE	; 190
    10ea:	91 e0       	ldi	r25, 0x01	; 1
    10ec:	0e 94 89 0b 	call	0x1712	; 0x1712 <messages_force>
				request_sent = true;
    10f0:	81 e0       	ldi	r24, 0x01	; 1
    10f2:	80 93 c6 02 	sts	0x02C6, r24	; 0x8002c6 <request_sent>
				invite_cooldown_hundreths = 0;
    10f6:	10 92 cf 02 	sts	0x02CF, r1	; 0x8002cf <invite_cooldown_hundreths+0x1>
    10fa:	10 92 ce 02 	sts	0x02CE, r1	; 0x8002ce <invite_cooldown_hundreths>
			}
			gamebtn_last = 1;
    10fe:	81 e0       	ldi	r24, 0x01	; 1
    1100:	80 93 d2 02 	sts	0x02D2, r24	; 0x8002d2 <gamebtn_last>
    1104:	02 c0       	rjmp	.+4      	; 0x110a <do_main_actions+0x14a>
		} else gamebtn_last = 0;
    1106:	10 92 d2 02 	sts	0x02D2, r1	; 0x8002d2 <gamebtn_last>
    110a:	2f e7       	ldi	r18, 0x7F	; 127
    110c:	88 e3       	ldi	r24, 0x38	; 56
    110e:	91 e0       	ldi	r25, 0x01	; 1
    1110:	21 50       	subi	r18, 0x01	; 1
    1112:	80 40       	sbci	r24, 0x00	; 0
    1114:	90 40       	sbci	r25, 0x00	; 0
    1116:	e1 f7       	brne	.-8      	; 0x1110 <do_main_actions+0x150>
    1118:	00 c0       	rjmp	.+0      	; 0x111a <do_main_actions+0x15a>
    111a:	00 00       	nop
	}
	_delay_ms(50);
}
    111c:	df 91       	pop	r29
    111e:	cf 91       	pop	r28
    1120:	08 95       	ret

00001122 <__vector_18>:
		for (int8_t i = 3-strlen(args+b); i > 0; i--) write_lcd_char(' ');
		write_lcd_string(args+b);
	}
}

ISR(USART_RX_vect){
    1122:	1f 92       	push	r1
    1124:	0f 92       	push	r0
    1126:	0f b6       	in	r0, 0x3f	; 63
    1128:	0f 92       	push	r0
    112a:	11 24       	eor	r1, r1
    112c:	2f 93       	push	r18
    112e:	3f 93       	push	r19
    1130:	4f 93       	push	r20
    1132:	5f 93       	push	r21
    1134:	6f 93       	push	r22
    1136:	7f 93       	push	r23
    1138:	8f 93       	push	r24
    113a:	9f 93       	push	r25
    113c:	af 93       	push	r26
    113e:	bf 93       	push	r27
    1140:	ef 93       	push	r30
    1142:	ff 93       	push	r31
	uart_linebuf[uart_bufind] = UDR0;
    1144:	e0 91 d3 02 	lds	r30, 0x02D3	; 0x8002d3 <uart_bufind>
    1148:	f0 e0       	ldi	r31, 0x00	; 0
    114a:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    114e:	e0 56       	subi	r30, 0x60	; 96
    1150:	fc 4f       	sbci	r31, 0xFC	; 252
    1152:	80 83       	st	Z, r24
	if(uart_linebuf[uart_bufind] == '\n'){
    1154:	e0 91 d3 02 	lds	r30, 0x02D3	; 0x8002d3 <uart_bufind>
    1158:	f0 e0       	ldi	r31, 0x00	; 0
    115a:	e0 56       	subi	r30, 0x60	; 96
    115c:	fc 4f       	sbci	r31, 0xFC	; 252
    115e:	80 81       	ld	r24, Z
    1160:	8a 30       	cpi	r24, 0x0A	; 10
    1162:	89 f4       	brne	.+34     	; 0x1186 <__vector_18+0x64>
		uart_linebuf[uart_bufind] = '\0';
    1164:	e0 91 d3 02 	lds	r30, 0x02D3	; 0x8002d3 <uart_bufind>
    1168:	f0 e0       	ldi	r31, 0x00	; 0
    116a:	e0 56       	subi	r30, 0x60	; 96
    116c:	fc 4f       	sbci	r31, 0xFC	; 252
    116e:	10 82       	st	Z, r1
		//Do something
		perform_command(uart_linebuf[0], uart_linebuf[1], uart_linebuf+2);
    1170:	60 91 a1 03 	lds	r22, 0x03A1	; 0x8003a1 <uart_linebuf+0x1>
    1174:	80 91 a0 03 	lds	r24, 0x03A0	; 0x8003a0 <uart_linebuf>
    1178:	42 ea       	ldi	r20, 0xA2	; 162
    117a:	53 e0       	ldi	r21, 0x03	; 3
    117c:	0e 94 00 07 	call	0xe00	; 0xe00 <perform_command>
		//Done something
		uart_bufind = 0;
    1180:	10 92 d3 02 	sts	0x02D3, r1	; 0x8002d3 <uart_bufind>
    1184:	05 c0       	rjmp	.+10     	; 0x1190 <__vector_18+0x6e>
	} else{
		uart_bufind++;
    1186:	80 91 d3 02 	lds	r24, 0x02D3	; 0x8002d3 <uart_bufind>
    118a:	8f 5f       	subi	r24, 0xFF	; 255
    118c:	80 93 d3 02 	sts	0x02D3, r24	; 0x8002d3 <uart_bufind>
	}
}
    1190:	ff 91       	pop	r31
    1192:	ef 91       	pop	r30
    1194:	bf 91       	pop	r27
    1196:	af 91       	pop	r26
    1198:	9f 91       	pop	r25
    119a:	8f 91       	pop	r24
    119c:	7f 91       	pop	r23
    119e:	6f 91       	pop	r22
    11a0:	5f 91       	pop	r21
    11a2:	4f 91       	pop	r20
    11a4:	3f 91       	pop	r19
    11a6:	2f 91       	pop	r18
    11a8:	0f 90       	pop	r0
    11aa:	0f be       	out	0x3f, r0	; 63
    11ac:	0f 90       	pop	r0
    11ae:	1f 90       	pop	r1
    11b0:	18 95       	reti

000011b2 <btn_init>:

void btn_init(){
	DDRD &= ~((1<<HONKBTN)|(1<<DEADMANBTN)|(1<<EXTRABTN));
    11b2:	8a b1       	in	r24, 0x0a	; 10
    11b4:	83 7e       	andi	r24, 0xE3	; 227
    11b6:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1<<HONKBTN)|(1<<DEADMANBTN)|(1<<EXTRABTN);
    11b8:	8b b1       	in	r24, 0x0b	; 11
    11ba:	8c 61       	ori	r24, 0x1C	; 28
    11bc:	8b b9       	out	0x0b, r24	; 11
	DDRB &= ~(1<<GAMEBTN);
    11be:	26 98       	cbi	0x04, 6	; 4
	PORTB |= 1<<GAMEBTN;
    11c0:	2e 9a       	sbi	0x05, 6	; 5
	EICRA = (2<<ISC00)|(2<<ISC10);
    11c2:	8a e0       	ldi	r24, 0x0A	; 10
    11c4:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
	EIMSK = 3;
    11c8:	83 e0       	ldi	r24, 0x03	; 3
    11ca:	8d bb       	out	0x1d, r24	; 29
    11cc:	08 95       	ret

000011ce <__vector_7>:
}

ISR(TIMER2_COMPA_vect){
    11ce:	1f 92       	push	r1
    11d0:	0f 92       	push	r0
    11d2:	0f b6       	in	r0, 0x3f	; 63
    11d4:	0f 92       	push	r0
    11d6:	11 24       	eor	r1, r1
    11d8:	2f 93       	push	r18
    11da:	3f 93       	push	r19
    11dc:	4f 93       	push	r20
    11de:	5f 93       	push	r21
    11e0:	6f 93       	push	r22
    11e2:	7f 93       	push	r23
    11e4:	8f 93       	push	r24
    11e6:	9f 93       	push	r25
    11e8:	af 93       	push	r26
    11ea:	bf 93       	push	r27
    11ec:	ef 93       	push	r30
    11ee:	ff 93       	push	r31
	/*Toggles heartbeat LED back on every half second to produce a blinking effect
	  when heartbeat is active*/
	if(++heart_hundreths > 50){
    11f0:	80 91 d1 02 	lds	r24, 0x02D1	; 0x8002d1 <heart_hundreths>
    11f4:	8f 5f       	subi	r24, 0xFF	; 255
    11f6:	80 93 d1 02 	sts	0x02D1, r24	; 0x8002d1 <heart_hundreths>
    11fa:	83 33       	cpi	r24, 0x33	; 51
    11fc:	18 f0       	brcs	.+6      	; 0x1204 <__vector_7+0x36>
		LED_PORT |= 1<<LEDR2;
    11fe:	5f 9a       	sbi	0x0b, 7	; 11
		heart_hundreths = 0;
    1200:	10 92 d1 02 	sts	0x02D1, r1	; 0x8002d1 <heart_hundreths>
	}
	/*Cooldown for sending move commands to vehicle*/
	if(move_command_hundreths < CMD_DELAY) move_command_hundreths++;
    1204:	80 91 d0 02 	lds	r24, 0x02D0	; 0x8002d0 <move_command_hundreths>
    1208:	84 31       	cpi	r24, 0x14	; 20
    120a:	28 f4       	brcc	.+10     	; 0x1216 <__vector_7+0x48>
    120c:	80 91 d0 02 	lds	r24, 0x02D0	; 0x8002d0 <move_command_hundreths>
    1210:	8f 5f       	subi	r24, 0xFF	; 255
    1212:	80 93 d0 02 	sts	0x02D0, r24	; 0x8002d0 <move_command_hundreths>
	/*Cooldown for honk button to reduce debounce*/
	if(honk_debounce_hundreths > 0) honk_debounce_hundreths--;
    1216:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <honk_debounce_hundreths>
    121a:	88 23       	and	r24, r24
    121c:	29 f0       	breq	.+10     	; 0x1228 <__vector_7+0x5a>
    121e:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <honk_debounce_hundreths>
    1222:	81 50       	subi	r24, 0x01	; 1
    1224:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <honk_debounce_hundreths>
	/*Cooldown for honk button to reduce debounce*/
	if(calibration_debounce_hundreths > 0) calibration_debounce_hundreths--;
    1228:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <calibration_debounce_hundreths>
    122c:	88 23       	and	r24, r24
    122e:	29 f0       	breq	.+10     	; 0x123a <__vector_7+0x6c>
    1230:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <calibration_debounce_hundreths>
    1234:	81 50       	subi	r24, 0x01	; 1
    1236:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <calibration_debounce_hundreths>
	/*Cooldown for sending game invitations*/
	if(request_sent && invite_cooldown_hundreths < INVITE_TIMEOUT_VAL) invite_cooldown_hundreths++;
    123a:	80 91 c6 02 	lds	r24, 0x02C6	; 0x8002c6 <request_sent>
    123e:	88 23       	and	r24, r24
    1240:	89 f0       	breq	.+34     	; 0x1264 <__vector_7+0x96>
    1242:	80 91 ce 02 	lds	r24, 0x02CE	; 0x8002ce <invite_cooldown_hundreths>
    1246:	90 91 cf 02 	lds	r25, 0x02CF	; 0x8002cf <invite_cooldown_hundreths+0x1>
    124a:	88 38       	cpi	r24, 0x88	; 136
    124c:	93 41       	sbci	r25, 0x13	; 19
    124e:	50 f4       	brcc	.+20     	; 0x1264 <__vector_7+0x96>
    1250:	80 91 ce 02 	lds	r24, 0x02CE	; 0x8002ce <invite_cooldown_hundreths>
    1254:	90 91 cf 02 	lds	r25, 0x02CF	; 0x8002cf <invite_cooldown_hundreths+0x1>
    1258:	01 96       	adiw	r24, 0x01	; 1
    125a:	90 93 cf 02 	sts	0x02CF, r25	; 0x8002cf <invite_cooldown_hundreths+0x1>
    125e:	80 93 ce 02 	sts	0x02CE, r24	; 0x8002ce <invite_cooldown_hundreths>
    1262:	06 c0       	rjmp	.+12     	; 0x1270 <__vector_7+0xa2>
	else{
		request_sent = false;
    1264:	10 92 c6 02 	sts	0x02C6, r1	; 0x8002c6 <request_sent>
		invite_cooldown_hundreths = 0;
    1268:	10 92 cf 02 	sts	0x02CF, r1	; 0x8002cf <invite_cooldown_hundreths+0x1>
    126c:	10 92 ce 02 	sts	0x02CE, r1	; 0x8002ce <invite_cooldown_hundreths>
	}
	/*Timeout for punishment*/
	if(punished && --punished_timout_hundreths == 0){
    1270:	80 91 c5 02 	lds	r24, 0x02C5	; 0x8002c5 <punished>
    1274:	88 23       	and	r24, r24
    1276:	b9 f0       	breq	.+46     	; 0x12a6 <__vector_7+0xd8>
    1278:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <punished_timout_hundreths>
    127c:	81 50       	subi	r24, 0x01	; 1
    127e:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <punished_timout_hundreths>
    1282:	81 11       	cpse	r24, r1
    1284:	10 c0       	rjmp	.+32     	; 0x12a6 <__vector_7+0xd8>
		punished_timout_hundreths = 100;
    1286:	84 e6       	ldi	r24, 0x64	; 100
    1288:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <punished_timout_hundreths>
		if(--punished_timout_seconds == 0){
    128c:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <punished_timout_seconds>
    1290:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <punished_timout_seconds+0x1>
    1294:	01 97       	sbiw	r24, 0x01	; 1
    1296:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <punished_timout_seconds+0x1>
    129a:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <punished_timout_seconds>
    129e:	89 2b       	or	r24, r25
    12a0:	11 f4       	brne	.+4      	; 0x12a6 <__vector_7+0xd8>
			punished = false;
    12a2:	10 92 c5 02 	sts	0x02C5, r1	; 0x8002c5 <punished>
		}
	}
	/*Cooldown for moving cursor in fir_mode*/
	if(fir_cursor_move_delay > 0) fir_cursor_move_delay--;
    12a6:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <fir_cursor_move_delay>
    12aa:	88 23       	and	r24, r24
    12ac:	29 f0       	breq	.+10     	; 0x12b8 <__vector_7+0xea>
    12ae:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <fir_cursor_move_delay>
    12b2:	81 50       	subi	r24, 0x01	; 1
    12b4:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <fir_cursor_move_delay>
	/*Timer proc for messages module*/
	messages_timerproc();
    12b8:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <messages_timerproc>
}
    12bc:	ff 91       	pop	r31
    12be:	ef 91       	pop	r30
    12c0:	bf 91       	pop	r27
    12c2:	af 91       	pop	r26
    12c4:	9f 91       	pop	r25
    12c6:	8f 91       	pop	r24
    12c8:	7f 91       	pop	r23
    12ca:	6f 91       	pop	r22
    12cc:	5f 91       	pop	r21
    12ce:	4f 91       	pop	r20
    12d0:	3f 91       	pop	r19
    12d2:	2f 91       	pop	r18
    12d4:	0f 90       	pop	r0
    12d6:	0f be       	out	0x3f, r0	; 63
    12d8:	0f 90       	pop	r0
    12da:	1f 90       	pop	r1
    12dc:	18 95       	reti

000012de <__vector_1>:

//Extra
ISR(INT0_vect){
    12de:	1f 92       	push	r1
    12e0:	0f 92       	push	r0
    12e2:	0f b6       	in	r0, 0x3f	; 63
    12e4:	0f 92       	push	r0
    12e6:	11 24       	eor	r1, r1
    12e8:	2f 93       	push	r18
    12ea:	3f 93       	push	r19
    12ec:	4f 93       	push	r20
    12ee:	5f 93       	push	r21
    12f0:	6f 93       	push	r22
    12f2:	7f 93       	push	r23
    12f4:	8f 93       	push	r24
    12f6:	9f 93       	push	r25
    12f8:	af 93       	push	r26
    12fa:	bf 93       	push	r27
    12fc:	cf 93       	push	r28
    12fe:	ef 93       	push	r30
    1300:	ff 93       	push	r31
	if(calibration_debounce_hundreths == 0){ /*If not on cooldown*/
    1302:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <calibration_debounce_hundreths>
    1306:	81 11       	cpse	r24, r1
    1308:	55 c0       	rjmp	.+170    	; 0x13b4 <__vector_1+0xd6>
		if(program_mode == FIR_MODE){
    130a:	c0 91 c8 02 	lds	r28, 0x02C8	; 0x8002c8 <program_mode>
    130e:	c1 30       	cpi	r28, 0x01	; 1
    1310:	a1 f4       	brne	.+40     	; 0x133a <__vector_1+0x5c>
			enter_main_mode("Game canceled");
    1312:	87 e5       	ldi	r24, 0x57	; 87
    1314:	91 e0       	ldi	r25, 0x01	; 1
    1316:	0e 94 5c 05 	call	0xab8	; 0xab8 <enter_main_mode>
			uart_send_line("33A");
    131a:	8e ec       	ldi	r24, 0xCE	; 206
    131c:	91 e0       	ldi	r25, 0x01	; 1
    131e:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <uart_send_line>
			punished = true;
    1322:	c0 93 c5 02 	sts	0x02C5, r28	; 0x8002c5 <punished>
			punished_timout_hundreths = 100;
    1326:	84 e6       	ldi	r24, 0x64	; 100
    1328:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <punished_timout_hundreths>
			punished_timout_seconds = PUNISH_TIMEOUT_VAL;
    132c:	88 e5       	ldi	r24, 0x58	; 88
    132e:	92 e0       	ldi	r25, 0x02	; 2
    1330:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <punished_timout_seconds+0x1>
    1334:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <punished_timout_seconds>
    1338:	3a c0       	rjmp	.+116    	; 0x13ae <__vector_1+0xd0>
		} else{
			if(DEADMAN_PRESSED) uart_send_line("081");
    133a:	4c 99       	sbic	0x09, 4	; 9
    133c:	05 c0       	rjmp	.+10     	; 0x1348 <__vector_1+0x6a>
    133e:	82 ed       	ldi	r24, 0xD2	; 210
    1340:	91 e0       	ldi	r25, 0x01	; 1
    1342:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <uart_send_line>
    1346:	33 c0       	rjmp	.+102    	; 0x13ae <__vector_1+0xd0>
			else if(game_prompted){
    1348:	80 91 c7 02 	lds	r24, 0x02C7	; 0x8002c7 <game_prompted>
    134c:	88 23       	and	r24, r24
    134e:	31 f0       	breq	.+12     	; 0x135c <__vector_1+0x7e>
				game_prompted = false;
    1350:	10 92 c7 02 	sts	0x02C7, r1	; 0x8002c7 <game_prompted>
				redraw = true;
    1354:	81 e0       	ldi	r24, 0x01	; 1
    1356:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <redraw>
    135a:	29 c0       	rjmp	.+82     	; 0x13ae <__vector_1+0xd0>
			} else if(!DEADMAN_PRESSED && (read_adc(0) > z_rest-5)){ /*If dead mans is not pressed and device is flat*/
    135c:	4c 9b       	sbis	0x09, 4	; 9
    135e:	27 c0       	rjmp	.+78     	; 0x13ae <__vector_1+0xd0>
    1360:	80 e0       	ldi	r24, 0x00	; 0
    1362:	0e 94 84 0a 	call	0x1508	; 0x1508 <read_adc>
    1366:	20 91 11 01 	lds	r18, 0x0111	; 0x800111 <z_rest>
    136a:	30 91 12 01 	lds	r19, 0x0112	; 0x800112 <z_rest+0x1>
    136e:	25 50       	subi	r18, 0x05	; 5
    1370:	31 09       	sbc	r19, r1
    1372:	28 17       	cp	r18, r24
    1374:	39 07       	cpc	r19, r25
    1376:	d8 f4       	brcc	.+54     	; 0x13ae <__vector_1+0xd0>
				z_rest = read_avg_adc(0, 25);
    1378:	69 e1       	ldi	r22, 0x19	; 25
    137a:	70 e0       	ldi	r23, 0x00	; 0
    137c:	80 e0       	ldi	r24, 0x00	; 0
    137e:	0e 94 95 0a 	call	0x152a	; 0x152a <read_avg_adc>
    1382:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <z_rest+0x1>
    1386:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <z_rest>
				x_rest = read_avg_adc(1, 25);
    138a:	69 e1       	ldi	r22, 0x19	; 25
    138c:	70 e0       	ldi	r23, 0x00	; 0
    138e:	81 e0       	ldi	r24, 0x01	; 1
    1390:	0e 94 95 0a 	call	0x152a	; 0x152a <read_avg_adc>
    1394:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <x_rest+0x1>
    1398:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <x_rest>
				y_rest = read_avg_adc(2, 25);
    139c:	69 e1       	ldi	r22, 0x19	; 25
    139e:	70 e0       	ldi	r23, 0x00	; 0
    13a0:	82 e0       	ldi	r24, 0x02	; 2
    13a2:	0e 94 95 0a 	call	0x152a	; 0x152a <read_avg_adc>
    13a6:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <y_rest+0x1>
    13aa:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <y_rest>
			}
		}
		calibration_debounce_hundreths = DEBOUNCE_VAL;	
    13ae:	84 e1       	ldi	r24, 0x14	; 20
    13b0:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <calibration_debounce_hundreths>
	}
}
    13b4:	ff 91       	pop	r31
    13b6:	ef 91       	pop	r30
    13b8:	cf 91       	pop	r28
    13ba:	bf 91       	pop	r27
    13bc:	af 91       	pop	r26
    13be:	9f 91       	pop	r25
    13c0:	8f 91       	pop	r24
    13c2:	7f 91       	pop	r23
    13c4:	6f 91       	pop	r22
    13c6:	5f 91       	pop	r21
    13c8:	4f 91       	pop	r20
    13ca:	3f 91       	pop	r19
    13cc:	2f 91       	pop	r18
    13ce:	0f 90       	pop	r0
    13d0:	0f be       	out	0x3f, r0	; 63
    13d2:	0f 90       	pop	r0
    13d4:	1f 90       	pop	r1
    13d6:	18 95       	reti

000013d8 <__vector_2>:

//Honk
ISR(INT1_vect){
    13d8:	1f 92       	push	r1
    13da:	0f 92       	push	r0
    13dc:	0f b6       	in	r0, 0x3f	; 63
    13de:	0f 92       	push	r0
    13e0:	11 24       	eor	r1, r1
    13e2:	2f 93       	push	r18
    13e4:	3f 93       	push	r19
    13e6:	4f 93       	push	r20
    13e8:	5f 93       	push	r21
    13ea:	6f 93       	push	r22
    13ec:	7f 93       	push	r23
    13ee:	8f 93       	push	r24
    13f0:	9f 93       	push	r25
    13f2:	af 93       	push	r26
    13f4:	bf 93       	push	r27
    13f6:	ef 93       	push	r30
    13f8:	ff 93       	push	r31
	if(honk_debounce_hundreths == 0){ /*If no cooldown*/
    13fa:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <honk_debounce_hundreths>
    13fe:	81 11       	cpse	r24, r1
    1400:	0c c0       	rjmp	.+24     	; 0x141a <__vector_2+0x42>
		if(DEADMAN_PRESSED){
    1402:	4c 99       	sbic	0x09, 4	; 9
    1404:	03 c0       	rjmp	.+6      	; 0x140c <__vector_2+0x34>
			uart_send_line("020"); /*Send honk to car*/
    1406:	86 ed       	ldi	r24, 0xD6	; 214
    1408:	91 e0       	ldi	r25, 0x01	; 1
    140a:	02 c0       	rjmp	.+4      	; 0x1410 <__vector_2+0x38>
		} else{
			uart_send_line("32");	/*Send honk to rem2*/
    140c:	8a ed       	ldi	r24, 0xDA	; 218
    140e:	91 e0       	ldi	r25, 0x01	; 1
    1410:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <uart_send_line>
		}
		honk_debounce_hundreths = DEBOUNCE_VAL;	
    1414:	84 e1       	ldi	r24, 0x14	; 20
    1416:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <honk_debounce_hundreths>
	}
}
    141a:	ff 91       	pop	r31
    141c:	ef 91       	pop	r30
    141e:	bf 91       	pop	r27
    1420:	af 91       	pop	r26
    1422:	9f 91       	pop	r25
    1424:	8f 91       	pop	r24
    1426:	7f 91       	pop	r23
    1428:	6f 91       	pop	r22
    142a:	5f 91       	pop	r21
    142c:	4f 91       	pop	r20
    142e:	3f 91       	pop	r19
    1430:	2f 91       	pop	r18
    1432:	0f 90       	pop	r0
    1434:	0f be       	out	0x3f, r0	; 63
    1436:	0f 90       	pop	r0
    1438:	1f 90       	pop	r1
    143a:	18 95       	reti

0000143c <led_init>:

void led_init(){
	LED_DDR |= (1<<LEDG)|(1<<LEDR1)|(1<<LEDR2);
    143c:	8a b1       	in	r24, 0x0a	; 10
    143e:	80 6e       	ori	r24, 0xE0	; 224
    1440:	8a b9       	out	0x0a, r24	; 10
	LED_PORT &= ~((1<<LEDG)|(1<<LEDR1));
    1442:	8b b1       	in	r24, 0x0b	; 11
    1444:	8f 79       	andi	r24, 0x9F	; 159
    1446:	8b b9       	out	0x0b, r24	; 11
	LED_PORT |= 1<<LEDR2;
    1448:	5f 9a       	sbi	0x0b, 7	; 11
    144a:	08 95       	ret

0000144c <main>:
char placebuf[5];
char row_buf[49];

int main(void)
{
	spi_init();
    144c:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <spi_init>
    1450:	2f ef       	ldi	r18, 0xFF	; 255
    1452:	80 e7       	ldi	r24, 0x70	; 112
    1454:	92 e0       	ldi	r25, 0x02	; 2
    1456:	21 50       	subi	r18, 0x01	; 1
    1458:	80 40       	sbci	r24, 0x00	; 0
    145a:	90 40       	sbci	r25, 0x00	; 0
    145c:	e1 f7       	brne	.-8      	; 0x1456 <main+0xa>
    145e:	00 c0       	rjmp	.+0      	; 0x1460 <main+0x14>
    1460:	00 00       	nop
	_delay_ms(100);
	lcd_init();
    1462:	0e 94 c0 0a 	call	0x1580	; 0x1580 <lcd_init>
	fiveinarow_init();
    1466:	0e 94 43 03 	call	0x686	; 0x686 <fiveinarow_init>
	adc_init();
    146a:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <adc_init>
	uart_init();
    146e:	0e 94 6d 0a 	call	0x14da	; 0x14da <uart_init>
	uart_flush();
    1472:	0e 94 65 0a 	call	0x14ca	; 0x14ca <uart_flush>
	led_init();
    1476:	0e 94 1e 0a 	call	0x143c	; 0x143c <led_init>
	btn_init();
    147a:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <btn_init>
	music_init();
    147e:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <music_init>
	timer_init();
    1482:	0e 94 9f 06 	call	0xd3e	; 0xd3e <timer_init>
	print_lcd_static();
    1486:	0e 94 91 06 	call	0xd22	; 0xd22 <print_lcd_static>
	sei();
    148a:	78 94       	sei
    while (1) 
    {
		switch(program_mode){
    148c:	80 91 c8 02 	lds	r24, 0x02C8	; 0x8002c8 <program_mode>
    1490:	88 23       	and	r24, r24
    1492:	29 f0       	breq	.+10     	; 0x149e <main+0x52>
    1494:	81 30       	cpi	r24, 0x01	; 1
    1496:	d1 f7       	brne	.-12     	; 0x148c <main+0x40>
			case MAIN_MODE:
				do_main_actions();
				break;
			case FIR_MODE:
				do_fir_actions();
    1498:	0e 94 67 05 	call	0xace	; 0xace <do_fir_actions>
				break;
    149c:	f7 cf       	rjmp	.-18     	; 0x148c <main+0x40>
	sei();
    while (1) 
    {
		switch(program_mode){
			case MAIN_MODE:
				do_main_actions();
    149e:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <do_main_actions>
				break;
    14a2:	f4 cf       	rjmp	.-24     	; 0x148c <main+0x40>

000014a4 <uart_send_line>:

bool uart_receive_byte(uint8_t* buffer){
	if(!( UCSR0A & (1<<RXC0))) return false;
	*buffer = UDR0;
	return true;
}
    14a4:	fc 01       	movw	r30, r24
    14a6:	91 91       	ld	r25, Z+
    14a8:	99 23       	and	r25, r25
    14aa:	39 f0       	breq	.+14     	; 0x14ba <uart_send_line+0x16>
    14ac:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
    14b0:	85 ff       	sbrs	r24, 5
    14b2:	fc cf       	rjmp	.-8      	; 0x14ac <uart_send_line+0x8>
    14b4:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    14b8:	f6 cf       	rjmp	.-20     	; 0x14a6 <uart_send_line+0x2>
    14ba:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
    14be:	85 ff       	sbrs	r24, 5
    14c0:	fc cf       	rjmp	.-8      	; 0x14ba <uart_send_line+0x16>
    14c2:	8a e0       	ldi	r24, 0x0A	; 10
    14c4:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    14c8:	08 95       	ret

000014ca <uart_flush>:

void uart_flush(){
	uint8_t dummy;
	while ( UCSR0A & (1<<RXC0) ) dummy = UDR0;
    14ca:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
    14ce:	87 ff       	sbrs	r24, 7
    14d0:	03 c0       	rjmp	.+6      	; 0x14d8 <uart_flush+0xe>
    14d2:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    14d6:	f9 cf       	rjmp	.-14     	; 0x14ca <uart_flush>
}
    14d8:	08 95       	ret

000014da <uart_init>:

void uart_init(){
	UBRR0 = 0;		//0==500000 baud rate.  12==38400 baud rate
    14da:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
    14de:	10 92 c4 00 	sts	0x00C4, r1	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UCSR0B = (1<<RXEN0)|(1<<TXEN0)|(1<<RXCIE0);
    14e2:	88 e9       	ldi	r24, 0x98	; 152
    14e4:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	/* Set frame format: 8data, 1stop bit */
	UCSR0C = (0<<USBS0)|(3<<UCSZ00);
    14e8:	86 e0       	ldi	r24, 0x06	; 6
    14ea:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
    14ee:	08 95       	ret

000014f0 <adc_init>:

/************************************************************************/
/* Initializes the MCU ADC with 100KHz clock and with ports 0-3 enabled */
/************************************************************************/
void adc_init(){
	DDRC &= ~((1<<1)|(1<<0)|(1<<2));					//Enable input on ADC-ports
    14f0:	87 b1       	in	r24, 0x07	; 7
    14f2:	88 7f       	andi	r24, 0xF8	; 248
    14f4:	87 b9       	out	0x07, r24	; 7
	ADCSRA = (1<<ADEN)|(1<<ADPS1)|(1<<ADPS2);   //ADC-clock F_CPU/64
    14f6:	86 e8       	ldi	r24, 0x86	; 134
    14f8:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
	DIDR0 = (1<<ADC5D)|(1<<ADC4D)|(1<<ADC3D);	//Disable unused ADC-ports			
    14fc:	88 e3       	ldi	r24, 0x38	; 56
    14fe:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7f807e>
	ADCSRB = 0;									//No auto trigger
    1502:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
    1506:	08 95       	ret

00001508 <read_adc>:
/* the ADC-value from ADCH and ADCL										*/
/* @param port The port to read from (0-3)								*/
/************************************************************************/
uint16_t read_adc(uint8_t port){
	//Choose port and reference voltage
	ADMUX = port|(1<<REFS0);
    1508:	80 64       	ori	r24, 0x40	; 64
    150a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	//Start conversion
	ADCSRA |= 1<<ADSC;
    150e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    1512:	80 64       	ori	r24, 0x40	; 64
    1514:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
	//Wait for completion and return result
	while( ADCSRA & 1<<ADSC);
    1518:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    151c:	86 fd       	sbrc	r24, 6
    151e:	fc cf       	rjmp	.-8      	; 0x1518 <read_adc+0x10>
	return ADC;
    1520:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
    1524:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
    1528:	08 95       	ret

0000152a <read_avg_adc>:
/* the average ADC-value from ADCH and ADCL	from the given amount		*/
/* of iterations														*/
/* @param port The port to read from (0-3)								*/
/* @param iterations The amount of iterations to take average from		*/
/************************************************************************/
uint16_t read_avg_adc(uint8_t port, uint16_t iterations){
    152a:	9b 01       	movw	r18, r22
	//Choose port and reference voltage
	ADMUX = port|(1<<REFS0);
    152c:	80 64       	ori	r24, 0x40	; 64
    152e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	uint32_t sum = 0;
	//Start given amount of conversions and add up results
	for (uint8_t i = 0; i < iterations; i++){
    1532:	40 e0       	ldi	r20, 0x00	; 0
/* @param iterations The amount of iterations to take average from		*/
/************************************************************************/
uint16_t read_avg_adc(uint8_t port, uint16_t iterations){
	//Choose port and reference voltage
	ADMUX = port|(1<<REFS0);
	uint32_t sum = 0;
    1534:	60 e0       	ldi	r22, 0x00	; 0
    1536:	70 e0       	ldi	r23, 0x00	; 0
    1538:	cb 01       	movw	r24, r22
	//Start given amount of conversions and add up results
	for (uint8_t i = 0; i < iterations; i++){
    153a:	e4 2f       	mov	r30, r20
    153c:	f0 e0       	ldi	r31, 0x00	; 0
    153e:	e2 17       	cp	r30, r18
    1540:	f3 07       	cpc	r31, r19
    1542:	98 f4       	brcc	.+38     	; 0x156a <read_avg_adc+0x40>
		ADCSRA |= 1<<ADSC;
    1544:	50 91 7a 00 	lds	r21, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    1548:	50 64       	ori	r21, 0x40	; 64
    154a:	50 93 7a 00 	sts	0x007A, r21	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
		while( ADCSRA & 1<<ADSC);
    154e:	50 91 7a 00 	lds	r21, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    1552:	56 fd       	sbrc	r21, 6
    1554:	fc cf       	rjmp	.-8      	; 0x154e <read_avg_adc+0x24>
		sum += ADC;
    1556:	e0 91 78 00 	lds	r30, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
    155a:	f0 91 79 00 	lds	r31, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
    155e:	6e 0f       	add	r22, r30
    1560:	7f 1f       	adc	r23, r31
    1562:	81 1d       	adc	r24, r1
    1564:	91 1d       	adc	r25, r1
uint16_t read_avg_adc(uint8_t port, uint16_t iterations){
	//Choose port and reference voltage
	ADMUX = port|(1<<REFS0);
	uint32_t sum = 0;
	//Start given amount of conversions and add up results
	for (uint8_t i = 0; i < iterations; i++){
    1566:	4f 5f       	subi	r20, 0xFF	; 255
    1568:	e8 cf       	rjmp	.-48     	; 0x153a <read_avg_adc+0x10>
		ADCSRA |= 1<<ADSC;
		while( ADCSRA & 1<<ADSC);
		sum += ADC;
	}
	//Return truncated average
	return (uint16_t)(sum/iterations);
    156a:	40 e0       	ldi	r20, 0x00	; 0
    156c:	50 e0       	ldi	r21, 0x00	; 0
    156e:	0e 94 7f 10 	call	0x20fe	; 0x20fe <__udivmodsi4>
    1572:	c9 01       	movw	r24, r18
    1574:	08 95       	ret

00001576 <spi_tx>:
		spi_tx(rows[i]);
		_delay_us(30);
	}
	PORTB &= ~(1<<RS);
	PORTB |= 1<<CSB;
}
    1576:	8e bd       	out	0x2e, r24	; 46
    1578:	0d b4       	in	r0, 0x2d	; 45
    157a:	07 fe       	sbrs	r0, 7
    157c:	fd cf       	rjmp	.-6      	; 0x1578 <spi_tx+0x2>
    157e:	08 95       	ret

00001580 <lcd_init>:
    1580:	cf 93       	push	r28
    1582:	df 93       	push	r29
    1584:	84 b1       	in	r24, 0x04	; 4
    1586:	85 60       	ori	r24, 0x05	; 5
    1588:	84 b9       	out	0x04, r24	; 4
    158a:	85 b1       	in	r24, 0x05	; 5
    158c:	8a 7f       	andi	r24, 0xFA	; 250
    158e:	85 b9       	out	0x05, r24	; 5
    1590:	cc e1       	ldi	r28, 0x1C	; 28
    1592:	d6 e0       	ldi	r29, 0x06	; 6
    1594:	fe 01       	movw	r30, r28
    1596:	84 91       	lpm	r24, Z
    1598:	0e 94 bb 0a 	call	0x1576	; 0x1576 <spi_tx>
    159c:	87 eb       	ldi	r24, 0xB7	; 183
    159e:	9b e0       	ldi	r25, 0x0B	; 11
    15a0:	01 97       	sbiw	r24, 0x01	; 1
    15a2:	f1 f7       	brne	.-4      	; 0x15a0 <lcd_init+0x20>
    15a4:	00 c0       	rjmp	.+0      	; 0x15a6 <lcd_init+0x26>
    15a6:	00 00       	nop
    15a8:	21 96       	adiw	r28, 0x01	; 1
    15aa:	96 e0       	ldi	r25, 0x06	; 6
    15ac:	c5 32       	cpi	r28, 0x25	; 37
    15ae:	d9 07       	cpc	r29, r25
    15b0:	89 f7       	brne	.-30     	; 0x1594 <lcd_init+0x14>
    15b2:	10 92 d4 02 	sts	0x02D4, r1	; 0x8002d4 <cursor_pos>
    15b6:	2a 9a       	sbi	0x05, 2	; 5
    15b8:	df 91       	pop	r29
    15ba:	cf 91       	pop	r28
    15bc:	08 95       	ret

000015be <write_lcd_char>:
    15be:	28 9a       	sbi	0x05, 0	; 5
    15c0:	2a 98       	cbi	0x05, 2	; 5
    15c2:	0e 94 bb 0a 	call	0x1576	; 0x1576 <spi_tx>
    15c6:	80 e5       	ldi	r24, 0x50	; 80
    15c8:	8a 95       	dec	r24
    15ca:	f1 f7       	brne	.-4      	; 0x15c8 <write_lcd_char+0xa>
    15cc:	28 98       	cbi	0x05, 0	; 5
    15ce:	2a 9a       	sbi	0x05, 2	; 5
    15d0:	80 91 d4 02 	lds	r24, 0x02D4	; 0x8002d4 <cursor_pos>
    15d4:	8f 5f       	subi	r24, 0xFF	; 255
    15d6:	80 93 d4 02 	sts	0x02D4, r24	; 0x8002d4 <cursor_pos>
    15da:	08 95       	ret

000015dc <write_lcd_string>:
    15dc:	cf 93       	push	r28
    15de:	df 93       	push	r29
    15e0:	28 9a       	sbi	0x05, 0	; 5
    15e2:	2a 98       	cbi	0x05, 2	; 5
    15e4:	ec 01       	movw	r28, r24
    15e6:	89 91       	ld	r24, Y+
    15e8:	88 23       	and	r24, r24
    15ea:	59 f0       	breq	.+22     	; 0x1602 <write_lcd_string+0x26>
    15ec:	0e 94 bb 0a 	call	0x1576	; 0x1576 <spi_tx>
    15f0:	80 e5       	ldi	r24, 0x50	; 80
    15f2:	8a 95       	dec	r24
    15f4:	f1 f7       	brne	.-4      	; 0x15f2 <write_lcd_string+0x16>
    15f6:	80 91 d4 02 	lds	r24, 0x02D4	; 0x8002d4 <cursor_pos>
    15fa:	8f 5f       	subi	r24, 0xFF	; 255
    15fc:	80 93 d4 02 	sts	0x02D4, r24	; 0x8002d4 <cursor_pos>
    1600:	f2 cf       	rjmp	.-28     	; 0x15e6 <write_lcd_string+0xa>
    1602:	28 98       	cbi	0x05, 0	; 5
    1604:	2a 9a       	sbi	0x05, 2	; 5
    1606:	df 91       	pop	r29
    1608:	cf 91       	pop	r28
    160a:	08 95       	ret

0000160c <clear_LCD>:
    160c:	2a 98       	cbi	0x05, 2	; 5
    160e:	81 e0       	ldi	r24, 0x01	; 1
    1610:	0e 94 bb 0a 	call	0x1576	; 0x1576 <spi_tx>
    1614:	87 eb       	ldi	r24, 0xB7	; 183
    1616:	9b e0       	ldi	r25, 0x0B	; 11
    1618:	01 97       	sbiw	r24, 0x01	; 1
    161a:	f1 f7       	brne	.-4      	; 0x1618 <clear_LCD+0xc>
    161c:	00 c0       	rjmp	.+0      	; 0x161e <clear_LCD+0x12>
    161e:	00 00       	nop
    1620:	10 92 d4 02 	sts	0x02D4, r1	; 0x8002d4 <cursor_pos>
    1624:	08 95       	ret

00001626 <set_cursor_pos>:
    1626:	cf 93       	push	r28
    1628:	c8 2f       	mov	r28, r24
    162a:	2a 98       	cbi	0x05, 2	; 5
    162c:	80 68       	ori	r24, 0x80	; 128
    162e:	0e 94 bb 0a 	call	0x1576	; 0x1576 <spi_tx>
    1632:	80 e5       	ldi	r24, 0x50	; 80
    1634:	8a 95       	dec	r24
    1636:	f1 f7       	brne	.-4      	; 0x1634 <set_cursor_pos+0xe>
    1638:	c0 93 d4 02 	sts	0x02D4, r28	; 0x8002d4 <cursor_pos>
    163c:	cf 91       	pop	r28
    163e:	08 95       	ret

00001640 <clear_line>:
    1640:	cf 93       	push	r28
    1642:	82 95       	swap	r24
    1644:	80 7f       	andi	r24, 0xF0	; 240
    1646:	0e 94 13 0b 	call	0x1626	; 0x1626 <set_cursor_pos>
    164a:	28 9a       	sbi	0x05, 0	; 5
    164c:	2a 98       	cbi	0x05, 2	; 5
    164e:	c0 e1       	ldi	r28, 0x10	; 16
    1650:	80 e2       	ldi	r24, 0x20	; 32
    1652:	0e 94 bb 0a 	call	0x1576	; 0x1576 <spi_tx>
    1656:	80 e5       	ldi	r24, 0x50	; 80
    1658:	8a 95       	dec	r24
    165a:	f1 f7       	brne	.-4      	; 0x1658 <clear_line+0x18>
    165c:	80 91 d4 02 	lds	r24, 0x02D4	; 0x8002d4 <cursor_pos>
    1660:	8f 5f       	subi	r24, 0xFF	; 255
    1662:	80 93 d4 02 	sts	0x02D4, r24	; 0x8002d4 <cursor_pos>
    1666:	c1 50       	subi	r28, 0x01	; 1
    1668:	99 f7       	brne	.-26     	; 0x1650 <clear_line+0x10>
    166a:	28 98       	cbi	0x05, 0	; 5
    166c:	2a 9a       	sbi	0x05, 2	; 5
    166e:	cf 91       	pop	r28
    1670:	08 95       	ret

00001672 <set_character_pgm>:
/* Set a given address in CGRAM to a given bitmap stored in pgm_space	*/
/* @param char_code The address or char code in CGRAM to write to		*/
/* @param rows An array of 8 bytes where each bytes b0-b4 is			*/
/*	      a row of the character. Must be stored in program memory		*/
/************************************************************************/
void set_character_pgm(uint8_t char_code, const uint8_t rows[8]){
    1672:	0f 93       	push	r16
    1674:	1f 93       	push	r17
    1676:	cf 93       	push	r28
    1678:	df 93       	push	r29
	PORTB &= ~(1<<CSB);   //Clear CSB
    167a:	2a 98       	cbi	0x05, 2	; 5
    167c:	28 e0       	ldi	r18, 0x08	; 8
    167e:	82 9f       	mul	r24, r18
    1680:	c0 01       	movw	r24, r0
    1682:	11 24       	eor	r1, r1
    1684:	08 2f       	mov	r16, r24
    1686:	00 64       	ori	r16, 0x40	; 64
    1688:	eb 01       	movw	r28, r22
	for (uint8_t i = 0; i < 8; i++){
    168a:	10 e0       	ldi	r17, 0x00	; 0
		//Set CGRAM address
		PORTB &= ~(1<<RS);
    168c:	28 98       	cbi	0x05, 0	; 5
		spi_tx(0x40|(char_code<<3)|(i));
    168e:	80 2f       	mov	r24, r16
    1690:	81 2b       	or	r24, r17
    1692:	0e 94 bb 0a 	call	0x1576	; 0x1576 <spi_tx>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1696:	80 e5       	ldi	r24, 0x50	; 80
    1698:	8a 95       	dec	r24
    169a:	f1 f7       	brne	.-4      	; 0x1698 <set_character_pgm+0x26>
		_delay_us(30);
		//Write row to character
		PORTB |= 1<<RS;
    169c:	28 9a       	sbi	0x05, 0	; 5
		spi_tx(pgm_read_byte(&(rows[i])));
    169e:	fe 01       	movw	r30, r28
    16a0:	84 91       	lpm	r24, Z
    16a2:	0e 94 bb 0a 	call	0x1576	; 0x1576 <spi_tx>
    16a6:	f0 e5       	ldi	r31, 0x50	; 80
    16a8:	fa 95       	dec	r31
    16aa:	f1 f7       	brne	.-4      	; 0x16a8 <set_character_pgm+0x36>
/* @param rows An array of 8 bytes where each bytes b0-b4 is			*/
/*	      a row of the character. Must be stored in program memory		*/
/************************************************************************/
void set_character_pgm(uint8_t char_code, const uint8_t rows[8]){
	PORTB &= ~(1<<CSB);   //Clear CSB
	for (uint8_t i = 0; i < 8; i++){
    16ac:	1f 5f       	subi	r17, 0xFF	; 255
    16ae:	21 96       	adiw	r28, 0x01	; 1
    16b0:	18 30       	cpi	r17, 0x08	; 8
    16b2:	61 f7       	brne	.-40     	; 0x168c <set_character_pgm+0x1a>
		//Write row to character
		PORTB |= 1<<RS;
		spi_tx(pgm_read_byte(&(rows[i])));
		_delay_us(30);
	}
	PORTB &= ~(1<<RS);
    16b4:	28 98       	cbi	0x05, 0	; 5
	PORTB |= 1<<CSB;
    16b6:	2a 9a       	sbi	0x05, 2	; 5
}
    16b8:	df 91       	pop	r29
    16ba:	cf 91       	pop	r28
    16bc:	1f 91       	pop	r17
    16be:	0f 91       	pop	r16
    16c0:	08 95       	ret

000016c2 <messages_timerproc>:
/*bool for tracking if any message is active*/
static volatile bool message_displaying = false;

/*Keeps time running and clears buffer on deactivation of a message*/
void messages_timerproc(){
	if(message_displaying && ++message_parts > 100){
    16c2:	80 91 d5 02 	lds	r24, 0x02D5	; 0x8002d5 <message_displaying>
    16c6:	88 23       	and	r24, r24
    16c8:	19 f1       	breq	.+70     	; 0x1710 <messages_timerproc+0x4e>
    16ca:	80 91 62 03 	lds	r24, 0x0362	; 0x800362 <message_parts>
    16ce:	90 91 63 03 	lds	r25, 0x0363	; 0x800363 <message_parts+0x1>
    16d2:	01 96       	adiw	r24, 0x01	; 1
    16d4:	90 93 63 03 	sts	0x0363, r25	; 0x800363 <message_parts+0x1>
    16d8:	80 93 62 03 	sts	0x0362, r24	; 0x800362 <message_parts>
    16dc:	85 36       	cpi	r24, 0x65	; 101
    16de:	91 05       	cpc	r25, r1
    16e0:	b8 f0       	brcs	.+46     	; 0x1710 <messages_timerproc+0x4e>
		if(++message_seconds > DISP_TIME){
    16e2:	80 91 61 03 	lds	r24, 0x0361	; 0x800361 <message_seconds>
    16e6:	8f 5f       	subi	r24, 0xFF	; 255
    16e8:	80 93 61 03 	sts	0x0361, r24	; 0x800361 <message_seconds>
    16ec:	86 30       	cpi	r24, 0x06	; 6
    16ee:	60 f0       	brcs	.+24     	; 0x1708 <messages_timerproc+0x46>
			message_seconds = 0;
    16f0:	10 92 61 03 	sts	0x0361, r1	; 0x800361 <message_seconds>
			message_displaying = false;
    16f4:	10 92 d5 02 	sts	0x02D5, r1	; 0x8002d5 <message_displaying>
			strcpy((char*)output_buf, "");
    16f8:	6b e9       	ldi	r22, 0x9B	; 155
    16fa:	71 e0       	ldi	r23, 0x01	; 1
    16fc:	84 ec       	ldi	r24, 0xC4	; 196
    16fe:	93 e0       	ldi	r25, 0x03	; 3
    1700:	0e 94 c0 10 	call	0x2180	; 0x2180 <strcpy>
			output_buf_read = false;
    1704:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <output_buf_read>
		}
		message_parts = 0;
    1708:	10 92 63 03 	sts	0x0363, r1	; 0x800363 <message_parts+0x1>
    170c:	10 92 62 03 	sts	0x0362, r1	; 0x800362 <message_parts>
    1710:	08 95       	ret

00001712 <messages_force>:
	}
}

/*Forces a message to be copied into buffer and marks buffer as changed*/
void messages_force(char* msg){
	message_displaying = true;
    1712:	21 e0       	ldi	r18, 0x01	; 1
    1714:	20 93 d5 02 	sts	0x02D5, r18	; 0x8002d5 <message_displaying>
	/*Reset time counter to display for full time*/
	message_parts = 0;
    1718:	10 92 63 03 	sts	0x0363, r1	; 0x800363 <message_parts+0x1>
    171c:	10 92 62 03 	sts	0x0362, r1	; 0x800362 <message_parts>
	message_seconds = 0;
    1720:	10 92 61 03 	sts	0x0361, r1	; 0x800361 <message_seconds>
	strcpy((char*)output_buf, msg);
    1724:	bc 01       	movw	r22, r24
    1726:	84 ec       	ldi	r24, 0xC4	; 196
    1728:	93 e0       	ldi	r25, 0x03	; 3
    172a:	0e 94 c0 10 	call	0x2180	; 0x2180 <strcpy>
	output_buf_read = false;
    172e:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <output_buf_read>
    1732:	08 95       	ret

00001734 <messages_queue>:
}

/*Queues a message. Forces front most message out of queue if queue is full*/
void messages_queue(char* msg){
    1734:	cf 93       	push	r28
    1736:	df 93       	push	r29
    1738:	ec 01       	movw	r28, r24
	if(message_count == MSGBUF_SIZE){
    173a:	80 91 d6 02 	lds	r24, 0x02D6	; 0x8002d6 <message_count>
    173e:	88 30       	cpi	r24, 0x08	; 8
    1740:	81 f4       	brne	.+32     	; 0x1762 <messages_queue+0x2e>
		messages_force((char*)(message_buf)[MOD_BUFSIZE(message_extract_ind++)]);
    1742:	80 91 d7 02 	lds	r24, 0x02D7	; 0x8002d7 <message_extract_ind>
    1746:	91 e0       	ldi	r25, 0x01	; 1
    1748:	98 0f       	add	r25, r24
    174a:	90 93 d7 02 	sts	0x02D7, r25	; 0x8002d7 <message_extract_ind>
    174e:	87 70       	andi	r24, 0x07	; 7
    1750:	21 e1       	ldi	r18, 0x11	; 17
    1752:	82 9f       	mul	r24, r18
    1754:	c0 01       	movw	r24, r0
    1756:	11 24       	eor	r1, r1
    1758:	87 52       	subi	r24, 0x27	; 39
    175a:	9d 4f       	sbci	r25, 0xFD	; 253
    175c:	0e 94 89 0b 	call	0x1712	; 0x1712 <messages_force>
    1760:	0a c0       	rjmp	.+20     	; 0x1776 <messages_queue+0x42>
	} else if(++message_count > MSGBUF_SIZE) message_count = MSGBUF_SIZE;
    1762:	80 91 d6 02 	lds	r24, 0x02D6	; 0x8002d6 <message_count>
    1766:	8f 5f       	subi	r24, 0xFF	; 255
    1768:	80 93 d6 02 	sts	0x02D6, r24	; 0x8002d6 <message_count>
    176c:	89 30       	cpi	r24, 0x09	; 9
    176e:	18 f0       	brcs	.+6      	; 0x1776 <messages_queue+0x42>
    1770:	88 e0       	ldi	r24, 0x08	; 8
    1772:	80 93 d6 02 	sts	0x02D6, r24	; 0x8002d6 <message_count>
	strcpy((char*)(message_buf)[MOD_BUFSIZE(message_insert_ind++)], msg);
    1776:	80 91 d8 02 	lds	r24, 0x02D8	; 0x8002d8 <message_insert_ind>
    177a:	91 e0       	ldi	r25, 0x01	; 1
    177c:	98 0f       	add	r25, r24
    177e:	90 93 d8 02 	sts	0x02D8, r25	; 0x8002d8 <message_insert_ind>
    1782:	87 70       	andi	r24, 0x07	; 7
    1784:	21 e1       	ldi	r18, 0x11	; 17
    1786:	82 9f       	mul	r24, r18
    1788:	c0 01       	movw	r24, r0
    178a:	11 24       	eor	r1, r1
    178c:	be 01       	movw	r22, r28
    178e:	87 52       	subi	r24, 0x27	; 39
    1790:	9d 4f       	sbci	r25, 0xFD	; 253
}
    1792:	df 91       	pop	r29
    1794:	cf 91       	pop	r28
/*Queues a message. Forces front most message out of queue if queue is full*/
void messages_queue(char* msg){
	if(message_count == MSGBUF_SIZE){
		messages_force((char*)(message_buf)[MOD_BUFSIZE(message_extract_ind++)]);
	} else if(++message_count > MSGBUF_SIZE) message_count = MSGBUF_SIZE;
	strcpy((char*)(message_buf)[MOD_BUFSIZE(message_insert_ind++)], msg);
    1796:	0c 94 c0 10 	jmp	0x2180	; 0x2180 <strcpy>

0000179a <messages_move_queue>:
}

/*Moves queue along if no message is active*/
void messages_move_queue(){
	if(message_count > 0 && !message_displaying){
    179a:	80 91 d6 02 	lds	r24, 0x02D6	; 0x8002d6 <message_count>
    179e:	88 23       	and	r24, r24
    17a0:	f9 f0       	breq	.+62     	; 0x17e0 <messages_move_queue+0x46>
    17a2:	80 91 d5 02 	lds	r24, 0x02D5	; 0x8002d5 <message_displaying>
    17a6:	81 11       	cpse	r24, r1
    17a8:	1b c0       	rjmp	.+54     	; 0x17e0 <messages_move_queue+0x46>
		/*Copy next message to output buffer and increment/decremnt index and counter*/
		strcpy((char*)output_buf, (char*)(message_buf)[MOD_BUFSIZE(message_extract_ind++)]);
    17aa:	60 91 d7 02 	lds	r22, 0x02D7	; 0x8002d7 <message_extract_ind>
    17ae:	81 e0       	ldi	r24, 0x01	; 1
    17b0:	86 0f       	add	r24, r22
    17b2:	80 93 d7 02 	sts	0x02D7, r24	; 0x8002d7 <message_extract_ind>
    17b6:	67 70       	andi	r22, 0x07	; 7
    17b8:	81 e1       	ldi	r24, 0x11	; 17
    17ba:	68 9f       	mul	r22, r24
    17bc:	b0 01       	movw	r22, r0
    17be:	11 24       	eor	r1, r1
    17c0:	67 52       	subi	r22, 0x27	; 39
    17c2:	7d 4f       	sbci	r23, 0xFD	; 253
    17c4:	84 ec       	ldi	r24, 0xC4	; 196
    17c6:	93 e0       	ldi	r25, 0x03	; 3
    17c8:	0e 94 c0 10 	call	0x2180	; 0x2180 <strcpy>
		output_buf_read = false;
    17cc:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <output_buf_read>
		message_displaying = true;
    17d0:	81 e0       	ldi	r24, 0x01	; 1
    17d2:	80 93 d5 02 	sts	0x02D5, r24	; 0x8002d5 <message_displaying>
		message_count--;
    17d6:	80 91 d6 02 	lds	r24, 0x02D6	; 0x8002d6 <message_count>
    17da:	81 50       	subi	r24, 0x01	; 1
    17dc:	80 93 d6 02 	sts	0x02D6, r24	; 0x8002d6 <message_count>
    17e0:	08 95       	ret

000017e2 <messages_get_buffer>:
	}
}

/*Mark buffer as read and return pointer to buffer*/
volatile char* messages_get_buffer(){
	output_buf_read = true;
    17e2:	81 e0       	ldi	r24, 0x01	; 1
    17e4:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <output_buf_read>
	return output_buf;
    17e8:	84 ec       	ldi	r24, 0xC4	; 196
    17ea:	93 e0       	ldi	r25, 0x03	; 3
    17ec:	08 95       	ret

000017ee <music_init>:
static volatile uint8_t curr_bpm;
static const volatile uint8_t* curr_song = NULL;


void music_init(){
	DDRB |= 1<<PINB1;
    17ee:	21 9a       	sbi	0x04, 1	; 4
	TCCR1A = 1<<COM1A0;
    17f0:	80 e4       	ldi	r24, 0x40	; 64
    17f2:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = 1<<WGM12;
    17f6:	88 e0       	ldi	r24, 0x08	; 8
    17f8:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    17fc:	08 95       	ret

000017fe <music_play_note>:
	curr_bpm = pgm_read_byte(&(curr_song[0]));
	note_ind = 1;
	music_play_note(pgm_read_byte(&(curr_song[note_ind])), curr_bpm);
}

void music_play_note(uint8_t note, uint8_t bpm){
    17fe:	cf 92       	push	r12
    1800:	df 92       	push	r13
    1802:	ef 92       	push	r14
    1804:	ff 92       	push	r15
    1806:	cf 93       	push	r28
    1808:	df 93       	push	r29
    180a:	c8 2f       	mov	r28, r24
    180c:	d6 2f       	mov	r29, r22
	TIMSK1 |= 1<<OCIE1A;
    180e:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
    1812:	82 60       	ori	r24, 0x02	; 2
    1814:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
	TCCR1B |= 1<<CS10;
    1818:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    181c:	81 60       	ori	r24, 0x01	; 1
    181e:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	if(GET_PITCH_EXP(note) == -1){  // Stop buzzer if note is a rest
    1822:	6c 2f       	mov	r22, r28
    1824:	70 e0       	ldi	r23, 0x00	; 0
    1826:	6f 71       	andi	r22, 0x1F	; 31
		TCCR1A &= ~(1<<COM1A0);
    1828:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
}

void music_play_note(uint8_t note, uint8_t bpm){
	TIMSK1 |= 1<<OCIE1A;
	TCCR1B |= 1<<CS10;
	if(GET_PITCH_EXP(note) == -1){  // Stop buzzer if note is a rest
    182c:	61 15       	cp	r22, r1
    182e:	71 05       	cpc	r23, r1
    1830:	21 f4       	brne	.+8      	; 0x183a <music_play_note+0x3c>
		TCCR1A &= ~(1<<COM1A0);
    1832:	8f 7b       	andi	r24, 0xBF	; 191
    1834:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    1838:	21 c0       	rjmp	.+66     	; 0x187c <music_play_note+0x7e>
	} else{                         // Start buzzer and set correct frequency
		TCCR1A |= 1<<COM1A0;
    183a:	80 64       	ori	r24, 0x40	; 64
    183c:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
		OCR1A = LOWC_OCR / pow(ROOT12_2,GET_PITCH_EXP(note));
    1840:	61 50       	subi	r22, 0x01	; 1
    1842:	71 09       	sbc	r23, r1
    1844:	07 2e       	mov	r0, r23
    1846:	00 0c       	add	r0, r0
    1848:	88 0b       	sbc	r24, r24
    184a:	99 0b       	sbc	r25, r25
    184c:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <__floatsisf>
    1850:	9b 01       	movw	r18, r22
    1852:	ac 01       	movw	r20, r24
    1854:	6d e7       	ldi	r22, 0x7D	; 125
    1856:	7c e9       	ldi	r23, 0x9C	; 156
    1858:	87 e8       	ldi	r24, 0x87	; 135
    185a:	9f e3       	ldi	r25, 0x3F	; 63
    185c:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <pow>
    1860:	9b 01       	movw	r18, r22
    1862:	ac 01       	movw	r20, r24
    1864:	60 e0       	ldi	r22, 0x00	; 0
    1866:	70 e6       	ldi	r23, 0x60	; 96
    1868:	80 e7       	ldi	r24, 0x70	; 112
    186a:	96 e4       	ldi	r25, 0x46	; 70
    186c:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <__divsf3>
    1870:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <__fixunssfsi>
    1874:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    1878:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	}
	// cycles needed = frequency / (bar time) / (note length divisor)
	curr_note_time = ((F_CPU/(OCR1A + 1))/(bpm/(240.0)))/GET_DURATION_DIV(note);
    187c:	20 91 88 00 	lds	r18, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
    1880:	30 91 89 00 	lds	r19, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    1884:	2f 5f       	subi	r18, 0xFF	; 255
    1886:	3f 4f       	sbci	r19, 0xFF	; 255
    1888:	40 e0       	ldi	r20, 0x00	; 0
    188a:	50 e0       	ldi	r21, 0x00	; 0
    188c:	60 e0       	ldi	r22, 0x00	; 0
    188e:	72 e1       	ldi	r23, 0x12	; 18
    1890:	8a e7       	ldi	r24, 0x7A	; 122
    1892:	90 e0       	ldi	r25, 0x00	; 0
    1894:	0e 94 a1 10 	call	0x2142	; 0x2142 <__divmodsi4>
    1898:	ca 01       	movw	r24, r20
    189a:	b9 01       	movw	r22, r18
    189c:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <__floatsisf>
    18a0:	6b 01       	movw	r12, r22
    18a2:	7c 01       	movw	r14, r24
    18a4:	6d 2f       	mov	r22, r29
    18a6:	70 e0       	ldi	r23, 0x00	; 0
    18a8:	80 e0       	ldi	r24, 0x00	; 0
    18aa:	90 e0       	ldi	r25, 0x00	; 0
    18ac:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <__floatsisf>
    18b0:	20 e0       	ldi	r18, 0x00	; 0
    18b2:	30 e0       	ldi	r19, 0x00	; 0
    18b4:	40 e7       	ldi	r20, 0x70	; 112
    18b6:	53 e4       	ldi	r21, 0x43	; 67
    18b8:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <__divsf3>
    18bc:	9b 01       	movw	r18, r22
    18be:	ac 01       	movw	r20, r24
    18c0:	c7 01       	movw	r24, r14
    18c2:	b6 01       	movw	r22, r12
    18c4:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <__divsf3>
    18c8:	6b 01       	movw	r12, r22
    18ca:	7c 01       	movw	r14, r24
    18cc:	c2 95       	swap	r28
    18ce:	c6 95       	lsr	r28
    18d0:	c7 70       	andi	r28, 0x07	; 7
    18d2:	61 e0       	ldi	r22, 0x01	; 1
    18d4:	70 e0       	ldi	r23, 0x00	; 0
    18d6:	02 c0       	rjmp	.+4      	; 0x18dc <music_play_note+0xde>
    18d8:	66 0f       	add	r22, r22
    18da:	77 1f       	adc	r23, r23
    18dc:	ca 95       	dec	r28
    18de:	e2 f7       	brpl	.-8      	; 0x18d8 <music_play_note+0xda>
    18e0:	07 2e       	mov	r0, r23
    18e2:	00 0c       	add	r0, r0
    18e4:	88 0b       	sbc	r24, r24
    18e6:	99 0b       	sbc	r25, r25
    18e8:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <__floatsisf>
    18ec:	9b 01       	movw	r18, r22
    18ee:	ac 01       	movw	r20, r24
    18f0:	c7 01       	movw	r24, r14
    18f2:	b6 01       	movw	r22, r12
    18f4:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <__divsf3>
    18f8:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <__fixunssfsi>
    18fc:	70 93 69 03 	sts	0x0369, r23	; 0x800369 <curr_note_time+0x1>
    1900:	60 93 68 03 	sts	0x0368, r22	; 0x800368 <curr_note_time>
}
    1904:	df 91       	pop	r29
    1906:	cf 91       	pop	r28
    1908:	ff 90       	pop	r15
    190a:	ef 90       	pop	r14
    190c:	df 90       	pop	r13
    190e:	cf 90       	pop	r12
    1910:	08 95       	ret

00001912 <music_play_song_pgm>:
	TCCR1A = 1<<COM1A0;
	TCCR1B = 1<<WGM12;
}

void music_play_song_pgm(const uint8_t* song){
	curr_song = song;
    1912:	90 93 65 03 	sts	0x0365, r25	; 0x800365 <curr_song+0x1>
    1916:	80 93 64 03 	sts	0x0364, r24	; 0x800364 <curr_song>
	curr_bpm = pgm_read_byte(&(curr_song[0]));
    191a:	fc 01       	movw	r30, r24
    191c:	24 91       	lpm	r18, Z
    191e:	20 93 66 03 	sts	0x0366, r18	; 0x800366 <curr_bpm>
	note_ind = 1;
    1922:	21 e0       	ldi	r18, 0x01	; 1
    1924:	20 93 67 03 	sts	0x0367, r18	; 0x800367 <note_ind>
	music_play_note(pgm_read_byte(&(curr_song[note_ind])), curr_bpm);
    1928:	60 91 66 03 	lds	r22, 0x0366	; 0x800366 <curr_bpm>
    192c:	20 91 67 03 	lds	r18, 0x0367	; 0x800367 <note_ind>
    1930:	e2 0f       	add	r30, r18
    1932:	f1 1d       	adc	r31, r1
    1934:	84 91       	lpm	r24, Z
    1936:	0c 94 ff 0b 	jmp	0x17fe	; 0x17fe <music_play_note>

0000193a <__vector_11>:
	}
	// cycles needed = frequency / (bar time) / (note length divisor)
	curr_note_time = ((F_CPU/(OCR1A + 1))/(bpm/(240.0)))/GET_DURATION_DIV(note);
}

ISR(TIMER1_COMPA_vect){
    193a:	1f 92       	push	r1
    193c:	0f 92       	push	r0
    193e:	0f b6       	in	r0, 0x3f	; 63
    1940:	0f 92       	push	r0
    1942:	11 24       	eor	r1, r1
    1944:	2f 93       	push	r18
    1946:	3f 93       	push	r19
    1948:	4f 93       	push	r20
    194a:	5f 93       	push	r21
    194c:	6f 93       	push	r22
    194e:	7f 93       	push	r23
    1950:	8f 93       	push	r24
    1952:	9f 93       	push	r25
    1954:	af 93       	push	r26
    1956:	bf 93       	push	r27
    1958:	ef 93       	push	r30
    195a:	ff 93       	push	r31
	if(--curr_note_time == 0){
    195c:	80 91 68 03 	lds	r24, 0x0368	; 0x800368 <curr_note_time>
    1960:	90 91 69 03 	lds	r25, 0x0369	; 0x800369 <curr_note_time+0x1>
    1964:	01 97       	sbiw	r24, 0x01	; 1
    1966:	90 93 69 03 	sts	0x0369, r25	; 0x800369 <curr_note_time+0x1>
    196a:	80 93 68 03 	sts	0x0368, r24	; 0x800368 <curr_note_time>
    196e:	89 2b       	or	r24, r25
    1970:	01 f5       	brne	.+64     	; 0x19b2 <__vector_11+0x78>
		uint8_t note;
		/*Read next note*/
		if(curr_song != NULL && (note = pgm_read_byte(&(curr_song[++note_ind]))) != 0){
    1972:	e0 91 64 03 	lds	r30, 0x0364	; 0x800364 <curr_song>
    1976:	f0 91 65 03 	lds	r31, 0x0365	; 0x800365 <curr_song+0x1>
    197a:	30 97       	sbiw	r30, 0x00	; 0
    197c:	79 f0       	breq	.+30     	; 0x199c <__vector_11+0x62>
    197e:	80 91 67 03 	lds	r24, 0x0367	; 0x800367 <note_ind>
    1982:	8f 5f       	subi	r24, 0xFF	; 255
    1984:	80 93 67 03 	sts	0x0367, r24	; 0x800367 <note_ind>
    1988:	e8 0f       	add	r30, r24
    198a:	f1 1d       	adc	r31, r1
    198c:	84 91       	lpm	r24, Z
    198e:	88 23       	and	r24, r24
    1990:	29 f0       	breq	.+10     	; 0x199c <__vector_11+0x62>
			music_play_note(note, curr_bpm);
    1992:	60 91 66 03 	lds	r22, 0x0366	; 0x800366 <curr_bpm>
    1996:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <music_play_note>
    199a:	0b c0       	rjmp	.+22     	; 0x19b2 <__vector_11+0x78>
			} else{
			TIMSK1 = 0;
    199c:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
			TCCR1B &= ~(1<<CS10);
    19a0:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    19a4:	8e 7f       	andi	r24, 0xFE	; 254
    19a6:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
			curr_song = NULL;
    19aa:	10 92 65 03 	sts	0x0365, r1	; 0x800365 <curr_song+0x1>
    19ae:	10 92 64 03 	sts	0x0364, r1	; 0x800364 <curr_song>
		}
	}
    19b2:	ff 91       	pop	r31
    19b4:	ef 91       	pop	r30
    19b6:	bf 91       	pop	r27
    19b8:	af 91       	pop	r26
    19ba:	9f 91       	pop	r25
    19bc:	8f 91       	pop	r24
    19be:	7f 91       	pop	r23
    19c0:	6f 91       	pop	r22
    19c2:	5f 91       	pop	r21
    19c4:	4f 91       	pop	r20
    19c6:	3f 91       	pop	r19
    19c8:	2f 91       	pop	r18
    19ca:	0f 90       	pop	r0
    19cc:	0f be       	out	0x3f, r0	; 63
    19ce:	0f 90       	pop	r0
    19d0:	1f 90       	pop	r1
    19d2:	18 95       	reti

000019d4 <spi_init>:
/************************************************************************/
/* Initiates the MCU SPI as master with 16 as prescaler factor           */
/************************************************************************/
void spi_init(){
	// Set MOSI and SCK as out
	DDRB |= (1<<MOSI) | (1<<SCK) | (1<<SS);
    19d4:	84 b1       	in	r24, 0x04	; 4
    19d6:	8c 62       	ori	r24, 0x2C	; 44
    19d8:	84 b9       	out	0x04, r24	; 4
	DDRB &= ~(1<<MISO);
    19da:	24 98       	cbi	0x04, 4	; 4
	//Enable SPI in master mode with fck/4 as clock
	SPCR = (1<<SPE) | (1<<MSTR);
    19dc:	80 e5       	ldi	r24, 0x50	; 80
    19de:	8c bd       	out	0x2c, r24	; 44
    19e0:	08 95       	ret

000019e2 <__divsf3>:
    19e2:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <__divsf3x>
    19e6:	0c 94 e6 0d 	jmp	0x1bcc	; 0x1bcc <__fp_round>
    19ea:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <__fp_pscB>
    19ee:	58 f0       	brcs	.+22     	; 0x1a06 <__divsf3+0x24>
    19f0:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <__fp_pscA>
    19f4:	40 f0       	brcs	.+16     	; 0x1a06 <__divsf3+0x24>
    19f6:	29 f4       	brne	.+10     	; 0x1a02 <__divsf3+0x20>
    19f8:	5f 3f       	cpi	r21, 0xFF	; 255
    19fa:	29 f0       	breq	.+10     	; 0x1a06 <__divsf3+0x24>
    19fc:	0c 94 cf 0d 	jmp	0x1b9e	; 0x1b9e <__fp_inf>
    1a00:	51 11       	cpse	r21, r1
    1a02:	0c 94 1a 0e 	jmp	0x1c34	; 0x1c34 <__fp_szero>
    1a06:	0c 94 d5 0d 	jmp	0x1baa	; 0x1baa <__fp_nan>

00001a0a <__divsf3x>:
    1a0a:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <__fp_split3>
    1a0e:	68 f3       	brcs	.-38     	; 0x19ea <__divsf3+0x8>

00001a10 <__divsf3_pse>:
    1a10:	99 23       	and	r25, r25
    1a12:	b1 f3       	breq	.-20     	; 0x1a00 <__divsf3+0x1e>
    1a14:	55 23       	and	r21, r21
    1a16:	91 f3       	breq	.-28     	; 0x19fc <__divsf3+0x1a>
    1a18:	95 1b       	sub	r25, r21
    1a1a:	55 0b       	sbc	r21, r21
    1a1c:	bb 27       	eor	r27, r27
    1a1e:	aa 27       	eor	r26, r26
    1a20:	62 17       	cp	r22, r18
    1a22:	73 07       	cpc	r23, r19
    1a24:	84 07       	cpc	r24, r20
    1a26:	38 f0       	brcs	.+14     	; 0x1a36 <__divsf3_pse+0x26>
    1a28:	9f 5f       	subi	r25, 0xFF	; 255
    1a2a:	5f 4f       	sbci	r21, 0xFF	; 255
    1a2c:	22 0f       	add	r18, r18
    1a2e:	33 1f       	adc	r19, r19
    1a30:	44 1f       	adc	r20, r20
    1a32:	aa 1f       	adc	r26, r26
    1a34:	a9 f3       	breq	.-22     	; 0x1a20 <__divsf3_pse+0x10>
    1a36:	35 d0       	rcall	.+106    	; 0x1aa2 <__divsf3_pse+0x92>
    1a38:	0e 2e       	mov	r0, r30
    1a3a:	3a f0       	brmi	.+14     	; 0x1a4a <__divsf3_pse+0x3a>
    1a3c:	e0 e8       	ldi	r30, 0x80	; 128
    1a3e:	32 d0       	rcall	.+100    	; 0x1aa4 <__divsf3_pse+0x94>
    1a40:	91 50       	subi	r25, 0x01	; 1
    1a42:	50 40       	sbci	r21, 0x00	; 0
    1a44:	e6 95       	lsr	r30
    1a46:	00 1c       	adc	r0, r0
    1a48:	ca f7       	brpl	.-14     	; 0x1a3c <__divsf3_pse+0x2c>
    1a4a:	2b d0       	rcall	.+86     	; 0x1aa2 <__divsf3_pse+0x92>
    1a4c:	fe 2f       	mov	r31, r30
    1a4e:	29 d0       	rcall	.+82     	; 0x1aa2 <__divsf3_pse+0x92>
    1a50:	66 0f       	add	r22, r22
    1a52:	77 1f       	adc	r23, r23
    1a54:	88 1f       	adc	r24, r24
    1a56:	bb 1f       	adc	r27, r27
    1a58:	26 17       	cp	r18, r22
    1a5a:	37 07       	cpc	r19, r23
    1a5c:	48 07       	cpc	r20, r24
    1a5e:	ab 07       	cpc	r26, r27
    1a60:	b0 e8       	ldi	r27, 0x80	; 128
    1a62:	09 f0       	breq	.+2      	; 0x1a66 <__divsf3_pse+0x56>
    1a64:	bb 0b       	sbc	r27, r27
    1a66:	80 2d       	mov	r24, r0
    1a68:	bf 01       	movw	r22, r30
    1a6a:	ff 27       	eor	r31, r31
    1a6c:	93 58       	subi	r25, 0x83	; 131
    1a6e:	5f 4f       	sbci	r21, 0xFF	; 255
    1a70:	3a f0       	brmi	.+14     	; 0x1a80 <__divsf3_pse+0x70>
    1a72:	9e 3f       	cpi	r25, 0xFE	; 254
    1a74:	51 05       	cpc	r21, r1
    1a76:	78 f0       	brcs	.+30     	; 0x1a96 <__divsf3_pse+0x86>
    1a78:	0c 94 cf 0d 	jmp	0x1b9e	; 0x1b9e <__fp_inf>
    1a7c:	0c 94 1a 0e 	jmp	0x1c34	; 0x1c34 <__fp_szero>
    1a80:	5f 3f       	cpi	r21, 0xFF	; 255
    1a82:	e4 f3       	brlt	.-8      	; 0x1a7c <__divsf3_pse+0x6c>
    1a84:	98 3e       	cpi	r25, 0xE8	; 232
    1a86:	d4 f3       	brlt	.-12     	; 0x1a7c <__divsf3_pse+0x6c>
    1a88:	86 95       	lsr	r24
    1a8a:	77 95       	ror	r23
    1a8c:	67 95       	ror	r22
    1a8e:	b7 95       	ror	r27
    1a90:	f7 95       	ror	r31
    1a92:	9f 5f       	subi	r25, 0xFF	; 255
    1a94:	c9 f7       	brne	.-14     	; 0x1a88 <__divsf3_pse+0x78>
    1a96:	88 0f       	add	r24, r24
    1a98:	91 1d       	adc	r25, r1
    1a9a:	96 95       	lsr	r25
    1a9c:	87 95       	ror	r24
    1a9e:	97 f9       	bld	r25, 7
    1aa0:	08 95       	ret
    1aa2:	e1 e0       	ldi	r30, 0x01	; 1
    1aa4:	66 0f       	add	r22, r22
    1aa6:	77 1f       	adc	r23, r23
    1aa8:	88 1f       	adc	r24, r24
    1aaa:	bb 1f       	adc	r27, r27
    1aac:	62 17       	cp	r22, r18
    1aae:	73 07       	cpc	r23, r19
    1ab0:	84 07       	cpc	r24, r20
    1ab2:	ba 07       	cpc	r27, r26
    1ab4:	20 f0       	brcs	.+8      	; 0x1abe <__divsf3_pse+0xae>
    1ab6:	62 1b       	sub	r22, r18
    1ab8:	73 0b       	sbc	r23, r19
    1aba:	84 0b       	sbc	r24, r20
    1abc:	ba 0b       	sbc	r27, r26
    1abe:	ee 1f       	adc	r30, r30
    1ac0:	88 f7       	brcc	.-30     	; 0x1aa4 <__divsf3_pse+0x94>
    1ac2:	e0 95       	com	r30
    1ac4:	08 95       	ret

00001ac6 <__fixunssfsi>:
    1ac6:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <__fp_splitA>
    1aca:	88 f0       	brcs	.+34     	; 0x1aee <__fixunssfsi+0x28>
    1acc:	9f 57       	subi	r25, 0x7F	; 127
    1ace:	98 f0       	brcs	.+38     	; 0x1af6 <__fixunssfsi+0x30>
    1ad0:	b9 2f       	mov	r27, r25
    1ad2:	99 27       	eor	r25, r25
    1ad4:	b7 51       	subi	r27, 0x17	; 23
    1ad6:	b0 f0       	brcs	.+44     	; 0x1b04 <__fixunssfsi+0x3e>
    1ad8:	e1 f0       	breq	.+56     	; 0x1b12 <__fixunssfsi+0x4c>
    1ada:	66 0f       	add	r22, r22
    1adc:	77 1f       	adc	r23, r23
    1ade:	88 1f       	adc	r24, r24
    1ae0:	99 1f       	adc	r25, r25
    1ae2:	1a f0       	brmi	.+6      	; 0x1aea <__fixunssfsi+0x24>
    1ae4:	ba 95       	dec	r27
    1ae6:	c9 f7       	brne	.-14     	; 0x1ada <__fixunssfsi+0x14>
    1ae8:	14 c0       	rjmp	.+40     	; 0x1b12 <__fixunssfsi+0x4c>
    1aea:	b1 30       	cpi	r27, 0x01	; 1
    1aec:	91 f0       	breq	.+36     	; 0x1b12 <__fixunssfsi+0x4c>
    1aee:	0e 94 19 0e 	call	0x1c32	; 0x1c32 <__fp_zero>
    1af2:	b1 e0       	ldi	r27, 0x01	; 1
    1af4:	08 95       	ret
    1af6:	0c 94 19 0e 	jmp	0x1c32	; 0x1c32 <__fp_zero>
    1afa:	67 2f       	mov	r22, r23
    1afc:	78 2f       	mov	r23, r24
    1afe:	88 27       	eor	r24, r24
    1b00:	b8 5f       	subi	r27, 0xF8	; 248
    1b02:	39 f0       	breq	.+14     	; 0x1b12 <__fixunssfsi+0x4c>
    1b04:	b9 3f       	cpi	r27, 0xF9	; 249
    1b06:	cc f3       	brlt	.-14     	; 0x1afa <__fixunssfsi+0x34>
    1b08:	86 95       	lsr	r24
    1b0a:	77 95       	ror	r23
    1b0c:	67 95       	ror	r22
    1b0e:	b3 95       	inc	r27
    1b10:	d9 f7       	brne	.-10     	; 0x1b08 <__fixunssfsi+0x42>
    1b12:	3e f4       	brtc	.+14     	; 0x1b22 <__fixunssfsi+0x5c>
    1b14:	90 95       	com	r25
    1b16:	80 95       	com	r24
    1b18:	70 95       	com	r23
    1b1a:	61 95       	neg	r22
    1b1c:	7f 4f       	sbci	r23, 0xFF	; 255
    1b1e:	8f 4f       	sbci	r24, 0xFF	; 255
    1b20:	9f 4f       	sbci	r25, 0xFF	; 255
    1b22:	08 95       	ret

00001b24 <__floatunsisf>:
    1b24:	e8 94       	clt
    1b26:	09 c0       	rjmp	.+18     	; 0x1b3a <__floatsisf+0x12>

00001b28 <__floatsisf>:
    1b28:	97 fb       	bst	r25, 7
    1b2a:	3e f4       	brtc	.+14     	; 0x1b3a <__floatsisf+0x12>
    1b2c:	90 95       	com	r25
    1b2e:	80 95       	com	r24
    1b30:	70 95       	com	r23
    1b32:	61 95       	neg	r22
    1b34:	7f 4f       	sbci	r23, 0xFF	; 255
    1b36:	8f 4f       	sbci	r24, 0xFF	; 255
    1b38:	9f 4f       	sbci	r25, 0xFF	; 255
    1b3a:	99 23       	and	r25, r25
    1b3c:	a9 f0       	breq	.+42     	; 0x1b68 <__floatsisf+0x40>
    1b3e:	f9 2f       	mov	r31, r25
    1b40:	96 e9       	ldi	r25, 0x96	; 150
    1b42:	bb 27       	eor	r27, r27
    1b44:	93 95       	inc	r25
    1b46:	f6 95       	lsr	r31
    1b48:	87 95       	ror	r24
    1b4a:	77 95       	ror	r23
    1b4c:	67 95       	ror	r22
    1b4e:	b7 95       	ror	r27
    1b50:	f1 11       	cpse	r31, r1
    1b52:	f8 cf       	rjmp	.-16     	; 0x1b44 <__floatsisf+0x1c>
    1b54:	fa f4       	brpl	.+62     	; 0x1b94 <__floatsisf+0x6c>
    1b56:	bb 0f       	add	r27, r27
    1b58:	11 f4       	brne	.+4      	; 0x1b5e <__floatsisf+0x36>
    1b5a:	60 ff       	sbrs	r22, 0
    1b5c:	1b c0       	rjmp	.+54     	; 0x1b94 <__floatsisf+0x6c>
    1b5e:	6f 5f       	subi	r22, 0xFF	; 255
    1b60:	7f 4f       	sbci	r23, 0xFF	; 255
    1b62:	8f 4f       	sbci	r24, 0xFF	; 255
    1b64:	9f 4f       	sbci	r25, 0xFF	; 255
    1b66:	16 c0       	rjmp	.+44     	; 0x1b94 <__floatsisf+0x6c>
    1b68:	88 23       	and	r24, r24
    1b6a:	11 f0       	breq	.+4      	; 0x1b70 <__floatsisf+0x48>
    1b6c:	96 e9       	ldi	r25, 0x96	; 150
    1b6e:	11 c0       	rjmp	.+34     	; 0x1b92 <__floatsisf+0x6a>
    1b70:	77 23       	and	r23, r23
    1b72:	21 f0       	breq	.+8      	; 0x1b7c <__floatsisf+0x54>
    1b74:	9e e8       	ldi	r25, 0x8E	; 142
    1b76:	87 2f       	mov	r24, r23
    1b78:	76 2f       	mov	r23, r22
    1b7a:	05 c0       	rjmp	.+10     	; 0x1b86 <__floatsisf+0x5e>
    1b7c:	66 23       	and	r22, r22
    1b7e:	71 f0       	breq	.+28     	; 0x1b9c <__floatsisf+0x74>
    1b80:	96 e8       	ldi	r25, 0x86	; 134
    1b82:	86 2f       	mov	r24, r22
    1b84:	70 e0       	ldi	r23, 0x00	; 0
    1b86:	60 e0       	ldi	r22, 0x00	; 0
    1b88:	2a f0       	brmi	.+10     	; 0x1b94 <__floatsisf+0x6c>
    1b8a:	9a 95       	dec	r25
    1b8c:	66 0f       	add	r22, r22
    1b8e:	77 1f       	adc	r23, r23
    1b90:	88 1f       	adc	r24, r24
    1b92:	da f7       	brpl	.-10     	; 0x1b8a <__floatsisf+0x62>
    1b94:	88 0f       	add	r24, r24
    1b96:	96 95       	lsr	r25
    1b98:	87 95       	ror	r24
    1b9a:	97 f9       	bld	r25, 7
    1b9c:	08 95       	ret

00001b9e <__fp_inf>:
    1b9e:	97 f9       	bld	r25, 7
    1ba0:	9f 67       	ori	r25, 0x7F	; 127
    1ba2:	80 e8       	ldi	r24, 0x80	; 128
    1ba4:	70 e0       	ldi	r23, 0x00	; 0
    1ba6:	60 e0       	ldi	r22, 0x00	; 0
    1ba8:	08 95       	ret

00001baa <__fp_nan>:
    1baa:	9f ef       	ldi	r25, 0xFF	; 255
    1bac:	80 ec       	ldi	r24, 0xC0	; 192
    1bae:	08 95       	ret

00001bb0 <__fp_pscA>:
    1bb0:	00 24       	eor	r0, r0
    1bb2:	0a 94       	dec	r0
    1bb4:	16 16       	cp	r1, r22
    1bb6:	17 06       	cpc	r1, r23
    1bb8:	18 06       	cpc	r1, r24
    1bba:	09 06       	cpc	r0, r25
    1bbc:	08 95       	ret

00001bbe <__fp_pscB>:
    1bbe:	00 24       	eor	r0, r0
    1bc0:	0a 94       	dec	r0
    1bc2:	12 16       	cp	r1, r18
    1bc4:	13 06       	cpc	r1, r19
    1bc6:	14 06       	cpc	r1, r20
    1bc8:	05 06       	cpc	r0, r21
    1bca:	08 95       	ret

00001bcc <__fp_round>:
    1bcc:	09 2e       	mov	r0, r25
    1bce:	03 94       	inc	r0
    1bd0:	00 0c       	add	r0, r0
    1bd2:	11 f4       	brne	.+4      	; 0x1bd8 <__fp_round+0xc>
    1bd4:	88 23       	and	r24, r24
    1bd6:	52 f0       	brmi	.+20     	; 0x1bec <__fp_round+0x20>
    1bd8:	bb 0f       	add	r27, r27
    1bda:	40 f4       	brcc	.+16     	; 0x1bec <__fp_round+0x20>
    1bdc:	bf 2b       	or	r27, r31
    1bde:	11 f4       	brne	.+4      	; 0x1be4 <__fp_round+0x18>
    1be0:	60 ff       	sbrs	r22, 0
    1be2:	04 c0       	rjmp	.+8      	; 0x1bec <__fp_round+0x20>
    1be4:	6f 5f       	subi	r22, 0xFF	; 255
    1be6:	7f 4f       	sbci	r23, 0xFF	; 255
    1be8:	8f 4f       	sbci	r24, 0xFF	; 255
    1bea:	9f 4f       	sbci	r25, 0xFF	; 255
    1bec:	08 95       	ret

00001bee <__fp_split3>:
    1bee:	57 fd       	sbrc	r21, 7
    1bf0:	90 58       	subi	r25, 0x80	; 128
    1bf2:	44 0f       	add	r20, r20
    1bf4:	55 1f       	adc	r21, r21
    1bf6:	59 f0       	breq	.+22     	; 0x1c0e <__fp_splitA+0x10>
    1bf8:	5f 3f       	cpi	r21, 0xFF	; 255
    1bfa:	71 f0       	breq	.+28     	; 0x1c18 <__fp_splitA+0x1a>
    1bfc:	47 95       	ror	r20

00001bfe <__fp_splitA>:
    1bfe:	88 0f       	add	r24, r24
    1c00:	97 fb       	bst	r25, 7
    1c02:	99 1f       	adc	r25, r25
    1c04:	61 f0       	breq	.+24     	; 0x1c1e <__fp_splitA+0x20>
    1c06:	9f 3f       	cpi	r25, 0xFF	; 255
    1c08:	79 f0       	breq	.+30     	; 0x1c28 <__fp_splitA+0x2a>
    1c0a:	87 95       	ror	r24
    1c0c:	08 95       	ret
    1c0e:	12 16       	cp	r1, r18
    1c10:	13 06       	cpc	r1, r19
    1c12:	14 06       	cpc	r1, r20
    1c14:	55 1f       	adc	r21, r21
    1c16:	f2 cf       	rjmp	.-28     	; 0x1bfc <__fp_split3+0xe>
    1c18:	46 95       	lsr	r20
    1c1a:	f1 df       	rcall	.-30     	; 0x1bfe <__fp_splitA>
    1c1c:	08 c0       	rjmp	.+16     	; 0x1c2e <__fp_splitA+0x30>
    1c1e:	16 16       	cp	r1, r22
    1c20:	17 06       	cpc	r1, r23
    1c22:	18 06       	cpc	r1, r24
    1c24:	99 1f       	adc	r25, r25
    1c26:	f1 cf       	rjmp	.-30     	; 0x1c0a <__fp_splitA+0xc>
    1c28:	86 95       	lsr	r24
    1c2a:	71 05       	cpc	r23, r1
    1c2c:	61 05       	cpc	r22, r1
    1c2e:	08 94       	sec
    1c30:	08 95       	ret

00001c32 <__fp_zero>:
    1c32:	e8 94       	clt

00001c34 <__fp_szero>:
    1c34:	bb 27       	eor	r27, r27
    1c36:	66 27       	eor	r22, r22
    1c38:	77 27       	eor	r23, r23
    1c3a:	cb 01       	movw	r24, r22
    1c3c:	97 f9       	bld	r25, 7
    1c3e:	08 95       	ret

00001c40 <pow>:
    1c40:	fa 01       	movw	r30, r20
    1c42:	ee 0f       	add	r30, r30
    1c44:	ff 1f       	adc	r31, r31
    1c46:	30 96       	adiw	r30, 0x00	; 0
    1c48:	21 05       	cpc	r18, r1
    1c4a:	31 05       	cpc	r19, r1
    1c4c:	a1 f1       	breq	.+104    	; 0x1cb6 <pow+0x76>
    1c4e:	61 15       	cp	r22, r1
    1c50:	71 05       	cpc	r23, r1
    1c52:	61 f4       	brne	.+24     	; 0x1c6c <pow+0x2c>
    1c54:	80 38       	cpi	r24, 0x80	; 128
    1c56:	bf e3       	ldi	r27, 0x3F	; 63
    1c58:	9b 07       	cpc	r25, r27
    1c5a:	49 f1       	breq	.+82     	; 0x1cae <pow+0x6e>
    1c5c:	68 94       	set
    1c5e:	90 38       	cpi	r25, 0x80	; 128
    1c60:	81 05       	cpc	r24, r1
    1c62:	61 f0       	breq	.+24     	; 0x1c7c <pow+0x3c>
    1c64:	80 38       	cpi	r24, 0x80	; 128
    1c66:	bf ef       	ldi	r27, 0xFF	; 255
    1c68:	9b 07       	cpc	r25, r27
    1c6a:	41 f0       	breq	.+16     	; 0x1c7c <pow+0x3c>
    1c6c:	99 23       	and	r25, r25
    1c6e:	4a f5       	brpl	.+82     	; 0x1cc2 <pow+0x82>
    1c70:	ff 3f       	cpi	r31, 0xFF	; 255
    1c72:	e1 05       	cpc	r30, r1
    1c74:	31 05       	cpc	r19, r1
    1c76:	21 05       	cpc	r18, r1
    1c78:	19 f1       	breq	.+70     	; 0x1cc0 <pow+0x80>
    1c7a:	e8 94       	clt
    1c7c:	08 94       	sec
    1c7e:	e7 95       	ror	r30
    1c80:	d9 01       	movw	r26, r18
    1c82:	aa 23       	and	r26, r26
    1c84:	29 f4       	brne	.+10     	; 0x1c90 <pow+0x50>
    1c86:	ab 2f       	mov	r26, r27
    1c88:	be 2f       	mov	r27, r30
    1c8a:	f8 5f       	subi	r31, 0xF8	; 248
    1c8c:	d0 f3       	brcs	.-12     	; 0x1c82 <pow+0x42>
    1c8e:	10 c0       	rjmp	.+32     	; 0x1cb0 <pow+0x70>
    1c90:	ff 5f       	subi	r31, 0xFF	; 255
    1c92:	70 f4       	brcc	.+28     	; 0x1cb0 <pow+0x70>
    1c94:	a6 95       	lsr	r26
    1c96:	e0 f7       	brcc	.-8      	; 0x1c90 <pow+0x50>
    1c98:	f7 39       	cpi	r31, 0x97	; 151
    1c9a:	50 f0       	brcs	.+20     	; 0x1cb0 <pow+0x70>
    1c9c:	19 f0       	breq	.+6      	; 0x1ca4 <pow+0x64>
    1c9e:	ff 3a       	cpi	r31, 0xAF	; 175
    1ca0:	38 f4       	brcc	.+14     	; 0x1cb0 <pow+0x70>
    1ca2:	9f 77       	andi	r25, 0x7F	; 127
    1ca4:	9f 93       	push	r25
    1ca6:	0d d0       	rcall	.+26     	; 0x1cc2 <pow+0x82>
    1ca8:	0f 90       	pop	r0
    1caa:	07 fc       	sbrc	r0, 7
    1cac:	90 58       	subi	r25, 0x80	; 128
    1cae:	08 95       	ret
    1cb0:	46 f0       	brts	.+16     	; 0x1cc2 <pow+0x82>
    1cb2:	0c 94 d5 0d 	jmp	0x1baa	; 0x1baa <__fp_nan>
    1cb6:	60 e0       	ldi	r22, 0x00	; 0
    1cb8:	70 e0       	ldi	r23, 0x00	; 0
    1cba:	80 e8       	ldi	r24, 0x80	; 128
    1cbc:	9f e3       	ldi	r25, 0x3F	; 63
    1cbe:	08 95       	ret
    1cc0:	4f e7       	ldi	r20, 0x7F	; 127
    1cc2:	9f 77       	andi	r25, 0x7F	; 127
    1cc4:	5f 93       	push	r21
    1cc6:	4f 93       	push	r20
    1cc8:	3f 93       	push	r19
    1cca:	2f 93       	push	r18
    1ccc:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <log>
    1cd0:	2f 91       	pop	r18
    1cd2:	3f 91       	pop	r19
    1cd4:	4f 91       	pop	r20
    1cd6:	5f 91       	pop	r21
    1cd8:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <__mulsf3>
    1cdc:	0c 94 78 0e 	jmp	0x1cf0	; 0x1cf0 <exp>
    1ce0:	29 f4       	brne	.+10     	; 0x1cec <pow+0xac>
    1ce2:	16 f0       	brts	.+4      	; 0x1ce8 <pow+0xa8>
    1ce4:	0c 94 cf 0d 	jmp	0x1b9e	; 0x1b9e <__fp_inf>
    1ce8:	0c 94 19 0e 	jmp	0x1c32	; 0x1c32 <__fp_zero>
    1cec:	0c 94 d5 0d 	jmp	0x1baa	; 0x1baa <__fp_nan>

00001cf0 <exp>:
    1cf0:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <__fp_splitA>
    1cf4:	a8 f3       	brcs	.-22     	; 0x1ce0 <pow+0xa0>
    1cf6:	96 38       	cpi	r25, 0x86	; 134
    1cf8:	a0 f7       	brcc	.-24     	; 0x1ce2 <pow+0xa2>
    1cfa:	07 f8       	bld	r0, 7
    1cfc:	0f 92       	push	r0
    1cfe:	e8 94       	clt
    1d00:	2b e3       	ldi	r18, 0x3B	; 59
    1d02:	3a ea       	ldi	r19, 0xAA	; 170
    1d04:	48 eb       	ldi	r20, 0xB8	; 184
    1d06:	5f e7       	ldi	r21, 0x7F	; 127
    1d08:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <__mulsf3_pse>
    1d0c:	0f 92       	push	r0
    1d0e:	0f 92       	push	r0
    1d10:	0f 92       	push	r0
    1d12:	4d b7       	in	r20, 0x3d	; 61
    1d14:	5e b7       	in	r21, 0x3e	; 62
    1d16:	0f 92       	push	r0
    1d18:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <modf>
    1d1c:	e8 e6       	ldi	r30, 0x68	; 104
    1d1e:	f0 e0       	ldi	r31, 0x00	; 0
    1d20:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <__fp_powser>
    1d24:	4f 91       	pop	r20
    1d26:	5f 91       	pop	r21
    1d28:	ef 91       	pop	r30
    1d2a:	ff 91       	pop	r31
    1d2c:	e5 95       	asr	r30
    1d2e:	ee 1f       	adc	r30, r30
    1d30:	ff 1f       	adc	r31, r31
    1d32:	49 f0       	breq	.+18     	; 0x1d46 <exp+0x56>
    1d34:	fe 57       	subi	r31, 0x7E	; 126
    1d36:	e0 68       	ori	r30, 0x80	; 128
    1d38:	44 27       	eor	r20, r20
    1d3a:	ee 0f       	add	r30, r30
    1d3c:	44 1f       	adc	r20, r20
    1d3e:	fa 95       	dec	r31
    1d40:	e1 f7       	brne	.-8      	; 0x1d3a <exp+0x4a>
    1d42:	41 95       	neg	r20
    1d44:	55 0b       	sbc	r21, r21
    1d46:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <ldexp>
    1d4a:	0f 90       	pop	r0
    1d4c:	07 fe       	sbrs	r0, 7
    1d4e:	0c 94 d1 0e 	jmp	0x1da2	; 0x1da2 <inverse>
    1d52:	08 95       	ret

00001d54 <__fp_powser>:
    1d54:	df 93       	push	r29
    1d56:	cf 93       	push	r28
    1d58:	1f 93       	push	r17
    1d5a:	0f 93       	push	r16
    1d5c:	ff 92       	push	r15
    1d5e:	ef 92       	push	r14
    1d60:	df 92       	push	r13
    1d62:	7b 01       	movw	r14, r22
    1d64:	8c 01       	movw	r16, r24
    1d66:	68 94       	set
    1d68:	06 c0       	rjmp	.+12     	; 0x1d76 <__fp_powser+0x22>
    1d6a:	da 2e       	mov	r13, r26
    1d6c:	ef 01       	movw	r28, r30
    1d6e:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <__mulsf3x>
    1d72:	fe 01       	movw	r30, r28
    1d74:	e8 94       	clt
    1d76:	a5 91       	lpm	r26, Z+
    1d78:	25 91       	lpm	r18, Z+
    1d7a:	35 91       	lpm	r19, Z+
    1d7c:	45 91       	lpm	r20, Z+
    1d7e:	55 91       	lpm	r21, Z+
    1d80:	a6 f3       	brts	.-24     	; 0x1d6a <__fp_powser+0x16>
    1d82:	ef 01       	movw	r28, r30
    1d84:	0e 94 1c 10 	call	0x2038	; 0x2038 <__addsf3x>
    1d88:	fe 01       	movw	r30, r28
    1d8a:	97 01       	movw	r18, r14
    1d8c:	a8 01       	movw	r20, r16
    1d8e:	da 94       	dec	r13
    1d90:	69 f7       	brne	.-38     	; 0x1d6c <__fp_powser+0x18>
    1d92:	df 90       	pop	r13
    1d94:	ef 90       	pop	r14
    1d96:	ff 90       	pop	r15
    1d98:	0f 91       	pop	r16
    1d9a:	1f 91       	pop	r17
    1d9c:	cf 91       	pop	r28
    1d9e:	df 91       	pop	r29
    1da0:	08 95       	ret

00001da2 <inverse>:
    1da2:	9b 01       	movw	r18, r22
    1da4:	ac 01       	movw	r20, r24
    1da6:	60 e0       	ldi	r22, 0x00	; 0
    1da8:	70 e0       	ldi	r23, 0x00	; 0
    1daa:	80 e8       	ldi	r24, 0x80	; 128
    1dac:	9f e3       	ldi	r25, 0x3F	; 63
    1dae:	0c 94 f1 0c 	jmp	0x19e2	; 0x19e2 <__divsf3>
    1db2:	0c 94 cf 0d 	jmp	0x1b9e	; 0x1b9e <__fp_inf>
    1db6:	0c 94 71 10 	jmp	0x20e2	; 0x20e2 <__fp_mpack>

00001dba <ldexp>:
    1dba:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <__fp_splitA>
    1dbe:	d8 f3       	brcs	.-10     	; 0x1db6 <inverse+0x14>
    1dc0:	99 23       	and	r25, r25
    1dc2:	c9 f3       	breq	.-14     	; 0x1db6 <inverse+0x14>
    1dc4:	94 0f       	add	r25, r20
    1dc6:	51 1d       	adc	r21, r1
    1dc8:	a3 f3       	brvs	.-24     	; 0x1db2 <inverse+0x10>
    1dca:	91 50       	subi	r25, 0x01	; 1
    1dcc:	50 40       	sbci	r21, 0x00	; 0
    1dce:	94 f0       	brlt	.+36     	; 0x1df4 <ldexp+0x3a>
    1dd0:	59 f0       	breq	.+22     	; 0x1de8 <ldexp+0x2e>
    1dd2:	88 23       	and	r24, r24
    1dd4:	32 f0       	brmi	.+12     	; 0x1de2 <ldexp+0x28>
    1dd6:	66 0f       	add	r22, r22
    1dd8:	77 1f       	adc	r23, r23
    1dda:	88 1f       	adc	r24, r24
    1ddc:	91 50       	subi	r25, 0x01	; 1
    1dde:	50 40       	sbci	r21, 0x00	; 0
    1de0:	c1 f7       	brne	.-16     	; 0x1dd2 <ldexp+0x18>
    1de2:	9e 3f       	cpi	r25, 0xFE	; 254
    1de4:	51 05       	cpc	r21, r1
    1de6:	2c f7       	brge	.-54     	; 0x1db2 <inverse+0x10>
    1de8:	88 0f       	add	r24, r24
    1dea:	91 1d       	adc	r25, r1
    1dec:	96 95       	lsr	r25
    1dee:	87 95       	ror	r24
    1df0:	97 f9       	bld	r25, 7
    1df2:	08 95       	ret
    1df4:	5f 3f       	cpi	r21, 0xFF	; 255
    1df6:	ac f0       	brlt	.+42     	; 0x1e22 <ldexp+0x68>
    1df8:	98 3e       	cpi	r25, 0xE8	; 232
    1dfa:	9c f0       	brlt	.+38     	; 0x1e22 <ldexp+0x68>
    1dfc:	bb 27       	eor	r27, r27
    1dfe:	86 95       	lsr	r24
    1e00:	77 95       	ror	r23
    1e02:	67 95       	ror	r22
    1e04:	b7 95       	ror	r27
    1e06:	08 f4       	brcc	.+2      	; 0x1e0a <ldexp+0x50>
    1e08:	b1 60       	ori	r27, 0x01	; 1
    1e0a:	93 95       	inc	r25
    1e0c:	c1 f7       	brne	.-16     	; 0x1dfe <ldexp+0x44>
    1e0e:	bb 0f       	add	r27, r27
    1e10:	58 f7       	brcc	.-42     	; 0x1de8 <ldexp+0x2e>
    1e12:	11 f4       	brne	.+4      	; 0x1e18 <ldexp+0x5e>
    1e14:	60 ff       	sbrs	r22, 0
    1e16:	e8 cf       	rjmp	.-48     	; 0x1de8 <ldexp+0x2e>
    1e18:	6f 5f       	subi	r22, 0xFF	; 255
    1e1a:	7f 4f       	sbci	r23, 0xFF	; 255
    1e1c:	8f 4f       	sbci	r24, 0xFF	; 255
    1e1e:	9f 4f       	sbci	r25, 0xFF	; 255
    1e20:	e3 cf       	rjmp	.-58     	; 0x1de8 <ldexp+0x2e>
    1e22:	0c 94 1a 0e 	jmp	0x1c34	; 0x1c34 <__fp_szero>
    1e26:	16 f0       	brts	.+4      	; 0x1e2c <ldexp+0x72>
    1e28:	0c 94 71 10 	jmp	0x20e2	; 0x20e2 <__fp_mpack>
    1e2c:	0c 94 d5 0d 	jmp	0x1baa	; 0x1baa <__fp_nan>
    1e30:	68 94       	set
    1e32:	0c 94 cf 0d 	jmp	0x1b9e	; 0x1b9e <__fp_inf>

00001e36 <log>:
    1e36:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <__fp_splitA>
    1e3a:	a8 f3       	brcs	.-22     	; 0x1e26 <ldexp+0x6c>
    1e3c:	99 23       	and	r25, r25
    1e3e:	c1 f3       	breq	.-16     	; 0x1e30 <ldexp+0x76>
    1e40:	ae f3       	brts	.-22     	; 0x1e2c <ldexp+0x72>
    1e42:	df 93       	push	r29
    1e44:	cf 93       	push	r28
    1e46:	1f 93       	push	r17
    1e48:	0f 93       	push	r16
    1e4a:	ff 92       	push	r15
    1e4c:	c9 2f       	mov	r28, r25
    1e4e:	dd 27       	eor	r29, r29
    1e50:	88 23       	and	r24, r24
    1e52:	2a f0       	brmi	.+10     	; 0x1e5e <log+0x28>
    1e54:	21 97       	sbiw	r28, 0x01	; 1
    1e56:	66 0f       	add	r22, r22
    1e58:	77 1f       	adc	r23, r23
    1e5a:	88 1f       	adc	r24, r24
    1e5c:	da f7       	brpl	.-10     	; 0x1e54 <log+0x1e>
    1e5e:	20 e0       	ldi	r18, 0x00	; 0
    1e60:	30 e0       	ldi	r19, 0x00	; 0
    1e62:	40 e8       	ldi	r20, 0x80	; 128
    1e64:	5f eb       	ldi	r21, 0xBF	; 191
    1e66:	9f e3       	ldi	r25, 0x3F	; 63
    1e68:	88 39       	cpi	r24, 0x98	; 152
    1e6a:	20 f0       	brcs	.+8      	; 0x1e74 <log+0x3e>
    1e6c:	80 3e       	cpi	r24, 0xE0	; 224
    1e6e:	38 f0       	brcs	.+14     	; 0x1e7e <log+0x48>
    1e70:	21 96       	adiw	r28, 0x01	; 1
    1e72:	8f 77       	andi	r24, 0x7F	; 127
    1e74:	0e 94 05 10 	call	0x200a	; 0x200a <__addsf3>
    1e78:	e0 e9       	ldi	r30, 0x90	; 144
    1e7a:	f0 e0       	ldi	r31, 0x00	; 0
    1e7c:	04 c0       	rjmp	.+8      	; 0x1e86 <log+0x50>
    1e7e:	0e 94 05 10 	call	0x200a	; 0x200a <__addsf3>
    1e82:	ed eb       	ldi	r30, 0xBD	; 189
    1e84:	f0 e0       	ldi	r31, 0x00	; 0
    1e86:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <__fp_powser>
    1e8a:	8b 01       	movw	r16, r22
    1e8c:	be 01       	movw	r22, r28
    1e8e:	ec 01       	movw	r28, r24
    1e90:	fb 2e       	mov	r15, r27
    1e92:	6f 57       	subi	r22, 0x7F	; 127
    1e94:	71 09       	sbc	r23, r1
    1e96:	75 95       	asr	r23
    1e98:	77 1f       	adc	r23, r23
    1e9a:	88 0b       	sbc	r24, r24
    1e9c:	99 0b       	sbc	r25, r25
    1e9e:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <__floatsisf>
    1ea2:	28 e1       	ldi	r18, 0x18	; 24
    1ea4:	32 e7       	ldi	r19, 0x72	; 114
    1ea6:	41 e3       	ldi	r20, 0x31	; 49
    1ea8:	5f e3       	ldi	r21, 0x3F	; 63
    1eaa:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <__mulsf3x>
    1eae:	af 2d       	mov	r26, r15
    1eb0:	98 01       	movw	r18, r16
    1eb2:	ae 01       	movw	r20, r28
    1eb4:	ff 90       	pop	r15
    1eb6:	0f 91       	pop	r16
    1eb8:	1f 91       	pop	r17
    1eba:	cf 91       	pop	r28
    1ebc:	df 91       	pop	r29
    1ebe:	0e 94 1c 10 	call	0x2038	; 0x2038 <__addsf3x>
    1ec2:	0c 94 e6 0d 	jmp	0x1bcc	; 0x1bcc <__fp_round>

00001ec6 <modf>:
    1ec6:	fa 01       	movw	r30, r20
    1ec8:	dc 01       	movw	r26, r24
    1eca:	aa 0f       	add	r26, r26
    1ecc:	bb 1f       	adc	r27, r27
    1ece:	9b 01       	movw	r18, r22
    1ed0:	ac 01       	movw	r20, r24
    1ed2:	bf 57       	subi	r27, 0x7F	; 127
    1ed4:	28 f4       	brcc	.+10     	; 0x1ee0 <modf+0x1a>
    1ed6:	22 27       	eor	r18, r18
    1ed8:	33 27       	eor	r19, r19
    1eda:	44 27       	eor	r20, r20
    1edc:	50 78       	andi	r21, 0x80	; 128
    1ede:	20 c0       	rjmp	.+64     	; 0x1f20 <modf+0x5a>
    1ee0:	b7 51       	subi	r27, 0x17	; 23
    1ee2:	90 f4       	brcc	.+36     	; 0x1f08 <modf+0x42>
    1ee4:	ab 2f       	mov	r26, r27
    1ee6:	00 24       	eor	r0, r0
    1ee8:	46 95       	lsr	r20
    1eea:	37 95       	ror	r19
    1eec:	27 95       	ror	r18
    1eee:	01 1c       	adc	r0, r1
    1ef0:	a3 95       	inc	r26
    1ef2:	d2 f3       	brmi	.-12     	; 0x1ee8 <modf+0x22>
    1ef4:	00 20       	and	r0, r0
    1ef6:	71 f0       	breq	.+28     	; 0x1f14 <modf+0x4e>
    1ef8:	22 0f       	add	r18, r18
    1efa:	33 1f       	adc	r19, r19
    1efc:	44 1f       	adc	r20, r20
    1efe:	b3 95       	inc	r27
    1f00:	da f3       	brmi	.-10     	; 0x1ef8 <modf+0x32>
    1f02:	0e d0       	rcall	.+28     	; 0x1f20 <modf+0x5a>
    1f04:	0c 94 04 10 	jmp	0x2008	; 0x2008 <__subsf3>
    1f08:	61 30       	cpi	r22, 0x01	; 1
    1f0a:	71 05       	cpc	r23, r1
    1f0c:	a0 e8       	ldi	r26, 0x80	; 128
    1f0e:	8a 07       	cpc	r24, r26
    1f10:	b9 46       	sbci	r27, 0x69	; 105
    1f12:	30 f4       	brcc	.+12     	; 0x1f20 <modf+0x5a>
    1f14:	9b 01       	movw	r18, r22
    1f16:	ac 01       	movw	r20, r24
    1f18:	66 27       	eor	r22, r22
    1f1a:	77 27       	eor	r23, r23
    1f1c:	88 27       	eor	r24, r24
    1f1e:	90 78       	andi	r25, 0x80	; 128
    1f20:	30 96       	adiw	r30, 0x00	; 0
    1f22:	21 f0       	breq	.+8      	; 0x1f2c <modf+0x66>
    1f24:	20 83       	st	Z, r18
    1f26:	31 83       	std	Z+1, r19	; 0x01
    1f28:	42 83       	std	Z+2, r20	; 0x02
    1f2a:	53 83       	std	Z+3, r21	; 0x03
    1f2c:	08 95       	ret

00001f2e <__mulsf3>:
    1f2e:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <__mulsf3x>
    1f32:	0c 94 e6 0d 	jmp	0x1bcc	; 0x1bcc <__fp_round>
    1f36:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <__fp_pscA>
    1f3a:	38 f0       	brcs	.+14     	; 0x1f4a <__mulsf3+0x1c>
    1f3c:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <__fp_pscB>
    1f40:	20 f0       	brcs	.+8      	; 0x1f4a <__mulsf3+0x1c>
    1f42:	95 23       	and	r25, r21
    1f44:	11 f0       	breq	.+4      	; 0x1f4a <__mulsf3+0x1c>
    1f46:	0c 94 cf 0d 	jmp	0x1b9e	; 0x1b9e <__fp_inf>
    1f4a:	0c 94 d5 0d 	jmp	0x1baa	; 0x1baa <__fp_nan>
    1f4e:	11 24       	eor	r1, r1
    1f50:	0c 94 1a 0e 	jmp	0x1c34	; 0x1c34 <__fp_szero>

00001f54 <__mulsf3x>:
    1f54:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <__fp_split3>
    1f58:	70 f3       	brcs	.-36     	; 0x1f36 <__mulsf3+0x8>

00001f5a <__mulsf3_pse>:
    1f5a:	95 9f       	mul	r25, r21
    1f5c:	c1 f3       	breq	.-16     	; 0x1f4e <__mulsf3+0x20>
    1f5e:	95 0f       	add	r25, r21
    1f60:	50 e0       	ldi	r21, 0x00	; 0
    1f62:	55 1f       	adc	r21, r21
    1f64:	62 9f       	mul	r22, r18
    1f66:	f0 01       	movw	r30, r0
    1f68:	72 9f       	mul	r23, r18
    1f6a:	bb 27       	eor	r27, r27
    1f6c:	f0 0d       	add	r31, r0
    1f6e:	b1 1d       	adc	r27, r1
    1f70:	63 9f       	mul	r22, r19
    1f72:	aa 27       	eor	r26, r26
    1f74:	f0 0d       	add	r31, r0
    1f76:	b1 1d       	adc	r27, r1
    1f78:	aa 1f       	adc	r26, r26
    1f7a:	64 9f       	mul	r22, r20
    1f7c:	66 27       	eor	r22, r22
    1f7e:	b0 0d       	add	r27, r0
    1f80:	a1 1d       	adc	r26, r1
    1f82:	66 1f       	adc	r22, r22
    1f84:	82 9f       	mul	r24, r18
    1f86:	22 27       	eor	r18, r18
    1f88:	b0 0d       	add	r27, r0
    1f8a:	a1 1d       	adc	r26, r1
    1f8c:	62 1f       	adc	r22, r18
    1f8e:	73 9f       	mul	r23, r19
    1f90:	b0 0d       	add	r27, r0
    1f92:	a1 1d       	adc	r26, r1
    1f94:	62 1f       	adc	r22, r18
    1f96:	83 9f       	mul	r24, r19
    1f98:	a0 0d       	add	r26, r0
    1f9a:	61 1d       	adc	r22, r1
    1f9c:	22 1f       	adc	r18, r18
    1f9e:	74 9f       	mul	r23, r20
    1fa0:	33 27       	eor	r19, r19
    1fa2:	a0 0d       	add	r26, r0
    1fa4:	61 1d       	adc	r22, r1
    1fa6:	23 1f       	adc	r18, r19
    1fa8:	84 9f       	mul	r24, r20
    1faa:	60 0d       	add	r22, r0
    1fac:	21 1d       	adc	r18, r1
    1fae:	82 2f       	mov	r24, r18
    1fb0:	76 2f       	mov	r23, r22
    1fb2:	6a 2f       	mov	r22, r26
    1fb4:	11 24       	eor	r1, r1
    1fb6:	9f 57       	subi	r25, 0x7F	; 127
    1fb8:	50 40       	sbci	r21, 0x00	; 0
    1fba:	9a f0       	brmi	.+38     	; 0x1fe2 <__mulsf3_pse+0x88>
    1fbc:	f1 f0       	breq	.+60     	; 0x1ffa <__mulsf3_pse+0xa0>
    1fbe:	88 23       	and	r24, r24
    1fc0:	4a f0       	brmi	.+18     	; 0x1fd4 <__mulsf3_pse+0x7a>
    1fc2:	ee 0f       	add	r30, r30
    1fc4:	ff 1f       	adc	r31, r31
    1fc6:	bb 1f       	adc	r27, r27
    1fc8:	66 1f       	adc	r22, r22
    1fca:	77 1f       	adc	r23, r23
    1fcc:	88 1f       	adc	r24, r24
    1fce:	91 50       	subi	r25, 0x01	; 1
    1fd0:	50 40       	sbci	r21, 0x00	; 0
    1fd2:	a9 f7       	brne	.-22     	; 0x1fbe <__mulsf3_pse+0x64>
    1fd4:	9e 3f       	cpi	r25, 0xFE	; 254
    1fd6:	51 05       	cpc	r21, r1
    1fd8:	80 f0       	brcs	.+32     	; 0x1ffa <__mulsf3_pse+0xa0>
    1fda:	0c 94 cf 0d 	jmp	0x1b9e	; 0x1b9e <__fp_inf>
    1fde:	0c 94 1a 0e 	jmp	0x1c34	; 0x1c34 <__fp_szero>
    1fe2:	5f 3f       	cpi	r21, 0xFF	; 255
    1fe4:	e4 f3       	brlt	.-8      	; 0x1fde <__mulsf3_pse+0x84>
    1fe6:	98 3e       	cpi	r25, 0xE8	; 232
    1fe8:	d4 f3       	brlt	.-12     	; 0x1fde <__mulsf3_pse+0x84>
    1fea:	86 95       	lsr	r24
    1fec:	77 95       	ror	r23
    1fee:	67 95       	ror	r22
    1ff0:	b7 95       	ror	r27
    1ff2:	f7 95       	ror	r31
    1ff4:	e7 95       	ror	r30
    1ff6:	9f 5f       	subi	r25, 0xFF	; 255
    1ff8:	c1 f7       	brne	.-16     	; 0x1fea <__mulsf3_pse+0x90>
    1ffa:	fe 2b       	or	r31, r30
    1ffc:	88 0f       	add	r24, r24
    1ffe:	91 1d       	adc	r25, r1
    2000:	96 95       	lsr	r25
    2002:	87 95       	ror	r24
    2004:	97 f9       	bld	r25, 7
    2006:	08 95       	ret

00002008 <__subsf3>:
    2008:	50 58       	subi	r21, 0x80	; 128

0000200a <__addsf3>:
    200a:	bb 27       	eor	r27, r27
    200c:	aa 27       	eor	r26, r26
    200e:	0e 94 1c 10 	call	0x2038	; 0x2038 <__addsf3x>
    2012:	0c 94 e6 0d 	jmp	0x1bcc	; 0x1bcc <__fp_round>
    2016:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <__fp_pscA>
    201a:	38 f0       	brcs	.+14     	; 0x202a <__addsf3+0x20>
    201c:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <__fp_pscB>
    2020:	20 f0       	brcs	.+8      	; 0x202a <__addsf3+0x20>
    2022:	39 f4       	brne	.+14     	; 0x2032 <__addsf3+0x28>
    2024:	9f 3f       	cpi	r25, 0xFF	; 255
    2026:	19 f4       	brne	.+6      	; 0x202e <__addsf3+0x24>
    2028:	26 f4       	brtc	.+8      	; 0x2032 <__addsf3+0x28>
    202a:	0c 94 d5 0d 	jmp	0x1baa	; 0x1baa <__fp_nan>
    202e:	0e f4       	brtc	.+2      	; 0x2032 <__addsf3+0x28>
    2030:	e0 95       	com	r30
    2032:	e7 fb       	bst	r30, 7
    2034:	0c 94 cf 0d 	jmp	0x1b9e	; 0x1b9e <__fp_inf>

00002038 <__addsf3x>:
    2038:	e9 2f       	mov	r30, r25
    203a:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <__fp_split3>
    203e:	58 f3       	brcs	.-42     	; 0x2016 <__addsf3+0xc>
    2040:	ba 17       	cp	r27, r26
    2042:	62 07       	cpc	r22, r18
    2044:	73 07       	cpc	r23, r19
    2046:	84 07       	cpc	r24, r20
    2048:	95 07       	cpc	r25, r21
    204a:	20 f0       	brcs	.+8      	; 0x2054 <__addsf3x+0x1c>
    204c:	79 f4       	brne	.+30     	; 0x206c <__addsf3x+0x34>
    204e:	a6 f5       	brtc	.+104    	; 0x20b8 <__addsf3x+0x80>
    2050:	0c 94 19 0e 	jmp	0x1c32	; 0x1c32 <__fp_zero>
    2054:	0e f4       	brtc	.+2      	; 0x2058 <__addsf3x+0x20>
    2056:	e0 95       	com	r30
    2058:	0b 2e       	mov	r0, r27
    205a:	ba 2f       	mov	r27, r26
    205c:	a0 2d       	mov	r26, r0
    205e:	0b 01       	movw	r0, r22
    2060:	b9 01       	movw	r22, r18
    2062:	90 01       	movw	r18, r0
    2064:	0c 01       	movw	r0, r24
    2066:	ca 01       	movw	r24, r20
    2068:	a0 01       	movw	r20, r0
    206a:	11 24       	eor	r1, r1
    206c:	ff 27       	eor	r31, r31
    206e:	59 1b       	sub	r21, r25
    2070:	99 f0       	breq	.+38     	; 0x2098 <__addsf3x+0x60>
    2072:	59 3f       	cpi	r21, 0xF9	; 249
    2074:	50 f4       	brcc	.+20     	; 0x208a <__addsf3x+0x52>
    2076:	50 3e       	cpi	r21, 0xE0	; 224
    2078:	68 f1       	brcs	.+90     	; 0x20d4 <__addsf3x+0x9c>
    207a:	1a 16       	cp	r1, r26
    207c:	f0 40       	sbci	r31, 0x00	; 0
    207e:	a2 2f       	mov	r26, r18
    2080:	23 2f       	mov	r18, r19
    2082:	34 2f       	mov	r19, r20
    2084:	44 27       	eor	r20, r20
    2086:	58 5f       	subi	r21, 0xF8	; 248
    2088:	f3 cf       	rjmp	.-26     	; 0x2070 <__addsf3x+0x38>
    208a:	46 95       	lsr	r20
    208c:	37 95       	ror	r19
    208e:	27 95       	ror	r18
    2090:	a7 95       	ror	r26
    2092:	f0 40       	sbci	r31, 0x00	; 0
    2094:	53 95       	inc	r21
    2096:	c9 f7       	brne	.-14     	; 0x208a <__addsf3x+0x52>
    2098:	7e f4       	brtc	.+30     	; 0x20b8 <__addsf3x+0x80>
    209a:	1f 16       	cp	r1, r31
    209c:	ba 0b       	sbc	r27, r26
    209e:	62 0b       	sbc	r22, r18
    20a0:	73 0b       	sbc	r23, r19
    20a2:	84 0b       	sbc	r24, r20
    20a4:	ba f0       	brmi	.+46     	; 0x20d4 <__addsf3x+0x9c>
    20a6:	91 50       	subi	r25, 0x01	; 1
    20a8:	a1 f0       	breq	.+40     	; 0x20d2 <__addsf3x+0x9a>
    20aa:	ff 0f       	add	r31, r31
    20ac:	bb 1f       	adc	r27, r27
    20ae:	66 1f       	adc	r22, r22
    20b0:	77 1f       	adc	r23, r23
    20b2:	88 1f       	adc	r24, r24
    20b4:	c2 f7       	brpl	.-16     	; 0x20a6 <__addsf3x+0x6e>
    20b6:	0e c0       	rjmp	.+28     	; 0x20d4 <__addsf3x+0x9c>
    20b8:	ba 0f       	add	r27, r26
    20ba:	62 1f       	adc	r22, r18
    20bc:	73 1f       	adc	r23, r19
    20be:	84 1f       	adc	r24, r20
    20c0:	48 f4       	brcc	.+18     	; 0x20d4 <__addsf3x+0x9c>
    20c2:	87 95       	ror	r24
    20c4:	77 95       	ror	r23
    20c6:	67 95       	ror	r22
    20c8:	b7 95       	ror	r27
    20ca:	f7 95       	ror	r31
    20cc:	9e 3f       	cpi	r25, 0xFE	; 254
    20ce:	08 f0       	brcs	.+2      	; 0x20d2 <__addsf3x+0x9a>
    20d0:	b0 cf       	rjmp	.-160    	; 0x2032 <__addsf3+0x28>
    20d2:	93 95       	inc	r25
    20d4:	88 0f       	add	r24, r24
    20d6:	08 f0       	brcs	.+2      	; 0x20da <__addsf3x+0xa2>
    20d8:	99 27       	eor	r25, r25
    20da:	ee 0f       	add	r30, r30
    20dc:	97 95       	ror	r25
    20de:	87 95       	ror	r24
    20e0:	08 95       	ret

000020e2 <__fp_mpack>:
    20e2:	9f 3f       	cpi	r25, 0xFF	; 255
    20e4:	31 f0       	breq	.+12     	; 0x20f2 <__fp_mpack_finite+0xc>

000020e6 <__fp_mpack_finite>:
    20e6:	91 50       	subi	r25, 0x01	; 1
    20e8:	20 f4       	brcc	.+8      	; 0x20f2 <__fp_mpack_finite+0xc>
    20ea:	87 95       	ror	r24
    20ec:	77 95       	ror	r23
    20ee:	67 95       	ror	r22
    20f0:	b7 95       	ror	r27
    20f2:	88 0f       	add	r24, r24
    20f4:	91 1d       	adc	r25, r1
    20f6:	96 95       	lsr	r25
    20f8:	87 95       	ror	r24
    20fa:	97 f9       	bld	r25, 7
    20fc:	08 95       	ret

000020fe <__udivmodsi4>:
    20fe:	a1 e2       	ldi	r26, 0x21	; 33
    2100:	1a 2e       	mov	r1, r26
    2102:	aa 1b       	sub	r26, r26
    2104:	bb 1b       	sub	r27, r27
    2106:	fd 01       	movw	r30, r26
    2108:	0d c0       	rjmp	.+26     	; 0x2124 <__udivmodsi4_ep>

0000210a <__udivmodsi4_loop>:
    210a:	aa 1f       	adc	r26, r26
    210c:	bb 1f       	adc	r27, r27
    210e:	ee 1f       	adc	r30, r30
    2110:	ff 1f       	adc	r31, r31
    2112:	a2 17       	cp	r26, r18
    2114:	b3 07       	cpc	r27, r19
    2116:	e4 07       	cpc	r30, r20
    2118:	f5 07       	cpc	r31, r21
    211a:	20 f0       	brcs	.+8      	; 0x2124 <__udivmodsi4_ep>
    211c:	a2 1b       	sub	r26, r18
    211e:	b3 0b       	sbc	r27, r19
    2120:	e4 0b       	sbc	r30, r20
    2122:	f5 0b       	sbc	r31, r21

00002124 <__udivmodsi4_ep>:
    2124:	66 1f       	adc	r22, r22
    2126:	77 1f       	adc	r23, r23
    2128:	88 1f       	adc	r24, r24
    212a:	99 1f       	adc	r25, r25
    212c:	1a 94       	dec	r1
    212e:	69 f7       	brne	.-38     	; 0x210a <__udivmodsi4_loop>
    2130:	60 95       	com	r22
    2132:	70 95       	com	r23
    2134:	80 95       	com	r24
    2136:	90 95       	com	r25
    2138:	9b 01       	movw	r18, r22
    213a:	ac 01       	movw	r20, r24
    213c:	bd 01       	movw	r22, r26
    213e:	cf 01       	movw	r24, r30
    2140:	08 95       	ret

00002142 <__divmodsi4>:
    2142:	05 2e       	mov	r0, r21
    2144:	97 fb       	bst	r25, 7
    2146:	1e f4       	brtc	.+6      	; 0x214e <__divmodsi4+0xc>
    2148:	00 94       	com	r0
    214a:	0e 94 b8 10 	call	0x2170	; 0x2170 <__negsi2>
    214e:	57 fd       	sbrc	r21, 7
    2150:	07 d0       	rcall	.+14     	; 0x2160 <__divmodsi4_neg2>
    2152:	0e 94 7f 10 	call	0x20fe	; 0x20fe <__udivmodsi4>
    2156:	07 fc       	sbrc	r0, 7
    2158:	03 d0       	rcall	.+6      	; 0x2160 <__divmodsi4_neg2>
    215a:	4e f4       	brtc	.+18     	; 0x216e <__divmodsi4_exit>
    215c:	0c 94 b8 10 	jmp	0x2170	; 0x2170 <__negsi2>

00002160 <__divmodsi4_neg2>:
    2160:	50 95       	com	r21
    2162:	40 95       	com	r20
    2164:	30 95       	com	r19
    2166:	21 95       	neg	r18
    2168:	3f 4f       	sbci	r19, 0xFF	; 255
    216a:	4f 4f       	sbci	r20, 0xFF	; 255
    216c:	5f 4f       	sbci	r21, 0xFF	; 255

0000216e <__divmodsi4_exit>:
    216e:	08 95       	ret

00002170 <__negsi2>:
    2170:	90 95       	com	r25
    2172:	80 95       	com	r24
    2174:	70 95       	com	r23
    2176:	61 95       	neg	r22
    2178:	7f 4f       	sbci	r23, 0xFF	; 255
    217a:	8f 4f       	sbci	r24, 0xFF	; 255
    217c:	9f 4f       	sbci	r25, 0xFF	; 255
    217e:	08 95       	ret

00002180 <strcpy>:
    2180:	fb 01       	movw	r30, r22
    2182:	dc 01       	movw	r26, r24
    2184:	01 90       	ld	r0, Z+
    2186:	0d 92       	st	X+, r0
    2188:	00 20       	and	r0, r0
    218a:	e1 f7       	brne	.-8      	; 0x2184 <strcpy+0x4>
    218c:	08 95       	ret

0000218e <__itoa_ncheck>:
    218e:	bb 27       	eor	r27, r27
    2190:	4a 30       	cpi	r20, 0x0A	; 10
    2192:	31 f4       	brne	.+12     	; 0x21a0 <__itoa_ncheck+0x12>
    2194:	99 23       	and	r25, r25
    2196:	22 f4       	brpl	.+8      	; 0x21a0 <__itoa_ncheck+0x12>
    2198:	bd e2       	ldi	r27, 0x2D	; 45
    219a:	90 95       	com	r25
    219c:	81 95       	neg	r24
    219e:	9f 4f       	sbci	r25, 0xFF	; 255
    21a0:	0c 94 d3 10 	jmp	0x21a6	; 0x21a6 <__utoa_common>

000021a4 <__utoa_ncheck>:
    21a4:	bb 27       	eor	r27, r27

000021a6 <__utoa_common>:
    21a6:	fb 01       	movw	r30, r22
    21a8:	55 27       	eor	r21, r21
    21aa:	aa 27       	eor	r26, r26
    21ac:	88 0f       	add	r24, r24
    21ae:	99 1f       	adc	r25, r25
    21b0:	aa 1f       	adc	r26, r26
    21b2:	a4 17       	cp	r26, r20
    21b4:	10 f0       	brcs	.+4      	; 0x21ba <__utoa_common+0x14>
    21b6:	a4 1b       	sub	r26, r20
    21b8:	83 95       	inc	r24
    21ba:	50 51       	subi	r21, 0x10	; 16
    21bc:	b9 f7       	brne	.-18     	; 0x21ac <__utoa_common+0x6>
    21be:	a0 5d       	subi	r26, 0xD0	; 208
    21c0:	aa 33       	cpi	r26, 0x3A	; 58
    21c2:	08 f0       	brcs	.+2      	; 0x21c6 <__utoa_common+0x20>
    21c4:	a9 5d       	subi	r26, 0xD9	; 217
    21c6:	a1 93       	st	Z+, r26
    21c8:	00 97       	sbiw	r24, 0x00	; 0
    21ca:	79 f7       	brne	.-34     	; 0x21aa <__utoa_common+0x4>
    21cc:	b1 11       	cpse	r27, r1
    21ce:	b1 93       	st	Z+, r27
    21d0:	11 92       	st	Z+, r1
    21d2:	cb 01       	movw	r24, r22
    21d4:	0c 94 ec 10 	jmp	0x21d8	; 0x21d8 <strrev>

000021d8 <strrev>:
    21d8:	dc 01       	movw	r26, r24
    21da:	fc 01       	movw	r30, r24
    21dc:	67 2f       	mov	r22, r23
    21de:	71 91       	ld	r23, Z+
    21e0:	77 23       	and	r23, r23
    21e2:	e1 f7       	brne	.-8      	; 0x21dc <strrev+0x4>
    21e4:	32 97       	sbiw	r30, 0x02	; 2
    21e6:	04 c0       	rjmp	.+8      	; 0x21f0 <strrev+0x18>
    21e8:	7c 91       	ld	r23, X
    21ea:	6d 93       	st	X+, r22
    21ec:	70 83       	st	Z, r23
    21ee:	62 91       	ld	r22, -Z
    21f0:	ae 17       	cp	r26, r30
    21f2:	bf 07       	cpc	r27, r31
    21f4:	c8 f3       	brcs	.-14     	; 0x21e8 <strrev+0x10>
    21f6:	08 95       	ret

000021f8 <_exit>:
    21f8:	f8 94       	cli

000021fa <__stop_program>:
    21fa:	ff cf       	rjmp	.-2      	; 0x21fa <__stop_program>
