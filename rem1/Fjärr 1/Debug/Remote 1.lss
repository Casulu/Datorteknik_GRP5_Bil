
Remote 1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ce  00800100  000020c4  00002158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000020c4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001f5  008001ce  008001ce  00002226  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002226  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002258  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000288  00000000  00000000  00002298  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002b48  00000000  00000000  00002520  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001124  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000019e9  00000000  00000000  0000618c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000694  00000000  00000000  00007b78  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a84  00000000  00000000  0000820c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001df6  00000000  00000000  00008c90  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002c8  00000000  00000000  0000aa86  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 0e 03 	jmp	0x61c	; 0x61c <__ctors_end>
       4:	0c 94 ec 08 	jmp	0x11d8	; 0x11d8 <__vector_1>
       8:	0c 94 52 09 	jmp	0x12a4	; 0x12a4 <__vector_2>
       c:	0c 94 2b 03 	jmp	0x656	; 0x656 <__bad_interrupt>
      10:	0c 94 2b 03 	jmp	0x656	; 0x656 <__bad_interrupt>
      14:	0c 94 2b 03 	jmp	0x656	; 0x656 <__bad_interrupt>
      18:	0c 94 2b 03 	jmp	0x656	; 0x656 <__bad_interrupt>
      1c:	0c 94 a5 06 	jmp	0xd4a	; 0xd4a <__vector_7>
      20:	0c 94 2b 03 	jmp	0x656	; 0x656 <__bad_interrupt>
      24:	0c 94 2b 03 	jmp	0x656	; 0x656 <__bad_interrupt>
      28:	0c 94 2b 03 	jmp	0x656	; 0x656 <__bad_interrupt>
      2c:	0c 94 e9 0b 	jmp	0x17d2	; 0x17d2 <__vector_11>
      30:	0c 94 2b 03 	jmp	0x656	; 0x656 <__bad_interrupt>
      34:	0c 94 2b 03 	jmp	0x656	; 0x656 <__bad_interrupt>
      38:	0c 94 2b 03 	jmp	0x656	; 0x656 <__bad_interrupt>
      3c:	0c 94 2b 03 	jmp	0x656	; 0x656 <__bad_interrupt>
      40:	0c 94 2b 03 	jmp	0x656	; 0x656 <__bad_interrupt>
      44:	0c 94 2b 03 	jmp	0x656	; 0x656 <__bad_interrupt>
      48:	0c 94 96 08 	jmp	0x112c	; 0x112c <__vector_18>
      4c:	0c 94 2b 03 	jmp	0x656	; 0x656 <__bad_interrupt>
      50:	0c 94 2b 03 	jmp	0x656	; 0x656 <__bad_interrupt>
      54:	0c 94 2b 03 	jmp	0x656	; 0x656 <__bad_interrupt>
      58:	0c 94 2b 03 	jmp	0x656	; 0x656 <__bad_interrupt>
      5c:	0c 94 2b 03 	jmp	0x656	; 0x656 <__bad_interrupt>
      60:	0c 94 2b 03 	jmp	0x656	; 0x656 <__bad_interrupt>
      64:	0c 94 2b 03 	jmp	0x656	; 0x656 <__bad_interrupt>
      68:	07 63       	ori	r16, 0x37	; 55
      6a:	42 36       	cpi	r20, 0x62	; 98
      6c:	b7 9b       	sbis	0x16, 7	; 22
      6e:	d8 a7       	std	Y+40, r29	; 0x28
      70:	1a 39       	cpi	r17, 0x9A	; 154
      72:	68 56       	subi	r22, 0x68	; 104
      74:	18 ae       	std	Y+56, r1	; 0x38
      76:	ba ab       	std	Y+50, r27	; 0x32
      78:	55 8c       	ldd	r5, Z+29	; 0x1d
      7a:	1d 3c       	cpi	r17, 0xCD	; 205
      7c:	b7 cc       	rjmp	.-1682   	; 0xfffff9ec <__eeprom_end+0xff7ef9ec>
      7e:	57 63       	ori	r21, 0x37	; 55
      80:	bd 6d       	ori	r27, 0xDD	; 221
      82:	ed fd       	.word	0xfded	; ????
      84:	75 3e       	cpi	r23, 0xE5	; 229
      86:	f6 17       	cp	r31, r22
      88:	72 31       	cpi	r23, 0x12	; 18
      8a:	bf 00       	.word	0x00bf	; ????
      8c:	00 00       	nop
      8e:	80 3f       	cpi	r24, 0xF0	; 240
      90:	08 00       	.word	0x0008	; ????
      92:	00 00       	nop
      94:	be 92       	st	-X, r11
      96:	24 49       	sbci	r18, 0x94	; 148
      98:	12 3e       	cpi	r17, 0xE2	; 226
      9a:	ab aa       	std	Y+51, r10	; 0x33
      9c:	aa 2a       	or	r10, r26
      9e:	be cd       	rjmp	.-1156   	; 0xfffffc1c <__eeprom_end+0xff7efc1c>
      a0:	cc cc       	rjmp	.-1640   	; 0xfffffa3a <__eeprom_end+0xff7efa3a>
      a2:	4c 3e       	cpi	r20, 0xEC	; 236
      a4:	00 00       	nop
      a6:	00 80       	ld	r0, Z
      a8:	be ab       	std	Y+54, r27	; 0x36
      aa:	aa aa       	std	Y+50, r10	; 0x32
      ac:	aa 3e       	cpi	r26, 0xEA	; 234
      ae:	00 00       	nop
      b0:	00 00       	nop
      b2:	bf 00       	.word	0x00bf	; ????
      b4:	00 00       	nop
      b6:	80 3f       	cpi	r24, 0xF0	; 240
      b8:	00 00       	nop
      ba:	00 00       	nop
      bc:	00 08       	sbc	r0, r0
      be:	41 78       	andi	r20, 0x81	; 129
      c0:	d3 bb       	out	0x13, r29	; 19
      c2:	43 87       	std	Z+11, r20	; 0x0b
      c4:	d1 13       	cpse	r29, r17
      c6:	3d 19       	sub	r19, r13
      c8:	0e 3c       	cpi	r16, 0xCE	; 206
      ca:	c3 bd       	out	0x23, r28	; 35
      cc:	42 82       	std	Z+2, r4	; 0x02
      ce:	ad 2b       	or	r26, r29
      d0:	3e 68       	ori	r19, 0x8E	; 142
      d2:	ec 82       	std	Y+4, r14	; 0x04
      d4:	76 be       	out	0x36, r7	; 54
      d6:	d9 8f       	std	Y+25, r29	; 0x19
      d8:	e1 a9       	ldd	r30, Z+49	; 0x31
      da:	3e 4c       	sbci	r19, 0xCE	; 206
      dc:	80 ef       	ldi	r24, 0xF0	; 240
      de:	ff be       	out	0x3f, r15	; 63
      e0:	01 c4       	rjmp	.+2050   	; 0x8e4 <fiveinarow_render+0x5a>
      e2:	ff 7f       	andi	r31, 0xFF	; 255
      e4:	3f 00       	.word	0x003f	; ????
      e6:	00 00       	nop
	...

000000ea <__trampolines_end>:
      ea:	0e 11       	cpse	r16, r14
      ec:	11 11       	cpse	r17, r1
      ee:	11 11       	cpse	r17, r1
      f0:	0e 1f       	adc	r16, r30

000000f2 <x_under_char>:
      f2:	11 11 0a 04 0a 11 11 1f                             ........

000000fa <under_char>:
      fa:	00 00 00 00 00 00 00 1f                             ........

00000102 <o_curs_char>:
     102:	0e 15 15 1f 15 15 0e 00                             ........

0000010a <x_curs_char>:
     10a:	11 15 1f 0e 1f 15 11 00                             ........

00000112 <initseq>:
     112:	39 15 55 6e 72 38 0c 01 06                          9.Unr8...

0000011b <melodies>:
     11b:	71 80 71 00 00 00 00 00 00 00 00 00 00 00 00 00     q.q.............
	...
     21b:	63 6c 6f 6c 48 63 6c 6f 6c 48 63 6d 60 6d 6a 60     clolHclolHcm`mj`
     22b:	6a 48 68 00 00 00 00 00 00 00 00 00 00 00 00 00     jHh.............
	...
     31b:	2d 4d 60 68 4d 68 88 8a 4c 85 80 65 4a 68 88 86     -M`hMh..L..eJh..
     32b:	48 81 80 61 63 83 80 63 83 85 66 86 80 66 86 88     H..ac..c..f..f..
     33b:	4a 6c 6d 4f 6f 68 51 6f 8f 8d 4f 6c 68 4d 6c 8c     JlmOohQo..OlhMl.
     34b:	8a 4c 85 80 65 4a 68 88 86 48 61 80 81 4d 6c 8c     .L..eJh..Ha..Ml.
     35b:	8a 68 6c 6d 6f 31 6f 6d 6c 6d 4f 6f 88 80 68 6c     .hlmo1omlmOo..hl
     36b:	6d 6f 2d 6c 6a 68 6a 4c 6c 85 80 65 68 6a 6c 4d     mo-ljhjLl..ehjlM
     37b:	6a 8a 8c 4d 6a 8a 8c 4d 6a 6d 52 72 60 32 71 6f     j..Mj..MjmRr`2qo
     38b:	6d 6f 51 71 8d 80 2d 2f 6d 6c 6a 6c 4d 6d 8a 80     moQq..-/mljlMm..
     39b:	2a 4d 6c 8c 8a 48 61 80 81 28 4a 4c 2d 6d 00 00     *Ml..Ha..(JL-m..
	...
     41b:	4a 4c 4e 4f 51 53 6a 80 8a 4c 6e 80 8e 6f 8f 80     JLNOQSj..Ln..o..
     42b:	4f 40 4a 4c 4e 4f 51 53 6a 80 8a 4c 6e 80 8e 6f     O@JLNOQSj..Ln..o
     43b:	8f 80 4f 40 56 53 76 96 80 76 74 31 54 51 54 36     ..O@VSv..vt1TQT6
     44b:	76 96 80 56 53 76 96 80 76 74 31 4a 4c 4e 2f 4f     v..VSv..vt1JLN/O
	...
     51b:	61 81 80 41 68 88 80 48 6a 8a 80 4a 28 66 86 80     a..Ah..Hj..J(f..
     52b:	46 65 85 80 45 63 83 80 43 21 68 88 80 48 66 86     Fe..Ec..C!h..Hf.
     53b:	80 46 65 85 80 45 23 68 88 80 48 66 86 80 46 65     .Fe..E#h..Hf..Fe
     54b:	85 80 45 23 61 81 80 41 68 88 80 48 6a 8a 80 4a     ..E#a..Ah..Hj..J
     55b:	28 66 86 80 46 65 85 80 45 63 83 80 43 21 00 00     (f..Fe..Ec..C!..
	...

0000061c <__ctors_end>:
     61c:	11 24       	eor	r1, r1
     61e:	1f be       	out	0x3f, r1	; 63
     620:	cf ef       	ldi	r28, 0xFF	; 255
     622:	d8 e0       	ldi	r29, 0x08	; 8
     624:	de bf       	out	0x3e, r29	; 62
     626:	cd bf       	out	0x3d, r28	; 61

00000628 <__do_copy_data>:
     628:	11 e0       	ldi	r17, 0x01	; 1
     62a:	a0 e0       	ldi	r26, 0x00	; 0
     62c:	b1 e0       	ldi	r27, 0x01	; 1
     62e:	e4 ec       	ldi	r30, 0xC4	; 196
     630:	f0 e2       	ldi	r31, 0x20	; 32
     632:	02 c0       	rjmp	.+4      	; 0x638 <__do_copy_data+0x10>
     634:	05 90       	lpm	r0, Z+
     636:	0d 92       	st	X+, r0
     638:	ae 3c       	cpi	r26, 0xCE	; 206
     63a:	b1 07       	cpc	r27, r17
     63c:	d9 f7       	brne	.-10     	; 0x634 <__do_copy_data+0xc>

0000063e <__do_clear_bss>:
     63e:	23 e0       	ldi	r18, 0x03	; 3
     640:	ae ec       	ldi	r26, 0xCE	; 206
     642:	b1 e0       	ldi	r27, 0x01	; 1
     644:	01 c0       	rjmp	.+2      	; 0x648 <.do_clear_bss_start>

00000646 <.do_clear_bss_loop>:
     646:	1d 92       	st	X+, r1

00000648 <.do_clear_bss_start>:
     648:	a3 3c       	cpi	r26, 0xC3	; 195
     64a:	b2 07       	cpc	r27, r18
     64c:	e1 f7       	brne	.-8      	; 0x646 <.do_clear_bss_loop>
     64e:	0e 94 8c 09 	call	0x1318	; 0x1318 <main>
     652:	0c 94 60 10 	jmp	0x20c0	; 0x20c0 <_exit>

00000656 <__bad_interrupt>:
     656:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000065a <fiveinarow_is_char>:
	return false;
}

//Internal helper functions
bool fiveinarow_is_char(uint8_t x, uint8_t y, char c){
	if(x > 14)return false;
     65a:	8f 30       	cpi	r24, 0x0F	; 15
     65c:	68 f4       	brcc	.+26     	; 0x678 <fiveinarow_is_char+0x1e>
	if(y > 14)return false;
     65e:	6f 30       	cpi	r22, 0x0F	; 15
     660:	58 f4       	brcc	.+22     	; 0x678 <fiveinarow_is_char+0x1e>
	if(row_markers[x][y] == c)return true;
     662:	9f e0       	ldi	r25, 0x0F	; 15
     664:	89 9f       	mul	r24, r25
     666:	f0 01       	movw	r30, r0
     668:	11 24       	eor	r1, r1
     66a:	ed 52       	subi	r30, 0x2D	; 45
     66c:	fe 4f       	sbci	r31, 0xFE	; 254
     66e:	e6 0f       	add	r30, r22
     670:	f1 1d       	adc	r31, r1
     672:	90 81       	ld	r25, Z
     674:	81 e0       	ldi	r24, 0x01	; 1
     676:	94 13       	cpse	r25, r20
	return false;
}

//Internal helper functions
bool fiveinarow_is_char(uint8_t x, uint8_t y, char c){
	if(x > 14)return false;
     678:	80 e0       	ldi	r24, 0x00	; 0
	if(y > 14)return false;
	if(row_markers[x][y] == c)return true;
	return false;
     67a:	08 95       	ret

0000067c <fiveinarow_init>:
static const uint8_t under_char[8] PROGMEM = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F};
static const uint8_t x_under_char[8] PROGMEM = {0x11, 0x11, 0x0A, 0x04, 0x0A, 0x11, 0x11, 0x1F};
static const uint8_t o_under_char[8] PROGMEM = {0x0E, 0x11, 0x11, 0x11, 0x11, 0x11, 0x0E, 0x1F};

void fiveinarow_init(){
	set_character_pgm(X_CURS_CODE, x_curs_char);
     67c:	6a e0       	ldi	r22, 0x0A	; 10
     67e:	71 e0       	ldi	r23, 0x01	; 1
     680:	81 e0       	ldi	r24, 0x01	; 1
     682:	0e 94 9f 0a 	call	0x153e	; 0x153e <set_character_pgm>
	set_character_pgm(O_CURS_CODE, o_curs_char);
     686:	62 e0       	ldi	r22, 0x02	; 2
     688:	71 e0       	ldi	r23, 0x01	; 1
     68a:	82 e0       	ldi	r24, 0x02	; 2
     68c:	0e 94 9f 0a 	call	0x153e	; 0x153e <set_character_pgm>
	set_character_pgm(UNDER_CODE, under_char);
     690:	6a ef       	ldi	r22, 0xFA	; 250
     692:	70 e0       	ldi	r23, 0x00	; 0
     694:	83 e0       	ldi	r24, 0x03	; 3
     696:	0e 94 9f 0a 	call	0x153e	; 0x153e <set_character_pgm>
	set_character_pgm(X_UNDER_CODE, x_under_char);
     69a:	62 ef       	ldi	r22, 0xF2	; 242
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	84 e0       	ldi	r24, 0x04	; 4
     6a0:	0e 94 9f 0a 	call	0x153e	; 0x153e <set_character_pgm>
	set_character_pgm(O_UNDER_CODE, o_under_char);
     6a4:	6a ee       	ldi	r22, 0xEA	; 234
     6a6:	70 e0       	ldi	r23, 0x00	; 0
     6a8:	85 e0       	ldi	r24, 0x05	; 5
     6aa:	0c 94 9f 0a 	jmp	0x153e	; 0x153e <set_character_pgm>

000006ae <fiveinarow_setup>:
}

void fiveinarow_setup(bool turn){
	row_cursor_x = 7;
     6ae:	97 e0       	ldi	r25, 0x07	; 7
     6b0:	90 93 d2 01 	sts	0x01D2, r25	; 0x8001d2 <row_cursor_x>
	row_cursor_y = 7;
     6b4:	90 93 d1 01 	sts	0x01D1, r25	; 0x8001d1 <row_cursor_y>
	row_display_pos = 6;
     6b8:	96 e0       	ldi	r25, 0x06	; 6
     6ba:	90 93 ce 01 	sts	0x01CE, r25	; 0x8001ce <__data_end>
	row_turn = turn;
     6be:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     6c2:	20 e0       	ldi	r18, 0x00	; 0
     6c4:	30 e0       	ldi	r19, 0x00	; 0
	
	for(uint8_t q = 0; q < 15; q++){
		for(uint8_t i = 0; i < 15; i++){
			row_markers[i][q] = ' ';
     6c6:	4f e0       	ldi	r20, 0x0F	; 15
     6c8:	50 e2       	ldi	r21, 0x20	; 32
	set_character_pgm(UNDER_CODE, under_char);
	set_character_pgm(X_UNDER_CODE, x_under_char);
	set_character_pgm(O_UNDER_CODE, o_under_char);
}

void fiveinarow_setup(bool turn){
     6ca:	80 e0       	ldi	r24, 0x00	; 0
     6cc:	90 e0       	ldi	r25, 0x00	; 0
	row_display_pos = 6;
	row_turn = turn;
	
	for(uint8_t q = 0; q < 15; q++){
		for(uint8_t i = 0; i < 15; i++){
			row_markers[i][q] = ' ';
     6ce:	48 9f       	mul	r20, r24
     6d0:	f0 01       	movw	r30, r0
     6d2:	49 9f       	mul	r20, r25
     6d4:	f0 0d       	add	r31, r0
     6d6:	11 24       	eor	r1, r1
     6d8:	ed 52       	subi	r30, 0x2D	; 45
     6da:	fe 4f       	sbci	r31, 0xFE	; 254
     6dc:	e2 0f       	add	r30, r18
     6de:	f3 1f       	adc	r31, r19
     6e0:	50 83       	st	Z, r21
     6e2:	01 96       	adiw	r24, 0x01	; 1
	row_cursor_y = 7;
	row_display_pos = 6;
	row_turn = turn;
	
	for(uint8_t q = 0; q < 15; q++){
		for(uint8_t i = 0; i < 15; i++){
     6e4:	8f 30       	cpi	r24, 0x0F	; 15
     6e6:	91 05       	cpc	r25, r1
     6e8:	91 f7       	brne	.-28     	; 0x6ce <fiveinarow_setup+0x20>
     6ea:	2f 5f       	subi	r18, 0xFF	; 255
     6ec:	3f 4f       	sbci	r19, 0xFF	; 255
	row_cursor_x = 7;
	row_cursor_y = 7;
	row_display_pos = 6;
	row_turn = turn;
	
	for(uint8_t q = 0; q < 15; q++){
     6ee:	2f 30       	cpi	r18, 0x0F	; 15
     6f0:	31 05       	cpc	r19, r1
     6f2:	59 f7       	brne	.-42     	; 0x6ca <fiveinarow_setup+0x1c>
     6f4:	08 95       	ret

000006f6 <fiveinarow_left>:
			row_markers[i][q] = ' ';
		}
	}
}
void fiveinarow_left(){
	if(row_cursor_x == 0)row_cursor_x = 1;
     6f6:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <row_cursor_x>
     6fa:	81 11       	cpse	r24, r1
     6fc:	03 c0       	rjmp	.+6      	; 0x704 <fiveinarow_left+0xe>
     6fe:	81 e0       	ldi	r24, 0x01	; 1
     700:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <row_cursor_x>
	row_cursor_x--;
     704:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <row_cursor_x>
     708:	81 50       	subi	r24, 0x01	; 1
     70a:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <row_cursor_x>
     70e:	08 95       	ret

00000710 <fiveinarow_right>:
}
void fiveinarow_right(){
	row_cursor_x++;
     710:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <row_cursor_x>
     714:	8f 5f       	subi	r24, 0xFF	; 255
     716:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <row_cursor_x>
	if(row_cursor_x > 14)row_cursor_x = 14;
     71a:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <row_cursor_x>
     71e:	8f 30       	cpi	r24, 0x0F	; 15
     720:	18 f0       	brcs	.+6      	; 0x728 <fiveinarow_right+0x18>
     722:	8e e0       	ldi	r24, 0x0E	; 14
     724:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <row_cursor_x>
     728:	08 95       	ret

0000072a <fiveinarow_up>:
}
void fiveinarow_up(){
	if(row_cursor_y == 0)row_cursor_y = 1;
     72a:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <row_cursor_y>
     72e:	81 11       	cpse	r24, r1
     730:	03 c0       	rjmp	.+6      	; 0x738 <fiveinarow_up+0xe>
     732:	81 e0       	ldi	r24, 0x01	; 1
     734:	80 93 d1 01 	sts	0x01D1, r24	; 0x8001d1 <row_cursor_y>
	row_cursor_y--;
     738:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <row_cursor_y>
     73c:	81 50       	subi	r24, 0x01	; 1
     73e:	80 93 d1 01 	sts	0x01D1, r24	; 0x8001d1 <row_cursor_y>
	
	if(row_cursor_y < row_display_pos)row_display_pos = row_cursor_y;
     742:	90 91 d1 01 	lds	r25, 0x01D1	; 0x8001d1 <row_cursor_y>
     746:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <__data_end>
     74a:	98 17       	cp	r25, r24
     74c:	20 f4       	brcc	.+8      	; 0x756 <fiveinarow_up+0x2c>
     74e:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <row_cursor_y>
     752:	80 93 ce 01 	sts	0x01CE, r24	; 0x8001ce <__data_end>
     756:	08 95       	ret

00000758 <fiveinarow_down>:
}
void fiveinarow_down(){
	row_cursor_y++;
     758:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <row_cursor_y>
     75c:	8f 5f       	subi	r24, 0xFF	; 255
     75e:	80 93 d1 01 	sts	0x01D1, r24	; 0x8001d1 <row_cursor_y>
	if(row_cursor_y > 14)row_cursor_y = 14;
     762:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <row_cursor_y>
     766:	8f 30       	cpi	r24, 0x0F	; 15
     768:	18 f0       	brcs	.+6      	; 0x770 <fiveinarow_down+0x18>
     76a:	8e e0       	ldi	r24, 0x0E	; 14
     76c:	80 93 d1 01 	sts	0x01D1, r24	; 0x8001d1 <row_cursor_y>
	
	if(row_cursor_y > row_display_pos+2)row_display_pos = row_cursor_y-2;
     770:	20 91 d1 01 	lds	r18, 0x01D1	; 0x8001d1 <row_cursor_y>
     774:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <__data_end>
     778:	30 e0       	ldi	r19, 0x00	; 0
     77a:	90 e0       	ldi	r25, 0x00	; 0
     77c:	02 96       	adiw	r24, 0x02	; 2
     77e:	82 17       	cp	r24, r18
     780:	93 07       	cpc	r25, r19
     782:	2c f4       	brge	.+10     	; 0x78e <fiveinarow_down+0x36>
     784:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <row_cursor_y>
     788:	82 50       	subi	r24, 0x02	; 2
     78a:	80 93 ce 01 	sts	0x01CE, r24	; 0x8001ce <__data_end>
     78e:	08 95       	ret

00000790 <fiveinarow_place>:
}
void fiveinarow_place(char* message, char topic){
     790:	dc 01       	movw	r26, r24
	if(row_turn && row_markers[row_cursor_x][row_cursor_y] == ' '){
     792:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     796:	88 23       	and	r24, r24
     798:	d1 f1       	breq	.+116    	; 0x80e <__DATA_REGION_LENGTH__+0xe>
     79a:	e0 91 d2 01 	lds	r30, 0x01D2	; 0x8001d2 <row_cursor_x>
     79e:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <row_cursor_y>
     7a2:	9f e0       	ldi	r25, 0x0F	; 15
     7a4:	9e 9f       	mul	r25, r30
     7a6:	f0 01       	movw	r30, r0
     7a8:	11 24       	eor	r1, r1
     7aa:	ed 52       	subi	r30, 0x2D	; 45
     7ac:	fe 4f       	sbci	r31, 0xFE	; 254
     7ae:	e8 0f       	add	r30, r24
     7b0:	f1 1d       	adc	r31, r1
     7b2:	80 81       	ld	r24, Z
     7b4:	80 32       	cpi	r24, 0x20	; 32
     7b6:	59 f5       	brne	.+86     	; 0x80e <__DATA_REGION_LENGTH__+0xe>
		row_last_x = row_cursor_x;
     7b8:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <row_cursor_x>
     7bc:	80 93 d0 01 	sts	0x01D0, r24	; 0x8001d0 <row_last_x>
		row_last_y = row_cursor_y;
     7c0:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <row_cursor_y>
     7c4:	80 93 cf 01 	sts	0x01CF, r24	; 0x8001cf <row_last_y>
		row_turn = false;
     7c8:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
		
		row_markers[row_cursor_x][row_cursor_y] = 'X';
     7cc:	e0 91 d2 01 	lds	r30, 0x01D2	; 0x8001d2 <row_cursor_x>
     7d0:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <row_cursor_y>
     7d4:	9e 9f       	mul	r25, r30
     7d6:	f0 01       	movw	r30, r0
     7d8:	11 24       	eor	r1, r1
     7da:	ed 52       	subi	r30, 0x2D	; 45
     7dc:	fe 4f       	sbci	r31, 0xFE	; 254
     7de:	e8 0f       	add	r30, r24
     7e0:	f1 1d       	adc	r31, r1
     7e2:	88 e5       	ldi	r24, 0x58	; 88
     7e4:	80 83       	st	Z, r24
		message[0] = topic;
     7e6:	6c 93       	st	X, r22
		message[1] = '3';
     7e8:	83 e3       	ldi	r24, 0x33	; 51
     7ea:	11 96       	adiw	r26, 0x01	; 1
     7ec:	8c 93       	st	X, r24
     7ee:	11 97       	sbiw	r26, 0x01	; 1
		message[2] = row_cursor_x+48;
     7f0:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <row_cursor_x>
     7f4:	80 5d       	subi	r24, 0xD0	; 208
     7f6:	12 96       	adiw	r26, 0x02	; 2
     7f8:	8c 93       	st	X, r24
     7fa:	12 97       	sbiw	r26, 0x02	; 2
		message[3] = row_cursor_y+48;
     7fc:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <row_cursor_y>
     800:	80 5d       	subi	r24, 0xD0	; 208
     802:	13 96       	adiw	r26, 0x03	; 3
     804:	8c 93       	st	X, r24
     806:	13 97       	sbiw	r26, 0x03	; 3
		message[4] = '\0';
     808:	14 96       	adiw	r26, 0x04	; 4
     80a:	1c 92       	st	X, r1
     80c:	08 95       	ret
	}else{
		message[0] = '\0';
     80e:	1c 92       	st	X, r1
     810:	08 95       	ret

00000812 <fiveinarow_recive>:
	}
	
}

void fiveinarow_recive(char* message){
     812:	fc 01       	movw	r30, r24
	row_turn = true;
     814:	81 e0       	ldi	r24, 0x01	; 1
     816:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>

	row_last_x = message[2]-48;
     81a:	92 81       	ldd	r25, Z+2	; 0x02
     81c:	90 53       	subi	r25, 0x30	; 48
     81e:	90 93 d0 01 	sts	0x01D0, r25	; 0x8001d0 <row_last_x>
	row_last_y = message[3]-48;
     822:	83 81       	ldd	r24, Z+3	; 0x03
     824:	80 53       	subi	r24, 0x30	; 48
     826:	80 93 cf 01 	sts	0x01CF, r24	; 0x8001cf <row_last_y>
	
	row_cursor_x = row_last_x;
     82a:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <row_last_x>
     82e:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <row_cursor_x>
	row_cursor_y = row_last_y;
     832:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <row_last_y>
     836:	80 93 d1 01 	sts	0x01D1, r24	; 0x8001d1 <row_cursor_y>
	
	row_markers[row_last_x][row_last_y] = 'O';
     83a:	e0 91 d0 01 	lds	r30, 0x01D0	; 0x8001d0 <row_last_x>
     83e:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <row_last_y>
     842:	9f e0       	ldi	r25, 0x0F	; 15
     844:	e9 9f       	mul	r30, r25
     846:	f0 01       	movw	r30, r0
     848:	11 24       	eor	r1, r1
     84a:	ed 52       	subi	r30, 0x2D	; 45
     84c:	fe 4f       	sbci	r31, 0xFE	; 254
     84e:	e8 0f       	add	r30, r24
     850:	f1 1d       	adc	r31, r1
     852:	8f e4       	ldi	r24, 0x4F	; 79
     854:	80 83       	st	Z, r24
	if(row_last_y < row_display_pos){
     856:	90 91 cf 01 	lds	r25, 0x01CF	; 0x8001cf <row_last_y>
     85a:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <__data_end>
     85e:	98 17       	cp	r25, r24
     860:	20 f4       	brcc	.+8      	; 0x86a <fiveinarow_recive+0x58>
		row_display_pos = row_last_y;
     862:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <row_last_y>
     866:	80 93 ce 01 	sts	0x01CE, r24	; 0x8001ce <__data_end>
		//if(row_cursor_y < row_display_pos)row_cursor_y = row_display_pos;
	}
	if(row_last_y > row_display_pos+2){
     86a:	20 91 cf 01 	lds	r18, 0x01CF	; 0x8001cf <row_last_y>
     86e:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <__data_end>
     872:	30 e0       	ldi	r19, 0x00	; 0
     874:	90 e0       	ldi	r25, 0x00	; 0
     876:	02 96       	adiw	r24, 0x02	; 2
     878:	82 17       	cp	r24, r18
     87a:	93 07       	cpc	r25, r19
     87c:	2c f4       	brge	.+10     	; 0x888 <fiveinarow_recive+0x76>
		row_display_pos = row_last_y-2;
     87e:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <row_last_y>
     882:	82 50       	subi	r24, 0x02	; 2
     884:	80 93 ce 01 	sts	0x01CE, r24	; 0x8001ce <__data_end>
     888:	08 95       	ret

0000088a <fiveinarow_render>:
		//if(row_cursor_y > row_display_pos+2)row_cursor_y = row_display_pos+2;
	}
}

void fiveinarow_render(char* row_buf){	
     88a:	cf 93       	push	r28
     88c:	df 93       	push	r29
	uint8_t index = 0;
	for(uint8_t q = row_display_pos; q < row_display_pos+3; q++){
     88e:	20 91 ce 01 	lds	r18, 0x01CE	; 0x8001ce <__data_end>
		//if(row_cursor_y > row_display_pos+2)row_cursor_y = row_display_pos+2;
	}
}

void fiveinarow_render(char* row_buf){	
	uint8_t index = 0;
     892:	30 e0       	ldi	r19, 0x00	; 0
			row_buf[index] = q+56;
		}
		index++;
		
		for(uint8_t i = 0; i < 15; i++){
			row_buf[index] = row_markers[i][q];
     894:	bf e0       	ldi	r27, 0x0F	; 15
	}
}

void fiveinarow_render(char* row_buf){	
	uint8_t index = 0;
	for(uint8_t q = row_display_pos; q < row_display_pos+3; q++){
     896:	40 91 ce 01 	lds	r20, 0x01CE	; 0x8001ce <__data_end>
     89a:	62 2f       	mov	r22, r18
     89c:	70 e0       	ldi	r23, 0x00	; 0
     89e:	50 e0       	ldi	r21, 0x00	; 0
     8a0:	4e 5f       	subi	r20, 0xFE	; 254
     8a2:	5f 4f       	sbci	r21, 0xFF	; 255
     8a4:	46 17       	cp	r20, r22
     8a6:	57 07       	cpc	r21, r23
     8a8:	3c f1       	brlt	.+78     	; 0x8f8 <fiveinarow_render+0x6e>
     8aa:	43 2f       	mov	r20, r19
     8ac:	50 e0       	ldi	r21, 0x00	; 0
		if(q < 9){
			row_buf[index] = q+49;
     8ae:	ec 01       	movw	r28, r24
     8b0:	c4 0f       	add	r28, r20
     8b2:	d5 1f       	adc	r29, r21
}

void fiveinarow_render(char* row_buf){	
	uint8_t index = 0;
	for(uint8_t q = row_display_pos; q < row_display_pos+3; q++){
		if(q < 9){
     8b4:	29 30       	cpi	r18, 0x09	; 9
     8b6:	10 f4       	brcc	.+4      	; 0x8bc <fiveinarow_render+0x32>
			row_buf[index] = q+49;
     8b8:	e1 e3       	ldi	r30, 0x31	; 49
     8ba:	01 c0       	rjmp	.+2      	; 0x8be <fiveinarow_render+0x34>
		}else{
			row_buf[index] = q+56;
     8bc:	e8 e3       	ldi	r30, 0x38	; 56
     8be:	e2 0f       	add	r30, r18
     8c0:	e8 83       	st	Y, r30
		}
		index++;
     8c2:	a1 e0       	ldi	r26, 0x01	; 1
     8c4:	a3 0f       	add	r26, r19
     8c6:	40 e0       	ldi	r20, 0x00	; 0
     8c8:	50 e0       	ldi	r21, 0x00	; 0
		
		for(uint8_t i = 0; i < 15; i++){
			row_buf[index] = row_markers[i][q];
     8ca:	b4 9f       	mul	r27, r20
     8cc:	f0 01       	movw	r30, r0
     8ce:	b5 9f       	mul	r27, r21
     8d0:	f0 0d       	add	r31, r0
     8d2:	11 24       	eor	r1, r1
     8d4:	ed 52       	subi	r30, 0x2D	; 45
     8d6:	fe 4f       	sbci	r31, 0xFE	; 254
     8d8:	e6 0f       	add	r30, r22
     8da:	f7 1f       	adc	r31, r23
     8dc:	c0 81       	ld	r28, Z
     8de:	fc 01       	movw	r30, r24
     8e0:	ea 0f       	add	r30, r26
     8e2:	f1 1d       	adc	r31, r1
     8e4:	c0 83       	st	Z, r28
			index++;
     8e6:	af 5f       	subi	r26, 0xFF	; 255
     8e8:	4f 5f       	subi	r20, 0xFF	; 255
     8ea:	5f 4f       	sbci	r21, 0xFF	; 255
		}else{
			row_buf[index] = q+56;
		}
		index++;
		
		for(uint8_t i = 0; i < 15; i++){
     8ec:	4f 30       	cpi	r20, 0x0F	; 15
     8ee:	51 05       	cpc	r21, r1
     8f0:	61 f7       	brne	.-40     	; 0x8ca <fiveinarow_render+0x40>
     8f2:	30 5f       	subi	r19, 0xF0	; 240
	}
}

void fiveinarow_render(char* row_buf){	
	uint8_t index = 0;
	for(uint8_t q = row_display_pos; q < row_display_pos+3; q++){
     8f4:	2f 5f       	subi	r18, 0xFF	; 255
     8f6:	cf cf       	rjmp	.-98     	; 0x896 <fiveinarow_render+0xc>
		for(uint8_t i = 0; i < 15; i++){
			row_buf[index] = row_markers[i][q];
			index++;
		}
	}
	uint8_t cursor_string_pos = ((row_cursor_y-row_display_pos)*16)+row_cursor_x+1;
     8f8:	20 91 d1 01 	lds	r18, 0x01D1	; 0x8001d1 <row_cursor_y>
     8fc:	30 91 ce 01 	lds	r19, 0x01CE	; 0x8001ce <__data_end>
     900:	e0 91 d2 01 	lds	r30, 0x01D2	; 0x8001d2 <row_cursor_x>
     904:	23 1b       	sub	r18, r19
     906:	ef 5f       	subi	r30, 0xFF	; 255
     908:	30 e1       	ldi	r19, 0x10	; 16
     90a:	23 9f       	mul	r18, r19
     90c:	e0 0d       	add	r30, r0
     90e:	11 24       	eor	r1, r1
	if(row_turn){
     910:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     914:	f0 e0       	ldi	r31, 0x00	; 0
		switch(row_buf[cursor_string_pos]){
     916:	e8 0f       	add	r30, r24
     918:	f9 1f       	adc	r31, r25
			row_buf[index] = row_markers[i][q];
			index++;
		}
	}
	uint8_t cursor_string_pos = ((row_cursor_y-row_display_pos)*16)+row_cursor_x+1;
	if(row_turn){
     91a:	22 23       	and	r18, r18
     91c:	59 f0       	breq	.+22     	; 0x934 <__stack+0x35>
		switch(row_buf[cursor_string_pos]){
     91e:	20 81       	ld	r18, Z
     920:	2f 34       	cpi	r18, 0x4F	; 79
     922:	21 f0       	breq	.+8      	; 0x92c <__stack+0x2d>
     924:	28 35       	cpi	r18, 0x58	; 88
     926:	21 f4       	brne	.+8      	; 0x930 <__stack+0x31>
			case 'X':
				row_buf[cursor_string_pos] = X_CURS_CODE;
     928:	21 e0       	ldi	r18, 0x01	; 1
     92a:	0e c0       	rjmp	.+28     	; 0x948 <__stack+0x49>
				break;
			case 'O':
				row_buf[cursor_string_pos] = O_CURS_CODE;
     92c:	22 e0       	ldi	r18, 0x02	; 2
     92e:	0c c0       	rjmp	.+24     	; 0x948 <__stack+0x49>
				break;
			default:
				row_buf[cursor_string_pos] = '*';
     930:	2a e2       	ldi	r18, 0x2A	; 42
     932:	0a c0       	rjmp	.+20     	; 0x948 <__stack+0x49>
				break;
		}	
	} else{
		switch(row_buf[cursor_string_pos]){
     934:	20 81       	ld	r18, Z
     936:	2f 34       	cpi	r18, 0x4F	; 79
     938:	21 f0       	breq	.+8      	; 0x942 <__stack+0x43>
     93a:	28 35       	cpi	r18, 0x58	; 88
     93c:	21 f4       	brne	.+8      	; 0x946 <__stack+0x47>
			case 'X':
				row_buf[cursor_string_pos] = X_UNDER_CODE;
     93e:	24 e0       	ldi	r18, 0x04	; 4
     940:	03 c0       	rjmp	.+6      	; 0x948 <__stack+0x49>
				break;
			case 'O':
				row_buf[cursor_string_pos] = O_UNDER_CODE;
     942:	25 e0       	ldi	r18, 0x05	; 5
     944:	01 c0       	rjmp	.+2      	; 0x948 <__stack+0x49>
				break;
			default:
				row_buf[cursor_string_pos] = UNDER_CODE;
     946:	23 e0       	ldi	r18, 0x03	; 3
     948:	20 83       	st	Z, r18
				break;
		}
	}
	
	row_buf[48] = '\0';
     94a:	fc 01       	movw	r30, r24
     94c:	10 aa       	std	Z+48, r1	; 0x30
}
     94e:	df 91       	pop	r29
     950:	cf 91       	pop	r28
     952:	08 95       	ret

00000954 <fiveinarow_check_win>:

bool fiveinarow_check_win(){
     954:	ff 92       	push	r15
     956:	0f 93       	push	r16
     958:	1f 93       	push	r17
     95a:	cf 93       	push	r28
     95c:	df 93       	push	r29
	char last_player = row_markers[row_last_x][row_last_y];
     95e:	e0 91 d0 01 	lds	r30, 0x01D0	; 0x8001d0 <row_last_x>
     962:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <row_last_y>
     966:	9f e0       	ldi	r25, 0x0F	; 15
     968:	e9 9f       	mul	r30, r25
     96a:	f0 01       	movw	r30, r0
     96c:	11 24       	eor	r1, r1
     96e:	ed 52       	subi	r30, 0x2D	; 45
     970:	fe 4f       	sbci	r31, 0xFE	; 254
     972:	e8 0f       	add	r30, r24
     974:	f1 1d       	adc	r31, r1
     976:	c0 81       	ld	r28, Z
	uint8_t test_x;
	uint8_t test_y;
	
	//Horizontal
	row_lenght = 1;
	test_x = row_last_x;
     978:	10 91 d0 01 	lds	r17, 0x01D0	; 0x8001d0 <row_last_x>
	test_y = row_last_y;
     97c:	00 91 cf 01 	lds	r16, 0x01CF	; 0x8001cf <row_last_y>
	uint8_t row_lenght;
	uint8_t test_x;
	uint8_t test_y;
	
	//Horizontal
	row_lenght = 1;
     980:	d1 e0       	ldi	r29, 0x01	; 1
	test_x = row_last_x;
	test_y = row_last_y;
	while(fiveinarow_is_char(--test_x, test_y, last_player))row_lenght++;
     982:	4c 2f       	mov	r20, r28
     984:	60 2f       	mov	r22, r16
     986:	81 2f       	mov	r24, r17
     988:	8d 1b       	sub	r24, r29
     98a:	0e 94 2d 03 	call	0x65a	; 0x65a <fiveinarow_is_char>
     98e:	88 23       	and	r24, r24
     990:	11 f0       	breq	.+4      	; 0x996 <fiveinarow_check_win+0x42>
     992:	df 5f       	subi	r29, 0xFF	; 255
     994:	f6 cf       	rjmp	.-20     	; 0x982 <fiveinarow_check_win+0x2e>
	test_x = row_last_x;	
     996:	10 91 d0 01 	lds	r17, 0x01D0	; 0x8001d0 <row_last_x>
     99a:	d1 1b       	sub	r29, r17
     99c:	fd 2e       	mov	r15, r29
     99e:	f1 0e       	add	r15, r17
	while(fiveinarow_is_char(++test_x, test_y, last_player))row_lenght++;
     9a0:	1f 5f       	subi	r17, 0xFF	; 255
     9a2:	4c 2f       	mov	r20, r28
     9a4:	60 2f       	mov	r22, r16
     9a6:	81 2f       	mov	r24, r17
     9a8:	0e 94 2d 03 	call	0x65a	; 0x65a <fiveinarow_is_char>
     9ac:	81 11       	cpse	r24, r1
     9ae:	f6 cf       	rjmp	.-20     	; 0x99c <fiveinarow_check_win+0x48>
	if(row_lenght >= 5)return true;
     9b0:	84 e0       	ldi	r24, 0x04	; 4
     9b2:	8f 15       	cp	r24, r15
     9b4:	10 f4       	brcc	.+4      	; 0x9ba <fiveinarow_check_win+0x66>
     9b6:	81 e0       	ldi	r24, 0x01	; 1
     9b8:	69 c0       	rjmp	.+210    	; 0xa8c <fiveinarow_check_win+0x138>
	
	//Vertical
	row_lenght = 1;
	test_x = row_last_x;
     9ba:	00 91 d0 01 	lds	r16, 0x01D0	; 0x8001d0 <row_last_x>
	test_y = row_last_y;
     9be:	10 91 cf 01 	lds	r17, 0x01CF	; 0x8001cf <row_last_y>
	test_x = row_last_x;	
	while(fiveinarow_is_char(++test_x, test_y, last_player))row_lenght++;
	if(row_lenght >= 5)return true;
	
	//Vertical
	row_lenght = 1;
     9c2:	d1 e0       	ldi	r29, 0x01	; 1
	test_x = row_last_x;
	test_y = row_last_y;
	while(fiveinarow_is_char(test_x, --test_y, last_player))row_lenght++;
     9c4:	4c 2f       	mov	r20, r28
     9c6:	61 2f       	mov	r22, r17
     9c8:	6d 1b       	sub	r22, r29
     9ca:	80 2f       	mov	r24, r16
     9cc:	0e 94 2d 03 	call	0x65a	; 0x65a <fiveinarow_is_char>
     9d0:	88 23       	and	r24, r24
     9d2:	11 f0       	breq	.+4      	; 0x9d8 <fiveinarow_check_win+0x84>
     9d4:	df 5f       	subi	r29, 0xFF	; 255
     9d6:	f6 cf       	rjmp	.-20     	; 0x9c4 <fiveinarow_check_win+0x70>
	test_y = row_last_y;
     9d8:	10 91 cf 01 	lds	r17, 0x01CF	; 0x8001cf <row_last_y>
     9dc:	d1 1b       	sub	r29, r17
     9de:	fd 2e       	mov	r15, r29
     9e0:	f1 0e       	add	r15, r17
	while(fiveinarow_is_char(test_x, ++test_y, last_player))row_lenght++;
     9e2:	1f 5f       	subi	r17, 0xFF	; 255
     9e4:	4c 2f       	mov	r20, r28
     9e6:	61 2f       	mov	r22, r17
     9e8:	80 2f       	mov	r24, r16
     9ea:	0e 94 2d 03 	call	0x65a	; 0x65a <fiveinarow_is_char>
     9ee:	81 11       	cpse	r24, r1
     9f0:	f6 cf       	rjmp	.-20     	; 0x9de <fiveinarow_check_win+0x8a>
	if(row_lenght >= 5)return true;
     9f2:	94 e0       	ldi	r25, 0x04	; 4
     9f4:	9f 15       	cp	r25, r15
     9f6:	f8 f2       	brcs	.-66     	; 0x9b6 <fiveinarow_check_win+0x62>
	
	//Diagonal forward
	row_lenght = 1;
	test_x = row_last_x;
     9f8:	d0 91 d0 01 	lds	r29, 0x01D0	; 0x8001d0 <row_last_x>
	test_y = row_last_y;
     9fc:	00 91 cf 01 	lds	r16, 0x01CF	; 0x8001cf <row_last_y>
	test_y = row_last_y;
	while(fiveinarow_is_char(test_x, ++test_y, last_player))row_lenght++;
	if(row_lenght >= 5)return true;
	
	//Diagonal forward
	row_lenght = 1;
     a00:	11 e0       	ldi	r17, 0x01	; 1
	test_x = row_last_x;
	test_y = row_last_y;
	while(fiveinarow_is_char(--test_x, --test_y, last_player))row_lenght++;
     a02:	4c 2f       	mov	r20, r28
     a04:	60 2f       	mov	r22, r16
     a06:	61 1b       	sub	r22, r17
     a08:	8d 2f       	mov	r24, r29
     a0a:	81 1b       	sub	r24, r17
     a0c:	0e 94 2d 03 	call	0x65a	; 0x65a <fiveinarow_is_char>
     a10:	88 23       	and	r24, r24
     a12:	11 f0       	breq	.+4      	; 0xa18 <fiveinarow_check_win+0xc4>
     a14:	1f 5f       	subi	r17, 0xFF	; 255
     a16:	f5 cf       	rjmp	.-22     	; 0xa02 <fiveinarow_check_win+0xae>
	test_x = row_last_x;
     a18:	00 91 d0 01 	lds	r16, 0x01D0	; 0x8001d0 <row_last_x>
	test_y = row_last_y;
     a1c:	d0 91 cf 01 	lds	r29, 0x01CF	; 0x8001cf <row_last_y>
     a20:	1d 1b       	sub	r17, r29
	while(fiveinarow_is_char(++test_x, ++test_y, last_player))row_lenght++;
     a22:	0d 1b       	sub	r16, r29
     a24:	f1 2e       	mov	r15, r17
     a26:	fd 0e       	add	r15, r29
     a28:	df 5f       	subi	r29, 0xFF	; 255
     a2a:	4c 2f       	mov	r20, r28
     a2c:	6d 2f       	mov	r22, r29
     a2e:	80 2f       	mov	r24, r16
     a30:	8d 0f       	add	r24, r29
     a32:	0e 94 2d 03 	call	0x65a	; 0x65a <fiveinarow_is_char>
     a36:	81 11       	cpse	r24, r1
     a38:	f5 cf       	rjmp	.-22     	; 0xa24 <fiveinarow_check_win+0xd0>
	if(row_lenght >= 5)return true;
     a3a:	84 e0       	ldi	r24, 0x04	; 4
     a3c:	8f 15       	cp	r24, r15
     a3e:	08 f4       	brcc	.+2      	; 0xa42 <fiveinarow_check_win+0xee>
     a40:	ba cf       	rjmp	.-140    	; 0x9b6 <fiveinarow_check_win+0x62>
	
	//Diagonal backwards
	row_lenght = 1;
	test_x = row_last_x;
     a42:	d0 91 d0 01 	lds	r29, 0x01D0	; 0x8001d0 <row_last_x>
	test_y = row_last_y;
     a46:	00 91 cf 01 	lds	r16, 0x01CF	; 0x8001cf <row_last_y>
	test_y = row_last_y;
	while(fiveinarow_is_char(++test_x, ++test_y, last_player))row_lenght++;
	if(row_lenght >= 5)return true;
	
	//Diagonal backwards
	row_lenght = 1;
     a4a:	11 e0       	ldi	r17, 0x01	; 1
	test_x = row_last_x;
	test_y = row_last_y;
	while(fiveinarow_is_char(--test_x, ++test_y, last_player))row_lenght++;
     a4c:	4c 2f       	mov	r20, r28
     a4e:	61 2f       	mov	r22, r17
     a50:	60 0f       	add	r22, r16
     a52:	8d 2f       	mov	r24, r29
     a54:	81 1b       	sub	r24, r17
     a56:	0e 94 2d 03 	call	0x65a	; 0x65a <fiveinarow_is_char>
     a5a:	88 23       	and	r24, r24
     a5c:	11 f0       	breq	.+4      	; 0xa62 <fiveinarow_check_win+0x10e>
     a5e:	1f 5f       	subi	r17, 0xFF	; 255
     a60:	f5 cf       	rjmp	.-22     	; 0xa4c <fiveinarow_check_win+0xf8>
	test_x = row_last_x;
     a62:	d0 91 d0 01 	lds	r29, 0x01D0	; 0x8001d0 <row_last_x>
	test_y = row_last_y;
     a66:	00 91 cf 01 	lds	r16, 0x01CF	; 0x8001cf <row_last_y>
     a6a:	1d 1b       	sub	r17, r29
     a6c:	f1 2e       	mov	r15, r17
     a6e:	fd 0e       	add	r15, r29
	while(fiveinarow_is_char(++test_x, --test_y, last_player))row_lenght++;
     a70:	01 50       	subi	r16, 0x01	; 1
     a72:	df 5f       	subi	r29, 0xFF	; 255
     a74:	4c 2f       	mov	r20, r28
     a76:	60 2f       	mov	r22, r16
     a78:	8d 2f       	mov	r24, r29
     a7a:	0e 94 2d 03 	call	0x65a	; 0x65a <fiveinarow_is_char>
     a7e:	81 11       	cpse	r24, r1
     a80:	f5 cf       	rjmp	.-22     	; 0xa6c <fiveinarow_check_win+0x118>
	if(row_lenght >= 5)return true;
     a82:	81 e0       	ldi	r24, 0x01	; 1
     a84:	94 e0       	ldi	r25, 0x04	; 4
     a86:	9f 15       	cp	r25, r15
     a88:	08 f0       	brcs	.+2      	; 0xa8c <fiveinarow_check_win+0x138>
     a8a:	80 e0       	ldi	r24, 0x00	; 0
	
	return false;
}
     a8c:	df 91       	pop	r29
     a8e:	cf 91       	pop	r28
     a90:	1f 91       	pop	r17
     a92:	0f 91       	pop	r16
     a94:	ff 90       	pop	r15
     a96:	08 95       	ret

00000a98 <enter_main_mode>:
	}
	_delay_ms(50);
}

void enter_main_mode(char* message){
	program_mode = MAIN_MODE;
     a98:	10 92 ba 02 	sts	0x02BA, r1	; 0x8002ba <program_mode>
	game_prompted = false;
     a9c:	10 92 b9 02 	sts	0x02B9, r1	; 0x8002b9 <game_prompted>
	redraw = true;
     aa0:	21 e0       	ldi	r18, 0x01	; 1
     aa2:	20 93 01 01 	sts	0x0101, r18	; 0x800101 <redraw>
	request_sent = false;
     aa6:	10 92 b8 02 	sts	0x02B8, r1	; 0x8002b8 <request_sent>
	messages_force(message);
     aaa:	0c 94 ef 0a 	jmp	0x15de	; 0x15de <messages_force>

00000aae <do_fir_actions>:
				break;
		}
	}
}

void do_fir_actions(){
     aae:	0f 93       	push	r16
     ab0:	1f 93       	push	r17
     ab2:	cf 93       	push	r28
     ab4:	df 93       	push	r29
	if(game_over !=  0){
     ab6:	80 91 b4 02 	lds	r24, 0x02B4	; 0x8002b4 <game_over>
     aba:	88 23       	and	r24, r24
     abc:	a9 f0       	breq	.+42     	; 0xae8 <do_fir_actions+0x3a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     abe:	2f ef       	ldi	r18, 0xFF	; 255
     ac0:	89 e6       	ldi	r24, 0x69	; 105
     ac2:	98 e1       	ldi	r25, 0x18	; 24
     ac4:	21 50       	subi	r18, 0x01	; 1
     ac6:	80 40       	sbci	r24, 0x00	; 0
     ac8:	90 40       	sbci	r25, 0x00	; 0
     aca:	e1 f7       	brne	.-8      	; 0xac4 <do_fir_actions+0x16>
     acc:	00 c0       	rjmp	.+0      	; 0xace <do_fir_actions+0x20>
     ace:	00 00       	nop
		_delay_ms(1000);
		enter_main_mode(game_over == 1 ? "You won!" : "You lost!");
     ad0:	80 91 b4 02 	lds	r24, 0x02B4	; 0x8002b4 <game_over>
     ad4:	81 30       	cpi	r24, 0x01	; 1
     ad6:	19 f0       	breq	.+6      	; 0xade <do_fir_actions+0x30>
     ad8:	82 e2       	ldi	r24, 0x22	; 34
     ada:	91 e0       	ldi	r25, 0x01	; 1
     adc:	02 c0       	rjmp	.+4      	; 0xae2 <do_fir_actions+0x34>
     ade:	89 e1       	ldi	r24, 0x19	; 25
     ae0:	91 e0       	ldi	r25, 0x01	; 1
     ae2:	0e 94 4c 05 	call	0xa98	; 0xa98 <enter_main_mode>
     ae6:	7d c0       	rjmp	.+250    	; 0xbe2 <do_fir_actions+0x134>
	} else{
		if(DEADMAN_PRESSED){
     ae8:	4c 99       	sbic	0x09, 4	; 9
     aea:	17 c0       	rjmp	.+46     	; 0xb1a <do_fir_actions+0x6c>
			fiveinarow_place(placebuf, '3');
     aec:	63 e3       	ldi	r22, 0x33	; 51
     aee:	89 e8       	ldi	r24, 0x89	; 137
     af0:	93 e0       	ldi	r25, 0x03	; 3
     af2:	0e 94 c8 03 	call	0x790	; 0x790 <fiveinarow_place>
			if(placebuf[0] != '\0'){
     af6:	80 91 89 03 	lds	r24, 0x0389	; 0x800389 <placebuf>
     afa:	88 23       	and	r24, r24
     afc:	71 f0       	breq	.+28     	; 0xb1a <do_fir_actions+0x6c>
				if(fiveinarow_check_win()){
     afe:	0e 94 aa 04 	call	0x954	; 0x954 <fiveinarow_check_win>
     b02:	88 23       	and	r24, r24
     b04:	19 f0       	breq	.+6      	; 0xb0c <do_fir_actions+0x5e>
					game_over = 1;
     b06:	81 e0       	ldi	r24, 0x01	; 1
     b08:	80 93 b4 02 	sts	0x02B4, r24	; 0x8002b4 <game_over>
				}
				uart_send_line(placebuf);
     b0c:	89 e8       	ldi	r24, 0x89	; 137
     b0e:	93 e0       	ldi	r25, 0x03	; 3
     b10:	0e 94 b8 09 	call	0x1370	; 0x1370 <uart_send_line>
				redraw = true;
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <redraw>
			}
		}
		
		uint16_t x = read_avg_adc(1, 20);
     b1a:	64 e1       	ldi	r22, 0x14	; 20
     b1c:	70 e0       	ldi	r23, 0x00	; 0
     b1e:	81 e0       	ldi	r24, 0x01	; 1
     b20:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <read_avg_adc>
     b24:	8c 01       	movw	r16, r24
		uint16_t y = read_avg_adc(2, 20);
     b26:	64 e1       	ldi	r22, 0x14	; 20
     b28:	70 e0       	ldi	r23, 0x00	; 0
     b2a:	82 e0       	ldi	r24, 0x02	; 2
     b2c:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <read_avg_adc>
     b30:	ec 01       	movw	r28, r24
		
		if(read_avg_adc(0, 5) > z_rest-5) controller_rested = true;
     b32:	65 e0       	ldi	r22, 0x05	; 5
     b34:	70 e0       	ldi	r23, 0x00	; 0
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <read_avg_adc>
     b3c:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <z_rest>
     b40:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <z_rest+0x1>
     b44:	25 50       	subi	r18, 0x05	; 5
     b46:	31 09       	sbc	r19, r1
     b48:	28 17       	cp	r18, r24
     b4a:	39 07       	cpc	r19, r25
     b4c:	18 f4       	brcc	.+6      	; 0xb54 <do_fir_actions+0xa6>
     b4e:	81 e0       	ldi	r24, 0x01	; 1
     b50:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <controller_rested>
		
		if(controller_rested){
     b54:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <controller_rested>
     b58:	88 23       	and	r24, r24
     b5a:	a1 f1       	breq	.+104    	; 0xbc4 <do_fir_actions+0x116>
			if(x > x_rest+40){
     b5c:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <x_rest>
     b60:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <x_rest+0x1>
     b64:	88 96       	adiw	r24, 0x28	; 40
     b66:	80 17       	cp	r24, r16
     b68:	91 07       	cpc	r25, r17
     b6a:	18 f4       	brcc	.+6      	; 0xb72 <do_fir_actions+0xc4>
				fiveinarow_down();
     b6c:	0e 94 ac 03 	call	0x758	; 0x758 <fiveinarow_down>
     b70:	0a c0       	rjmp	.+20     	; 0xb86 <do_fir_actions+0xd8>
				redraw = true;
				controller_rested = false;
			}
			else if(x < x_rest-45){
     b72:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <x_rest>
     b76:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <x_rest+0x1>
     b7a:	8d 97       	sbiw	r24, 0x2d	; 45
     b7c:	08 17       	cp	r16, r24
     b7e:	19 07       	cpc	r17, r25
     b80:	38 f4       	brcc	.+14     	; 0xb90 <do_fir_actions+0xe2>
				fiveinarow_up();
     b82:	0e 94 95 03 	call	0x72a	; 0x72a <fiveinarow_up>
				redraw = true;
     b86:	81 e0       	ldi	r24, 0x01	; 1
     b88:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <redraw>
				controller_rested = false;
     b8c:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <controller_rested>
			}
			if(y > y_rest+25){
     b90:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <y_rest>
     b94:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <y_rest+0x1>
     b98:	49 96       	adiw	r24, 0x19	; 25
     b9a:	8c 17       	cp	r24, r28
     b9c:	9d 07       	cpc	r25, r29
     b9e:	18 f4       	brcc	.+6      	; 0xba6 <do_fir_actions+0xf8>
				fiveinarow_left();
     ba0:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <fiveinarow_left>
     ba4:	0a c0       	rjmp	.+20     	; 0xbba <do_fir_actions+0x10c>
				redraw = true;
				controller_rested = false;
			}
			else if(y < y_rest-25){
     ba6:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <y_rest>
     baa:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <y_rest+0x1>
     bae:	49 97       	sbiw	r24, 0x19	; 25
     bb0:	c8 17       	cp	r28, r24
     bb2:	d9 07       	cpc	r29, r25
     bb4:	38 f4       	brcc	.+14     	; 0xbc4 <do_fir_actions+0x116>
				fiveinarow_right();
     bb6:	0e 94 88 03 	call	0x710	; 0x710 <fiveinarow_right>
				redraw = true;
     bba:	81 e0       	ldi	r24, 0x01	; 1
     bbc:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <redraw>
				controller_rested = false;
     bc0:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <controller_rested>
			}
			
		}
		if(redraw){
     bc4:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <redraw>
     bc8:	88 23       	and	r24, r24
     bca:	59 f0       	breq	.+22     	; 0xbe2 <do_fir_actions+0x134>
			fiveinarow_render(row_buf);
     bcc:	88 e5       	ldi	r24, 0x58	; 88
     bce:	93 e0       	ldi	r25, 0x03	; 3
     bd0:	0e 94 45 04 	call	0x88a	; 0x88a <fiveinarow_render>
			//Draw field
			set_cursor_pos(0);
     bd4:	80 e0       	ldi	r24, 0x00	; 0
     bd6:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <set_cursor_pos>
			write_lcd_string(row_buf);
     bda:	88 e5       	ldi	r24, 0x58	; 88
     bdc:	93 e0       	ldi	r25, 0x03	; 3
     bde:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <write_lcd_string>
     be2:	2f e7       	ldi	r18, 0x7F	; 127
     be4:	88 e3       	ldi	r24, 0x38	; 56
     be6:	91 e0       	ldi	r25, 0x01	; 1
     be8:	21 50       	subi	r18, 0x01	; 1
     bea:	80 40       	sbci	r24, 0x00	; 0
     bec:	90 40       	sbci	r25, 0x00	; 0
     bee:	e1 f7       	brne	.-8      	; 0xbe8 <do_fir_actions+0x13a>
     bf0:	00 c0       	rjmp	.+0      	; 0xbf2 <do_fir_actions+0x144>
     bf2:	00 00       	nop
		}	
	}
	_delay_ms(50);
}
     bf4:	df 91       	pop	r29
     bf6:	cf 91       	pop	r28
     bf8:	1f 91       	pop	r17
     bfa:	0f 91       	pop	r16
     bfc:	08 95       	ret

00000bfe <enter_fir_mode>:
	request_sent = false;
	messages_force(message);
}

void enter_fir_mode(){
	program_mode = FIR_MODE;
     bfe:	81 e0       	ldi	r24, 0x01	; 1
     c00:	80 93 ba 02 	sts	0x02BA, r24	; 0x8002ba <program_mode>
	game_over = 0;
     c04:	10 92 b4 02 	sts	0x02B4, r1	; 0x8002b4 <game_over>
	redraw = true;
     c08:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <redraw>
	if(LED_PORT & (1<<LEDG)){
     c0c:	5d 9b       	sbis	0x0b, 5	; 11
     c0e:	05 c0       	rjmp	.+10     	; 0xc1a <enter_fir_mode+0x1c>
		uart_send_line("040");
     c10:	8c e2       	ldi	r24, 0x2C	; 44
     c12:	91 e0       	ldi	r25, 0x01	; 1
     c14:	0e 94 b8 09 	call	0x1370	; 0x1370 <uart_send_line>
		LED_PORT &= ~(1<<LEDG);
     c18:	5d 98       	cbi	0x0b, 5	; 11
     c1a:	08 95       	ret

00000c1c <send_move_command>:
		}
	}
	_delay_ms(50);
}

void send_move_command(){
     c1c:	0f 93       	push	r16
     c1e:	1f 93       	push	r17
     c20:	cf 93       	push	r28
     c22:	df 93       	push	r29
	if(command_hundreths == CMD_DELAY){
     c24:	80 91 c1 02 	lds	r24, 0x02C1	; 0x8002c1 <command_hundreths>
     c28:	84 31       	cpi	r24, 0x14	; 20
     c2a:	09 f0       	breq	.+2      	; 0xc2e <send_move_command+0x12>
     c2c:	7b c0       	rjmp	.+246    	; 0xd24 <send_move_command+0x108>
		command_hundreths = 0;
     c2e:	10 92 c1 02 	sts	0x02C1, r1	; 0x8002c1 <command_hundreths>
		int16_t adjusted_x = x_rest - read_avg_adc(1, 25);
     c32:	c0 91 16 01 	lds	r28, 0x0116	; 0x800116 <x_rest>
     c36:	d0 91 17 01 	lds	r29, 0x0117	; 0x800117 <x_rest+0x1>
     c3a:	69 e1       	ldi	r22, 0x19	; 25
     c3c:	70 e0       	ldi	r23, 0x00	; 0
     c3e:	81 e0       	ldi	r24, 0x01	; 1
     c40:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <read_avg_adc>
     c44:	c8 1b       	sub	r28, r24
     c46:	d9 0b       	sbc	r29, r25
		int16_t adjusted_y = y_rest - read_avg_adc(2, 25);
     c48:	00 91 14 01 	lds	r16, 0x0114	; 0x800114 <y_rest>
     c4c:	10 91 15 01 	lds	r17, 0x0115	; 0x800115 <y_rest+0x1>
     c50:	69 e1       	ldi	r22, 0x19	; 25
     c52:	70 e0       	ldi	r23, 0x00	; 0
     c54:	82 e0       	ldi	r24, 0x02	; 2
     c56:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <read_avg_adc>
     c5a:	98 01       	movw	r18, r16
     c5c:	28 1b       	sub	r18, r24
     c5e:	39 0b       	sbc	r19, r25
		int16_t left = adjusted_x+adjusted_y;
     c60:	8e 01       	movw	r16, r28
     c62:	02 0f       	add	r16, r18
     c64:	13 1f       	adc	r17, r19
		int16_t right = adjusted_x-adjusted_y;
     c66:	c2 1b       	sub	r28, r18
     c68:	d3 0b       	sbc	r29, r19
		/*Keep values within bounds*/
		if(left > 127){
     c6a:	00 38       	cpi	r16, 0x80	; 128
     c6c:	11 05       	cpc	r17, r1
     c6e:	5c f4       	brge	.+22     	; 0xc86 <send_move_command+0x6a>
			left = 127;
		}
		else if(left < -127){
     c70:	01 38       	cpi	r16, 0x81	; 129
     c72:	3f ef       	ldi	r19, 0xFF	; 255
     c74:	13 07       	cpc	r17, r19
     c76:	54 f0       	brlt	.+20     	; 0xc8c <send_move_command+0x70>
			left = -127;
		} else if(left > -5 && left < 5) left = 0;
     c78:	c8 01       	movw	r24, r16
     c7a:	04 96       	adiw	r24, 0x04	; 4
     c7c:	09 97       	sbiw	r24, 0x09	; 9
     c7e:	40 f4       	brcc	.+16     	; 0xc90 <send_move_command+0x74>
     c80:	00 e0       	ldi	r16, 0x00	; 0
     c82:	10 e0       	ldi	r17, 0x00	; 0
     c84:	05 c0       	rjmp	.+10     	; 0xc90 <send_move_command+0x74>
		int16_t adjusted_y = y_rest - read_avg_adc(2, 25);
		int16_t left = adjusted_x+adjusted_y;
		int16_t right = adjusted_x-adjusted_y;
		/*Keep values within bounds*/
		if(left > 127){
			left = 127;
     c86:	0f e7       	ldi	r16, 0x7F	; 127
     c88:	10 e0       	ldi	r17, 0x00	; 0
     c8a:	02 c0       	rjmp	.+4      	; 0xc90 <send_move_command+0x74>
		}
		else if(left < -127){
			left = -127;
     c8c:	01 e8       	ldi	r16, 0x81	; 129
     c8e:	1f ef       	ldi	r17, 0xFF	; 255
		} else if(left > -5 && left < 5) left = 0;
		
		if(right > 127) {
     c90:	c0 38       	cpi	r28, 0x80	; 128
     c92:	d1 05       	cpc	r29, r1
     c94:	5c f4       	brge	.+22     	; 0xcac <send_move_command+0x90>
			right = 127;
		}
		else if(right < -127){
     c96:	c1 38       	cpi	r28, 0x81	; 129
     c98:	8f ef       	ldi	r24, 0xFF	; 255
     c9a:	d8 07       	cpc	r29, r24
     c9c:	54 f0       	brlt	.+20     	; 0xcb2 <send_move_command+0x96>
			right = -127;
		} else if(right > -5 && right < 5) right = 0;
     c9e:	ce 01       	movw	r24, r28
     ca0:	04 96       	adiw	r24, 0x04	; 4
     ca2:	09 97       	sbiw	r24, 0x09	; 9
     ca4:	40 f4       	brcc	.+16     	; 0xcb6 <send_move_command+0x9a>
     ca6:	c0 e0       	ldi	r28, 0x00	; 0
     ca8:	d0 e0       	ldi	r29, 0x00	; 0
     caa:	05 c0       	rjmp	.+10     	; 0xcb6 <send_move_command+0x9a>
		else if(left < -127){
			left = -127;
		} else if(left > -5 && left < 5) left = 0;
		
		if(right > 127) {
			right = 127;
     cac:	cf e7       	ldi	r28, 0x7F	; 127
     cae:	d0 e0       	ldi	r29, 0x00	; 0
     cb0:	02 c0       	rjmp	.+4      	; 0xcb6 <send_move_command+0x9a>
		}
		else if(right < -127){
			right = -127;
     cb2:	c1 e8       	ldi	r28, 0x81	; 129
     cb4:	df ef       	ldi	r29, 0xFF	; 255
		} else if(right > -5 && right < 5) right = 0;
		
		/*Ignore duplicate values*/
		if(left != last_left || right != last_right){
     cb6:	80 91 bd 02 	lds	r24, 0x02BD	; 0x8002bd <last_left>
     cba:	90 91 be 02 	lds	r25, 0x02BE	; 0x8002be <last_left+0x1>
     cbe:	80 17       	cp	r24, r16
     cc0:	91 07       	cpc	r25, r17
     cc2:	39 f4       	brne	.+14     	; 0xcd2 <send_move_command+0xb6>
     cc4:	80 91 bb 02 	lds	r24, 0x02BB	; 0x8002bb <last_right>
     cc8:	90 91 bc 02 	lds	r25, 0x02BC	; 0x8002bc <last_right+0x1>
     ccc:	8c 17       	cp	r24, r28
     cce:	9d 07       	cpc	r25, r29
     cd0:	09 f1       	breq	.+66     	; 0xd14 <send_move_command+0xf8>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     cd2:	4a e0       	ldi	r20, 0x0A	; 10
     cd4:	65 e0       	ldi	r22, 0x05	; 5
     cd6:	71 e0       	ldi	r23, 0x01	; 1
     cd8:	c8 01       	movw	r24, r16
     cda:	0e 94 2b 10 	call	0x2056	; 0x2056 <__itoa_ncheck>
			/*Build output string*/
			itoa(left, itoabuf+2, 10);
			uint8_t len = strlen(itoabuf);
     cde:	e3 e0       	ldi	r30, 0x03	; 3
     ce0:	f1 e0       	ldi	r31, 0x01	; 1
     ce2:	01 90       	ld	r0, Z+
     ce4:	00 20       	and	r0, r0
     ce6:	e9 f7       	brne	.-6      	; 0xce2 <send_move_command+0xc6>
     ce8:	31 97       	sbiw	r30, 0x01	; 1
     cea:	e3 50       	subi	r30, 0x03	; 3
     cec:	f1 40       	sbci	r31, 0x01	; 1
			itoabuf[len++] = ' ';
     cee:	df 01       	movw	r26, r30
     cf0:	bb 27       	eor	r27, r27
     cf2:	ad 5f       	subi	r26, 0xFD	; 253
     cf4:	be 4f       	sbci	r27, 0xFE	; 254
     cf6:	80 e2       	ldi	r24, 0x20	; 32
     cf8:	8c 93       	st	X, r24
     cfa:	ef 5f       	subi	r30, 0xFF	; 255
     cfc:	6e 2f       	mov	r22, r30
     cfe:	70 e0       	ldi	r23, 0x00	; 0
     d00:	6d 5f       	subi	r22, 0xFD	; 253
     d02:	7e 4f       	sbci	r23, 0xFE	; 254
     d04:	4a e0       	ldi	r20, 0x0A	; 10
     d06:	ce 01       	movw	r24, r28
     d08:	0e 94 2b 10 	call	0x2056	; 0x2056 <__itoa_ncheck>
			itoa(right, itoabuf+len, 10);
			/*Send string*/
			uart_send_line(itoabuf);
     d0c:	83 e0       	ldi	r24, 0x03	; 3
     d0e:	91 e0       	ldi	r25, 0x01	; 1
     d10:	0e 94 b8 09 	call	0x1370	; 0x1370 <uart_send_line>
		}
		last_left = left;
     d14:	10 93 be 02 	sts	0x02BE, r17	; 0x8002be <last_left+0x1>
     d18:	00 93 bd 02 	sts	0x02BD, r16	; 0x8002bd <last_left>
		last_right = right;
     d1c:	d0 93 bc 02 	sts	0x02BC, r29	; 0x8002bc <last_right+0x1>
     d20:	c0 93 bb 02 	sts	0x02BB, r28	; 0x8002bb <last_right>
	}
}
     d24:	df 91       	pop	r29
     d26:	cf 91       	pop	r28
     d28:	1f 91       	pop	r17
     d2a:	0f 91       	pop	r16
     d2c:	08 95       	ret

00000d2e <print_lcd_static>:

void print_lcd_static(){
	set_cursor_pos(0);
     d2e:	80 e0       	ldi	r24, 0x00	; 0
     d30:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <set_cursor_pos>
	write_lcd_string("Fram: __cm PIR:_");
     d34:	80 e3       	ldi	r24, 0x30	; 48
     d36:	91 e0       	ldi	r25, 0x01	; 1
     d38:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <write_lcd_string>
	set_cursor_pos(16);
     d3c:	80 e1       	ldi	r24, 0x10	; 16
     d3e:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <set_cursor_pos>
	write_lcd_string("Bak: __cm  C: __");
     d42:	81 e4       	ldi	r24, 0x41	; 65
     d44:	91 e0       	ldi	r25, 0x01	; 1
     d46:	0c 94 54 0a 	jmp	0x14a8	; 0x14a8 <write_lcd_string>

00000d4a <__vector_7>:
}

ISR(TIMER2_COMPA_vect){
     d4a:	1f 92       	push	r1
     d4c:	0f 92       	push	r0
     d4e:	0f b6       	in	r0, 0x3f	; 63
     d50:	0f 92       	push	r0
     d52:	11 24       	eor	r1, r1
     d54:	2f 93       	push	r18
     d56:	3f 93       	push	r19
     d58:	4f 93       	push	r20
     d5a:	5f 93       	push	r21
     d5c:	6f 93       	push	r22
     d5e:	7f 93       	push	r23
     d60:	8f 93       	push	r24
     d62:	9f 93       	push	r25
     d64:	af 93       	push	r26
     d66:	bf 93       	push	r27
     d68:	ef 93       	push	r30
     d6a:	ff 93       	push	r31
	if(++heart_hundreths > 50){
     d6c:	80 91 c2 02 	lds	r24, 0x02C2	; 0x8002c2 <heart_hundreths>
     d70:	8f 5f       	subi	r24, 0xFF	; 255
     d72:	80 93 c2 02 	sts	0x02C2, r24	; 0x8002c2 <heart_hundreths>
     d76:	83 33       	cpi	r24, 0x33	; 51
     d78:	18 f0       	brcs	.+6      	; 0xd80 <__vector_7+0x36>
		LED_PORT |= 1<<LEDR2;
     d7a:	5f 9a       	sbi	0x0b, 7	; 11
		heart_hundreths = 0;
     d7c:	10 92 c2 02 	sts	0x02C2, r1	; 0x8002c2 <heart_hundreths>
	}
	if(command_hundreths < CMD_DELAY){
     d80:	80 91 c1 02 	lds	r24, 0x02C1	; 0x8002c1 <command_hundreths>
     d84:	84 31       	cpi	r24, 0x14	; 20
     d86:	28 f4       	brcc	.+10     	; 0xd92 <__vector_7+0x48>
		command_hundreths++;
     d88:	80 91 c1 02 	lds	r24, 0x02C1	; 0x8002c1 <command_hundreths>
     d8c:	8f 5f       	subi	r24, 0xFF	; 255
     d8e:	80 93 c1 02 	sts	0x02C1, r24	; 0x8002c1 <command_hundreths>
	}
	if(debounce_hundreths > 0){
     d92:	80 91 c0 02 	lds	r24, 0x02C0	; 0x8002c0 <debounce_hundreths>
     d96:	88 23       	and	r24, r24
     d98:	29 f0       	breq	.+10     	; 0xda4 <__vector_7+0x5a>
		debounce_hundreths--;
     d9a:	80 91 c0 02 	lds	r24, 0x02C0	; 0x8002c0 <debounce_hundreths>
     d9e:	81 50       	subi	r24, 0x01	; 1
     da0:	80 93 c0 02 	sts	0x02C0, r24	; 0x8002c0 <debounce_hundreths>
	}
	if(timeout_hundreths < 5000){
     da4:	80 91 b5 02 	lds	r24, 0x02B5	; 0x8002b5 <timeout_hundreths>
     da8:	90 91 b6 02 	lds	r25, 0x02B6	; 0x8002b6 <timeout_hundreths+0x1>
     dac:	88 38       	cpi	r24, 0x88	; 136
     dae:	93 41       	sbci	r25, 0x13	; 19
     db0:	50 f4       	brcc	.+20     	; 0xdc6 <__vector_7+0x7c>
		timeout_hundreths++;
     db2:	80 91 b5 02 	lds	r24, 0x02B5	; 0x8002b5 <timeout_hundreths>
     db6:	90 91 b6 02 	lds	r25, 0x02B6	; 0x8002b6 <timeout_hundreths+0x1>
     dba:	01 96       	adiw	r24, 0x01	; 1
     dbc:	90 93 b6 02 	sts	0x02B6, r25	; 0x8002b6 <timeout_hundreths+0x1>
     dc0:	80 93 b5 02 	sts	0x02B5, r24	; 0x8002b5 <timeout_hundreths>
     dc4:	06 c0       	rjmp	.+12     	; 0xdd2 <__vector_7+0x88>
	} else{
		request_sent = false;
     dc6:	10 92 b8 02 	sts	0x02B8, r1	; 0x8002b8 <request_sent>
		timeout_hundreths = 0;
     dca:	10 92 b6 02 	sts	0x02B6, r1	; 0x8002b6 <timeout_hundreths+0x1>
     dce:	10 92 b5 02 	sts	0x02B5, r1	; 0x8002b5 <timeout_hundreths>
	}
	messages_timerproc();
     dd2:	0e 94 c7 0a 	call	0x158e	; 0x158e <messages_timerproc>
}
     dd6:	ff 91       	pop	r31
     dd8:	ef 91       	pop	r30
     dda:	bf 91       	pop	r27
     ddc:	af 91       	pop	r26
     dde:	9f 91       	pop	r25
     de0:	8f 91       	pop	r24
     de2:	7f 91       	pop	r23
     de4:	6f 91       	pop	r22
     de6:	5f 91       	pop	r21
     de8:	4f 91       	pop	r20
     dea:	3f 91       	pop	r19
     dec:	2f 91       	pop	r18
     dee:	0f 90       	pop	r0
     df0:	0f be       	out	0x3f, r0	; 63
     df2:	0f 90       	pop	r0
     df4:	1f 90       	pop	r1
     df6:	18 95       	reti

00000df8 <timer_init>:

void timer_init(){
	/* Start 100Hz system timer with TC2 for counting time */
	OCR2A = 77;
     df8:	8d e4       	ldi	r24, 0x4D	; 77
     dfa:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
	TCCR2A = 1<<WGM21;
     dfe:	82 e0       	ldi	r24, 0x02	; 2
     e00:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
	TCCR2B = 7;
     e04:	97 e0       	ldi	r25, 0x07	; 7
     e06:	90 93 b1 00 	sts	0x00B1, r25	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
	TIMSK2 = 1<<OCIE2A;
     e0a:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f8070>
     e0e:	08 95       	ret

00000e10 <perform_command>:
}

void perform_command(uint8_t topic, uint8_t command, volatile uint8_t* args){
     e10:	cf 93       	push	r28
     e12:	df 93       	push	r29
     e14:	ea 01       	movw	r28, r20
	switch(topic){
     e16:	81 33       	cpi	r24, 0x31	; 49
     e18:	19 f0       	breq	.+6      	; 0xe20 <perform_command+0x10>
     e1a:	82 33       	cpi	r24, 0x32	; 50
     e1c:	d1 f0       	breq	.+52     	; 0xe52 <perform_command+0x42>
     e1e:	6a c0       	rjmp	.+212    	; 0xef4 <perform_command+0xe4>
		case '1': //From car
			switch(command){
     e20:	61 33       	cpi	r22, 0x31	; 49
     e22:	59 f0       	breq	.+22     	; 0xe3a <perform_command+0x2a>
     e24:	62 33       	cpi	r22, 0x32	; 50
     e26:	91 f0       	breq	.+36     	; 0xe4c <perform_command+0x3c>
     e28:	60 33       	cpi	r22, 0x30	; 48
     e2a:	09 f0       	breq	.+2      	; 0xe2e <perform_command+0x1e>
     e2c:	63 c0       	rjmp	.+198    	; 0xef4 <perform_command+0xe4>
				case '0':
					messages_force("Stopp!          ");
     e2e:	82 e5       	ldi	r24, 0x52	; 82
     e30:	91 e0       	ldi	r25, 0x01	; 1
					}
					break;
			}
			break;
	}
}
     e32:	df 91       	pop	r29
     e34:	cf 91       	pop	r28
void perform_command(uint8_t topic, uint8_t command, volatile uint8_t* args){
	switch(topic){
		case '1': //From car
			switch(command){
				case '0':
					messages_force("Stopp!          ");
     e36:	0c 94 ef 0a 	jmp	0x15de	; 0x15de <messages_force>
					break;
				case '1':
					strcpy((char*)sensor_buf, (char*)args);
     e3a:	ba 01       	movw	r22, r20
     e3c:	82 ea       	ldi	r24, 0xA2	; 162
     e3e:	93 e0       	ldi	r25, 0x03	; 3
     e40:	0e 94 24 10 	call	0x2048	; 0x2048 <strcpy>
					sensors_received = true;
     e44:	81 e0       	ldi	r24, 0x01	; 1
     e46:	80 93 bf 02 	sts	0x02BF, r24	; 0x8002bf <sensors_received>
					break;
     e4a:	54 c0       	rjmp	.+168    	; 0xef4 <perform_command+0xe4>
				case '2':
					messages_queue("PONG            ");
     e4c:	83 e6       	ldi	r24, 0x63	; 99
     e4e:	91 e0       	ldi	r25, 0x01	; 1
     e50:	11 c0       	rjmp	.+34     	; 0xe74 <perform_command+0x64>
			}
			break;
		case '2': //To remote
			switch(command){
     e52:	62 33       	cpi	r22, 0x32	; 50
     e54:	99 f0       	breq	.+38     	; 0xe7c <perform_command+0x6c>
     e56:	38 f4       	brcc	.+14     	; 0xe66 <perform_command+0x56>
     e58:	60 33       	cpi	r22, 0x30	; 48
     e5a:	51 f0       	breq	.+20     	; 0xe70 <perform_command+0x60>
     e5c:	61 33       	cpi	r22, 0x31	; 49
     e5e:	09 f0       	breq	.+2      	; 0xe62 <perform_command+0x52>
     e60:	49 c0       	rjmp	.+146    	; 0xef4 <perform_command+0xe4>
				case '0':
					LED_PORT &= ~(1<<LEDR2);
					break;
				case '1':
					messages_queue((char*)args);
     e62:	ca 01       	movw	r24, r20
     e64:	07 c0       	rjmp	.+14     	; 0xe74 <perform_command+0x64>
				case '2':
					messages_queue("PONG            ");
			}
			break;
		case '2': //To remote
			switch(command){
     e66:	63 33       	cpi	r22, 0x33	; 51
     e68:	79 f0       	breq	.+30     	; 0xe88 <perform_command+0x78>
     e6a:	64 33       	cpi	r22, 0x34	; 52
     e6c:	d9 f1       	breq	.+118    	; 0xee4 <perform_command+0xd4>
     e6e:	42 c0       	rjmp	.+132    	; 0xef4 <perform_command+0xe4>
				case '0':
					LED_PORT &= ~(1<<LEDR2);
     e70:	5f 98       	cbi	0x0b, 7	; 11
     e72:	40 c0       	rjmp	.+128    	; 0xef4 <perform_command+0xe4>
					}
					break;
			}
			break;
	}
}
     e74:	df 91       	pop	r29
     e76:	cf 91       	pop	r28
			switch(command){
				case '0':
					LED_PORT &= ~(1<<LEDR2);
					break;
				case '1':
					messages_queue((char*)args);
     e78:	0c 94 00 0b 	jmp	0x1600	; 0x1600 <messages_queue>
					break;
				case '2':
					Summer_PlayMelody(args[0]-'0');
     e7c:	88 81       	ld	r24, Y
     e7e:	80 53       	subi	r24, 0x30	; 48
					}
					break;
			}
			break;
	}
}
     e80:	df 91       	pop	r29
     e82:	cf 91       	pop	r28
					break;
				case '1':
					messages_queue((char*)args);
					break;
				case '2':
					Summer_PlayMelody(args[0]-'0');
     e84:	0c 94 3f 0c 	jmp	0x187e	; 0x187e <Summer_PlayMelody>
					break;
				case '3':
					if(program_mode == FIR_MODE){
     e88:	80 91 ba 02 	lds	r24, 0x02BA	; 0x8002ba <program_mode>
     e8c:	81 30       	cpi	r24, 0x01	; 1
     e8e:	b1 f4       	brne	.+44     	; 0xebc <perform_command+0xac>
						if(*args >= 'A'){
     e90:	88 81       	ld	r24, Y
     e92:	81 34       	cpi	r24, 0x41	; 65
     e94:	30 f0       	brcs	.+12     	; 0xea2 <perform_command+0x92>
							enter_main_mode("Game canceled");
     e96:	84 e7       	ldi	r24, 0x74	; 116
     e98:	91 e0       	ldi	r25, 0x01	; 1
					}
					break;
			}
			break;
	}
}
     e9a:	df 91       	pop	r29
     e9c:	cf 91       	pop	r28
					Summer_PlayMelody(args[0]-'0');
					break;
				case '3':
					if(program_mode == FIR_MODE){
						if(*args >= 'A'){
							enter_main_mode("Game canceled");
     e9e:	0c 94 4c 05 	jmp	0xa98	; 0xa98 <enter_main_mode>
						} else{
							fiveinarow_recive((char*)(args-2));
     ea2:	ca 01       	movw	r24, r20
     ea4:	02 97       	sbiw	r24, 0x02	; 2
     ea6:	0e 94 09 04 	call	0x812	; 0x812 <fiveinarow_recive>
							if(fiveinarow_check_win()){
     eaa:	0e 94 aa 04 	call	0x954	; 0x954 <fiveinarow_check_win>
     eae:	88 23       	and	r24, r24
     eb0:	19 f0       	breq	.+6      	; 0xeb8 <perform_command+0xa8>
								game_over = 2;
     eb2:	82 e0       	ldi	r24, 0x02	; 2
     eb4:	80 93 b4 02 	sts	0x02B4, r24	; 0x8002b4 <game_over>
								//Punishment
							}
							redraw = true;
     eb8:	81 e0       	ldi	r24, 0x01	; 1
     eba:	06 c0       	rjmp	.+12     	; 0xec8 <perform_command+0xb8>
						}
					} else if(*args < '0'){
     ebc:	88 81       	ld	r24, Y
     ebe:	80 33       	cpi	r24, 0x30	; 48
     ec0:	30 f4       	brcc	.+12     	; 0xece <perform_command+0xbe>
						game_prompted = true;
     ec2:	81 e0       	ldi	r24, 0x01	; 1
     ec4:	80 93 b9 02 	sts	0x02B9, r24	; 0x8002b9 <game_prompted>
						redraw = true;
     ec8:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <redraw>
     ecc:	13 c0       	rjmp	.+38     	; 0xef4 <perform_command+0xe4>
					} else{
						enter_fir_mode();
     ece:	0e 94 ff 05 	call	0xbfe	; 0xbfe <enter_fir_mode>
						fiveinarow_setup(false);
     ed2:	80 e0       	ldi	r24, 0x00	; 0
     ed4:	0e 94 57 03 	call	0x6ae	; 0x6ae <fiveinarow_setup>
						fiveinarow_recive((char*)(args-2));
     ed8:	ce 01       	movw	r24, r28
     eda:	02 97       	sbiw	r24, 0x02	; 2
					}
					break;
			}
			break;
	}
}
     edc:	df 91       	pop	r29
     ede:	cf 91       	pop	r28
						game_prompted = true;
						redraw = true;
					} else{
						enter_fir_mode();
						fiveinarow_setup(false);
						fiveinarow_recive((char*)(args-2));
     ee0:	0c 94 09 04 	jmp	0x812	; 0x812 <fiveinarow_recive>
					}
					break;
				case '4':
					if(args[0] == '1'){
     ee4:	88 81       	ld	r24, Y
     ee6:	81 33       	cpi	r24, 0x31	; 49
     ee8:	11 f4       	brne	.+4      	; 0xeee <perform_command+0xde>
						SETBIT(LED_PORT, LEDR1);
     eea:	5e 9a       	sbi	0x0b, 6	; 11
     eec:	03 c0       	rjmp	.+6      	; 0xef4 <perform_command+0xe4>
					} else{
						CLEARBIT(LED_PORT, LEDR1);
     eee:	5e 98       	cbi	0x0b, 6	; 11
						punished = false;
     ef0:	10 92 b7 02 	sts	0x02B7, r1	; 0x8002b7 <punished>
					}
					break;
			}
			break;
	}
}
     ef4:	df 91       	pop	r29
     ef6:	cf 91       	pop	r28
     ef8:	08 95       	ret

00000efa <display_sensors>:

void display_sensors(){
     efa:	1f 93       	push	r17
     efc:	cf 93       	push	r28
     efe:	df 93       	push	r29
	char* args = (char*)sensor_buf;
	set_cursor_pos(CR_POS);
     f00:	8f e1       	ldi	r24, 0x1F	; 31
     f02:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <set_cursor_pos>
	write_lcd_char((args[0] == '0') ? 'R' : '_');
     f06:	80 91 a2 03 	lds	r24, 0x03A2	; 0x8003a2 <sensor_buf>
     f0a:	80 33       	cpi	r24, 0x30	; 48
     f0c:	11 f0       	breq	.+4      	; 0xf12 <display_sensors+0x18>
     f0e:	8f e5       	ldi	r24, 0x5F	; 95
     f10:	01 c0       	rjmp	.+2      	; 0xf14 <display_sensors+0x1a>
     f12:	82 e5       	ldi	r24, 0x52	; 82
     f14:	0e 94 45 0a 	call	0x148a	; 0x148a <write_lcd_char>
	set_cursor_pos(CL_POS);
     f18:	8e e1       	ldi	r24, 0x1E	; 30
     f1a:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <set_cursor_pos>
	write_lcd_char((args[1] == '0') ? 'L' : '_');
     f1e:	80 91 a3 03 	lds	r24, 0x03A3	; 0x8003a3 <sensor_buf+0x1>
     f22:	80 33       	cpi	r24, 0x30	; 48
     f24:	11 f0       	breq	.+4      	; 0xf2a <display_sensors+0x30>
     f26:	8f e5       	ldi	r24, 0x5F	; 95
     f28:	01 c0       	rjmp	.+2      	; 0xf2c <display_sensors+0x32>
     f2a:	8c e4       	ldi	r24, 0x4C	; 76
     f2c:	0e 94 45 0a 	call	0x148a	; 0x148a <write_lcd_char>
	set_cursor_pos(PIR_POS);
     f30:	8f e0       	ldi	r24, 0x0F	; 15
     f32:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <set_cursor_pos>
	write_lcd_char((args[3] == '0') ? 'X' : '_');
     f36:	80 91 a5 03 	lds	r24, 0x03A5	; 0x8003a5 <sensor_buf+0x3>
     f3a:	80 33       	cpi	r24, 0x30	; 48
     f3c:	11 f0       	breq	.+4      	; 0xf42 <display_sensors+0x48>
     f3e:	8f e5       	ldi	r24, 0x5F	; 95
     f40:	01 c0       	rjmp	.+2      	; 0xf44 <display_sensors+0x4a>
     f42:	88 e5       	ldi	r24, 0x58	; 88
     f44:	0e 94 45 0a 	call	0x148a	; 0x148a <write_lcd_char>
	if(args[2] == '0') Summer_PlayMelody(MELODY_HONK);
     f48:	80 91 a4 03 	lds	r24, 0x03A4	; 0x8003a4 <sensor_buf+0x2>
     f4c:	80 33       	cpi	r24, 0x30	; 48
     f4e:	19 f4       	brne	.+6      	; 0xf56 <display_sensors+0x5c>
     f50:	80 e0       	ldi	r24, 0x00	; 0
     f52:	0e 94 3f 0c 	call	0x187e	; 0x187e <Summer_PlayMelody>
	
	
	uint8_t b = 5;
     f56:	c5 e0       	ldi	r28, 0x05	; 5
	while(args[++b] != ' ');
     f58:	81 e0       	ldi	r24, 0x01	; 1
     f5a:	8c 0f       	add	r24, r28
     f5c:	e8 2f       	mov	r30, r24
     f5e:	f0 e0       	ldi	r31, 0x00	; 0
     f60:	ee 55       	subi	r30, 0x5E	; 94
     f62:	fc 4f       	sbci	r31, 0xFC	; 252
     f64:	90 81       	ld	r25, Z
     f66:	90 32       	cpi	r25, 0x20	; 32
     f68:	11 f0       	breq	.+4      	; 0xf6e <display_sensors+0x74>
     f6a:	c8 2f       	mov	r28, r24
     f6c:	f5 cf       	rjmp	.-22     	; 0xf58 <display_sensors+0x5e>
	args[b++] = '\0';
     f6e:	ce 5f       	subi	r28, 0xFE	; 254
     f70:	10 82       	st	Z, r1
     f72:	8c 2f       	mov	r24, r28
	uint8_t k = b;
	while(args[++k] != ' ');
     f74:	91 e0       	ldi	r25, 0x01	; 1
     f76:	98 0f       	add	r25, r24
     f78:	e9 2f       	mov	r30, r25
     f7a:	f0 e0       	ldi	r31, 0x00	; 0
     f7c:	ee 55       	subi	r30, 0x5E	; 94
     f7e:	fc 4f       	sbci	r31, 0xFC	; 252
     f80:	20 81       	ld	r18, Z
     f82:	20 32       	cpi	r18, 0x20	; 32
     f84:	11 f0       	breq	.+4      	; 0xf8a <display_sensors+0x90>
     f86:	89 2f       	mov	r24, r25
     f88:	f5 cf       	rjmp	.-22     	; 0xf74 <display_sensors+0x7a>
	args[k++] = '\0';
     f8a:	d2 e0       	ldi	r29, 0x02	; 2
     f8c:	d8 0f       	add	r29, r24
     f8e:	10 82       	st	Z, r1
	
	
	set_cursor_pos(FRONT_POS);
     f90:	85 e0       	ldi	r24, 0x05	; 5
     f92:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <set_cursor_pos>
	if(b == 7 && args[0] == '0'){ //0 is sent for front
     f96:	c7 30       	cpi	r28, 0x07	; 7
     f98:	39 f4       	brne	.+14     	; 0xfa8 <display_sensors+0xae>
     f9a:	80 91 a2 03 	lds	r24, 0x03A2	; 0x8003a2 <sensor_buf>
     f9e:	80 33       	cpi	r24, 0x30	; 48
     fa0:	19 f4       	brne	.+6      	; 0xfa8 <display_sensors+0xae>
		write_lcd_string("!!!");
     fa2:	82 e8       	ldi	r24, 0x82	; 130
     fa4:	91 e0       	ldi	r25, 0x01	; 1
     fa6:	13 c0       	rjmp	.+38     	; 0xfce <display_sensors+0xd4>
	} else{
		for (int8_t i = 3-strlen(args+5); i > 0; i--) write_lcd_char(' ');
     fa8:	e7 ea       	ldi	r30, 0xA7	; 167
     faa:	f3 e0       	ldi	r31, 0x03	; 3
     fac:	01 90       	ld	r0, Z+
     fae:	00 20       	and	r0, r0
     fb0:	e9 f7       	brne	.-6      	; 0xfac <display_sensors+0xb2>
     fb2:	cf 01       	movw	r24, r30
     fb4:	88 5a       	subi	r24, 0xA8	; 168
     fb6:	93 40       	sbci	r25, 0x03	; 3
     fb8:	13 e0       	ldi	r17, 0x03	; 3
     fba:	18 1b       	sub	r17, r24
     fbc:	11 16       	cp	r1, r17
     fbe:	2c f4       	brge	.+10     	; 0xfca <display_sensors+0xd0>
     fc0:	80 e2       	ldi	r24, 0x20	; 32
     fc2:	0e 94 45 0a 	call	0x148a	; 0x148a <write_lcd_char>
     fc6:	11 50       	subi	r17, 0x01	; 1
     fc8:	f9 cf       	rjmp	.-14     	; 0xfbc <display_sensors+0xc2>
		write_lcd_string(args+5);
     fca:	87 ea       	ldi	r24, 0xA7	; 167
     fcc:	93 e0       	ldi	r25, 0x03	; 3
     fce:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <write_lcd_string>
	}
	
	set_cursor_pos(BACK_POS);
     fd2:	84 e1       	ldi	r24, 0x14	; 20
     fd4:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <set_cursor_pos>
	if(k-b == 2 && args[b] == '0'){ //0 is sent for back
     fd8:	8d 2f       	mov	r24, r29
     fda:	90 e0       	ldi	r25, 0x00	; 0
     fdc:	d0 e0       	ldi	r29, 0x00	; 0
     fde:	8c 1b       	sub	r24, r28
     fe0:	9d 0b       	sbc	r25, r29
     fe2:	02 97       	sbiw	r24, 0x02	; 2
     fe4:	49 f4       	brne	.+18     	; 0xff8 <display_sensors+0xfe>
     fe6:	fe 01       	movw	r30, r28
     fe8:	ee 55       	subi	r30, 0x5E	; 94
     fea:	fc 4f       	sbci	r31, 0xFC	; 252
     fec:	80 81       	ld	r24, Z
     fee:	80 33       	cpi	r24, 0x30	; 48
     ff0:	19 f4       	brne	.+6      	; 0xff8 <display_sensors+0xfe>
		write_lcd_string("!!!");
     ff2:	82 e8       	ldi	r24, 0x82	; 130
     ff4:	91 e0       	ldi	r25, 0x01	; 1
     ff6:	11 c0       	rjmp	.+34     	; 0x101a <display_sensors+0x120>
	} else{
		for (int8_t i = 3-strlen(args+b); i > 0; i--) write_lcd_char(' ');
     ff8:	ce 55       	subi	r28, 0x5E	; 94
     ffa:	dc 4f       	sbci	r29, 0xFC	; 252
     ffc:	fe 01       	movw	r30, r28
     ffe:	01 90       	ld	r0, Z+
    1000:	00 20       	and	r0, r0
    1002:	e9 f7       	brne	.-6      	; 0xffe <display_sensors+0x104>
    1004:	1c 2f       	mov	r17, r28
    1006:	1e 1b       	sub	r17, r30
    1008:	1c 5f       	subi	r17, 0xFC	; 252
    100a:	11 16       	cp	r1, r17
    100c:	2c f4       	brge	.+10     	; 0x1018 <display_sensors+0x11e>
    100e:	80 e2       	ldi	r24, 0x20	; 32
    1010:	0e 94 45 0a 	call	0x148a	; 0x148a <write_lcd_char>
    1014:	11 50       	subi	r17, 0x01	; 1
    1016:	f9 cf       	rjmp	.-14     	; 0x100a <display_sensors+0x110>
		write_lcd_string(args+b);
    1018:	ce 01       	movw	r24, r28
	}
}
    101a:	df 91       	pop	r29
    101c:	cf 91       	pop	r28
    101e:	1f 91       	pop	r17
	set_cursor_pos(BACK_POS);
	if(k-b == 2 && args[b] == '0'){ //0 is sent for back
		write_lcd_string("!!!");
	} else{
		for (int8_t i = 3-strlen(args+b); i > 0; i--) write_lcd_char(' ');
		write_lcd_string(args+b);
    1020:	0c 94 54 0a 	jmp	0x14a8	; 0x14a8 <write_lcd_string>

00001024 <do_normal_program>:
		LED_PORT &= ~(1<<LEDG);
	}
}

void do_normal_program(){
	if(game_prompted){
    1024:	80 91 b9 02 	lds	r24, 0x02B9	; 0x8002b9 <game_prompted>
    1028:	88 23       	and	r24, r24
    102a:	01 f1       	breq	.+64     	; 0x106c <do_normal_program+0x48>
		if(redraw){
    102c:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <redraw>
    1030:	88 23       	and	r24, r24
    1032:	59 f0       	breq	.+22     	; 0x104a <do_normal_program+0x26>
			clear_LCD();
    1034:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <clear_LCD>
			set_cursor_pos(16);
    1038:	80 e1       	ldi	r24, 0x10	; 16
    103a:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <set_cursor_pos>
			write_lcd_string("Want to play?");
    103e:	87 e9       	ldi	r24, 0x97	; 151
    1040:	91 e0       	ldi	r25, 0x01	; 1
    1042:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <write_lcd_string>
			redraw = false;
    1046:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <redraw>
		}
		if(DEADMAN_PRESSED){
    104a:	4c 99       	sbic	0x09, 4	; 9
    104c:	65 c0       	rjmp	.+202    	; 0x1118 <do_normal_program+0xf4>
			enter_fir_mode();
    104e:	0e 94 ff 05 	call	0xbfe	; 0xbfe <enter_fir_mode>
			fiveinarow_setup(true);
    1052:	81 e0       	ldi	r24, 0x01	; 1
    1054:	0e 94 57 03 	call	0x6ae	; 0x6ae <fiveinarow_setup>
    1058:	2f ef       	ldi	r18, 0xFF	; 255
    105a:	80 e7       	ldi	r24, 0x70	; 112
    105c:	92 e0       	ldi	r25, 0x02	; 2
    105e:	21 50       	subi	r18, 0x01	; 1
    1060:	80 40       	sbci	r24, 0x00	; 0
    1062:	90 40       	sbci	r25, 0x00	; 0
    1064:	e1 f7       	brne	.-8      	; 0x105e <do_normal_program+0x3a>
    1066:	00 c0       	rjmp	.+0      	; 0x1068 <do_normal_program+0x44>
    1068:	00 00       	nop
    106a:	56 c0       	rjmp	.+172    	; 0x1118 <do_normal_program+0xf4>
			_delay_ms(100);
		}
	} else if(redraw){
    106c:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <redraw>
    1070:	88 23       	and	r24, r24
    1072:	59 f0       	breq	.+22     	; 0x108a <do_normal_program+0x66>
		clear_line(0);
    1074:	80 e0       	ldi	r24, 0x00	; 0
    1076:	0e 94 86 0a 	call	0x150c	; 0x150c <clear_line>
		clear_line(1);
    107a:	81 e0       	ldi	r24, 0x01	; 1
    107c:	0e 94 86 0a 	call	0x150c	; 0x150c <clear_line>
		print_lcd_static();
    1080:	0e 94 97 06 	call	0xd2e	; 0xd2e <print_lcd_static>
		redraw = false;
    1084:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <redraw>
    1088:	47 c0       	rjmp	.+142    	; 0x1118 <do_normal_program+0xf4>
	} else{
		messages_move_queue();
    108a:	0e 94 33 0b 	call	0x1666	; 0x1666 <messages_move_queue>
		if(!output_buf_read){
    108e:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <output_buf_read>
    1092:	81 11       	cpse	r24, r1
    1094:	0d c0       	rjmp	.+26     	; 0x10b0 <do_normal_program+0x8c>
			set_cursor_pos(32);
    1096:	80 e2       	ldi	r24, 0x20	; 32
    1098:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <set_cursor_pos>
			char* buffer = (char*)messages_get_buffer();
    109c:	0e 94 57 0b 	call	0x16ae	; 0x16ae <messages_get_buffer>
			/*If buffer is empty, write clear line. Otherwise write buffer*/
			write_lcd_string((buffer[0] != '\0') ? buffer :  "                ");
    10a0:	fc 01       	movw	r30, r24
    10a2:	20 81       	ld	r18, Z
    10a4:	21 11       	cpse	r18, r1
    10a6:	02 c0       	rjmp	.+4      	; 0x10ac <do_normal_program+0x88>
    10a8:	86 e8       	ldi	r24, 0x86	; 134
    10aa:	91 e0       	ldi	r25, 0x01	; 1
    10ac:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <write_lcd_string>
		}
		if(sensors_received){
    10b0:	80 91 bf 02 	lds	r24, 0x02BF	; 0x8002bf <sensors_received>
    10b4:	88 23       	and	r24, r24
    10b6:	21 f0       	breq	.+8      	; 0x10c0 <do_normal_program+0x9c>
			display_sensors();
    10b8:	0e 94 7d 07 	call	0xefa	; 0xefa <display_sensors>
			sensors_received = false;
    10bc:	10 92 bf 02 	sts	0x02BF, r1	; 0x8002bf <sensors_received>
		}
		if(DEADMAN_PRESSED && !punished){
    10c0:	4c 99       	sbic	0x09, 4	; 9
    10c2:	0e c0       	rjmp	.+28     	; 0x10e0 <do_normal_program+0xbc>
    10c4:	80 91 b7 02 	lds	r24, 0x02B7	; 0x8002b7 <punished>
    10c8:	81 11       	cpse	r24, r1
    10ca:	0a c0       	rjmp	.+20     	; 0x10e0 <do_normal_program+0xbc>
			if(!(LED_PORT & (1<<LEDG))){
    10cc:	5d 99       	sbic	0x0b, 5	; 11
    10ce:	05 c0       	rjmp	.+10     	; 0x10da <do_normal_program+0xb6>
				uart_send_line("041");
    10d0:	85 ea       	ldi	r24, 0xA5	; 165
    10d2:	91 e0       	ldi	r25, 0x01	; 1
    10d4:	0e 94 b8 09 	call	0x1370	; 0x1370 <uart_send_line>
				LED_PORT |= 1<<LEDG;
    10d8:	5d 9a       	sbi	0x0b, 5	; 11
			}
			send_move_command();
    10da:	0e 94 0e 06 	call	0xc1c	; 0xc1c <send_move_command>
    10de:	07 c0       	rjmp	.+14     	; 0x10ee <do_normal_program+0xca>
		} else if(LED_PORT & (1<<LEDG)){
    10e0:	5d 9b       	sbis	0x0b, 5	; 11
    10e2:	05 c0       	rjmp	.+10     	; 0x10ee <do_normal_program+0xca>
			uart_send_line("040");
    10e4:	8c e2       	ldi	r24, 0x2C	; 44
    10e6:	91 e0       	ldi	r25, 0x01	; 1
    10e8:	0e 94 b8 09 	call	0x1370	; 0x1370 <uart_send_line>
			LED_PORT &= ~(1<<LEDG);
    10ec:	5d 98       	cbi	0x0b, 5	; 11
		}
		if(!(PINB & 1<<GAMEBTN) && !request_sent){
    10ee:	1e 99       	sbic	0x03, 6	; 3
    10f0:	13 c0       	rjmp	.+38     	; 0x1118 <do_normal_program+0xf4>
    10f2:	80 91 b8 02 	lds	r24, 0x02B8	; 0x8002b8 <request_sent>
    10f6:	81 11       	cpse	r24, r1
    10f8:	0f c0       	rjmp	.+30     	; 0x1118 <do_normal_program+0xf4>
			uart_send_line("33.");
    10fa:	89 ea       	ldi	r24, 0xA9	; 169
    10fc:	91 e0       	ldi	r25, 0x01	; 1
    10fe:	0e 94 b8 09 	call	0x1370	; 0x1370 <uart_send_line>
			messages_force("Invitation sent");
    1102:	8d ea       	ldi	r24, 0xAD	; 173
    1104:	91 e0       	ldi	r25, 0x01	; 1
    1106:	0e 94 ef 0a 	call	0x15de	; 0x15de <messages_force>
			request_sent = true;
    110a:	81 e0       	ldi	r24, 0x01	; 1
    110c:	80 93 b8 02 	sts	0x02B8, r24	; 0x8002b8 <request_sent>
			timeout_hundreths = 0;
    1110:	10 92 b6 02 	sts	0x02B6, r1	; 0x8002b6 <timeout_hundreths+0x1>
    1114:	10 92 b5 02 	sts	0x02B5, r1	; 0x8002b5 <timeout_hundreths>
    1118:	ff e7       	ldi	r31, 0x7F	; 127
    111a:	28 e3       	ldi	r18, 0x38	; 56
    111c:	81 e0       	ldi	r24, 0x01	; 1
    111e:	f1 50       	subi	r31, 0x01	; 1
    1120:	20 40       	sbci	r18, 0x00	; 0
    1122:	80 40       	sbci	r24, 0x00	; 0
    1124:	e1 f7       	brne	.-8      	; 0x111e <do_normal_program+0xfa>
    1126:	00 c0       	rjmp	.+0      	; 0x1128 <do_normal_program+0x104>
    1128:	00 00       	nop
    112a:	08 95       	ret

0000112c <__vector_18>:
		for (int8_t i = 3-strlen(args+b); i > 0; i--) write_lcd_char(' ');
		write_lcd_string(args+b);
	}
}

ISR(USART_RX_vect){
    112c:	1f 92       	push	r1
    112e:	0f 92       	push	r0
    1130:	0f b6       	in	r0, 0x3f	; 63
    1132:	0f 92       	push	r0
    1134:	11 24       	eor	r1, r1
    1136:	2f 93       	push	r18
    1138:	3f 93       	push	r19
    113a:	4f 93       	push	r20
    113c:	5f 93       	push	r21
    113e:	6f 93       	push	r22
    1140:	7f 93       	push	r23
    1142:	8f 93       	push	r24
    1144:	9f 93       	push	r25
    1146:	af 93       	push	r26
    1148:	bf 93       	push	r27
    114a:	ef 93       	push	r30
    114c:	ff 93       	push	r31
	uart_linebuf[uart_bufind] = UDR0;
    114e:	e0 91 c3 02 	lds	r30, 0x02C3	; 0x8002c3 <uart_bufind>
    1152:	f0 e0       	ldi	r31, 0x00	; 0
    1154:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    1158:	e2 57       	subi	r30, 0x72	; 114
    115a:	fc 4f       	sbci	r31, 0xFC	; 252
    115c:	80 83       	st	Z, r24
	if(uart_linebuf[uart_bufind] == '\n'){
    115e:	e0 91 c3 02 	lds	r30, 0x02C3	; 0x8002c3 <uart_bufind>
    1162:	f0 e0       	ldi	r31, 0x00	; 0
    1164:	e2 57       	subi	r30, 0x72	; 114
    1166:	fc 4f       	sbci	r31, 0xFC	; 252
    1168:	80 81       	ld	r24, Z
    116a:	8a 30       	cpi	r24, 0x0A	; 10
    116c:	89 f4       	brne	.+34     	; 0x1190 <__vector_18+0x64>
		uart_linebuf[uart_bufind] = '\0';
    116e:	e0 91 c3 02 	lds	r30, 0x02C3	; 0x8002c3 <uart_bufind>
    1172:	f0 e0       	ldi	r31, 0x00	; 0
    1174:	e2 57       	subi	r30, 0x72	; 114
    1176:	fc 4f       	sbci	r31, 0xFC	; 252
    1178:	10 82       	st	Z, r1
		//Do something
		perform_command(uart_linebuf[0], uart_linebuf[1], uart_linebuf+2);
    117a:	60 91 8f 03 	lds	r22, 0x038F	; 0x80038f <uart_linebuf+0x1>
    117e:	80 91 8e 03 	lds	r24, 0x038E	; 0x80038e <uart_linebuf>
    1182:	40 e9       	ldi	r20, 0x90	; 144
    1184:	53 e0       	ldi	r21, 0x03	; 3
    1186:	0e 94 08 07 	call	0xe10	; 0xe10 <perform_command>
		//Done something
		uart_bufind = 0;
    118a:	10 92 c3 02 	sts	0x02C3, r1	; 0x8002c3 <uart_bufind>
    118e:	05 c0       	rjmp	.+10     	; 0x119a <__vector_18+0x6e>
	} else{
		uart_bufind++;
    1190:	80 91 c3 02 	lds	r24, 0x02C3	; 0x8002c3 <uart_bufind>
    1194:	8f 5f       	subi	r24, 0xFF	; 255
    1196:	80 93 c3 02 	sts	0x02C3, r24	; 0x8002c3 <uart_bufind>
	}
}
    119a:	ff 91       	pop	r31
    119c:	ef 91       	pop	r30
    119e:	bf 91       	pop	r27
    11a0:	af 91       	pop	r26
    11a2:	9f 91       	pop	r25
    11a4:	8f 91       	pop	r24
    11a6:	7f 91       	pop	r23
    11a8:	6f 91       	pop	r22
    11aa:	5f 91       	pop	r21
    11ac:	4f 91       	pop	r20
    11ae:	3f 91       	pop	r19
    11b0:	2f 91       	pop	r18
    11b2:	0f 90       	pop	r0
    11b4:	0f be       	out	0x3f, r0	; 63
    11b6:	0f 90       	pop	r0
    11b8:	1f 90       	pop	r1
    11ba:	18 95       	reti

000011bc <btn_init>:

void btn_init(){
	BTN_DDR &= ~((1<<HONKBTN)|(1<<DEADMANBTN)|(1<<EXTRABTN));
    11bc:	8a b1       	in	r24, 0x0a	; 10
    11be:	83 7e       	andi	r24, 0xE3	; 227
    11c0:	8a b9       	out	0x0a, r24	; 10
	BTN_PORT |= (1<<HONKBTN)|(1<<DEADMANBTN)|(1<<EXTRABTN);
    11c2:	8b b1       	in	r24, 0x0b	; 11
    11c4:	8c 61       	ori	r24, 0x1C	; 28
    11c6:	8b b9       	out	0x0b, r24	; 11
	DDRB &= ~(1<<GAMEBTN);
    11c8:	26 98       	cbi	0x04, 6	; 4
	PORTB |= 1<<GAMEBTN;
    11ca:	2e 9a       	sbi	0x05, 6	; 5
	EICRA = (2<<ISC00)|(2<<ISC10);
    11cc:	8a e0       	ldi	r24, 0x0A	; 10
    11ce:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
	EIMSK = 3;
    11d2:	83 e0       	ldi	r24, 0x03	; 3
    11d4:	8d bb       	out	0x1d, r24	; 29
    11d6:	08 95       	ret

000011d8 <__vector_1>:
}

//Extra
ISR(INT0_vect){
    11d8:	1f 92       	push	r1
    11da:	0f 92       	push	r0
    11dc:	0f b6       	in	r0, 0x3f	; 63
    11de:	0f 92       	push	r0
    11e0:	11 24       	eor	r1, r1
    11e2:	2f 93       	push	r18
    11e4:	3f 93       	push	r19
    11e6:	4f 93       	push	r20
    11e8:	5f 93       	push	r21
    11ea:	6f 93       	push	r22
    11ec:	7f 93       	push	r23
    11ee:	8f 93       	push	r24
    11f0:	9f 93       	push	r25
    11f2:	af 93       	push	r26
    11f4:	bf 93       	push	r27
    11f6:	cf 93       	push	r28
    11f8:	ef 93       	push	r30
    11fa:	ff 93       	push	r31
	if(program_mode == FIR_MODE){
    11fc:	c0 91 ba 02 	lds	r28, 0x02BA	; 0x8002ba <program_mode>
    1200:	c1 30       	cpi	r28, 0x01	; 1
    1202:	59 f4       	brne	.+22     	; 0x121a <__vector_1+0x42>
		enter_main_mode("Game canceled");
    1204:	84 e7       	ldi	r24, 0x74	; 116
    1206:	91 e0       	ldi	r25, 0x01	; 1
    1208:	0e 94 4c 05 	call	0xa98	; 0xa98 <enter_main_mode>
		uart_send_line("33A");
    120c:	8d eb       	ldi	r24, 0xBD	; 189
    120e:	91 e0       	ldi	r25, 0x01	; 1
    1210:	0e 94 b8 09 	call	0x1370	; 0x1370 <uart_send_line>
		punished = true;
    1214:	c0 93 b7 02 	sts	0x02B7, r28	; 0x8002b7 <punished>
    1218:	33 c0       	rjmp	.+102    	; 0x1280 <__vector_1+0xa8>
	} else{
		if(game_prompted){
    121a:	80 91 b9 02 	lds	r24, 0x02B9	; 0x8002b9 <game_prompted>
    121e:	88 23       	and	r24, r24
    1220:	31 f0       	breq	.+12     	; 0x122e <__vector_1+0x56>
			game_prompted = false;
    1222:	10 92 b9 02 	sts	0x02B9, r1	; 0x8002b9 <game_prompted>
			redraw = true;
    1226:	81 e0       	ldi	r24, 0x01	; 1
    1228:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <redraw>
    122c:	29 c0       	rjmp	.+82     	; 0x1280 <__vector_1+0xa8>
		} else if((BTN_PIN & 1<<DEADMANBTN) && (read_adc(0) > z_rest-5)){
    122e:	4c 9b       	sbis	0x09, 4	; 9
    1230:	27 c0       	rjmp	.+78     	; 0x1280 <__vector_1+0xa8>
    1232:	80 e0       	ldi	r24, 0x00	; 0
    1234:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <read_adc>
    1238:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <z_rest>
    123c:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <z_rest+0x1>
    1240:	25 50       	subi	r18, 0x05	; 5
    1242:	31 09       	sbc	r19, r1
    1244:	28 17       	cp	r18, r24
    1246:	39 07       	cpc	r19, r25
    1248:	d8 f4       	brcc	.+54     	; 0x1280 <__vector_1+0xa8>
			z_rest = read_avg_adc(0, 25);
    124a:	69 e1       	ldi	r22, 0x19	; 25
    124c:	70 e0       	ldi	r23, 0x00	; 0
    124e:	80 e0       	ldi	r24, 0x00	; 0
    1250:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <read_avg_adc>
    1254:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <z_rest+0x1>
    1258:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <z_rest>
			x_rest = read_avg_adc(1, 25);
    125c:	69 e1       	ldi	r22, 0x19	; 25
    125e:	70 e0       	ldi	r23, 0x00	; 0
    1260:	81 e0       	ldi	r24, 0x01	; 1
    1262:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <read_avg_adc>
    1266:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <x_rest+0x1>
    126a:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <x_rest>
			y_rest = read_avg_adc(2, 25);
    126e:	69 e1       	ldi	r22, 0x19	; 25
    1270:	70 e0       	ldi	r23, 0x00	; 0
    1272:	82 e0       	ldi	r24, 0x02	; 2
    1274:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <read_avg_adc>
    1278:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <y_rest+0x1>
    127c:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <y_rest>
		}
	}
}
    1280:	ff 91       	pop	r31
    1282:	ef 91       	pop	r30
    1284:	cf 91       	pop	r28
    1286:	bf 91       	pop	r27
    1288:	af 91       	pop	r26
    128a:	9f 91       	pop	r25
    128c:	8f 91       	pop	r24
    128e:	7f 91       	pop	r23
    1290:	6f 91       	pop	r22
    1292:	5f 91       	pop	r21
    1294:	4f 91       	pop	r20
    1296:	3f 91       	pop	r19
    1298:	2f 91       	pop	r18
    129a:	0f 90       	pop	r0
    129c:	0f be       	out	0x3f, r0	; 63
    129e:	0f 90       	pop	r0
    12a0:	1f 90       	pop	r1
    12a2:	18 95       	reti

000012a4 <__vector_2>:

//Honk
ISR(INT1_vect){
    12a4:	1f 92       	push	r1
    12a6:	0f 92       	push	r0
    12a8:	0f b6       	in	r0, 0x3f	; 63
    12aa:	0f 92       	push	r0
    12ac:	11 24       	eor	r1, r1
    12ae:	2f 93       	push	r18
    12b0:	3f 93       	push	r19
    12b2:	4f 93       	push	r20
    12b4:	5f 93       	push	r21
    12b6:	6f 93       	push	r22
    12b8:	7f 93       	push	r23
    12ba:	8f 93       	push	r24
    12bc:	9f 93       	push	r25
    12be:	af 93       	push	r26
    12c0:	bf 93       	push	r27
    12c2:	ef 93       	push	r30
    12c4:	ff 93       	push	r31
	if(debounce_hundreths == 0){
    12c6:	80 91 c0 02 	lds	r24, 0x02C0	; 0x8002c0 <debounce_hundreths>
    12ca:	81 11       	cpse	r24, r1
    12cc:	0c c0       	rjmp	.+24     	; 0x12e6 <__vector_2+0x42>
		if(DEADMAN_PRESSED){
    12ce:	4c 99       	sbic	0x09, 4	; 9
    12d0:	03 c0       	rjmp	.+6      	; 0x12d8 <__vector_2+0x34>
			uart_send_line("020");
    12d2:	81 ec       	ldi	r24, 0xC1	; 193
    12d4:	91 e0       	ldi	r25, 0x01	; 1
    12d6:	02 c0       	rjmp	.+4      	; 0x12dc <__vector_2+0x38>
			} else{
			uart_send_line("32");
    12d8:	85 ec       	ldi	r24, 0xC5	; 197
    12da:	91 e0       	ldi	r25, 0x01	; 1
    12dc:	0e 94 b8 09 	call	0x1370	; 0x1370 <uart_send_line>
		}
		debounce_hundreths = DEBOUNCE_VAL;	
    12e0:	84 e1       	ldi	r24, 0x14	; 20
    12e2:	80 93 c0 02 	sts	0x02C0, r24	; 0x8002c0 <debounce_hundreths>
	}
}
    12e6:	ff 91       	pop	r31
    12e8:	ef 91       	pop	r30
    12ea:	bf 91       	pop	r27
    12ec:	af 91       	pop	r26
    12ee:	9f 91       	pop	r25
    12f0:	8f 91       	pop	r24
    12f2:	7f 91       	pop	r23
    12f4:	6f 91       	pop	r22
    12f6:	5f 91       	pop	r21
    12f8:	4f 91       	pop	r20
    12fa:	3f 91       	pop	r19
    12fc:	2f 91       	pop	r18
    12fe:	0f 90       	pop	r0
    1300:	0f be       	out	0x3f, r0	; 63
    1302:	0f 90       	pop	r0
    1304:	1f 90       	pop	r1
    1306:	18 95       	reti

00001308 <led_init>:

void led_init(){
	LED_DDR |= (1<<LEDG)|(1<<LEDR1)|(1<<LEDR2);
    1308:	8a b1       	in	r24, 0x0a	; 10
    130a:	80 6e       	ori	r24, 0xE0	; 224
    130c:	8a b9       	out	0x0a, r24	; 10
	LED_PORT &= ~((1<<LEDG)|(1<<LEDR1));
    130e:	8b b1       	in	r24, 0x0b	; 11
    1310:	8f 79       	andi	r24, 0x9F	; 159
    1312:	8b b9       	out	0x0b, r24	; 11
	LED_PORT |= 1<<LEDR2;
    1314:	5f 9a       	sbi	0x0b, 7	; 11
    1316:	08 95       	ret

00001318 <main>:
char row_buf[49];


int main(void)
{
	spi_init();
    1318:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <spi_init>
    131c:	2f ef       	ldi	r18, 0xFF	; 255
    131e:	80 e7       	ldi	r24, 0x70	; 112
    1320:	92 e0       	ldi	r25, 0x02	; 2
    1322:	21 50       	subi	r18, 0x01	; 1
    1324:	80 40       	sbci	r24, 0x00	; 0
    1326:	90 40       	sbci	r25, 0x00	; 0
    1328:	e1 f7       	brne	.-8      	; 0x1322 <main+0xa>
    132a:	00 c0       	rjmp	.+0      	; 0x132c <main+0x14>
    132c:	00 00       	nop
	_delay_ms(100);
	lcd_init();
    132e:	0e 94 26 0a 	call	0x144c	; 0x144c <lcd_init>
	fiveinarow_init();
    1332:	0e 94 3e 03 	call	0x67c	; 0x67c <fiveinarow_init>
	adc_init();
    1336:	0e 94 de 09 	call	0x13bc	; 0x13bc <adc_init>
	uart_init();
    133a:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <uart_init>
	uart_flush();
    133e:	0e 94 cb 09 	call	0x1396	; 0x1396 <uart_flush>
	led_init();
    1342:	0e 94 84 09 	call	0x1308	; 0x1308 <led_init>
	btn_init();
    1346:	0e 94 de 08 	call	0x11bc	; 0x11bc <btn_init>
	Summer_Init();
    134a:	0e 94 37 0c 	call	0x186e	; 0x186e <Summer_Init>
	timer_init();
    134e:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <timer_init>
	print_lcd_static();
    1352:	0e 94 97 06 	call	0xd2e	; 0xd2e <print_lcd_static>
	sei();
    1356:	78 94       	sei
	
    while (1) 
    {
		switch(program_mode){
    1358:	80 91 ba 02 	lds	r24, 0x02BA	; 0x8002ba <program_mode>
    135c:	88 23       	and	r24, r24
    135e:	29 f0       	breq	.+10     	; 0x136a <main+0x52>
    1360:	81 30       	cpi	r24, 0x01	; 1
    1362:	d1 f7       	brne	.-12     	; 0x1358 <main+0x40>
			case MAIN_MODE:
				do_normal_program();
				break;
			case FIR_MODE:
				do_fir_actions();
    1364:	0e 94 57 05 	call	0xaae	; 0xaae <do_fir_actions>
				break;
    1368:	f7 cf       	rjmp	.-18     	; 0x1358 <main+0x40>
	
    while (1) 
    {
		switch(program_mode){
			case MAIN_MODE:
				do_normal_program();
    136a:	0e 94 12 08 	call	0x1024	; 0x1024 <do_normal_program>
				break;
    136e:	f4 cf       	rjmp	.-24     	; 0x1358 <main+0x40>

00001370 <uart_send_line>:

bool uart_receive_byte(uint8_t* buffer){
	if(!( UCSR0A & (1<<RXC0))) return false;
	*buffer = UDR0;
	return true;
}
    1370:	fc 01       	movw	r30, r24
    1372:	91 91       	ld	r25, Z+
    1374:	99 23       	and	r25, r25
    1376:	39 f0       	breq	.+14     	; 0x1386 <uart_send_line+0x16>
    1378:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
    137c:	85 ff       	sbrs	r24, 5
    137e:	fc cf       	rjmp	.-8      	; 0x1378 <uart_send_line+0x8>
    1380:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    1384:	f6 cf       	rjmp	.-20     	; 0x1372 <uart_send_line+0x2>
    1386:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
    138a:	85 ff       	sbrs	r24, 5
    138c:	fc cf       	rjmp	.-8      	; 0x1386 <uart_send_line+0x16>
    138e:	8a e0       	ldi	r24, 0x0A	; 10
    1390:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    1394:	08 95       	ret

00001396 <uart_flush>:

void uart_flush(){
	uint8_t dummy;
	while ( UCSR0A & (1<<RXC0) ) dummy = UDR0;
    1396:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
    139a:	87 ff       	sbrs	r24, 7
    139c:	03 c0       	rjmp	.+6      	; 0x13a4 <uart_flush+0xe>
    139e:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    13a2:	f9 cf       	rjmp	.-14     	; 0x1396 <uart_flush>
}
    13a4:	08 95       	ret

000013a6 <uart_init>:

void uart_init(){
	UBRR0 = 0;		//0==500000 baud rate.  12==38400 baud rate
    13a6:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
    13aa:	10 92 c4 00 	sts	0x00C4, r1	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UCSR0B = (1<<RXEN0)|(1<<TXEN0)|(1<<RXCIE0);
    13ae:	88 e9       	ldi	r24, 0x98	; 152
    13b0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	/* Set frame format: 8data, 1stop bit */
	UCSR0C = (0<<USBS0)|(3<<UCSZ00);
    13b4:	86 e0       	ldi	r24, 0x06	; 6
    13b6:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
    13ba:	08 95       	ret

000013bc <adc_init>:

/************************************************************************/
/* Initializes the MCU ADC with 100KHz clock and with ports 0-3 enabled */
/************************************************************************/
void adc_init(){
	DDRC &= ~((1<<1)|(1<<0)|(1<<2));					//Enable input on ADC-ports
    13bc:	87 b1       	in	r24, 0x07	; 7
    13be:	88 7f       	andi	r24, 0xF8	; 248
    13c0:	87 b9       	out	0x07, r24	; 7
	ADCSRA = (1<<ADEN)|(1<<ADPS1)|(1<<ADPS2);   //ADC-clock F_CPU/64
    13c2:	86 e8       	ldi	r24, 0x86	; 134
    13c4:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
	DIDR0 = (1<<ADC5D)|(1<<ADC4D)|(1<<ADC3D);	//Disable unused ADC-ports			
    13c8:	88 e3       	ldi	r24, 0x38	; 56
    13ca:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7f807e>
	ADCSRB = 0;									//No auto trigger
    13ce:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
    13d2:	08 95       	ret

000013d4 <read_adc>:
/* the ADC-value from ADCH and ADCL										*/
/* @param port The port to read from (0-3)								*/
/************************************************************************/
uint16_t read_adc(uint8_t port){
	//Choose port and reference voltage
	ADMUX = port|(1<<REFS0);
    13d4:	80 64       	ori	r24, 0x40	; 64
    13d6:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	//Start conversion
	ADCSRA |= 1<<ADSC;
    13da:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    13de:	80 64       	ori	r24, 0x40	; 64
    13e0:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
	//Wait for completion and return result
	while( ADCSRA & 1<<ADSC);
    13e4:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    13e8:	86 fd       	sbrc	r24, 6
    13ea:	fc cf       	rjmp	.-8      	; 0x13e4 <read_adc+0x10>
	return ADC;
    13ec:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
    13f0:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
    13f4:	08 95       	ret

000013f6 <read_avg_adc>:
/* the average ADC-value from ADCH and ADCL	from the given amount		*/
/* of iterations														*/
/* @param port The port to read from (0-3)								*/
/* @param iterations The amount of iterations to take average from		*/
/************************************************************************/
uint16_t read_avg_adc(uint8_t port, uint16_t iterations){
    13f6:	9b 01       	movw	r18, r22
	//Choose port and reference voltage
	ADMUX = port|(1<<REFS0);
    13f8:	80 64       	ori	r24, 0x40	; 64
    13fa:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	uint32_t sum = 0;
	//Start given amount of conversions and add up results
	for (uint8_t i = 0; i < iterations; i++){
    13fe:	40 e0       	ldi	r20, 0x00	; 0
/* @param iterations The amount of iterations to take average from		*/
/************************************************************************/
uint16_t read_avg_adc(uint8_t port, uint16_t iterations){
	//Choose port and reference voltage
	ADMUX = port|(1<<REFS0);
	uint32_t sum = 0;
    1400:	60 e0       	ldi	r22, 0x00	; 0
    1402:	70 e0       	ldi	r23, 0x00	; 0
    1404:	cb 01       	movw	r24, r22
	//Start given amount of conversions and add up results
	for (uint8_t i = 0; i < iterations; i++){
    1406:	e4 2f       	mov	r30, r20
    1408:	f0 e0       	ldi	r31, 0x00	; 0
    140a:	e2 17       	cp	r30, r18
    140c:	f3 07       	cpc	r31, r19
    140e:	98 f4       	brcc	.+38     	; 0x1436 <read_avg_adc+0x40>
		ADCSRA |= 1<<ADSC;
    1410:	50 91 7a 00 	lds	r21, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    1414:	50 64       	ori	r21, 0x40	; 64
    1416:	50 93 7a 00 	sts	0x007A, r21	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
		while( ADCSRA & 1<<ADSC);
    141a:	50 91 7a 00 	lds	r21, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    141e:	56 fd       	sbrc	r21, 6
    1420:	fc cf       	rjmp	.-8      	; 0x141a <read_avg_adc+0x24>
		sum += ADC;
    1422:	e0 91 78 00 	lds	r30, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
    1426:	f0 91 79 00 	lds	r31, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
    142a:	6e 0f       	add	r22, r30
    142c:	7f 1f       	adc	r23, r31
    142e:	81 1d       	adc	r24, r1
    1430:	91 1d       	adc	r25, r1
uint16_t read_avg_adc(uint8_t port, uint16_t iterations){
	//Choose port and reference voltage
	ADMUX = port|(1<<REFS0);
	uint32_t sum = 0;
	//Start given amount of conversions and add up results
	for (uint8_t i = 0; i < iterations; i++){
    1432:	4f 5f       	subi	r20, 0xFF	; 255
    1434:	e8 cf       	rjmp	.-48     	; 0x1406 <read_avg_adc+0x10>
		ADCSRA |= 1<<ADSC;
		while( ADCSRA & 1<<ADSC);
		sum += ADC;
	}
	//Return truncated average
	return (uint16_t)(sum/iterations);
    1436:	40 e0       	ldi	r20, 0x00	; 0
    1438:	50 e0       	ldi	r21, 0x00	; 0
    143a:	0e 94 e3 0f 	call	0x1fc6	; 0x1fc6 <__udivmodsi4>
    143e:	c9 01       	movw	r24, r18
    1440:	08 95       	ret

00001442 <spi_tx>:
		spi_tx(rows[i]);
		_delay_us(30);
	}
	PORTB &= ~(1<<RS);
	PORTB |= 1<<CSB;
}
    1442:	8e bd       	out	0x2e, r24	; 46
    1444:	0d b4       	in	r0, 0x2d	; 45
    1446:	07 fe       	sbrs	r0, 7
    1448:	fd cf       	rjmp	.-6      	; 0x1444 <spi_tx+0x2>
    144a:	08 95       	ret

0000144c <lcd_init>:
    144c:	cf 93       	push	r28
    144e:	df 93       	push	r29
    1450:	84 b1       	in	r24, 0x04	; 4
    1452:	85 60       	ori	r24, 0x05	; 5
    1454:	84 b9       	out	0x04, r24	; 4
    1456:	85 b1       	in	r24, 0x05	; 5
    1458:	8a 7f       	andi	r24, 0xFA	; 250
    145a:	85 b9       	out	0x05, r24	; 5
    145c:	c2 e1       	ldi	r28, 0x12	; 18
    145e:	d1 e0       	ldi	r29, 0x01	; 1
    1460:	fe 01       	movw	r30, r28
    1462:	84 91       	lpm	r24, Z
    1464:	0e 94 21 0a 	call	0x1442	; 0x1442 <spi_tx>
    1468:	87 eb       	ldi	r24, 0xB7	; 183
    146a:	9b e0       	ldi	r25, 0x0B	; 11
    146c:	01 97       	sbiw	r24, 0x01	; 1
    146e:	f1 f7       	brne	.-4      	; 0x146c <lcd_init+0x20>
    1470:	00 c0       	rjmp	.+0      	; 0x1472 <lcd_init+0x26>
    1472:	00 00       	nop
    1474:	21 96       	adiw	r28, 0x01	; 1
    1476:	91 e0       	ldi	r25, 0x01	; 1
    1478:	cb 31       	cpi	r28, 0x1B	; 27
    147a:	d9 07       	cpc	r29, r25
    147c:	89 f7       	brne	.-30     	; 0x1460 <lcd_init+0x14>
    147e:	10 92 c4 02 	sts	0x02C4, r1	; 0x8002c4 <cursor_pos>
    1482:	2a 9a       	sbi	0x05, 2	; 5
    1484:	df 91       	pop	r29
    1486:	cf 91       	pop	r28
    1488:	08 95       	ret

0000148a <write_lcd_char>:
    148a:	28 9a       	sbi	0x05, 0	; 5
    148c:	2a 98       	cbi	0x05, 2	; 5
    148e:	0e 94 21 0a 	call	0x1442	; 0x1442 <spi_tx>
    1492:	80 e5       	ldi	r24, 0x50	; 80
    1494:	8a 95       	dec	r24
    1496:	f1 f7       	brne	.-4      	; 0x1494 <write_lcd_char+0xa>
    1498:	28 98       	cbi	0x05, 0	; 5
    149a:	2a 9a       	sbi	0x05, 2	; 5
    149c:	80 91 c4 02 	lds	r24, 0x02C4	; 0x8002c4 <cursor_pos>
    14a0:	8f 5f       	subi	r24, 0xFF	; 255
    14a2:	80 93 c4 02 	sts	0x02C4, r24	; 0x8002c4 <cursor_pos>
    14a6:	08 95       	ret

000014a8 <write_lcd_string>:
    14a8:	cf 93       	push	r28
    14aa:	df 93       	push	r29
    14ac:	28 9a       	sbi	0x05, 0	; 5
    14ae:	2a 98       	cbi	0x05, 2	; 5
    14b0:	ec 01       	movw	r28, r24
    14b2:	89 91       	ld	r24, Y+
    14b4:	88 23       	and	r24, r24
    14b6:	59 f0       	breq	.+22     	; 0x14ce <write_lcd_string+0x26>
    14b8:	0e 94 21 0a 	call	0x1442	; 0x1442 <spi_tx>
    14bc:	80 e5       	ldi	r24, 0x50	; 80
    14be:	8a 95       	dec	r24
    14c0:	f1 f7       	brne	.-4      	; 0x14be <write_lcd_string+0x16>
    14c2:	80 91 c4 02 	lds	r24, 0x02C4	; 0x8002c4 <cursor_pos>
    14c6:	8f 5f       	subi	r24, 0xFF	; 255
    14c8:	80 93 c4 02 	sts	0x02C4, r24	; 0x8002c4 <cursor_pos>
    14cc:	f2 cf       	rjmp	.-28     	; 0x14b2 <write_lcd_string+0xa>
    14ce:	28 98       	cbi	0x05, 0	; 5
    14d0:	2a 9a       	sbi	0x05, 2	; 5
    14d2:	df 91       	pop	r29
    14d4:	cf 91       	pop	r28
    14d6:	08 95       	ret

000014d8 <clear_LCD>:
    14d8:	2a 98       	cbi	0x05, 2	; 5
    14da:	81 e0       	ldi	r24, 0x01	; 1
    14dc:	0e 94 21 0a 	call	0x1442	; 0x1442 <spi_tx>
    14e0:	87 eb       	ldi	r24, 0xB7	; 183
    14e2:	9b e0       	ldi	r25, 0x0B	; 11
    14e4:	01 97       	sbiw	r24, 0x01	; 1
    14e6:	f1 f7       	brne	.-4      	; 0x14e4 <clear_LCD+0xc>
    14e8:	00 c0       	rjmp	.+0      	; 0x14ea <clear_LCD+0x12>
    14ea:	00 00       	nop
    14ec:	10 92 c4 02 	sts	0x02C4, r1	; 0x8002c4 <cursor_pos>
    14f0:	08 95       	ret

000014f2 <set_cursor_pos>:
    14f2:	cf 93       	push	r28
    14f4:	c8 2f       	mov	r28, r24
    14f6:	2a 98       	cbi	0x05, 2	; 5
    14f8:	80 68       	ori	r24, 0x80	; 128
    14fa:	0e 94 21 0a 	call	0x1442	; 0x1442 <spi_tx>
    14fe:	80 e5       	ldi	r24, 0x50	; 80
    1500:	8a 95       	dec	r24
    1502:	f1 f7       	brne	.-4      	; 0x1500 <set_cursor_pos+0xe>
    1504:	c0 93 c4 02 	sts	0x02C4, r28	; 0x8002c4 <cursor_pos>
    1508:	cf 91       	pop	r28
    150a:	08 95       	ret

0000150c <clear_line>:
    150c:	cf 93       	push	r28
    150e:	82 95       	swap	r24
    1510:	80 7f       	andi	r24, 0xF0	; 240
    1512:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <set_cursor_pos>
    1516:	28 9a       	sbi	0x05, 0	; 5
    1518:	2a 98       	cbi	0x05, 2	; 5
    151a:	c0 e1       	ldi	r28, 0x10	; 16
    151c:	80 e2       	ldi	r24, 0x20	; 32
    151e:	0e 94 21 0a 	call	0x1442	; 0x1442 <spi_tx>
    1522:	80 e5       	ldi	r24, 0x50	; 80
    1524:	8a 95       	dec	r24
    1526:	f1 f7       	brne	.-4      	; 0x1524 <clear_line+0x18>
    1528:	80 91 c4 02 	lds	r24, 0x02C4	; 0x8002c4 <cursor_pos>
    152c:	8f 5f       	subi	r24, 0xFF	; 255
    152e:	80 93 c4 02 	sts	0x02C4, r24	; 0x8002c4 <cursor_pos>
    1532:	c1 50       	subi	r28, 0x01	; 1
    1534:	99 f7       	brne	.-26     	; 0x151c <clear_line+0x10>
    1536:	28 98       	cbi	0x05, 0	; 5
    1538:	2a 9a       	sbi	0x05, 2	; 5
    153a:	cf 91       	pop	r28
    153c:	08 95       	ret

0000153e <set_character_pgm>:

void set_character_pgm(uint8_t char_code, const uint8_t rows[8]){
    153e:	0f 93       	push	r16
    1540:	1f 93       	push	r17
    1542:	cf 93       	push	r28
    1544:	df 93       	push	r29
	PORTB &= ~(1<<CSB);   //Clear CSB
    1546:	2a 98       	cbi	0x05, 2	; 5
    1548:	28 e0       	ldi	r18, 0x08	; 8
    154a:	82 9f       	mul	r24, r18
    154c:	c0 01       	movw	r24, r0
    154e:	11 24       	eor	r1, r1
    1550:	08 2f       	mov	r16, r24
    1552:	00 64       	ori	r16, 0x40	; 64
    1554:	eb 01       	movw	r28, r22
	for (uint8_t i = 0; i < 8; i++){
    1556:	10 e0       	ldi	r17, 0x00	; 0
		//Set CGRAM address
		PORTB &= ~(1<<RS);
    1558:	28 98       	cbi	0x05, 0	; 5
		spi_tx(0x40|(char_code<<3)|(i));
    155a:	80 2f       	mov	r24, r16
    155c:	81 2b       	or	r24, r17
    155e:	0e 94 21 0a 	call	0x1442	; 0x1442 <spi_tx>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1562:	80 e5       	ldi	r24, 0x50	; 80
    1564:	8a 95       	dec	r24
    1566:	f1 f7       	brne	.-4      	; 0x1564 <set_character_pgm+0x26>
		_delay_us(30);
		//Write row to character
		PORTB |= 1<<RS;
    1568:	28 9a       	sbi	0x05, 0	; 5
		spi_tx(pgm_read_byte(&(rows[i])));
    156a:	fe 01       	movw	r30, r28
    156c:	84 91       	lpm	r24, Z
    156e:	0e 94 21 0a 	call	0x1442	; 0x1442 <spi_tx>
    1572:	f0 e5       	ldi	r31, 0x50	; 80
    1574:	fa 95       	dec	r31
    1576:	f1 f7       	brne	.-4      	; 0x1574 <set_character_pgm+0x36>
	PORTB |= 1<<CSB;
}

void set_character_pgm(uint8_t char_code, const uint8_t rows[8]){
	PORTB &= ~(1<<CSB);   //Clear CSB
	for (uint8_t i = 0; i < 8; i++){
    1578:	1f 5f       	subi	r17, 0xFF	; 255
    157a:	21 96       	adiw	r28, 0x01	; 1
    157c:	18 30       	cpi	r17, 0x08	; 8
    157e:	61 f7       	brne	.-40     	; 0x1558 <set_character_pgm+0x1a>
		//Write row to character
		PORTB |= 1<<RS;
		spi_tx(pgm_read_byte(&(rows[i])));
		_delay_us(30);
	}
	PORTB &= ~(1<<RS);
    1580:	28 98       	cbi	0x05, 0	; 5
	PORTB |= 1<<CSB;
    1582:	2a 9a       	sbi	0x05, 2	; 5
}
    1584:	df 91       	pop	r29
    1586:	cf 91       	pop	r28
    1588:	1f 91       	pop	r17
    158a:	0f 91       	pop	r16
    158c:	08 95       	ret

0000158e <messages_timerproc>:
/*bool for tracking if any message is active*/
static volatile bool message_displaying = false;

/*Keeps time running and clears buffer on deactivation of a message*/
void messages_timerproc(){
	if(message_displaying && ++message_parts > 100){
    158e:	80 91 c5 02 	lds	r24, 0x02C5	; 0x8002c5 <message_displaying>
    1592:	88 23       	and	r24, r24
    1594:	19 f1       	breq	.+70     	; 0x15dc <messages_timerproc+0x4e>
    1596:	80 91 52 03 	lds	r24, 0x0352	; 0x800352 <message_parts>
    159a:	90 91 53 03 	lds	r25, 0x0353	; 0x800353 <message_parts+0x1>
    159e:	01 96       	adiw	r24, 0x01	; 1
    15a0:	90 93 53 03 	sts	0x0353, r25	; 0x800353 <message_parts+0x1>
    15a4:	80 93 52 03 	sts	0x0352, r24	; 0x800352 <message_parts>
    15a8:	85 36       	cpi	r24, 0x65	; 101
    15aa:	91 05       	cpc	r25, r1
    15ac:	b8 f0       	brcs	.+46     	; 0x15dc <messages_timerproc+0x4e>
		if(++message_seconds > DISP_TIME){
    15ae:	80 91 51 03 	lds	r24, 0x0351	; 0x800351 <message_seconds>
    15b2:	8f 5f       	subi	r24, 0xFF	; 255
    15b4:	80 93 51 03 	sts	0x0351, r24	; 0x800351 <message_seconds>
    15b8:	86 30       	cpi	r24, 0x06	; 6
    15ba:	60 f0       	brcs	.+24     	; 0x15d4 <messages_timerproc+0x46>
			message_seconds = 0;
    15bc:	10 92 51 03 	sts	0x0351, r1	; 0x800351 <message_seconds>
			message_displaying = false;
    15c0:	10 92 c5 02 	sts	0x02C5, r1	; 0x8002c5 <message_displaying>
			strcpy((char*)output_buf, "");
    15c4:	66 e9       	ldi	r22, 0x96	; 150
    15c6:	71 e0       	ldi	r23, 0x01	; 1
    15c8:	82 eb       	ldi	r24, 0xB2	; 178
    15ca:	93 e0       	ldi	r25, 0x03	; 3
    15cc:	0e 94 24 10 	call	0x2048	; 0x2048 <strcpy>
			output_buf_read = false;
    15d0:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <output_buf_read>
		}
		message_parts = 0;
    15d4:	10 92 53 03 	sts	0x0353, r1	; 0x800353 <message_parts+0x1>
    15d8:	10 92 52 03 	sts	0x0352, r1	; 0x800352 <message_parts>
    15dc:	08 95       	ret

000015de <messages_force>:
	}
}

/*Forces a message to be copied into buffer and marks buffer as changed*/
void messages_force(char* msg){
	message_displaying = true;
    15de:	21 e0       	ldi	r18, 0x01	; 1
    15e0:	20 93 c5 02 	sts	0x02C5, r18	; 0x8002c5 <message_displaying>
	/*Reset time counter to display for full time*/
	message_parts = 0;
    15e4:	10 92 53 03 	sts	0x0353, r1	; 0x800353 <message_parts+0x1>
    15e8:	10 92 52 03 	sts	0x0352, r1	; 0x800352 <message_parts>
	message_seconds = 0;
    15ec:	10 92 51 03 	sts	0x0351, r1	; 0x800351 <message_seconds>
	strcpy((char*)output_buf, msg);
    15f0:	bc 01       	movw	r22, r24
    15f2:	82 eb       	ldi	r24, 0xB2	; 178
    15f4:	93 e0       	ldi	r25, 0x03	; 3
    15f6:	0e 94 24 10 	call	0x2048	; 0x2048 <strcpy>
	output_buf_read = false;
    15fa:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <output_buf_read>
    15fe:	08 95       	ret

00001600 <messages_queue>:
}

/*Queues a message. Forces front most message out of queue if queue is full*/
void messages_queue(char* msg){
    1600:	cf 93       	push	r28
    1602:	df 93       	push	r29
    1604:	ec 01       	movw	r28, r24
	if(message_count == MSGBUF_SIZE){
    1606:	80 91 c6 02 	lds	r24, 0x02C6	; 0x8002c6 <message_count>
    160a:	88 30       	cpi	r24, 0x08	; 8
    160c:	81 f4       	brne	.+32     	; 0x162e <messages_queue+0x2e>
		messages_force((char*)(message_buf)[MOD_BUFSIZE(message_extract_ind++)]);
    160e:	80 91 c7 02 	lds	r24, 0x02C7	; 0x8002c7 <message_extract_ind>
    1612:	91 e0       	ldi	r25, 0x01	; 1
    1614:	98 0f       	add	r25, r24
    1616:	90 93 c7 02 	sts	0x02C7, r25	; 0x8002c7 <message_extract_ind>
    161a:	87 70       	andi	r24, 0x07	; 7
    161c:	21 e1       	ldi	r18, 0x11	; 17
    161e:	82 9f       	mul	r24, r18
    1620:	c0 01       	movw	r24, r0
    1622:	11 24       	eor	r1, r1
    1624:	87 53       	subi	r24, 0x37	; 55
    1626:	9d 4f       	sbci	r25, 0xFD	; 253
    1628:	0e 94 ef 0a 	call	0x15de	; 0x15de <messages_force>
    162c:	0a c0       	rjmp	.+20     	; 0x1642 <messages_queue+0x42>
	} else if(++message_count > MSGBUF_SIZE) message_count = MSGBUF_SIZE;
    162e:	80 91 c6 02 	lds	r24, 0x02C6	; 0x8002c6 <message_count>
    1632:	8f 5f       	subi	r24, 0xFF	; 255
    1634:	80 93 c6 02 	sts	0x02C6, r24	; 0x8002c6 <message_count>
    1638:	89 30       	cpi	r24, 0x09	; 9
    163a:	18 f0       	brcs	.+6      	; 0x1642 <messages_queue+0x42>
    163c:	88 e0       	ldi	r24, 0x08	; 8
    163e:	80 93 c6 02 	sts	0x02C6, r24	; 0x8002c6 <message_count>
	strcpy((char*)(message_buf)[MOD_BUFSIZE(message_insert_ind++)], msg);
    1642:	80 91 c8 02 	lds	r24, 0x02C8	; 0x8002c8 <message_insert_ind>
    1646:	91 e0       	ldi	r25, 0x01	; 1
    1648:	98 0f       	add	r25, r24
    164a:	90 93 c8 02 	sts	0x02C8, r25	; 0x8002c8 <message_insert_ind>
    164e:	87 70       	andi	r24, 0x07	; 7
    1650:	21 e1       	ldi	r18, 0x11	; 17
    1652:	82 9f       	mul	r24, r18
    1654:	c0 01       	movw	r24, r0
    1656:	11 24       	eor	r1, r1
    1658:	be 01       	movw	r22, r28
    165a:	87 53       	subi	r24, 0x37	; 55
    165c:	9d 4f       	sbci	r25, 0xFD	; 253
}
    165e:	df 91       	pop	r29
    1660:	cf 91       	pop	r28
/*Queues a message. Forces front most message out of queue if queue is full*/
void messages_queue(char* msg){
	if(message_count == MSGBUF_SIZE){
		messages_force((char*)(message_buf)[MOD_BUFSIZE(message_extract_ind++)]);
	} else if(++message_count > MSGBUF_SIZE) message_count = MSGBUF_SIZE;
	strcpy((char*)(message_buf)[MOD_BUFSIZE(message_insert_ind++)], msg);
    1662:	0c 94 24 10 	jmp	0x2048	; 0x2048 <strcpy>

00001666 <messages_move_queue>:
}

/*Moves queue along if no message is active*/
void messages_move_queue(){
	if(message_count > 0 && !message_displaying){
    1666:	80 91 c6 02 	lds	r24, 0x02C6	; 0x8002c6 <message_count>
    166a:	88 23       	and	r24, r24
    166c:	f9 f0       	breq	.+62     	; 0x16ac <messages_move_queue+0x46>
    166e:	80 91 c5 02 	lds	r24, 0x02C5	; 0x8002c5 <message_displaying>
    1672:	81 11       	cpse	r24, r1
    1674:	1b c0       	rjmp	.+54     	; 0x16ac <messages_move_queue+0x46>
		/*Copy next message to output buffer and increment/decremnt index and counter*/
		strcpy((char*)output_buf, (char*)(message_buf)[MOD_BUFSIZE(message_extract_ind++)]);
    1676:	60 91 c7 02 	lds	r22, 0x02C7	; 0x8002c7 <message_extract_ind>
    167a:	81 e0       	ldi	r24, 0x01	; 1
    167c:	86 0f       	add	r24, r22
    167e:	80 93 c7 02 	sts	0x02C7, r24	; 0x8002c7 <message_extract_ind>
    1682:	67 70       	andi	r22, 0x07	; 7
    1684:	81 e1       	ldi	r24, 0x11	; 17
    1686:	68 9f       	mul	r22, r24
    1688:	b0 01       	movw	r22, r0
    168a:	11 24       	eor	r1, r1
    168c:	67 53       	subi	r22, 0x37	; 55
    168e:	7d 4f       	sbci	r23, 0xFD	; 253
    1690:	82 eb       	ldi	r24, 0xB2	; 178
    1692:	93 e0       	ldi	r25, 0x03	; 3
    1694:	0e 94 24 10 	call	0x2048	; 0x2048 <strcpy>
		output_buf_read = false;
    1698:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <output_buf_read>
		message_displaying = true;
    169c:	81 e0       	ldi	r24, 0x01	; 1
    169e:	80 93 c5 02 	sts	0x02C5, r24	; 0x8002c5 <message_displaying>
		message_count--;
    16a2:	80 91 c6 02 	lds	r24, 0x02C6	; 0x8002c6 <message_count>
    16a6:	81 50       	subi	r24, 0x01	; 1
    16a8:	80 93 c6 02 	sts	0x02C6, r24	; 0x8002c6 <message_count>
    16ac:	08 95       	ret

000016ae <messages_get_buffer>:
	}
}

/*Mark buffer as read and return pointer to buffer*/
volatile char* messages_get_buffer(){
	output_buf_read = true;
    16ae:	81 e0       	ldi	r24, 0x01	; 1
    16b0:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <output_buf_read>
	return output_buf;
    16b4:	82 eb       	ldi	r24, 0xB2	; 178
    16b6:	93 e0       	ldi	r25, 0x03	; 3
    16b8:	08 95       	ret

000016ba <spi_init>:
/************************************************************************/
/* Initiates the MCU SPI as master with 16 as prescaler factor           */
/************************************************************************/
void spi_init(){
	// Set MOSI and SCK as out
	DDRB |= (1<<MOSI) | (1<<SCK) | (1<<SS);
    16ba:	84 b1       	in	r24, 0x04	; 4
    16bc:	8c 62       	ori	r24, 0x2C	; 44
    16be:	84 b9       	out	0x04, r24	; 4
	DDRB &= ~(1<<MISO);
    16c0:	24 98       	cbi	0x04, 4	; 4
	//Enable SPI in master mode with fck/4 as clock
	SPCR = (1<<SPE) | (1<<MSTR);
    16c2:	80 e5       	ldi	r24, 0x50	; 80
    16c4:	8c bd       	out	0x2c, r24	; 44
    16c6:	08 95       	ret

000016c8 <Summer_PlayNote>:
static volatile uint16_t note_time = 0; // The timer cycles left for current note
static volatile uint8_t cur_melody;     // The index of the current melody
static volatile uint8_t current_note;   // The index of the curent note

// Plays a single note on the buzzer
void Summer_PlayNote(uint8_t note){
    16c8:	cf 92       	push	r12
    16ca:	df 92       	push	r13
    16cc:	ef 92       	push	r14
    16ce:	ff 92       	push	r15
    16d0:	cf 93       	push	r28
    16d2:	df 93       	push	r29
    16d4:	d8 2f       	mov	r29, r24
    if(GET_PITCH_EXP(note) == -1){  // Stop buzzer if note is a rest
    16d6:	68 2f       	mov	r22, r24
    16d8:	70 e0       	ldi	r23, 0x00	; 0
    16da:	6f 71       	andi	r22, 0x1F	; 31
#ifdef SUMMER_USE_SW
        rest = true;
#else
        TCCR1A &= ~(1<<COM1A0);
    16dc:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
static volatile uint8_t cur_melody;     // The index of the current melody
static volatile uint8_t current_note;   // The index of the curent note

// Plays a single note on the buzzer
void Summer_PlayNote(uint8_t note){
    if(GET_PITCH_EXP(note) == -1){  // Stop buzzer if note is a rest
    16e0:	61 15       	cp	r22, r1
    16e2:	71 05       	cpc	r23, r1
    16e4:	21 f4       	brne	.+8      	; 0x16ee <Summer_PlayNote+0x26>
#ifdef SUMMER_USE_SW
        rest = true;
#else
        TCCR1A &= ~(1<<COM1A0);
    16e6:	8f 7b       	andi	r24, 0xBF	; 191
    16e8:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    16ec:	21 c0       	rjmp	.+66     	; 0x1730 <Summer_PlayNote+0x68>
#endif
    } else{                         // Start buzzer and set correct frequency
#ifdef SUMMER_USE_SW
        rest = false;
#else
        TCCR1A |= (1<<COM1A0);
    16ee:	80 64       	ori	r24, 0x40	; 64
    16f0:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
#endif
        OCR1A = LOWC_OCR / (pow(ROOT12_2,GET_PITCH_EXP(note)));
    16f4:	61 50       	subi	r22, 0x01	; 1
    16f6:	71 09       	sbc	r23, r1
    16f8:	07 2e       	mov	r0, r23
    16fa:	00 0c       	add	r0, r0
    16fc:	88 0b       	sbc	r24, r24
    16fe:	99 0b       	sbc	r25, r25
    1700:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <__floatsisf>
    1704:	9b 01       	movw	r18, r22
    1706:	ac 01       	movw	r20, r24
    1708:	6d e7       	ldi	r22, 0x7D	; 125
    170a:	7c e9       	ldi	r23, 0x9C	; 156
    170c:	87 e8       	ldi	r24, 0x87	; 135
    170e:	9f e3       	ldi	r25, 0x3F	; 63
    1710:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <pow>
    1714:	9b 01       	movw	r18, r22
    1716:	ac 01       	movw	r20, r24
    1718:	60 e0       	ldi	r22, 0x00	; 0
    171a:	70 e6       	ldi	r23, 0x60	; 96
    171c:	80 e7       	ldi	r24, 0x70	; 112
    171e:	96 e4       	ldi	r25, 0x46	; 70
    1720:	0e 94 55 0c 	call	0x18aa	; 0x18aa <__divsf3>
    1724:	0e 94 c7 0c 	call	0x198e	; 0x198e <__fixunssfsi>
    1728:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    172c:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
    }
    // cycles needed = frequency / (bar time) / (note length divisor)
    note_time = ((F_CPU/(OCR1A + 1))/(bpms[cur_melody]/(240.0)))/GET_DURATION_DIV(note);
    1730:	20 91 88 00 	lds	r18, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
    1734:	30 91 89 00 	lds	r19, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    1738:	c0 91 55 03 	lds	r28, 0x0355	; 0x800355 <cur_melody>
    173c:	2f 5f       	subi	r18, 0xFF	; 255
    173e:	3f 4f       	sbci	r19, 0xFF	; 255
    1740:	40 e0       	ldi	r20, 0x00	; 0
    1742:	50 e0       	ldi	r21, 0x00	; 0
    1744:	60 e0       	ldi	r22, 0x00	; 0
    1746:	72 e1       	ldi	r23, 0x12	; 18
    1748:	8a e7       	ldi	r24, 0x7A	; 122
    174a:	90 e0       	ldi	r25, 0x00	; 0
    174c:	0e 94 05 10 	call	0x200a	; 0x200a <__divmodsi4>
    1750:	ca 01       	movw	r24, r20
    1752:	b9 01       	movw	r22, r18
    1754:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <__floatsisf>
    1758:	6b 01       	movw	r12, r22
    175a:	7c 01       	movw	r14, r24
    175c:	ec 2f       	mov	r30, r28
    175e:	f0 e0       	ldi	r31, 0x00	; 0
    1760:	e8 53       	subi	r30, 0x38	; 56
    1762:	fe 4f       	sbci	r31, 0xFE	; 254
    1764:	60 81       	ld	r22, Z
    1766:	70 e0       	ldi	r23, 0x00	; 0
    1768:	80 e0       	ldi	r24, 0x00	; 0
    176a:	90 e0       	ldi	r25, 0x00	; 0
    176c:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <__floatsisf>
    1770:	20 e0       	ldi	r18, 0x00	; 0
    1772:	30 e0       	ldi	r19, 0x00	; 0
    1774:	40 e7       	ldi	r20, 0x70	; 112
    1776:	53 e4       	ldi	r21, 0x43	; 67
    1778:	0e 94 55 0c 	call	0x18aa	; 0x18aa <__divsf3>
    177c:	9b 01       	movw	r18, r22
    177e:	ac 01       	movw	r20, r24
    1780:	c7 01       	movw	r24, r14
    1782:	b6 01       	movw	r22, r12
    1784:	0e 94 55 0c 	call	0x18aa	; 0x18aa <__divsf3>
    1788:	6b 01       	movw	r12, r22
    178a:	7c 01       	movw	r14, r24
    178c:	d2 95       	swap	r29
    178e:	d6 95       	lsr	r29
    1790:	d7 70       	andi	r29, 0x07	; 7
    1792:	61 e0       	ldi	r22, 0x01	; 1
    1794:	70 e0       	ldi	r23, 0x00	; 0
    1796:	02 c0       	rjmp	.+4      	; 0x179c <Summer_PlayNote+0xd4>
    1798:	66 0f       	add	r22, r22
    179a:	77 1f       	adc	r23, r23
    179c:	da 95       	dec	r29
    179e:	e2 f7       	brpl	.-8      	; 0x1798 <Summer_PlayNote+0xd0>
    17a0:	07 2e       	mov	r0, r23
    17a2:	00 0c       	add	r0, r0
    17a4:	88 0b       	sbc	r24, r24
    17a6:	99 0b       	sbc	r25, r25
    17a8:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <__floatsisf>
    17ac:	9b 01       	movw	r18, r22
    17ae:	ac 01       	movw	r20, r24
    17b0:	c7 01       	movw	r24, r14
    17b2:	b6 01       	movw	r22, r12
    17b4:	0e 94 55 0c 	call	0x18aa	; 0x18aa <__divsf3>
    17b8:	0e 94 c7 0c 	call	0x198e	; 0x198e <__fixunssfsi>
    17bc:	70 93 57 03 	sts	0x0357, r23	; 0x800357 <note_time+0x1>
    17c0:	60 93 56 03 	sts	0x0356, r22	; 0x800356 <note_time>
}
    17c4:	df 91       	pop	r29
    17c6:	cf 91       	pop	r28
    17c8:	ff 90       	pop	r15
    17ca:	ef 90       	pop	r14
    17cc:	df 90       	pop	r13
    17ce:	cf 90       	pop	r12
    17d0:	08 95       	ret

000017d2 <__vector_11>:

// Interrupt vector to play next note after the current notes length is passed
// Stops the melody when it encounters a 0xFF
ISR(TIMER1_COMPA_vect){
    17d2:	1f 92       	push	r1
    17d4:	0f 92       	push	r0
    17d6:	0f b6       	in	r0, 0x3f	; 63
    17d8:	0f 92       	push	r0
    17da:	11 24       	eor	r1, r1
    17dc:	2f 93       	push	r18
    17de:	3f 93       	push	r19
    17e0:	4f 93       	push	r20
    17e2:	5f 93       	push	r21
    17e4:	6f 93       	push	r22
    17e6:	7f 93       	push	r23
    17e8:	8f 93       	push	r24
    17ea:	9f 93       	push	r25
    17ec:	af 93       	push	r26
    17ee:	bf 93       	push	r27
    17f0:	ef 93       	push	r30
    17f2:	ff 93       	push	r31
    if(rest)
        SW_SUMMER_PORT &= ~(1<<SUMMER_PIN);
    else
        SW_SUMMER_PORT ^= (1<<SUMMER_PIN);
#endif
    note_time--; 
    17f4:	80 91 56 03 	lds	r24, 0x0356	; 0x800356 <note_time>
    17f8:	90 91 57 03 	lds	r25, 0x0357	; 0x800357 <note_time+0x1>
    17fc:	01 97       	sbiw	r24, 0x01	; 1
    17fe:	90 93 57 03 	sts	0x0357, r25	; 0x800357 <note_time+0x1>
    1802:	80 93 56 03 	sts	0x0356, r24	; 0x800356 <note_time>
    if (note_time == 0){
    1806:	80 91 56 03 	lds	r24, 0x0356	; 0x800356 <note_time>
    180a:	90 91 57 03 	lds	r25, 0x0357	; 0x800357 <note_time+0x1>
    180e:	89 2b       	or	r24, r25
    1810:	e9 f4       	brne	.+58     	; 0x184c <__vector_11+0x7a>
        current_note++;
    1812:	80 91 54 03 	lds	r24, 0x0354	; 0x800354 <current_note>
    1816:	8f 5f       	subi	r24, 0xFF	; 255
    1818:	80 93 54 03 	sts	0x0354, r24	; 0x800354 <current_note>
        // Read next note from program memory
        uint8_t note = pgm_read_byte(&(melodies[cur_melody][current_note]));
    181c:	e0 91 55 03 	lds	r30, 0x0355	; 0x800355 <cur_melody>
    1820:	80 91 54 03 	lds	r24, 0x0354	; 0x800354 <current_note>
    1824:	f0 e0       	ldi	r31, 0x00	; 0
    1826:	fe 2f       	mov	r31, r30
    1828:	ee 27       	eor	r30, r30
    182a:	e8 0f       	add	r30, r24
    182c:	f1 1d       	adc	r31, r1
    182e:	e5 5e       	subi	r30, 0xE5	; 229
    1830:	fe 4f       	sbci	r31, 0xFE	; 254
    1832:	84 91       	lpm	r24, Z
        if(note == 0x00){   // Stop buzzer if 0xFF
    1834:	81 11       	cpse	r24, r1
    1836:	08 c0       	rjmp	.+16     	; 0x1848 <__vector_11+0x76>
            TIMSK1 = 0;
    1838:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
            TCCR1B &= ~(1<<CS10);
    183c:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    1840:	8e 7f       	andi	r24, 0xFE	; 254
    1842:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    1846:	02 c0       	rjmp	.+4      	; 0x184c <__vector_11+0x7a>
#ifdef SUMMER_USE_SW
            SW_SUMMER_PORT &= ~(1<<SUMMER_PIN);
#endif
        } else
            Summer_PlayNote(note);
    1848:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <Summer_PlayNote>
    }
}
    184c:	ff 91       	pop	r31
    184e:	ef 91       	pop	r30
    1850:	bf 91       	pop	r27
    1852:	af 91       	pop	r26
    1854:	9f 91       	pop	r25
    1856:	8f 91       	pop	r24
    1858:	7f 91       	pop	r23
    185a:	6f 91       	pop	r22
    185c:	5f 91       	pop	r21
    185e:	4f 91       	pop	r20
    1860:	3f 91       	pop	r19
    1862:	2f 91       	pop	r18
    1864:	0f 90       	pop	r0
    1866:	0f be       	out	0x3f, r0	; 63
    1868:	0f 90       	pop	r0
    186a:	1f 90       	pop	r1
    186c:	18 95       	reti

0000186e <Summer_Init>:

// ------------- PUBLIC -------------

// Initializes the summer
void Summer_Init(void){
    SUMMER_DDR |= (1<<SUMMER_PIN);
    186e:	21 9a       	sbi	0x04, 1	; 4
    // Start timer
#ifdef SUMMER_USE_SW
    TCCR1A = 0;
#else
    TCCR1A = (1<<COM1A0);
    1870:	80 e4       	ldi	r24, 0x40	; 64
    1872:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
#endif
    TCCR1B = (1<<WGM12);
    1876:	88 e0       	ldi	r24, 0x08	; 8
    1878:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    187c:	08 95       	ret

0000187e <Summer_PlayMelody>:
}

// Plays a specified melody on the buzzer
void Summer_PlayMelody(uint8_t melody){
    cur_melody = melody;
    187e:	80 93 55 03 	sts	0x0355, r24	; 0x800355 <cur_melody>
    current_note = 0;
    1882:	10 92 54 03 	sts	0x0354, r1	; 0x800354 <current_note>
    Summer_PlayNote(pgm_read_byte(&(melodies[melody][0])));
    1886:	e8 2f       	mov	r30, r24
    1888:	f0 e0       	ldi	r31, 0x00	; 0
    188a:	fe 2f       	mov	r31, r30
    188c:	ee 27       	eor	r30, r30
    188e:	e5 5e       	subi	r30, 0xE5	; 229
    1890:	fe 4f       	sbci	r31, 0xFE	; 254
    1892:	84 91       	lpm	r24, Z
    1894:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <Summer_PlayNote>
    TIMSK1 = (1<<OCIE1A);
    1898:	82 e0       	ldi	r24, 0x02	; 2
    189a:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
    TCCR1B |= (1<<CS10);
    189e:	e1 e8       	ldi	r30, 0x81	; 129
    18a0:	f0 e0       	ldi	r31, 0x00	; 0
    18a2:	80 81       	ld	r24, Z
    18a4:	81 60       	ori	r24, 0x01	; 1
    18a6:	80 83       	st	Z, r24
    18a8:	08 95       	ret

000018aa <__divsf3>:
    18aa:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <__divsf3x>
    18ae:	0c 94 4a 0d 	jmp	0x1a94	; 0x1a94 <__fp_round>
    18b2:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <__fp_pscB>
    18b6:	58 f0       	brcs	.+22     	; 0x18ce <__divsf3+0x24>
    18b8:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <__fp_pscA>
    18bc:	40 f0       	brcs	.+16     	; 0x18ce <__divsf3+0x24>
    18be:	29 f4       	brne	.+10     	; 0x18ca <__divsf3+0x20>
    18c0:	5f 3f       	cpi	r21, 0xFF	; 255
    18c2:	29 f0       	breq	.+10     	; 0x18ce <__divsf3+0x24>
    18c4:	0c 94 33 0d 	jmp	0x1a66	; 0x1a66 <__fp_inf>
    18c8:	51 11       	cpse	r21, r1
    18ca:	0c 94 7e 0d 	jmp	0x1afc	; 0x1afc <__fp_szero>
    18ce:	0c 94 39 0d 	jmp	0x1a72	; 0x1a72 <__fp_nan>

000018d2 <__divsf3x>:
    18d2:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <__fp_split3>
    18d6:	68 f3       	brcs	.-38     	; 0x18b2 <__divsf3+0x8>

000018d8 <__divsf3_pse>:
    18d8:	99 23       	and	r25, r25
    18da:	b1 f3       	breq	.-20     	; 0x18c8 <__divsf3+0x1e>
    18dc:	55 23       	and	r21, r21
    18de:	91 f3       	breq	.-28     	; 0x18c4 <__divsf3+0x1a>
    18e0:	95 1b       	sub	r25, r21
    18e2:	55 0b       	sbc	r21, r21
    18e4:	bb 27       	eor	r27, r27
    18e6:	aa 27       	eor	r26, r26
    18e8:	62 17       	cp	r22, r18
    18ea:	73 07       	cpc	r23, r19
    18ec:	84 07       	cpc	r24, r20
    18ee:	38 f0       	brcs	.+14     	; 0x18fe <__divsf3_pse+0x26>
    18f0:	9f 5f       	subi	r25, 0xFF	; 255
    18f2:	5f 4f       	sbci	r21, 0xFF	; 255
    18f4:	22 0f       	add	r18, r18
    18f6:	33 1f       	adc	r19, r19
    18f8:	44 1f       	adc	r20, r20
    18fa:	aa 1f       	adc	r26, r26
    18fc:	a9 f3       	breq	.-22     	; 0x18e8 <__divsf3_pse+0x10>
    18fe:	35 d0       	rcall	.+106    	; 0x196a <__divsf3_pse+0x92>
    1900:	0e 2e       	mov	r0, r30
    1902:	3a f0       	brmi	.+14     	; 0x1912 <__divsf3_pse+0x3a>
    1904:	e0 e8       	ldi	r30, 0x80	; 128
    1906:	32 d0       	rcall	.+100    	; 0x196c <__divsf3_pse+0x94>
    1908:	91 50       	subi	r25, 0x01	; 1
    190a:	50 40       	sbci	r21, 0x00	; 0
    190c:	e6 95       	lsr	r30
    190e:	00 1c       	adc	r0, r0
    1910:	ca f7       	brpl	.-14     	; 0x1904 <__divsf3_pse+0x2c>
    1912:	2b d0       	rcall	.+86     	; 0x196a <__divsf3_pse+0x92>
    1914:	fe 2f       	mov	r31, r30
    1916:	29 d0       	rcall	.+82     	; 0x196a <__divsf3_pse+0x92>
    1918:	66 0f       	add	r22, r22
    191a:	77 1f       	adc	r23, r23
    191c:	88 1f       	adc	r24, r24
    191e:	bb 1f       	adc	r27, r27
    1920:	26 17       	cp	r18, r22
    1922:	37 07       	cpc	r19, r23
    1924:	48 07       	cpc	r20, r24
    1926:	ab 07       	cpc	r26, r27
    1928:	b0 e8       	ldi	r27, 0x80	; 128
    192a:	09 f0       	breq	.+2      	; 0x192e <__divsf3_pse+0x56>
    192c:	bb 0b       	sbc	r27, r27
    192e:	80 2d       	mov	r24, r0
    1930:	bf 01       	movw	r22, r30
    1932:	ff 27       	eor	r31, r31
    1934:	93 58       	subi	r25, 0x83	; 131
    1936:	5f 4f       	sbci	r21, 0xFF	; 255
    1938:	3a f0       	brmi	.+14     	; 0x1948 <__divsf3_pse+0x70>
    193a:	9e 3f       	cpi	r25, 0xFE	; 254
    193c:	51 05       	cpc	r21, r1
    193e:	78 f0       	brcs	.+30     	; 0x195e <__divsf3_pse+0x86>
    1940:	0c 94 33 0d 	jmp	0x1a66	; 0x1a66 <__fp_inf>
    1944:	0c 94 7e 0d 	jmp	0x1afc	; 0x1afc <__fp_szero>
    1948:	5f 3f       	cpi	r21, 0xFF	; 255
    194a:	e4 f3       	brlt	.-8      	; 0x1944 <__divsf3_pse+0x6c>
    194c:	98 3e       	cpi	r25, 0xE8	; 232
    194e:	d4 f3       	brlt	.-12     	; 0x1944 <__divsf3_pse+0x6c>
    1950:	86 95       	lsr	r24
    1952:	77 95       	ror	r23
    1954:	67 95       	ror	r22
    1956:	b7 95       	ror	r27
    1958:	f7 95       	ror	r31
    195a:	9f 5f       	subi	r25, 0xFF	; 255
    195c:	c9 f7       	brne	.-14     	; 0x1950 <__divsf3_pse+0x78>
    195e:	88 0f       	add	r24, r24
    1960:	91 1d       	adc	r25, r1
    1962:	96 95       	lsr	r25
    1964:	87 95       	ror	r24
    1966:	97 f9       	bld	r25, 7
    1968:	08 95       	ret
    196a:	e1 e0       	ldi	r30, 0x01	; 1
    196c:	66 0f       	add	r22, r22
    196e:	77 1f       	adc	r23, r23
    1970:	88 1f       	adc	r24, r24
    1972:	bb 1f       	adc	r27, r27
    1974:	62 17       	cp	r22, r18
    1976:	73 07       	cpc	r23, r19
    1978:	84 07       	cpc	r24, r20
    197a:	ba 07       	cpc	r27, r26
    197c:	20 f0       	brcs	.+8      	; 0x1986 <__divsf3_pse+0xae>
    197e:	62 1b       	sub	r22, r18
    1980:	73 0b       	sbc	r23, r19
    1982:	84 0b       	sbc	r24, r20
    1984:	ba 0b       	sbc	r27, r26
    1986:	ee 1f       	adc	r30, r30
    1988:	88 f7       	brcc	.-30     	; 0x196c <__divsf3_pse+0x94>
    198a:	e0 95       	com	r30
    198c:	08 95       	ret

0000198e <__fixunssfsi>:
    198e:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <__fp_splitA>
    1992:	88 f0       	brcs	.+34     	; 0x19b6 <__fixunssfsi+0x28>
    1994:	9f 57       	subi	r25, 0x7F	; 127
    1996:	98 f0       	brcs	.+38     	; 0x19be <__fixunssfsi+0x30>
    1998:	b9 2f       	mov	r27, r25
    199a:	99 27       	eor	r25, r25
    199c:	b7 51       	subi	r27, 0x17	; 23
    199e:	b0 f0       	brcs	.+44     	; 0x19cc <__fixunssfsi+0x3e>
    19a0:	e1 f0       	breq	.+56     	; 0x19da <__fixunssfsi+0x4c>
    19a2:	66 0f       	add	r22, r22
    19a4:	77 1f       	adc	r23, r23
    19a6:	88 1f       	adc	r24, r24
    19a8:	99 1f       	adc	r25, r25
    19aa:	1a f0       	brmi	.+6      	; 0x19b2 <__fixunssfsi+0x24>
    19ac:	ba 95       	dec	r27
    19ae:	c9 f7       	brne	.-14     	; 0x19a2 <__fixunssfsi+0x14>
    19b0:	14 c0       	rjmp	.+40     	; 0x19da <__fixunssfsi+0x4c>
    19b2:	b1 30       	cpi	r27, 0x01	; 1
    19b4:	91 f0       	breq	.+36     	; 0x19da <__fixunssfsi+0x4c>
    19b6:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <__fp_zero>
    19ba:	b1 e0       	ldi	r27, 0x01	; 1
    19bc:	08 95       	ret
    19be:	0c 94 7d 0d 	jmp	0x1afa	; 0x1afa <__fp_zero>
    19c2:	67 2f       	mov	r22, r23
    19c4:	78 2f       	mov	r23, r24
    19c6:	88 27       	eor	r24, r24
    19c8:	b8 5f       	subi	r27, 0xF8	; 248
    19ca:	39 f0       	breq	.+14     	; 0x19da <__fixunssfsi+0x4c>
    19cc:	b9 3f       	cpi	r27, 0xF9	; 249
    19ce:	cc f3       	brlt	.-14     	; 0x19c2 <__fixunssfsi+0x34>
    19d0:	86 95       	lsr	r24
    19d2:	77 95       	ror	r23
    19d4:	67 95       	ror	r22
    19d6:	b3 95       	inc	r27
    19d8:	d9 f7       	brne	.-10     	; 0x19d0 <__fixunssfsi+0x42>
    19da:	3e f4       	brtc	.+14     	; 0x19ea <__fixunssfsi+0x5c>
    19dc:	90 95       	com	r25
    19de:	80 95       	com	r24
    19e0:	70 95       	com	r23
    19e2:	61 95       	neg	r22
    19e4:	7f 4f       	sbci	r23, 0xFF	; 255
    19e6:	8f 4f       	sbci	r24, 0xFF	; 255
    19e8:	9f 4f       	sbci	r25, 0xFF	; 255
    19ea:	08 95       	ret

000019ec <__floatunsisf>:
    19ec:	e8 94       	clt
    19ee:	09 c0       	rjmp	.+18     	; 0x1a02 <__floatsisf+0x12>

000019f0 <__floatsisf>:
    19f0:	97 fb       	bst	r25, 7
    19f2:	3e f4       	brtc	.+14     	; 0x1a02 <__floatsisf+0x12>
    19f4:	90 95       	com	r25
    19f6:	80 95       	com	r24
    19f8:	70 95       	com	r23
    19fa:	61 95       	neg	r22
    19fc:	7f 4f       	sbci	r23, 0xFF	; 255
    19fe:	8f 4f       	sbci	r24, 0xFF	; 255
    1a00:	9f 4f       	sbci	r25, 0xFF	; 255
    1a02:	99 23       	and	r25, r25
    1a04:	a9 f0       	breq	.+42     	; 0x1a30 <__floatsisf+0x40>
    1a06:	f9 2f       	mov	r31, r25
    1a08:	96 e9       	ldi	r25, 0x96	; 150
    1a0a:	bb 27       	eor	r27, r27
    1a0c:	93 95       	inc	r25
    1a0e:	f6 95       	lsr	r31
    1a10:	87 95       	ror	r24
    1a12:	77 95       	ror	r23
    1a14:	67 95       	ror	r22
    1a16:	b7 95       	ror	r27
    1a18:	f1 11       	cpse	r31, r1
    1a1a:	f8 cf       	rjmp	.-16     	; 0x1a0c <__floatsisf+0x1c>
    1a1c:	fa f4       	brpl	.+62     	; 0x1a5c <__floatsisf+0x6c>
    1a1e:	bb 0f       	add	r27, r27
    1a20:	11 f4       	brne	.+4      	; 0x1a26 <__floatsisf+0x36>
    1a22:	60 ff       	sbrs	r22, 0
    1a24:	1b c0       	rjmp	.+54     	; 0x1a5c <__floatsisf+0x6c>
    1a26:	6f 5f       	subi	r22, 0xFF	; 255
    1a28:	7f 4f       	sbci	r23, 0xFF	; 255
    1a2a:	8f 4f       	sbci	r24, 0xFF	; 255
    1a2c:	9f 4f       	sbci	r25, 0xFF	; 255
    1a2e:	16 c0       	rjmp	.+44     	; 0x1a5c <__floatsisf+0x6c>
    1a30:	88 23       	and	r24, r24
    1a32:	11 f0       	breq	.+4      	; 0x1a38 <__floatsisf+0x48>
    1a34:	96 e9       	ldi	r25, 0x96	; 150
    1a36:	11 c0       	rjmp	.+34     	; 0x1a5a <__floatsisf+0x6a>
    1a38:	77 23       	and	r23, r23
    1a3a:	21 f0       	breq	.+8      	; 0x1a44 <__floatsisf+0x54>
    1a3c:	9e e8       	ldi	r25, 0x8E	; 142
    1a3e:	87 2f       	mov	r24, r23
    1a40:	76 2f       	mov	r23, r22
    1a42:	05 c0       	rjmp	.+10     	; 0x1a4e <__floatsisf+0x5e>
    1a44:	66 23       	and	r22, r22
    1a46:	71 f0       	breq	.+28     	; 0x1a64 <__floatsisf+0x74>
    1a48:	96 e8       	ldi	r25, 0x86	; 134
    1a4a:	86 2f       	mov	r24, r22
    1a4c:	70 e0       	ldi	r23, 0x00	; 0
    1a4e:	60 e0       	ldi	r22, 0x00	; 0
    1a50:	2a f0       	brmi	.+10     	; 0x1a5c <__floatsisf+0x6c>
    1a52:	9a 95       	dec	r25
    1a54:	66 0f       	add	r22, r22
    1a56:	77 1f       	adc	r23, r23
    1a58:	88 1f       	adc	r24, r24
    1a5a:	da f7       	brpl	.-10     	; 0x1a52 <__floatsisf+0x62>
    1a5c:	88 0f       	add	r24, r24
    1a5e:	96 95       	lsr	r25
    1a60:	87 95       	ror	r24
    1a62:	97 f9       	bld	r25, 7
    1a64:	08 95       	ret

00001a66 <__fp_inf>:
    1a66:	97 f9       	bld	r25, 7
    1a68:	9f 67       	ori	r25, 0x7F	; 127
    1a6a:	80 e8       	ldi	r24, 0x80	; 128
    1a6c:	70 e0       	ldi	r23, 0x00	; 0
    1a6e:	60 e0       	ldi	r22, 0x00	; 0
    1a70:	08 95       	ret

00001a72 <__fp_nan>:
    1a72:	9f ef       	ldi	r25, 0xFF	; 255
    1a74:	80 ec       	ldi	r24, 0xC0	; 192
    1a76:	08 95       	ret

00001a78 <__fp_pscA>:
    1a78:	00 24       	eor	r0, r0
    1a7a:	0a 94       	dec	r0
    1a7c:	16 16       	cp	r1, r22
    1a7e:	17 06       	cpc	r1, r23
    1a80:	18 06       	cpc	r1, r24
    1a82:	09 06       	cpc	r0, r25
    1a84:	08 95       	ret

00001a86 <__fp_pscB>:
    1a86:	00 24       	eor	r0, r0
    1a88:	0a 94       	dec	r0
    1a8a:	12 16       	cp	r1, r18
    1a8c:	13 06       	cpc	r1, r19
    1a8e:	14 06       	cpc	r1, r20
    1a90:	05 06       	cpc	r0, r21
    1a92:	08 95       	ret

00001a94 <__fp_round>:
    1a94:	09 2e       	mov	r0, r25
    1a96:	03 94       	inc	r0
    1a98:	00 0c       	add	r0, r0
    1a9a:	11 f4       	brne	.+4      	; 0x1aa0 <__fp_round+0xc>
    1a9c:	88 23       	and	r24, r24
    1a9e:	52 f0       	brmi	.+20     	; 0x1ab4 <__fp_round+0x20>
    1aa0:	bb 0f       	add	r27, r27
    1aa2:	40 f4       	brcc	.+16     	; 0x1ab4 <__fp_round+0x20>
    1aa4:	bf 2b       	or	r27, r31
    1aa6:	11 f4       	brne	.+4      	; 0x1aac <__fp_round+0x18>
    1aa8:	60 ff       	sbrs	r22, 0
    1aaa:	04 c0       	rjmp	.+8      	; 0x1ab4 <__fp_round+0x20>
    1aac:	6f 5f       	subi	r22, 0xFF	; 255
    1aae:	7f 4f       	sbci	r23, 0xFF	; 255
    1ab0:	8f 4f       	sbci	r24, 0xFF	; 255
    1ab2:	9f 4f       	sbci	r25, 0xFF	; 255
    1ab4:	08 95       	ret

00001ab6 <__fp_split3>:
    1ab6:	57 fd       	sbrc	r21, 7
    1ab8:	90 58       	subi	r25, 0x80	; 128
    1aba:	44 0f       	add	r20, r20
    1abc:	55 1f       	adc	r21, r21
    1abe:	59 f0       	breq	.+22     	; 0x1ad6 <__fp_splitA+0x10>
    1ac0:	5f 3f       	cpi	r21, 0xFF	; 255
    1ac2:	71 f0       	breq	.+28     	; 0x1ae0 <__fp_splitA+0x1a>
    1ac4:	47 95       	ror	r20

00001ac6 <__fp_splitA>:
    1ac6:	88 0f       	add	r24, r24
    1ac8:	97 fb       	bst	r25, 7
    1aca:	99 1f       	adc	r25, r25
    1acc:	61 f0       	breq	.+24     	; 0x1ae6 <__fp_splitA+0x20>
    1ace:	9f 3f       	cpi	r25, 0xFF	; 255
    1ad0:	79 f0       	breq	.+30     	; 0x1af0 <__fp_splitA+0x2a>
    1ad2:	87 95       	ror	r24
    1ad4:	08 95       	ret
    1ad6:	12 16       	cp	r1, r18
    1ad8:	13 06       	cpc	r1, r19
    1ada:	14 06       	cpc	r1, r20
    1adc:	55 1f       	adc	r21, r21
    1ade:	f2 cf       	rjmp	.-28     	; 0x1ac4 <__fp_split3+0xe>
    1ae0:	46 95       	lsr	r20
    1ae2:	f1 df       	rcall	.-30     	; 0x1ac6 <__fp_splitA>
    1ae4:	08 c0       	rjmp	.+16     	; 0x1af6 <__fp_splitA+0x30>
    1ae6:	16 16       	cp	r1, r22
    1ae8:	17 06       	cpc	r1, r23
    1aea:	18 06       	cpc	r1, r24
    1aec:	99 1f       	adc	r25, r25
    1aee:	f1 cf       	rjmp	.-30     	; 0x1ad2 <__fp_splitA+0xc>
    1af0:	86 95       	lsr	r24
    1af2:	71 05       	cpc	r23, r1
    1af4:	61 05       	cpc	r22, r1
    1af6:	08 94       	sec
    1af8:	08 95       	ret

00001afa <__fp_zero>:
    1afa:	e8 94       	clt

00001afc <__fp_szero>:
    1afc:	bb 27       	eor	r27, r27
    1afe:	66 27       	eor	r22, r22
    1b00:	77 27       	eor	r23, r23
    1b02:	cb 01       	movw	r24, r22
    1b04:	97 f9       	bld	r25, 7
    1b06:	08 95       	ret

00001b08 <pow>:
    1b08:	fa 01       	movw	r30, r20
    1b0a:	ee 0f       	add	r30, r30
    1b0c:	ff 1f       	adc	r31, r31
    1b0e:	30 96       	adiw	r30, 0x00	; 0
    1b10:	21 05       	cpc	r18, r1
    1b12:	31 05       	cpc	r19, r1
    1b14:	a1 f1       	breq	.+104    	; 0x1b7e <pow+0x76>
    1b16:	61 15       	cp	r22, r1
    1b18:	71 05       	cpc	r23, r1
    1b1a:	61 f4       	brne	.+24     	; 0x1b34 <pow+0x2c>
    1b1c:	80 38       	cpi	r24, 0x80	; 128
    1b1e:	bf e3       	ldi	r27, 0x3F	; 63
    1b20:	9b 07       	cpc	r25, r27
    1b22:	49 f1       	breq	.+82     	; 0x1b76 <pow+0x6e>
    1b24:	68 94       	set
    1b26:	90 38       	cpi	r25, 0x80	; 128
    1b28:	81 05       	cpc	r24, r1
    1b2a:	61 f0       	breq	.+24     	; 0x1b44 <pow+0x3c>
    1b2c:	80 38       	cpi	r24, 0x80	; 128
    1b2e:	bf ef       	ldi	r27, 0xFF	; 255
    1b30:	9b 07       	cpc	r25, r27
    1b32:	41 f0       	breq	.+16     	; 0x1b44 <pow+0x3c>
    1b34:	99 23       	and	r25, r25
    1b36:	4a f5       	brpl	.+82     	; 0x1b8a <pow+0x82>
    1b38:	ff 3f       	cpi	r31, 0xFF	; 255
    1b3a:	e1 05       	cpc	r30, r1
    1b3c:	31 05       	cpc	r19, r1
    1b3e:	21 05       	cpc	r18, r1
    1b40:	19 f1       	breq	.+70     	; 0x1b88 <pow+0x80>
    1b42:	e8 94       	clt
    1b44:	08 94       	sec
    1b46:	e7 95       	ror	r30
    1b48:	d9 01       	movw	r26, r18
    1b4a:	aa 23       	and	r26, r26
    1b4c:	29 f4       	brne	.+10     	; 0x1b58 <pow+0x50>
    1b4e:	ab 2f       	mov	r26, r27
    1b50:	be 2f       	mov	r27, r30
    1b52:	f8 5f       	subi	r31, 0xF8	; 248
    1b54:	d0 f3       	brcs	.-12     	; 0x1b4a <pow+0x42>
    1b56:	10 c0       	rjmp	.+32     	; 0x1b78 <pow+0x70>
    1b58:	ff 5f       	subi	r31, 0xFF	; 255
    1b5a:	70 f4       	brcc	.+28     	; 0x1b78 <pow+0x70>
    1b5c:	a6 95       	lsr	r26
    1b5e:	e0 f7       	brcc	.-8      	; 0x1b58 <pow+0x50>
    1b60:	f7 39       	cpi	r31, 0x97	; 151
    1b62:	50 f0       	brcs	.+20     	; 0x1b78 <pow+0x70>
    1b64:	19 f0       	breq	.+6      	; 0x1b6c <pow+0x64>
    1b66:	ff 3a       	cpi	r31, 0xAF	; 175
    1b68:	38 f4       	brcc	.+14     	; 0x1b78 <pow+0x70>
    1b6a:	9f 77       	andi	r25, 0x7F	; 127
    1b6c:	9f 93       	push	r25
    1b6e:	0d d0       	rcall	.+26     	; 0x1b8a <pow+0x82>
    1b70:	0f 90       	pop	r0
    1b72:	07 fc       	sbrc	r0, 7
    1b74:	90 58       	subi	r25, 0x80	; 128
    1b76:	08 95       	ret
    1b78:	46 f0       	brts	.+16     	; 0x1b8a <pow+0x82>
    1b7a:	0c 94 39 0d 	jmp	0x1a72	; 0x1a72 <__fp_nan>
    1b7e:	60 e0       	ldi	r22, 0x00	; 0
    1b80:	70 e0       	ldi	r23, 0x00	; 0
    1b82:	80 e8       	ldi	r24, 0x80	; 128
    1b84:	9f e3       	ldi	r25, 0x3F	; 63
    1b86:	08 95       	ret
    1b88:	4f e7       	ldi	r20, 0x7F	; 127
    1b8a:	9f 77       	andi	r25, 0x7F	; 127
    1b8c:	5f 93       	push	r21
    1b8e:	4f 93       	push	r20
    1b90:	3f 93       	push	r19
    1b92:	2f 93       	push	r18
    1b94:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <log>
    1b98:	2f 91       	pop	r18
    1b9a:	3f 91       	pop	r19
    1b9c:	4f 91       	pop	r20
    1b9e:	5f 91       	pop	r21
    1ba0:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <__mulsf3>
    1ba4:	0c 94 dc 0d 	jmp	0x1bb8	; 0x1bb8 <exp>
    1ba8:	29 f4       	brne	.+10     	; 0x1bb4 <pow+0xac>
    1baa:	16 f0       	brts	.+4      	; 0x1bb0 <pow+0xa8>
    1bac:	0c 94 33 0d 	jmp	0x1a66	; 0x1a66 <__fp_inf>
    1bb0:	0c 94 7d 0d 	jmp	0x1afa	; 0x1afa <__fp_zero>
    1bb4:	0c 94 39 0d 	jmp	0x1a72	; 0x1a72 <__fp_nan>

00001bb8 <exp>:
    1bb8:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <__fp_splitA>
    1bbc:	a8 f3       	brcs	.-22     	; 0x1ba8 <pow+0xa0>
    1bbe:	96 38       	cpi	r25, 0x86	; 134
    1bc0:	a0 f7       	brcc	.-24     	; 0x1baa <pow+0xa2>
    1bc2:	07 f8       	bld	r0, 7
    1bc4:	0f 92       	push	r0
    1bc6:	e8 94       	clt
    1bc8:	2b e3       	ldi	r18, 0x3B	; 59
    1bca:	3a ea       	ldi	r19, 0xAA	; 170
    1bcc:	48 eb       	ldi	r20, 0xB8	; 184
    1bce:	5f e7       	ldi	r21, 0x7F	; 127
    1bd0:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <__mulsf3_pse>
    1bd4:	0f 92       	push	r0
    1bd6:	0f 92       	push	r0
    1bd8:	0f 92       	push	r0
    1bda:	4d b7       	in	r20, 0x3d	; 61
    1bdc:	5e b7       	in	r21, 0x3e	; 62
    1bde:	0f 92       	push	r0
    1be0:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <modf>
    1be4:	e8 e6       	ldi	r30, 0x68	; 104
    1be6:	f0 e0       	ldi	r31, 0x00	; 0
    1be8:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <__fp_powser>
    1bec:	4f 91       	pop	r20
    1bee:	5f 91       	pop	r21
    1bf0:	ef 91       	pop	r30
    1bf2:	ff 91       	pop	r31
    1bf4:	e5 95       	asr	r30
    1bf6:	ee 1f       	adc	r30, r30
    1bf8:	ff 1f       	adc	r31, r31
    1bfa:	49 f0       	breq	.+18     	; 0x1c0e <exp+0x56>
    1bfc:	fe 57       	subi	r31, 0x7E	; 126
    1bfe:	e0 68       	ori	r30, 0x80	; 128
    1c00:	44 27       	eor	r20, r20
    1c02:	ee 0f       	add	r30, r30
    1c04:	44 1f       	adc	r20, r20
    1c06:	fa 95       	dec	r31
    1c08:	e1 f7       	brne	.-8      	; 0x1c02 <exp+0x4a>
    1c0a:	41 95       	neg	r20
    1c0c:	55 0b       	sbc	r21, r21
    1c0e:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <ldexp>
    1c12:	0f 90       	pop	r0
    1c14:	07 fe       	sbrs	r0, 7
    1c16:	0c 94 35 0e 	jmp	0x1c6a	; 0x1c6a <inverse>
    1c1a:	08 95       	ret

00001c1c <__fp_powser>:
    1c1c:	df 93       	push	r29
    1c1e:	cf 93       	push	r28
    1c20:	1f 93       	push	r17
    1c22:	0f 93       	push	r16
    1c24:	ff 92       	push	r15
    1c26:	ef 92       	push	r14
    1c28:	df 92       	push	r13
    1c2a:	7b 01       	movw	r14, r22
    1c2c:	8c 01       	movw	r16, r24
    1c2e:	68 94       	set
    1c30:	06 c0       	rjmp	.+12     	; 0x1c3e <__fp_powser+0x22>
    1c32:	da 2e       	mov	r13, r26
    1c34:	ef 01       	movw	r28, r30
    1c36:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <__mulsf3x>
    1c3a:	fe 01       	movw	r30, r28
    1c3c:	e8 94       	clt
    1c3e:	a5 91       	lpm	r26, Z+
    1c40:	25 91       	lpm	r18, Z+
    1c42:	35 91       	lpm	r19, Z+
    1c44:	45 91       	lpm	r20, Z+
    1c46:	55 91       	lpm	r21, Z+
    1c48:	a6 f3       	brts	.-24     	; 0x1c32 <__fp_powser+0x16>
    1c4a:	ef 01       	movw	r28, r30
    1c4c:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <__addsf3x>
    1c50:	fe 01       	movw	r30, r28
    1c52:	97 01       	movw	r18, r14
    1c54:	a8 01       	movw	r20, r16
    1c56:	da 94       	dec	r13
    1c58:	69 f7       	brne	.-38     	; 0x1c34 <__fp_powser+0x18>
    1c5a:	df 90       	pop	r13
    1c5c:	ef 90       	pop	r14
    1c5e:	ff 90       	pop	r15
    1c60:	0f 91       	pop	r16
    1c62:	1f 91       	pop	r17
    1c64:	cf 91       	pop	r28
    1c66:	df 91       	pop	r29
    1c68:	08 95       	ret

00001c6a <inverse>:
    1c6a:	9b 01       	movw	r18, r22
    1c6c:	ac 01       	movw	r20, r24
    1c6e:	60 e0       	ldi	r22, 0x00	; 0
    1c70:	70 e0       	ldi	r23, 0x00	; 0
    1c72:	80 e8       	ldi	r24, 0x80	; 128
    1c74:	9f e3       	ldi	r25, 0x3F	; 63
    1c76:	0c 94 55 0c 	jmp	0x18aa	; 0x18aa <__divsf3>
    1c7a:	0c 94 33 0d 	jmp	0x1a66	; 0x1a66 <__fp_inf>
    1c7e:	0c 94 d5 0f 	jmp	0x1faa	; 0x1faa <__fp_mpack>

00001c82 <ldexp>:
    1c82:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <__fp_splitA>
    1c86:	d8 f3       	brcs	.-10     	; 0x1c7e <inverse+0x14>
    1c88:	99 23       	and	r25, r25
    1c8a:	c9 f3       	breq	.-14     	; 0x1c7e <inverse+0x14>
    1c8c:	94 0f       	add	r25, r20
    1c8e:	51 1d       	adc	r21, r1
    1c90:	a3 f3       	brvs	.-24     	; 0x1c7a <inverse+0x10>
    1c92:	91 50       	subi	r25, 0x01	; 1
    1c94:	50 40       	sbci	r21, 0x00	; 0
    1c96:	94 f0       	brlt	.+36     	; 0x1cbc <ldexp+0x3a>
    1c98:	59 f0       	breq	.+22     	; 0x1cb0 <ldexp+0x2e>
    1c9a:	88 23       	and	r24, r24
    1c9c:	32 f0       	brmi	.+12     	; 0x1caa <ldexp+0x28>
    1c9e:	66 0f       	add	r22, r22
    1ca0:	77 1f       	adc	r23, r23
    1ca2:	88 1f       	adc	r24, r24
    1ca4:	91 50       	subi	r25, 0x01	; 1
    1ca6:	50 40       	sbci	r21, 0x00	; 0
    1ca8:	c1 f7       	brne	.-16     	; 0x1c9a <ldexp+0x18>
    1caa:	9e 3f       	cpi	r25, 0xFE	; 254
    1cac:	51 05       	cpc	r21, r1
    1cae:	2c f7       	brge	.-54     	; 0x1c7a <inverse+0x10>
    1cb0:	88 0f       	add	r24, r24
    1cb2:	91 1d       	adc	r25, r1
    1cb4:	96 95       	lsr	r25
    1cb6:	87 95       	ror	r24
    1cb8:	97 f9       	bld	r25, 7
    1cba:	08 95       	ret
    1cbc:	5f 3f       	cpi	r21, 0xFF	; 255
    1cbe:	ac f0       	brlt	.+42     	; 0x1cea <ldexp+0x68>
    1cc0:	98 3e       	cpi	r25, 0xE8	; 232
    1cc2:	9c f0       	brlt	.+38     	; 0x1cea <ldexp+0x68>
    1cc4:	bb 27       	eor	r27, r27
    1cc6:	86 95       	lsr	r24
    1cc8:	77 95       	ror	r23
    1cca:	67 95       	ror	r22
    1ccc:	b7 95       	ror	r27
    1cce:	08 f4       	brcc	.+2      	; 0x1cd2 <ldexp+0x50>
    1cd0:	b1 60       	ori	r27, 0x01	; 1
    1cd2:	93 95       	inc	r25
    1cd4:	c1 f7       	brne	.-16     	; 0x1cc6 <ldexp+0x44>
    1cd6:	bb 0f       	add	r27, r27
    1cd8:	58 f7       	brcc	.-42     	; 0x1cb0 <ldexp+0x2e>
    1cda:	11 f4       	brne	.+4      	; 0x1ce0 <ldexp+0x5e>
    1cdc:	60 ff       	sbrs	r22, 0
    1cde:	e8 cf       	rjmp	.-48     	; 0x1cb0 <ldexp+0x2e>
    1ce0:	6f 5f       	subi	r22, 0xFF	; 255
    1ce2:	7f 4f       	sbci	r23, 0xFF	; 255
    1ce4:	8f 4f       	sbci	r24, 0xFF	; 255
    1ce6:	9f 4f       	sbci	r25, 0xFF	; 255
    1ce8:	e3 cf       	rjmp	.-58     	; 0x1cb0 <ldexp+0x2e>
    1cea:	0c 94 7e 0d 	jmp	0x1afc	; 0x1afc <__fp_szero>
    1cee:	16 f0       	brts	.+4      	; 0x1cf4 <ldexp+0x72>
    1cf0:	0c 94 d5 0f 	jmp	0x1faa	; 0x1faa <__fp_mpack>
    1cf4:	0c 94 39 0d 	jmp	0x1a72	; 0x1a72 <__fp_nan>
    1cf8:	68 94       	set
    1cfa:	0c 94 33 0d 	jmp	0x1a66	; 0x1a66 <__fp_inf>

00001cfe <log>:
    1cfe:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <__fp_splitA>
    1d02:	a8 f3       	brcs	.-22     	; 0x1cee <ldexp+0x6c>
    1d04:	99 23       	and	r25, r25
    1d06:	c1 f3       	breq	.-16     	; 0x1cf8 <ldexp+0x76>
    1d08:	ae f3       	brts	.-22     	; 0x1cf4 <ldexp+0x72>
    1d0a:	df 93       	push	r29
    1d0c:	cf 93       	push	r28
    1d0e:	1f 93       	push	r17
    1d10:	0f 93       	push	r16
    1d12:	ff 92       	push	r15
    1d14:	c9 2f       	mov	r28, r25
    1d16:	dd 27       	eor	r29, r29
    1d18:	88 23       	and	r24, r24
    1d1a:	2a f0       	brmi	.+10     	; 0x1d26 <log+0x28>
    1d1c:	21 97       	sbiw	r28, 0x01	; 1
    1d1e:	66 0f       	add	r22, r22
    1d20:	77 1f       	adc	r23, r23
    1d22:	88 1f       	adc	r24, r24
    1d24:	da f7       	brpl	.-10     	; 0x1d1c <log+0x1e>
    1d26:	20 e0       	ldi	r18, 0x00	; 0
    1d28:	30 e0       	ldi	r19, 0x00	; 0
    1d2a:	40 e8       	ldi	r20, 0x80	; 128
    1d2c:	5f eb       	ldi	r21, 0xBF	; 191
    1d2e:	9f e3       	ldi	r25, 0x3F	; 63
    1d30:	88 39       	cpi	r24, 0x98	; 152
    1d32:	20 f0       	brcs	.+8      	; 0x1d3c <log+0x3e>
    1d34:	80 3e       	cpi	r24, 0xE0	; 224
    1d36:	38 f0       	brcs	.+14     	; 0x1d46 <log+0x48>
    1d38:	21 96       	adiw	r28, 0x01	; 1
    1d3a:	8f 77       	andi	r24, 0x7F	; 127
    1d3c:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <__addsf3>
    1d40:	e0 e9       	ldi	r30, 0x90	; 144
    1d42:	f0 e0       	ldi	r31, 0x00	; 0
    1d44:	04 c0       	rjmp	.+8      	; 0x1d4e <log+0x50>
    1d46:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <__addsf3>
    1d4a:	ed eb       	ldi	r30, 0xBD	; 189
    1d4c:	f0 e0       	ldi	r31, 0x00	; 0
    1d4e:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <__fp_powser>
    1d52:	8b 01       	movw	r16, r22
    1d54:	be 01       	movw	r22, r28
    1d56:	ec 01       	movw	r28, r24
    1d58:	fb 2e       	mov	r15, r27
    1d5a:	6f 57       	subi	r22, 0x7F	; 127
    1d5c:	71 09       	sbc	r23, r1
    1d5e:	75 95       	asr	r23
    1d60:	77 1f       	adc	r23, r23
    1d62:	88 0b       	sbc	r24, r24
    1d64:	99 0b       	sbc	r25, r25
    1d66:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <__floatsisf>
    1d6a:	28 e1       	ldi	r18, 0x18	; 24
    1d6c:	32 e7       	ldi	r19, 0x72	; 114
    1d6e:	41 e3       	ldi	r20, 0x31	; 49
    1d70:	5f e3       	ldi	r21, 0x3F	; 63
    1d72:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <__mulsf3x>
    1d76:	af 2d       	mov	r26, r15
    1d78:	98 01       	movw	r18, r16
    1d7a:	ae 01       	movw	r20, r28
    1d7c:	ff 90       	pop	r15
    1d7e:	0f 91       	pop	r16
    1d80:	1f 91       	pop	r17
    1d82:	cf 91       	pop	r28
    1d84:	df 91       	pop	r29
    1d86:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <__addsf3x>
    1d8a:	0c 94 4a 0d 	jmp	0x1a94	; 0x1a94 <__fp_round>

00001d8e <modf>:
    1d8e:	fa 01       	movw	r30, r20
    1d90:	dc 01       	movw	r26, r24
    1d92:	aa 0f       	add	r26, r26
    1d94:	bb 1f       	adc	r27, r27
    1d96:	9b 01       	movw	r18, r22
    1d98:	ac 01       	movw	r20, r24
    1d9a:	bf 57       	subi	r27, 0x7F	; 127
    1d9c:	28 f4       	brcc	.+10     	; 0x1da8 <modf+0x1a>
    1d9e:	22 27       	eor	r18, r18
    1da0:	33 27       	eor	r19, r19
    1da2:	44 27       	eor	r20, r20
    1da4:	50 78       	andi	r21, 0x80	; 128
    1da6:	20 c0       	rjmp	.+64     	; 0x1de8 <modf+0x5a>
    1da8:	b7 51       	subi	r27, 0x17	; 23
    1daa:	90 f4       	brcc	.+36     	; 0x1dd0 <modf+0x42>
    1dac:	ab 2f       	mov	r26, r27
    1dae:	00 24       	eor	r0, r0
    1db0:	46 95       	lsr	r20
    1db2:	37 95       	ror	r19
    1db4:	27 95       	ror	r18
    1db6:	01 1c       	adc	r0, r1
    1db8:	a3 95       	inc	r26
    1dba:	d2 f3       	brmi	.-12     	; 0x1db0 <modf+0x22>
    1dbc:	00 20       	and	r0, r0
    1dbe:	71 f0       	breq	.+28     	; 0x1ddc <modf+0x4e>
    1dc0:	22 0f       	add	r18, r18
    1dc2:	33 1f       	adc	r19, r19
    1dc4:	44 1f       	adc	r20, r20
    1dc6:	b3 95       	inc	r27
    1dc8:	da f3       	brmi	.-10     	; 0x1dc0 <modf+0x32>
    1dca:	0e d0       	rcall	.+28     	; 0x1de8 <modf+0x5a>
    1dcc:	0c 94 68 0f 	jmp	0x1ed0	; 0x1ed0 <__subsf3>
    1dd0:	61 30       	cpi	r22, 0x01	; 1
    1dd2:	71 05       	cpc	r23, r1
    1dd4:	a0 e8       	ldi	r26, 0x80	; 128
    1dd6:	8a 07       	cpc	r24, r26
    1dd8:	b9 46       	sbci	r27, 0x69	; 105
    1dda:	30 f4       	brcc	.+12     	; 0x1de8 <modf+0x5a>
    1ddc:	9b 01       	movw	r18, r22
    1dde:	ac 01       	movw	r20, r24
    1de0:	66 27       	eor	r22, r22
    1de2:	77 27       	eor	r23, r23
    1de4:	88 27       	eor	r24, r24
    1de6:	90 78       	andi	r25, 0x80	; 128
    1de8:	30 96       	adiw	r30, 0x00	; 0
    1dea:	21 f0       	breq	.+8      	; 0x1df4 <modf+0x66>
    1dec:	20 83       	st	Z, r18
    1dee:	31 83       	std	Z+1, r19	; 0x01
    1df0:	42 83       	std	Z+2, r20	; 0x02
    1df2:	53 83       	std	Z+3, r21	; 0x03
    1df4:	08 95       	ret

00001df6 <__mulsf3>:
    1df6:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <__mulsf3x>
    1dfa:	0c 94 4a 0d 	jmp	0x1a94	; 0x1a94 <__fp_round>
    1dfe:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <__fp_pscA>
    1e02:	38 f0       	brcs	.+14     	; 0x1e12 <__mulsf3+0x1c>
    1e04:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <__fp_pscB>
    1e08:	20 f0       	brcs	.+8      	; 0x1e12 <__mulsf3+0x1c>
    1e0a:	95 23       	and	r25, r21
    1e0c:	11 f0       	breq	.+4      	; 0x1e12 <__mulsf3+0x1c>
    1e0e:	0c 94 33 0d 	jmp	0x1a66	; 0x1a66 <__fp_inf>
    1e12:	0c 94 39 0d 	jmp	0x1a72	; 0x1a72 <__fp_nan>
    1e16:	11 24       	eor	r1, r1
    1e18:	0c 94 7e 0d 	jmp	0x1afc	; 0x1afc <__fp_szero>

00001e1c <__mulsf3x>:
    1e1c:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <__fp_split3>
    1e20:	70 f3       	brcs	.-36     	; 0x1dfe <__mulsf3+0x8>

00001e22 <__mulsf3_pse>:
    1e22:	95 9f       	mul	r25, r21
    1e24:	c1 f3       	breq	.-16     	; 0x1e16 <__mulsf3+0x20>
    1e26:	95 0f       	add	r25, r21
    1e28:	50 e0       	ldi	r21, 0x00	; 0
    1e2a:	55 1f       	adc	r21, r21
    1e2c:	62 9f       	mul	r22, r18
    1e2e:	f0 01       	movw	r30, r0
    1e30:	72 9f       	mul	r23, r18
    1e32:	bb 27       	eor	r27, r27
    1e34:	f0 0d       	add	r31, r0
    1e36:	b1 1d       	adc	r27, r1
    1e38:	63 9f       	mul	r22, r19
    1e3a:	aa 27       	eor	r26, r26
    1e3c:	f0 0d       	add	r31, r0
    1e3e:	b1 1d       	adc	r27, r1
    1e40:	aa 1f       	adc	r26, r26
    1e42:	64 9f       	mul	r22, r20
    1e44:	66 27       	eor	r22, r22
    1e46:	b0 0d       	add	r27, r0
    1e48:	a1 1d       	adc	r26, r1
    1e4a:	66 1f       	adc	r22, r22
    1e4c:	82 9f       	mul	r24, r18
    1e4e:	22 27       	eor	r18, r18
    1e50:	b0 0d       	add	r27, r0
    1e52:	a1 1d       	adc	r26, r1
    1e54:	62 1f       	adc	r22, r18
    1e56:	73 9f       	mul	r23, r19
    1e58:	b0 0d       	add	r27, r0
    1e5a:	a1 1d       	adc	r26, r1
    1e5c:	62 1f       	adc	r22, r18
    1e5e:	83 9f       	mul	r24, r19
    1e60:	a0 0d       	add	r26, r0
    1e62:	61 1d       	adc	r22, r1
    1e64:	22 1f       	adc	r18, r18
    1e66:	74 9f       	mul	r23, r20
    1e68:	33 27       	eor	r19, r19
    1e6a:	a0 0d       	add	r26, r0
    1e6c:	61 1d       	adc	r22, r1
    1e6e:	23 1f       	adc	r18, r19
    1e70:	84 9f       	mul	r24, r20
    1e72:	60 0d       	add	r22, r0
    1e74:	21 1d       	adc	r18, r1
    1e76:	82 2f       	mov	r24, r18
    1e78:	76 2f       	mov	r23, r22
    1e7a:	6a 2f       	mov	r22, r26
    1e7c:	11 24       	eor	r1, r1
    1e7e:	9f 57       	subi	r25, 0x7F	; 127
    1e80:	50 40       	sbci	r21, 0x00	; 0
    1e82:	9a f0       	brmi	.+38     	; 0x1eaa <__mulsf3_pse+0x88>
    1e84:	f1 f0       	breq	.+60     	; 0x1ec2 <__mulsf3_pse+0xa0>
    1e86:	88 23       	and	r24, r24
    1e88:	4a f0       	brmi	.+18     	; 0x1e9c <__mulsf3_pse+0x7a>
    1e8a:	ee 0f       	add	r30, r30
    1e8c:	ff 1f       	adc	r31, r31
    1e8e:	bb 1f       	adc	r27, r27
    1e90:	66 1f       	adc	r22, r22
    1e92:	77 1f       	adc	r23, r23
    1e94:	88 1f       	adc	r24, r24
    1e96:	91 50       	subi	r25, 0x01	; 1
    1e98:	50 40       	sbci	r21, 0x00	; 0
    1e9a:	a9 f7       	brne	.-22     	; 0x1e86 <__mulsf3_pse+0x64>
    1e9c:	9e 3f       	cpi	r25, 0xFE	; 254
    1e9e:	51 05       	cpc	r21, r1
    1ea0:	80 f0       	brcs	.+32     	; 0x1ec2 <__mulsf3_pse+0xa0>
    1ea2:	0c 94 33 0d 	jmp	0x1a66	; 0x1a66 <__fp_inf>
    1ea6:	0c 94 7e 0d 	jmp	0x1afc	; 0x1afc <__fp_szero>
    1eaa:	5f 3f       	cpi	r21, 0xFF	; 255
    1eac:	e4 f3       	brlt	.-8      	; 0x1ea6 <__mulsf3_pse+0x84>
    1eae:	98 3e       	cpi	r25, 0xE8	; 232
    1eb0:	d4 f3       	brlt	.-12     	; 0x1ea6 <__mulsf3_pse+0x84>
    1eb2:	86 95       	lsr	r24
    1eb4:	77 95       	ror	r23
    1eb6:	67 95       	ror	r22
    1eb8:	b7 95       	ror	r27
    1eba:	f7 95       	ror	r31
    1ebc:	e7 95       	ror	r30
    1ebe:	9f 5f       	subi	r25, 0xFF	; 255
    1ec0:	c1 f7       	brne	.-16     	; 0x1eb2 <__mulsf3_pse+0x90>
    1ec2:	fe 2b       	or	r31, r30
    1ec4:	88 0f       	add	r24, r24
    1ec6:	91 1d       	adc	r25, r1
    1ec8:	96 95       	lsr	r25
    1eca:	87 95       	ror	r24
    1ecc:	97 f9       	bld	r25, 7
    1ece:	08 95       	ret

00001ed0 <__subsf3>:
    1ed0:	50 58       	subi	r21, 0x80	; 128

00001ed2 <__addsf3>:
    1ed2:	bb 27       	eor	r27, r27
    1ed4:	aa 27       	eor	r26, r26
    1ed6:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <__addsf3x>
    1eda:	0c 94 4a 0d 	jmp	0x1a94	; 0x1a94 <__fp_round>
    1ede:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <__fp_pscA>
    1ee2:	38 f0       	brcs	.+14     	; 0x1ef2 <__addsf3+0x20>
    1ee4:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <__fp_pscB>
    1ee8:	20 f0       	brcs	.+8      	; 0x1ef2 <__addsf3+0x20>
    1eea:	39 f4       	brne	.+14     	; 0x1efa <__addsf3+0x28>
    1eec:	9f 3f       	cpi	r25, 0xFF	; 255
    1eee:	19 f4       	brne	.+6      	; 0x1ef6 <__addsf3+0x24>
    1ef0:	26 f4       	brtc	.+8      	; 0x1efa <__addsf3+0x28>
    1ef2:	0c 94 39 0d 	jmp	0x1a72	; 0x1a72 <__fp_nan>
    1ef6:	0e f4       	brtc	.+2      	; 0x1efa <__addsf3+0x28>
    1ef8:	e0 95       	com	r30
    1efa:	e7 fb       	bst	r30, 7
    1efc:	0c 94 33 0d 	jmp	0x1a66	; 0x1a66 <__fp_inf>

00001f00 <__addsf3x>:
    1f00:	e9 2f       	mov	r30, r25
    1f02:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <__fp_split3>
    1f06:	58 f3       	brcs	.-42     	; 0x1ede <__addsf3+0xc>
    1f08:	ba 17       	cp	r27, r26
    1f0a:	62 07       	cpc	r22, r18
    1f0c:	73 07       	cpc	r23, r19
    1f0e:	84 07       	cpc	r24, r20
    1f10:	95 07       	cpc	r25, r21
    1f12:	20 f0       	brcs	.+8      	; 0x1f1c <__addsf3x+0x1c>
    1f14:	79 f4       	brne	.+30     	; 0x1f34 <__addsf3x+0x34>
    1f16:	a6 f5       	brtc	.+104    	; 0x1f80 <__addsf3x+0x80>
    1f18:	0c 94 7d 0d 	jmp	0x1afa	; 0x1afa <__fp_zero>
    1f1c:	0e f4       	brtc	.+2      	; 0x1f20 <__addsf3x+0x20>
    1f1e:	e0 95       	com	r30
    1f20:	0b 2e       	mov	r0, r27
    1f22:	ba 2f       	mov	r27, r26
    1f24:	a0 2d       	mov	r26, r0
    1f26:	0b 01       	movw	r0, r22
    1f28:	b9 01       	movw	r22, r18
    1f2a:	90 01       	movw	r18, r0
    1f2c:	0c 01       	movw	r0, r24
    1f2e:	ca 01       	movw	r24, r20
    1f30:	a0 01       	movw	r20, r0
    1f32:	11 24       	eor	r1, r1
    1f34:	ff 27       	eor	r31, r31
    1f36:	59 1b       	sub	r21, r25
    1f38:	99 f0       	breq	.+38     	; 0x1f60 <__addsf3x+0x60>
    1f3a:	59 3f       	cpi	r21, 0xF9	; 249
    1f3c:	50 f4       	brcc	.+20     	; 0x1f52 <__addsf3x+0x52>
    1f3e:	50 3e       	cpi	r21, 0xE0	; 224
    1f40:	68 f1       	brcs	.+90     	; 0x1f9c <__addsf3x+0x9c>
    1f42:	1a 16       	cp	r1, r26
    1f44:	f0 40       	sbci	r31, 0x00	; 0
    1f46:	a2 2f       	mov	r26, r18
    1f48:	23 2f       	mov	r18, r19
    1f4a:	34 2f       	mov	r19, r20
    1f4c:	44 27       	eor	r20, r20
    1f4e:	58 5f       	subi	r21, 0xF8	; 248
    1f50:	f3 cf       	rjmp	.-26     	; 0x1f38 <__addsf3x+0x38>
    1f52:	46 95       	lsr	r20
    1f54:	37 95       	ror	r19
    1f56:	27 95       	ror	r18
    1f58:	a7 95       	ror	r26
    1f5a:	f0 40       	sbci	r31, 0x00	; 0
    1f5c:	53 95       	inc	r21
    1f5e:	c9 f7       	brne	.-14     	; 0x1f52 <__addsf3x+0x52>
    1f60:	7e f4       	brtc	.+30     	; 0x1f80 <__addsf3x+0x80>
    1f62:	1f 16       	cp	r1, r31
    1f64:	ba 0b       	sbc	r27, r26
    1f66:	62 0b       	sbc	r22, r18
    1f68:	73 0b       	sbc	r23, r19
    1f6a:	84 0b       	sbc	r24, r20
    1f6c:	ba f0       	brmi	.+46     	; 0x1f9c <__addsf3x+0x9c>
    1f6e:	91 50       	subi	r25, 0x01	; 1
    1f70:	a1 f0       	breq	.+40     	; 0x1f9a <__addsf3x+0x9a>
    1f72:	ff 0f       	add	r31, r31
    1f74:	bb 1f       	adc	r27, r27
    1f76:	66 1f       	adc	r22, r22
    1f78:	77 1f       	adc	r23, r23
    1f7a:	88 1f       	adc	r24, r24
    1f7c:	c2 f7       	brpl	.-16     	; 0x1f6e <__addsf3x+0x6e>
    1f7e:	0e c0       	rjmp	.+28     	; 0x1f9c <__addsf3x+0x9c>
    1f80:	ba 0f       	add	r27, r26
    1f82:	62 1f       	adc	r22, r18
    1f84:	73 1f       	adc	r23, r19
    1f86:	84 1f       	adc	r24, r20
    1f88:	48 f4       	brcc	.+18     	; 0x1f9c <__addsf3x+0x9c>
    1f8a:	87 95       	ror	r24
    1f8c:	77 95       	ror	r23
    1f8e:	67 95       	ror	r22
    1f90:	b7 95       	ror	r27
    1f92:	f7 95       	ror	r31
    1f94:	9e 3f       	cpi	r25, 0xFE	; 254
    1f96:	08 f0       	brcs	.+2      	; 0x1f9a <__addsf3x+0x9a>
    1f98:	b0 cf       	rjmp	.-160    	; 0x1efa <__addsf3+0x28>
    1f9a:	93 95       	inc	r25
    1f9c:	88 0f       	add	r24, r24
    1f9e:	08 f0       	brcs	.+2      	; 0x1fa2 <__addsf3x+0xa2>
    1fa0:	99 27       	eor	r25, r25
    1fa2:	ee 0f       	add	r30, r30
    1fa4:	97 95       	ror	r25
    1fa6:	87 95       	ror	r24
    1fa8:	08 95       	ret

00001faa <__fp_mpack>:
    1faa:	9f 3f       	cpi	r25, 0xFF	; 255
    1fac:	31 f0       	breq	.+12     	; 0x1fba <__fp_mpack_finite+0xc>

00001fae <__fp_mpack_finite>:
    1fae:	91 50       	subi	r25, 0x01	; 1
    1fb0:	20 f4       	brcc	.+8      	; 0x1fba <__fp_mpack_finite+0xc>
    1fb2:	87 95       	ror	r24
    1fb4:	77 95       	ror	r23
    1fb6:	67 95       	ror	r22
    1fb8:	b7 95       	ror	r27
    1fba:	88 0f       	add	r24, r24
    1fbc:	91 1d       	adc	r25, r1
    1fbe:	96 95       	lsr	r25
    1fc0:	87 95       	ror	r24
    1fc2:	97 f9       	bld	r25, 7
    1fc4:	08 95       	ret

00001fc6 <__udivmodsi4>:
    1fc6:	a1 e2       	ldi	r26, 0x21	; 33
    1fc8:	1a 2e       	mov	r1, r26
    1fca:	aa 1b       	sub	r26, r26
    1fcc:	bb 1b       	sub	r27, r27
    1fce:	fd 01       	movw	r30, r26
    1fd0:	0d c0       	rjmp	.+26     	; 0x1fec <__udivmodsi4_ep>

00001fd2 <__udivmodsi4_loop>:
    1fd2:	aa 1f       	adc	r26, r26
    1fd4:	bb 1f       	adc	r27, r27
    1fd6:	ee 1f       	adc	r30, r30
    1fd8:	ff 1f       	adc	r31, r31
    1fda:	a2 17       	cp	r26, r18
    1fdc:	b3 07       	cpc	r27, r19
    1fde:	e4 07       	cpc	r30, r20
    1fe0:	f5 07       	cpc	r31, r21
    1fe2:	20 f0       	brcs	.+8      	; 0x1fec <__udivmodsi4_ep>
    1fe4:	a2 1b       	sub	r26, r18
    1fe6:	b3 0b       	sbc	r27, r19
    1fe8:	e4 0b       	sbc	r30, r20
    1fea:	f5 0b       	sbc	r31, r21

00001fec <__udivmodsi4_ep>:
    1fec:	66 1f       	adc	r22, r22
    1fee:	77 1f       	adc	r23, r23
    1ff0:	88 1f       	adc	r24, r24
    1ff2:	99 1f       	adc	r25, r25
    1ff4:	1a 94       	dec	r1
    1ff6:	69 f7       	brne	.-38     	; 0x1fd2 <__udivmodsi4_loop>
    1ff8:	60 95       	com	r22
    1ffa:	70 95       	com	r23
    1ffc:	80 95       	com	r24
    1ffe:	90 95       	com	r25
    2000:	9b 01       	movw	r18, r22
    2002:	ac 01       	movw	r20, r24
    2004:	bd 01       	movw	r22, r26
    2006:	cf 01       	movw	r24, r30
    2008:	08 95       	ret

0000200a <__divmodsi4>:
    200a:	05 2e       	mov	r0, r21
    200c:	97 fb       	bst	r25, 7
    200e:	1e f4       	brtc	.+6      	; 0x2016 <__divmodsi4+0xc>
    2010:	00 94       	com	r0
    2012:	0e 94 1c 10 	call	0x2038	; 0x2038 <__negsi2>
    2016:	57 fd       	sbrc	r21, 7
    2018:	07 d0       	rcall	.+14     	; 0x2028 <__divmodsi4_neg2>
    201a:	0e 94 e3 0f 	call	0x1fc6	; 0x1fc6 <__udivmodsi4>
    201e:	07 fc       	sbrc	r0, 7
    2020:	03 d0       	rcall	.+6      	; 0x2028 <__divmodsi4_neg2>
    2022:	4e f4       	brtc	.+18     	; 0x2036 <__divmodsi4_exit>
    2024:	0c 94 1c 10 	jmp	0x2038	; 0x2038 <__negsi2>

00002028 <__divmodsi4_neg2>:
    2028:	50 95       	com	r21
    202a:	40 95       	com	r20
    202c:	30 95       	com	r19
    202e:	21 95       	neg	r18
    2030:	3f 4f       	sbci	r19, 0xFF	; 255
    2032:	4f 4f       	sbci	r20, 0xFF	; 255
    2034:	5f 4f       	sbci	r21, 0xFF	; 255

00002036 <__divmodsi4_exit>:
    2036:	08 95       	ret

00002038 <__negsi2>:
    2038:	90 95       	com	r25
    203a:	80 95       	com	r24
    203c:	70 95       	com	r23
    203e:	61 95       	neg	r22
    2040:	7f 4f       	sbci	r23, 0xFF	; 255
    2042:	8f 4f       	sbci	r24, 0xFF	; 255
    2044:	9f 4f       	sbci	r25, 0xFF	; 255
    2046:	08 95       	ret

00002048 <strcpy>:
    2048:	fb 01       	movw	r30, r22
    204a:	dc 01       	movw	r26, r24
    204c:	01 90       	ld	r0, Z+
    204e:	0d 92       	st	X+, r0
    2050:	00 20       	and	r0, r0
    2052:	e1 f7       	brne	.-8      	; 0x204c <strcpy+0x4>
    2054:	08 95       	ret

00002056 <__itoa_ncheck>:
    2056:	bb 27       	eor	r27, r27
    2058:	4a 30       	cpi	r20, 0x0A	; 10
    205a:	31 f4       	brne	.+12     	; 0x2068 <__itoa_ncheck+0x12>
    205c:	99 23       	and	r25, r25
    205e:	22 f4       	brpl	.+8      	; 0x2068 <__itoa_ncheck+0x12>
    2060:	bd e2       	ldi	r27, 0x2D	; 45
    2062:	90 95       	com	r25
    2064:	81 95       	neg	r24
    2066:	9f 4f       	sbci	r25, 0xFF	; 255
    2068:	0c 94 37 10 	jmp	0x206e	; 0x206e <__utoa_common>

0000206c <__utoa_ncheck>:
    206c:	bb 27       	eor	r27, r27

0000206e <__utoa_common>:
    206e:	fb 01       	movw	r30, r22
    2070:	55 27       	eor	r21, r21
    2072:	aa 27       	eor	r26, r26
    2074:	88 0f       	add	r24, r24
    2076:	99 1f       	adc	r25, r25
    2078:	aa 1f       	adc	r26, r26
    207a:	a4 17       	cp	r26, r20
    207c:	10 f0       	brcs	.+4      	; 0x2082 <__utoa_common+0x14>
    207e:	a4 1b       	sub	r26, r20
    2080:	83 95       	inc	r24
    2082:	50 51       	subi	r21, 0x10	; 16
    2084:	b9 f7       	brne	.-18     	; 0x2074 <__utoa_common+0x6>
    2086:	a0 5d       	subi	r26, 0xD0	; 208
    2088:	aa 33       	cpi	r26, 0x3A	; 58
    208a:	08 f0       	brcs	.+2      	; 0x208e <__utoa_common+0x20>
    208c:	a9 5d       	subi	r26, 0xD9	; 217
    208e:	a1 93       	st	Z+, r26
    2090:	00 97       	sbiw	r24, 0x00	; 0
    2092:	79 f7       	brne	.-34     	; 0x2072 <__utoa_common+0x4>
    2094:	b1 11       	cpse	r27, r1
    2096:	b1 93       	st	Z+, r27
    2098:	11 92       	st	Z+, r1
    209a:	cb 01       	movw	r24, r22
    209c:	0c 94 50 10 	jmp	0x20a0	; 0x20a0 <strrev>

000020a0 <strrev>:
    20a0:	dc 01       	movw	r26, r24
    20a2:	fc 01       	movw	r30, r24
    20a4:	67 2f       	mov	r22, r23
    20a6:	71 91       	ld	r23, Z+
    20a8:	77 23       	and	r23, r23
    20aa:	e1 f7       	brne	.-8      	; 0x20a4 <strrev+0x4>
    20ac:	32 97       	sbiw	r30, 0x02	; 2
    20ae:	04 c0       	rjmp	.+8      	; 0x20b8 <strrev+0x18>
    20b0:	7c 91       	ld	r23, X
    20b2:	6d 93       	st	X+, r22
    20b4:	70 83       	st	Z, r23
    20b6:	62 91       	ld	r22, -Z
    20b8:	ae 17       	cp	r26, r30
    20ba:	bf 07       	cpc	r27, r31
    20bc:	c8 f3       	brcs	.-14     	; 0x20b0 <strrev+0x10>
    20be:	08 95       	ret

000020c0 <_exit>:
    20c0:	f8 94       	cli

000020c2 <__stop_program>:
    20c2:	ff cf       	rjmp	.-2      	; 0x20c2 <__stop_program>
