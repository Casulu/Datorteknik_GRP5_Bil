
Remote 1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000d2  00800100  00002136  000021ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002136  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001f6  008001d2  008001d2  0000229c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000229c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000022cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000290  00000000  00000000  0000230c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002c7f  00000000  00000000  0000259c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001180  00000000  00000000  0000521b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001a66  00000000  00000000  0000639b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006a4  00000000  00000000  00007e04  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000aa0  00000000  00000000  000084a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001e54  00000000  00000000  00008f48  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002d0  00000000  00000000  0000ad9c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 13 03 	jmp	0x626	; 0x626 <__ctors_end>
       4:	0c 94 23 09 	jmp	0x1246	; 0x1246 <__vector_1>
       8:	0c 94 89 09 	jmp	0x1312	; 0x1312 <__vector_2>
       c:	0c 94 30 03 	jmp	0x660	; 0x660 <__bad_interrupt>
      10:	0c 94 30 03 	jmp	0x660	; 0x660 <__bad_interrupt>
      14:	0c 94 30 03 	jmp	0x660	; 0x660 <__bad_interrupt>
      18:	0c 94 30 03 	jmp	0x660	; 0x660 <__bad_interrupt>
      1c:	0c 94 a8 06 	jmp	0xd50	; 0xd50 <__vector_7>
      20:	0c 94 30 03 	jmp	0x660	; 0x660 <__bad_interrupt>
      24:	0c 94 30 03 	jmp	0x660	; 0x660 <__bad_interrupt>
      28:	0c 94 30 03 	jmp	0x660	; 0x660 <__bad_interrupt>
      2c:	0c 94 3a 0c 	jmp	0x1874	; 0x1874 <__vector_11>
      30:	0c 94 30 03 	jmp	0x660	; 0x660 <__bad_interrupt>
      34:	0c 94 30 03 	jmp	0x660	; 0x660 <__bad_interrupt>
      38:	0c 94 30 03 	jmp	0x660	; 0x660 <__bad_interrupt>
      3c:	0c 94 30 03 	jmp	0x660	; 0x660 <__bad_interrupt>
      40:	0c 94 30 03 	jmp	0x660	; 0x660 <__bad_interrupt>
      44:	0c 94 30 03 	jmp	0x660	; 0x660 <__bad_interrupt>
      48:	0c 94 cd 08 	jmp	0x119a	; 0x119a <__vector_18>
      4c:	0c 94 30 03 	jmp	0x660	; 0x660 <__bad_interrupt>
      50:	0c 94 30 03 	jmp	0x660	; 0x660 <__bad_interrupt>
      54:	0c 94 30 03 	jmp	0x660	; 0x660 <__bad_interrupt>
      58:	0c 94 30 03 	jmp	0x660	; 0x660 <__bad_interrupt>
      5c:	0c 94 30 03 	jmp	0x660	; 0x660 <__bad_interrupt>
      60:	0c 94 30 03 	jmp	0x660	; 0x660 <__bad_interrupt>
      64:	0c 94 30 03 	jmp	0x660	; 0x660 <__bad_interrupt>
      68:	07 63       	ori	r16, 0x37	; 55
      6a:	42 36       	cpi	r20, 0x62	; 98
      6c:	b7 9b       	sbis	0x16, 7	; 22
      6e:	d8 a7       	std	Y+40, r29	; 0x28
      70:	1a 39       	cpi	r17, 0x9A	; 154
      72:	68 56       	subi	r22, 0x68	; 104
      74:	18 ae       	std	Y+56, r1	; 0x38
      76:	ba ab       	std	Y+50, r27	; 0x32
      78:	55 8c       	ldd	r5, Z+29	; 0x1d
      7a:	1d 3c       	cpi	r17, 0xCD	; 205
      7c:	b7 cc       	rjmp	.-1682   	; 0xfffff9ec <__eeprom_end+0xff7ef9ec>
      7e:	57 63       	ori	r21, 0x37	; 55
      80:	bd 6d       	ori	r27, 0xDD	; 221
      82:	ed fd       	.word	0xfded	; ????
      84:	75 3e       	cpi	r23, 0xE5	; 229
      86:	f6 17       	cp	r31, r22
      88:	72 31       	cpi	r23, 0x12	; 18
      8a:	bf 00       	.word	0x00bf	; ????
      8c:	00 00       	nop
      8e:	80 3f       	cpi	r24, 0xF0	; 240
      90:	08 00       	.word	0x0008	; ????
      92:	00 00       	nop
      94:	be 92       	st	-X, r11
      96:	24 49       	sbci	r18, 0x94	; 148
      98:	12 3e       	cpi	r17, 0xE2	; 226
      9a:	ab aa       	std	Y+51, r10	; 0x33
      9c:	aa 2a       	or	r10, r26
      9e:	be cd       	rjmp	.-1156   	; 0xfffffc1c <__eeprom_end+0xff7efc1c>
      a0:	cc cc       	rjmp	.-1640   	; 0xfffffa3a <__eeprom_end+0xff7efa3a>
      a2:	4c 3e       	cpi	r20, 0xEC	; 236
      a4:	00 00       	nop
      a6:	00 80       	ld	r0, Z
      a8:	be ab       	std	Y+54, r27	; 0x36
      aa:	aa aa       	std	Y+50, r10	; 0x32
      ac:	aa 3e       	cpi	r26, 0xEA	; 234
      ae:	00 00       	nop
      b0:	00 00       	nop
      b2:	bf 00       	.word	0x00bf	; ????
      b4:	00 00       	nop
      b6:	80 3f       	cpi	r24, 0xF0	; 240
      b8:	00 00       	nop
      ba:	00 00       	nop
      bc:	00 08       	sbc	r0, r0
      be:	41 78       	andi	r20, 0x81	; 129
      c0:	d3 bb       	out	0x13, r29	; 19
      c2:	43 87       	std	Z+11, r20	; 0x0b
      c4:	d1 13       	cpse	r29, r17
      c6:	3d 19       	sub	r19, r13
      c8:	0e 3c       	cpi	r16, 0xCE	; 206
      ca:	c3 bd       	out	0x23, r28	; 35
      cc:	42 82       	std	Z+2, r4	; 0x02
      ce:	ad 2b       	or	r26, r29
      d0:	3e 68       	ori	r19, 0x8E	; 142
      d2:	ec 82       	std	Y+4, r14	; 0x04
      d4:	76 be       	out	0x36, r7	; 54
      d6:	d9 8f       	std	Y+25, r29	; 0x19
      d8:	e1 a9       	ldd	r30, Z+49	; 0x31
      da:	3e 4c       	sbci	r19, 0xCE	; 206
      dc:	80 ef       	ldi	r24, 0xF0	; 240
      de:	ff be       	out	0x3f, r15	; 63
      e0:	01 c4       	rjmp	.+2050   	; 0x8e4 <fiveinarow_render+0x50>
      e2:	ff 7f       	andi	r31, 0xFF	; 255
      e4:	3f 00       	.word	0x003f	; ????
      e6:	00 00       	nop
	...

000000ea <__trampolines_end>:
      ea:	0e 11       	cpse	r16, r14
      ec:	11 11       	cpse	r17, r1
      ee:	11 11       	cpse	r17, r1
      f0:	0e 1f       	adc	r16, r30

000000f2 <x_under_char>:
      f2:	11 11 0a 04 0a 11 11 1f                             ........

000000fa <under_char>:
      fa:	00 00 00 00 00 00 00 1f                             ........

00000102 <o_curs_char>:
     102:	0e 15 15 1f 15 15 0e 00                             ........

0000010a <x_curs_char>:
     10a:	11 15 1f 0e 1f 15 11 00                             ........

00000112 <melodies>:
     112:	b4 71 80 71 00 00 00 00 00 00 00 00 00 00 00 00     .q.q............
	...
     212:	00 00 4b 2d 4d 60 68 4d 68 88 8a 4c 85 80 65 4a     ..K-M`hMh..L..eJ
     222:	68 88 86 48 81 80 61 63 83 80 63 83 85 66 86 80     h..H..ac..c..f..
     232:	66 86 88 4a 6c 6d 4f 6f 68 51 6f 8f 8d 4f 6c 68     f..JlmOohQo..Olh
     242:	4d 6c 8c 8a 4c 85 80 65 4a 68 88 86 48 61 80 81     Ml..L..eJh..Ha..
     252:	4d 6c 8c 8a 68 6c 6d 6f 31 6f 6d 6c 6d 4f 6f 88     Ml..hlmo1omlmOo.
     262:	80 68 6c 6d 6f 2d 6c 6a 68 6a 4c 6c 85 80 65 68     .hlmo-ljhjLl..eh
     272:	6a 6c 4d 6a 8a 8c 4d 6a 8a 8c 4d 6a 6d 52 72 60     jlMj..Mj..MjmRr`
     282:	32 71 6f 6d 6f 51 71 8d 80 2d 2f 6d 6c 6a 6c 4d     2qomoQq..-/mljlM
     292:	6d 8a 80 2a 4d 6c 8c 8a 48 61 80 81 28 4a 4c 2d     m..*Ml..Ha..(JL-
     2a2:	6d 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     m...............
	...
     316:	64 8d 80 90 80 92 80 93 80 92 80 90 80 8d 40 80     d.............@.
     326:	8b 8f 8d 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     416:	00 00 64 80 83 88 8a 6b 80 83 88 8a 6b 60 80 80     ..d....k....k`..
     426:	84 88 8a 6b 80 84 88 8a 6b 80 81 86 88 6a 80 81     ...k....k....j..
     436:	86 88 6a 60 80 80 88 8a 88 67 00 00 00 00 00 00     ..j`.....g......
	...
     51a:	60 60 6e e0 6e e0 6e 72 73 72 73 53 60 6e 72 73     ``n.n.nrsrsS`nrs
     52a:	72 73 53 60 6e 72 73 72 73 53 60 6e 73 e0 73 60     rsS`nrsrsS`ns.s`
     53a:	53 72 60 72 e0 52 e0 72 73 72 73 60 6e 72 73 72     Sr`r.R.rsrs`nrsr
     54a:	73 53 60 6e 72 73 e0 73 e0 73 33 53 40 60 6e e0     sS`nrs.s.s3S@`n.
     55a:	6e e0 6e 60 72 73 72 73 53 00 00 00 00 00 00 00     n.n`rsrsS.......
	...

0000061c <initseq>:
     61c:	39 15 55 6e 72 38 0c 01 06 00                       9.Unr8....

00000626 <__ctors_end>:
     626:	11 24       	eor	r1, r1
     628:	1f be       	out	0x3f, r1	; 63
     62a:	cf ef       	ldi	r28, 0xFF	; 255
     62c:	d8 e0       	ldi	r29, 0x08	; 8
     62e:	de bf       	out	0x3e, r29	; 62
     630:	cd bf       	out	0x3d, r28	; 61

00000632 <__do_copy_data>:
     632:	11 e0       	ldi	r17, 0x01	; 1
     634:	a0 e0       	ldi	r26, 0x00	; 0
     636:	b1 e0       	ldi	r27, 0x01	; 1
     638:	e6 e3       	ldi	r30, 0x36	; 54
     63a:	f1 e2       	ldi	r31, 0x21	; 33
     63c:	02 c0       	rjmp	.+4      	; 0x642 <__do_copy_data+0x10>
     63e:	05 90       	lpm	r0, Z+
     640:	0d 92       	st	X+, r0
     642:	a2 3d       	cpi	r26, 0xD2	; 210
     644:	b1 07       	cpc	r27, r17
     646:	d9 f7       	brne	.-10     	; 0x63e <__do_copy_data+0xc>

00000648 <__do_clear_bss>:
     648:	23 e0       	ldi	r18, 0x03	; 3
     64a:	a2 ed       	ldi	r26, 0xD2	; 210
     64c:	b1 e0       	ldi	r27, 0x01	; 1
     64e:	01 c0       	rjmp	.+2      	; 0x652 <.do_clear_bss_start>

00000650 <.do_clear_bss_loop>:
     650:	1d 92       	st	X+, r1

00000652 <.do_clear_bss_start>:
     652:	a8 3c       	cpi	r26, 0xC8	; 200
     654:	b2 07       	cpc	r27, r18
     656:	e1 f7       	brne	.-8      	; 0x650 <.do_clear_bss_loop>
     658:	0e 94 c3 09 	call	0x1386	; 0x1386 <main>
     65c:	0c 94 99 10 	jmp	0x2132	; 0x2132 <_exit>

00000660 <__bad_interrupt>:
     660:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000664 <fiveinarow_is_char>:
	return false;
}

//Internal helper functions
bool fiveinarow_is_char(uint8_t x, uint8_t y, char c){
	if(x > 14)return false;
     664:	8f 30       	cpi	r24, 0x0F	; 15
     666:	68 f4       	brcc	.+26     	; 0x682 <fiveinarow_is_char+0x1e>
	if(y > 14)return false;
     668:	6f 30       	cpi	r22, 0x0F	; 15
     66a:	58 f4       	brcc	.+22     	; 0x682 <fiveinarow_is_char+0x1e>
	if(row_markers[x][y] == c)return true;
     66c:	9f e0       	ldi	r25, 0x0F	; 15
     66e:	89 9f       	mul	r24, r25
     670:	f0 01       	movw	r30, r0
     672:	11 24       	eor	r1, r1
     674:	e9 52       	subi	r30, 0x29	; 41
     676:	fe 4f       	sbci	r31, 0xFE	; 254
     678:	e6 0f       	add	r30, r22
     67a:	f1 1d       	adc	r31, r1
     67c:	90 81       	ld	r25, Z
     67e:	81 e0       	ldi	r24, 0x01	; 1
     680:	94 13       	cpse	r25, r20
	return false;
}

//Internal helper functions
bool fiveinarow_is_char(uint8_t x, uint8_t y, char c){
	if(x > 14)return false;
     682:	80 e0       	ldi	r24, 0x00	; 0
	if(y > 14)return false;
	if(row_markers[x][y] == c)return true;
	return false;
     684:	08 95       	ret

00000686 <fiveinarow_init>:
static const uint8_t under_char[8] PROGMEM = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F};
static const uint8_t x_under_char[8] PROGMEM = {0x11, 0x11, 0x0A, 0x04, 0x0A, 0x11, 0x11, 0x1F};
static const uint8_t o_under_char[8] PROGMEM = {0x0E, 0x11, 0x11, 0x11, 0x11, 0x11, 0x0E, 0x1F};

void fiveinarow_init(){
	set_character_pgm(X_CURS_CODE, x_curs_char);
     686:	6a e0       	ldi	r22, 0x0A	; 10
     688:	71 e0       	ldi	r23, 0x01	; 1
     68a:	81 e0       	ldi	r24, 0x01	; 1
     68c:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <set_character_pgm>
	set_character_pgm(O_CURS_CODE, o_curs_char);
     690:	62 e0       	ldi	r22, 0x02	; 2
     692:	71 e0       	ldi	r23, 0x01	; 1
     694:	82 e0       	ldi	r24, 0x02	; 2
     696:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <set_character_pgm>
	set_character_pgm(UNDER_CODE, under_char);
     69a:	6a ef       	ldi	r22, 0xFA	; 250
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	83 e0       	ldi	r24, 0x03	; 3
     6a0:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <set_character_pgm>
	set_character_pgm(X_UNDER_CODE, x_under_char);
     6a4:	62 ef       	ldi	r22, 0xF2	; 242
     6a6:	70 e0       	ldi	r23, 0x00	; 0
     6a8:	84 e0       	ldi	r24, 0x04	; 4
     6aa:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <set_character_pgm>
	set_character_pgm(O_UNDER_CODE, o_under_char);
     6ae:	6a ee       	ldi	r22, 0xEA	; 234
     6b0:	70 e0       	ldi	r23, 0x00	; 0
     6b2:	85 e0       	ldi	r24, 0x05	; 5
     6b4:	0c 94 d6 0a 	jmp	0x15ac	; 0x15ac <set_character_pgm>

000006b8 <fiveinarow_setup>:
}

void fiveinarow_setup(bool turn){
	row_cursor_x = 7;
     6b8:	97 e0       	ldi	r25, 0x07	; 7
     6ba:	90 93 d6 01 	sts	0x01D6, r25	; 0x8001d6 <row_cursor_x>
	row_cursor_y = 7;
     6be:	90 93 d5 01 	sts	0x01D5, r25	; 0x8001d5 <row_cursor_y>
	row_display_pos = 6;
     6c2:	96 e0       	ldi	r25, 0x06	; 6
     6c4:	90 93 d2 01 	sts	0x01D2, r25	; 0x8001d2 <__data_end>
	row_player_turn = turn;
     6c8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     6cc:	20 e0       	ldi	r18, 0x00	; 0
     6ce:	30 e0       	ldi	r19, 0x00	; 0
	
	for(uint8_t q = 0; q < 15; q++){
		for(uint8_t i = 0; i < 15; i++){
			row_markers[i][q] = ' ';
     6d0:	4f e0       	ldi	r20, 0x0F	; 15
     6d2:	50 e2       	ldi	r21, 0x20	; 32
	set_character_pgm(UNDER_CODE, under_char);
	set_character_pgm(X_UNDER_CODE, x_under_char);
	set_character_pgm(O_UNDER_CODE, o_under_char);
}

void fiveinarow_setup(bool turn){
     6d4:	80 e0       	ldi	r24, 0x00	; 0
     6d6:	90 e0       	ldi	r25, 0x00	; 0
	row_display_pos = 6;
	row_player_turn = turn;
	
	for(uint8_t q = 0; q < 15; q++){
		for(uint8_t i = 0; i < 15; i++){
			row_markers[i][q] = ' ';
     6d8:	48 9f       	mul	r20, r24
     6da:	f0 01       	movw	r30, r0
     6dc:	49 9f       	mul	r20, r25
     6de:	f0 0d       	add	r31, r0
     6e0:	11 24       	eor	r1, r1
     6e2:	e9 52       	subi	r30, 0x29	; 41
     6e4:	fe 4f       	sbci	r31, 0xFE	; 254
     6e6:	e2 0f       	add	r30, r18
     6e8:	f3 1f       	adc	r31, r19
     6ea:	50 83       	st	Z, r21
     6ec:	01 96       	adiw	r24, 0x01	; 1
	row_cursor_y = 7;
	row_display_pos = 6;
	row_player_turn = turn;
	
	for(uint8_t q = 0; q < 15; q++){
		for(uint8_t i = 0; i < 15; i++){
     6ee:	8f 30       	cpi	r24, 0x0F	; 15
     6f0:	91 05       	cpc	r25, r1
     6f2:	91 f7       	brne	.-28     	; 0x6d8 <fiveinarow_setup+0x20>
     6f4:	2f 5f       	subi	r18, 0xFF	; 255
     6f6:	3f 4f       	sbci	r19, 0xFF	; 255
	row_cursor_x = 7;
	row_cursor_y = 7;
	row_display_pos = 6;
	row_player_turn = turn;
	
	for(uint8_t q = 0; q < 15; q++){
     6f8:	2f 30       	cpi	r18, 0x0F	; 15
     6fa:	31 05       	cpc	r19, r1
     6fc:	59 f7       	brne	.-42     	; 0x6d4 <fiveinarow_setup+0x1c>
     6fe:	08 95       	ret

00000700 <fiveinarow_left>:
			row_markers[i][q] = ' ';
		}
	}
}
void fiveinarow_left(){
	if(row_cursor_x == 0)row_cursor_x = 1;
     700:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <row_cursor_x>
     704:	81 11       	cpse	r24, r1
     706:	03 c0       	rjmp	.+6      	; 0x70e <fiveinarow_left+0xe>
     708:	81 e0       	ldi	r24, 0x01	; 1
     70a:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <row_cursor_x>
	row_cursor_x--;
     70e:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <row_cursor_x>
     712:	81 50       	subi	r24, 0x01	; 1
     714:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <row_cursor_x>
     718:	08 95       	ret

0000071a <fiveinarow_right>:
}

void fiveinarow_right(){
	row_cursor_x++;
     71a:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <row_cursor_x>
     71e:	8f 5f       	subi	r24, 0xFF	; 255
     720:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <row_cursor_x>
	if(row_cursor_x > 14)row_cursor_x = 14;
     724:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <row_cursor_x>
     728:	8f 30       	cpi	r24, 0x0F	; 15
     72a:	18 f0       	brcs	.+6      	; 0x732 <fiveinarow_right+0x18>
     72c:	8e e0       	ldi	r24, 0x0E	; 14
     72e:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <row_cursor_x>
     732:	08 95       	ret

00000734 <fiveinarow_up>:
}

void fiveinarow_up(){
	if(row_cursor_y == 0)row_cursor_y = 1;
     734:	80 91 d5 01 	lds	r24, 0x01D5	; 0x8001d5 <row_cursor_y>
     738:	81 11       	cpse	r24, r1
     73a:	03 c0       	rjmp	.+6      	; 0x742 <fiveinarow_up+0xe>
     73c:	81 e0       	ldi	r24, 0x01	; 1
     73e:	80 93 d5 01 	sts	0x01D5, r24	; 0x8001d5 <row_cursor_y>
	row_cursor_y--;
     742:	80 91 d5 01 	lds	r24, 0x01D5	; 0x8001d5 <row_cursor_y>
     746:	81 50       	subi	r24, 0x01	; 1
     748:	80 93 d5 01 	sts	0x01D5, r24	; 0x8001d5 <row_cursor_y>
	
	if(row_cursor_y < row_display_pos)row_display_pos = row_cursor_y;
     74c:	90 91 d5 01 	lds	r25, 0x01D5	; 0x8001d5 <row_cursor_y>
     750:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <__data_end>
     754:	98 17       	cp	r25, r24
     756:	20 f4       	brcc	.+8      	; 0x760 <fiveinarow_up+0x2c>
     758:	80 91 d5 01 	lds	r24, 0x01D5	; 0x8001d5 <row_cursor_y>
     75c:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <__data_end>
     760:	08 95       	ret

00000762 <fiveinarow_down>:
}

void fiveinarow_down(){
	row_cursor_y++;
     762:	80 91 d5 01 	lds	r24, 0x01D5	; 0x8001d5 <row_cursor_y>
     766:	8f 5f       	subi	r24, 0xFF	; 255
     768:	80 93 d5 01 	sts	0x01D5, r24	; 0x8001d5 <row_cursor_y>
	if(row_cursor_y > 14)row_cursor_y = 14;
     76c:	80 91 d5 01 	lds	r24, 0x01D5	; 0x8001d5 <row_cursor_y>
     770:	8f 30       	cpi	r24, 0x0F	; 15
     772:	18 f0       	brcs	.+6      	; 0x77a <fiveinarow_down+0x18>
     774:	8e e0       	ldi	r24, 0x0E	; 14
     776:	80 93 d5 01 	sts	0x01D5, r24	; 0x8001d5 <row_cursor_y>
	
	if(row_cursor_y > row_display_pos+2)row_display_pos = row_cursor_y-2;
     77a:	20 91 d5 01 	lds	r18, 0x01D5	; 0x8001d5 <row_cursor_y>
     77e:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <__data_end>
     782:	30 e0       	ldi	r19, 0x00	; 0
     784:	90 e0       	ldi	r25, 0x00	; 0
     786:	02 96       	adiw	r24, 0x02	; 2
     788:	82 17       	cp	r24, r18
     78a:	93 07       	cpc	r25, r19
     78c:	2c f4       	brge	.+10     	; 0x798 <fiveinarow_down+0x36>
     78e:	80 91 d5 01 	lds	r24, 0x01D5	; 0x8001d5 <row_cursor_y>
     792:	82 50       	subi	r24, 0x02	; 2
     794:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <__data_end>
     798:	08 95       	ret

0000079a <fiveinarow_place>:
}

void fiveinarow_place(char* message, char topic){
     79a:	dc 01       	movw	r26, r24
	if(row_player_turn && row_markers[row_cursor_x][row_cursor_y] == ' '){
     79c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     7a0:	88 23       	and	r24, r24
     7a2:	d1 f1       	breq	.+116    	; 0x818 <__DATA_REGION_LENGTH__+0x18>
     7a4:	e0 91 d6 01 	lds	r30, 0x01D6	; 0x8001d6 <row_cursor_x>
     7a8:	80 91 d5 01 	lds	r24, 0x01D5	; 0x8001d5 <row_cursor_y>
     7ac:	9f e0       	ldi	r25, 0x0F	; 15
     7ae:	9e 9f       	mul	r25, r30
     7b0:	f0 01       	movw	r30, r0
     7b2:	11 24       	eor	r1, r1
     7b4:	e9 52       	subi	r30, 0x29	; 41
     7b6:	fe 4f       	sbci	r31, 0xFE	; 254
     7b8:	e8 0f       	add	r30, r24
     7ba:	f1 1d       	adc	r31, r1
     7bc:	80 81       	ld	r24, Z
     7be:	80 32       	cpi	r24, 0x20	; 32
     7c0:	59 f5       	brne	.+86     	; 0x818 <__DATA_REGION_LENGTH__+0x18>
		row_last_x = row_cursor_x;
     7c2:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <row_cursor_x>
     7c6:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <row_last_x>
		row_last_y = row_cursor_y;
     7ca:	80 91 d5 01 	lds	r24, 0x01D5	; 0x8001d5 <row_cursor_y>
     7ce:	80 93 d3 01 	sts	0x01D3, r24	; 0x8001d3 <row_last_y>
		row_player_turn = false;
     7d2:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
		
		row_markers[row_cursor_x][row_cursor_y] = 'X';
     7d6:	e0 91 d6 01 	lds	r30, 0x01D6	; 0x8001d6 <row_cursor_x>
     7da:	80 91 d5 01 	lds	r24, 0x01D5	; 0x8001d5 <row_cursor_y>
     7de:	9e 9f       	mul	r25, r30
     7e0:	f0 01       	movw	r30, r0
     7e2:	11 24       	eor	r1, r1
     7e4:	e9 52       	subi	r30, 0x29	; 41
     7e6:	fe 4f       	sbci	r31, 0xFE	; 254
     7e8:	e8 0f       	add	r30, r24
     7ea:	f1 1d       	adc	r31, r1
     7ec:	88 e5       	ldi	r24, 0x58	; 88
     7ee:	80 83       	st	Z, r24
		message[0] = topic;
     7f0:	6c 93       	st	X, r22
		message[1] = '3';
     7f2:	83 e3       	ldi	r24, 0x33	; 51
     7f4:	11 96       	adiw	r26, 0x01	; 1
     7f6:	8c 93       	st	X, r24
     7f8:	11 97       	sbiw	r26, 0x01	; 1
		message[2] = row_cursor_x+48;
     7fa:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <row_cursor_x>
     7fe:	80 5d       	subi	r24, 0xD0	; 208
     800:	12 96       	adiw	r26, 0x02	; 2
     802:	8c 93       	st	X, r24
     804:	12 97       	sbiw	r26, 0x02	; 2
		message[3] = row_cursor_y+48;
     806:	80 91 d5 01 	lds	r24, 0x01D5	; 0x8001d5 <row_cursor_y>
     80a:	80 5d       	subi	r24, 0xD0	; 208
     80c:	13 96       	adiw	r26, 0x03	; 3
     80e:	8c 93       	st	X, r24
     810:	13 97       	sbiw	r26, 0x03	; 3
		message[4] = '\0';
     812:	14 96       	adiw	r26, 0x04	; 4
     814:	1c 92       	st	X, r1
     816:	08 95       	ret
	}else{
		message[0] = '\0';
     818:	1c 92       	st	X, r1
     81a:	08 95       	ret

0000081c <fiveinarow_recive>:
	}
	
}

void fiveinarow_recive(char* message){
     81c:	fc 01       	movw	r30, r24
	row_player_turn = true;
     81e:	81 e0       	ldi	r24, 0x01	; 1
     820:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>

	row_last_x = message[2]-48;
     824:	92 81       	ldd	r25, Z+2	; 0x02
     826:	90 53       	subi	r25, 0x30	; 48
     828:	90 93 d4 01 	sts	0x01D4, r25	; 0x8001d4 <row_last_x>
	row_last_y = message[3]-48;
     82c:	83 81       	ldd	r24, Z+3	; 0x03
     82e:	80 53       	subi	r24, 0x30	; 48
     830:	80 93 d3 01 	sts	0x01D3, r24	; 0x8001d3 <row_last_y>
	
	row_cursor_x = row_last_x;
     834:	80 91 d4 01 	lds	r24, 0x01D4	; 0x8001d4 <row_last_x>
     838:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <row_cursor_x>
	row_cursor_y = row_last_y;
     83c:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <row_last_y>
     840:	80 93 d5 01 	sts	0x01D5, r24	; 0x8001d5 <row_cursor_y>
	
	row_markers[row_last_x][row_last_y] = 'O';
     844:	e0 91 d4 01 	lds	r30, 0x01D4	; 0x8001d4 <row_last_x>
     848:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <row_last_y>
     84c:	9f e0       	ldi	r25, 0x0F	; 15
     84e:	e9 9f       	mul	r30, r25
     850:	f0 01       	movw	r30, r0
     852:	11 24       	eor	r1, r1
     854:	e9 52       	subi	r30, 0x29	; 41
     856:	fe 4f       	sbci	r31, 0xFE	; 254
     858:	e8 0f       	add	r30, r24
     85a:	f1 1d       	adc	r31, r1
     85c:	8f e4       	ldi	r24, 0x4F	; 79
     85e:	80 83       	st	Z, r24
	if(row_last_y < row_display_pos){
     860:	90 91 d3 01 	lds	r25, 0x01D3	; 0x8001d3 <row_last_y>
     864:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <__data_end>
     868:	98 17       	cp	r25, r24
     86a:	20 f4       	brcc	.+8      	; 0x874 <fiveinarow_recive+0x58>
		row_display_pos = row_last_y;
     86c:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <row_last_y>
     870:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <__data_end>
		//if(row_cursor_y < row_display_pos)row_cursor_y = row_display_pos;
	}
	if(row_last_y > row_display_pos+2){
     874:	20 91 d3 01 	lds	r18, 0x01D3	; 0x8001d3 <row_last_y>
     878:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <__data_end>
     87c:	30 e0       	ldi	r19, 0x00	; 0
     87e:	90 e0       	ldi	r25, 0x00	; 0
     880:	02 96       	adiw	r24, 0x02	; 2
     882:	82 17       	cp	r24, r18
     884:	93 07       	cpc	r25, r19
     886:	2c f4       	brge	.+10     	; 0x892 <fiveinarow_recive+0x76>
		row_display_pos = row_last_y-2;
     888:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <row_last_y>
     88c:	82 50       	subi	r24, 0x02	; 2
     88e:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <__data_end>
     892:	08 95       	ret

00000894 <fiveinarow_render>:
		//if(row_cursor_y > row_display_pos+2)row_cursor_y = row_display_pos+2;
	}
}

void fiveinarow_render(char* row_buf){	
     894:	cf 93       	push	r28
     896:	df 93       	push	r29
	uint8_t index = 0;
	for(uint8_t q = row_display_pos; q < row_display_pos+3; q++){
     898:	20 91 d2 01 	lds	r18, 0x01D2	; 0x8001d2 <__data_end>
		//if(row_cursor_y > row_display_pos+2)row_cursor_y = row_display_pos+2;
	}
}

void fiveinarow_render(char* row_buf){	
	uint8_t index = 0;
     89c:	30 e0       	ldi	r19, 0x00	; 0
			row_buf[index] = q+56;
		}
		index++;
		
		for(uint8_t i = 0; i < 15; i++){
			row_buf[index] = row_markers[i][q];
     89e:	bf e0       	ldi	r27, 0x0F	; 15
	}
}

void fiveinarow_render(char* row_buf){	
	uint8_t index = 0;
	for(uint8_t q = row_display_pos; q < row_display_pos+3; q++){
     8a0:	40 91 d2 01 	lds	r20, 0x01D2	; 0x8001d2 <__data_end>
     8a4:	62 2f       	mov	r22, r18
     8a6:	70 e0       	ldi	r23, 0x00	; 0
     8a8:	50 e0       	ldi	r21, 0x00	; 0
     8aa:	4e 5f       	subi	r20, 0xFE	; 254
     8ac:	5f 4f       	sbci	r21, 0xFF	; 255
     8ae:	46 17       	cp	r20, r22
     8b0:	57 07       	cpc	r21, r23
     8b2:	3c f1       	brlt	.+78     	; 0x902 <__stack+0x3>
     8b4:	43 2f       	mov	r20, r19
     8b6:	50 e0       	ldi	r21, 0x00	; 0
		if(q < 9){
			row_buf[index] = q+49;
     8b8:	ec 01       	movw	r28, r24
     8ba:	c4 0f       	add	r28, r20
     8bc:	d5 1f       	adc	r29, r21
}

void fiveinarow_render(char* row_buf){	
	uint8_t index = 0;
	for(uint8_t q = row_display_pos; q < row_display_pos+3; q++){
		if(q < 9){
     8be:	29 30       	cpi	r18, 0x09	; 9
     8c0:	10 f4       	brcc	.+4      	; 0x8c6 <fiveinarow_render+0x32>
			row_buf[index] = q+49;
     8c2:	e1 e3       	ldi	r30, 0x31	; 49
     8c4:	01 c0       	rjmp	.+2      	; 0x8c8 <fiveinarow_render+0x34>
		}else{
			row_buf[index] = q+56;
     8c6:	e8 e3       	ldi	r30, 0x38	; 56
     8c8:	e2 0f       	add	r30, r18
     8ca:	e8 83       	st	Y, r30
		}
		index++;
     8cc:	a1 e0       	ldi	r26, 0x01	; 1
     8ce:	a3 0f       	add	r26, r19
     8d0:	40 e0       	ldi	r20, 0x00	; 0
     8d2:	50 e0       	ldi	r21, 0x00	; 0
		
		for(uint8_t i = 0; i < 15; i++){
			row_buf[index] = row_markers[i][q];
     8d4:	b4 9f       	mul	r27, r20
     8d6:	f0 01       	movw	r30, r0
     8d8:	b5 9f       	mul	r27, r21
     8da:	f0 0d       	add	r31, r0
     8dc:	11 24       	eor	r1, r1
     8de:	e9 52       	subi	r30, 0x29	; 41
     8e0:	fe 4f       	sbci	r31, 0xFE	; 254
     8e2:	e6 0f       	add	r30, r22
     8e4:	f7 1f       	adc	r31, r23
     8e6:	c0 81       	ld	r28, Z
     8e8:	fc 01       	movw	r30, r24
     8ea:	ea 0f       	add	r30, r26
     8ec:	f1 1d       	adc	r31, r1
     8ee:	c0 83       	st	Z, r28
			index++;
     8f0:	af 5f       	subi	r26, 0xFF	; 255
     8f2:	4f 5f       	subi	r20, 0xFF	; 255
     8f4:	5f 4f       	sbci	r21, 0xFF	; 255
		}else{
			row_buf[index] = q+56;
		}
		index++;
		
		for(uint8_t i = 0; i < 15; i++){
     8f6:	4f 30       	cpi	r20, 0x0F	; 15
     8f8:	51 05       	cpc	r21, r1
     8fa:	61 f7       	brne	.-40     	; 0x8d4 <fiveinarow_render+0x40>
     8fc:	30 5f       	subi	r19, 0xF0	; 240
	}
}

void fiveinarow_render(char* row_buf){	
	uint8_t index = 0;
	for(uint8_t q = row_display_pos; q < row_display_pos+3; q++){
     8fe:	2f 5f       	subi	r18, 0xFF	; 255
     900:	cf cf       	rjmp	.-98     	; 0x8a0 <fiveinarow_render+0xc>
		for(uint8_t i = 0; i < 15; i++){
			row_buf[index] = row_markers[i][q];
			index++;
		}
	}
	uint8_t cursor_string_pos = ((row_cursor_y-row_display_pos)*16)+row_cursor_x+1;
     902:	20 91 d5 01 	lds	r18, 0x01D5	; 0x8001d5 <row_cursor_y>
     906:	30 91 d2 01 	lds	r19, 0x01D2	; 0x8001d2 <__data_end>
     90a:	e0 91 d6 01 	lds	r30, 0x01D6	; 0x8001d6 <row_cursor_x>
     90e:	23 1b       	sub	r18, r19
     910:	ef 5f       	subi	r30, 0xFF	; 255
     912:	30 e1       	ldi	r19, 0x10	; 16
     914:	23 9f       	mul	r18, r19
     916:	e0 0d       	add	r30, r0
     918:	11 24       	eor	r1, r1
	if(row_player_turn){
     91a:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
     91e:	f0 e0       	ldi	r31, 0x00	; 0
		switch(row_buf[cursor_string_pos]){
     920:	e8 0f       	add	r30, r24
     922:	f9 1f       	adc	r31, r25
			row_buf[index] = row_markers[i][q];
			index++;
		}
	}
	uint8_t cursor_string_pos = ((row_cursor_y-row_display_pos)*16)+row_cursor_x+1;
	if(row_player_turn){
     924:	22 23       	and	r18, r18
     926:	59 f0       	breq	.+22     	; 0x93e <__stack+0x3f>
		switch(row_buf[cursor_string_pos]){
     928:	20 81       	ld	r18, Z
     92a:	2f 34       	cpi	r18, 0x4F	; 79
     92c:	21 f0       	breq	.+8      	; 0x936 <__stack+0x37>
     92e:	28 35       	cpi	r18, 0x58	; 88
     930:	21 f4       	brne	.+8      	; 0x93a <__stack+0x3b>
			case 'X':
				row_buf[cursor_string_pos] = X_CURS_CODE;
     932:	21 e0       	ldi	r18, 0x01	; 1
     934:	0e c0       	rjmp	.+28     	; 0x952 <__stack+0x53>
				break;
			case 'O':
				row_buf[cursor_string_pos] = O_CURS_CODE;
     936:	22 e0       	ldi	r18, 0x02	; 2
     938:	0c c0       	rjmp	.+24     	; 0x952 <__stack+0x53>
				break;
			default:
				row_buf[cursor_string_pos] = '*';
     93a:	2a e2       	ldi	r18, 0x2A	; 42
     93c:	0a c0       	rjmp	.+20     	; 0x952 <__stack+0x53>
				break;
		}	
	} else{
		switch(row_buf[cursor_string_pos]){
     93e:	20 81       	ld	r18, Z
     940:	2f 34       	cpi	r18, 0x4F	; 79
     942:	21 f0       	breq	.+8      	; 0x94c <__stack+0x4d>
     944:	28 35       	cpi	r18, 0x58	; 88
     946:	21 f4       	brne	.+8      	; 0x950 <__stack+0x51>
			case 'X':
				row_buf[cursor_string_pos] = X_UNDER_CODE;
     948:	24 e0       	ldi	r18, 0x04	; 4
     94a:	03 c0       	rjmp	.+6      	; 0x952 <__stack+0x53>
				break;
			case 'O':
				row_buf[cursor_string_pos] = O_UNDER_CODE;
     94c:	25 e0       	ldi	r18, 0x05	; 5
     94e:	01 c0       	rjmp	.+2      	; 0x952 <__stack+0x53>
				break;
			default:
				row_buf[cursor_string_pos] = UNDER_CODE;
     950:	23 e0       	ldi	r18, 0x03	; 3
     952:	20 83       	st	Z, r18
				break;
		}
	}
	
	row_buf[48] = '\0';
     954:	fc 01       	movw	r30, r24
     956:	10 aa       	std	Z+48, r1	; 0x30
}
     958:	df 91       	pop	r29
     95a:	cf 91       	pop	r28
     95c:	08 95       	ret

0000095e <fiveinarow_check_win>:

bool fiveinarow_check_win(){
     95e:	ff 92       	push	r15
     960:	0f 93       	push	r16
     962:	1f 93       	push	r17
     964:	cf 93       	push	r28
     966:	df 93       	push	r29
	char last_player = row_markers[row_last_x][row_last_y];
     968:	e0 91 d4 01 	lds	r30, 0x01D4	; 0x8001d4 <row_last_x>
     96c:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <row_last_y>
     970:	9f e0       	ldi	r25, 0x0F	; 15
     972:	e9 9f       	mul	r30, r25
     974:	f0 01       	movw	r30, r0
     976:	11 24       	eor	r1, r1
     978:	e9 52       	subi	r30, 0x29	; 41
     97a:	fe 4f       	sbci	r31, 0xFE	; 254
     97c:	e8 0f       	add	r30, r24
     97e:	f1 1d       	adc	r31, r1
     980:	c0 81       	ld	r28, Z
	uint8_t test_x;
	uint8_t test_y;
	
	//Horizontal
	row_lenght = 1;
	test_x = row_last_x;
     982:	10 91 d4 01 	lds	r17, 0x01D4	; 0x8001d4 <row_last_x>
	test_y = row_last_y;
     986:	00 91 d3 01 	lds	r16, 0x01D3	; 0x8001d3 <row_last_y>
	uint8_t row_lenght;
	uint8_t test_x;
	uint8_t test_y;
	
	//Horizontal
	row_lenght = 1;
     98a:	d1 e0       	ldi	r29, 0x01	; 1
	test_x = row_last_x;
	test_y = row_last_y;
	while(fiveinarow_is_char(--test_x, test_y, last_player))row_lenght++;
     98c:	4c 2f       	mov	r20, r28
     98e:	60 2f       	mov	r22, r16
     990:	81 2f       	mov	r24, r17
     992:	8d 1b       	sub	r24, r29
     994:	0e 94 32 03 	call	0x664	; 0x664 <fiveinarow_is_char>
     998:	88 23       	and	r24, r24
     99a:	11 f0       	breq	.+4      	; 0x9a0 <fiveinarow_check_win+0x42>
     99c:	df 5f       	subi	r29, 0xFF	; 255
     99e:	f6 cf       	rjmp	.-20     	; 0x98c <fiveinarow_check_win+0x2e>
	test_x = row_last_x;	
     9a0:	10 91 d4 01 	lds	r17, 0x01D4	; 0x8001d4 <row_last_x>
     9a4:	d1 1b       	sub	r29, r17
     9a6:	fd 2e       	mov	r15, r29
     9a8:	f1 0e       	add	r15, r17
	while(fiveinarow_is_char(++test_x, test_y, last_player))row_lenght++;
     9aa:	1f 5f       	subi	r17, 0xFF	; 255
     9ac:	4c 2f       	mov	r20, r28
     9ae:	60 2f       	mov	r22, r16
     9b0:	81 2f       	mov	r24, r17
     9b2:	0e 94 32 03 	call	0x664	; 0x664 <fiveinarow_is_char>
     9b6:	81 11       	cpse	r24, r1
     9b8:	f6 cf       	rjmp	.-20     	; 0x9a6 <fiveinarow_check_win+0x48>
	if(row_lenght >= 5)return true;
     9ba:	84 e0       	ldi	r24, 0x04	; 4
     9bc:	8f 15       	cp	r24, r15
     9be:	10 f4       	brcc	.+4      	; 0x9c4 <fiveinarow_check_win+0x66>
     9c0:	81 e0       	ldi	r24, 0x01	; 1
     9c2:	69 c0       	rjmp	.+210    	; 0xa96 <fiveinarow_check_win+0x138>
	
	//Vertical
	row_lenght = 1;
	test_x = row_last_x;
     9c4:	00 91 d4 01 	lds	r16, 0x01D4	; 0x8001d4 <row_last_x>
	test_y = row_last_y;
     9c8:	10 91 d3 01 	lds	r17, 0x01D3	; 0x8001d3 <row_last_y>
	test_x = row_last_x;	
	while(fiveinarow_is_char(++test_x, test_y, last_player))row_lenght++;
	if(row_lenght >= 5)return true;
	
	//Vertical
	row_lenght = 1;
     9cc:	d1 e0       	ldi	r29, 0x01	; 1
	test_x = row_last_x;
	test_y = row_last_y;
	while(fiveinarow_is_char(test_x, --test_y, last_player))row_lenght++;
     9ce:	4c 2f       	mov	r20, r28
     9d0:	61 2f       	mov	r22, r17
     9d2:	6d 1b       	sub	r22, r29
     9d4:	80 2f       	mov	r24, r16
     9d6:	0e 94 32 03 	call	0x664	; 0x664 <fiveinarow_is_char>
     9da:	88 23       	and	r24, r24
     9dc:	11 f0       	breq	.+4      	; 0x9e2 <fiveinarow_check_win+0x84>
     9de:	df 5f       	subi	r29, 0xFF	; 255
     9e0:	f6 cf       	rjmp	.-20     	; 0x9ce <fiveinarow_check_win+0x70>
	test_y = row_last_y;
     9e2:	10 91 d3 01 	lds	r17, 0x01D3	; 0x8001d3 <row_last_y>
     9e6:	d1 1b       	sub	r29, r17
     9e8:	fd 2e       	mov	r15, r29
     9ea:	f1 0e       	add	r15, r17
	while(fiveinarow_is_char(test_x, ++test_y, last_player))row_lenght++;
     9ec:	1f 5f       	subi	r17, 0xFF	; 255
     9ee:	4c 2f       	mov	r20, r28
     9f0:	61 2f       	mov	r22, r17
     9f2:	80 2f       	mov	r24, r16
     9f4:	0e 94 32 03 	call	0x664	; 0x664 <fiveinarow_is_char>
     9f8:	81 11       	cpse	r24, r1
     9fa:	f6 cf       	rjmp	.-20     	; 0x9e8 <fiveinarow_check_win+0x8a>
	if(row_lenght >= 5)return true;
     9fc:	94 e0       	ldi	r25, 0x04	; 4
     9fe:	9f 15       	cp	r25, r15
     a00:	f8 f2       	brcs	.-66     	; 0x9c0 <fiveinarow_check_win+0x62>
	
	//Diagonal forward
	row_lenght = 1;
	test_x = row_last_x;
     a02:	d0 91 d4 01 	lds	r29, 0x01D4	; 0x8001d4 <row_last_x>
	test_y = row_last_y;
     a06:	00 91 d3 01 	lds	r16, 0x01D3	; 0x8001d3 <row_last_y>
	test_y = row_last_y;
	while(fiveinarow_is_char(test_x, ++test_y, last_player))row_lenght++;
	if(row_lenght >= 5)return true;
	
	//Diagonal forward
	row_lenght = 1;
     a0a:	11 e0       	ldi	r17, 0x01	; 1
	test_x = row_last_x;
	test_y = row_last_y;
	while(fiveinarow_is_char(--test_x, --test_y, last_player))row_lenght++;
     a0c:	4c 2f       	mov	r20, r28
     a0e:	60 2f       	mov	r22, r16
     a10:	61 1b       	sub	r22, r17
     a12:	8d 2f       	mov	r24, r29
     a14:	81 1b       	sub	r24, r17
     a16:	0e 94 32 03 	call	0x664	; 0x664 <fiveinarow_is_char>
     a1a:	88 23       	and	r24, r24
     a1c:	11 f0       	breq	.+4      	; 0xa22 <fiveinarow_check_win+0xc4>
     a1e:	1f 5f       	subi	r17, 0xFF	; 255
     a20:	f5 cf       	rjmp	.-22     	; 0xa0c <fiveinarow_check_win+0xae>
	test_x = row_last_x;
     a22:	00 91 d4 01 	lds	r16, 0x01D4	; 0x8001d4 <row_last_x>
	test_y = row_last_y;
     a26:	d0 91 d3 01 	lds	r29, 0x01D3	; 0x8001d3 <row_last_y>
     a2a:	1d 1b       	sub	r17, r29
	while(fiveinarow_is_char(++test_x, ++test_y, last_player))row_lenght++;
     a2c:	0d 1b       	sub	r16, r29
     a2e:	f1 2e       	mov	r15, r17
     a30:	fd 0e       	add	r15, r29
     a32:	df 5f       	subi	r29, 0xFF	; 255
     a34:	4c 2f       	mov	r20, r28
     a36:	6d 2f       	mov	r22, r29
     a38:	80 2f       	mov	r24, r16
     a3a:	8d 0f       	add	r24, r29
     a3c:	0e 94 32 03 	call	0x664	; 0x664 <fiveinarow_is_char>
     a40:	81 11       	cpse	r24, r1
     a42:	f5 cf       	rjmp	.-22     	; 0xa2e <fiveinarow_check_win+0xd0>
	if(row_lenght >= 5)return true;
     a44:	84 e0       	ldi	r24, 0x04	; 4
     a46:	8f 15       	cp	r24, r15
     a48:	08 f4       	brcc	.+2      	; 0xa4c <fiveinarow_check_win+0xee>
     a4a:	ba cf       	rjmp	.-140    	; 0x9c0 <fiveinarow_check_win+0x62>
	
	//Diagonal backwards
	row_lenght = 1;
	test_x = row_last_x;
     a4c:	d0 91 d4 01 	lds	r29, 0x01D4	; 0x8001d4 <row_last_x>
	test_y = row_last_y;
     a50:	00 91 d3 01 	lds	r16, 0x01D3	; 0x8001d3 <row_last_y>
	test_y = row_last_y;
	while(fiveinarow_is_char(++test_x, ++test_y, last_player))row_lenght++;
	if(row_lenght >= 5)return true;
	
	//Diagonal backwards
	row_lenght = 1;
     a54:	11 e0       	ldi	r17, 0x01	; 1
	test_x = row_last_x;
	test_y = row_last_y;
	while(fiveinarow_is_char(--test_x, ++test_y, last_player))row_lenght++;
     a56:	4c 2f       	mov	r20, r28
     a58:	61 2f       	mov	r22, r17
     a5a:	60 0f       	add	r22, r16
     a5c:	8d 2f       	mov	r24, r29
     a5e:	81 1b       	sub	r24, r17
     a60:	0e 94 32 03 	call	0x664	; 0x664 <fiveinarow_is_char>
     a64:	88 23       	and	r24, r24
     a66:	11 f0       	breq	.+4      	; 0xa6c <fiveinarow_check_win+0x10e>
     a68:	1f 5f       	subi	r17, 0xFF	; 255
     a6a:	f5 cf       	rjmp	.-22     	; 0xa56 <fiveinarow_check_win+0xf8>
	test_x = row_last_x;
     a6c:	d0 91 d4 01 	lds	r29, 0x01D4	; 0x8001d4 <row_last_x>
	test_y = row_last_y;
     a70:	00 91 d3 01 	lds	r16, 0x01D3	; 0x8001d3 <row_last_y>
     a74:	1d 1b       	sub	r17, r29
     a76:	f1 2e       	mov	r15, r17
     a78:	fd 0e       	add	r15, r29
	while(fiveinarow_is_char(++test_x, --test_y, last_player))row_lenght++;
     a7a:	01 50       	subi	r16, 0x01	; 1
     a7c:	df 5f       	subi	r29, 0xFF	; 255
     a7e:	4c 2f       	mov	r20, r28
     a80:	60 2f       	mov	r22, r16
     a82:	8d 2f       	mov	r24, r29
     a84:	0e 94 32 03 	call	0x664	; 0x664 <fiveinarow_is_char>
     a88:	81 11       	cpse	r24, r1
     a8a:	f5 cf       	rjmp	.-22     	; 0xa76 <fiveinarow_check_win+0x118>
	if(row_lenght >= 5)return true;
     a8c:	81 e0       	ldi	r24, 0x01	; 1
     a8e:	94 e0       	ldi	r25, 0x04	; 4
     a90:	9f 15       	cp	r25, r15
     a92:	08 f0       	brcs	.+2      	; 0xa96 <fiveinarow_check_win+0x138>
     a94:	80 e0       	ldi	r24, 0x00	; 0
	
	return false;
}
     a96:	df 91       	pop	r29
     a98:	cf 91       	pop	r28
     a9a:	1f 91       	pop	r17
     a9c:	0f 91       	pop	r16
     a9e:	ff 90       	pop	r15
     aa0:	08 95       	ret

00000aa2 <draw_five_map>:
		}
	}
}

void draw_five_map(){
	fiveinarow_render(row_buf);
     aa2:	8d e5       	ldi	r24, 0x5D	; 93
     aa4:	93 e0       	ldi	r25, 0x03	; 3
     aa6:	0e 94 4a 04 	call	0x894	; 0x894 <fiveinarow_render>
	set_cursor_pos(0);
     aaa:	80 e0       	ldi	r24, 0x00	; 0
     aac:	0e 94 b0 0a 	call	0x1560	; 0x1560 <set_cursor_pos>
	write_lcd_string(row_buf);
     ab0:	8d e5       	ldi	r24, 0x5D	; 93
     ab2:	93 e0       	ldi	r25, 0x03	; 3
     ab4:	0c 94 8b 0a 	jmp	0x1516	; 0x1516 <write_lcd_string>

00000ab8 <enter_main_mode>:
	}
	_delay_ms(30);
}

void enter_main_mode(char* message){
	program_mode = MAIN_MODE;
     ab8:	10 92 bc 02 	sts	0x02BC, r1	; 0x8002bc <program_mode>
	/*Reset variables and force given message in buffer*/
	game_prompted = false;
     abc:	10 92 bb 02 	sts	0x02BB, r1	; 0x8002bb <game_prompted>
	redraw = true;
     ac0:	21 e0       	ldi	r18, 0x01	; 1
     ac2:	20 93 01 01 	sts	0x0101, r18	; 0x800101 <redraw>
	request_sent = false;
     ac6:	10 92 ba 02 	sts	0x02BA, r1	; 0x8002ba <request_sent>
	messages_force(message);
     aca:	0c 94 26 0b 	jmp	0x164c	; 0x164c <messages_force>

00000ace <do_fir_actions>:
	fiveinarow_render(row_buf);
	set_cursor_pos(0);
	write_lcd_string(row_buf);
}

void do_fir_actions(){
     ace:	0f 93       	push	r16
     ad0:	1f 93       	push	r17
     ad2:	cf 93       	push	r28
     ad4:	df 93       	push	r29
	if(game_over !=  0){ /*Game is over*/
     ad6:	80 91 b8 02 	lds	r24, 0x02B8	; 0x8002b8 <game_over>
     ada:	88 23       	and	r24, r24
     adc:	b9 f0       	breq	.+46     	; 0xb0c <do_fir_actions+0x3e>
		draw_five_map();
     ade:	0e 94 51 05 	call	0xaa2	; 0xaa2 <draw_five_map>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     ae2:	2f ef       	ldi	r18, 0xFF	; 255
     ae4:	8d e3       	ldi	r24, 0x3D	; 61
     ae6:	99 e4       	ldi	r25, 0x49	; 73
     ae8:	21 50       	subi	r18, 0x01	; 1
     aea:	80 40       	sbci	r24, 0x00	; 0
     aec:	90 40       	sbci	r25, 0x00	; 0
     aee:	e1 f7       	brne	.-8      	; 0xae8 <do_fir_actions+0x1a>
     af0:	00 c0       	rjmp	.+0      	; 0xaf2 <do_fir_actions+0x24>
     af2:	00 00       	nop
		_delay_ms(3000);
		enter_main_mode(game_over == 1 ? "You won!" : "You lost!");
     af4:	80 91 b8 02 	lds	r24, 0x02B8	; 0x8002b8 <game_over>
     af8:	81 30       	cpi	r24, 0x01	; 1
     afa:	19 f0       	breq	.+6      	; 0xb02 <do_fir_actions+0x34>
     afc:	84 e2       	ldi	r24, 0x24	; 36
     afe:	91 e0       	ldi	r25, 0x01	; 1
     b00:	02 c0       	rjmp	.+4      	; 0xb06 <do_fir_actions+0x38>
     b02:	8b e1       	ldi	r24, 0x1B	; 27
     b04:	91 e0       	ldi	r25, 0x01	; 1
     b06:	0e 94 5c 05 	call	0xab8	; 0xab8 <enter_main_mode>
     b0a:	71 c0       	rjmp	.+226    	; 0xbee <do_fir_actions+0x120>
	} else{ /*Game is running*/
		if(DEADMAN_PRESSED){ /*If deadmans is pressed, attempt to place at cursor*/
     b0c:	4c 99       	sbic	0x09, 4	; 9
     b0e:	23 c0       	rjmp	.+70     	; 0xb56 <do_fir_actions+0x88>
			fiveinarow_place(placebuf, '3');
     b10:	63 e3       	ldi	r22, 0x33	; 51
     b12:	8e e8       	ldi	r24, 0x8E	; 142
     b14:	93 e0       	ldi	r25, 0x03	; 3
     b16:	0e 94 cd 03 	call	0x79a	; 0x79a <fiveinarow_place>
			if(placebuf[0] != '\0'){ /*If could be placed*/
     b1a:	80 91 8e 03 	lds	r24, 0x038E	; 0x80038e <placebuf>
     b1e:	88 23       	and	r24, r24
     b20:	09 f4       	brne	.+2      	; 0xb24 <do_fir_actions+0x56>
     b22:	65 c0       	rjmp	.+202    	; 0xbee <do_fir_actions+0x120>
				music_play_note(NOTE(F_PITCH, 2, SIXTEENTH_NOTE), 100);
     b24:	64 e6       	ldi	r22, 0x64	; 100
     b26:	82 e9       	ldi	r24, 0x92	; 146
     b28:	0e 94 9c 0b 	call	0x1738	; 0x1738 <music_play_note>
				if(fiveinarow_check_win()){ /*Check for win*/
     b2c:	0e 94 af 04 	call	0x95e	; 0x95e <fiveinarow_check_win>
     b30:	88 23       	and	r24, r24
     b32:	49 f0       	breq	.+18     	; 0xb46 <do_fir_actions+0x78>
					game_over = 1;
     b34:	81 e0       	ldi	r24, 0x01	; 1
     b36:	80 93 b8 02 	sts	0x02B8, r24	; 0x8002b8 <game_over>
					punished = false;
     b3a:	10 92 b9 02 	sts	0x02B9, r1	; 0x8002b9 <punished>
					music_play_song_pgm(melodies[2]);
     b3e:	86 e1       	ldi	r24, 0x16	; 22
     b40:	93 e0       	ldi	r25, 0x03	; 3
     b42:	0e 94 26 0c 	call	0x184c	; 0x184c <music_play_song_pgm>
				}
				uart_send_line(placebuf);
     b46:	8e e8       	ldi	r24, 0x8E	; 142
     b48:	93 e0       	ldi	r25, 0x03	; 3
     b4a:	0e 94 ef 09 	call	0x13de	; 0x13de <uart_send_line>
				redraw = true;
     b4e:	81 e0       	ldi	r24, 0x01	; 1
     b50:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <redraw>
     b54:	4c c0       	rjmp	.+152    	; 0xbee <do_fir_actions+0x120>
			}
		} else { /*If deadmans is not pressed. Check for moving cursor*/
			uint16_t x = read_avg_adc(1, 20);
     b56:	64 e1       	ldi	r22, 0x14	; 20
     b58:	70 e0       	ldi	r23, 0x00	; 0
     b5a:	81 e0       	ldi	r24, 0x01	; 1
     b5c:	0e 94 32 0a 	call	0x1464	; 0x1464 <read_avg_adc>
     b60:	8c 01       	movw	r16, r24
			uint16_t y = read_avg_adc(2, 20);
     b62:	64 e1       	ldi	r22, 0x14	; 20
     b64:	70 e0       	ldi	r23, 0x00	; 0
     b66:	82 e0       	ldi	r24, 0x02	; 2
     b68:	0e 94 32 0a 	call	0x1464	; 0x1464 <read_avg_adc>
     b6c:	ec 01       	movw	r28, r24
			
			/*Reset rested state if controller is flat*/
			if(move_delay == 0){
     b6e:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <move_delay>
     b72:	81 11       	cpse	r24, r1
     b74:	37 c0       	rjmp	.+110    	; 0xbe4 <do_fir_actions+0x116>
				if(x > x_rest+20){
     b76:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <x_rest>
     b7a:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <x_rest+0x1>
     b7e:	44 96       	adiw	r24, 0x14	; 20
     b80:	80 17       	cp	r24, r16
     b82:	91 07       	cpc	r25, r17
     b84:	18 f4       	brcc	.+6      	; 0xb8c <do_fir_actions+0xbe>
					fiveinarow_down();
     b86:	0e 94 b1 03 	call	0x762	; 0x762 <fiveinarow_down>
     b8a:	0a c0       	rjmp	.+20     	; 0xba0 <do_fir_actions+0xd2>
					redraw = true;
					controller_rested = false;
				}
				else if(x < x_rest-15){
     b8c:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <x_rest>
     b90:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <x_rest+0x1>
     b94:	0f 97       	sbiw	r24, 0x0f	; 15
     b96:	08 17       	cp	r16, r24
     b98:	19 07       	cpc	r17, r25
     b9a:	38 f4       	brcc	.+14     	; 0xbaa <do_fir_actions+0xdc>
					fiveinarow_up();
     b9c:	0e 94 9a 03 	call	0x734	; 0x734 <fiveinarow_up>
					redraw = true;
     ba0:	81 e0       	ldi	r24, 0x01	; 1
     ba2:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <redraw>
					controller_rested = false;
     ba6:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <controller_rested>
				}
				if(y > y_rest+20){
     baa:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <y_rest>
     bae:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <y_rest+0x1>
     bb2:	44 96       	adiw	r24, 0x14	; 20
     bb4:	8c 17       	cp	r24, r28
     bb6:	9d 07       	cpc	r25, r29
     bb8:	18 f4       	brcc	.+6      	; 0xbc0 <do_fir_actions+0xf2>
					fiveinarow_left();
     bba:	0e 94 80 03 	call	0x700	; 0x700 <fiveinarow_left>
     bbe:	0a c0       	rjmp	.+20     	; 0xbd4 <do_fir_actions+0x106>
					redraw = true;
					controller_rested = false;
				}
				else if(y < y_rest-20){
     bc0:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <y_rest>
     bc4:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <y_rest+0x1>
     bc8:	44 97       	sbiw	r24, 0x14	; 20
     bca:	c8 17       	cp	r28, r24
     bcc:	d9 07       	cpc	r29, r25
     bce:	38 f4       	brcc	.+14     	; 0xbde <do_fir_actions+0x110>
					fiveinarow_right();
     bd0:	0e 94 8d 03 	call	0x71a	; 0x71a <fiveinarow_right>
					redraw = true;
     bd4:	81 e0       	ldi	r24, 0x01	; 1
     bd6:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <redraw>
					controller_rested = false;
     bda:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <controller_rested>
				}
				move_delay = MOVE_DELAY_VAL;
     bde:	8d e2       	ldi	r24, 0x2D	; 45
     be0:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <move_delay>
			}
			if(redraw){
     be4:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <redraw>
     be8:	81 11       	cpse	r24, r1
				draw_five_map();
     bea:	0e 94 51 05 	call	0xaa2	; 0xaa2 <draw_five_map>
     bee:	8f e5       	ldi	r24, 0x5F	; 95
     bf0:	9a ee       	ldi	r25, 0xEA	; 234
     bf2:	01 97       	sbiw	r24, 0x01	; 1
     bf4:	f1 f7       	brne	.-4      	; 0xbf2 <do_fir_actions+0x124>
     bf6:	00 c0       	rjmp	.+0      	; 0xbf8 <do_fir_actions+0x12a>
     bf8:	00 00       	nop
			}
		}
	}
	_delay_ms(30);
}
     bfa:	df 91       	pop	r29
     bfc:	cf 91       	pop	r28
     bfe:	1f 91       	pop	r17
     c00:	0f 91       	pop	r16
     c02:	08 95       	ret

00000c04 <enter_fir_mode>:
	request_sent = false;
	messages_force(message);
}

void enter_fir_mode(){
	program_mode = FIR_MODE;
     c04:	81 e0       	ldi	r24, 0x01	; 1
     c06:	80 93 bc 02 	sts	0x02BC, r24	; 0x8002bc <program_mode>
	game_over = 0;
     c0a:	10 92 b8 02 	sts	0x02B8, r1	; 0x8002b8 <game_over>
	redraw = true;
     c0e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <redraw>
	if(LED_PORT & (1<<LEDG)){ /*If deadmans is active, disable*/
     c12:	5d 9b       	sbis	0x0b, 5	; 11
     c14:	05 c0       	rjmp	.+10     	; 0xc20 <enter_fir_mode+0x1c>
		uart_send_line("040");
     c16:	8e e2       	ldi	r24, 0x2E	; 46
     c18:	91 e0       	ldi	r25, 0x01	; 1
     c1a:	0e 94 ef 09 	call	0x13de	; 0x13de <uart_send_line>
		LED_PORT &= ~(1<<LEDG);
     c1e:	5d 98       	cbi	0x0b, 5	; 11
     c20:	08 95       	ret

00000c22 <send_move_command>:
		}
	}
	_delay_ms(50);
}

void send_move_command(){
     c22:	0f 93       	push	r16
     c24:	1f 93       	push	r17
     c26:	cf 93       	push	r28
     c28:	df 93       	push	r29
	if(command_hundreths == CMD_DELAY){ /*If no cooldown*/
     c2a:	80 91 c4 02 	lds	r24, 0x02C4	; 0x8002c4 <command_hundreths>
     c2e:	84 31       	cpi	r24, 0x14	; 20
     c30:	09 f0       	breq	.+2      	; 0xc34 <send_move_command+0x12>
     c32:	7b c0       	rjmp	.+246    	; 0xd2a <send_move_command+0x108>
		int16_t x_diff = x_rest - read_avg_adc(1, 25);
     c34:	c0 91 16 01 	lds	r28, 0x0116	; 0x800116 <x_rest>
     c38:	d0 91 17 01 	lds	r29, 0x0117	; 0x800117 <x_rest+0x1>
     c3c:	69 e1       	ldi	r22, 0x19	; 25
     c3e:	70 e0       	ldi	r23, 0x00	; 0
     c40:	81 e0       	ldi	r24, 0x01	; 1
     c42:	0e 94 32 0a 	call	0x1464	; 0x1464 <read_avg_adc>
     c46:	c8 1b       	sub	r28, r24
     c48:	d9 0b       	sbc	r29, r25
		int16_t y_diff = y_rest - read_avg_adc(2, 25);
     c4a:	00 91 14 01 	lds	r16, 0x0114	; 0x800114 <y_rest>
     c4e:	10 91 15 01 	lds	r17, 0x0115	; 0x800115 <y_rest+0x1>
     c52:	69 e1       	ldi	r22, 0x19	; 25
     c54:	70 e0       	ldi	r23, 0x00	; 0
     c56:	82 e0       	ldi	r24, 0x02	; 2
     c58:	0e 94 32 0a 	call	0x1464	; 0x1464 <read_avg_adc>
     c5c:	98 01       	movw	r18, r16
     c5e:	28 1b       	sub	r18, r24
     c60:	39 0b       	sbc	r19, r25
		int16_t left = x_diff+y_diff;
     c62:	8e 01       	movw	r16, r28
     c64:	02 0f       	add	r16, r18
     c66:	13 1f       	adc	r17, r19
		int16_t right = x_diff-y_diff;
     c68:	c2 1b       	sub	r28, r18
     c6a:	d3 0b       	sbc	r29, r19
		/*Keep values within bounds*/
		if(left > 127){
     c6c:	00 38       	cpi	r16, 0x80	; 128
     c6e:	11 05       	cpc	r17, r1
     c70:	5c f4       	brge	.+22     	; 0xc88 <send_move_command+0x66>
			left = 127;
		}
		else if(left < -127){
     c72:	01 38       	cpi	r16, 0x81	; 129
     c74:	3f ef       	ldi	r19, 0xFF	; 255
     c76:	13 07       	cpc	r17, r19
     c78:	54 f0       	brlt	.+20     	; 0xc8e <send_move_command+0x6c>
			left = -127;
		} else if(left > -5 && left < 5) left = 0;
     c7a:	c8 01       	movw	r24, r16
     c7c:	04 96       	adiw	r24, 0x04	; 4
     c7e:	09 97       	sbiw	r24, 0x09	; 9
     c80:	40 f4       	brcc	.+16     	; 0xc92 <send_move_command+0x70>
     c82:	00 e0       	ldi	r16, 0x00	; 0
     c84:	10 e0       	ldi	r17, 0x00	; 0
     c86:	05 c0       	rjmp	.+10     	; 0xc92 <send_move_command+0x70>
		int16_t y_diff = y_rest - read_avg_adc(2, 25);
		int16_t left = x_diff+y_diff;
		int16_t right = x_diff-y_diff;
		/*Keep values within bounds*/
		if(left > 127){
			left = 127;
     c88:	0f e7       	ldi	r16, 0x7F	; 127
     c8a:	10 e0       	ldi	r17, 0x00	; 0
     c8c:	02 c0       	rjmp	.+4      	; 0xc92 <send_move_command+0x70>
		}
		else if(left < -127){
			left = -127;
     c8e:	01 e8       	ldi	r16, 0x81	; 129
     c90:	1f ef       	ldi	r17, 0xFF	; 255
		} else if(left > -5 && left < 5) left = 0;
		
		if(right > 127) {
     c92:	c0 38       	cpi	r28, 0x80	; 128
     c94:	d1 05       	cpc	r29, r1
     c96:	5c f4       	brge	.+22     	; 0xcae <send_move_command+0x8c>
			right = 127;
		}
		else if(right < -127){
     c98:	c1 38       	cpi	r28, 0x81	; 129
     c9a:	8f ef       	ldi	r24, 0xFF	; 255
     c9c:	d8 07       	cpc	r29, r24
     c9e:	54 f0       	brlt	.+20     	; 0xcb4 <send_move_command+0x92>
			right = -127;
		} else if(right > -5 && right < 5) right = 0;
     ca0:	ce 01       	movw	r24, r28
     ca2:	04 96       	adiw	r24, 0x04	; 4
     ca4:	09 97       	sbiw	r24, 0x09	; 9
     ca6:	40 f4       	brcc	.+16     	; 0xcb8 <send_move_command+0x96>
     ca8:	c0 e0       	ldi	r28, 0x00	; 0
     caa:	d0 e0       	ldi	r29, 0x00	; 0
     cac:	05 c0       	rjmp	.+10     	; 0xcb8 <send_move_command+0x96>
		else if(left < -127){
			left = -127;
		} else if(left > -5 && left < 5) left = 0;
		
		if(right > 127) {
			right = 127;
     cae:	cf e7       	ldi	r28, 0x7F	; 127
     cb0:	d0 e0       	ldi	r29, 0x00	; 0
     cb2:	02 c0       	rjmp	.+4      	; 0xcb8 <send_move_command+0x96>
		}
		else if(right < -127){
			right = -127;
     cb4:	c1 e8       	ldi	r28, 0x81	; 129
     cb6:	df ef       	ldi	r29, 0xFF	; 255
		} else if(right > -5 && right < 5) right = 0;
		
		/*Ignore duplicate values*/
		if(left != last_left || right != last_right){
     cb8:	80 91 bf 02 	lds	r24, 0x02BF	; 0x8002bf <last_left>
     cbc:	90 91 c0 02 	lds	r25, 0x02C0	; 0x8002c0 <last_left+0x1>
     cc0:	80 17       	cp	r24, r16
     cc2:	91 07       	cpc	r25, r17
     cc4:	39 f4       	brne	.+14     	; 0xcd4 <send_move_command+0xb2>
     cc6:	80 91 bd 02 	lds	r24, 0x02BD	; 0x8002bd <last_right>
     cca:	90 91 be 02 	lds	r25, 0x02BE	; 0x8002be <last_right+0x1>
     cce:	8c 17       	cp	r24, r28
     cd0:	9d 07       	cpc	r25, r29
     cd2:	19 f1       	breq	.+70     	; 0xd1a <send_move_command+0xf8>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     cd4:	4a e0       	ldi	r20, 0x0A	; 10
     cd6:	65 e0       	ldi	r22, 0x05	; 5
     cd8:	71 e0       	ldi	r23, 0x01	; 1
     cda:	c8 01       	movw	r24, r16
     cdc:	0e 94 64 10 	call	0x20c8	; 0x20c8 <__itoa_ncheck>
			/*Build output string*/
			itoa(left, itoabuf+2, 10);
			uint8_t len = strlen(itoabuf);
     ce0:	e3 e0       	ldi	r30, 0x03	; 3
     ce2:	f1 e0       	ldi	r31, 0x01	; 1
     ce4:	01 90       	ld	r0, Z+
     ce6:	00 20       	and	r0, r0
     ce8:	e9 f7       	brne	.-6      	; 0xce4 <send_move_command+0xc2>
     cea:	31 97       	sbiw	r30, 0x01	; 1
     cec:	e3 50       	subi	r30, 0x03	; 3
     cee:	f1 40       	sbci	r31, 0x01	; 1
			itoabuf[len++] = ' ';
     cf0:	df 01       	movw	r26, r30
     cf2:	bb 27       	eor	r27, r27
     cf4:	ad 5f       	subi	r26, 0xFD	; 253
     cf6:	be 4f       	sbci	r27, 0xFE	; 254
     cf8:	80 e2       	ldi	r24, 0x20	; 32
     cfa:	8c 93       	st	X, r24
     cfc:	ef 5f       	subi	r30, 0xFF	; 255
     cfe:	6e 2f       	mov	r22, r30
     d00:	70 e0       	ldi	r23, 0x00	; 0
     d02:	6d 5f       	subi	r22, 0xFD	; 253
     d04:	7e 4f       	sbci	r23, 0xFE	; 254
     d06:	4a e0       	ldi	r20, 0x0A	; 10
     d08:	ce 01       	movw	r24, r28
     d0a:	0e 94 64 10 	call	0x20c8	; 0x20c8 <__itoa_ncheck>
			itoa(right, itoabuf+len, 10);
			/*Send string*/
			uart_send_line(itoabuf);
     d0e:	83 e0       	ldi	r24, 0x03	; 3
     d10:	91 e0       	ldi	r25, 0x01	; 1
     d12:	0e 94 ef 09 	call	0x13de	; 0x13de <uart_send_line>
			command_hundreths = 0; /*Reset cooldown*/
     d16:	10 92 c4 02 	sts	0x02C4, r1	; 0x8002c4 <command_hundreths>
		}
		last_left = left;
     d1a:	10 93 c0 02 	sts	0x02C0, r17	; 0x8002c0 <last_left+0x1>
     d1e:	00 93 bf 02 	sts	0x02BF, r16	; 0x8002bf <last_left>
		last_right = right;
     d22:	d0 93 be 02 	sts	0x02BE, r29	; 0x8002be <last_right+0x1>
     d26:	c0 93 bd 02 	sts	0x02BD, r28	; 0x8002bd <last_right>
	}
}
     d2a:	df 91       	pop	r29
     d2c:	cf 91       	pop	r28
     d2e:	1f 91       	pop	r17
     d30:	0f 91       	pop	r16
     d32:	08 95       	ret

00000d34 <print_lcd_static>:

void print_lcd_static(){
	set_cursor_pos(0);
     d34:	80 e0       	ldi	r24, 0x00	; 0
     d36:	0e 94 b0 0a 	call	0x1560	; 0x1560 <set_cursor_pos>
	write_lcd_string("Fram: __cm PIR:_");
     d3a:	82 e3       	ldi	r24, 0x32	; 50
     d3c:	91 e0       	ldi	r25, 0x01	; 1
     d3e:	0e 94 8b 0a 	call	0x1516	; 0x1516 <write_lcd_string>
	set_cursor_pos(16);
     d42:	80 e1       	ldi	r24, 0x10	; 16
     d44:	0e 94 b0 0a 	call	0x1560	; 0x1560 <set_cursor_pos>
	write_lcd_string("Bak: __cm  C: __");
     d48:	83 e4       	ldi	r24, 0x43	; 67
     d4a:	91 e0       	ldi	r25, 0x01	; 1
     d4c:	0c 94 8b 0a 	jmp	0x1516	; 0x1516 <write_lcd_string>

00000d50 <__vector_7>:
}

ISR(TIMER2_COMPA_vect){
     d50:	1f 92       	push	r1
     d52:	0f 92       	push	r0
     d54:	0f b6       	in	r0, 0x3f	; 63
     d56:	0f 92       	push	r0
     d58:	11 24       	eor	r1, r1
     d5a:	2f 93       	push	r18
     d5c:	3f 93       	push	r19
     d5e:	4f 93       	push	r20
     d60:	5f 93       	push	r21
     d62:	6f 93       	push	r22
     d64:	7f 93       	push	r23
     d66:	8f 93       	push	r24
     d68:	9f 93       	push	r25
     d6a:	af 93       	push	r26
     d6c:	bf 93       	push	r27
     d6e:	ef 93       	push	r30
     d70:	ff 93       	push	r31
	/*Toggles heartbeat LED back on every half second to produce a blinking effect
	  when heartbeat is active*/
	if(++heart_hundreths > 50){
     d72:	80 91 c5 02 	lds	r24, 0x02C5	; 0x8002c5 <heart_hundreths>
     d76:	8f 5f       	subi	r24, 0xFF	; 255
     d78:	80 93 c5 02 	sts	0x02C5, r24	; 0x8002c5 <heart_hundreths>
     d7c:	83 33       	cpi	r24, 0x33	; 51
     d7e:	18 f0       	brcs	.+6      	; 0xd86 <__vector_7+0x36>
		LED_PORT |= 1<<LEDR2;
     d80:	5f 9a       	sbi	0x0b, 7	; 11
		heart_hundreths = 0;
     d82:	10 92 c5 02 	sts	0x02C5, r1	; 0x8002c5 <heart_hundreths>
	}
	/*Cooldown for sending move commands to vehicle*/
	if(command_hundreths < CMD_DELAY) command_hundreths++;
     d86:	80 91 c4 02 	lds	r24, 0x02C4	; 0x8002c4 <command_hundreths>
     d8a:	84 31       	cpi	r24, 0x14	; 20
     d8c:	28 f4       	brcc	.+10     	; 0xd98 <__vector_7+0x48>
     d8e:	80 91 c4 02 	lds	r24, 0x02C4	; 0x8002c4 <command_hundreths>
     d92:	8f 5f       	subi	r24, 0xFF	; 255
     d94:	80 93 c4 02 	sts	0x02C4, r24	; 0x8002c4 <command_hundreths>
	/*Cooldown for honk button to reduce debounce*/
	if(debounce_hundreths > 0) debounce_hundreths--;
     d98:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <debounce_hundreths>
     d9c:	88 23       	and	r24, r24
     d9e:	29 f0       	breq	.+10     	; 0xdaa <__vector_7+0x5a>
     da0:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <debounce_hundreths>
     da4:	81 50       	subi	r24, 0x01	; 1
     da6:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <debounce_hundreths>
	/*Timout for sending game invitations*/
	if(request_sent && timeout_hundreths < TIMEOUT_VAL) timeout_hundreths++;
     daa:	80 91 ba 02 	lds	r24, 0x02BA	; 0x8002ba <request_sent>
     dae:	88 23       	and	r24, r24
     db0:	89 f0       	breq	.+34     	; 0xdd4 <__vector_7+0x84>
     db2:	80 91 c2 02 	lds	r24, 0x02C2	; 0x8002c2 <timeout_hundreths>
     db6:	90 91 c3 02 	lds	r25, 0x02C3	; 0x8002c3 <timeout_hundreths+0x1>
     dba:	88 38       	cpi	r24, 0x88	; 136
     dbc:	93 41       	sbci	r25, 0x13	; 19
     dbe:	50 f4       	brcc	.+20     	; 0xdd4 <__vector_7+0x84>
     dc0:	80 91 c2 02 	lds	r24, 0x02C2	; 0x8002c2 <timeout_hundreths>
     dc4:	90 91 c3 02 	lds	r25, 0x02C3	; 0x8002c3 <timeout_hundreths+0x1>
     dc8:	01 96       	adiw	r24, 0x01	; 1
     dca:	90 93 c3 02 	sts	0x02C3, r25	; 0x8002c3 <timeout_hundreths+0x1>
     dce:	80 93 c2 02 	sts	0x02C2, r24	; 0x8002c2 <timeout_hundreths>
     dd2:	06 c0       	rjmp	.+12     	; 0xde0 <__vector_7+0x90>
	else{
		request_sent = false;
     dd4:	10 92 ba 02 	sts	0x02BA, r1	; 0x8002ba <request_sent>
		timeout_hundreths = 0;
     dd8:	10 92 c3 02 	sts	0x02C3, r1	; 0x8002c3 <timeout_hundreths+0x1>
     ddc:	10 92 c2 02 	sts	0x02C2, r1	; 0x8002c2 <timeout_hundreths>
	}
	if(move_delay > 0) move_delay--;
     de0:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <move_delay>
     de4:	88 23       	and	r24, r24
     de6:	29 f0       	breq	.+10     	; 0xdf2 <__vector_7+0xa2>
     de8:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <move_delay>
     dec:	81 50       	subi	r24, 0x01	; 1
     dee:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <move_delay>
	/*Timer proc for messages module*/
	messages_timerproc();
     df2:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <messages_timerproc>
}
     df6:	ff 91       	pop	r31
     df8:	ef 91       	pop	r30
     dfa:	bf 91       	pop	r27
     dfc:	af 91       	pop	r26
     dfe:	9f 91       	pop	r25
     e00:	8f 91       	pop	r24
     e02:	7f 91       	pop	r23
     e04:	6f 91       	pop	r22
     e06:	5f 91       	pop	r21
     e08:	4f 91       	pop	r20
     e0a:	3f 91       	pop	r19
     e0c:	2f 91       	pop	r18
     e0e:	0f 90       	pop	r0
     e10:	0f be       	out	0x3f, r0	; 63
     e12:	0f 90       	pop	r0
     e14:	1f 90       	pop	r1
     e16:	18 95       	reti

00000e18 <timer_init>:

void timer_init(){
	/* Start 100Hz system timer with TC2 for counting time */
	OCR2A = 77;
     e18:	8d e4       	ldi	r24, 0x4D	; 77
     e1a:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
	TCCR2A = 1<<WGM21;
     e1e:	82 e0       	ldi	r24, 0x02	; 2
     e20:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
	TCCR2B = 7;
     e24:	97 e0       	ldi	r25, 0x07	; 7
     e26:	90 93 b1 00 	sts	0x00B1, r25	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
	TIMSK2 = 1<<OCIE2A;
     e2a:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f8070>
     e2e:	08 95       	ret

00000e30 <perform_command>:
}

void perform_command(uint8_t topic, uint8_t command, volatile uint8_t* args){
     e30:	cf 93       	push	r28
     e32:	df 93       	push	r29
     e34:	ea 01       	movw	r28, r20
	switch(topic){
     e36:	81 33       	cpi	r24, 0x31	; 49
     e38:	19 f0       	breq	.+6      	; 0xe40 <perform_command+0x10>
     e3a:	82 33       	cpi	r24, 0x32	; 50
     e3c:	d1 f0       	breq	.+52     	; 0xe72 <perform_command+0x42>
     e3e:	89 c0       	rjmp	.+274    	; 0xf52 <perform_command+0x122>
		case '1': //From car
			switch(command){
     e40:	61 33       	cpi	r22, 0x31	; 49
     e42:	59 f0       	breq	.+22     	; 0xe5a <perform_command+0x2a>
     e44:	62 33       	cpi	r22, 0x32	; 50
     e46:	91 f0       	breq	.+36     	; 0xe6c <perform_command+0x3c>
     e48:	60 33       	cpi	r22, 0x30	; 48
     e4a:	09 f0       	breq	.+2      	; 0xe4e <perform_command+0x1e>
     e4c:	82 c0       	rjmp	.+260    	; 0xf52 <perform_command+0x122>
				case '0': /*Emergency break triggered*/
					messages_force("Stopp!          ");
     e4e:	84 e5       	ldi	r24, 0x54	; 84
     e50:	91 e0       	ldi	r25, 0x01	; 1
					}
					break;
			}
			break;
	}
}
     e52:	df 91       	pop	r29
     e54:	cf 91       	pop	r28
void perform_command(uint8_t topic, uint8_t command, volatile uint8_t* args){
	switch(topic){
		case '1': //From car
			switch(command){
				case '0': /*Emergency break triggered*/
					messages_force("Stopp!          ");
     e56:	0c 94 26 0b 	jmp	0x164c	; 0x164c <messages_force>
					break;
				case '1': /*Sensor data received*/
					strcpy((char*)sensor_buf, (char*)args);
     e5a:	ba 01       	movw	r22, r20
     e5c:	87 ea       	ldi	r24, 0xA7	; 167
     e5e:	93 e0       	ldi	r25, 0x03	; 3
     e60:	0e 94 5d 10 	call	0x20ba	; 0x20ba <strcpy>
					sensors_received = true;
     e64:	81 e0       	ldi	r24, 0x01	; 1
     e66:	80 93 c1 02 	sts	0x02C1, r24	; 0x8002c1 <sensors_received>
					break;
     e6a:	73 c0       	rjmp	.+230    	; 0xf52 <perform_command+0x122>
				case '2': /*PONG response to a PING*/
					messages_queue("PONG            ");
     e6c:	85 e6       	ldi	r24, 0x65	; 101
     e6e:	91 e0       	ldi	r25, 0x01	; 1
     e70:	12 c0       	rjmp	.+36     	; 0xe96 <perform_command+0x66>
			}
			break;
		case '2': //To remote
			switch(command){
     e72:	62 33       	cpi	r22, 0x32	; 50
     e74:	a1 f0       	breq	.+40     	; 0xe9e <perform_command+0x6e>
     e76:	38 f4       	brcc	.+14     	; 0xe86 <perform_command+0x56>
     e78:	60 33       	cpi	r22, 0x30	; 48
     e7a:	59 f0       	breq	.+22     	; 0xe92 <perform_command+0x62>
     e7c:	61 33       	cpi	r22, 0x31	; 49
     e7e:	09 f0       	breq	.+2      	; 0xe82 <perform_command+0x52>
     e80:	68 c0       	rjmp	.+208    	; 0xf52 <perform_command+0x122>
				case '0': /*Heartbeat received*/
					LED_PORT &= ~(1<<LEDR2);
					break;
				case '1': /*Message received*/
					messages_queue((char*)args);
     e82:	ca 01       	movw	r24, r20
     e84:	08 c0       	rjmp	.+16     	; 0xe96 <perform_command+0x66>
				case '2': /*PONG response to a PING*/
					messages_queue("PONG            ");
			}
			break;
		case '2': //To remote
			switch(command){
     e86:	63 33       	cpi	r22, 0x33	; 51
     e88:	d9 f0       	breq	.+54     	; 0xec0 <perform_command+0x90>
     e8a:	64 33       	cpi	r22, 0x34	; 52
     e8c:	09 f4       	brne	.+2      	; 0xe90 <perform_command+0x60>
     e8e:	59 c0       	rjmp	.+178    	; 0xf42 <perform_command+0x112>
     e90:	60 c0       	rjmp	.+192    	; 0xf52 <perform_command+0x122>
				case '0': /*Heartbeat received*/
					LED_PORT &= ~(1<<LEDR2);
     e92:	5f 98       	cbi	0x0b, 7	; 11
     e94:	5e c0       	rjmp	.+188    	; 0xf52 <perform_command+0x122>
					}
					break;
			}
			break;
	}
}
     e96:	df 91       	pop	r29
     e98:	cf 91       	pop	r28
			switch(command){
				case '0': /*Heartbeat received*/
					LED_PORT &= ~(1<<LEDR2);
					break;
				case '1': /*Message received*/
					messages_queue((char*)args);
     e9a:	0c 94 37 0b 	jmp	0x166e	; 0x166e <messages_queue>
					break;
				case '2': /*Honk request received*/
					music_play_song_pgm(melodies[args[0]-'0']);
     e9e:	28 81       	ld	r18, Y
     ea0:	30 e0       	ldi	r19, 0x00	; 0
     ea2:	20 53       	subi	r18, 0x30	; 48
     ea4:	31 09       	sbc	r19, r1
     ea6:	c9 01       	movw	r24, r18
     ea8:	88 0f       	add	r24, r24
     eaa:	99 1f       	adc	r25, r25
     eac:	32 2f       	mov	r19, r18
     eae:	22 27       	eor	r18, r18
     eb0:	82 0f       	add	r24, r18
     eb2:	93 1f       	adc	r25, r19
     eb4:	8e 5e       	subi	r24, 0xEE	; 238
     eb6:	9e 4f       	sbci	r25, 0xFE	; 254
					}
					break;
			}
			break;
	}
}
     eb8:	df 91       	pop	r29
     eba:	cf 91       	pop	r28
					break;
				case '1': /*Message received*/
					messages_queue((char*)args);
					break;
				case '2': /*Honk request received*/
					music_play_song_pgm(melodies[args[0]-'0']);
     ebc:	0c 94 26 0c 	jmp	0x184c	; 0x184c <music_play_song_pgm>
					break;
				case '3': /*Five in a row related command received*/
					if(program_mode == FIR_MODE){ /*If already in a game*/
     ec0:	80 91 bc 02 	lds	r24, 0x02BC	; 0x8002bc <program_mode>
     ec4:	81 30       	cpi	r24, 0x01	; 1
     ec6:	11 f5       	brne	.+68     	; 0xf0c <perform_command+0xdc>
						if(*args >= 'A'){ /*Protocol dictates that argument over 'A' is "Cancel match" during match*/
     ec8:	88 81       	ld	r24, Y
     eca:	81 34       	cpi	r24, 0x41	; 65
     ecc:	30 f0       	brcs	.+12     	; 0xeda <perform_command+0xaa>
							enter_main_mode("Game canceled");
     ece:	86 e7       	ldi	r24, 0x76	; 118
     ed0:	91 e0       	ldi	r25, 0x01	; 1
					}
					break;
			}
			break;
	}
}
     ed2:	df 91       	pop	r29
     ed4:	cf 91       	pop	r28
					music_play_song_pgm(melodies[args[0]-'0']);
					break;
				case '3': /*Five in a row related command received*/
					if(program_mode == FIR_MODE){ /*If already in a game*/
						if(*args >= 'A'){ /*Protocol dictates that argument over 'A' is "Cancel match" during match*/
							enter_main_mode("Game canceled");
     ed6:	0c 94 5c 05 	jmp	0xab8	; 0xab8 <enter_main_mode>
						} else{ /*All other arguments during match are moves*/
							if(!row_player_turn){
     eda:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     ede:	81 11       	cpse	r24, r1
     ee0:	38 c0       	rjmp	.+112    	; 0xf52 <perform_command+0x122>
								fiveinarow_recive((char*)(args-2));
     ee2:	ca 01       	movw	r24, r20
     ee4:	02 97       	sbiw	r24, 0x02	; 2
     ee6:	0e 94 0e 04 	call	0x81c	; 0x81c <fiveinarow_recive>
								music_play_note(NOTE(G_PITCH, 2, SIXTEENTH_NOTE), 100);
     eea:	64 e6       	ldi	r22, 0x64	; 100
     eec:	84 e9       	ldi	r24, 0x94	; 148
     eee:	0e 94 9c 0b 	call	0x1738	; 0x1738 <music_play_note>
								if(fiveinarow_check_win()){
     ef2:	0e 94 af 04 	call	0x95e	; 0x95e <fiveinarow_check_win>
     ef6:	88 23       	and	r24, r24
     ef8:	39 f0       	breq	.+14     	; 0xf08 <perform_command+0xd8>
									game_over = 2; /*Mark game as over and lost*/
     efa:	82 e0       	ldi	r24, 0x02	; 2
     efc:	80 93 b8 02 	sts	0x02B8, r24	; 0x8002b8 <game_over>
									music_play_song_pgm(melodies[0]);
     f00:	82 e1       	ldi	r24, 0x12	; 18
     f02:	91 e0       	ldi	r25, 0x01	; 1
     f04:	0e 94 26 0c 	call	0x184c	; 0x184c <music_play_song_pgm>
								}
								redraw = true;	
     f08:	81 e0       	ldi	r24, 0x01	; 1
     f0a:	06 c0       	rjmp	.+12     	; 0xf18 <perform_command+0xe8>
							}
						}
					} else if(*args < '0'){ /*Protocol dictates that outside of a match < '0' means "Shall we play?"*/
     f0c:	88 81       	ld	r24, Y
     f0e:	80 33       	cpi	r24, 0x30	; 48
     f10:	30 f4       	brcc	.+12     	; 0xf1e <perform_command+0xee>
						game_prompted = true;
     f12:	81 e0       	ldi	r24, 0x01	; 1
     f14:	80 93 bb 02 	sts	0x02BB, r24	; 0x8002bb <game_prompted>
						redraw = true;
     f18:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <redraw>
     f1c:	1a c0       	rjmp	.+52     	; 0xf52 <perform_command+0x122>
					} else if(*args < 'A'){ /*Else the command received is the first move of the opponent*/
     f1e:	88 81       	ld	r24, Y
     f20:	81 34       	cpi	r24, 0x41	; 65
     f22:	b8 f4       	brcc	.+46     	; 0xf52 <perform_command+0x122>
						enter_fir_mode();
     f24:	0e 94 02 06 	call	0xc04	; 0xc04 <enter_fir_mode>
						fiveinarow_setup(false); /*Start match where opponent starts first*/
     f28:	80 e0       	ldi	r24, 0x00	; 0
     f2a:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <fiveinarow_setup>
						fiveinarow_recive((char*)(args-2)); /*Receive first move*/
     f2e:	ce 01       	movw	r24, r28
     f30:	02 97       	sbiw	r24, 0x02	; 2
     f32:	0e 94 0e 04 	call	0x81c	; 0x81c <fiveinarow_recive>
						music_play_note(NOTE(G_PITCH, 2, SIXTEENTH_NOTE), 100);
     f36:	64 e6       	ldi	r22, 0x64	; 100
     f38:	84 e9       	ldi	r24, 0x94	; 148
					}
					break;
			}
			break;
	}
}
     f3a:	df 91       	pop	r29
     f3c:	cf 91       	pop	r28
						redraw = true;
					} else if(*args < 'A'){ /*Else the command received is the first move of the opponent*/
						enter_fir_mode();
						fiveinarow_setup(false); /*Start match where opponent starts first*/
						fiveinarow_recive((char*)(args-2)); /*Receive first move*/
						music_play_note(NOTE(G_PITCH, 2, SIXTEENTH_NOTE), 100);
     f3e:	0c 94 9c 0b 	jmp	0x1738	; 0x1738 <music_play_note>
					}
					break;
				case '4': /*Received deadman info from rem2*/
					/*Set lamp to correspond with opponents deadman switch*/
					if(args[0] == '1'){
     f42:	88 81       	ld	r24, Y
     f44:	81 33       	cpi	r24, 0x31	; 49
     f46:	11 f4       	brne	.+4      	; 0xf4c <perform_command+0x11c>
						SETBIT(LED_PORT, LEDR1);
     f48:	5e 9a       	sbi	0x0b, 6	; 11
     f4a:	03 c0       	rjmp	.+6      	; 0xf52 <perform_command+0x122>
					} else{
						CLEARBIT(LED_PORT, LEDR1);
     f4c:	5e 98       	cbi	0x0b, 6	; 11
						/*Clear punished state when rem2 releases deadmans switch*/
						punished = false;
     f4e:	10 92 b9 02 	sts	0x02B9, r1	; 0x8002b9 <punished>
					}
					break;
			}
			break;
	}
}
     f52:	df 91       	pop	r29
     f54:	cf 91       	pop	r28
     f56:	08 95       	ret

00000f58 <display_sensors>:

void display_sensors(){
     f58:	1f 93       	push	r17
     f5a:	cf 93       	push	r28
     f5c:	df 93       	push	r29
	char* args = (char*)sensor_buf;
	/*Write out contact sensors, PIR-sensor*/
	set_cursor_pos(CR_POS);
     f5e:	8f e1       	ldi	r24, 0x1F	; 31
     f60:	0e 94 b0 0a 	call	0x1560	; 0x1560 <set_cursor_pos>
	write_lcd_char((args[0] == '0') ? 'R' : '_');
     f64:	80 91 a7 03 	lds	r24, 0x03A7	; 0x8003a7 <sensor_buf>
     f68:	80 33       	cpi	r24, 0x30	; 48
     f6a:	11 f0       	breq	.+4      	; 0xf70 <display_sensors+0x18>
     f6c:	8f e5       	ldi	r24, 0x5F	; 95
     f6e:	01 c0       	rjmp	.+2      	; 0xf72 <display_sensors+0x1a>
     f70:	82 e5       	ldi	r24, 0x52	; 82
     f72:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <write_lcd_char>
	set_cursor_pos(CL_POS);
     f76:	8e e1       	ldi	r24, 0x1E	; 30
     f78:	0e 94 b0 0a 	call	0x1560	; 0x1560 <set_cursor_pos>
	write_lcd_char((args[1] == '0') ? 'L' : '_');
     f7c:	80 91 a8 03 	lds	r24, 0x03A8	; 0x8003a8 <sensor_buf+0x1>
     f80:	80 33       	cpi	r24, 0x30	; 48
     f82:	11 f0       	breq	.+4      	; 0xf88 <display_sensors+0x30>
     f84:	8f e5       	ldi	r24, 0x5F	; 95
     f86:	01 c0       	rjmp	.+2      	; 0xf8a <display_sensors+0x32>
     f88:	8c e4       	ldi	r24, 0x4C	; 76
     f8a:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <write_lcd_char>
	set_cursor_pos(PIR_POS);
     f8e:	8f e0       	ldi	r24, 0x0F	; 15
     f90:	0e 94 b0 0a 	call	0x1560	; 0x1560 <set_cursor_pos>
	write_lcd_char((args[3] == '0') ? 'X' : '_');
     f94:	80 91 aa 03 	lds	r24, 0x03AA	; 0x8003aa <sensor_buf+0x3>
     f98:	80 33       	cpi	r24, 0x30	; 48
     f9a:	11 f0       	breq	.+4      	; 0xfa0 <display_sensors+0x48>
     f9c:	8f e5       	ldi	r24, 0x5F	; 95
     f9e:	01 c0       	rjmp	.+2      	; 0xfa2 <display_sensors+0x4a>
     fa0:	88 e5       	ldi	r24, 0x58	; 88
     fa2:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <write_lcd_char>
	/*If button is pressed, honk*/
	if(args[2] == '0') music_play_song_pgm(melodies[0]);
     fa6:	80 91 a9 03 	lds	r24, 0x03A9	; 0x8003a9 <sensor_buf+0x2>
     faa:	80 33       	cpi	r24, 0x30	; 48
     fac:	21 f4       	brne	.+8      	; 0xfb6 <display_sensors+0x5e>
     fae:	82 e1       	ldi	r24, 0x12	; 18
     fb0:	91 e0       	ldi	r25, 0x01	; 1
     fb2:	0e 94 26 0c 	call	0x184c	; 0x184c <music_play_song_pgm>
	
	/*Read through arguments and store indices of range data*/
	uint8_t b = 5;
     fb6:	c5 e0       	ldi	r28, 0x05	; 5
	while(args[++b] != ' ');
     fb8:	81 e0       	ldi	r24, 0x01	; 1
     fba:	8c 0f       	add	r24, r28
     fbc:	e8 2f       	mov	r30, r24
     fbe:	f0 e0       	ldi	r31, 0x00	; 0
     fc0:	e9 55       	subi	r30, 0x59	; 89
     fc2:	fc 4f       	sbci	r31, 0xFC	; 252
     fc4:	90 81       	ld	r25, Z
     fc6:	90 32       	cpi	r25, 0x20	; 32
     fc8:	11 f0       	breq	.+4      	; 0xfce <display_sensors+0x76>
     fca:	c8 2f       	mov	r28, r24
     fcc:	f5 cf       	rjmp	.-22     	; 0xfb8 <display_sensors+0x60>
	args[b++] = '\0';
     fce:	ce 5f       	subi	r28, 0xFE	; 254
     fd0:	10 82       	st	Z, r1
     fd2:	8c 2f       	mov	r24, r28
	uint8_t k = b;
	while(args[++k] != ' ');
     fd4:	91 e0       	ldi	r25, 0x01	; 1
     fd6:	98 0f       	add	r25, r24
     fd8:	e9 2f       	mov	r30, r25
     fda:	f0 e0       	ldi	r31, 0x00	; 0
     fdc:	e9 55       	subi	r30, 0x59	; 89
     fde:	fc 4f       	sbci	r31, 0xFC	; 252
     fe0:	20 81       	ld	r18, Z
     fe2:	20 32       	cpi	r18, 0x20	; 32
     fe4:	11 f0       	breq	.+4      	; 0xfea <display_sensors+0x92>
     fe6:	89 2f       	mov	r24, r25
     fe8:	f5 cf       	rjmp	.-22     	; 0xfd4 <display_sensors+0x7c>
	args[k++] = '\0';
     fea:	d2 e0       	ldi	r29, 0x02	; 2
     fec:	d8 0f       	add	r29, r24
     fee:	10 82       	st	Z, r1
	
	/*Write front value*/
	set_cursor_pos(FRONT_POS);
     ff0:	85 e0       	ldi	r24, 0x05	; 5
     ff2:	0e 94 b0 0a 	call	0x1560	; 0x1560 <set_cursor_pos>
	if(b == 7 && args[5] == '0'){ //0 is sent for front
     ff6:	c7 30       	cpi	r28, 0x07	; 7
     ff8:	39 f4       	brne	.+14     	; 0x1008 <display_sensors+0xb0>
     ffa:	80 91 ac 03 	lds	r24, 0x03AC	; 0x8003ac <sensor_buf+0x5>
     ffe:	80 33       	cpi	r24, 0x30	; 48
    1000:	19 f4       	brne	.+6      	; 0x1008 <display_sensors+0xb0>
		write_lcd_string("!!!");
    1002:	84 e8       	ldi	r24, 0x84	; 132
    1004:	91 e0       	ldi	r25, 0x01	; 1
    1006:	13 c0       	rjmp	.+38     	; 0x102e <display_sensors+0xd6>
	} else{
		for (int8_t i = 3-strlen(args+5); i > 0; i--) write_lcd_char(' ');
    1008:	ec ea       	ldi	r30, 0xAC	; 172
    100a:	f3 e0       	ldi	r31, 0x03	; 3
    100c:	01 90       	ld	r0, Z+
    100e:	00 20       	and	r0, r0
    1010:	e9 f7       	brne	.-6      	; 0x100c <display_sensors+0xb4>
    1012:	cf 01       	movw	r24, r30
    1014:	8d 5a       	subi	r24, 0xAD	; 173
    1016:	93 40       	sbci	r25, 0x03	; 3
    1018:	13 e0       	ldi	r17, 0x03	; 3
    101a:	18 1b       	sub	r17, r24
    101c:	11 16       	cp	r1, r17
    101e:	2c f4       	brge	.+10     	; 0x102a <display_sensors+0xd2>
    1020:	80 e2       	ldi	r24, 0x20	; 32
    1022:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <write_lcd_char>
    1026:	11 50       	subi	r17, 0x01	; 1
    1028:	f9 cf       	rjmp	.-14     	; 0x101c <display_sensors+0xc4>
		write_lcd_string(args+5);
    102a:	8c ea       	ldi	r24, 0xAC	; 172
    102c:	93 e0       	ldi	r25, 0x03	; 3
    102e:	0e 94 8b 0a 	call	0x1516	; 0x1516 <write_lcd_string>
	}
	
	/*Write back value*/
	set_cursor_pos(BACK_POS);
    1032:	84 e1       	ldi	r24, 0x14	; 20
    1034:	0e 94 b0 0a 	call	0x1560	; 0x1560 <set_cursor_pos>
	if(k-b == 2 && args[b] == '0'){ //0 is sent for back
    1038:	8d 2f       	mov	r24, r29
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	d0 e0       	ldi	r29, 0x00	; 0
    103e:	8c 1b       	sub	r24, r28
    1040:	9d 0b       	sbc	r25, r29
    1042:	02 97       	sbiw	r24, 0x02	; 2
    1044:	49 f4       	brne	.+18     	; 0x1058 <display_sensors+0x100>
    1046:	fe 01       	movw	r30, r28
    1048:	e9 55       	subi	r30, 0x59	; 89
    104a:	fc 4f       	sbci	r31, 0xFC	; 252
    104c:	80 81       	ld	r24, Z
    104e:	80 33       	cpi	r24, 0x30	; 48
    1050:	19 f4       	brne	.+6      	; 0x1058 <display_sensors+0x100>
		write_lcd_string("!!!");
    1052:	84 e8       	ldi	r24, 0x84	; 132
    1054:	91 e0       	ldi	r25, 0x01	; 1
    1056:	11 c0       	rjmp	.+34     	; 0x107a <display_sensors+0x122>
	} else{
		for (int8_t i = 3-strlen(args+b); i > 0; i--) write_lcd_char(' ');
    1058:	c9 55       	subi	r28, 0x59	; 89
    105a:	dc 4f       	sbci	r29, 0xFC	; 252
    105c:	fe 01       	movw	r30, r28
    105e:	01 90       	ld	r0, Z+
    1060:	00 20       	and	r0, r0
    1062:	e9 f7       	brne	.-6      	; 0x105e <display_sensors+0x106>
    1064:	1c 2f       	mov	r17, r28
    1066:	1e 1b       	sub	r17, r30
    1068:	1c 5f       	subi	r17, 0xFC	; 252
    106a:	11 16       	cp	r1, r17
    106c:	2c f4       	brge	.+10     	; 0x1078 <display_sensors+0x120>
    106e:	80 e2       	ldi	r24, 0x20	; 32
    1070:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <write_lcd_char>
    1074:	11 50       	subi	r17, 0x01	; 1
    1076:	f9 cf       	rjmp	.-14     	; 0x106a <display_sensors+0x112>
		write_lcd_string(args+b);
    1078:	ce 01       	movw	r24, r28
	}
}
    107a:	df 91       	pop	r29
    107c:	cf 91       	pop	r28
    107e:	1f 91       	pop	r17
	set_cursor_pos(BACK_POS);
	if(k-b == 2 && args[b] == '0'){ //0 is sent for back
		write_lcd_string("!!!");
	} else{
		for (int8_t i = 3-strlen(args+b); i > 0; i--) write_lcd_char(' ');
		write_lcd_string(args+b);
    1080:	0c 94 8b 0a 	jmp	0x1516	; 0x1516 <write_lcd_string>

00001084 <do_normal_actions>:
	}
}

void do_normal_actions(){
	/*If a game has been prompted, draw prompt screen if not drawn and poll for accept*/
	if(game_prompted){
    1084:	80 91 bb 02 	lds	r24, 0x02BB	; 0x8002bb <game_prompted>
    1088:	88 23       	and	r24, r24
    108a:	01 f1       	breq	.+64     	; 0x10cc <do_normal_actions+0x48>
		if(redraw){
    108c:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <redraw>
    1090:	88 23       	and	r24, r24
    1092:	59 f0       	breq	.+22     	; 0x10aa <do_normal_actions+0x26>
			clear_LCD();
    1094:	0e 94 a3 0a 	call	0x1546	; 0x1546 <clear_LCD>
			set_cursor_pos(16);
    1098:	80 e1       	ldi	r24, 0x10	; 16
    109a:	0e 94 b0 0a 	call	0x1560	; 0x1560 <set_cursor_pos>
			write_lcd_string("Want to play?");
    109e:	89 e9       	ldi	r24, 0x99	; 153
    10a0:	91 e0       	ldi	r25, 0x01	; 1
    10a2:	0e 94 8b 0a 	call	0x1516	; 0x1516 <write_lcd_string>
			redraw = false;
    10a6:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <redraw>
		}
		if(DEADMAN_PRESSED){
    10aa:	4c 99       	sbic	0x09, 4	; 9
    10ac:	6c c0       	rjmp	.+216    	; 0x1186 <do_normal_actions+0x102>
			enter_fir_mode();
    10ae:	0e 94 02 06 	call	0xc04	; 0xc04 <enter_fir_mode>
			fiveinarow_setup(true); /*Game starts with player as first turn*/
    10b2:	81 e0       	ldi	r24, 0x01	; 1
    10b4:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <fiveinarow_setup>
    10b8:	2f ef       	ldi	r18, 0xFF	; 255
    10ba:	80 e7       	ldi	r24, 0x70	; 112
    10bc:	92 e0       	ldi	r25, 0x02	; 2
    10be:	21 50       	subi	r18, 0x01	; 1
    10c0:	80 40       	sbci	r24, 0x00	; 0
    10c2:	90 40       	sbci	r25, 0x00	; 0
    10c4:	e1 f7       	brne	.-8      	; 0x10be <do_normal_actions+0x3a>
    10c6:	00 c0       	rjmp	.+0      	; 0x10c8 <do_normal_actions+0x44>
    10c8:	00 00       	nop
    10ca:	5d c0       	rjmp	.+186    	; 0x1186 <do_normal_actions+0x102>
			_delay_ms(100);			/* Avoid debounce*/
		}
		/*Canceling a game prompt is handled in ISR*/
	} else{
		/*Redraw static text if returning from other screen*/
		if(redraw){
    10cc:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <redraw>
    10d0:	88 23       	and	r24, r24
    10d2:	51 f0       	breq	.+20     	; 0x10e8 <do_normal_actions+0x64>
			clear_line(0);
    10d4:	80 e0       	ldi	r24, 0x00	; 0
    10d6:	0e 94 bd 0a 	call	0x157a	; 0x157a <clear_line>
			clear_line(1);
    10da:	81 e0       	ldi	r24, 0x01	; 1
    10dc:	0e 94 bd 0a 	call	0x157a	; 0x157a <clear_line>
			print_lcd_static();
    10e0:	0e 94 9a 06 	call	0xd34	; 0xd34 <print_lcd_static>
			redraw = false;
    10e4:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <redraw>
		}
		/*Move along message queue (if message done, handled by module) and write buffer if not read before*/
		messages_move_queue();
    10e8:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <messages_move_queue>
		if(!output_buf_read){
    10ec:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <output_buf_read>
    10f0:	81 11       	cpse	r24, r1
    10f2:	0d c0       	rjmp	.+26     	; 0x110e <do_normal_actions+0x8a>
			set_cursor_pos(32);
    10f4:	80 e2       	ldi	r24, 0x20	; 32
    10f6:	0e 94 b0 0a 	call	0x1560	; 0x1560 <set_cursor_pos>
			char* buffer = (char*)messages_get_buffer();
    10fa:	0e 94 8e 0b 	call	0x171c	; 0x171c <messages_get_buffer>
			/*If buffer is empty, write clear line. Otherwise write buffer*/
			write_lcd_string((buffer[0] != '\0') ? buffer :  "                ");
    10fe:	fc 01       	movw	r30, r24
    1100:	20 81       	ld	r18, Z
    1102:	21 11       	cpse	r18, r1
    1104:	02 c0       	rjmp	.+4      	; 0x110a <do_normal_actions+0x86>
    1106:	88 e8       	ldi	r24, 0x88	; 136
    1108:	91 e0       	ldi	r25, 0x01	; 1
    110a:	0e 94 8b 0a 	call	0x1516	; 0x1516 <write_lcd_string>
		}
		/*If sensor data was recived in ISR write data to screen*/
		if(sensors_received){
    110e:	80 91 c1 02 	lds	r24, 0x02C1	; 0x8002c1 <sensors_received>
    1112:	88 23       	and	r24, r24
    1114:	21 f0       	breq	.+8      	; 0x111e <do_normal_actions+0x9a>
			display_sensors();
    1116:	0e 94 ac 07 	call	0xf58	; 0xf58 <display_sensors>
			sensors_received = false;
    111a:	10 92 c1 02 	sts	0x02C1, r1	; 0x8002c1 <sensors_received>
		}
		/*Poll for deadmans switch. If pressed (And not pusnished) send status to car and send move_commands*/
		if(DEADMAN_PRESSED && !punished){
    111e:	4c 99       	sbic	0x09, 4	; 9
    1120:	12 c0       	rjmp	.+36     	; 0x1146 <do_normal_actions+0xc2>
    1122:	80 91 b9 02 	lds	r24, 0x02B9	; 0x8002b9 <punished>
    1126:	81 11       	cpse	r24, r1
    1128:	0e c0       	rjmp	.+28     	; 0x1146 <do_normal_actions+0xc2>
			if(!(LED_PORT & (1<<LEDG))){
    112a:	5d 99       	sbic	0x0b, 5	; 11
    112c:	09 c0       	rjmp	.+18     	; 0x1140 <do_normal_actions+0xbc>
				uart_send_line("041");
    112e:	87 ea       	ldi	r24, 0xA7	; 167
    1130:	91 e0       	ldi	r25, 0x01	; 1
    1132:	0e 94 ef 09 	call	0x13de	; 0x13de <uart_send_line>
				uart_send_line("341");
    1136:	8b ea       	ldi	r24, 0xAB	; 171
    1138:	91 e0       	ldi	r25, 0x01	; 1
    113a:	0e 94 ef 09 	call	0x13de	; 0x13de <uart_send_line>
				LED_PORT |= 1<<LEDG;
    113e:	5d 9a       	sbi	0x0b, 5	; 11
			}
			send_move_command();
    1140:	0e 94 11 06 	call	0xc22	; 0xc22 <send_move_command>
    1144:	0b c0       	rjmp	.+22     	; 0x115c <do_normal_actions+0xd8>
		} else if(LED_PORT & (1<<LEDG)){ /*If button is not pressed AND LED indicating dms is on*/
    1146:	5d 9b       	sbis	0x0b, 5	; 11
    1148:	09 c0       	rjmp	.+18     	; 0x115c <do_normal_actions+0xd8>
			uart_send_line("040"); /*Send deadman off to car*/
    114a:	8e e2       	ldi	r24, 0x2E	; 46
    114c:	91 e0       	ldi	r25, 0x01	; 1
    114e:	0e 94 ef 09 	call	0x13de	; 0x13de <uart_send_line>
			uart_send_line("340"); /*Send deadman off to rem2*/
    1152:	8f ea       	ldi	r24, 0xAF	; 175
    1154:	91 e0       	ldi	r25, 0x01	; 1
    1156:	0e 94 ef 09 	call	0x13de	; 0x13de <uart_send_line>
			LED_PORT &= ~(1<<LEDG); /*Disable LED*/
    115a:	5d 98       	cbi	0x0b, 5	; 11
		}
		/*Poll for game button*/
		if(!(PINB & 1<<GAMEBTN) && !request_sent){ /*If button is sent and to request is waiting, send game request*/
    115c:	1e 99       	sbic	0x03, 6	; 3
    115e:	13 c0       	rjmp	.+38     	; 0x1186 <do_normal_actions+0x102>
    1160:	80 91 ba 02 	lds	r24, 0x02BA	; 0x8002ba <request_sent>
    1164:	81 11       	cpse	r24, r1
    1166:	0f c0       	rjmp	.+30     	; 0x1186 <do_normal_actions+0x102>
			uart_send_line("33."); /*Game request to rem2. '.' < '0'*/
    1168:	83 eb       	ldi	r24, 0xB3	; 179
    116a:	91 e0       	ldi	r25, 0x01	; 1
    116c:	0e 94 ef 09 	call	0x13de	; 0x13de <uart_send_line>
			messages_force("Invitation sent");
    1170:	87 eb       	ldi	r24, 0xB7	; 183
    1172:	91 e0       	ldi	r25, 0x01	; 1
    1174:	0e 94 26 0b 	call	0x164c	; 0x164c <messages_force>
			request_sent = true;
    1178:	81 e0       	ldi	r24, 0x01	; 1
    117a:	80 93 ba 02 	sts	0x02BA, r24	; 0x8002ba <request_sent>
			timeout_hundreths = 0;
    117e:	10 92 c3 02 	sts	0x02C3, r1	; 0x8002c3 <timeout_hundreths+0x1>
    1182:	10 92 c2 02 	sts	0x02C2, r1	; 0x8002c2 <timeout_hundreths>
    1186:	ff e7       	ldi	r31, 0x7F	; 127
    1188:	28 e3       	ldi	r18, 0x38	; 56
    118a:	81 e0       	ldi	r24, 0x01	; 1
    118c:	f1 50       	subi	r31, 0x01	; 1
    118e:	20 40       	sbci	r18, 0x00	; 0
    1190:	80 40       	sbci	r24, 0x00	; 0
    1192:	e1 f7       	brne	.-8      	; 0x118c <do_normal_actions+0x108>
    1194:	00 c0       	rjmp	.+0      	; 0x1196 <do_normal_actions+0x112>
    1196:	00 00       	nop
    1198:	08 95       	ret

0000119a <__vector_18>:
		for (int8_t i = 3-strlen(args+b); i > 0; i--) write_lcd_char(' ');
		write_lcd_string(args+b);
	}
}

ISR(USART_RX_vect){
    119a:	1f 92       	push	r1
    119c:	0f 92       	push	r0
    119e:	0f b6       	in	r0, 0x3f	; 63
    11a0:	0f 92       	push	r0
    11a2:	11 24       	eor	r1, r1
    11a4:	2f 93       	push	r18
    11a6:	3f 93       	push	r19
    11a8:	4f 93       	push	r20
    11aa:	5f 93       	push	r21
    11ac:	6f 93       	push	r22
    11ae:	7f 93       	push	r23
    11b0:	8f 93       	push	r24
    11b2:	9f 93       	push	r25
    11b4:	af 93       	push	r26
    11b6:	bf 93       	push	r27
    11b8:	ef 93       	push	r30
    11ba:	ff 93       	push	r31
	uart_linebuf[uart_bufind] = UDR0;
    11bc:	e0 91 c6 02 	lds	r30, 0x02C6	; 0x8002c6 <uart_bufind>
    11c0:	f0 e0       	ldi	r31, 0x00	; 0
    11c2:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    11c6:	ed 56       	subi	r30, 0x6D	; 109
    11c8:	fc 4f       	sbci	r31, 0xFC	; 252
    11ca:	80 83       	st	Z, r24
	if(uart_linebuf[uart_bufind] == '\n'){
    11cc:	e0 91 c6 02 	lds	r30, 0x02C6	; 0x8002c6 <uart_bufind>
    11d0:	f0 e0       	ldi	r31, 0x00	; 0
    11d2:	ed 56       	subi	r30, 0x6D	; 109
    11d4:	fc 4f       	sbci	r31, 0xFC	; 252
    11d6:	80 81       	ld	r24, Z
    11d8:	8a 30       	cpi	r24, 0x0A	; 10
    11da:	89 f4       	brne	.+34     	; 0x11fe <__vector_18+0x64>
		uart_linebuf[uart_bufind] = '\0';
    11dc:	e0 91 c6 02 	lds	r30, 0x02C6	; 0x8002c6 <uart_bufind>
    11e0:	f0 e0       	ldi	r31, 0x00	; 0
    11e2:	ed 56       	subi	r30, 0x6D	; 109
    11e4:	fc 4f       	sbci	r31, 0xFC	; 252
    11e6:	10 82       	st	Z, r1
		//Do something
		perform_command(uart_linebuf[0], uart_linebuf[1], uart_linebuf+2);
    11e8:	60 91 94 03 	lds	r22, 0x0394	; 0x800394 <uart_linebuf+0x1>
    11ec:	80 91 93 03 	lds	r24, 0x0393	; 0x800393 <uart_linebuf>
    11f0:	45 e9       	ldi	r20, 0x95	; 149
    11f2:	53 e0       	ldi	r21, 0x03	; 3
    11f4:	0e 94 18 07 	call	0xe30	; 0xe30 <perform_command>
		//Done something
		uart_bufind = 0;
    11f8:	10 92 c6 02 	sts	0x02C6, r1	; 0x8002c6 <uart_bufind>
    11fc:	05 c0       	rjmp	.+10     	; 0x1208 <__vector_18+0x6e>
	} else{
		uart_bufind++;
    11fe:	80 91 c6 02 	lds	r24, 0x02C6	; 0x8002c6 <uart_bufind>
    1202:	8f 5f       	subi	r24, 0xFF	; 255
    1204:	80 93 c6 02 	sts	0x02C6, r24	; 0x8002c6 <uart_bufind>
	}
}
    1208:	ff 91       	pop	r31
    120a:	ef 91       	pop	r30
    120c:	bf 91       	pop	r27
    120e:	af 91       	pop	r26
    1210:	9f 91       	pop	r25
    1212:	8f 91       	pop	r24
    1214:	7f 91       	pop	r23
    1216:	6f 91       	pop	r22
    1218:	5f 91       	pop	r21
    121a:	4f 91       	pop	r20
    121c:	3f 91       	pop	r19
    121e:	2f 91       	pop	r18
    1220:	0f 90       	pop	r0
    1222:	0f be       	out	0x3f, r0	; 63
    1224:	0f 90       	pop	r0
    1226:	1f 90       	pop	r1
    1228:	18 95       	reti

0000122a <btn_init>:

void btn_init(){
	BTN_DDR &= ~((1<<HONKBTN)|(1<<DEADMANBTN)|(1<<EXTRABTN));
    122a:	8a b1       	in	r24, 0x0a	; 10
    122c:	83 7e       	andi	r24, 0xE3	; 227
    122e:	8a b9       	out	0x0a, r24	; 10
	BTN_PORT |= (1<<HONKBTN)|(1<<DEADMANBTN)|(1<<EXTRABTN);
    1230:	8b b1       	in	r24, 0x0b	; 11
    1232:	8c 61       	ori	r24, 0x1C	; 28
    1234:	8b b9       	out	0x0b, r24	; 11
	DDRB &= ~(1<<GAMEBTN);
    1236:	26 98       	cbi	0x04, 6	; 4
	PORTB |= 1<<GAMEBTN;
    1238:	2e 9a       	sbi	0x05, 6	; 5
	EICRA = (2<<ISC00)|(2<<ISC10);
    123a:	8a e0       	ldi	r24, 0x0A	; 10
    123c:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
	EIMSK = 3;
    1240:	83 e0       	ldi	r24, 0x03	; 3
    1242:	8d bb       	out	0x1d, r24	; 29
    1244:	08 95       	ret

00001246 <__vector_1>:
}

//Extra
ISR(INT0_vect){
    1246:	1f 92       	push	r1
    1248:	0f 92       	push	r0
    124a:	0f b6       	in	r0, 0x3f	; 63
    124c:	0f 92       	push	r0
    124e:	11 24       	eor	r1, r1
    1250:	2f 93       	push	r18
    1252:	3f 93       	push	r19
    1254:	4f 93       	push	r20
    1256:	5f 93       	push	r21
    1258:	6f 93       	push	r22
    125a:	7f 93       	push	r23
    125c:	8f 93       	push	r24
    125e:	9f 93       	push	r25
    1260:	af 93       	push	r26
    1262:	bf 93       	push	r27
    1264:	cf 93       	push	r28
    1266:	ef 93       	push	r30
    1268:	ff 93       	push	r31
	if(program_mode == FIR_MODE){
    126a:	c0 91 bc 02 	lds	r28, 0x02BC	; 0x8002bc <program_mode>
    126e:	c1 30       	cpi	r28, 0x01	; 1
    1270:	59 f4       	brne	.+22     	; 0x1288 <__vector_1+0x42>
		enter_main_mode("Game canceled");
    1272:	86 e7       	ldi	r24, 0x76	; 118
    1274:	91 e0       	ldi	r25, 0x01	; 1
    1276:	0e 94 5c 05 	call	0xab8	; 0xab8 <enter_main_mode>
		uart_send_line("33A");
    127a:	87 ec       	ldi	r24, 0xC7	; 199
    127c:	91 e0       	ldi	r25, 0x01	; 1
    127e:	0e 94 ef 09 	call	0x13de	; 0x13de <uart_send_line>
		punished = true;
    1282:	c0 93 b9 02 	sts	0x02B9, r28	; 0x8002b9 <punished>
    1286:	33 c0       	rjmp	.+102    	; 0x12ee <__vector_1+0xa8>
	} else{
		if(game_prompted){
    1288:	80 91 bb 02 	lds	r24, 0x02BB	; 0x8002bb <game_prompted>
    128c:	88 23       	and	r24, r24
    128e:	31 f0       	breq	.+12     	; 0x129c <__vector_1+0x56>
			game_prompted = false;
    1290:	10 92 bb 02 	sts	0x02BB, r1	; 0x8002bb <game_prompted>
			redraw = true;
    1294:	81 e0       	ldi	r24, 0x01	; 1
    1296:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <redraw>
    129a:	29 c0       	rjmp	.+82     	; 0x12ee <__vector_1+0xa8>
		} else if((BTN_PIN & 1<<DEADMANBTN) && (read_adc(0) > z_rest-5)){ /*If deadmans is not pressed and device is flat*/
    129c:	4c 9b       	sbis	0x09, 4	; 9
    129e:	27 c0       	rjmp	.+78     	; 0x12ee <__vector_1+0xa8>
    12a0:	80 e0       	ldi	r24, 0x00	; 0
    12a2:	0e 94 21 0a 	call	0x1442	; 0x1442 <read_adc>
    12a6:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <z_rest>
    12aa:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <z_rest+0x1>
    12ae:	25 50       	subi	r18, 0x05	; 5
    12b0:	31 09       	sbc	r19, r1
    12b2:	28 17       	cp	r18, r24
    12b4:	39 07       	cpc	r19, r25
    12b6:	d8 f4       	brcc	.+54     	; 0x12ee <__vector_1+0xa8>
			z_rest = read_avg_adc(0, 25);
    12b8:	69 e1       	ldi	r22, 0x19	; 25
    12ba:	70 e0       	ldi	r23, 0x00	; 0
    12bc:	80 e0       	ldi	r24, 0x00	; 0
    12be:	0e 94 32 0a 	call	0x1464	; 0x1464 <read_avg_adc>
    12c2:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <z_rest+0x1>
    12c6:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <z_rest>
			x_rest = read_avg_adc(1, 25);
    12ca:	69 e1       	ldi	r22, 0x19	; 25
    12cc:	70 e0       	ldi	r23, 0x00	; 0
    12ce:	81 e0       	ldi	r24, 0x01	; 1
    12d0:	0e 94 32 0a 	call	0x1464	; 0x1464 <read_avg_adc>
    12d4:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <x_rest+0x1>
    12d8:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <x_rest>
			y_rest = read_avg_adc(2, 25);
    12dc:	69 e1       	ldi	r22, 0x19	; 25
    12de:	70 e0       	ldi	r23, 0x00	; 0
    12e0:	82 e0       	ldi	r24, 0x02	; 2
    12e2:	0e 94 32 0a 	call	0x1464	; 0x1464 <read_avg_adc>
    12e6:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <y_rest+0x1>
    12ea:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <y_rest>
		}
	}
	
}
    12ee:	ff 91       	pop	r31
    12f0:	ef 91       	pop	r30
    12f2:	cf 91       	pop	r28
    12f4:	bf 91       	pop	r27
    12f6:	af 91       	pop	r26
    12f8:	9f 91       	pop	r25
    12fa:	8f 91       	pop	r24
    12fc:	7f 91       	pop	r23
    12fe:	6f 91       	pop	r22
    1300:	5f 91       	pop	r21
    1302:	4f 91       	pop	r20
    1304:	3f 91       	pop	r19
    1306:	2f 91       	pop	r18
    1308:	0f 90       	pop	r0
    130a:	0f be       	out	0x3f, r0	; 63
    130c:	0f 90       	pop	r0
    130e:	1f 90       	pop	r1
    1310:	18 95       	reti

00001312 <__vector_2>:

//Honk
ISR(INT1_vect){
    1312:	1f 92       	push	r1
    1314:	0f 92       	push	r0
    1316:	0f b6       	in	r0, 0x3f	; 63
    1318:	0f 92       	push	r0
    131a:	11 24       	eor	r1, r1
    131c:	2f 93       	push	r18
    131e:	3f 93       	push	r19
    1320:	4f 93       	push	r20
    1322:	5f 93       	push	r21
    1324:	6f 93       	push	r22
    1326:	7f 93       	push	r23
    1328:	8f 93       	push	r24
    132a:	9f 93       	push	r25
    132c:	af 93       	push	r26
    132e:	bf 93       	push	r27
    1330:	ef 93       	push	r30
    1332:	ff 93       	push	r31
	if(debounce_hundreths == 0){ /*If no cooldown*/
    1334:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <debounce_hundreths>
    1338:	81 11       	cpse	r24, r1
    133a:	0c c0       	rjmp	.+24     	; 0x1354 <__vector_2+0x42>
		if(DEADMAN_PRESSED){
    133c:	4c 99       	sbic	0x09, 4	; 9
    133e:	03 c0       	rjmp	.+6      	; 0x1346 <__vector_2+0x34>
			uart_send_line("020"); /*Send honk to car*/
    1340:	8b ec       	ldi	r24, 0xCB	; 203
    1342:	91 e0       	ldi	r25, 0x01	; 1
    1344:	02 c0       	rjmp	.+4      	; 0x134a <__vector_2+0x38>
		} else{
			uart_send_line("32");	/*Send honk to rem2*/
    1346:	8f ec       	ldi	r24, 0xCF	; 207
    1348:	91 e0       	ldi	r25, 0x01	; 1
    134a:	0e 94 ef 09 	call	0x13de	; 0x13de <uart_send_line>
		}
		debounce_hundreths = DEBOUNCE_VAL;	
    134e:	84 e1       	ldi	r24, 0x14	; 20
    1350:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <debounce_hundreths>
	}
}
    1354:	ff 91       	pop	r31
    1356:	ef 91       	pop	r30
    1358:	bf 91       	pop	r27
    135a:	af 91       	pop	r26
    135c:	9f 91       	pop	r25
    135e:	8f 91       	pop	r24
    1360:	7f 91       	pop	r23
    1362:	6f 91       	pop	r22
    1364:	5f 91       	pop	r21
    1366:	4f 91       	pop	r20
    1368:	3f 91       	pop	r19
    136a:	2f 91       	pop	r18
    136c:	0f 90       	pop	r0
    136e:	0f be       	out	0x3f, r0	; 63
    1370:	0f 90       	pop	r0
    1372:	1f 90       	pop	r1
    1374:	18 95       	reti

00001376 <led_init>:

void led_init(){
	LED_DDR |= (1<<LEDG)|(1<<LEDR1)|(1<<LEDR2);
    1376:	8a b1       	in	r24, 0x0a	; 10
    1378:	80 6e       	ori	r24, 0xE0	; 224
    137a:	8a b9       	out	0x0a, r24	; 10
	LED_PORT &= ~((1<<LEDG)|(1<<LEDR1));
    137c:	8b b1       	in	r24, 0x0b	; 11
    137e:	8f 79       	andi	r24, 0x9F	; 159
    1380:	8b b9       	out	0x0b, r24	; 11
	LED_PORT |= 1<<LEDR2;
    1382:	5f 9a       	sbi	0x0b, 7	; 11
    1384:	08 95       	ret

00001386 <main>:
char row_buf[49];


int main(void)
{
	spi_init();
    1386:	0e 94 87 0c 	call	0x190e	; 0x190e <spi_init>
    138a:	2f ef       	ldi	r18, 0xFF	; 255
    138c:	80 e7       	ldi	r24, 0x70	; 112
    138e:	92 e0       	ldi	r25, 0x02	; 2
    1390:	21 50       	subi	r18, 0x01	; 1
    1392:	80 40       	sbci	r24, 0x00	; 0
    1394:	90 40       	sbci	r25, 0x00	; 0
    1396:	e1 f7       	brne	.-8      	; 0x1390 <main+0xa>
    1398:	00 c0       	rjmp	.+0      	; 0x139a <main+0x14>
    139a:	00 00       	nop
	_delay_ms(100);
	lcd_init();
    139c:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <lcd_init>
	fiveinarow_init();
    13a0:	0e 94 43 03 	call	0x686	; 0x686 <fiveinarow_init>
	adc_init();
    13a4:	0e 94 15 0a 	call	0x142a	; 0x142a <adc_init>
	uart_init();
    13a8:	0e 94 0a 0a 	call	0x1414	; 0x1414 <uart_init>
	uart_flush();
    13ac:	0e 94 02 0a 	call	0x1404	; 0x1404 <uart_flush>
	led_init();
    13b0:	0e 94 bb 09 	call	0x1376	; 0x1376 <led_init>
	btn_init();
    13b4:	0e 94 15 09 	call	0x122a	; 0x122a <btn_init>
	music_init();
    13b8:	0e 94 94 0b 	call	0x1728	; 0x1728 <music_init>
	timer_init();
    13bc:	0e 94 0c 07 	call	0xe18	; 0xe18 <timer_init>
	print_lcd_static();
    13c0:	0e 94 9a 06 	call	0xd34	; 0xd34 <print_lcd_static>
	sei();
    13c4:	78 94       	sei
    while (1) 
    {
		switch(program_mode){
    13c6:	80 91 bc 02 	lds	r24, 0x02BC	; 0x8002bc <program_mode>
    13ca:	88 23       	and	r24, r24
    13cc:	29 f0       	breq	.+10     	; 0x13d8 <main+0x52>
    13ce:	81 30       	cpi	r24, 0x01	; 1
    13d0:	d1 f7       	brne	.-12     	; 0x13c6 <main+0x40>
			case MAIN_MODE:
				do_normal_actions();
				break;
			case FIR_MODE:
				do_fir_actions();
    13d2:	0e 94 67 05 	call	0xace	; 0xace <do_fir_actions>
				break;
    13d6:	f7 cf       	rjmp	.-18     	; 0x13c6 <main+0x40>
	sei();
    while (1) 
    {
		switch(program_mode){
			case MAIN_MODE:
				do_normal_actions();
    13d8:	0e 94 42 08 	call	0x1084	; 0x1084 <do_normal_actions>
				break;
    13dc:	f4 cf       	rjmp	.-24     	; 0x13c6 <main+0x40>

000013de <uart_send_line>:

bool uart_receive_byte(uint8_t* buffer){
	if(!( UCSR0A & (1<<RXC0))) return false;
	*buffer = UDR0;
	return true;
}
    13de:	fc 01       	movw	r30, r24
    13e0:	91 91       	ld	r25, Z+
    13e2:	99 23       	and	r25, r25
    13e4:	39 f0       	breq	.+14     	; 0x13f4 <uart_send_line+0x16>
    13e6:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
    13ea:	85 ff       	sbrs	r24, 5
    13ec:	fc cf       	rjmp	.-8      	; 0x13e6 <uart_send_line+0x8>
    13ee:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    13f2:	f6 cf       	rjmp	.-20     	; 0x13e0 <uart_send_line+0x2>
    13f4:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
    13f8:	85 ff       	sbrs	r24, 5
    13fa:	fc cf       	rjmp	.-8      	; 0x13f4 <uart_send_line+0x16>
    13fc:	8a e0       	ldi	r24, 0x0A	; 10
    13fe:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    1402:	08 95       	ret

00001404 <uart_flush>:

void uart_flush(){
	uint8_t dummy;
	while ( UCSR0A & (1<<RXC0) ) dummy = UDR0;
    1404:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
    1408:	87 ff       	sbrs	r24, 7
    140a:	03 c0       	rjmp	.+6      	; 0x1412 <uart_flush+0xe>
    140c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    1410:	f9 cf       	rjmp	.-14     	; 0x1404 <uart_flush>
}
    1412:	08 95       	ret

00001414 <uart_init>:

void uart_init(){
	UBRR0 = 0;		//0==500000 baud rate.  12==38400 baud rate
    1414:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
    1418:	10 92 c4 00 	sts	0x00C4, r1	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UCSR0B = (1<<RXEN0)|(1<<TXEN0)|(1<<RXCIE0);
    141c:	88 e9       	ldi	r24, 0x98	; 152
    141e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	/* Set frame format: 8data, 1stop bit */
	UCSR0C = (0<<USBS0)|(3<<UCSZ00);
    1422:	86 e0       	ldi	r24, 0x06	; 6
    1424:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
    1428:	08 95       	ret

0000142a <adc_init>:

/************************************************************************/
/* Initializes the MCU ADC with 100KHz clock and with ports 0-3 enabled */
/************************************************************************/
void adc_init(){
	DDRC &= ~((1<<1)|(1<<0)|(1<<2));					//Enable input on ADC-ports
    142a:	87 b1       	in	r24, 0x07	; 7
    142c:	88 7f       	andi	r24, 0xF8	; 248
    142e:	87 b9       	out	0x07, r24	; 7
	ADCSRA = (1<<ADEN)|(1<<ADPS1)|(1<<ADPS2);   //ADC-clock F_CPU/64
    1430:	86 e8       	ldi	r24, 0x86	; 134
    1432:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
	DIDR0 = (1<<ADC5D)|(1<<ADC4D)|(1<<ADC3D);	//Disable unused ADC-ports			
    1436:	88 e3       	ldi	r24, 0x38	; 56
    1438:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7f807e>
	ADCSRB = 0;									//No auto trigger
    143c:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
    1440:	08 95       	ret

00001442 <read_adc>:
/* the ADC-value from ADCH and ADCL										*/
/* @param port The port to read from (0-3)								*/
/************************************************************************/
uint16_t read_adc(uint8_t port){
	//Choose port and reference voltage
	ADMUX = port|(1<<REFS0);
    1442:	80 64       	ori	r24, 0x40	; 64
    1444:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	//Start conversion
	ADCSRA |= 1<<ADSC;
    1448:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    144c:	80 64       	ori	r24, 0x40	; 64
    144e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
	//Wait for completion and return result
	while( ADCSRA & 1<<ADSC);
    1452:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    1456:	86 fd       	sbrc	r24, 6
    1458:	fc cf       	rjmp	.-8      	; 0x1452 <read_adc+0x10>
	return ADC;
    145a:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
    145e:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
    1462:	08 95       	ret

00001464 <read_avg_adc>:
/* the average ADC-value from ADCH and ADCL	from the given amount		*/
/* of iterations														*/
/* @param port The port to read from (0-3)								*/
/* @param iterations The amount of iterations to take average from		*/
/************************************************************************/
uint16_t read_avg_adc(uint8_t port, uint16_t iterations){
    1464:	9b 01       	movw	r18, r22
	//Choose port and reference voltage
	ADMUX = port|(1<<REFS0);
    1466:	80 64       	ori	r24, 0x40	; 64
    1468:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	uint32_t sum = 0;
	//Start given amount of conversions and add up results
	for (uint8_t i = 0; i < iterations; i++){
    146c:	40 e0       	ldi	r20, 0x00	; 0
/* @param iterations The amount of iterations to take average from		*/
/************************************************************************/
uint16_t read_avg_adc(uint8_t port, uint16_t iterations){
	//Choose port and reference voltage
	ADMUX = port|(1<<REFS0);
	uint32_t sum = 0;
    146e:	60 e0       	ldi	r22, 0x00	; 0
    1470:	70 e0       	ldi	r23, 0x00	; 0
    1472:	cb 01       	movw	r24, r22
	//Start given amount of conversions and add up results
	for (uint8_t i = 0; i < iterations; i++){
    1474:	e4 2f       	mov	r30, r20
    1476:	f0 e0       	ldi	r31, 0x00	; 0
    1478:	e2 17       	cp	r30, r18
    147a:	f3 07       	cpc	r31, r19
    147c:	98 f4       	brcc	.+38     	; 0x14a4 <read_avg_adc+0x40>
		ADCSRA |= 1<<ADSC;
    147e:	50 91 7a 00 	lds	r21, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    1482:	50 64       	ori	r21, 0x40	; 64
    1484:	50 93 7a 00 	sts	0x007A, r21	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
		while( ADCSRA & 1<<ADSC);
    1488:	50 91 7a 00 	lds	r21, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    148c:	56 fd       	sbrc	r21, 6
    148e:	fc cf       	rjmp	.-8      	; 0x1488 <read_avg_adc+0x24>
		sum += ADC;
    1490:	e0 91 78 00 	lds	r30, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
    1494:	f0 91 79 00 	lds	r31, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
    1498:	6e 0f       	add	r22, r30
    149a:	7f 1f       	adc	r23, r31
    149c:	81 1d       	adc	r24, r1
    149e:	91 1d       	adc	r25, r1
uint16_t read_avg_adc(uint8_t port, uint16_t iterations){
	//Choose port and reference voltage
	ADMUX = port|(1<<REFS0);
	uint32_t sum = 0;
	//Start given amount of conversions and add up results
	for (uint8_t i = 0; i < iterations; i++){
    14a0:	4f 5f       	subi	r20, 0xFF	; 255
    14a2:	e8 cf       	rjmp	.-48     	; 0x1474 <read_avg_adc+0x10>
		ADCSRA |= 1<<ADSC;
		while( ADCSRA & 1<<ADSC);
		sum += ADC;
	}
	//Return truncated average
	return (uint16_t)(sum/iterations);
    14a4:	40 e0       	ldi	r20, 0x00	; 0
    14a6:	50 e0       	ldi	r21, 0x00	; 0
    14a8:	0e 94 1c 10 	call	0x2038	; 0x2038 <__udivmodsi4>
    14ac:	c9 01       	movw	r24, r18
    14ae:	08 95       	ret

000014b0 <spi_tx>:
		spi_tx(rows[i]);
		_delay_us(30);
	}
	PORTB &= ~(1<<RS);
	PORTB |= 1<<CSB;
}
    14b0:	8e bd       	out	0x2e, r24	; 46
    14b2:	0d b4       	in	r0, 0x2d	; 45
    14b4:	07 fe       	sbrs	r0, 7
    14b6:	fd cf       	rjmp	.-6      	; 0x14b2 <spi_tx+0x2>
    14b8:	08 95       	ret

000014ba <lcd_init>:
    14ba:	cf 93       	push	r28
    14bc:	df 93       	push	r29
    14be:	84 b1       	in	r24, 0x04	; 4
    14c0:	85 60       	ori	r24, 0x05	; 5
    14c2:	84 b9       	out	0x04, r24	; 4
    14c4:	85 b1       	in	r24, 0x05	; 5
    14c6:	8a 7f       	andi	r24, 0xFA	; 250
    14c8:	85 b9       	out	0x05, r24	; 5
    14ca:	cc e1       	ldi	r28, 0x1C	; 28
    14cc:	d6 e0       	ldi	r29, 0x06	; 6
    14ce:	fe 01       	movw	r30, r28
    14d0:	84 91       	lpm	r24, Z
    14d2:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <spi_tx>
    14d6:	87 eb       	ldi	r24, 0xB7	; 183
    14d8:	9b e0       	ldi	r25, 0x0B	; 11
    14da:	01 97       	sbiw	r24, 0x01	; 1
    14dc:	f1 f7       	brne	.-4      	; 0x14da <lcd_init+0x20>
    14de:	00 c0       	rjmp	.+0      	; 0x14e0 <lcd_init+0x26>
    14e0:	00 00       	nop
    14e2:	21 96       	adiw	r28, 0x01	; 1
    14e4:	96 e0       	ldi	r25, 0x06	; 6
    14e6:	c5 32       	cpi	r28, 0x25	; 37
    14e8:	d9 07       	cpc	r29, r25
    14ea:	89 f7       	brne	.-30     	; 0x14ce <lcd_init+0x14>
    14ec:	10 92 c7 02 	sts	0x02C7, r1	; 0x8002c7 <cursor_pos>
    14f0:	2a 9a       	sbi	0x05, 2	; 5
    14f2:	df 91       	pop	r29
    14f4:	cf 91       	pop	r28
    14f6:	08 95       	ret

000014f8 <write_lcd_char>:
    14f8:	28 9a       	sbi	0x05, 0	; 5
    14fa:	2a 98       	cbi	0x05, 2	; 5
    14fc:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <spi_tx>
    1500:	80 e5       	ldi	r24, 0x50	; 80
    1502:	8a 95       	dec	r24
    1504:	f1 f7       	brne	.-4      	; 0x1502 <write_lcd_char+0xa>
    1506:	28 98       	cbi	0x05, 0	; 5
    1508:	2a 9a       	sbi	0x05, 2	; 5
    150a:	80 91 c7 02 	lds	r24, 0x02C7	; 0x8002c7 <cursor_pos>
    150e:	8f 5f       	subi	r24, 0xFF	; 255
    1510:	80 93 c7 02 	sts	0x02C7, r24	; 0x8002c7 <cursor_pos>
    1514:	08 95       	ret

00001516 <write_lcd_string>:
    1516:	cf 93       	push	r28
    1518:	df 93       	push	r29
    151a:	28 9a       	sbi	0x05, 0	; 5
    151c:	2a 98       	cbi	0x05, 2	; 5
    151e:	ec 01       	movw	r28, r24
    1520:	89 91       	ld	r24, Y+
    1522:	88 23       	and	r24, r24
    1524:	59 f0       	breq	.+22     	; 0x153c <write_lcd_string+0x26>
    1526:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <spi_tx>
    152a:	80 e5       	ldi	r24, 0x50	; 80
    152c:	8a 95       	dec	r24
    152e:	f1 f7       	brne	.-4      	; 0x152c <write_lcd_string+0x16>
    1530:	80 91 c7 02 	lds	r24, 0x02C7	; 0x8002c7 <cursor_pos>
    1534:	8f 5f       	subi	r24, 0xFF	; 255
    1536:	80 93 c7 02 	sts	0x02C7, r24	; 0x8002c7 <cursor_pos>
    153a:	f2 cf       	rjmp	.-28     	; 0x1520 <write_lcd_string+0xa>
    153c:	28 98       	cbi	0x05, 0	; 5
    153e:	2a 9a       	sbi	0x05, 2	; 5
    1540:	df 91       	pop	r29
    1542:	cf 91       	pop	r28
    1544:	08 95       	ret

00001546 <clear_LCD>:
    1546:	2a 98       	cbi	0x05, 2	; 5
    1548:	81 e0       	ldi	r24, 0x01	; 1
    154a:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <spi_tx>
    154e:	87 eb       	ldi	r24, 0xB7	; 183
    1550:	9b e0       	ldi	r25, 0x0B	; 11
    1552:	01 97       	sbiw	r24, 0x01	; 1
    1554:	f1 f7       	brne	.-4      	; 0x1552 <clear_LCD+0xc>
    1556:	00 c0       	rjmp	.+0      	; 0x1558 <clear_LCD+0x12>
    1558:	00 00       	nop
    155a:	10 92 c7 02 	sts	0x02C7, r1	; 0x8002c7 <cursor_pos>
    155e:	08 95       	ret

00001560 <set_cursor_pos>:
    1560:	cf 93       	push	r28
    1562:	c8 2f       	mov	r28, r24
    1564:	2a 98       	cbi	0x05, 2	; 5
    1566:	80 68       	ori	r24, 0x80	; 128
    1568:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <spi_tx>
    156c:	80 e5       	ldi	r24, 0x50	; 80
    156e:	8a 95       	dec	r24
    1570:	f1 f7       	brne	.-4      	; 0x156e <set_cursor_pos+0xe>
    1572:	c0 93 c7 02 	sts	0x02C7, r28	; 0x8002c7 <cursor_pos>
    1576:	cf 91       	pop	r28
    1578:	08 95       	ret

0000157a <clear_line>:
    157a:	cf 93       	push	r28
    157c:	82 95       	swap	r24
    157e:	80 7f       	andi	r24, 0xF0	; 240
    1580:	0e 94 b0 0a 	call	0x1560	; 0x1560 <set_cursor_pos>
    1584:	28 9a       	sbi	0x05, 0	; 5
    1586:	2a 98       	cbi	0x05, 2	; 5
    1588:	c0 e1       	ldi	r28, 0x10	; 16
    158a:	80 e2       	ldi	r24, 0x20	; 32
    158c:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <spi_tx>
    1590:	80 e5       	ldi	r24, 0x50	; 80
    1592:	8a 95       	dec	r24
    1594:	f1 f7       	brne	.-4      	; 0x1592 <clear_line+0x18>
    1596:	80 91 c7 02 	lds	r24, 0x02C7	; 0x8002c7 <cursor_pos>
    159a:	8f 5f       	subi	r24, 0xFF	; 255
    159c:	80 93 c7 02 	sts	0x02C7, r24	; 0x8002c7 <cursor_pos>
    15a0:	c1 50       	subi	r28, 0x01	; 1
    15a2:	99 f7       	brne	.-26     	; 0x158a <clear_line+0x10>
    15a4:	28 98       	cbi	0x05, 0	; 5
    15a6:	2a 9a       	sbi	0x05, 2	; 5
    15a8:	cf 91       	pop	r28
    15aa:	08 95       	ret

000015ac <set_character_pgm>:
/* Set a given address in CGRAM to a given bitmap stored in pgm_space	*/
/* @param char_code The address or char code in CGRAM to write to		*/
/* @param rows An array of 8 bytes where each bytes b0-b4 is			*/
/*	      a row of the character. Must be stored in program memory		*/
/************************************************************************/
void set_character_pgm(uint8_t char_code, const uint8_t rows[8]){
    15ac:	0f 93       	push	r16
    15ae:	1f 93       	push	r17
    15b0:	cf 93       	push	r28
    15b2:	df 93       	push	r29
	PORTB &= ~(1<<CSB);   //Clear CSB
    15b4:	2a 98       	cbi	0x05, 2	; 5
    15b6:	28 e0       	ldi	r18, 0x08	; 8
    15b8:	82 9f       	mul	r24, r18
    15ba:	c0 01       	movw	r24, r0
    15bc:	11 24       	eor	r1, r1
    15be:	08 2f       	mov	r16, r24
    15c0:	00 64       	ori	r16, 0x40	; 64
    15c2:	eb 01       	movw	r28, r22
	for (uint8_t i = 0; i < 8; i++){
    15c4:	10 e0       	ldi	r17, 0x00	; 0
		//Set CGRAM address
		PORTB &= ~(1<<RS);
    15c6:	28 98       	cbi	0x05, 0	; 5
		spi_tx(0x40|(char_code<<3)|(i));
    15c8:	80 2f       	mov	r24, r16
    15ca:	81 2b       	or	r24, r17
    15cc:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <spi_tx>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    15d0:	80 e5       	ldi	r24, 0x50	; 80
    15d2:	8a 95       	dec	r24
    15d4:	f1 f7       	brne	.-4      	; 0x15d2 <set_character_pgm+0x26>
		_delay_us(30);
		//Write row to character
		PORTB |= 1<<RS;
    15d6:	28 9a       	sbi	0x05, 0	; 5
		spi_tx(pgm_read_byte(&(rows[i])));
    15d8:	fe 01       	movw	r30, r28
    15da:	84 91       	lpm	r24, Z
    15dc:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <spi_tx>
    15e0:	f0 e5       	ldi	r31, 0x50	; 80
    15e2:	fa 95       	dec	r31
    15e4:	f1 f7       	brne	.-4      	; 0x15e2 <set_character_pgm+0x36>
/* @param rows An array of 8 bytes where each bytes b0-b4 is			*/
/*	      a row of the character. Must be stored in program memory		*/
/************************************************************************/
void set_character_pgm(uint8_t char_code, const uint8_t rows[8]){
	PORTB &= ~(1<<CSB);   //Clear CSB
	for (uint8_t i = 0; i < 8; i++){
    15e6:	1f 5f       	subi	r17, 0xFF	; 255
    15e8:	21 96       	adiw	r28, 0x01	; 1
    15ea:	18 30       	cpi	r17, 0x08	; 8
    15ec:	61 f7       	brne	.-40     	; 0x15c6 <set_character_pgm+0x1a>
		//Write row to character
		PORTB |= 1<<RS;
		spi_tx(pgm_read_byte(&(rows[i])));
		_delay_us(30);
	}
	PORTB &= ~(1<<RS);
    15ee:	28 98       	cbi	0x05, 0	; 5
	PORTB |= 1<<CSB;
    15f0:	2a 9a       	sbi	0x05, 2	; 5
}
    15f2:	df 91       	pop	r29
    15f4:	cf 91       	pop	r28
    15f6:	1f 91       	pop	r17
    15f8:	0f 91       	pop	r16
    15fa:	08 95       	ret

000015fc <messages_timerproc>:
/*bool for tracking if any message is active*/
static volatile bool message_displaying = false;

/*Keeps time running and clears buffer on deactivation of a message*/
void messages_timerproc(){
	if(message_displaying && ++message_parts > 100){
    15fc:	80 91 c8 02 	lds	r24, 0x02C8	; 0x8002c8 <message_displaying>
    1600:	88 23       	and	r24, r24
    1602:	19 f1       	breq	.+70     	; 0x164a <messages_timerproc+0x4e>
    1604:	80 91 55 03 	lds	r24, 0x0355	; 0x800355 <message_parts>
    1608:	90 91 56 03 	lds	r25, 0x0356	; 0x800356 <message_parts+0x1>
    160c:	01 96       	adiw	r24, 0x01	; 1
    160e:	90 93 56 03 	sts	0x0356, r25	; 0x800356 <message_parts+0x1>
    1612:	80 93 55 03 	sts	0x0355, r24	; 0x800355 <message_parts>
    1616:	85 36       	cpi	r24, 0x65	; 101
    1618:	91 05       	cpc	r25, r1
    161a:	b8 f0       	brcs	.+46     	; 0x164a <messages_timerproc+0x4e>
		if(++message_seconds > DISP_TIME){
    161c:	80 91 54 03 	lds	r24, 0x0354	; 0x800354 <message_seconds>
    1620:	8f 5f       	subi	r24, 0xFF	; 255
    1622:	80 93 54 03 	sts	0x0354, r24	; 0x800354 <message_seconds>
    1626:	86 30       	cpi	r24, 0x06	; 6
    1628:	60 f0       	brcs	.+24     	; 0x1642 <messages_timerproc+0x46>
			message_seconds = 0;
    162a:	10 92 54 03 	sts	0x0354, r1	; 0x800354 <message_seconds>
			message_displaying = false;
    162e:	10 92 c8 02 	sts	0x02C8, r1	; 0x8002c8 <message_displaying>
			strcpy((char*)output_buf, "");
    1632:	68 e9       	ldi	r22, 0x98	; 152
    1634:	71 e0       	ldi	r23, 0x01	; 1
    1636:	87 eb       	ldi	r24, 0xB7	; 183
    1638:	93 e0       	ldi	r25, 0x03	; 3
    163a:	0e 94 5d 10 	call	0x20ba	; 0x20ba <strcpy>
			output_buf_read = false;
    163e:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <output_buf_read>
		}
		message_parts = 0;
    1642:	10 92 56 03 	sts	0x0356, r1	; 0x800356 <message_parts+0x1>
    1646:	10 92 55 03 	sts	0x0355, r1	; 0x800355 <message_parts>
    164a:	08 95       	ret

0000164c <messages_force>:
	}
}

/*Forces a message to be copied into buffer and marks buffer as changed*/
void messages_force(char* msg){
	message_displaying = true;
    164c:	21 e0       	ldi	r18, 0x01	; 1
    164e:	20 93 c8 02 	sts	0x02C8, r18	; 0x8002c8 <message_displaying>
	/*Reset time counter to display for full time*/
	message_parts = 0;
    1652:	10 92 56 03 	sts	0x0356, r1	; 0x800356 <message_parts+0x1>
    1656:	10 92 55 03 	sts	0x0355, r1	; 0x800355 <message_parts>
	message_seconds = 0;
    165a:	10 92 54 03 	sts	0x0354, r1	; 0x800354 <message_seconds>
	strcpy((char*)output_buf, msg);
    165e:	bc 01       	movw	r22, r24
    1660:	87 eb       	ldi	r24, 0xB7	; 183
    1662:	93 e0       	ldi	r25, 0x03	; 3
    1664:	0e 94 5d 10 	call	0x20ba	; 0x20ba <strcpy>
	output_buf_read = false;
    1668:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <output_buf_read>
    166c:	08 95       	ret

0000166e <messages_queue>:
}

/*Queues a message. Forces front most message out of queue if queue is full*/
void messages_queue(char* msg){
    166e:	cf 93       	push	r28
    1670:	df 93       	push	r29
    1672:	ec 01       	movw	r28, r24
	if(message_count == MSGBUF_SIZE){
    1674:	80 91 c9 02 	lds	r24, 0x02C9	; 0x8002c9 <message_count>
    1678:	88 30       	cpi	r24, 0x08	; 8
    167a:	81 f4       	brne	.+32     	; 0x169c <messages_queue+0x2e>
		messages_force((char*)(message_buf)[MOD_BUFSIZE(message_extract_ind++)]);
    167c:	80 91 ca 02 	lds	r24, 0x02CA	; 0x8002ca <message_extract_ind>
    1680:	91 e0       	ldi	r25, 0x01	; 1
    1682:	98 0f       	add	r25, r24
    1684:	90 93 ca 02 	sts	0x02CA, r25	; 0x8002ca <message_extract_ind>
    1688:	87 70       	andi	r24, 0x07	; 7
    168a:	21 e1       	ldi	r18, 0x11	; 17
    168c:	82 9f       	mul	r24, r18
    168e:	c0 01       	movw	r24, r0
    1690:	11 24       	eor	r1, r1
    1692:	84 53       	subi	r24, 0x34	; 52
    1694:	9d 4f       	sbci	r25, 0xFD	; 253
    1696:	0e 94 26 0b 	call	0x164c	; 0x164c <messages_force>
    169a:	0a c0       	rjmp	.+20     	; 0x16b0 <messages_queue+0x42>
	} else if(++message_count > MSGBUF_SIZE) message_count = MSGBUF_SIZE;
    169c:	80 91 c9 02 	lds	r24, 0x02C9	; 0x8002c9 <message_count>
    16a0:	8f 5f       	subi	r24, 0xFF	; 255
    16a2:	80 93 c9 02 	sts	0x02C9, r24	; 0x8002c9 <message_count>
    16a6:	89 30       	cpi	r24, 0x09	; 9
    16a8:	18 f0       	brcs	.+6      	; 0x16b0 <messages_queue+0x42>
    16aa:	88 e0       	ldi	r24, 0x08	; 8
    16ac:	80 93 c9 02 	sts	0x02C9, r24	; 0x8002c9 <message_count>
	strcpy((char*)(message_buf)[MOD_BUFSIZE(message_insert_ind++)], msg);
    16b0:	80 91 cb 02 	lds	r24, 0x02CB	; 0x8002cb <message_insert_ind>
    16b4:	91 e0       	ldi	r25, 0x01	; 1
    16b6:	98 0f       	add	r25, r24
    16b8:	90 93 cb 02 	sts	0x02CB, r25	; 0x8002cb <message_insert_ind>
    16bc:	87 70       	andi	r24, 0x07	; 7
    16be:	21 e1       	ldi	r18, 0x11	; 17
    16c0:	82 9f       	mul	r24, r18
    16c2:	c0 01       	movw	r24, r0
    16c4:	11 24       	eor	r1, r1
    16c6:	be 01       	movw	r22, r28
    16c8:	84 53       	subi	r24, 0x34	; 52
    16ca:	9d 4f       	sbci	r25, 0xFD	; 253
}
    16cc:	df 91       	pop	r29
    16ce:	cf 91       	pop	r28
/*Queues a message. Forces front most message out of queue if queue is full*/
void messages_queue(char* msg){
	if(message_count == MSGBUF_SIZE){
		messages_force((char*)(message_buf)[MOD_BUFSIZE(message_extract_ind++)]);
	} else if(++message_count > MSGBUF_SIZE) message_count = MSGBUF_SIZE;
	strcpy((char*)(message_buf)[MOD_BUFSIZE(message_insert_ind++)], msg);
    16d0:	0c 94 5d 10 	jmp	0x20ba	; 0x20ba <strcpy>

000016d4 <messages_move_queue>:
}

/*Moves queue along if no message is active*/
void messages_move_queue(){
	if(message_count > 0 && !message_displaying){
    16d4:	80 91 c9 02 	lds	r24, 0x02C9	; 0x8002c9 <message_count>
    16d8:	88 23       	and	r24, r24
    16da:	f9 f0       	breq	.+62     	; 0x171a <messages_move_queue+0x46>
    16dc:	80 91 c8 02 	lds	r24, 0x02C8	; 0x8002c8 <message_displaying>
    16e0:	81 11       	cpse	r24, r1
    16e2:	1b c0       	rjmp	.+54     	; 0x171a <messages_move_queue+0x46>
		/*Copy next message to output buffer and increment/decremnt index and counter*/
		strcpy((char*)output_buf, (char*)(message_buf)[MOD_BUFSIZE(message_extract_ind++)]);
    16e4:	60 91 ca 02 	lds	r22, 0x02CA	; 0x8002ca <message_extract_ind>
    16e8:	81 e0       	ldi	r24, 0x01	; 1
    16ea:	86 0f       	add	r24, r22
    16ec:	80 93 ca 02 	sts	0x02CA, r24	; 0x8002ca <message_extract_ind>
    16f0:	67 70       	andi	r22, 0x07	; 7
    16f2:	81 e1       	ldi	r24, 0x11	; 17
    16f4:	68 9f       	mul	r22, r24
    16f6:	b0 01       	movw	r22, r0
    16f8:	11 24       	eor	r1, r1
    16fa:	64 53       	subi	r22, 0x34	; 52
    16fc:	7d 4f       	sbci	r23, 0xFD	; 253
    16fe:	87 eb       	ldi	r24, 0xB7	; 183
    1700:	93 e0       	ldi	r25, 0x03	; 3
    1702:	0e 94 5d 10 	call	0x20ba	; 0x20ba <strcpy>
		output_buf_read = false;
    1706:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <output_buf_read>
		message_displaying = true;
    170a:	81 e0       	ldi	r24, 0x01	; 1
    170c:	80 93 c8 02 	sts	0x02C8, r24	; 0x8002c8 <message_displaying>
		message_count--;
    1710:	80 91 c9 02 	lds	r24, 0x02C9	; 0x8002c9 <message_count>
    1714:	81 50       	subi	r24, 0x01	; 1
    1716:	80 93 c9 02 	sts	0x02C9, r24	; 0x8002c9 <message_count>
    171a:	08 95       	ret

0000171c <messages_get_buffer>:
	}
}

/*Mark buffer as read and return pointer to buffer*/
volatile char* messages_get_buffer(){
	output_buf_read = true;
    171c:	81 e0       	ldi	r24, 0x01	; 1
    171e:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <output_buf_read>
	return output_buf;
    1722:	87 eb       	ldi	r24, 0xB7	; 183
    1724:	93 e0       	ldi	r25, 0x03	; 3
    1726:	08 95       	ret

00001728 <music_init>:
static volatile uint8_t curr_bpm;
static const volatile uint8_t* curr_song = NULL;


void music_init(){
	DDRB |= 1<<PINB1;
    1728:	21 9a       	sbi	0x04, 1	; 4
	TCCR1A = 1<<COM1A0;
    172a:	80 e4       	ldi	r24, 0x40	; 64
    172c:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = 1<<WGM12;
    1730:	88 e0       	ldi	r24, 0x08	; 8
    1732:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    1736:	08 95       	ret

00001738 <music_play_note>:
	curr_bpm = pgm_read_byte(&(curr_song[0]));
	note_ind = 1;
	music_play_note(pgm_read_byte(&(curr_song[note_ind])), curr_bpm);
}

void music_play_note(uint8_t note, uint8_t bpm){
    1738:	cf 92       	push	r12
    173a:	df 92       	push	r13
    173c:	ef 92       	push	r14
    173e:	ff 92       	push	r15
    1740:	cf 93       	push	r28
    1742:	df 93       	push	r29
    1744:	c8 2f       	mov	r28, r24
    1746:	d6 2f       	mov	r29, r22
	TIMSK1 |= 1<<OCIE1A;
    1748:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
    174c:	82 60       	ori	r24, 0x02	; 2
    174e:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
	TCCR1B |= 1<<CS10;
    1752:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    1756:	81 60       	ori	r24, 0x01	; 1
    1758:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	if(GET_PITCH_EXP(note) == -1){  // Stop buzzer if note is a rest
    175c:	6c 2f       	mov	r22, r28
    175e:	70 e0       	ldi	r23, 0x00	; 0
    1760:	6f 71       	andi	r22, 0x1F	; 31
		TCCR1A &= ~(1<<COM1A0);
    1762:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
}

void music_play_note(uint8_t note, uint8_t bpm){
	TIMSK1 |= 1<<OCIE1A;
	TCCR1B |= 1<<CS10;
	if(GET_PITCH_EXP(note) == -1){  // Stop buzzer if note is a rest
    1766:	61 15       	cp	r22, r1
    1768:	71 05       	cpc	r23, r1
    176a:	21 f4       	brne	.+8      	; 0x1774 <music_play_note+0x3c>
		TCCR1A &= ~(1<<COM1A0);
    176c:	8f 7b       	andi	r24, 0xBF	; 191
    176e:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    1772:	21 c0       	rjmp	.+66     	; 0x17b6 <music_play_note+0x7e>
	} else{                         // Start buzzer and set correct frequency
		TCCR1A |= 1<<COM1A0;
    1774:	80 64       	ori	r24, 0x40	; 64
    1776:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
		OCR1A = LOWC_OCR / pow(ROOT12_2,GET_PITCH_EXP(note));
    177a:	61 50       	subi	r22, 0x01	; 1
    177c:	71 09       	sbc	r23, r1
    177e:	07 2e       	mov	r0, r23
    1780:	00 0c       	add	r0, r0
    1782:	88 0b       	sbc	r24, r24
    1784:	99 0b       	sbc	r25, r25
    1786:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <__floatsisf>
    178a:	9b 01       	movw	r18, r22
    178c:	ac 01       	movw	r20, r24
    178e:	6d e7       	ldi	r22, 0x7D	; 125
    1790:	7c e9       	ldi	r23, 0x9C	; 156
    1792:	87 e8       	ldi	r24, 0x87	; 135
    1794:	9f e3       	ldi	r25, 0x3F	; 63
    1796:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <pow>
    179a:	9b 01       	movw	r18, r22
    179c:	ac 01       	movw	r20, r24
    179e:	60 e0       	ldi	r22, 0x00	; 0
    17a0:	70 e6       	ldi	r23, 0x60	; 96
    17a2:	80 e7       	ldi	r24, 0x70	; 112
    17a4:	96 e4       	ldi	r25, 0x46	; 70
    17a6:	0e 94 8e 0c 	call	0x191c	; 0x191c <__divsf3>
    17aa:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <__fixunssfsi>
    17ae:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    17b2:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	}
	// cycles needed = frequency / (bar time) / (note length divisor)
	curr_note_time = ((F_CPU/(OCR1A + 1))/(bpm/(240.0)))/GET_DURATION_DIV(note);
    17b6:	20 91 88 00 	lds	r18, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
    17ba:	30 91 89 00 	lds	r19, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    17be:	2f 5f       	subi	r18, 0xFF	; 255
    17c0:	3f 4f       	sbci	r19, 0xFF	; 255
    17c2:	40 e0       	ldi	r20, 0x00	; 0
    17c4:	50 e0       	ldi	r21, 0x00	; 0
    17c6:	60 e0       	ldi	r22, 0x00	; 0
    17c8:	72 e1       	ldi	r23, 0x12	; 18
    17ca:	8a e7       	ldi	r24, 0x7A	; 122
    17cc:	90 e0       	ldi	r25, 0x00	; 0
    17ce:	0e 94 3e 10 	call	0x207c	; 0x207c <__divmodsi4>
    17d2:	ca 01       	movw	r24, r20
    17d4:	b9 01       	movw	r22, r18
    17d6:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <__floatsisf>
    17da:	6b 01       	movw	r12, r22
    17dc:	7c 01       	movw	r14, r24
    17de:	6d 2f       	mov	r22, r29
    17e0:	70 e0       	ldi	r23, 0x00	; 0
    17e2:	80 e0       	ldi	r24, 0x00	; 0
    17e4:	90 e0       	ldi	r25, 0x00	; 0
    17e6:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <__floatsisf>
    17ea:	20 e0       	ldi	r18, 0x00	; 0
    17ec:	30 e0       	ldi	r19, 0x00	; 0
    17ee:	40 e7       	ldi	r20, 0x70	; 112
    17f0:	53 e4       	ldi	r21, 0x43	; 67
    17f2:	0e 94 8e 0c 	call	0x191c	; 0x191c <__divsf3>
    17f6:	9b 01       	movw	r18, r22
    17f8:	ac 01       	movw	r20, r24
    17fa:	c7 01       	movw	r24, r14
    17fc:	b6 01       	movw	r22, r12
    17fe:	0e 94 8e 0c 	call	0x191c	; 0x191c <__divsf3>
    1802:	6b 01       	movw	r12, r22
    1804:	7c 01       	movw	r14, r24
    1806:	c2 95       	swap	r28
    1808:	c6 95       	lsr	r28
    180a:	c7 70       	andi	r28, 0x07	; 7
    180c:	61 e0       	ldi	r22, 0x01	; 1
    180e:	70 e0       	ldi	r23, 0x00	; 0
    1810:	02 c0       	rjmp	.+4      	; 0x1816 <music_play_note+0xde>
    1812:	66 0f       	add	r22, r22
    1814:	77 1f       	adc	r23, r23
    1816:	ca 95       	dec	r28
    1818:	e2 f7       	brpl	.-8      	; 0x1812 <music_play_note+0xda>
    181a:	07 2e       	mov	r0, r23
    181c:	00 0c       	add	r0, r0
    181e:	88 0b       	sbc	r24, r24
    1820:	99 0b       	sbc	r25, r25
    1822:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <__floatsisf>
    1826:	9b 01       	movw	r18, r22
    1828:	ac 01       	movw	r20, r24
    182a:	c7 01       	movw	r24, r14
    182c:	b6 01       	movw	r22, r12
    182e:	0e 94 8e 0c 	call	0x191c	; 0x191c <__divsf3>
    1832:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <__fixunssfsi>
    1836:	70 93 5c 03 	sts	0x035C, r23	; 0x80035c <curr_note_time+0x1>
    183a:	60 93 5b 03 	sts	0x035B, r22	; 0x80035b <curr_note_time>
}
    183e:	df 91       	pop	r29
    1840:	cf 91       	pop	r28
    1842:	ff 90       	pop	r15
    1844:	ef 90       	pop	r14
    1846:	df 90       	pop	r13
    1848:	cf 90       	pop	r12
    184a:	08 95       	ret

0000184c <music_play_song_pgm>:
	TCCR1A = 1<<COM1A0;
	TCCR1B = 1<<WGM12;
}

void music_play_song_pgm(const uint8_t* song){
	curr_song = song;
    184c:	90 93 58 03 	sts	0x0358, r25	; 0x800358 <curr_song+0x1>
    1850:	80 93 57 03 	sts	0x0357, r24	; 0x800357 <curr_song>
	curr_bpm = pgm_read_byte(&(curr_song[0]));
    1854:	fc 01       	movw	r30, r24
    1856:	24 91       	lpm	r18, Z
    1858:	20 93 59 03 	sts	0x0359, r18	; 0x800359 <curr_bpm>
	note_ind = 1;
    185c:	21 e0       	ldi	r18, 0x01	; 1
    185e:	20 93 5a 03 	sts	0x035A, r18	; 0x80035a <note_ind>
	music_play_note(pgm_read_byte(&(curr_song[note_ind])), curr_bpm);
    1862:	60 91 59 03 	lds	r22, 0x0359	; 0x800359 <curr_bpm>
    1866:	20 91 5a 03 	lds	r18, 0x035A	; 0x80035a <note_ind>
    186a:	e2 0f       	add	r30, r18
    186c:	f1 1d       	adc	r31, r1
    186e:	84 91       	lpm	r24, Z
    1870:	0c 94 9c 0b 	jmp	0x1738	; 0x1738 <music_play_note>

00001874 <__vector_11>:
	}
	// cycles needed = frequency / (bar time) / (note length divisor)
	curr_note_time = ((F_CPU/(OCR1A + 1))/(bpm/(240.0)))/GET_DURATION_DIV(note);
}

ISR(TIMER1_COMPA_vect){
    1874:	1f 92       	push	r1
    1876:	0f 92       	push	r0
    1878:	0f b6       	in	r0, 0x3f	; 63
    187a:	0f 92       	push	r0
    187c:	11 24       	eor	r1, r1
    187e:	2f 93       	push	r18
    1880:	3f 93       	push	r19
    1882:	4f 93       	push	r20
    1884:	5f 93       	push	r21
    1886:	6f 93       	push	r22
    1888:	7f 93       	push	r23
    188a:	8f 93       	push	r24
    188c:	9f 93       	push	r25
    188e:	af 93       	push	r26
    1890:	bf 93       	push	r27
    1892:	ef 93       	push	r30
    1894:	ff 93       	push	r31
	if(--curr_note_time == 0){
    1896:	80 91 5b 03 	lds	r24, 0x035B	; 0x80035b <curr_note_time>
    189a:	90 91 5c 03 	lds	r25, 0x035C	; 0x80035c <curr_note_time+0x1>
    189e:	01 97       	sbiw	r24, 0x01	; 1
    18a0:	90 93 5c 03 	sts	0x035C, r25	; 0x80035c <curr_note_time+0x1>
    18a4:	80 93 5b 03 	sts	0x035B, r24	; 0x80035b <curr_note_time>
    18a8:	89 2b       	or	r24, r25
    18aa:	01 f5       	brne	.+64     	; 0x18ec <__vector_11+0x78>
		uint8_t note;
		/*Read next note*/
		if(curr_song != NULL && (note = pgm_read_byte(&(curr_song[++note_ind]))) != 0){
    18ac:	e0 91 57 03 	lds	r30, 0x0357	; 0x800357 <curr_song>
    18b0:	f0 91 58 03 	lds	r31, 0x0358	; 0x800358 <curr_song+0x1>
    18b4:	30 97       	sbiw	r30, 0x00	; 0
    18b6:	79 f0       	breq	.+30     	; 0x18d6 <__vector_11+0x62>
    18b8:	80 91 5a 03 	lds	r24, 0x035A	; 0x80035a <note_ind>
    18bc:	8f 5f       	subi	r24, 0xFF	; 255
    18be:	80 93 5a 03 	sts	0x035A, r24	; 0x80035a <note_ind>
    18c2:	e8 0f       	add	r30, r24
    18c4:	f1 1d       	adc	r31, r1
    18c6:	84 91       	lpm	r24, Z
    18c8:	88 23       	and	r24, r24
    18ca:	29 f0       	breq	.+10     	; 0x18d6 <__vector_11+0x62>
			music_play_note(note, curr_bpm);
    18cc:	60 91 59 03 	lds	r22, 0x0359	; 0x800359 <curr_bpm>
    18d0:	0e 94 9c 0b 	call	0x1738	; 0x1738 <music_play_note>
    18d4:	0b c0       	rjmp	.+22     	; 0x18ec <__vector_11+0x78>
			} else{
			TIMSK1 = 0;
    18d6:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
			TCCR1B &= ~(1<<CS10);
    18da:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    18de:	8e 7f       	andi	r24, 0xFE	; 254
    18e0:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
			curr_song = NULL;
    18e4:	10 92 58 03 	sts	0x0358, r1	; 0x800358 <curr_song+0x1>
    18e8:	10 92 57 03 	sts	0x0357, r1	; 0x800357 <curr_song>
		}
	}
    18ec:	ff 91       	pop	r31
    18ee:	ef 91       	pop	r30
    18f0:	bf 91       	pop	r27
    18f2:	af 91       	pop	r26
    18f4:	9f 91       	pop	r25
    18f6:	8f 91       	pop	r24
    18f8:	7f 91       	pop	r23
    18fa:	6f 91       	pop	r22
    18fc:	5f 91       	pop	r21
    18fe:	4f 91       	pop	r20
    1900:	3f 91       	pop	r19
    1902:	2f 91       	pop	r18
    1904:	0f 90       	pop	r0
    1906:	0f be       	out	0x3f, r0	; 63
    1908:	0f 90       	pop	r0
    190a:	1f 90       	pop	r1
    190c:	18 95       	reti

0000190e <spi_init>:
/************************************************************************/
/* Initiates the MCU SPI as master with 16 as prescaler factor           */
/************************************************************************/
void spi_init(){
	// Set MOSI and SCK as out
	DDRB |= (1<<MOSI) | (1<<SCK) | (1<<SS);
    190e:	84 b1       	in	r24, 0x04	; 4
    1910:	8c 62       	ori	r24, 0x2C	; 44
    1912:	84 b9       	out	0x04, r24	; 4
	DDRB &= ~(1<<MISO);
    1914:	24 98       	cbi	0x04, 4	; 4
	//Enable SPI in master mode with fck/4 as clock
	SPCR = (1<<SPE) | (1<<MSTR);
    1916:	80 e5       	ldi	r24, 0x50	; 80
    1918:	8c bd       	out	0x2c, r24	; 44
    191a:	08 95       	ret

0000191c <__divsf3>:
    191c:	0e 94 a2 0c 	call	0x1944	; 0x1944 <__divsf3x>
    1920:	0c 94 83 0d 	jmp	0x1b06	; 0x1b06 <__fp_round>
    1924:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <__fp_pscB>
    1928:	58 f0       	brcs	.+22     	; 0x1940 <__divsf3+0x24>
    192a:	0e 94 75 0d 	call	0x1aea	; 0x1aea <__fp_pscA>
    192e:	40 f0       	brcs	.+16     	; 0x1940 <__divsf3+0x24>
    1930:	29 f4       	brne	.+10     	; 0x193c <__divsf3+0x20>
    1932:	5f 3f       	cpi	r21, 0xFF	; 255
    1934:	29 f0       	breq	.+10     	; 0x1940 <__divsf3+0x24>
    1936:	0c 94 6c 0d 	jmp	0x1ad8	; 0x1ad8 <__fp_inf>
    193a:	51 11       	cpse	r21, r1
    193c:	0c 94 b7 0d 	jmp	0x1b6e	; 0x1b6e <__fp_szero>
    1940:	0c 94 72 0d 	jmp	0x1ae4	; 0x1ae4 <__fp_nan>

00001944 <__divsf3x>:
    1944:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <__fp_split3>
    1948:	68 f3       	brcs	.-38     	; 0x1924 <__divsf3+0x8>

0000194a <__divsf3_pse>:
    194a:	99 23       	and	r25, r25
    194c:	b1 f3       	breq	.-20     	; 0x193a <__divsf3+0x1e>
    194e:	55 23       	and	r21, r21
    1950:	91 f3       	breq	.-28     	; 0x1936 <__divsf3+0x1a>
    1952:	95 1b       	sub	r25, r21
    1954:	55 0b       	sbc	r21, r21
    1956:	bb 27       	eor	r27, r27
    1958:	aa 27       	eor	r26, r26
    195a:	62 17       	cp	r22, r18
    195c:	73 07       	cpc	r23, r19
    195e:	84 07       	cpc	r24, r20
    1960:	38 f0       	brcs	.+14     	; 0x1970 <__divsf3_pse+0x26>
    1962:	9f 5f       	subi	r25, 0xFF	; 255
    1964:	5f 4f       	sbci	r21, 0xFF	; 255
    1966:	22 0f       	add	r18, r18
    1968:	33 1f       	adc	r19, r19
    196a:	44 1f       	adc	r20, r20
    196c:	aa 1f       	adc	r26, r26
    196e:	a9 f3       	breq	.-22     	; 0x195a <__divsf3_pse+0x10>
    1970:	35 d0       	rcall	.+106    	; 0x19dc <__divsf3_pse+0x92>
    1972:	0e 2e       	mov	r0, r30
    1974:	3a f0       	brmi	.+14     	; 0x1984 <__divsf3_pse+0x3a>
    1976:	e0 e8       	ldi	r30, 0x80	; 128
    1978:	32 d0       	rcall	.+100    	; 0x19de <__divsf3_pse+0x94>
    197a:	91 50       	subi	r25, 0x01	; 1
    197c:	50 40       	sbci	r21, 0x00	; 0
    197e:	e6 95       	lsr	r30
    1980:	00 1c       	adc	r0, r0
    1982:	ca f7       	brpl	.-14     	; 0x1976 <__divsf3_pse+0x2c>
    1984:	2b d0       	rcall	.+86     	; 0x19dc <__divsf3_pse+0x92>
    1986:	fe 2f       	mov	r31, r30
    1988:	29 d0       	rcall	.+82     	; 0x19dc <__divsf3_pse+0x92>
    198a:	66 0f       	add	r22, r22
    198c:	77 1f       	adc	r23, r23
    198e:	88 1f       	adc	r24, r24
    1990:	bb 1f       	adc	r27, r27
    1992:	26 17       	cp	r18, r22
    1994:	37 07       	cpc	r19, r23
    1996:	48 07       	cpc	r20, r24
    1998:	ab 07       	cpc	r26, r27
    199a:	b0 e8       	ldi	r27, 0x80	; 128
    199c:	09 f0       	breq	.+2      	; 0x19a0 <__divsf3_pse+0x56>
    199e:	bb 0b       	sbc	r27, r27
    19a0:	80 2d       	mov	r24, r0
    19a2:	bf 01       	movw	r22, r30
    19a4:	ff 27       	eor	r31, r31
    19a6:	93 58       	subi	r25, 0x83	; 131
    19a8:	5f 4f       	sbci	r21, 0xFF	; 255
    19aa:	3a f0       	brmi	.+14     	; 0x19ba <__divsf3_pse+0x70>
    19ac:	9e 3f       	cpi	r25, 0xFE	; 254
    19ae:	51 05       	cpc	r21, r1
    19b0:	78 f0       	brcs	.+30     	; 0x19d0 <__divsf3_pse+0x86>
    19b2:	0c 94 6c 0d 	jmp	0x1ad8	; 0x1ad8 <__fp_inf>
    19b6:	0c 94 b7 0d 	jmp	0x1b6e	; 0x1b6e <__fp_szero>
    19ba:	5f 3f       	cpi	r21, 0xFF	; 255
    19bc:	e4 f3       	brlt	.-8      	; 0x19b6 <__divsf3_pse+0x6c>
    19be:	98 3e       	cpi	r25, 0xE8	; 232
    19c0:	d4 f3       	brlt	.-12     	; 0x19b6 <__divsf3_pse+0x6c>
    19c2:	86 95       	lsr	r24
    19c4:	77 95       	ror	r23
    19c6:	67 95       	ror	r22
    19c8:	b7 95       	ror	r27
    19ca:	f7 95       	ror	r31
    19cc:	9f 5f       	subi	r25, 0xFF	; 255
    19ce:	c9 f7       	brne	.-14     	; 0x19c2 <__divsf3_pse+0x78>
    19d0:	88 0f       	add	r24, r24
    19d2:	91 1d       	adc	r25, r1
    19d4:	96 95       	lsr	r25
    19d6:	87 95       	ror	r24
    19d8:	97 f9       	bld	r25, 7
    19da:	08 95       	ret
    19dc:	e1 e0       	ldi	r30, 0x01	; 1
    19de:	66 0f       	add	r22, r22
    19e0:	77 1f       	adc	r23, r23
    19e2:	88 1f       	adc	r24, r24
    19e4:	bb 1f       	adc	r27, r27
    19e6:	62 17       	cp	r22, r18
    19e8:	73 07       	cpc	r23, r19
    19ea:	84 07       	cpc	r24, r20
    19ec:	ba 07       	cpc	r27, r26
    19ee:	20 f0       	brcs	.+8      	; 0x19f8 <__divsf3_pse+0xae>
    19f0:	62 1b       	sub	r22, r18
    19f2:	73 0b       	sbc	r23, r19
    19f4:	84 0b       	sbc	r24, r20
    19f6:	ba 0b       	sbc	r27, r26
    19f8:	ee 1f       	adc	r30, r30
    19fa:	88 f7       	brcc	.-30     	; 0x19de <__divsf3_pse+0x94>
    19fc:	e0 95       	com	r30
    19fe:	08 95       	ret

00001a00 <__fixunssfsi>:
    1a00:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <__fp_splitA>
    1a04:	88 f0       	brcs	.+34     	; 0x1a28 <__fixunssfsi+0x28>
    1a06:	9f 57       	subi	r25, 0x7F	; 127
    1a08:	98 f0       	brcs	.+38     	; 0x1a30 <__fixunssfsi+0x30>
    1a0a:	b9 2f       	mov	r27, r25
    1a0c:	99 27       	eor	r25, r25
    1a0e:	b7 51       	subi	r27, 0x17	; 23
    1a10:	b0 f0       	brcs	.+44     	; 0x1a3e <__fixunssfsi+0x3e>
    1a12:	e1 f0       	breq	.+56     	; 0x1a4c <__fixunssfsi+0x4c>
    1a14:	66 0f       	add	r22, r22
    1a16:	77 1f       	adc	r23, r23
    1a18:	88 1f       	adc	r24, r24
    1a1a:	99 1f       	adc	r25, r25
    1a1c:	1a f0       	brmi	.+6      	; 0x1a24 <__fixunssfsi+0x24>
    1a1e:	ba 95       	dec	r27
    1a20:	c9 f7       	brne	.-14     	; 0x1a14 <__fixunssfsi+0x14>
    1a22:	14 c0       	rjmp	.+40     	; 0x1a4c <__fixunssfsi+0x4c>
    1a24:	b1 30       	cpi	r27, 0x01	; 1
    1a26:	91 f0       	breq	.+36     	; 0x1a4c <__fixunssfsi+0x4c>
    1a28:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <__fp_zero>
    1a2c:	b1 e0       	ldi	r27, 0x01	; 1
    1a2e:	08 95       	ret
    1a30:	0c 94 b6 0d 	jmp	0x1b6c	; 0x1b6c <__fp_zero>
    1a34:	67 2f       	mov	r22, r23
    1a36:	78 2f       	mov	r23, r24
    1a38:	88 27       	eor	r24, r24
    1a3a:	b8 5f       	subi	r27, 0xF8	; 248
    1a3c:	39 f0       	breq	.+14     	; 0x1a4c <__fixunssfsi+0x4c>
    1a3e:	b9 3f       	cpi	r27, 0xF9	; 249
    1a40:	cc f3       	brlt	.-14     	; 0x1a34 <__fixunssfsi+0x34>
    1a42:	86 95       	lsr	r24
    1a44:	77 95       	ror	r23
    1a46:	67 95       	ror	r22
    1a48:	b3 95       	inc	r27
    1a4a:	d9 f7       	brne	.-10     	; 0x1a42 <__fixunssfsi+0x42>
    1a4c:	3e f4       	brtc	.+14     	; 0x1a5c <__fixunssfsi+0x5c>
    1a4e:	90 95       	com	r25
    1a50:	80 95       	com	r24
    1a52:	70 95       	com	r23
    1a54:	61 95       	neg	r22
    1a56:	7f 4f       	sbci	r23, 0xFF	; 255
    1a58:	8f 4f       	sbci	r24, 0xFF	; 255
    1a5a:	9f 4f       	sbci	r25, 0xFF	; 255
    1a5c:	08 95       	ret

00001a5e <__floatunsisf>:
    1a5e:	e8 94       	clt
    1a60:	09 c0       	rjmp	.+18     	; 0x1a74 <__floatsisf+0x12>

00001a62 <__floatsisf>:
    1a62:	97 fb       	bst	r25, 7
    1a64:	3e f4       	brtc	.+14     	; 0x1a74 <__floatsisf+0x12>
    1a66:	90 95       	com	r25
    1a68:	80 95       	com	r24
    1a6a:	70 95       	com	r23
    1a6c:	61 95       	neg	r22
    1a6e:	7f 4f       	sbci	r23, 0xFF	; 255
    1a70:	8f 4f       	sbci	r24, 0xFF	; 255
    1a72:	9f 4f       	sbci	r25, 0xFF	; 255
    1a74:	99 23       	and	r25, r25
    1a76:	a9 f0       	breq	.+42     	; 0x1aa2 <__floatsisf+0x40>
    1a78:	f9 2f       	mov	r31, r25
    1a7a:	96 e9       	ldi	r25, 0x96	; 150
    1a7c:	bb 27       	eor	r27, r27
    1a7e:	93 95       	inc	r25
    1a80:	f6 95       	lsr	r31
    1a82:	87 95       	ror	r24
    1a84:	77 95       	ror	r23
    1a86:	67 95       	ror	r22
    1a88:	b7 95       	ror	r27
    1a8a:	f1 11       	cpse	r31, r1
    1a8c:	f8 cf       	rjmp	.-16     	; 0x1a7e <__floatsisf+0x1c>
    1a8e:	fa f4       	brpl	.+62     	; 0x1ace <__floatsisf+0x6c>
    1a90:	bb 0f       	add	r27, r27
    1a92:	11 f4       	brne	.+4      	; 0x1a98 <__floatsisf+0x36>
    1a94:	60 ff       	sbrs	r22, 0
    1a96:	1b c0       	rjmp	.+54     	; 0x1ace <__floatsisf+0x6c>
    1a98:	6f 5f       	subi	r22, 0xFF	; 255
    1a9a:	7f 4f       	sbci	r23, 0xFF	; 255
    1a9c:	8f 4f       	sbci	r24, 0xFF	; 255
    1a9e:	9f 4f       	sbci	r25, 0xFF	; 255
    1aa0:	16 c0       	rjmp	.+44     	; 0x1ace <__floatsisf+0x6c>
    1aa2:	88 23       	and	r24, r24
    1aa4:	11 f0       	breq	.+4      	; 0x1aaa <__floatsisf+0x48>
    1aa6:	96 e9       	ldi	r25, 0x96	; 150
    1aa8:	11 c0       	rjmp	.+34     	; 0x1acc <__floatsisf+0x6a>
    1aaa:	77 23       	and	r23, r23
    1aac:	21 f0       	breq	.+8      	; 0x1ab6 <__floatsisf+0x54>
    1aae:	9e e8       	ldi	r25, 0x8E	; 142
    1ab0:	87 2f       	mov	r24, r23
    1ab2:	76 2f       	mov	r23, r22
    1ab4:	05 c0       	rjmp	.+10     	; 0x1ac0 <__floatsisf+0x5e>
    1ab6:	66 23       	and	r22, r22
    1ab8:	71 f0       	breq	.+28     	; 0x1ad6 <__floatsisf+0x74>
    1aba:	96 e8       	ldi	r25, 0x86	; 134
    1abc:	86 2f       	mov	r24, r22
    1abe:	70 e0       	ldi	r23, 0x00	; 0
    1ac0:	60 e0       	ldi	r22, 0x00	; 0
    1ac2:	2a f0       	brmi	.+10     	; 0x1ace <__floatsisf+0x6c>
    1ac4:	9a 95       	dec	r25
    1ac6:	66 0f       	add	r22, r22
    1ac8:	77 1f       	adc	r23, r23
    1aca:	88 1f       	adc	r24, r24
    1acc:	da f7       	brpl	.-10     	; 0x1ac4 <__floatsisf+0x62>
    1ace:	88 0f       	add	r24, r24
    1ad0:	96 95       	lsr	r25
    1ad2:	87 95       	ror	r24
    1ad4:	97 f9       	bld	r25, 7
    1ad6:	08 95       	ret

00001ad8 <__fp_inf>:
    1ad8:	97 f9       	bld	r25, 7
    1ada:	9f 67       	ori	r25, 0x7F	; 127
    1adc:	80 e8       	ldi	r24, 0x80	; 128
    1ade:	70 e0       	ldi	r23, 0x00	; 0
    1ae0:	60 e0       	ldi	r22, 0x00	; 0
    1ae2:	08 95       	ret

00001ae4 <__fp_nan>:
    1ae4:	9f ef       	ldi	r25, 0xFF	; 255
    1ae6:	80 ec       	ldi	r24, 0xC0	; 192
    1ae8:	08 95       	ret

00001aea <__fp_pscA>:
    1aea:	00 24       	eor	r0, r0
    1aec:	0a 94       	dec	r0
    1aee:	16 16       	cp	r1, r22
    1af0:	17 06       	cpc	r1, r23
    1af2:	18 06       	cpc	r1, r24
    1af4:	09 06       	cpc	r0, r25
    1af6:	08 95       	ret

00001af8 <__fp_pscB>:
    1af8:	00 24       	eor	r0, r0
    1afa:	0a 94       	dec	r0
    1afc:	12 16       	cp	r1, r18
    1afe:	13 06       	cpc	r1, r19
    1b00:	14 06       	cpc	r1, r20
    1b02:	05 06       	cpc	r0, r21
    1b04:	08 95       	ret

00001b06 <__fp_round>:
    1b06:	09 2e       	mov	r0, r25
    1b08:	03 94       	inc	r0
    1b0a:	00 0c       	add	r0, r0
    1b0c:	11 f4       	brne	.+4      	; 0x1b12 <__fp_round+0xc>
    1b0e:	88 23       	and	r24, r24
    1b10:	52 f0       	brmi	.+20     	; 0x1b26 <__fp_round+0x20>
    1b12:	bb 0f       	add	r27, r27
    1b14:	40 f4       	brcc	.+16     	; 0x1b26 <__fp_round+0x20>
    1b16:	bf 2b       	or	r27, r31
    1b18:	11 f4       	brne	.+4      	; 0x1b1e <__fp_round+0x18>
    1b1a:	60 ff       	sbrs	r22, 0
    1b1c:	04 c0       	rjmp	.+8      	; 0x1b26 <__fp_round+0x20>
    1b1e:	6f 5f       	subi	r22, 0xFF	; 255
    1b20:	7f 4f       	sbci	r23, 0xFF	; 255
    1b22:	8f 4f       	sbci	r24, 0xFF	; 255
    1b24:	9f 4f       	sbci	r25, 0xFF	; 255
    1b26:	08 95       	ret

00001b28 <__fp_split3>:
    1b28:	57 fd       	sbrc	r21, 7
    1b2a:	90 58       	subi	r25, 0x80	; 128
    1b2c:	44 0f       	add	r20, r20
    1b2e:	55 1f       	adc	r21, r21
    1b30:	59 f0       	breq	.+22     	; 0x1b48 <__fp_splitA+0x10>
    1b32:	5f 3f       	cpi	r21, 0xFF	; 255
    1b34:	71 f0       	breq	.+28     	; 0x1b52 <__fp_splitA+0x1a>
    1b36:	47 95       	ror	r20

00001b38 <__fp_splitA>:
    1b38:	88 0f       	add	r24, r24
    1b3a:	97 fb       	bst	r25, 7
    1b3c:	99 1f       	adc	r25, r25
    1b3e:	61 f0       	breq	.+24     	; 0x1b58 <__fp_splitA+0x20>
    1b40:	9f 3f       	cpi	r25, 0xFF	; 255
    1b42:	79 f0       	breq	.+30     	; 0x1b62 <__fp_splitA+0x2a>
    1b44:	87 95       	ror	r24
    1b46:	08 95       	ret
    1b48:	12 16       	cp	r1, r18
    1b4a:	13 06       	cpc	r1, r19
    1b4c:	14 06       	cpc	r1, r20
    1b4e:	55 1f       	adc	r21, r21
    1b50:	f2 cf       	rjmp	.-28     	; 0x1b36 <__fp_split3+0xe>
    1b52:	46 95       	lsr	r20
    1b54:	f1 df       	rcall	.-30     	; 0x1b38 <__fp_splitA>
    1b56:	08 c0       	rjmp	.+16     	; 0x1b68 <__fp_splitA+0x30>
    1b58:	16 16       	cp	r1, r22
    1b5a:	17 06       	cpc	r1, r23
    1b5c:	18 06       	cpc	r1, r24
    1b5e:	99 1f       	adc	r25, r25
    1b60:	f1 cf       	rjmp	.-30     	; 0x1b44 <__fp_splitA+0xc>
    1b62:	86 95       	lsr	r24
    1b64:	71 05       	cpc	r23, r1
    1b66:	61 05       	cpc	r22, r1
    1b68:	08 94       	sec
    1b6a:	08 95       	ret

00001b6c <__fp_zero>:
    1b6c:	e8 94       	clt

00001b6e <__fp_szero>:
    1b6e:	bb 27       	eor	r27, r27
    1b70:	66 27       	eor	r22, r22
    1b72:	77 27       	eor	r23, r23
    1b74:	cb 01       	movw	r24, r22
    1b76:	97 f9       	bld	r25, 7
    1b78:	08 95       	ret

00001b7a <pow>:
    1b7a:	fa 01       	movw	r30, r20
    1b7c:	ee 0f       	add	r30, r30
    1b7e:	ff 1f       	adc	r31, r31
    1b80:	30 96       	adiw	r30, 0x00	; 0
    1b82:	21 05       	cpc	r18, r1
    1b84:	31 05       	cpc	r19, r1
    1b86:	a1 f1       	breq	.+104    	; 0x1bf0 <pow+0x76>
    1b88:	61 15       	cp	r22, r1
    1b8a:	71 05       	cpc	r23, r1
    1b8c:	61 f4       	brne	.+24     	; 0x1ba6 <pow+0x2c>
    1b8e:	80 38       	cpi	r24, 0x80	; 128
    1b90:	bf e3       	ldi	r27, 0x3F	; 63
    1b92:	9b 07       	cpc	r25, r27
    1b94:	49 f1       	breq	.+82     	; 0x1be8 <pow+0x6e>
    1b96:	68 94       	set
    1b98:	90 38       	cpi	r25, 0x80	; 128
    1b9a:	81 05       	cpc	r24, r1
    1b9c:	61 f0       	breq	.+24     	; 0x1bb6 <pow+0x3c>
    1b9e:	80 38       	cpi	r24, 0x80	; 128
    1ba0:	bf ef       	ldi	r27, 0xFF	; 255
    1ba2:	9b 07       	cpc	r25, r27
    1ba4:	41 f0       	breq	.+16     	; 0x1bb6 <pow+0x3c>
    1ba6:	99 23       	and	r25, r25
    1ba8:	4a f5       	brpl	.+82     	; 0x1bfc <pow+0x82>
    1baa:	ff 3f       	cpi	r31, 0xFF	; 255
    1bac:	e1 05       	cpc	r30, r1
    1bae:	31 05       	cpc	r19, r1
    1bb0:	21 05       	cpc	r18, r1
    1bb2:	19 f1       	breq	.+70     	; 0x1bfa <pow+0x80>
    1bb4:	e8 94       	clt
    1bb6:	08 94       	sec
    1bb8:	e7 95       	ror	r30
    1bba:	d9 01       	movw	r26, r18
    1bbc:	aa 23       	and	r26, r26
    1bbe:	29 f4       	brne	.+10     	; 0x1bca <pow+0x50>
    1bc0:	ab 2f       	mov	r26, r27
    1bc2:	be 2f       	mov	r27, r30
    1bc4:	f8 5f       	subi	r31, 0xF8	; 248
    1bc6:	d0 f3       	brcs	.-12     	; 0x1bbc <pow+0x42>
    1bc8:	10 c0       	rjmp	.+32     	; 0x1bea <pow+0x70>
    1bca:	ff 5f       	subi	r31, 0xFF	; 255
    1bcc:	70 f4       	brcc	.+28     	; 0x1bea <pow+0x70>
    1bce:	a6 95       	lsr	r26
    1bd0:	e0 f7       	brcc	.-8      	; 0x1bca <pow+0x50>
    1bd2:	f7 39       	cpi	r31, 0x97	; 151
    1bd4:	50 f0       	brcs	.+20     	; 0x1bea <pow+0x70>
    1bd6:	19 f0       	breq	.+6      	; 0x1bde <pow+0x64>
    1bd8:	ff 3a       	cpi	r31, 0xAF	; 175
    1bda:	38 f4       	brcc	.+14     	; 0x1bea <pow+0x70>
    1bdc:	9f 77       	andi	r25, 0x7F	; 127
    1bde:	9f 93       	push	r25
    1be0:	0d d0       	rcall	.+26     	; 0x1bfc <pow+0x82>
    1be2:	0f 90       	pop	r0
    1be4:	07 fc       	sbrc	r0, 7
    1be6:	90 58       	subi	r25, 0x80	; 128
    1be8:	08 95       	ret
    1bea:	46 f0       	brts	.+16     	; 0x1bfc <pow+0x82>
    1bec:	0c 94 72 0d 	jmp	0x1ae4	; 0x1ae4 <__fp_nan>
    1bf0:	60 e0       	ldi	r22, 0x00	; 0
    1bf2:	70 e0       	ldi	r23, 0x00	; 0
    1bf4:	80 e8       	ldi	r24, 0x80	; 128
    1bf6:	9f e3       	ldi	r25, 0x3F	; 63
    1bf8:	08 95       	ret
    1bfa:	4f e7       	ldi	r20, 0x7F	; 127
    1bfc:	9f 77       	andi	r25, 0x7F	; 127
    1bfe:	5f 93       	push	r21
    1c00:	4f 93       	push	r20
    1c02:	3f 93       	push	r19
    1c04:	2f 93       	push	r18
    1c06:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <log>
    1c0a:	2f 91       	pop	r18
    1c0c:	3f 91       	pop	r19
    1c0e:	4f 91       	pop	r20
    1c10:	5f 91       	pop	r21
    1c12:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <__mulsf3>
    1c16:	0c 94 15 0e 	jmp	0x1c2a	; 0x1c2a <exp>
    1c1a:	29 f4       	brne	.+10     	; 0x1c26 <pow+0xac>
    1c1c:	16 f0       	brts	.+4      	; 0x1c22 <pow+0xa8>
    1c1e:	0c 94 6c 0d 	jmp	0x1ad8	; 0x1ad8 <__fp_inf>
    1c22:	0c 94 b6 0d 	jmp	0x1b6c	; 0x1b6c <__fp_zero>
    1c26:	0c 94 72 0d 	jmp	0x1ae4	; 0x1ae4 <__fp_nan>

00001c2a <exp>:
    1c2a:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <__fp_splitA>
    1c2e:	a8 f3       	brcs	.-22     	; 0x1c1a <pow+0xa0>
    1c30:	96 38       	cpi	r25, 0x86	; 134
    1c32:	a0 f7       	brcc	.-24     	; 0x1c1c <pow+0xa2>
    1c34:	07 f8       	bld	r0, 7
    1c36:	0f 92       	push	r0
    1c38:	e8 94       	clt
    1c3a:	2b e3       	ldi	r18, 0x3B	; 59
    1c3c:	3a ea       	ldi	r19, 0xAA	; 170
    1c3e:	48 eb       	ldi	r20, 0xB8	; 184
    1c40:	5f e7       	ldi	r21, 0x7F	; 127
    1c42:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <__mulsf3_pse>
    1c46:	0f 92       	push	r0
    1c48:	0f 92       	push	r0
    1c4a:	0f 92       	push	r0
    1c4c:	4d b7       	in	r20, 0x3d	; 61
    1c4e:	5e b7       	in	r21, 0x3e	; 62
    1c50:	0f 92       	push	r0
    1c52:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <modf>
    1c56:	e8 e6       	ldi	r30, 0x68	; 104
    1c58:	f0 e0       	ldi	r31, 0x00	; 0
    1c5a:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <__fp_powser>
    1c5e:	4f 91       	pop	r20
    1c60:	5f 91       	pop	r21
    1c62:	ef 91       	pop	r30
    1c64:	ff 91       	pop	r31
    1c66:	e5 95       	asr	r30
    1c68:	ee 1f       	adc	r30, r30
    1c6a:	ff 1f       	adc	r31, r31
    1c6c:	49 f0       	breq	.+18     	; 0x1c80 <exp+0x56>
    1c6e:	fe 57       	subi	r31, 0x7E	; 126
    1c70:	e0 68       	ori	r30, 0x80	; 128
    1c72:	44 27       	eor	r20, r20
    1c74:	ee 0f       	add	r30, r30
    1c76:	44 1f       	adc	r20, r20
    1c78:	fa 95       	dec	r31
    1c7a:	e1 f7       	brne	.-8      	; 0x1c74 <exp+0x4a>
    1c7c:	41 95       	neg	r20
    1c7e:	55 0b       	sbc	r21, r21
    1c80:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <ldexp>
    1c84:	0f 90       	pop	r0
    1c86:	07 fe       	sbrs	r0, 7
    1c88:	0c 94 6e 0e 	jmp	0x1cdc	; 0x1cdc <inverse>
    1c8c:	08 95       	ret

00001c8e <__fp_powser>:
    1c8e:	df 93       	push	r29
    1c90:	cf 93       	push	r28
    1c92:	1f 93       	push	r17
    1c94:	0f 93       	push	r16
    1c96:	ff 92       	push	r15
    1c98:	ef 92       	push	r14
    1c9a:	df 92       	push	r13
    1c9c:	7b 01       	movw	r14, r22
    1c9e:	8c 01       	movw	r16, r24
    1ca0:	68 94       	set
    1ca2:	06 c0       	rjmp	.+12     	; 0x1cb0 <__fp_powser+0x22>
    1ca4:	da 2e       	mov	r13, r26
    1ca6:	ef 01       	movw	r28, r30
    1ca8:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <__mulsf3x>
    1cac:	fe 01       	movw	r30, r28
    1cae:	e8 94       	clt
    1cb0:	a5 91       	lpm	r26, Z+
    1cb2:	25 91       	lpm	r18, Z+
    1cb4:	35 91       	lpm	r19, Z+
    1cb6:	45 91       	lpm	r20, Z+
    1cb8:	55 91       	lpm	r21, Z+
    1cba:	a6 f3       	brts	.-24     	; 0x1ca4 <__fp_powser+0x16>
    1cbc:	ef 01       	movw	r28, r30
    1cbe:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <__addsf3x>
    1cc2:	fe 01       	movw	r30, r28
    1cc4:	97 01       	movw	r18, r14
    1cc6:	a8 01       	movw	r20, r16
    1cc8:	da 94       	dec	r13
    1cca:	69 f7       	brne	.-38     	; 0x1ca6 <__fp_powser+0x18>
    1ccc:	df 90       	pop	r13
    1cce:	ef 90       	pop	r14
    1cd0:	ff 90       	pop	r15
    1cd2:	0f 91       	pop	r16
    1cd4:	1f 91       	pop	r17
    1cd6:	cf 91       	pop	r28
    1cd8:	df 91       	pop	r29
    1cda:	08 95       	ret

00001cdc <inverse>:
    1cdc:	9b 01       	movw	r18, r22
    1cde:	ac 01       	movw	r20, r24
    1ce0:	60 e0       	ldi	r22, 0x00	; 0
    1ce2:	70 e0       	ldi	r23, 0x00	; 0
    1ce4:	80 e8       	ldi	r24, 0x80	; 128
    1ce6:	9f e3       	ldi	r25, 0x3F	; 63
    1ce8:	0c 94 8e 0c 	jmp	0x191c	; 0x191c <__divsf3>
    1cec:	0c 94 6c 0d 	jmp	0x1ad8	; 0x1ad8 <__fp_inf>
    1cf0:	0c 94 0e 10 	jmp	0x201c	; 0x201c <__fp_mpack>

00001cf4 <ldexp>:
    1cf4:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <__fp_splitA>
    1cf8:	d8 f3       	brcs	.-10     	; 0x1cf0 <inverse+0x14>
    1cfa:	99 23       	and	r25, r25
    1cfc:	c9 f3       	breq	.-14     	; 0x1cf0 <inverse+0x14>
    1cfe:	94 0f       	add	r25, r20
    1d00:	51 1d       	adc	r21, r1
    1d02:	a3 f3       	brvs	.-24     	; 0x1cec <inverse+0x10>
    1d04:	91 50       	subi	r25, 0x01	; 1
    1d06:	50 40       	sbci	r21, 0x00	; 0
    1d08:	94 f0       	brlt	.+36     	; 0x1d2e <ldexp+0x3a>
    1d0a:	59 f0       	breq	.+22     	; 0x1d22 <ldexp+0x2e>
    1d0c:	88 23       	and	r24, r24
    1d0e:	32 f0       	brmi	.+12     	; 0x1d1c <ldexp+0x28>
    1d10:	66 0f       	add	r22, r22
    1d12:	77 1f       	adc	r23, r23
    1d14:	88 1f       	adc	r24, r24
    1d16:	91 50       	subi	r25, 0x01	; 1
    1d18:	50 40       	sbci	r21, 0x00	; 0
    1d1a:	c1 f7       	brne	.-16     	; 0x1d0c <ldexp+0x18>
    1d1c:	9e 3f       	cpi	r25, 0xFE	; 254
    1d1e:	51 05       	cpc	r21, r1
    1d20:	2c f7       	brge	.-54     	; 0x1cec <inverse+0x10>
    1d22:	88 0f       	add	r24, r24
    1d24:	91 1d       	adc	r25, r1
    1d26:	96 95       	lsr	r25
    1d28:	87 95       	ror	r24
    1d2a:	97 f9       	bld	r25, 7
    1d2c:	08 95       	ret
    1d2e:	5f 3f       	cpi	r21, 0xFF	; 255
    1d30:	ac f0       	brlt	.+42     	; 0x1d5c <ldexp+0x68>
    1d32:	98 3e       	cpi	r25, 0xE8	; 232
    1d34:	9c f0       	brlt	.+38     	; 0x1d5c <ldexp+0x68>
    1d36:	bb 27       	eor	r27, r27
    1d38:	86 95       	lsr	r24
    1d3a:	77 95       	ror	r23
    1d3c:	67 95       	ror	r22
    1d3e:	b7 95       	ror	r27
    1d40:	08 f4       	brcc	.+2      	; 0x1d44 <ldexp+0x50>
    1d42:	b1 60       	ori	r27, 0x01	; 1
    1d44:	93 95       	inc	r25
    1d46:	c1 f7       	brne	.-16     	; 0x1d38 <ldexp+0x44>
    1d48:	bb 0f       	add	r27, r27
    1d4a:	58 f7       	brcc	.-42     	; 0x1d22 <ldexp+0x2e>
    1d4c:	11 f4       	brne	.+4      	; 0x1d52 <ldexp+0x5e>
    1d4e:	60 ff       	sbrs	r22, 0
    1d50:	e8 cf       	rjmp	.-48     	; 0x1d22 <ldexp+0x2e>
    1d52:	6f 5f       	subi	r22, 0xFF	; 255
    1d54:	7f 4f       	sbci	r23, 0xFF	; 255
    1d56:	8f 4f       	sbci	r24, 0xFF	; 255
    1d58:	9f 4f       	sbci	r25, 0xFF	; 255
    1d5a:	e3 cf       	rjmp	.-58     	; 0x1d22 <ldexp+0x2e>
    1d5c:	0c 94 b7 0d 	jmp	0x1b6e	; 0x1b6e <__fp_szero>
    1d60:	16 f0       	brts	.+4      	; 0x1d66 <ldexp+0x72>
    1d62:	0c 94 0e 10 	jmp	0x201c	; 0x201c <__fp_mpack>
    1d66:	0c 94 72 0d 	jmp	0x1ae4	; 0x1ae4 <__fp_nan>
    1d6a:	68 94       	set
    1d6c:	0c 94 6c 0d 	jmp	0x1ad8	; 0x1ad8 <__fp_inf>

00001d70 <log>:
    1d70:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <__fp_splitA>
    1d74:	a8 f3       	brcs	.-22     	; 0x1d60 <ldexp+0x6c>
    1d76:	99 23       	and	r25, r25
    1d78:	c1 f3       	breq	.-16     	; 0x1d6a <ldexp+0x76>
    1d7a:	ae f3       	brts	.-22     	; 0x1d66 <ldexp+0x72>
    1d7c:	df 93       	push	r29
    1d7e:	cf 93       	push	r28
    1d80:	1f 93       	push	r17
    1d82:	0f 93       	push	r16
    1d84:	ff 92       	push	r15
    1d86:	c9 2f       	mov	r28, r25
    1d88:	dd 27       	eor	r29, r29
    1d8a:	88 23       	and	r24, r24
    1d8c:	2a f0       	brmi	.+10     	; 0x1d98 <log+0x28>
    1d8e:	21 97       	sbiw	r28, 0x01	; 1
    1d90:	66 0f       	add	r22, r22
    1d92:	77 1f       	adc	r23, r23
    1d94:	88 1f       	adc	r24, r24
    1d96:	da f7       	brpl	.-10     	; 0x1d8e <log+0x1e>
    1d98:	20 e0       	ldi	r18, 0x00	; 0
    1d9a:	30 e0       	ldi	r19, 0x00	; 0
    1d9c:	40 e8       	ldi	r20, 0x80	; 128
    1d9e:	5f eb       	ldi	r21, 0xBF	; 191
    1da0:	9f e3       	ldi	r25, 0x3F	; 63
    1da2:	88 39       	cpi	r24, 0x98	; 152
    1da4:	20 f0       	brcs	.+8      	; 0x1dae <log+0x3e>
    1da6:	80 3e       	cpi	r24, 0xE0	; 224
    1da8:	38 f0       	brcs	.+14     	; 0x1db8 <log+0x48>
    1daa:	21 96       	adiw	r28, 0x01	; 1
    1dac:	8f 77       	andi	r24, 0x7F	; 127
    1dae:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <__addsf3>
    1db2:	e0 e9       	ldi	r30, 0x90	; 144
    1db4:	f0 e0       	ldi	r31, 0x00	; 0
    1db6:	04 c0       	rjmp	.+8      	; 0x1dc0 <log+0x50>
    1db8:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <__addsf3>
    1dbc:	ed eb       	ldi	r30, 0xBD	; 189
    1dbe:	f0 e0       	ldi	r31, 0x00	; 0
    1dc0:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <__fp_powser>
    1dc4:	8b 01       	movw	r16, r22
    1dc6:	be 01       	movw	r22, r28
    1dc8:	ec 01       	movw	r28, r24
    1dca:	fb 2e       	mov	r15, r27
    1dcc:	6f 57       	subi	r22, 0x7F	; 127
    1dce:	71 09       	sbc	r23, r1
    1dd0:	75 95       	asr	r23
    1dd2:	77 1f       	adc	r23, r23
    1dd4:	88 0b       	sbc	r24, r24
    1dd6:	99 0b       	sbc	r25, r25
    1dd8:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <__floatsisf>
    1ddc:	28 e1       	ldi	r18, 0x18	; 24
    1dde:	32 e7       	ldi	r19, 0x72	; 114
    1de0:	41 e3       	ldi	r20, 0x31	; 49
    1de2:	5f e3       	ldi	r21, 0x3F	; 63
    1de4:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <__mulsf3x>
    1de8:	af 2d       	mov	r26, r15
    1dea:	98 01       	movw	r18, r16
    1dec:	ae 01       	movw	r20, r28
    1dee:	ff 90       	pop	r15
    1df0:	0f 91       	pop	r16
    1df2:	1f 91       	pop	r17
    1df4:	cf 91       	pop	r28
    1df6:	df 91       	pop	r29
    1df8:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <__addsf3x>
    1dfc:	0c 94 83 0d 	jmp	0x1b06	; 0x1b06 <__fp_round>

00001e00 <modf>:
    1e00:	fa 01       	movw	r30, r20
    1e02:	dc 01       	movw	r26, r24
    1e04:	aa 0f       	add	r26, r26
    1e06:	bb 1f       	adc	r27, r27
    1e08:	9b 01       	movw	r18, r22
    1e0a:	ac 01       	movw	r20, r24
    1e0c:	bf 57       	subi	r27, 0x7F	; 127
    1e0e:	28 f4       	brcc	.+10     	; 0x1e1a <modf+0x1a>
    1e10:	22 27       	eor	r18, r18
    1e12:	33 27       	eor	r19, r19
    1e14:	44 27       	eor	r20, r20
    1e16:	50 78       	andi	r21, 0x80	; 128
    1e18:	20 c0       	rjmp	.+64     	; 0x1e5a <modf+0x5a>
    1e1a:	b7 51       	subi	r27, 0x17	; 23
    1e1c:	90 f4       	brcc	.+36     	; 0x1e42 <modf+0x42>
    1e1e:	ab 2f       	mov	r26, r27
    1e20:	00 24       	eor	r0, r0
    1e22:	46 95       	lsr	r20
    1e24:	37 95       	ror	r19
    1e26:	27 95       	ror	r18
    1e28:	01 1c       	adc	r0, r1
    1e2a:	a3 95       	inc	r26
    1e2c:	d2 f3       	brmi	.-12     	; 0x1e22 <modf+0x22>
    1e2e:	00 20       	and	r0, r0
    1e30:	71 f0       	breq	.+28     	; 0x1e4e <modf+0x4e>
    1e32:	22 0f       	add	r18, r18
    1e34:	33 1f       	adc	r19, r19
    1e36:	44 1f       	adc	r20, r20
    1e38:	b3 95       	inc	r27
    1e3a:	da f3       	brmi	.-10     	; 0x1e32 <modf+0x32>
    1e3c:	0e d0       	rcall	.+28     	; 0x1e5a <modf+0x5a>
    1e3e:	0c 94 a1 0f 	jmp	0x1f42	; 0x1f42 <__subsf3>
    1e42:	61 30       	cpi	r22, 0x01	; 1
    1e44:	71 05       	cpc	r23, r1
    1e46:	a0 e8       	ldi	r26, 0x80	; 128
    1e48:	8a 07       	cpc	r24, r26
    1e4a:	b9 46       	sbci	r27, 0x69	; 105
    1e4c:	30 f4       	brcc	.+12     	; 0x1e5a <modf+0x5a>
    1e4e:	9b 01       	movw	r18, r22
    1e50:	ac 01       	movw	r20, r24
    1e52:	66 27       	eor	r22, r22
    1e54:	77 27       	eor	r23, r23
    1e56:	88 27       	eor	r24, r24
    1e58:	90 78       	andi	r25, 0x80	; 128
    1e5a:	30 96       	adiw	r30, 0x00	; 0
    1e5c:	21 f0       	breq	.+8      	; 0x1e66 <modf+0x66>
    1e5e:	20 83       	st	Z, r18
    1e60:	31 83       	std	Z+1, r19	; 0x01
    1e62:	42 83       	std	Z+2, r20	; 0x02
    1e64:	53 83       	std	Z+3, r21	; 0x03
    1e66:	08 95       	ret

00001e68 <__mulsf3>:
    1e68:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <__mulsf3x>
    1e6c:	0c 94 83 0d 	jmp	0x1b06	; 0x1b06 <__fp_round>
    1e70:	0e 94 75 0d 	call	0x1aea	; 0x1aea <__fp_pscA>
    1e74:	38 f0       	brcs	.+14     	; 0x1e84 <__mulsf3+0x1c>
    1e76:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <__fp_pscB>
    1e7a:	20 f0       	brcs	.+8      	; 0x1e84 <__mulsf3+0x1c>
    1e7c:	95 23       	and	r25, r21
    1e7e:	11 f0       	breq	.+4      	; 0x1e84 <__mulsf3+0x1c>
    1e80:	0c 94 6c 0d 	jmp	0x1ad8	; 0x1ad8 <__fp_inf>
    1e84:	0c 94 72 0d 	jmp	0x1ae4	; 0x1ae4 <__fp_nan>
    1e88:	11 24       	eor	r1, r1
    1e8a:	0c 94 b7 0d 	jmp	0x1b6e	; 0x1b6e <__fp_szero>

00001e8e <__mulsf3x>:
    1e8e:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <__fp_split3>
    1e92:	70 f3       	brcs	.-36     	; 0x1e70 <__mulsf3+0x8>

00001e94 <__mulsf3_pse>:
    1e94:	95 9f       	mul	r25, r21
    1e96:	c1 f3       	breq	.-16     	; 0x1e88 <__mulsf3+0x20>
    1e98:	95 0f       	add	r25, r21
    1e9a:	50 e0       	ldi	r21, 0x00	; 0
    1e9c:	55 1f       	adc	r21, r21
    1e9e:	62 9f       	mul	r22, r18
    1ea0:	f0 01       	movw	r30, r0
    1ea2:	72 9f       	mul	r23, r18
    1ea4:	bb 27       	eor	r27, r27
    1ea6:	f0 0d       	add	r31, r0
    1ea8:	b1 1d       	adc	r27, r1
    1eaa:	63 9f       	mul	r22, r19
    1eac:	aa 27       	eor	r26, r26
    1eae:	f0 0d       	add	r31, r0
    1eb0:	b1 1d       	adc	r27, r1
    1eb2:	aa 1f       	adc	r26, r26
    1eb4:	64 9f       	mul	r22, r20
    1eb6:	66 27       	eor	r22, r22
    1eb8:	b0 0d       	add	r27, r0
    1eba:	a1 1d       	adc	r26, r1
    1ebc:	66 1f       	adc	r22, r22
    1ebe:	82 9f       	mul	r24, r18
    1ec0:	22 27       	eor	r18, r18
    1ec2:	b0 0d       	add	r27, r0
    1ec4:	a1 1d       	adc	r26, r1
    1ec6:	62 1f       	adc	r22, r18
    1ec8:	73 9f       	mul	r23, r19
    1eca:	b0 0d       	add	r27, r0
    1ecc:	a1 1d       	adc	r26, r1
    1ece:	62 1f       	adc	r22, r18
    1ed0:	83 9f       	mul	r24, r19
    1ed2:	a0 0d       	add	r26, r0
    1ed4:	61 1d       	adc	r22, r1
    1ed6:	22 1f       	adc	r18, r18
    1ed8:	74 9f       	mul	r23, r20
    1eda:	33 27       	eor	r19, r19
    1edc:	a0 0d       	add	r26, r0
    1ede:	61 1d       	adc	r22, r1
    1ee0:	23 1f       	adc	r18, r19
    1ee2:	84 9f       	mul	r24, r20
    1ee4:	60 0d       	add	r22, r0
    1ee6:	21 1d       	adc	r18, r1
    1ee8:	82 2f       	mov	r24, r18
    1eea:	76 2f       	mov	r23, r22
    1eec:	6a 2f       	mov	r22, r26
    1eee:	11 24       	eor	r1, r1
    1ef0:	9f 57       	subi	r25, 0x7F	; 127
    1ef2:	50 40       	sbci	r21, 0x00	; 0
    1ef4:	9a f0       	brmi	.+38     	; 0x1f1c <__mulsf3_pse+0x88>
    1ef6:	f1 f0       	breq	.+60     	; 0x1f34 <__mulsf3_pse+0xa0>
    1ef8:	88 23       	and	r24, r24
    1efa:	4a f0       	brmi	.+18     	; 0x1f0e <__mulsf3_pse+0x7a>
    1efc:	ee 0f       	add	r30, r30
    1efe:	ff 1f       	adc	r31, r31
    1f00:	bb 1f       	adc	r27, r27
    1f02:	66 1f       	adc	r22, r22
    1f04:	77 1f       	adc	r23, r23
    1f06:	88 1f       	adc	r24, r24
    1f08:	91 50       	subi	r25, 0x01	; 1
    1f0a:	50 40       	sbci	r21, 0x00	; 0
    1f0c:	a9 f7       	brne	.-22     	; 0x1ef8 <__mulsf3_pse+0x64>
    1f0e:	9e 3f       	cpi	r25, 0xFE	; 254
    1f10:	51 05       	cpc	r21, r1
    1f12:	80 f0       	brcs	.+32     	; 0x1f34 <__mulsf3_pse+0xa0>
    1f14:	0c 94 6c 0d 	jmp	0x1ad8	; 0x1ad8 <__fp_inf>
    1f18:	0c 94 b7 0d 	jmp	0x1b6e	; 0x1b6e <__fp_szero>
    1f1c:	5f 3f       	cpi	r21, 0xFF	; 255
    1f1e:	e4 f3       	brlt	.-8      	; 0x1f18 <__mulsf3_pse+0x84>
    1f20:	98 3e       	cpi	r25, 0xE8	; 232
    1f22:	d4 f3       	brlt	.-12     	; 0x1f18 <__mulsf3_pse+0x84>
    1f24:	86 95       	lsr	r24
    1f26:	77 95       	ror	r23
    1f28:	67 95       	ror	r22
    1f2a:	b7 95       	ror	r27
    1f2c:	f7 95       	ror	r31
    1f2e:	e7 95       	ror	r30
    1f30:	9f 5f       	subi	r25, 0xFF	; 255
    1f32:	c1 f7       	brne	.-16     	; 0x1f24 <__mulsf3_pse+0x90>
    1f34:	fe 2b       	or	r31, r30
    1f36:	88 0f       	add	r24, r24
    1f38:	91 1d       	adc	r25, r1
    1f3a:	96 95       	lsr	r25
    1f3c:	87 95       	ror	r24
    1f3e:	97 f9       	bld	r25, 7
    1f40:	08 95       	ret

00001f42 <__subsf3>:
    1f42:	50 58       	subi	r21, 0x80	; 128

00001f44 <__addsf3>:
    1f44:	bb 27       	eor	r27, r27
    1f46:	aa 27       	eor	r26, r26
    1f48:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <__addsf3x>
    1f4c:	0c 94 83 0d 	jmp	0x1b06	; 0x1b06 <__fp_round>
    1f50:	0e 94 75 0d 	call	0x1aea	; 0x1aea <__fp_pscA>
    1f54:	38 f0       	brcs	.+14     	; 0x1f64 <__addsf3+0x20>
    1f56:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <__fp_pscB>
    1f5a:	20 f0       	brcs	.+8      	; 0x1f64 <__addsf3+0x20>
    1f5c:	39 f4       	brne	.+14     	; 0x1f6c <__addsf3+0x28>
    1f5e:	9f 3f       	cpi	r25, 0xFF	; 255
    1f60:	19 f4       	brne	.+6      	; 0x1f68 <__addsf3+0x24>
    1f62:	26 f4       	brtc	.+8      	; 0x1f6c <__addsf3+0x28>
    1f64:	0c 94 72 0d 	jmp	0x1ae4	; 0x1ae4 <__fp_nan>
    1f68:	0e f4       	brtc	.+2      	; 0x1f6c <__addsf3+0x28>
    1f6a:	e0 95       	com	r30
    1f6c:	e7 fb       	bst	r30, 7
    1f6e:	0c 94 6c 0d 	jmp	0x1ad8	; 0x1ad8 <__fp_inf>

00001f72 <__addsf3x>:
    1f72:	e9 2f       	mov	r30, r25
    1f74:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <__fp_split3>
    1f78:	58 f3       	brcs	.-42     	; 0x1f50 <__addsf3+0xc>
    1f7a:	ba 17       	cp	r27, r26
    1f7c:	62 07       	cpc	r22, r18
    1f7e:	73 07       	cpc	r23, r19
    1f80:	84 07       	cpc	r24, r20
    1f82:	95 07       	cpc	r25, r21
    1f84:	20 f0       	brcs	.+8      	; 0x1f8e <__addsf3x+0x1c>
    1f86:	79 f4       	brne	.+30     	; 0x1fa6 <__addsf3x+0x34>
    1f88:	a6 f5       	brtc	.+104    	; 0x1ff2 <__addsf3x+0x80>
    1f8a:	0c 94 b6 0d 	jmp	0x1b6c	; 0x1b6c <__fp_zero>
    1f8e:	0e f4       	brtc	.+2      	; 0x1f92 <__addsf3x+0x20>
    1f90:	e0 95       	com	r30
    1f92:	0b 2e       	mov	r0, r27
    1f94:	ba 2f       	mov	r27, r26
    1f96:	a0 2d       	mov	r26, r0
    1f98:	0b 01       	movw	r0, r22
    1f9a:	b9 01       	movw	r22, r18
    1f9c:	90 01       	movw	r18, r0
    1f9e:	0c 01       	movw	r0, r24
    1fa0:	ca 01       	movw	r24, r20
    1fa2:	a0 01       	movw	r20, r0
    1fa4:	11 24       	eor	r1, r1
    1fa6:	ff 27       	eor	r31, r31
    1fa8:	59 1b       	sub	r21, r25
    1faa:	99 f0       	breq	.+38     	; 0x1fd2 <__addsf3x+0x60>
    1fac:	59 3f       	cpi	r21, 0xF9	; 249
    1fae:	50 f4       	brcc	.+20     	; 0x1fc4 <__addsf3x+0x52>
    1fb0:	50 3e       	cpi	r21, 0xE0	; 224
    1fb2:	68 f1       	brcs	.+90     	; 0x200e <__addsf3x+0x9c>
    1fb4:	1a 16       	cp	r1, r26
    1fb6:	f0 40       	sbci	r31, 0x00	; 0
    1fb8:	a2 2f       	mov	r26, r18
    1fba:	23 2f       	mov	r18, r19
    1fbc:	34 2f       	mov	r19, r20
    1fbe:	44 27       	eor	r20, r20
    1fc0:	58 5f       	subi	r21, 0xF8	; 248
    1fc2:	f3 cf       	rjmp	.-26     	; 0x1faa <__addsf3x+0x38>
    1fc4:	46 95       	lsr	r20
    1fc6:	37 95       	ror	r19
    1fc8:	27 95       	ror	r18
    1fca:	a7 95       	ror	r26
    1fcc:	f0 40       	sbci	r31, 0x00	; 0
    1fce:	53 95       	inc	r21
    1fd0:	c9 f7       	brne	.-14     	; 0x1fc4 <__addsf3x+0x52>
    1fd2:	7e f4       	brtc	.+30     	; 0x1ff2 <__addsf3x+0x80>
    1fd4:	1f 16       	cp	r1, r31
    1fd6:	ba 0b       	sbc	r27, r26
    1fd8:	62 0b       	sbc	r22, r18
    1fda:	73 0b       	sbc	r23, r19
    1fdc:	84 0b       	sbc	r24, r20
    1fde:	ba f0       	brmi	.+46     	; 0x200e <__addsf3x+0x9c>
    1fe0:	91 50       	subi	r25, 0x01	; 1
    1fe2:	a1 f0       	breq	.+40     	; 0x200c <__addsf3x+0x9a>
    1fe4:	ff 0f       	add	r31, r31
    1fe6:	bb 1f       	adc	r27, r27
    1fe8:	66 1f       	adc	r22, r22
    1fea:	77 1f       	adc	r23, r23
    1fec:	88 1f       	adc	r24, r24
    1fee:	c2 f7       	brpl	.-16     	; 0x1fe0 <__addsf3x+0x6e>
    1ff0:	0e c0       	rjmp	.+28     	; 0x200e <__addsf3x+0x9c>
    1ff2:	ba 0f       	add	r27, r26
    1ff4:	62 1f       	adc	r22, r18
    1ff6:	73 1f       	adc	r23, r19
    1ff8:	84 1f       	adc	r24, r20
    1ffa:	48 f4       	brcc	.+18     	; 0x200e <__addsf3x+0x9c>
    1ffc:	87 95       	ror	r24
    1ffe:	77 95       	ror	r23
    2000:	67 95       	ror	r22
    2002:	b7 95       	ror	r27
    2004:	f7 95       	ror	r31
    2006:	9e 3f       	cpi	r25, 0xFE	; 254
    2008:	08 f0       	brcs	.+2      	; 0x200c <__addsf3x+0x9a>
    200a:	b0 cf       	rjmp	.-160    	; 0x1f6c <__addsf3+0x28>
    200c:	93 95       	inc	r25
    200e:	88 0f       	add	r24, r24
    2010:	08 f0       	brcs	.+2      	; 0x2014 <__addsf3x+0xa2>
    2012:	99 27       	eor	r25, r25
    2014:	ee 0f       	add	r30, r30
    2016:	97 95       	ror	r25
    2018:	87 95       	ror	r24
    201a:	08 95       	ret

0000201c <__fp_mpack>:
    201c:	9f 3f       	cpi	r25, 0xFF	; 255
    201e:	31 f0       	breq	.+12     	; 0x202c <__fp_mpack_finite+0xc>

00002020 <__fp_mpack_finite>:
    2020:	91 50       	subi	r25, 0x01	; 1
    2022:	20 f4       	brcc	.+8      	; 0x202c <__fp_mpack_finite+0xc>
    2024:	87 95       	ror	r24
    2026:	77 95       	ror	r23
    2028:	67 95       	ror	r22
    202a:	b7 95       	ror	r27
    202c:	88 0f       	add	r24, r24
    202e:	91 1d       	adc	r25, r1
    2030:	96 95       	lsr	r25
    2032:	87 95       	ror	r24
    2034:	97 f9       	bld	r25, 7
    2036:	08 95       	ret

00002038 <__udivmodsi4>:
    2038:	a1 e2       	ldi	r26, 0x21	; 33
    203a:	1a 2e       	mov	r1, r26
    203c:	aa 1b       	sub	r26, r26
    203e:	bb 1b       	sub	r27, r27
    2040:	fd 01       	movw	r30, r26
    2042:	0d c0       	rjmp	.+26     	; 0x205e <__udivmodsi4_ep>

00002044 <__udivmodsi4_loop>:
    2044:	aa 1f       	adc	r26, r26
    2046:	bb 1f       	adc	r27, r27
    2048:	ee 1f       	adc	r30, r30
    204a:	ff 1f       	adc	r31, r31
    204c:	a2 17       	cp	r26, r18
    204e:	b3 07       	cpc	r27, r19
    2050:	e4 07       	cpc	r30, r20
    2052:	f5 07       	cpc	r31, r21
    2054:	20 f0       	brcs	.+8      	; 0x205e <__udivmodsi4_ep>
    2056:	a2 1b       	sub	r26, r18
    2058:	b3 0b       	sbc	r27, r19
    205a:	e4 0b       	sbc	r30, r20
    205c:	f5 0b       	sbc	r31, r21

0000205e <__udivmodsi4_ep>:
    205e:	66 1f       	adc	r22, r22
    2060:	77 1f       	adc	r23, r23
    2062:	88 1f       	adc	r24, r24
    2064:	99 1f       	adc	r25, r25
    2066:	1a 94       	dec	r1
    2068:	69 f7       	brne	.-38     	; 0x2044 <__udivmodsi4_loop>
    206a:	60 95       	com	r22
    206c:	70 95       	com	r23
    206e:	80 95       	com	r24
    2070:	90 95       	com	r25
    2072:	9b 01       	movw	r18, r22
    2074:	ac 01       	movw	r20, r24
    2076:	bd 01       	movw	r22, r26
    2078:	cf 01       	movw	r24, r30
    207a:	08 95       	ret

0000207c <__divmodsi4>:
    207c:	05 2e       	mov	r0, r21
    207e:	97 fb       	bst	r25, 7
    2080:	1e f4       	brtc	.+6      	; 0x2088 <__divmodsi4+0xc>
    2082:	00 94       	com	r0
    2084:	0e 94 55 10 	call	0x20aa	; 0x20aa <__negsi2>
    2088:	57 fd       	sbrc	r21, 7
    208a:	07 d0       	rcall	.+14     	; 0x209a <__divmodsi4_neg2>
    208c:	0e 94 1c 10 	call	0x2038	; 0x2038 <__udivmodsi4>
    2090:	07 fc       	sbrc	r0, 7
    2092:	03 d0       	rcall	.+6      	; 0x209a <__divmodsi4_neg2>
    2094:	4e f4       	brtc	.+18     	; 0x20a8 <__divmodsi4_exit>
    2096:	0c 94 55 10 	jmp	0x20aa	; 0x20aa <__negsi2>

0000209a <__divmodsi4_neg2>:
    209a:	50 95       	com	r21
    209c:	40 95       	com	r20
    209e:	30 95       	com	r19
    20a0:	21 95       	neg	r18
    20a2:	3f 4f       	sbci	r19, 0xFF	; 255
    20a4:	4f 4f       	sbci	r20, 0xFF	; 255
    20a6:	5f 4f       	sbci	r21, 0xFF	; 255

000020a8 <__divmodsi4_exit>:
    20a8:	08 95       	ret

000020aa <__negsi2>:
    20aa:	90 95       	com	r25
    20ac:	80 95       	com	r24
    20ae:	70 95       	com	r23
    20b0:	61 95       	neg	r22
    20b2:	7f 4f       	sbci	r23, 0xFF	; 255
    20b4:	8f 4f       	sbci	r24, 0xFF	; 255
    20b6:	9f 4f       	sbci	r25, 0xFF	; 255
    20b8:	08 95       	ret

000020ba <strcpy>:
    20ba:	fb 01       	movw	r30, r22
    20bc:	dc 01       	movw	r26, r24
    20be:	01 90       	ld	r0, Z+
    20c0:	0d 92       	st	X+, r0
    20c2:	00 20       	and	r0, r0
    20c4:	e1 f7       	brne	.-8      	; 0x20be <strcpy+0x4>
    20c6:	08 95       	ret

000020c8 <__itoa_ncheck>:
    20c8:	bb 27       	eor	r27, r27
    20ca:	4a 30       	cpi	r20, 0x0A	; 10
    20cc:	31 f4       	brne	.+12     	; 0x20da <__itoa_ncheck+0x12>
    20ce:	99 23       	and	r25, r25
    20d0:	22 f4       	brpl	.+8      	; 0x20da <__itoa_ncheck+0x12>
    20d2:	bd e2       	ldi	r27, 0x2D	; 45
    20d4:	90 95       	com	r25
    20d6:	81 95       	neg	r24
    20d8:	9f 4f       	sbci	r25, 0xFF	; 255
    20da:	0c 94 70 10 	jmp	0x20e0	; 0x20e0 <__utoa_common>

000020de <__utoa_ncheck>:
    20de:	bb 27       	eor	r27, r27

000020e0 <__utoa_common>:
    20e0:	fb 01       	movw	r30, r22
    20e2:	55 27       	eor	r21, r21
    20e4:	aa 27       	eor	r26, r26
    20e6:	88 0f       	add	r24, r24
    20e8:	99 1f       	adc	r25, r25
    20ea:	aa 1f       	adc	r26, r26
    20ec:	a4 17       	cp	r26, r20
    20ee:	10 f0       	brcs	.+4      	; 0x20f4 <__utoa_common+0x14>
    20f0:	a4 1b       	sub	r26, r20
    20f2:	83 95       	inc	r24
    20f4:	50 51       	subi	r21, 0x10	; 16
    20f6:	b9 f7       	brne	.-18     	; 0x20e6 <__utoa_common+0x6>
    20f8:	a0 5d       	subi	r26, 0xD0	; 208
    20fa:	aa 33       	cpi	r26, 0x3A	; 58
    20fc:	08 f0       	brcs	.+2      	; 0x2100 <__utoa_common+0x20>
    20fe:	a9 5d       	subi	r26, 0xD9	; 217
    2100:	a1 93       	st	Z+, r26
    2102:	00 97       	sbiw	r24, 0x00	; 0
    2104:	79 f7       	brne	.-34     	; 0x20e4 <__utoa_common+0x4>
    2106:	b1 11       	cpse	r27, r1
    2108:	b1 93       	st	Z+, r27
    210a:	11 92       	st	Z+, r1
    210c:	cb 01       	movw	r24, r22
    210e:	0c 94 89 10 	jmp	0x2112	; 0x2112 <strrev>

00002112 <strrev>:
    2112:	dc 01       	movw	r26, r24
    2114:	fc 01       	movw	r30, r24
    2116:	67 2f       	mov	r22, r23
    2118:	71 91       	ld	r23, Z+
    211a:	77 23       	and	r23, r23
    211c:	e1 f7       	brne	.-8      	; 0x2116 <strrev+0x4>
    211e:	32 97       	sbiw	r30, 0x02	; 2
    2120:	04 c0       	rjmp	.+8      	; 0x212a <strrev+0x18>
    2122:	7c 91       	ld	r23, X
    2124:	6d 93       	st	X+, r22
    2126:	70 83       	st	Z, r23
    2128:	62 91       	ld	r22, -Z
    212a:	ae 17       	cp	r26, r30
    212c:	bf 07       	cpc	r27, r31
    212e:	c8 f3       	brcs	.-14     	; 0x2122 <strrev+0x10>
    2130:	08 95       	ret

00002132 <_exit>:
    2132:	f8 94       	cli

00002134 <__stop_program>:
    2134:	ff cf       	rjmp	.-2      	; 0x2134 <__stop_program>
