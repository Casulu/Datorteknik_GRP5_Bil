
Remote 1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000082  00800100  0000187a  0000190e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000187a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000d3  00800182  00800182  00001990  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001990  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000019c0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000200  00000000  00000000  00001a00  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000202b  00000000  00000000  00001c00  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f17  00000000  00000000  00003c2b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001233  00000000  00000000  00004b42  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000554  00000000  00000000  00005d78  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000084a  00000000  00000000  000062cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000146e  00000000  00000000  00006b16  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001c0  00000000  00000000  00007f84  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 fa 02 	jmp	0x5f4	; 0x5f4 <__ctors_end>
       4:	0c 94 55 05 	jmp	0xaaa	; 0xaaa <__vector_1>
       8:	0c 94 93 05 	jmp	0xb26	; 0xb26 <__vector_2>
       c:	0c 94 17 03 	jmp	0x62e	; 0x62e <__bad_interrupt>
      10:	0c 94 17 03 	jmp	0x62e	; 0x62e <__bad_interrupt>
      14:	0c 94 17 03 	jmp	0x62e	; 0x62e <__bad_interrupt>
      18:	0c 94 17 03 	jmp	0x62e	; 0x62e <__bad_interrupt>
      1c:	0c 94 b0 03 	jmp	0x760	; 0x760 <__vector_7>
      20:	0c 94 17 03 	jmp	0x62e	; 0x62e <__bad_interrupt>
      24:	0c 94 17 03 	jmp	0x62e	; 0x62e <__bad_interrupt>
      28:	0c 94 17 03 	jmp	0x62e	; 0x62e <__bad_interrupt>
      2c:	0c 94 c4 07 	jmp	0xf88	; 0xf88 <__vector_11>
      30:	0c 94 17 03 	jmp	0x62e	; 0x62e <__bad_interrupt>
      34:	0c 94 17 03 	jmp	0x62e	; 0x62e <__bad_interrupt>
      38:	0c 94 17 03 	jmp	0x62e	; 0x62e <__bad_interrupt>
      3c:	0c 94 17 03 	jmp	0x62e	; 0x62e <__bad_interrupt>
      40:	0c 94 17 03 	jmp	0x62e	; 0x62e <__bad_interrupt>
      44:	0c 94 17 03 	jmp	0x62e	; 0x62e <__bad_interrupt>
      48:	0c 94 01 05 	jmp	0xa02	; 0xa02 <__vector_18>
      4c:	0c 94 17 03 	jmp	0x62e	; 0x62e <__bad_interrupt>
      50:	0c 94 17 03 	jmp	0x62e	; 0x62e <__bad_interrupt>
      54:	0c 94 17 03 	jmp	0x62e	; 0x62e <__bad_interrupt>
      58:	0c 94 17 03 	jmp	0x62e	; 0x62e <__bad_interrupt>
      5c:	0c 94 17 03 	jmp	0x62e	; 0x62e <__bad_interrupt>
      60:	0c 94 17 03 	jmp	0x62e	; 0x62e <__bad_interrupt>
      64:	0c 94 17 03 	jmp	0x62e	; 0x62e <__bad_interrupt>
      68:	07 63       	ori	r16, 0x37	; 55
      6a:	42 36       	cpi	r20, 0x62	; 98
      6c:	b7 9b       	sbis	0x16, 7	; 22
      6e:	d8 a7       	std	Y+40, r29	; 0x28
      70:	1a 39       	cpi	r17, 0x9A	; 154
      72:	68 56       	subi	r22, 0x68	; 104
      74:	18 ae       	std	Y+56, r1	; 0x38
      76:	ba ab       	std	Y+50, r27	; 0x32
      78:	55 8c       	ldd	r5, Z+29	; 0x1d
      7a:	1d 3c       	cpi	r17, 0xCD	; 205
      7c:	b7 cc       	rjmp	.-1682   	; 0xfffff9ec <__eeprom_end+0xff7ef9ec>
      7e:	57 63       	ori	r21, 0x37	; 55
      80:	bd 6d       	ori	r27, 0xDD	; 221
      82:	ed fd       	.word	0xfded	; ????
      84:	75 3e       	cpi	r23, 0xE5	; 229
      86:	f6 17       	cp	r31, r22
      88:	72 31       	cpi	r23, 0x12	; 18
      8a:	bf 00       	.word	0x00bf	; ????
      8c:	00 00       	nop
      8e:	80 3f       	cpi	r24, 0xF0	; 240
      90:	08 00       	.word	0x0008	; ????
      92:	00 00       	nop
      94:	be 92       	st	-X, r11
      96:	24 49       	sbci	r18, 0x94	; 148
      98:	12 3e       	cpi	r17, 0xE2	; 226
      9a:	ab aa       	std	Y+51, r10	; 0x33
      9c:	aa 2a       	or	r10, r26
      9e:	be cd       	rjmp	.-1156   	; 0xfffffc1c <__eeprom_end+0xff7efc1c>
      a0:	cc cc       	rjmp	.-1640   	; 0xfffffa3a <__eeprom_end+0xff7efa3a>
      a2:	4c 3e       	cpi	r20, 0xEC	; 236
      a4:	00 00       	nop
      a6:	00 80       	ld	r0, Z
      a8:	be ab       	std	Y+54, r27	; 0x36
      aa:	aa aa       	std	Y+50, r10	; 0x32
      ac:	aa 3e       	cpi	r26, 0xEA	; 234
      ae:	00 00       	nop
      b0:	00 00       	nop
      b2:	bf 00       	.word	0x00bf	; ????
      b4:	00 00       	nop
      b6:	80 3f       	cpi	r24, 0xF0	; 240
      b8:	00 00       	nop
      ba:	00 00       	nop
      bc:	00 08       	sbc	r0, r0
      be:	41 78       	andi	r20, 0x81	; 129
      c0:	d3 bb       	out	0x13, r29	; 19
      c2:	43 87       	std	Z+11, r20	; 0x0b
      c4:	d1 13       	cpse	r29, r17
      c6:	3d 19       	sub	r19, r13
      c8:	0e 3c       	cpi	r16, 0xCE	; 206
      ca:	c3 bd       	out	0x23, r28	; 35
      cc:	42 82       	std	Z+2, r4	; 0x02
      ce:	ad 2b       	or	r26, r29
      d0:	3e 68       	ori	r19, 0x8E	; 142
      d2:	ec 82       	std	Y+4, r14	; 0x04
      d4:	76 be       	out	0x36, r7	; 54
      d6:	d9 8f       	std	Y+25, r29	; 0x19
      d8:	e1 a9       	ldd	r30, Z+49	; 0x31
      da:	3e 4c       	sbci	r19, 0xCE	; 206
      dc:	80 ef       	ldi	r24, 0xF0	; 240
      de:	ff be       	out	0x3f, r15	; 63
      e0:	01 c4       	rjmp	.+2050   	; 0x8e4 <display_sensors+0x7c>
      e2:	ff 7f       	andi	r31, 0xFF	; 255
      e4:	3f 00       	.word	0x003f	; ????
      e6:	00 00       	nop
	...

000000ea <__trampolines_end>:
      ea:	39 15       	cp	r19, r9
      ec:	55 6e       	ori	r21, 0xE5	; 229
      ee:	72 38       	cpi	r23, 0x82	; 130
      f0:	0c 01       	movw	r0, r24
      f2:	06 71       	Address 0x000000f2 is out of bounds.
.word	0xffff	; ????

000000f3 <melodies>:
      f3:	71 80 71 00 00 00 00 00 00 00 00 00 00 00 00 00     q.q.............
	...
     1f3:	63 6c 6f 6c 48 63 6c 6f 6c 48 63 6d 60 6d 6a 60     clolHclolHcm`mj`
     203:	6a 48 68 00 00 00 00 00 00 00 00 00 00 00 00 00     jHh.............
	...
     2f3:	2d 4d 60 68 4d 68 88 8a 4c 85 80 65 4a 68 88 86     -M`hMh..L..eJh..
     303:	48 81 80 61 63 83 80 63 83 85 66 86 80 66 86 88     H..ac..c..f..f..
     313:	4a 6c 6d 4f 6f 68 51 6f 8f 8d 4f 6c 68 4d 6c 8c     JlmOohQo..OlhMl.
     323:	8a 4c 85 80 65 4a 68 88 86 48 61 80 81 4d 6c 8c     .L..eJh..Ha..Ml.
     333:	8a 68 6c 6d 6f 31 6f 6d 6c 6d 4f 6f 88 80 68 6c     .hlmo1omlmOo..hl
     343:	6d 6f 2d 6c 6a 68 6a 4c 6c 85 80 65 68 6a 6c 4d     mo-ljhjLl..ehjlM
     353:	6a 8a 8c 4d 6a 8a 8c 4d 6a 6d 52 72 60 32 71 6f     j..Mj..MjmRr`2qo
     363:	6d 6f 51 71 8d 80 2d 2f 6d 6c 6a 6c 4d 6d 8a 80     moQq..-/mljlMm..
     373:	2a 4d 6c 8c 8a 48 61 80 81 28 4a 4c 2d 6d 00 00     *Ml..Ha..(JL-m..
	...
     3f3:	4a 4c 4e 4f 51 53 6a 80 8a 4c 6e 80 8e 6f 8f 80     JLNOQSj..Ln..o..
     403:	4f 40 4a 4c 4e 4f 51 53 6a 80 8a 4c 6e 80 8e 6f     O@JLNOQSj..Ln..o
     413:	8f 80 4f 40 56 53 76 96 80 76 74 31 54 51 54 36     ..O@VSv..vt1TQT6
     423:	76 96 80 56 53 76 96 80 76 74 31 4a 4c 4e 2f 4f     v..VSv..vt1JLN/O
	...
     4f3:	61 81 80 41 68 88 80 48 6a 8a 80 4a 28 66 86 80     a..Ah..Hj..J(f..
     503:	46 65 85 80 45 63 83 80 43 21 68 88 80 48 66 86     Fe..Ec..C!h..Hf.
     513:	80 46 65 85 80 45 23 68 88 80 48 66 86 80 46 65     .Fe..E#h..Hf..Fe
     523:	85 80 45 23 61 81 80 41 68 88 80 48 6a 8a 80 4a     ..E#a..Ah..Hj..J
     533:	28 66 86 80 46 65 85 80 45 63 83 80 43 21 00 00     (f..Fe..Ec..C!..
	...

000005f4 <__ctors_end>:
     5f4:	11 24       	eor	r1, r1
     5f6:	1f be       	out	0x3f, r1	; 63
     5f8:	cf ef       	ldi	r28, 0xFF	; 255
     5fa:	d8 e0       	ldi	r29, 0x08	; 8
     5fc:	de bf       	out	0x3e, r29	; 62
     5fe:	cd bf       	out	0x3d, r28	; 61

00000600 <__do_copy_data>:
     600:	11 e0       	ldi	r17, 0x01	; 1
     602:	a0 e0       	ldi	r26, 0x00	; 0
     604:	b1 e0       	ldi	r27, 0x01	; 1
     606:	ea e7       	ldi	r30, 0x7A	; 122
     608:	f8 e1       	ldi	r31, 0x18	; 24
     60a:	02 c0       	rjmp	.+4      	; 0x610 <__do_copy_data+0x10>
     60c:	05 90       	lpm	r0, Z+
     60e:	0d 92       	st	X+, r0
     610:	a2 38       	cpi	r26, 0x82	; 130
     612:	b1 07       	cpc	r27, r17
     614:	d9 f7       	brne	.-10     	; 0x60c <__do_copy_data+0xc>

00000616 <__do_clear_bss>:
     616:	22 e0       	ldi	r18, 0x02	; 2
     618:	a2 e8       	ldi	r26, 0x82	; 130
     61a:	b1 e0       	ldi	r27, 0x01	; 1
     61c:	01 c0       	rjmp	.+2      	; 0x620 <.do_clear_bss_start>

0000061e <.do_clear_bss_loop>:
     61e:	1d 92       	st	X+, r1

00000620 <.do_clear_bss_start>:
     620:	a5 35       	cpi	r26, 0x55	; 85
     622:	b2 07       	cpc	r27, r18
     624:	e1 f7       	brne	.-8      	; 0x61e <.do_clear_bss_loop>
     626:	0e 94 cd 05 	call	0xb9a	; 0xb9a <main>
     62a:	0c 94 3b 0c 	jmp	0x1876	; 0x1876 <_exit>

0000062e <__bad_interrupt>:
     62e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000632 <send_move_command>:
		}
	}
	_delay_ms(50);
}

void send_move_command(){
     632:	0f 93       	push	r16
     634:	1f 93       	push	r17
     636:	cf 93       	push	r28
     638:	df 93       	push	r29
	if(command_hundreths == CMD_DELAY){
     63a:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <command_hundreths>
     63e:	84 31       	cpi	r24, 0x14	; 20
     640:	09 f0       	breq	.+2      	; 0x644 <send_move_command+0x12>
     642:	7b c0       	rjmp	.+246    	; 0x73a <send_move_command+0x108>
		command_hundreths = 0;
     644:	10 92 89 01 	sts	0x0189, r1	; 0x800189 <command_hundreths>
		int16_t adjusted_x = x_rest - read_avg_adc(1, 25);
     648:	c0 91 11 01 	lds	r28, 0x0111	; 0x800111 <x_rest>
     64c:	d0 91 12 01 	lds	r29, 0x0112	; 0x800112 <x_rest+0x1>
     650:	69 e1       	ldi	r22, 0x19	; 25
     652:	70 e0       	ldi	r23, 0x00	; 0
     654:	81 e0       	ldi	r24, 0x01	; 1
     656:	0e 94 24 06 	call	0xc48	; 0xc48 <read_avg_adc>
     65a:	c8 1b       	sub	r28, r24
     65c:	d9 0b       	sbc	r29, r25
		int16_t adjusted_y = y_rest - read_avg_adc(2, 25);
     65e:	00 91 0f 01 	lds	r16, 0x010F	; 0x80010f <y_rest>
     662:	10 91 10 01 	lds	r17, 0x0110	; 0x800110 <y_rest+0x1>
     666:	69 e1       	ldi	r22, 0x19	; 25
     668:	70 e0       	ldi	r23, 0x00	; 0
     66a:	82 e0       	ldi	r24, 0x02	; 2
     66c:	0e 94 24 06 	call	0xc48	; 0xc48 <read_avg_adc>
     670:	98 01       	movw	r18, r16
     672:	28 1b       	sub	r18, r24
     674:	39 0b       	sbc	r19, r25
		int16_t left = adjusted_x+adjusted_y;
     676:	8e 01       	movw	r16, r28
     678:	02 0f       	add	r16, r18
     67a:	13 1f       	adc	r17, r19
		int16_t right = adjusted_x-adjusted_y;
     67c:	c2 1b       	sub	r28, r18
     67e:	d3 0b       	sbc	r29, r19
		if(left > 127){
     680:	00 38       	cpi	r16, 0x80	; 128
     682:	11 05       	cpc	r17, r1
     684:	5c f4       	brge	.+22     	; 0x69c <send_move_command+0x6a>
			left = 127;
		}
		else if(left < -127){
     686:	01 38       	cpi	r16, 0x81	; 129
     688:	3f ef       	ldi	r19, 0xFF	; 255
     68a:	13 07       	cpc	r17, r19
     68c:	54 f0       	brlt	.+20     	; 0x6a2 <send_move_command+0x70>
			left = -127;
		} else if(left > -5 && left < 5) left = 0;
     68e:	c8 01       	movw	r24, r16
     690:	04 96       	adiw	r24, 0x04	; 4
     692:	09 97       	sbiw	r24, 0x09	; 9
     694:	40 f4       	brcc	.+16     	; 0x6a6 <send_move_command+0x74>
     696:	00 e0       	ldi	r16, 0x00	; 0
     698:	10 e0       	ldi	r17, 0x00	; 0
     69a:	05 c0       	rjmp	.+10     	; 0x6a6 <send_move_command+0x74>
		int16_t adjusted_x = x_rest - read_avg_adc(1, 25);
		int16_t adjusted_y = y_rest - read_avg_adc(2, 25);
		int16_t left = adjusted_x+adjusted_y;
		int16_t right = adjusted_x-adjusted_y;
		if(left > 127){
			left = 127;
     69c:	0f e7       	ldi	r16, 0x7F	; 127
     69e:	10 e0       	ldi	r17, 0x00	; 0
     6a0:	02 c0       	rjmp	.+4      	; 0x6a6 <send_move_command+0x74>
		}
		else if(left < -127){
			left = -127;
     6a2:	01 e8       	ldi	r16, 0x81	; 129
     6a4:	1f ef       	ldi	r17, 0xFF	; 255
		} else if(left > -5 && left < 5) left = 0;
		
		if(right > 127) {
     6a6:	c0 38       	cpi	r28, 0x80	; 128
     6a8:	d1 05       	cpc	r29, r1
     6aa:	5c f4       	brge	.+22     	; 0x6c2 <send_move_command+0x90>
			right = 127;
		}
		else if(right < -127){
     6ac:	c1 38       	cpi	r28, 0x81	; 129
     6ae:	8f ef       	ldi	r24, 0xFF	; 255
     6b0:	d8 07       	cpc	r29, r24
     6b2:	54 f0       	brlt	.+20     	; 0x6c8 <send_move_command+0x96>
			right = -127;
		} else if(right > -5 && right < 5) right = 0;
     6b4:	ce 01       	movw	r24, r28
     6b6:	04 96       	adiw	r24, 0x04	; 4
     6b8:	09 97       	sbiw	r24, 0x09	; 9
     6ba:	40 f4       	brcc	.+16     	; 0x6cc <send_move_command+0x9a>
     6bc:	c0 e0       	ldi	r28, 0x00	; 0
     6be:	d0 e0       	ldi	r29, 0x00	; 0
     6c0:	05 c0       	rjmp	.+10     	; 0x6cc <send_move_command+0x9a>
		else if(left < -127){
			left = -127;
		} else if(left > -5 && left < 5) left = 0;
		
		if(right > 127) {
			right = 127;
     6c2:	cf e7       	ldi	r28, 0x7F	; 127
     6c4:	d0 e0       	ldi	r29, 0x00	; 0
     6c6:	02 c0       	rjmp	.+4      	; 0x6cc <send_move_command+0x9a>
		}
		else if(right < -127){
			right = -127;
     6c8:	c1 e8       	ldi	r28, 0x81	; 129
     6ca:	df ef       	ldi	r29, 0xFF	; 255
		} else if(right > -5 && right < 5) right = 0;
		
		if(left != last_left || right != last_right){
     6cc:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <last_left>
     6d0:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <last_left+0x1>
     6d4:	80 17       	cp	r24, r16
     6d6:	91 07       	cpc	r25, r17
     6d8:	39 f4       	brne	.+14     	; 0x6e8 <send_move_command+0xb6>
     6da:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <__data_end>
     6de:	90 91 83 01 	lds	r25, 0x0183	; 0x800183 <__data_end+0x1>
     6e2:	8c 17       	cp	r24, r28
     6e4:	9d 07       	cpc	r25, r29
     6e6:	09 f1       	breq	.+66     	; 0x72a <send_move_command+0xf8>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     6e8:	4a e0       	ldi	r20, 0x0A	; 10
     6ea:	62 e0       	ldi	r22, 0x02	; 2
     6ec:	71 e0       	ldi	r23, 0x01	; 1
     6ee:	c8 01       	movw	r24, r16
     6f0:	0e 94 06 0c 	call	0x180c	; 0x180c <__itoa_ncheck>
			itoa(left, itoabuf+2, 10);
			uint8_t len = strlen(itoabuf);
     6f4:	e0 e0       	ldi	r30, 0x00	; 0
     6f6:	f1 e0       	ldi	r31, 0x01	; 1
     6f8:	01 90       	ld	r0, Z+
     6fa:	00 20       	and	r0, r0
     6fc:	e9 f7       	brne	.-6      	; 0x6f8 <send_move_command+0xc6>
     6fe:	31 97       	sbiw	r30, 0x01	; 1
     700:	e0 50       	subi	r30, 0x00	; 0
     702:	f1 40       	sbci	r31, 0x01	; 1
			itoabuf[len++] = ' ';
     704:	df 01       	movw	r26, r30
     706:	bb 27       	eor	r27, r27
     708:	a0 50       	subi	r26, 0x00	; 0
     70a:	bf 4f       	sbci	r27, 0xFF	; 255
     70c:	80 e2       	ldi	r24, 0x20	; 32
     70e:	8c 93       	st	X, r24
     710:	ef 5f       	subi	r30, 0xFF	; 255
     712:	6e 2f       	mov	r22, r30
     714:	70 e0       	ldi	r23, 0x00	; 0
     716:	60 50       	subi	r22, 0x00	; 0
     718:	7f 4f       	sbci	r23, 0xFF	; 255
     71a:	4a e0       	ldi	r20, 0x0A	; 10
     71c:	ce 01       	movw	r24, r28
     71e:	0e 94 06 0c 	call	0x180c	; 0x180c <__itoa_ncheck>
			itoa(right, itoabuf+len, 10);
			uart_send_line(itoabuf);
     722:	80 e0       	ldi	r24, 0x00	; 0
     724:	91 e0       	ldi	r25, 0x01	; 1
     726:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <uart_send_line>
		}
		last_left = left;
     72a:	10 93 85 01 	sts	0x0185, r17	; 0x800185 <last_left+0x1>
     72e:	00 93 84 01 	sts	0x0184, r16	; 0x800184 <last_left>
		last_right = right;
     732:	d0 93 83 01 	sts	0x0183, r29	; 0x800183 <__data_end+0x1>
     736:	c0 93 82 01 	sts	0x0182, r28	; 0x800182 <__data_end>
	}
}
     73a:	df 91       	pop	r29
     73c:	cf 91       	pop	r28
     73e:	1f 91       	pop	r17
     740:	0f 91       	pop	r16
     742:	08 95       	ret

00000744 <print_lcd_static>:

void print_lcd_static(){
	set_cursor_pos(0);
     744:	80 e0       	ldi	r24, 0x00	; 0
     746:	0e 94 95 06 	call	0xd2a	; 0xd2a <set_cursor_pos>
	write_lcd_string("Fram: __cm PIR:_");
     74a:	84 e1       	ldi	r24, 0x14	; 20
     74c:	91 e0       	ldi	r25, 0x01	; 1
     74e:	0e 94 7d 06 	call	0xcfa	; 0xcfa <write_lcd_string>
	set_cursor_pos(16);
     752:	80 e1       	ldi	r24, 0x10	; 16
     754:	0e 94 95 06 	call	0xd2a	; 0xd2a <set_cursor_pos>
	write_lcd_string("Bak: __cm  C: __");
     758:	85 e2       	ldi	r24, 0x25	; 37
     75a:	91 e0       	ldi	r25, 0x01	; 1
     75c:	0c 94 7d 06 	jmp	0xcfa	; 0xcfa <write_lcd_string>

00000760 <__vector_7>:
}

ISR(TIMER2_COMPA_vect){
     760:	1f 92       	push	r1
     762:	0f 92       	push	r0
     764:	0f b6       	in	r0, 0x3f	; 63
     766:	0f 92       	push	r0
     768:	11 24       	eor	r1, r1
     76a:	2f 93       	push	r18
     76c:	3f 93       	push	r19
     76e:	4f 93       	push	r20
     770:	5f 93       	push	r21
     772:	6f 93       	push	r22
     774:	7f 93       	push	r23
     776:	8f 93       	push	r24
     778:	9f 93       	push	r25
     77a:	af 93       	push	r26
     77c:	bf 93       	push	r27
     77e:	ef 93       	push	r30
     780:	ff 93       	push	r31
	if(++heart_hundreths > 50){
     782:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <heart_hundreths>
     786:	8f 5f       	subi	r24, 0xFF	; 255
     788:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <heart_hundreths>
     78c:	83 33       	cpi	r24, 0x33	; 51
     78e:	18 f0       	brcs	.+6      	; 0x796 <__vector_7+0x36>
		LED_PORT |= 1<<LEDR2;
     790:	5f 9a       	sbi	0x0b, 7	; 11
		heart_hundreths = 0;
     792:	10 92 8a 01 	sts	0x018A, r1	; 0x80018a <heart_hundreths>
	}
	if(command_hundreths < CMD_DELAY){
     796:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <command_hundreths>
     79a:	84 31       	cpi	r24, 0x14	; 20
     79c:	28 f4       	brcc	.+10     	; 0x7a8 <__vector_7+0x48>
		command_hundreths++;
     79e:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <command_hundreths>
     7a2:	8f 5f       	subi	r24, 0xFF	; 255
     7a4:	80 93 89 01 	sts	0x0189, r24	; 0x800189 <command_hundreths>
	}
	if(debounce_hundreths > 0) debounce_hundreths--;
     7a8:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <debounce_hundreths>
     7ac:	88 23       	and	r24, r24
     7ae:	29 f0       	breq	.+10     	; 0x7ba <__vector_7+0x5a>
     7b0:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <debounce_hundreths>
     7b4:	81 50       	subi	r24, 0x01	; 1
     7b6:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <debounce_hundreths>
	messages_timerproc();
     7ba:	0e 94 a2 06 	call	0xd44	; 0xd44 <messages_timerproc>
}
     7be:	ff 91       	pop	r31
     7c0:	ef 91       	pop	r30
     7c2:	bf 91       	pop	r27
     7c4:	af 91       	pop	r26
     7c6:	9f 91       	pop	r25
     7c8:	8f 91       	pop	r24
     7ca:	7f 91       	pop	r23
     7cc:	6f 91       	pop	r22
     7ce:	5f 91       	pop	r21
     7d0:	4f 91       	pop	r20
     7d2:	3f 91       	pop	r19
     7d4:	2f 91       	pop	r18
     7d6:	0f 90       	pop	r0
     7d8:	0f be       	out	0x3f, r0	; 63
     7da:	0f 90       	pop	r0
     7dc:	1f 90       	pop	r1
     7de:	18 95       	reti

000007e0 <timer_init>:

void timer_init(){
	/* Start 100Hz system timer with TC2 for counting time */
	OCR2A = 77;
     7e0:	8d e4       	ldi	r24, 0x4D	; 77
     7e2:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
	TCCR2A = 1<<WGM21;
     7e6:	82 e0       	ldi	r24, 0x02	; 2
     7e8:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
	TCCR2B = 7;
     7ec:	97 e0       	ldi	r25, 0x07	; 7
     7ee:	90 93 b1 00 	sts	0x00B1, r25	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
	TIMSK2 = 1<<OCIE2A;
     7f2:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f8070>
     7f6:	08 95       	ret

000007f8 <perform_command>:
}

void perform_command(uint8_t topic, uint8_t command, volatile uint8_t* args){
	switch(topic){
     7f8:	81 33       	cpi	r24, 0x31	; 49
     7fa:	19 f0       	breq	.+6      	; 0x802 <__DATA_REGION_LENGTH__+0x2>
     7fc:	82 33       	cpi	r24, 0x32	; 50
     7fe:	b9 f0       	breq	.+46     	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
     800:	08 95       	ret
		case '1': //From car
			switch(command){
     802:	61 33       	cpi	r22, 0x31	; 49
     804:	41 f0       	breq	.+16     	; 0x816 <__DATA_REGION_LENGTH__+0x16>
     806:	62 33       	cpi	r22, 0x32	; 50
     808:	79 f0       	breq	.+30     	; 0x828 <__DATA_REGION_LENGTH__+0x28>
     80a:	60 33       	cpi	r22, 0x30	; 48
     80c:	61 f5       	brne	.+88     	; 0x866 <__DATA_REGION_LENGTH__+0x66>
				case '0':
					messages_force("Stopp!          ");
     80e:	86 e3       	ldi	r24, 0x36	; 54
     810:	91 e0       	ldi	r25, 0x01	; 1
     812:	0c 94 ca 06 	jmp	0xd94	; 0xd94 <messages_force>
     816:	ba 01       	movw	r22, r20
					break;
				case '1':
					strcpy((char*)sensor_buf, (char*)args);
     818:	84 e3       	ldi	r24, 0x34	; 52
     81a:	92 e0       	ldi	r25, 0x02	; 2
     81c:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <strcpy>
					sensors_received = true;
     820:	81 e0       	ldi	r24, 0x01	; 1
     822:	80 93 87 01 	sts	0x0187, r24	; 0x800187 <sensors_received>
					break;
     826:	08 95       	ret
				case '2':
					messages_queue("PONG            ");
     828:	87 e4       	ldi	r24, 0x47	; 71
     82a:	91 e0       	ldi	r25, 0x01	; 1
     82c:	0e c0       	rjmp	.+28     	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
			}
			break;
		case '2': //To remote
			switch(command){
     82e:	61 33       	cpi	r22, 0x31	; 49
     830:	59 f0       	breq	.+22     	; 0x848 <__DATA_REGION_LENGTH__+0x48>
     832:	18 f4       	brcc	.+6      	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
     834:	60 33       	cpi	r22, 0x30	; 48
     836:	31 f0       	breq	.+12     	; 0x844 <__DATA_REGION_LENGTH__+0x44>
     838:	08 95       	ret
     83a:	62 33       	cpi	r22, 0x32	; 50
     83c:	41 f0       	breq	.+16     	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
     83e:	64 33       	cpi	r22, 0x34	; 52
     840:	59 f0       	breq	.+22     	; 0x858 <__DATA_REGION_LENGTH__+0x58>
     842:	08 95       	ret
				case '0':
					LED_PORT &= ~(1<<LEDR2);
     844:	5f 98       	cbi	0x0b, 7	; 11
     846:	08 95       	ret
					break;
				case '1':
					messages_queue((char*)args);
     848:	ca 01       	movw	r24, r20
     84a:	0c 94 db 06 	jmp	0xdb6	; 0xdb6 <messages_queue>
					break;
				case '2':
					Summer_PlayMelody(args[0]-'0');
     84e:	fa 01       	movw	r30, r20
     850:	80 81       	ld	r24, Z
     852:	80 53       	subi	r24, 0x30	; 48
     854:	0c 94 1a 08 	jmp	0x1034	; 0x1034 <Summer_PlayMelody>
					break;
				case '4':
					CHANGEBIT(LED_PORT, LEDR1, args[0]-'0');
     858:	fa 01       	movw	r30, r20
     85a:	80 81       	ld	r24, Z
     85c:	80 33       	cpi	r24, 0x30	; 48
     85e:	11 f0       	breq	.+4      	; 0x864 <__DATA_REGION_LENGTH__+0x64>
     860:	5e 9a       	sbi	0x0b, 6	; 11
     862:	08 95       	ret
     864:	5e 98       	cbi	0x0b, 6	; 11
     866:	08 95       	ret

00000868 <display_sensors>:
			}
			break;
	}
}

void display_sensors(){
     868:	1f 93       	push	r17
     86a:	cf 93       	push	r28
     86c:	df 93       	push	r29
	char* args = (char*)sensor_buf;
	
	set_cursor_pos(CR_POS);
     86e:	8f e1       	ldi	r24, 0x1F	; 31
     870:	0e 94 95 06 	call	0xd2a	; 0xd2a <set_cursor_pos>
	write_lcd_char((args[0] == '0') ? 'R' : '_');
     874:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <sensor_buf>
     878:	80 33       	cpi	r24, 0x30	; 48
     87a:	11 f0       	breq	.+4      	; 0x880 <display_sensors+0x18>
     87c:	8f e5       	ldi	r24, 0x5F	; 95
     87e:	01 c0       	rjmp	.+2      	; 0x882 <display_sensors+0x1a>
     880:	82 e5       	ldi	r24, 0x52	; 82
     882:	0e 94 6e 06 	call	0xcdc	; 0xcdc <write_lcd_char>
	set_cursor_pos(CL_POS);
     886:	8e e1       	ldi	r24, 0x1E	; 30
     888:	0e 94 95 06 	call	0xd2a	; 0xd2a <set_cursor_pos>
	write_lcd_char((args[1] == '0') ? 'L' : '_');
     88c:	80 91 35 02 	lds	r24, 0x0235	; 0x800235 <sensor_buf+0x1>
     890:	80 33       	cpi	r24, 0x30	; 48
     892:	11 f0       	breq	.+4      	; 0x898 <display_sensors+0x30>
     894:	8f e5       	ldi	r24, 0x5F	; 95
     896:	01 c0       	rjmp	.+2      	; 0x89a <display_sensors+0x32>
     898:	8c e4       	ldi	r24, 0x4C	; 76
     89a:	0e 94 6e 06 	call	0xcdc	; 0xcdc <write_lcd_char>
	set_cursor_pos(PIR_POS);
     89e:	8f e0       	ldi	r24, 0x0F	; 15
     8a0:	0e 94 95 06 	call	0xd2a	; 0xd2a <set_cursor_pos>
	write_lcd_char((args[3] == '0') ? 'X' : '_');
     8a4:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <sensor_buf+0x3>
     8a8:	80 33       	cpi	r24, 0x30	; 48
     8aa:	11 f0       	breq	.+4      	; 0x8b0 <display_sensors+0x48>
     8ac:	8f e5       	ldi	r24, 0x5F	; 95
     8ae:	01 c0       	rjmp	.+2      	; 0x8b2 <display_sensors+0x4a>
     8b0:	88 e5       	ldi	r24, 0x58	; 88
     8b2:	0e 94 6e 06 	call	0xcdc	; 0xcdc <write_lcd_char>
	if(args[2] == '0'){
     8b6:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <sensor_buf+0x2>
     8ba:	80 33       	cpi	r24, 0x30	; 48
     8bc:	19 f4       	brne	.+6      	; 0x8c4 <display_sensors+0x5c>
		Summer_PlayMelody(MELODY_HONK);
     8be:	80 e0       	ldi	r24, 0x00	; 0
     8c0:	0e 94 1a 08 	call	0x1034	; 0x1034 <Summer_PlayMelody>
		
	}
	
	
	uint8_t b = 5;
     8c4:	c5 e0       	ldi	r28, 0x05	; 5
	while(args[++b] != ' ');
     8c6:	81 e0       	ldi	r24, 0x01	; 1
     8c8:	8c 0f       	add	r24, r28
     8ca:	e8 2f       	mov	r30, r24
     8cc:	f0 e0       	ldi	r31, 0x00	; 0
     8ce:	ec 5c       	subi	r30, 0xCC	; 204
     8d0:	fd 4f       	sbci	r31, 0xFD	; 253
     8d2:	90 81       	ld	r25, Z
     8d4:	90 32       	cpi	r25, 0x20	; 32
     8d6:	11 f0       	breq	.+4      	; 0x8dc <display_sensors+0x74>
     8d8:	c8 2f       	mov	r28, r24
     8da:	f5 cf       	rjmp	.-22     	; 0x8c6 <display_sensors+0x5e>
	args[b++] = '\0';
     8dc:	ce 5f       	subi	r28, 0xFE	; 254
     8de:	10 82       	st	Z, r1
     8e0:	8c 2f       	mov	r24, r28
	uint8_t k = b;
	while(args[++k] != ' ');
     8e2:	91 e0       	ldi	r25, 0x01	; 1
     8e4:	98 0f       	add	r25, r24
     8e6:	e9 2f       	mov	r30, r25
     8e8:	f0 e0       	ldi	r31, 0x00	; 0
     8ea:	ec 5c       	subi	r30, 0xCC	; 204
     8ec:	fd 4f       	sbci	r31, 0xFD	; 253
     8ee:	20 81       	ld	r18, Z
     8f0:	20 32       	cpi	r18, 0x20	; 32
     8f2:	11 f0       	breq	.+4      	; 0x8f8 <display_sensors+0x90>
     8f4:	89 2f       	mov	r24, r25
     8f6:	f5 cf       	rjmp	.-22     	; 0x8e2 <display_sensors+0x7a>
	args[k++] = '\0';
     8f8:	d2 e0       	ldi	r29, 0x02	; 2
     8fa:	d8 0f       	add	r29, r24
     8fc:	10 82       	st	Z, r1
	
	
	set_cursor_pos(FRONT_POS);
     8fe:	85 e0       	ldi	r24, 0x05	; 5
     900:	0e 94 95 06 	call	0xd2a	; 0xd2a <set_cursor_pos>
	if(b == 7 && args[0] == '0'){ //0 is sent for front
     904:	c7 30       	cpi	r28, 0x07	; 7
     906:	39 f4       	brne	.+14     	; 0x916 <__stack+0x17>
     908:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <sensor_buf>
     90c:	80 33       	cpi	r24, 0x30	; 48
     90e:	19 f4       	brne	.+6      	; 0x916 <__stack+0x17>
		write_lcd_string("!!!");
     910:	88 e5       	ldi	r24, 0x58	; 88
     912:	91 e0       	ldi	r25, 0x01	; 1
     914:	13 c0       	rjmp	.+38     	; 0x93c <__stack+0x3d>
	} else{
		for (int8_t i = 3-strlen(args+5); i > 0; i--) write_lcd_char(' ');
     916:	e9 e3       	ldi	r30, 0x39	; 57
     918:	f2 e0       	ldi	r31, 0x02	; 2
     91a:	01 90       	ld	r0, Z+
     91c:	00 20       	and	r0, r0
     91e:	e9 f7       	brne	.-6      	; 0x91a <__stack+0x1b>
     920:	cf 01       	movw	r24, r30
     922:	8a 53       	subi	r24, 0x3A	; 58
     924:	92 40       	sbci	r25, 0x02	; 2
     926:	13 e0       	ldi	r17, 0x03	; 3
     928:	18 1b       	sub	r17, r24
     92a:	11 16       	cp	r1, r17
     92c:	2c f4       	brge	.+10     	; 0x938 <__stack+0x39>
     92e:	80 e2       	ldi	r24, 0x20	; 32
     930:	0e 94 6e 06 	call	0xcdc	; 0xcdc <write_lcd_char>
     934:	11 50       	subi	r17, 0x01	; 1
     936:	f9 cf       	rjmp	.-14     	; 0x92a <__stack+0x2b>
		write_lcd_string(args+5);
     938:	89 e3       	ldi	r24, 0x39	; 57
     93a:	92 e0       	ldi	r25, 0x02	; 2
     93c:	0e 94 7d 06 	call	0xcfa	; 0xcfa <write_lcd_string>
	}
	
	set_cursor_pos(BACK_POS);
     940:	84 e1       	ldi	r24, 0x14	; 20
     942:	0e 94 95 06 	call	0xd2a	; 0xd2a <set_cursor_pos>
	if(k-b == 2 && args[b] == '0'){ //0 is sent for back
     946:	8d 2f       	mov	r24, r29
     948:	90 e0       	ldi	r25, 0x00	; 0
     94a:	d0 e0       	ldi	r29, 0x00	; 0
     94c:	8c 1b       	sub	r24, r28
     94e:	9d 0b       	sbc	r25, r29
     950:	02 97       	sbiw	r24, 0x02	; 2
     952:	49 f4       	brne	.+18     	; 0x966 <__stack+0x67>
     954:	fe 01       	movw	r30, r28
     956:	ec 5c       	subi	r30, 0xCC	; 204
     958:	fd 4f       	sbci	r31, 0xFD	; 253
     95a:	80 81       	ld	r24, Z
     95c:	80 33       	cpi	r24, 0x30	; 48
     95e:	19 f4       	brne	.+6      	; 0x966 <__stack+0x67>
		write_lcd_string("!!!");
     960:	88 e5       	ldi	r24, 0x58	; 88
     962:	91 e0       	ldi	r25, 0x01	; 1
     964:	11 c0       	rjmp	.+34     	; 0x988 <__stack+0x89>
	} else{
		for (int8_t i = 3-strlen(args+b); i > 0; i--) write_lcd_char(' ');
     966:	cc 5c       	subi	r28, 0xCC	; 204
     968:	dd 4f       	sbci	r29, 0xFD	; 253
     96a:	fe 01       	movw	r30, r28
     96c:	01 90       	ld	r0, Z+
     96e:	00 20       	and	r0, r0
     970:	e9 f7       	brne	.-6      	; 0x96c <__stack+0x6d>
     972:	1c 2f       	mov	r17, r28
     974:	1e 1b       	sub	r17, r30
     976:	1c 5f       	subi	r17, 0xFC	; 252
     978:	11 16       	cp	r1, r17
     97a:	2c f4       	brge	.+10     	; 0x986 <__stack+0x87>
     97c:	80 e2       	ldi	r24, 0x20	; 32
     97e:	0e 94 6e 06 	call	0xcdc	; 0xcdc <write_lcd_char>
     982:	11 50       	subi	r17, 0x01	; 1
     984:	f9 cf       	rjmp	.-14     	; 0x978 <__stack+0x79>
		write_lcd_string(args+b);
     986:	ce 01       	movw	r24, r28
	}
}
     988:	df 91       	pop	r29
     98a:	cf 91       	pop	r28
     98c:	1f 91       	pop	r17
	set_cursor_pos(BACK_POS);
	if(k-b == 2 && args[b] == '0'){ //0 is sent for back
		write_lcd_string("!!!");
	} else{
		for (int8_t i = 3-strlen(args+b); i > 0; i--) write_lcd_char(' ');
		write_lcd_string(args+b);
     98e:	0c 94 7d 06 	jmp	0xcfa	; 0xcfa <write_lcd_string>

00000992 <do_normal_program>:
	write_lcd_char(6);
	write_lcd_char(7);
}*/

void do_normal_program(){
	messages_move_queue();
     992:	0e 94 0e 07 	call	0xe1c	; 0xe1c <messages_move_queue>
	if(!output_buf_read){
     996:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <output_buf_read>
     99a:	81 11       	cpse	r24, r1
     99c:	0d c0       	rjmp	.+26     	; 0x9b8 <do_normal_program+0x26>
		set_cursor_pos(32);
     99e:	80 e2       	ldi	r24, 0x20	; 32
     9a0:	0e 94 95 06 	call	0xd2a	; 0xd2a <set_cursor_pos>
		char* buffer = (char*)messages_get_buffer();
     9a4:	0e 94 32 07 	call	0xe64	; 0xe64 <messages_get_buffer>
		write_lcd_string((buffer[0] == '\0') ? "                " : buffer);
     9a8:	fc 01       	movw	r30, r24
     9aa:	20 81       	ld	r18, Z
     9ac:	21 11       	cpse	r18, r1
     9ae:	02 c0       	rjmp	.+4      	; 0x9b4 <do_normal_program+0x22>
     9b0:	8c e5       	ldi	r24, 0x5C	; 92
     9b2:	91 e0       	ldi	r25, 0x01	; 1
     9b4:	0e 94 7d 06 	call	0xcfa	; 0xcfa <write_lcd_string>
	}
	
	if(sensors_received){
     9b8:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <sensors_received>
     9bc:	88 23       	and	r24, r24
     9be:	21 f0       	breq	.+8      	; 0x9c8 <do_normal_program+0x36>
		display_sensors();
     9c0:	0e 94 34 04 	call	0x868	; 0x868 <display_sensors>
		sensors_received = false;
     9c4:	10 92 87 01 	sts	0x0187, r1	; 0x800187 <sensors_received>
	}
	//draw_dick();
	if(!(BTN_PIN & 1<<DEADMANBTN)){
     9c8:	4c 99       	sbic	0x09, 4	; 9
     9ca:	0a c0       	rjmp	.+20     	; 0x9e0 <do_normal_program+0x4e>
		if(!(LED_PORT & (1<<LEDG))){
     9cc:	5d 99       	sbic	0x0b, 5	; 11
     9ce:	05 c0       	rjmp	.+10     	; 0x9da <do_normal_program+0x48>
			uart_send_line("041");
     9d0:	8d e6       	ldi	r24, 0x6D	; 109
     9d2:	91 e0       	ldi	r25, 0x01	; 1
     9d4:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <uart_send_line>
			LED_PORT |= 1<<LEDG;
     9d8:	5d 9a       	sbi	0x0b, 5	; 11
		}
		send_move_command();
     9da:	0e 94 19 03 	call	0x632	; 0x632 <send_move_command>
     9de:	07 c0       	rjmp	.+14     	; 0x9ee <do_normal_program+0x5c>
		} else{
		if(LED_PORT & (1<<LEDG)){
     9e0:	5d 9b       	sbis	0x0b, 5	; 11
     9e2:	05 c0       	rjmp	.+10     	; 0x9ee <do_normal_program+0x5c>
			uart_send_line("040");
     9e4:	81 e7       	ldi	r24, 0x71	; 113
     9e6:	91 e0       	ldi	r25, 0x01	; 1
     9e8:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <uart_send_line>
			LED_PORT &= ~(1<<LEDG);
     9ec:	5d 98       	cbi	0x0b, 5	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     9ee:	ff e7       	ldi	r31, 0x7F	; 127
     9f0:	28 e3       	ldi	r18, 0x38	; 56
     9f2:	81 e0       	ldi	r24, 0x01	; 1
     9f4:	f1 50       	subi	r31, 0x01	; 1
     9f6:	20 40       	sbci	r18, 0x00	; 0
     9f8:	80 40       	sbci	r24, 0x00	; 0
     9fa:	e1 f7       	brne	.-8      	; 0x9f4 <do_normal_program+0x62>
     9fc:	00 c0       	rjmp	.+0      	; 0x9fe <do_normal_program+0x6c>
     9fe:	00 00       	nop
     a00:	08 95       	ret

00000a02 <__vector_18>:
		for (int8_t i = 3-strlen(args+b); i > 0; i--) write_lcd_char(' ');
		write_lcd_string(args+b);
	}
}

ISR(USART_RX_vect){
     a02:	1f 92       	push	r1
     a04:	0f 92       	push	r0
     a06:	0f b6       	in	r0, 0x3f	; 63
     a08:	0f 92       	push	r0
     a0a:	11 24       	eor	r1, r1
     a0c:	2f 93       	push	r18
     a0e:	3f 93       	push	r19
     a10:	4f 93       	push	r20
     a12:	5f 93       	push	r21
     a14:	6f 93       	push	r22
     a16:	7f 93       	push	r23
     a18:	8f 93       	push	r24
     a1a:	9f 93       	push	r25
     a1c:	af 93       	push	r26
     a1e:	bf 93       	push	r27
     a20:	ef 93       	push	r30
     a22:	ff 93       	push	r31
	uart_linebuf[uart_bufind] = UDR0;
     a24:	e0 91 8b 01 	lds	r30, 0x018B	; 0x80018b <uart_bufind>
     a28:	f0 e0       	ldi	r31, 0x00	; 0
     a2a:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     a2e:	e0 5e       	subi	r30, 0xE0	; 224
     a30:	fd 4f       	sbci	r31, 0xFD	; 253
     a32:	80 83       	st	Z, r24
	if(uart_linebuf[uart_bufind] == '\n'){
     a34:	e0 91 8b 01 	lds	r30, 0x018B	; 0x80018b <uart_bufind>
     a38:	f0 e0       	ldi	r31, 0x00	; 0
     a3a:	e0 5e       	subi	r30, 0xE0	; 224
     a3c:	fd 4f       	sbci	r31, 0xFD	; 253
     a3e:	80 81       	ld	r24, Z
     a40:	8a 30       	cpi	r24, 0x0A	; 10
     a42:	89 f4       	brne	.+34     	; 0xa66 <__vector_18+0x64>
		uart_linebuf[uart_bufind] = '\0';
     a44:	e0 91 8b 01 	lds	r30, 0x018B	; 0x80018b <uart_bufind>
     a48:	f0 e0       	ldi	r31, 0x00	; 0
     a4a:	e0 5e       	subi	r30, 0xE0	; 224
     a4c:	fd 4f       	sbci	r31, 0xFD	; 253
     a4e:	10 82       	st	Z, r1
		//Do something
		perform_command(uart_linebuf[0], uart_linebuf[1], uart_linebuf+2);
     a50:	60 91 21 02 	lds	r22, 0x0221	; 0x800221 <uart_linebuf+0x1>
     a54:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <uart_linebuf>
     a58:	42 e2       	ldi	r20, 0x22	; 34
     a5a:	52 e0       	ldi	r21, 0x02	; 2
     a5c:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <perform_command>
		//Done something
		uart_bufind = 0;
     a60:	10 92 8b 01 	sts	0x018B, r1	; 0x80018b <uart_bufind>
     a64:	05 c0       	rjmp	.+10     	; 0xa70 <__vector_18+0x6e>
	} else{
		uart_bufind++;
     a66:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <uart_bufind>
     a6a:	8f 5f       	subi	r24, 0xFF	; 255
     a6c:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <uart_bufind>
	}
}
     a70:	ff 91       	pop	r31
     a72:	ef 91       	pop	r30
     a74:	bf 91       	pop	r27
     a76:	af 91       	pop	r26
     a78:	9f 91       	pop	r25
     a7a:	8f 91       	pop	r24
     a7c:	7f 91       	pop	r23
     a7e:	6f 91       	pop	r22
     a80:	5f 91       	pop	r21
     a82:	4f 91       	pop	r20
     a84:	3f 91       	pop	r19
     a86:	2f 91       	pop	r18
     a88:	0f 90       	pop	r0
     a8a:	0f be       	out	0x3f, r0	; 63
     a8c:	0f 90       	pop	r0
     a8e:	1f 90       	pop	r1
     a90:	18 95       	reti

00000a92 <btn_init>:

void btn_init(){
	BTN_DDR &= ~((1<<HONKBTN)|(1<<DEADMANBTN)|(1<<EXTRABTN));
     a92:	8a b1       	in	r24, 0x0a	; 10
     a94:	83 7e       	andi	r24, 0xE3	; 227
     a96:	8a b9       	out	0x0a, r24	; 10
	BTN_PORT |= (1<<HONKBTN)|(1<<DEADMANBTN)|(1<<EXTRABTN);
     a98:	8b b1       	in	r24, 0x0b	; 11
     a9a:	8c 61       	ori	r24, 0x1C	; 28
     a9c:	8b b9       	out	0x0b, r24	; 11
	EICRA = (2<<ISC00)|(2<<ISC10);
     a9e:	8a e0       	ldi	r24, 0x0A	; 10
     aa0:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
	EIMSK = 3;
     aa4:	83 e0       	ldi	r24, 0x03	; 3
     aa6:	8d bb       	out	0x1d, r24	; 29
     aa8:	08 95       	ret

00000aaa <__vector_1>:
}

//Extra
ISR(INT0_vect){
     aaa:	1f 92       	push	r1
     aac:	0f 92       	push	r0
     aae:	0f b6       	in	r0, 0x3f	; 63
     ab0:	0f 92       	push	r0
     ab2:	11 24       	eor	r1, r1
     ab4:	2f 93       	push	r18
     ab6:	3f 93       	push	r19
     ab8:	4f 93       	push	r20
     aba:	5f 93       	push	r21
     abc:	6f 93       	push	r22
     abe:	7f 93       	push	r23
     ac0:	8f 93       	push	r24
     ac2:	9f 93       	push	r25
     ac4:	af 93       	push	r26
     ac6:	bf 93       	push	r27
     ac8:	ef 93       	push	r30
     aca:	ff 93       	push	r31
	if((BTN_PIN & 1<<DEADMANBTN) && (read_avg_adc(0, 5) > 630)){
     acc:	4c 9b       	sbis	0x09, 4	; 9
     ace:	1a c0       	rjmp	.+52     	; 0xb04 <__vector_1+0x5a>
     ad0:	65 e0       	ldi	r22, 0x05	; 5
     ad2:	70 e0       	ldi	r23, 0x00	; 0
     ad4:	80 e0       	ldi	r24, 0x00	; 0
     ad6:	0e 94 24 06 	call	0xc48	; 0xc48 <read_avg_adc>
     ada:	87 37       	cpi	r24, 0x77	; 119
     adc:	92 40       	sbci	r25, 0x02	; 2
     ade:	90 f0       	brcs	.+36     	; 0xb04 <__vector_1+0x5a>
		x_rest = read_avg_adc(1, 25);
     ae0:	69 e1       	ldi	r22, 0x19	; 25
     ae2:	70 e0       	ldi	r23, 0x00	; 0
     ae4:	81 e0       	ldi	r24, 0x01	; 1
     ae6:	0e 94 24 06 	call	0xc48	; 0xc48 <read_avg_adc>
     aea:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <x_rest+0x1>
     aee:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <x_rest>
		y_rest = read_avg_adc(2, 25);
     af2:	69 e1       	ldi	r22, 0x19	; 25
     af4:	70 e0       	ldi	r23, 0x00	; 0
     af6:	82 e0       	ldi	r24, 0x02	; 2
     af8:	0e 94 24 06 	call	0xc48	; 0xc48 <read_avg_adc>
     afc:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <y_rest+0x1>
     b00:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <y_rest>
	}
}
     b04:	ff 91       	pop	r31
     b06:	ef 91       	pop	r30
     b08:	bf 91       	pop	r27
     b0a:	af 91       	pop	r26
     b0c:	9f 91       	pop	r25
     b0e:	8f 91       	pop	r24
     b10:	7f 91       	pop	r23
     b12:	6f 91       	pop	r22
     b14:	5f 91       	pop	r21
     b16:	4f 91       	pop	r20
     b18:	3f 91       	pop	r19
     b1a:	2f 91       	pop	r18
     b1c:	0f 90       	pop	r0
     b1e:	0f be       	out	0x3f, r0	; 63
     b20:	0f 90       	pop	r0
     b22:	1f 90       	pop	r1
     b24:	18 95       	reti

00000b26 <__vector_2>:

//Honk
ISR(INT1_vect){
     b26:	1f 92       	push	r1
     b28:	0f 92       	push	r0
     b2a:	0f b6       	in	r0, 0x3f	; 63
     b2c:	0f 92       	push	r0
     b2e:	11 24       	eor	r1, r1
     b30:	2f 93       	push	r18
     b32:	3f 93       	push	r19
     b34:	4f 93       	push	r20
     b36:	5f 93       	push	r21
     b38:	6f 93       	push	r22
     b3a:	7f 93       	push	r23
     b3c:	8f 93       	push	r24
     b3e:	9f 93       	push	r25
     b40:	af 93       	push	r26
     b42:	bf 93       	push	r27
     b44:	ef 93       	push	r30
     b46:	ff 93       	push	r31
	if(debounce_hundreths == 0){
     b48:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <debounce_hundreths>
     b4c:	81 11       	cpse	r24, r1
     b4e:	0c c0       	rjmp	.+24     	; 0xb68 <__vector_2+0x42>
		if(!(BTN_PIN & 1<<DEADMANBTN)){
     b50:	4c 99       	sbic	0x09, 4	; 9
     b52:	03 c0       	rjmp	.+6      	; 0xb5a <__vector_2+0x34>
			uart_send_line("020");
     b54:	85 e7       	ldi	r24, 0x75	; 117
     b56:	91 e0       	ldi	r25, 0x01	; 1
     b58:	02 c0       	rjmp	.+4      	; 0xb5e <__vector_2+0x38>
			} else{
			uart_send_line("32");
     b5a:	89 e7       	ldi	r24, 0x79	; 121
     b5c:	91 e0       	ldi	r25, 0x01	; 1
     b5e:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <uart_send_line>
		}
		debounce_hundreths = DEBOUNCE_VAL;	
     b62:	84 e1       	ldi	r24, 0x14	; 20
     b64:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <debounce_hundreths>
	}
}
     b68:	ff 91       	pop	r31
     b6a:	ef 91       	pop	r30
     b6c:	bf 91       	pop	r27
     b6e:	af 91       	pop	r26
     b70:	9f 91       	pop	r25
     b72:	8f 91       	pop	r24
     b74:	7f 91       	pop	r23
     b76:	6f 91       	pop	r22
     b78:	5f 91       	pop	r21
     b7a:	4f 91       	pop	r20
     b7c:	3f 91       	pop	r19
     b7e:	2f 91       	pop	r18
     b80:	0f 90       	pop	r0
     b82:	0f be       	out	0x3f, r0	; 63
     b84:	0f 90       	pop	r0
     b86:	1f 90       	pop	r1
     b88:	18 95       	reti

00000b8a <led_init>:

void led_init(){
	LED_DDR |= (1<<LEDG)|(1<<LEDR1)|(1<<LEDR2);
     b8a:	8a b1       	in	r24, 0x0a	; 10
     b8c:	80 6e       	ori	r24, 0xE0	; 224
     b8e:	8a b9       	out	0x0a, r24	; 10
	LED_PORT &= ~((1<<LEDG)|(1<<LEDR1));
     b90:	8b b1       	in	r24, 0x0b	; 11
     b92:	8f 79       	andi	r24, 0x9F	; 159
     b94:	8b b9       	out	0x0b, r24	; 11
	LED_PORT |= 1<<LEDR2;
     b96:	5f 9a       	sbi	0x0b, 7	; 11
     b98:	08 95       	ret

00000b9a <main>:
char itoabuf[15] = "03";


int main(void)
{
	spi_init();
     b9a:	0e 94 38 07 	call	0xe70	; 0xe70 <spi_init>
     b9e:	2f ef       	ldi	r18, 0xFF	; 255
     ba0:	80 e7       	ldi	r24, 0x70	; 112
     ba2:	92 e0       	ldi	r25, 0x02	; 2
     ba4:	21 50       	subi	r18, 0x01	; 1
     ba6:	80 40       	sbci	r24, 0x00	; 0
     ba8:	90 40       	sbci	r25, 0x00	; 0
     baa:	e1 f7       	brne	.-8      	; 0xba4 <main+0xa>
     bac:	00 c0       	rjmp	.+0      	; 0xbae <main+0x14>
     bae:	00 00       	nop
	_delay_ms(100);
	lcd_init();
     bb0:	0e 94 4f 06 	call	0xc9e	; 0xc9e <lcd_init>
	set_character_pgm(3, p3);
	set_character_pgm(4, p4);
	set_character_pgm(5, p5);
	set_character_pgm(6, p6);
	set_character_pgm(7, p7);*/
	adc_init();
     bb4:	0e 94 18 06 	call	0xc30	; 0xc30 <adc_init>
	uart_init();
     bb8:	0e 94 0d 06 	call	0xc1a	; 0xc1a <uart_init>
	uart_flush();
     bbc:	0e 94 05 06 	call	0xc0a	; 0xc0a <uart_flush>
	led_init();
     bc0:	0e 94 c5 05 	call	0xb8a	; 0xb8a <led_init>
	btn_init();
     bc4:	0e 94 49 05 	call	0xa92	; 0xa92 <btn_init>
	Summer_Init();
     bc8:	0e 94 12 08 	call	0x1024	; 0x1024 <Summer_Init>
	timer_init();
     bcc:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <timer_init>
	print_lcd_static();
     bd0:	0e 94 a2 03 	call	0x744	; 0x744 <print_lcd_static>
	sei();
     bd4:	78 94       	sei
	
    while (1) 
    {
		switch(program_mode){
     bd6:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <program_mode>
     bda:	81 11       	cpse	r24, r1
     bdc:	fc cf       	rjmp	.-8      	; 0xbd6 <main+0x3c>
			case MAIN_MODE:
				do_normal_program();
     bde:	0e 94 c9 04 	call	0x992	; 0x992 <do_normal_program>
				break;
     be2:	f9 cf       	rjmp	.-14     	; 0xbd6 <main+0x3c>

00000be4 <uart_send_line>:

bool uart_receive_byte(uint8_t* buffer){
	if(!( UCSR0A & (1<<RXC0))) return false;
	*buffer = UDR0;
	return true;
}
     be4:	fc 01       	movw	r30, r24
     be6:	91 91       	ld	r25, Z+
     be8:	99 23       	and	r25, r25
     bea:	39 f0       	breq	.+14     	; 0xbfa <uart_send_line+0x16>
     bec:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     bf0:	85 ff       	sbrs	r24, 5
     bf2:	fc cf       	rjmp	.-8      	; 0xbec <uart_send_line+0x8>
     bf4:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     bf8:	f6 cf       	rjmp	.-20     	; 0xbe6 <uart_send_line+0x2>
     bfa:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     bfe:	85 ff       	sbrs	r24, 5
     c00:	fc cf       	rjmp	.-8      	; 0xbfa <uart_send_line+0x16>
     c02:	8a e0       	ldi	r24, 0x0A	; 10
     c04:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     c08:	08 95       	ret

00000c0a <uart_flush>:

void uart_flush(){
	uint8_t dummy;
	while ( UCSR0A & (1<<RXC0) ) dummy = UDR0;
     c0a:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     c0e:	87 ff       	sbrs	r24, 7
     c10:	03 c0       	rjmp	.+6      	; 0xc18 <uart_flush+0xe>
     c12:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     c16:	f9 cf       	rjmp	.-14     	; 0xc0a <uart_flush>
}
     c18:	08 95       	ret

00000c1a <uart_init>:

void uart_init(){
	UBRR0 = 0;		//0==500000 baud rate.  12==38400 baud rate
     c1a:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
     c1e:	10 92 c4 00 	sts	0x00C4, r1	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UCSR0B = (1<<RXEN0)|(1<<TXEN0)|(1<<RXCIE0);
     c22:	88 e9       	ldi	r24, 0x98	; 152
     c24:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	/* Set frame format: 8data, 1stop bit */
	UCSR0C = (0<<USBS0)|(3<<UCSZ00);
     c28:	86 e0       	ldi	r24, 0x06	; 6
     c2a:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
     c2e:	08 95       	ret

00000c30 <adc_init>:
	//Start conversion
	ADCSRA |= 1<<ADSC;
	//Wait for completion and return result
	while( ADCSRA & 1<<ADSC);
	return ADC;
}
     c30:	87 b1       	in	r24, 0x07	; 7
     c32:	88 7f       	andi	r24, 0xF8	; 248
     c34:	87 b9       	out	0x07, r24	; 7
     c36:	86 e8       	ldi	r24, 0x86	; 134
     c38:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     c3c:	88 e3       	ldi	r24, 0x38	; 56
     c3e:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7f807e>
     c42:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
     c46:	08 95       	ret

00000c48 <read_avg_adc>:
/* the average ADC-value from ADCH and ADCL	from the given amount		*/
/* of iterations														*/
/* @param port The port to read from (0-3)								*/
/* @param iterations The amount of iterations to take average from		*/
/************************************************************************/
uint16_t read_avg_adc(uint8_t port, uint16_t iterations){
     c48:	9b 01       	movw	r18, r22
	//Choose port and reference voltage
	ADMUX = port|(1<<REFS0);
     c4a:	80 64       	ori	r24, 0x40	; 64
     c4c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	uint32_t sum = 0;
	//Start given amount of conversions and add up results
	for (uint8_t i = 0; i < iterations; i++){
     c50:	40 e0       	ldi	r20, 0x00	; 0
/* @param iterations The amount of iterations to take average from		*/
/************************************************************************/
uint16_t read_avg_adc(uint8_t port, uint16_t iterations){
	//Choose port and reference voltage
	ADMUX = port|(1<<REFS0);
	uint32_t sum = 0;
     c52:	60 e0       	ldi	r22, 0x00	; 0
     c54:	70 e0       	ldi	r23, 0x00	; 0
     c56:	cb 01       	movw	r24, r22
	//Start given amount of conversions and add up results
	for (uint8_t i = 0; i < iterations; i++){
     c58:	e4 2f       	mov	r30, r20
     c5a:	f0 e0       	ldi	r31, 0x00	; 0
     c5c:	e2 17       	cp	r30, r18
     c5e:	f3 07       	cpc	r31, r19
     c60:	98 f4       	brcc	.+38     	; 0xc88 <read_avg_adc+0x40>
		ADCSRA |= 1<<ADSC;
     c62:	50 91 7a 00 	lds	r21, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     c66:	50 64       	ori	r21, 0x40	; 64
     c68:	50 93 7a 00 	sts	0x007A, r21	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
		while( ADCSRA & 1<<ADSC);
     c6c:	50 91 7a 00 	lds	r21, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     c70:	56 fd       	sbrc	r21, 6
     c72:	fc cf       	rjmp	.-8      	; 0xc6c <read_avg_adc+0x24>
		sum += ADC;
     c74:	e0 91 78 00 	lds	r30, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     c78:	f0 91 79 00 	lds	r31, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     c7c:	6e 0f       	add	r22, r30
     c7e:	7f 1f       	adc	r23, r31
     c80:	81 1d       	adc	r24, r1
     c82:	91 1d       	adc	r25, r1
uint16_t read_avg_adc(uint8_t port, uint16_t iterations){
	//Choose port and reference voltage
	ADMUX = port|(1<<REFS0);
	uint32_t sum = 0;
	//Start given amount of conversions and add up results
	for (uint8_t i = 0; i < iterations; i++){
     c84:	4f 5f       	subi	r20, 0xFF	; 255
     c86:	e8 cf       	rjmp	.-48     	; 0xc58 <read_avg_adc+0x10>
		ADCSRA |= 1<<ADSC;
		while( ADCSRA & 1<<ADSC);
		sum += ADC;
	}
	//Return truncated average
	return (uint16_t)(sum/iterations);
     c88:	40 e0       	ldi	r20, 0x00	; 0
     c8a:	50 e0       	ldi	r21, 0x00	; 0
     c8c:	0e 94 be 0b 	call	0x177c	; 0x177c <__udivmodsi4>
     c90:	c9 01       	movw	r24, r18
     c92:	08 95       	ret

00000c94 <spi_tx>:
/************************************************************************/
void clear_LCD(){
	PORTB &= ~(1<<CSB);   //Clear CSB
	spi_tx(0x01);
	_delay_ms(1.5);
	cursor_pos = 0;
     c94:	8e bd       	out	0x2e, r24	; 46
     c96:	0d b4       	in	r0, 0x2d	; 45
     c98:	07 fe       	sbrs	r0, 7
     c9a:	fd cf       	rjmp	.-6      	; 0xc96 <spi_tx+0x2>
     c9c:	08 95       	ret

00000c9e <lcd_init>:
     c9e:	cf 93       	push	r28
     ca0:	df 93       	push	r29
     ca2:	84 b1       	in	r24, 0x04	; 4
     ca4:	85 60       	ori	r24, 0x05	; 5
     ca6:	84 b9       	out	0x04, r24	; 4
     ca8:	85 b1       	in	r24, 0x05	; 5
     caa:	8a 7f       	andi	r24, 0xFA	; 250
     cac:	85 b9       	out	0x05, r24	; 5
     cae:	ca ee       	ldi	r28, 0xEA	; 234
     cb0:	d0 e0       	ldi	r29, 0x00	; 0
     cb2:	fe 01       	movw	r30, r28
     cb4:	84 91       	lpm	r24, Z
     cb6:	0e 94 4a 06 	call	0xc94	; 0xc94 <spi_tx>
     cba:	87 eb       	ldi	r24, 0xB7	; 183
     cbc:	9b e0       	ldi	r25, 0x0B	; 11
     cbe:	01 97       	sbiw	r24, 0x01	; 1
     cc0:	f1 f7       	brne	.-4      	; 0xcbe <lcd_init+0x20>
     cc2:	00 c0       	rjmp	.+0      	; 0xcc4 <lcd_init+0x26>
     cc4:	00 00       	nop
     cc6:	21 96       	adiw	r28, 0x01	; 1
     cc8:	90 e0       	ldi	r25, 0x00	; 0
     cca:	c3 3f       	cpi	r28, 0xF3	; 243
     ccc:	d9 07       	cpc	r29, r25
     cce:	89 f7       	brne	.-30     	; 0xcb2 <lcd_init+0x14>
     cd0:	10 92 8c 01 	sts	0x018C, r1	; 0x80018c <cursor_pos>
     cd4:	2a 9a       	sbi	0x05, 2	; 5
     cd6:	df 91       	pop	r29
     cd8:	cf 91       	pop	r28
     cda:	08 95       	ret

00000cdc <write_lcd_char>:
     cdc:	28 9a       	sbi	0x05, 0	; 5
     cde:	2a 98       	cbi	0x05, 2	; 5
     ce0:	0e 94 4a 06 	call	0xc94	; 0xc94 <spi_tx>
     ce4:	80 e5       	ldi	r24, 0x50	; 80
     ce6:	8a 95       	dec	r24
     ce8:	f1 f7       	brne	.-4      	; 0xce6 <write_lcd_char+0xa>
     cea:	28 98       	cbi	0x05, 0	; 5
     cec:	2a 9a       	sbi	0x05, 2	; 5
     cee:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <cursor_pos>
     cf2:	8f 5f       	subi	r24, 0xFF	; 255
     cf4:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <cursor_pos>
     cf8:	08 95       	ret

00000cfa <write_lcd_string>:
     cfa:	cf 93       	push	r28
     cfc:	df 93       	push	r29
     cfe:	28 9a       	sbi	0x05, 0	; 5
     d00:	2a 98       	cbi	0x05, 2	; 5
     d02:	ec 01       	movw	r28, r24
     d04:	89 91       	ld	r24, Y+
     d06:	88 23       	and	r24, r24
     d08:	59 f0       	breq	.+22     	; 0xd20 <write_lcd_string+0x26>
     d0a:	0e 94 4a 06 	call	0xc94	; 0xc94 <spi_tx>
     d0e:	80 e5       	ldi	r24, 0x50	; 80
     d10:	8a 95       	dec	r24
     d12:	f1 f7       	brne	.-4      	; 0xd10 <write_lcd_string+0x16>
     d14:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <cursor_pos>
     d18:	8f 5f       	subi	r24, 0xFF	; 255
     d1a:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <cursor_pos>
     d1e:	f2 cf       	rjmp	.-28     	; 0xd04 <write_lcd_string+0xa>
     d20:	28 98       	cbi	0x05, 0	; 5
     d22:	2a 9a       	sbi	0x05, 2	; 5
     d24:	df 91       	pop	r29
     d26:	cf 91       	pop	r28
     d28:	08 95       	ret

00000d2a <set_cursor_pos>:

/************************************************************************/
/* Sets the LCD cursors position.										*/
/* @param pos The position to set to									*/
/************************************************************************/
void set_cursor_pos(uint8_t pos){
     d2a:	cf 93       	push	r28
     d2c:	c8 2f       	mov	r28, r24
	PORTB &= ~(1<<CSB);   //Clear CSB
     d2e:	2a 98       	cbi	0x05, 2	; 5
	spi_tx(pos|0x80);
     d30:	80 68       	ori	r24, 0x80	; 128
     d32:	0e 94 4a 06 	call	0xc94	; 0xc94 <spi_tx>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     d36:	80 e5       	ldi	r24, 0x50	; 80
     d38:	8a 95       	dec	r24
     d3a:	f1 f7       	brne	.-4      	; 0xd38 <set_cursor_pos+0xe>
	_delay_us(30);
	cursor_pos = pos;
     d3c:	c0 93 8c 01 	sts	0x018C, r28	; 0x80018c <cursor_pos>
}
     d40:	cf 91       	pop	r28
     d42:	08 95       	ret

00000d44 <messages_timerproc>:
/*bool for tracking if any message is active*/
static volatile bool message_displaying = false;

/*Keeps time running and clears buffer on deactivation of a message*/
void messages_timerproc(){
	if(message_displaying && ++message_parts > 100){
     d44:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <message_displaying>
     d48:	88 23       	and	r24, r24
     d4a:	19 f1       	breq	.+70     	; 0xd92 <messages_timerproc+0x4e>
     d4c:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <message_parts>
     d50:	90 91 1b 02 	lds	r25, 0x021B	; 0x80021b <message_parts+0x1>
     d54:	01 96       	adiw	r24, 0x01	; 1
     d56:	90 93 1b 02 	sts	0x021B, r25	; 0x80021b <message_parts+0x1>
     d5a:	80 93 1a 02 	sts	0x021A, r24	; 0x80021a <message_parts>
     d5e:	85 36       	cpi	r24, 0x65	; 101
     d60:	91 05       	cpc	r25, r1
     d62:	b8 f0       	brcs	.+46     	; 0xd92 <messages_timerproc+0x4e>
		if(++message_seconds > DISP_TIME){
     d64:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <message_seconds>
     d68:	8f 5f       	subi	r24, 0xFF	; 255
     d6a:	80 93 19 02 	sts	0x0219, r24	; 0x800219 <message_seconds>
     d6e:	86 30       	cpi	r24, 0x06	; 6
     d70:	60 f0       	brcs	.+24     	; 0xd8a <messages_timerproc+0x46>
			message_seconds = 0;
     d72:	10 92 19 02 	sts	0x0219, r1	; 0x800219 <message_seconds>
			message_displaying = false;
     d76:	10 92 8d 01 	sts	0x018D, r1	; 0x80018d <message_displaying>
			strcpy((char*)output_buf, "");
     d7a:	6c e6       	ldi	r22, 0x6C	; 108
     d7c:	71 e0       	ldi	r23, 0x01	; 1
     d7e:	84 e4       	ldi	r24, 0x44	; 68
     d80:	92 e0       	ldi	r25, 0x02	; 2
     d82:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <strcpy>
			output_buf_read = false;
     d86:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <output_buf_read>
		}
		message_parts = 0;
     d8a:	10 92 1b 02 	sts	0x021B, r1	; 0x80021b <message_parts+0x1>
     d8e:	10 92 1a 02 	sts	0x021A, r1	; 0x80021a <message_parts>
     d92:	08 95       	ret

00000d94 <messages_force>:
	}
}

/*Forces a message to be copied into buffer and marks buffer as changed*/
void messages_force(char* msg){
	message_displaying = true;
     d94:	21 e0       	ldi	r18, 0x01	; 1
     d96:	20 93 8d 01 	sts	0x018D, r18	; 0x80018d <message_displaying>
	/*Reset time counter to display for full time*/
	message_parts = 0;
     d9a:	10 92 1b 02 	sts	0x021B, r1	; 0x80021b <message_parts+0x1>
     d9e:	10 92 1a 02 	sts	0x021A, r1	; 0x80021a <message_parts>
	message_seconds = 0;
     da2:	10 92 19 02 	sts	0x0219, r1	; 0x800219 <message_seconds>
	strcpy((char*)output_buf, msg);
     da6:	bc 01       	movw	r22, r24
     da8:	84 e4       	ldi	r24, 0x44	; 68
     daa:	92 e0       	ldi	r25, 0x02	; 2
     dac:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <strcpy>
	output_buf_read = false;
     db0:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <output_buf_read>
     db4:	08 95       	ret

00000db6 <messages_queue>:
}

/*Queues a message. Forces front most message out of queue if queue is full*/
void messages_queue(char* msg){
     db6:	cf 93       	push	r28
     db8:	df 93       	push	r29
     dba:	ec 01       	movw	r28, r24
	if(message_count == MSGBUF_SIZE){
     dbc:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <message_count>
     dc0:	88 30       	cpi	r24, 0x08	; 8
     dc2:	81 f4       	brne	.+32     	; 0xde4 <messages_queue+0x2e>
		messages_force((char*)(message_buf)[MOD_BUFSIZE(message_extract_ind++)]);
     dc4:	80 91 8f 01 	lds	r24, 0x018F	; 0x80018f <message_extract_ind>
     dc8:	91 e0       	ldi	r25, 0x01	; 1
     dca:	98 0f       	add	r25, r24
     dcc:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <message_extract_ind>
     dd0:	87 70       	andi	r24, 0x07	; 7
     dd2:	21 e1       	ldi	r18, 0x11	; 17
     dd4:	82 9f       	mul	r24, r18
     dd6:	c0 01       	movw	r24, r0
     dd8:	11 24       	eor	r1, r1
     dda:	8f 56       	subi	r24, 0x6F	; 111
     ddc:	9e 4f       	sbci	r25, 0xFE	; 254
     dde:	0e 94 ca 06 	call	0xd94	; 0xd94 <messages_force>
     de2:	0a c0       	rjmp	.+20     	; 0xdf8 <messages_queue+0x42>
	} else if(++message_count > MSGBUF_SIZE) message_count = MSGBUF_SIZE;
     de4:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <message_count>
     de8:	8f 5f       	subi	r24, 0xFF	; 255
     dea:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <message_count>
     dee:	89 30       	cpi	r24, 0x09	; 9
     df0:	18 f0       	brcs	.+6      	; 0xdf8 <messages_queue+0x42>
     df2:	88 e0       	ldi	r24, 0x08	; 8
     df4:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <message_count>
	strcpy((char*)(message_buf)[MOD_BUFSIZE(message_insert_ind++)], msg);
     df8:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <message_insert_ind>
     dfc:	91 e0       	ldi	r25, 0x01	; 1
     dfe:	98 0f       	add	r25, r24
     e00:	90 93 90 01 	sts	0x0190, r25	; 0x800190 <message_insert_ind>
     e04:	87 70       	andi	r24, 0x07	; 7
     e06:	21 e1       	ldi	r18, 0x11	; 17
     e08:	82 9f       	mul	r24, r18
     e0a:	c0 01       	movw	r24, r0
     e0c:	11 24       	eor	r1, r1
     e0e:	be 01       	movw	r22, r28
     e10:	8f 56       	subi	r24, 0x6F	; 111
     e12:	9e 4f       	sbci	r25, 0xFE	; 254
}
     e14:	df 91       	pop	r29
     e16:	cf 91       	pop	r28
/*Queues a message. Forces front most message out of queue if queue is full*/
void messages_queue(char* msg){
	if(message_count == MSGBUF_SIZE){
		messages_force((char*)(message_buf)[MOD_BUFSIZE(message_extract_ind++)]);
	} else if(++message_count > MSGBUF_SIZE) message_count = MSGBUF_SIZE;
	strcpy((char*)(message_buf)[MOD_BUFSIZE(message_insert_ind++)], msg);
     e18:	0c 94 ff 0b 	jmp	0x17fe	; 0x17fe <strcpy>

00000e1c <messages_move_queue>:
}

/*Moves queue along if no message is active*/
void messages_move_queue(){
	if(message_count > 0 && !message_displaying){
     e1c:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <message_count>
     e20:	88 23       	and	r24, r24
     e22:	f9 f0       	breq	.+62     	; 0xe62 <messages_move_queue+0x46>
     e24:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <message_displaying>
     e28:	81 11       	cpse	r24, r1
     e2a:	1b c0       	rjmp	.+54     	; 0xe62 <messages_move_queue+0x46>
		/*Copy next message to output buffer and increment/decremnt index and counter*/
		strcpy((char*)output_buf, (char*)(message_buf)[MOD_BUFSIZE(message_extract_ind++)]);
     e2c:	60 91 8f 01 	lds	r22, 0x018F	; 0x80018f <message_extract_ind>
     e30:	81 e0       	ldi	r24, 0x01	; 1
     e32:	86 0f       	add	r24, r22
     e34:	80 93 8f 01 	sts	0x018F, r24	; 0x80018f <message_extract_ind>
     e38:	67 70       	andi	r22, 0x07	; 7
     e3a:	81 e1       	ldi	r24, 0x11	; 17
     e3c:	68 9f       	mul	r22, r24
     e3e:	b0 01       	movw	r22, r0
     e40:	11 24       	eor	r1, r1
     e42:	6f 56       	subi	r22, 0x6F	; 111
     e44:	7e 4f       	sbci	r23, 0xFE	; 254
     e46:	84 e4       	ldi	r24, 0x44	; 68
     e48:	92 e0       	ldi	r25, 0x02	; 2
     e4a:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <strcpy>
		output_buf_read = false;
     e4e:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <output_buf_read>
		message_displaying = true;
     e52:	81 e0       	ldi	r24, 0x01	; 1
     e54:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <message_displaying>
		message_count--;
     e58:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <message_count>
     e5c:	81 50       	subi	r24, 0x01	; 1
     e5e:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <message_count>
     e62:	08 95       	ret

00000e64 <messages_get_buffer>:
	}
}

/*Mark buffer as read and return pointer to buffer*/
volatile char* messages_get_buffer(){
	output_buf_read = true;
     e64:	81 e0       	ldi	r24, 0x01	; 1
     e66:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <output_buf_read>
	return output_buf;
     e6a:	84 e4       	ldi	r24, 0x44	; 68
     e6c:	92 e0       	ldi	r25, 0x02	; 2
     e6e:	08 95       	ret

00000e70 <spi_init>:
/************************************************************************/
/* Initiates the MCU SPI as master with 16 as prescaler factor           */
/************************************************************************/
void spi_init(){
	// Set MOSI and SCK as out
	DDRB |= (1<<MOSI) | (1<<SCK) | (1<<SS);
     e70:	84 b1       	in	r24, 0x04	; 4
     e72:	8c 62       	ori	r24, 0x2C	; 44
     e74:	84 b9       	out	0x04, r24	; 4
	DDRB &= ~(1<<MISO);
     e76:	24 98       	cbi	0x04, 4	; 4
	//Enable SPI in master mode with fck/4 as clock
	SPCR = (1<<SPE) | (1<<MSTR);
     e78:	80 e5       	ldi	r24, 0x50	; 80
     e7a:	8c bd       	out	0x2c, r24	; 44
     e7c:	08 95       	ret

00000e7e <Summer_PlayNote>:
static volatile uint16_t note_time = 0; // The timer cycles left for current note
static volatile uint8_t cur_melody;     // The index of the current melody
static volatile uint8_t current_note;   // The index of the curent note

// Plays a single note on the buzzer
void Summer_PlayNote(uint8_t note){
     e7e:	cf 92       	push	r12
     e80:	df 92       	push	r13
     e82:	ef 92       	push	r14
     e84:	ff 92       	push	r15
     e86:	cf 93       	push	r28
     e88:	df 93       	push	r29
     e8a:	d8 2f       	mov	r29, r24
    if(GET_PITCH_EXP(note) == -1){  // Stop buzzer if note is a rest
     e8c:	68 2f       	mov	r22, r24
     e8e:	70 e0       	ldi	r23, 0x00	; 0
     e90:	6f 71       	andi	r22, 0x1F	; 31
#ifdef SUMMER_USE_SW
        rest = true;
#else
        TCCR1A &= ~(1<<COM1A0);
     e92:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
static volatile uint8_t cur_melody;     // The index of the current melody
static volatile uint8_t current_note;   // The index of the curent note

// Plays a single note on the buzzer
void Summer_PlayNote(uint8_t note){
    if(GET_PITCH_EXP(note) == -1){  // Stop buzzer if note is a rest
     e96:	61 15       	cp	r22, r1
     e98:	71 05       	cpc	r23, r1
     e9a:	21 f4       	brne	.+8      	; 0xea4 <Summer_PlayNote+0x26>
#ifdef SUMMER_USE_SW
        rest = true;
#else
        TCCR1A &= ~(1<<COM1A0);
     e9c:	8f 7b       	andi	r24, 0xBF	; 191
     e9e:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
     ea2:	21 c0       	rjmp	.+66     	; 0xee6 <Summer_PlayNote+0x68>
#endif
    } else{                         // Start buzzer and set correct frequency
#ifdef SUMMER_USE_SW
        rest = false;
#else
        TCCR1A |= (1<<COM1A0);
     ea4:	80 64       	ori	r24, 0x40	; 64
     ea6:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
#endif
        OCR1A = LOWC_OCR / (pow(ROOT12_2,GET_PITCH_EXP(note)));
     eaa:	61 50       	subi	r22, 0x01	; 1
     eac:	71 09       	sbc	r23, r1
     eae:	07 2e       	mov	r0, r23
     eb0:	00 0c       	add	r0, r0
     eb2:	88 0b       	sbc	r24, r24
     eb4:	99 0b       	sbc	r25, r25
     eb6:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <__floatsisf>
     eba:	9b 01       	movw	r18, r22
     ebc:	ac 01       	movw	r20, r24
     ebe:	6d e7       	ldi	r22, 0x7D	; 125
     ec0:	7c e9       	ldi	r23, 0x9C	; 156
     ec2:	87 e8       	ldi	r24, 0x87	; 135
     ec4:	9f e3       	ldi	r25, 0x3F	; 63
     ec6:	0e 94 5f 09 	call	0x12be	; 0x12be <pow>
     eca:	9b 01       	movw	r18, r22
     ecc:	ac 01       	movw	r20, r24
     ece:	60 e0       	ldi	r22, 0x00	; 0
     ed0:	70 e6       	ldi	r23, 0x60	; 96
     ed2:	80 e7       	ldi	r24, 0x70	; 112
     ed4:	96 e4       	ldi	r25, 0x46	; 70
     ed6:	0e 94 30 08 	call	0x1060	; 0x1060 <__divsf3>
     eda:	0e 94 a2 08 	call	0x1144	; 0x1144 <__fixunssfsi>
     ede:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     ee2:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
    }
    // cycles needed = frequency / (bar time) / (note length divisor)
    note_time = ((F_CPU/(OCR1A + 1))/(bpms[cur_melody]/(240.0)))/GET_DURATION_DIV(note);
     ee6:	20 91 88 00 	lds	r18, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
     eea:	30 91 89 00 	lds	r19, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     eee:	c0 91 1d 02 	lds	r28, 0x021D	; 0x80021d <cur_melody>
     ef2:	2f 5f       	subi	r18, 0xFF	; 255
     ef4:	3f 4f       	sbci	r19, 0xFF	; 255
     ef6:	40 e0       	ldi	r20, 0x00	; 0
     ef8:	50 e0       	ldi	r21, 0x00	; 0
     efa:	60 e0       	ldi	r22, 0x00	; 0
     efc:	72 e1       	ldi	r23, 0x12	; 18
     efe:	8a e7       	ldi	r24, 0x7A	; 122
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <__divmodsi4>
     f06:	ca 01       	movw	r24, r20
     f08:	b9 01       	movw	r22, r18
     f0a:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <__floatsisf>
     f0e:	6b 01       	movw	r12, r22
     f10:	7c 01       	movw	r14, r24
     f12:	ec 2f       	mov	r30, r28
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	e4 58       	subi	r30, 0x84	; 132
     f18:	fe 4f       	sbci	r31, 0xFE	; 254
     f1a:	60 81       	ld	r22, Z
     f1c:	70 e0       	ldi	r23, 0x00	; 0
     f1e:	80 e0       	ldi	r24, 0x00	; 0
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <__floatsisf>
     f26:	20 e0       	ldi	r18, 0x00	; 0
     f28:	30 e0       	ldi	r19, 0x00	; 0
     f2a:	40 e7       	ldi	r20, 0x70	; 112
     f2c:	53 e4       	ldi	r21, 0x43	; 67
     f2e:	0e 94 30 08 	call	0x1060	; 0x1060 <__divsf3>
     f32:	9b 01       	movw	r18, r22
     f34:	ac 01       	movw	r20, r24
     f36:	c7 01       	movw	r24, r14
     f38:	b6 01       	movw	r22, r12
     f3a:	0e 94 30 08 	call	0x1060	; 0x1060 <__divsf3>
     f3e:	6b 01       	movw	r12, r22
     f40:	7c 01       	movw	r14, r24
     f42:	d2 95       	swap	r29
     f44:	d6 95       	lsr	r29
     f46:	d7 70       	andi	r29, 0x07	; 7
     f48:	61 e0       	ldi	r22, 0x01	; 1
     f4a:	70 e0       	ldi	r23, 0x00	; 0
     f4c:	02 c0       	rjmp	.+4      	; 0xf52 <Summer_PlayNote+0xd4>
     f4e:	66 0f       	add	r22, r22
     f50:	77 1f       	adc	r23, r23
     f52:	da 95       	dec	r29
     f54:	e2 f7       	brpl	.-8      	; 0xf4e <Summer_PlayNote+0xd0>
     f56:	07 2e       	mov	r0, r23
     f58:	00 0c       	add	r0, r0
     f5a:	88 0b       	sbc	r24, r24
     f5c:	99 0b       	sbc	r25, r25
     f5e:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <__floatsisf>
     f62:	9b 01       	movw	r18, r22
     f64:	ac 01       	movw	r20, r24
     f66:	c7 01       	movw	r24, r14
     f68:	b6 01       	movw	r22, r12
     f6a:	0e 94 30 08 	call	0x1060	; 0x1060 <__divsf3>
     f6e:	0e 94 a2 08 	call	0x1144	; 0x1144 <__fixunssfsi>
     f72:	70 93 1f 02 	sts	0x021F, r23	; 0x80021f <note_time+0x1>
     f76:	60 93 1e 02 	sts	0x021E, r22	; 0x80021e <note_time>
}
     f7a:	df 91       	pop	r29
     f7c:	cf 91       	pop	r28
     f7e:	ff 90       	pop	r15
     f80:	ef 90       	pop	r14
     f82:	df 90       	pop	r13
     f84:	cf 90       	pop	r12
     f86:	08 95       	ret

00000f88 <__vector_11>:

// Interrupt vector to play next note after the current notes length is passed
// Stops the melody when it encounters a 0xFF
ISR(TIMER1_COMPA_vect){
     f88:	1f 92       	push	r1
     f8a:	0f 92       	push	r0
     f8c:	0f b6       	in	r0, 0x3f	; 63
     f8e:	0f 92       	push	r0
     f90:	11 24       	eor	r1, r1
     f92:	2f 93       	push	r18
     f94:	3f 93       	push	r19
     f96:	4f 93       	push	r20
     f98:	5f 93       	push	r21
     f9a:	6f 93       	push	r22
     f9c:	7f 93       	push	r23
     f9e:	8f 93       	push	r24
     fa0:	9f 93       	push	r25
     fa2:	af 93       	push	r26
     fa4:	bf 93       	push	r27
     fa6:	ef 93       	push	r30
     fa8:	ff 93       	push	r31
    if(rest)
        SW_SUMMER_PORT &= ~(1<<SUMMER_PIN);
    else
        SW_SUMMER_PORT ^= (1<<SUMMER_PIN);
#endif
    note_time--; 
     faa:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <note_time>
     fae:	90 91 1f 02 	lds	r25, 0x021F	; 0x80021f <note_time+0x1>
     fb2:	01 97       	sbiw	r24, 0x01	; 1
     fb4:	90 93 1f 02 	sts	0x021F, r25	; 0x80021f <note_time+0x1>
     fb8:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <note_time>
    if (note_time == 0){
     fbc:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <note_time>
     fc0:	90 91 1f 02 	lds	r25, 0x021F	; 0x80021f <note_time+0x1>
     fc4:	89 2b       	or	r24, r25
     fc6:	e9 f4       	brne	.+58     	; 0x1002 <__vector_11+0x7a>
        current_note++;
     fc8:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <current_note>
     fcc:	8f 5f       	subi	r24, 0xFF	; 255
     fce:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <current_note>
        // Read next note from program memory
        uint8_t note = pgm_read_byte(&(melodies[cur_melody][current_note]));
     fd2:	e0 91 1d 02 	lds	r30, 0x021D	; 0x80021d <cur_melody>
     fd6:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <current_note>
     fda:	f0 e0       	ldi	r31, 0x00	; 0
     fdc:	fe 2f       	mov	r31, r30
     fde:	ee 27       	eor	r30, r30
     fe0:	e8 0f       	add	r30, r24
     fe2:	f1 1d       	adc	r31, r1
     fe4:	ed 50       	subi	r30, 0x0D	; 13
     fe6:	ff 4f       	sbci	r31, 0xFF	; 255
     fe8:	84 91       	lpm	r24, Z
        if(note == 0x00){   // Stop buzzer if 0xFF
     fea:	81 11       	cpse	r24, r1
     fec:	08 c0       	rjmp	.+16     	; 0xffe <__vector_11+0x76>
            TIMSK1 = 0;
     fee:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
            TCCR1B &= ~(1<<CS10);
     ff2:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     ff6:	8e 7f       	andi	r24, 0xFE	; 254
     ff8:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     ffc:	02 c0       	rjmp	.+4      	; 0x1002 <__vector_11+0x7a>
#ifdef SUMMER_USE_SW
            SW_SUMMER_PORT &= ~(1<<SUMMER_PIN);
#endif
        } else
            Summer_PlayNote(note);
     ffe:	0e 94 3f 07 	call	0xe7e	; 0xe7e <Summer_PlayNote>
    }
}
    1002:	ff 91       	pop	r31
    1004:	ef 91       	pop	r30
    1006:	bf 91       	pop	r27
    1008:	af 91       	pop	r26
    100a:	9f 91       	pop	r25
    100c:	8f 91       	pop	r24
    100e:	7f 91       	pop	r23
    1010:	6f 91       	pop	r22
    1012:	5f 91       	pop	r21
    1014:	4f 91       	pop	r20
    1016:	3f 91       	pop	r19
    1018:	2f 91       	pop	r18
    101a:	0f 90       	pop	r0
    101c:	0f be       	out	0x3f, r0	; 63
    101e:	0f 90       	pop	r0
    1020:	1f 90       	pop	r1
    1022:	18 95       	reti

00001024 <Summer_Init>:

// ------------- PUBLIC -------------

// Initializes the summer
void Summer_Init(void){
    SUMMER_DDR |= (1<<SUMMER_PIN);
    1024:	21 9a       	sbi	0x04, 1	; 4
    // Start timer
#ifdef SUMMER_USE_SW
    TCCR1A = 0;
#else
    TCCR1A = (1<<COM1A0);
    1026:	80 e4       	ldi	r24, 0x40	; 64
    1028:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
#endif
    TCCR1B = (1<<WGM12);
    102c:	88 e0       	ldi	r24, 0x08	; 8
    102e:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    1032:	08 95       	ret

00001034 <Summer_PlayMelody>:
}

// Plays a specified melody on the buzzer
void Summer_PlayMelody(uint8_t melody){
    cur_melody = melody;
    1034:	80 93 1d 02 	sts	0x021D, r24	; 0x80021d <cur_melody>
    current_note = 0;
    1038:	10 92 1c 02 	sts	0x021C, r1	; 0x80021c <current_note>
    Summer_PlayNote(pgm_read_byte(&(melodies[melody][0])));
    103c:	e8 2f       	mov	r30, r24
    103e:	f0 e0       	ldi	r31, 0x00	; 0
    1040:	fe 2f       	mov	r31, r30
    1042:	ee 27       	eor	r30, r30
    1044:	ed 50       	subi	r30, 0x0D	; 13
    1046:	ff 4f       	sbci	r31, 0xFF	; 255
    1048:	84 91       	lpm	r24, Z
    104a:	0e 94 3f 07 	call	0xe7e	; 0xe7e <Summer_PlayNote>
    TIMSK1 = (1<<OCIE1A);
    104e:	82 e0       	ldi	r24, 0x02	; 2
    1050:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
    TCCR1B |= (1<<CS10);
    1054:	e1 e8       	ldi	r30, 0x81	; 129
    1056:	f0 e0       	ldi	r31, 0x00	; 0
    1058:	80 81       	ld	r24, Z
    105a:	81 60       	ori	r24, 0x01	; 1
    105c:	80 83       	st	Z, r24
    105e:	08 95       	ret

00001060 <__divsf3>:
    1060:	0e 94 44 08 	call	0x1088	; 0x1088 <__divsf3x>
    1064:	0c 94 25 09 	jmp	0x124a	; 0x124a <__fp_round>
    1068:	0e 94 1e 09 	call	0x123c	; 0x123c <__fp_pscB>
    106c:	58 f0       	brcs	.+22     	; 0x1084 <__divsf3+0x24>
    106e:	0e 94 17 09 	call	0x122e	; 0x122e <__fp_pscA>
    1072:	40 f0       	brcs	.+16     	; 0x1084 <__divsf3+0x24>
    1074:	29 f4       	brne	.+10     	; 0x1080 <__divsf3+0x20>
    1076:	5f 3f       	cpi	r21, 0xFF	; 255
    1078:	29 f0       	breq	.+10     	; 0x1084 <__divsf3+0x24>
    107a:	0c 94 0e 09 	jmp	0x121c	; 0x121c <__fp_inf>
    107e:	51 11       	cpse	r21, r1
    1080:	0c 94 59 09 	jmp	0x12b2	; 0x12b2 <__fp_szero>
    1084:	0c 94 14 09 	jmp	0x1228	; 0x1228 <__fp_nan>

00001088 <__divsf3x>:
    1088:	0e 94 36 09 	call	0x126c	; 0x126c <__fp_split3>
    108c:	68 f3       	brcs	.-38     	; 0x1068 <__divsf3+0x8>

0000108e <__divsf3_pse>:
    108e:	99 23       	and	r25, r25
    1090:	b1 f3       	breq	.-20     	; 0x107e <__divsf3+0x1e>
    1092:	55 23       	and	r21, r21
    1094:	91 f3       	breq	.-28     	; 0x107a <__divsf3+0x1a>
    1096:	95 1b       	sub	r25, r21
    1098:	55 0b       	sbc	r21, r21
    109a:	bb 27       	eor	r27, r27
    109c:	aa 27       	eor	r26, r26
    109e:	62 17       	cp	r22, r18
    10a0:	73 07       	cpc	r23, r19
    10a2:	84 07       	cpc	r24, r20
    10a4:	38 f0       	brcs	.+14     	; 0x10b4 <__divsf3_pse+0x26>
    10a6:	9f 5f       	subi	r25, 0xFF	; 255
    10a8:	5f 4f       	sbci	r21, 0xFF	; 255
    10aa:	22 0f       	add	r18, r18
    10ac:	33 1f       	adc	r19, r19
    10ae:	44 1f       	adc	r20, r20
    10b0:	aa 1f       	adc	r26, r26
    10b2:	a9 f3       	breq	.-22     	; 0x109e <__divsf3_pse+0x10>
    10b4:	35 d0       	rcall	.+106    	; 0x1120 <__divsf3_pse+0x92>
    10b6:	0e 2e       	mov	r0, r30
    10b8:	3a f0       	brmi	.+14     	; 0x10c8 <__divsf3_pse+0x3a>
    10ba:	e0 e8       	ldi	r30, 0x80	; 128
    10bc:	32 d0       	rcall	.+100    	; 0x1122 <__divsf3_pse+0x94>
    10be:	91 50       	subi	r25, 0x01	; 1
    10c0:	50 40       	sbci	r21, 0x00	; 0
    10c2:	e6 95       	lsr	r30
    10c4:	00 1c       	adc	r0, r0
    10c6:	ca f7       	brpl	.-14     	; 0x10ba <__divsf3_pse+0x2c>
    10c8:	2b d0       	rcall	.+86     	; 0x1120 <__divsf3_pse+0x92>
    10ca:	fe 2f       	mov	r31, r30
    10cc:	29 d0       	rcall	.+82     	; 0x1120 <__divsf3_pse+0x92>
    10ce:	66 0f       	add	r22, r22
    10d0:	77 1f       	adc	r23, r23
    10d2:	88 1f       	adc	r24, r24
    10d4:	bb 1f       	adc	r27, r27
    10d6:	26 17       	cp	r18, r22
    10d8:	37 07       	cpc	r19, r23
    10da:	48 07       	cpc	r20, r24
    10dc:	ab 07       	cpc	r26, r27
    10de:	b0 e8       	ldi	r27, 0x80	; 128
    10e0:	09 f0       	breq	.+2      	; 0x10e4 <__divsf3_pse+0x56>
    10e2:	bb 0b       	sbc	r27, r27
    10e4:	80 2d       	mov	r24, r0
    10e6:	bf 01       	movw	r22, r30
    10e8:	ff 27       	eor	r31, r31
    10ea:	93 58       	subi	r25, 0x83	; 131
    10ec:	5f 4f       	sbci	r21, 0xFF	; 255
    10ee:	3a f0       	brmi	.+14     	; 0x10fe <__divsf3_pse+0x70>
    10f0:	9e 3f       	cpi	r25, 0xFE	; 254
    10f2:	51 05       	cpc	r21, r1
    10f4:	78 f0       	brcs	.+30     	; 0x1114 <__divsf3_pse+0x86>
    10f6:	0c 94 0e 09 	jmp	0x121c	; 0x121c <__fp_inf>
    10fa:	0c 94 59 09 	jmp	0x12b2	; 0x12b2 <__fp_szero>
    10fe:	5f 3f       	cpi	r21, 0xFF	; 255
    1100:	e4 f3       	brlt	.-8      	; 0x10fa <__divsf3_pse+0x6c>
    1102:	98 3e       	cpi	r25, 0xE8	; 232
    1104:	d4 f3       	brlt	.-12     	; 0x10fa <__divsf3_pse+0x6c>
    1106:	86 95       	lsr	r24
    1108:	77 95       	ror	r23
    110a:	67 95       	ror	r22
    110c:	b7 95       	ror	r27
    110e:	f7 95       	ror	r31
    1110:	9f 5f       	subi	r25, 0xFF	; 255
    1112:	c9 f7       	brne	.-14     	; 0x1106 <__divsf3_pse+0x78>
    1114:	88 0f       	add	r24, r24
    1116:	91 1d       	adc	r25, r1
    1118:	96 95       	lsr	r25
    111a:	87 95       	ror	r24
    111c:	97 f9       	bld	r25, 7
    111e:	08 95       	ret
    1120:	e1 e0       	ldi	r30, 0x01	; 1
    1122:	66 0f       	add	r22, r22
    1124:	77 1f       	adc	r23, r23
    1126:	88 1f       	adc	r24, r24
    1128:	bb 1f       	adc	r27, r27
    112a:	62 17       	cp	r22, r18
    112c:	73 07       	cpc	r23, r19
    112e:	84 07       	cpc	r24, r20
    1130:	ba 07       	cpc	r27, r26
    1132:	20 f0       	brcs	.+8      	; 0x113c <__divsf3_pse+0xae>
    1134:	62 1b       	sub	r22, r18
    1136:	73 0b       	sbc	r23, r19
    1138:	84 0b       	sbc	r24, r20
    113a:	ba 0b       	sbc	r27, r26
    113c:	ee 1f       	adc	r30, r30
    113e:	88 f7       	brcc	.-30     	; 0x1122 <__divsf3_pse+0x94>
    1140:	e0 95       	com	r30
    1142:	08 95       	ret

00001144 <__fixunssfsi>:
    1144:	0e 94 3e 09 	call	0x127c	; 0x127c <__fp_splitA>
    1148:	88 f0       	brcs	.+34     	; 0x116c <__fixunssfsi+0x28>
    114a:	9f 57       	subi	r25, 0x7F	; 127
    114c:	98 f0       	brcs	.+38     	; 0x1174 <__fixunssfsi+0x30>
    114e:	b9 2f       	mov	r27, r25
    1150:	99 27       	eor	r25, r25
    1152:	b7 51       	subi	r27, 0x17	; 23
    1154:	b0 f0       	brcs	.+44     	; 0x1182 <__fixunssfsi+0x3e>
    1156:	e1 f0       	breq	.+56     	; 0x1190 <__fixunssfsi+0x4c>
    1158:	66 0f       	add	r22, r22
    115a:	77 1f       	adc	r23, r23
    115c:	88 1f       	adc	r24, r24
    115e:	99 1f       	adc	r25, r25
    1160:	1a f0       	brmi	.+6      	; 0x1168 <__fixunssfsi+0x24>
    1162:	ba 95       	dec	r27
    1164:	c9 f7       	brne	.-14     	; 0x1158 <__fixunssfsi+0x14>
    1166:	14 c0       	rjmp	.+40     	; 0x1190 <__fixunssfsi+0x4c>
    1168:	b1 30       	cpi	r27, 0x01	; 1
    116a:	91 f0       	breq	.+36     	; 0x1190 <__fixunssfsi+0x4c>
    116c:	0e 94 58 09 	call	0x12b0	; 0x12b0 <__fp_zero>
    1170:	b1 e0       	ldi	r27, 0x01	; 1
    1172:	08 95       	ret
    1174:	0c 94 58 09 	jmp	0x12b0	; 0x12b0 <__fp_zero>
    1178:	67 2f       	mov	r22, r23
    117a:	78 2f       	mov	r23, r24
    117c:	88 27       	eor	r24, r24
    117e:	b8 5f       	subi	r27, 0xF8	; 248
    1180:	39 f0       	breq	.+14     	; 0x1190 <__fixunssfsi+0x4c>
    1182:	b9 3f       	cpi	r27, 0xF9	; 249
    1184:	cc f3       	brlt	.-14     	; 0x1178 <__fixunssfsi+0x34>
    1186:	86 95       	lsr	r24
    1188:	77 95       	ror	r23
    118a:	67 95       	ror	r22
    118c:	b3 95       	inc	r27
    118e:	d9 f7       	brne	.-10     	; 0x1186 <__fixunssfsi+0x42>
    1190:	3e f4       	brtc	.+14     	; 0x11a0 <__fixunssfsi+0x5c>
    1192:	90 95       	com	r25
    1194:	80 95       	com	r24
    1196:	70 95       	com	r23
    1198:	61 95       	neg	r22
    119a:	7f 4f       	sbci	r23, 0xFF	; 255
    119c:	8f 4f       	sbci	r24, 0xFF	; 255
    119e:	9f 4f       	sbci	r25, 0xFF	; 255
    11a0:	08 95       	ret

000011a2 <__floatunsisf>:
    11a2:	e8 94       	clt
    11a4:	09 c0       	rjmp	.+18     	; 0x11b8 <__floatsisf+0x12>

000011a6 <__floatsisf>:
    11a6:	97 fb       	bst	r25, 7
    11a8:	3e f4       	brtc	.+14     	; 0x11b8 <__floatsisf+0x12>
    11aa:	90 95       	com	r25
    11ac:	80 95       	com	r24
    11ae:	70 95       	com	r23
    11b0:	61 95       	neg	r22
    11b2:	7f 4f       	sbci	r23, 0xFF	; 255
    11b4:	8f 4f       	sbci	r24, 0xFF	; 255
    11b6:	9f 4f       	sbci	r25, 0xFF	; 255
    11b8:	99 23       	and	r25, r25
    11ba:	a9 f0       	breq	.+42     	; 0x11e6 <__floatsisf+0x40>
    11bc:	f9 2f       	mov	r31, r25
    11be:	96 e9       	ldi	r25, 0x96	; 150
    11c0:	bb 27       	eor	r27, r27
    11c2:	93 95       	inc	r25
    11c4:	f6 95       	lsr	r31
    11c6:	87 95       	ror	r24
    11c8:	77 95       	ror	r23
    11ca:	67 95       	ror	r22
    11cc:	b7 95       	ror	r27
    11ce:	f1 11       	cpse	r31, r1
    11d0:	f8 cf       	rjmp	.-16     	; 0x11c2 <__floatsisf+0x1c>
    11d2:	fa f4       	brpl	.+62     	; 0x1212 <__floatsisf+0x6c>
    11d4:	bb 0f       	add	r27, r27
    11d6:	11 f4       	brne	.+4      	; 0x11dc <__floatsisf+0x36>
    11d8:	60 ff       	sbrs	r22, 0
    11da:	1b c0       	rjmp	.+54     	; 0x1212 <__floatsisf+0x6c>
    11dc:	6f 5f       	subi	r22, 0xFF	; 255
    11de:	7f 4f       	sbci	r23, 0xFF	; 255
    11e0:	8f 4f       	sbci	r24, 0xFF	; 255
    11e2:	9f 4f       	sbci	r25, 0xFF	; 255
    11e4:	16 c0       	rjmp	.+44     	; 0x1212 <__floatsisf+0x6c>
    11e6:	88 23       	and	r24, r24
    11e8:	11 f0       	breq	.+4      	; 0x11ee <__floatsisf+0x48>
    11ea:	96 e9       	ldi	r25, 0x96	; 150
    11ec:	11 c0       	rjmp	.+34     	; 0x1210 <__floatsisf+0x6a>
    11ee:	77 23       	and	r23, r23
    11f0:	21 f0       	breq	.+8      	; 0x11fa <__floatsisf+0x54>
    11f2:	9e e8       	ldi	r25, 0x8E	; 142
    11f4:	87 2f       	mov	r24, r23
    11f6:	76 2f       	mov	r23, r22
    11f8:	05 c0       	rjmp	.+10     	; 0x1204 <__floatsisf+0x5e>
    11fa:	66 23       	and	r22, r22
    11fc:	71 f0       	breq	.+28     	; 0x121a <__floatsisf+0x74>
    11fe:	96 e8       	ldi	r25, 0x86	; 134
    1200:	86 2f       	mov	r24, r22
    1202:	70 e0       	ldi	r23, 0x00	; 0
    1204:	60 e0       	ldi	r22, 0x00	; 0
    1206:	2a f0       	brmi	.+10     	; 0x1212 <__floatsisf+0x6c>
    1208:	9a 95       	dec	r25
    120a:	66 0f       	add	r22, r22
    120c:	77 1f       	adc	r23, r23
    120e:	88 1f       	adc	r24, r24
    1210:	da f7       	brpl	.-10     	; 0x1208 <__floatsisf+0x62>
    1212:	88 0f       	add	r24, r24
    1214:	96 95       	lsr	r25
    1216:	87 95       	ror	r24
    1218:	97 f9       	bld	r25, 7
    121a:	08 95       	ret

0000121c <__fp_inf>:
    121c:	97 f9       	bld	r25, 7
    121e:	9f 67       	ori	r25, 0x7F	; 127
    1220:	80 e8       	ldi	r24, 0x80	; 128
    1222:	70 e0       	ldi	r23, 0x00	; 0
    1224:	60 e0       	ldi	r22, 0x00	; 0
    1226:	08 95       	ret

00001228 <__fp_nan>:
    1228:	9f ef       	ldi	r25, 0xFF	; 255
    122a:	80 ec       	ldi	r24, 0xC0	; 192
    122c:	08 95       	ret

0000122e <__fp_pscA>:
    122e:	00 24       	eor	r0, r0
    1230:	0a 94       	dec	r0
    1232:	16 16       	cp	r1, r22
    1234:	17 06       	cpc	r1, r23
    1236:	18 06       	cpc	r1, r24
    1238:	09 06       	cpc	r0, r25
    123a:	08 95       	ret

0000123c <__fp_pscB>:
    123c:	00 24       	eor	r0, r0
    123e:	0a 94       	dec	r0
    1240:	12 16       	cp	r1, r18
    1242:	13 06       	cpc	r1, r19
    1244:	14 06       	cpc	r1, r20
    1246:	05 06       	cpc	r0, r21
    1248:	08 95       	ret

0000124a <__fp_round>:
    124a:	09 2e       	mov	r0, r25
    124c:	03 94       	inc	r0
    124e:	00 0c       	add	r0, r0
    1250:	11 f4       	brne	.+4      	; 0x1256 <__fp_round+0xc>
    1252:	88 23       	and	r24, r24
    1254:	52 f0       	brmi	.+20     	; 0x126a <__fp_round+0x20>
    1256:	bb 0f       	add	r27, r27
    1258:	40 f4       	brcc	.+16     	; 0x126a <__fp_round+0x20>
    125a:	bf 2b       	or	r27, r31
    125c:	11 f4       	brne	.+4      	; 0x1262 <__fp_round+0x18>
    125e:	60 ff       	sbrs	r22, 0
    1260:	04 c0       	rjmp	.+8      	; 0x126a <__fp_round+0x20>
    1262:	6f 5f       	subi	r22, 0xFF	; 255
    1264:	7f 4f       	sbci	r23, 0xFF	; 255
    1266:	8f 4f       	sbci	r24, 0xFF	; 255
    1268:	9f 4f       	sbci	r25, 0xFF	; 255
    126a:	08 95       	ret

0000126c <__fp_split3>:
    126c:	57 fd       	sbrc	r21, 7
    126e:	90 58       	subi	r25, 0x80	; 128
    1270:	44 0f       	add	r20, r20
    1272:	55 1f       	adc	r21, r21
    1274:	59 f0       	breq	.+22     	; 0x128c <__fp_splitA+0x10>
    1276:	5f 3f       	cpi	r21, 0xFF	; 255
    1278:	71 f0       	breq	.+28     	; 0x1296 <__fp_splitA+0x1a>
    127a:	47 95       	ror	r20

0000127c <__fp_splitA>:
    127c:	88 0f       	add	r24, r24
    127e:	97 fb       	bst	r25, 7
    1280:	99 1f       	adc	r25, r25
    1282:	61 f0       	breq	.+24     	; 0x129c <__fp_splitA+0x20>
    1284:	9f 3f       	cpi	r25, 0xFF	; 255
    1286:	79 f0       	breq	.+30     	; 0x12a6 <__fp_splitA+0x2a>
    1288:	87 95       	ror	r24
    128a:	08 95       	ret
    128c:	12 16       	cp	r1, r18
    128e:	13 06       	cpc	r1, r19
    1290:	14 06       	cpc	r1, r20
    1292:	55 1f       	adc	r21, r21
    1294:	f2 cf       	rjmp	.-28     	; 0x127a <__fp_split3+0xe>
    1296:	46 95       	lsr	r20
    1298:	f1 df       	rcall	.-30     	; 0x127c <__fp_splitA>
    129a:	08 c0       	rjmp	.+16     	; 0x12ac <__fp_splitA+0x30>
    129c:	16 16       	cp	r1, r22
    129e:	17 06       	cpc	r1, r23
    12a0:	18 06       	cpc	r1, r24
    12a2:	99 1f       	adc	r25, r25
    12a4:	f1 cf       	rjmp	.-30     	; 0x1288 <__fp_splitA+0xc>
    12a6:	86 95       	lsr	r24
    12a8:	71 05       	cpc	r23, r1
    12aa:	61 05       	cpc	r22, r1
    12ac:	08 94       	sec
    12ae:	08 95       	ret

000012b0 <__fp_zero>:
    12b0:	e8 94       	clt

000012b2 <__fp_szero>:
    12b2:	bb 27       	eor	r27, r27
    12b4:	66 27       	eor	r22, r22
    12b6:	77 27       	eor	r23, r23
    12b8:	cb 01       	movw	r24, r22
    12ba:	97 f9       	bld	r25, 7
    12bc:	08 95       	ret

000012be <pow>:
    12be:	fa 01       	movw	r30, r20
    12c0:	ee 0f       	add	r30, r30
    12c2:	ff 1f       	adc	r31, r31
    12c4:	30 96       	adiw	r30, 0x00	; 0
    12c6:	21 05       	cpc	r18, r1
    12c8:	31 05       	cpc	r19, r1
    12ca:	a1 f1       	breq	.+104    	; 0x1334 <pow+0x76>
    12cc:	61 15       	cp	r22, r1
    12ce:	71 05       	cpc	r23, r1
    12d0:	61 f4       	brne	.+24     	; 0x12ea <pow+0x2c>
    12d2:	80 38       	cpi	r24, 0x80	; 128
    12d4:	bf e3       	ldi	r27, 0x3F	; 63
    12d6:	9b 07       	cpc	r25, r27
    12d8:	49 f1       	breq	.+82     	; 0x132c <pow+0x6e>
    12da:	68 94       	set
    12dc:	90 38       	cpi	r25, 0x80	; 128
    12de:	81 05       	cpc	r24, r1
    12e0:	61 f0       	breq	.+24     	; 0x12fa <pow+0x3c>
    12e2:	80 38       	cpi	r24, 0x80	; 128
    12e4:	bf ef       	ldi	r27, 0xFF	; 255
    12e6:	9b 07       	cpc	r25, r27
    12e8:	41 f0       	breq	.+16     	; 0x12fa <pow+0x3c>
    12ea:	99 23       	and	r25, r25
    12ec:	4a f5       	brpl	.+82     	; 0x1340 <pow+0x82>
    12ee:	ff 3f       	cpi	r31, 0xFF	; 255
    12f0:	e1 05       	cpc	r30, r1
    12f2:	31 05       	cpc	r19, r1
    12f4:	21 05       	cpc	r18, r1
    12f6:	19 f1       	breq	.+70     	; 0x133e <pow+0x80>
    12f8:	e8 94       	clt
    12fa:	08 94       	sec
    12fc:	e7 95       	ror	r30
    12fe:	d9 01       	movw	r26, r18
    1300:	aa 23       	and	r26, r26
    1302:	29 f4       	brne	.+10     	; 0x130e <pow+0x50>
    1304:	ab 2f       	mov	r26, r27
    1306:	be 2f       	mov	r27, r30
    1308:	f8 5f       	subi	r31, 0xF8	; 248
    130a:	d0 f3       	brcs	.-12     	; 0x1300 <pow+0x42>
    130c:	10 c0       	rjmp	.+32     	; 0x132e <pow+0x70>
    130e:	ff 5f       	subi	r31, 0xFF	; 255
    1310:	70 f4       	brcc	.+28     	; 0x132e <pow+0x70>
    1312:	a6 95       	lsr	r26
    1314:	e0 f7       	brcc	.-8      	; 0x130e <pow+0x50>
    1316:	f7 39       	cpi	r31, 0x97	; 151
    1318:	50 f0       	brcs	.+20     	; 0x132e <pow+0x70>
    131a:	19 f0       	breq	.+6      	; 0x1322 <pow+0x64>
    131c:	ff 3a       	cpi	r31, 0xAF	; 175
    131e:	38 f4       	brcc	.+14     	; 0x132e <pow+0x70>
    1320:	9f 77       	andi	r25, 0x7F	; 127
    1322:	9f 93       	push	r25
    1324:	0d d0       	rcall	.+26     	; 0x1340 <pow+0x82>
    1326:	0f 90       	pop	r0
    1328:	07 fc       	sbrc	r0, 7
    132a:	90 58       	subi	r25, 0x80	; 128
    132c:	08 95       	ret
    132e:	46 f0       	brts	.+16     	; 0x1340 <pow+0x82>
    1330:	0c 94 14 09 	jmp	0x1228	; 0x1228 <__fp_nan>
    1334:	60 e0       	ldi	r22, 0x00	; 0
    1336:	70 e0       	ldi	r23, 0x00	; 0
    1338:	80 e8       	ldi	r24, 0x80	; 128
    133a:	9f e3       	ldi	r25, 0x3F	; 63
    133c:	08 95       	ret
    133e:	4f e7       	ldi	r20, 0x7F	; 127
    1340:	9f 77       	andi	r25, 0x7F	; 127
    1342:	5f 93       	push	r21
    1344:	4f 93       	push	r20
    1346:	3f 93       	push	r19
    1348:	2f 93       	push	r18
    134a:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <log>
    134e:	2f 91       	pop	r18
    1350:	3f 91       	pop	r19
    1352:	4f 91       	pop	r20
    1354:	5f 91       	pop	r21
    1356:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <__mulsf3>
    135a:	0c 94 b7 09 	jmp	0x136e	; 0x136e <exp>
    135e:	29 f4       	brne	.+10     	; 0x136a <pow+0xac>
    1360:	16 f0       	brts	.+4      	; 0x1366 <pow+0xa8>
    1362:	0c 94 0e 09 	jmp	0x121c	; 0x121c <__fp_inf>
    1366:	0c 94 58 09 	jmp	0x12b0	; 0x12b0 <__fp_zero>
    136a:	0c 94 14 09 	jmp	0x1228	; 0x1228 <__fp_nan>

0000136e <exp>:
    136e:	0e 94 3e 09 	call	0x127c	; 0x127c <__fp_splitA>
    1372:	a8 f3       	brcs	.-22     	; 0x135e <pow+0xa0>
    1374:	96 38       	cpi	r25, 0x86	; 134
    1376:	a0 f7       	brcc	.-24     	; 0x1360 <pow+0xa2>
    1378:	07 f8       	bld	r0, 7
    137a:	0f 92       	push	r0
    137c:	e8 94       	clt
    137e:	2b e3       	ldi	r18, 0x3B	; 59
    1380:	3a ea       	ldi	r19, 0xAA	; 170
    1382:	48 eb       	ldi	r20, 0xB8	; 184
    1384:	5f e7       	ldi	r21, 0x7F	; 127
    1386:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <__mulsf3_pse>
    138a:	0f 92       	push	r0
    138c:	0f 92       	push	r0
    138e:	0f 92       	push	r0
    1390:	4d b7       	in	r20, 0x3d	; 61
    1392:	5e b7       	in	r21, 0x3e	; 62
    1394:	0f 92       	push	r0
    1396:	0e 94 a2 0a 	call	0x1544	; 0x1544 <modf>
    139a:	e8 e6       	ldi	r30, 0x68	; 104
    139c:	f0 e0       	ldi	r31, 0x00	; 0
    139e:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <__fp_powser>
    13a2:	4f 91       	pop	r20
    13a4:	5f 91       	pop	r21
    13a6:	ef 91       	pop	r30
    13a8:	ff 91       	pop	r31
    13aa:	e5 95       	asr	r30
    13ac:	ee 1f       	adc	r30, r30
    13ae:	ff 1f       	adc	r31, r31
    13b0:	49 f0       	breq	.+18     	; 0x13c4 <exp+0x56>
    13b2:	fe 57       	subi	r31, 0x7E	; 126
    13b4:	e0 68       	ori	r30, 0x80	; 128
    13b6:	44 27       	eor	r20, r20
    13b8:	ee 0f       	add	r30, r30
    13ba:	44 1f       	adc	r20, r20
    13bc:	fa 95       	dec	r31
    13be:	e1 f7       	brne	.-8      	; 0x13b8 <exp+0x4a>
    13c0:	41 95       	neg	r20
    13c2:	55 0b       	sbc	r21, r21
    13c4:	0e 94 1c 0a 	call	0x1438	; 0x1438 <ldexp>
    13c8:	0f 90       	pop	r0
    13ca:	07 fe       	sbrs	r0, 7
    13cc:	0c 94 10 0a 	jmp	0x1420	; 0x1420 <inverse>
    13d0:	08 95       	ret

000013d2 <__fp_powser>:
    13d2:	df 93       	push	r29
    13d4:	cf 93       	push	r28
    13d6:	1f 93       	push	r17
    13d8:	0f 93       	push	r16
    13da:	ff 92       	push	r15
    13dc:	ef 92       	push	r14
    13de:	df 92       	push	r13
    13e0:	7b 01       	movw	r14, r22
    13e2:	8c 01       	movw	r16, r24
    13e4:	68 94       	set
    13e6:	06 c0       	rjmp	.+12     	; 0x13f4 <__fp_powser+0x22>
    13e8:	da 2e       	mov	r13, r26
    13ea:	ef 01       	movw	r28, r30
    13ec:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <__mulsf3x>
    13f0:	fe 01       	movw	r30, r28
    13f2:	e8 94       	clt
    13f4:	a5 91       	lpm	r26, Z+
    13f6:	25 91       	lpm	r18, Z+
    13f8:	35 91       	lpm	r19, Z+
    13fa:	45 91       	lpm	r20, Z+
    13fc:	55 91       	lpm	r21, Z+
    13fe:	a6 f3       	brts	.-24     	; 0x13e8 <__fp_powser+0x16>
    1400:	ef 01       	movw	r28, r30
    1402:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <__addsf3x>
    1406:	fe 01       	movw	r30, r28
    1408:	97 01       	movw	r18, r14
    140a:	a8 01       	movw	r20, r16
    140c:	da 94       	dec	r13
    140e:	69 f7       	brne	.-38     	; 0x13ea <__fp_powser+0x18>
    1410:	df 90       	pop	r13
    1412:	ef 90       	pop	r14
    1414:	ff 90       	pop	r15
    1416:	0f 91       	pop	r16
    1418:	1f 91       	pop	r17
    141a:	cf 91       	pop	r28
    141c:	df 91       	pop	r29
    141e:	08 95       	ret

00001420 <inverse>:
    1420:	9b 01       	movw	r18, r22
    1422:	ac 01       	movw	r20, r24
    1424:	60 e0       	ldi	r22, 0x00	; 0
    1426:	70 e0       	ldi	r23, 0x00	; 0
    1428:	80 e8       	ldi	r24, 0x80	; 128
    142a:	9f e3       	ldi	r25, 0x3F	; 63
    142c:	0c 94 30 08 	jmp	0x1060	; 0x1060 <__divsf3>
    1430:	0c 94 0e 09 	jmp	0x121c	; 0x121c <__fp_inf>
    1434:	0c 94 b0 0b 	jmp	0x1760	; 0x1760 <__fp_mpack>

00001438 <ldexp>:
    1438:	0e 94 3e 09 	call	0x127c	; 0x127c <__fp_splitA>
    143c:	d8 f3       	brcs	.-10     	; 0x1434 <inverse+0x14>
    143e:	99 23       	and	r25, r25
    1440:	c9 f3       	breq	.-14     	; 0x1434 <inverse+0x14>
    1442:	94 0f       	add	r25, r20
    1444:	51 1d       	adc	r21, r1
    1446:	a3 f3       	brvs	.-24     	; 0x1430 <inverse+0x10>
    1448:	91 50       	subi	r25, 0x01	; 1
    144a:	50 40       	sbci	r21, 0x00	; 0
    144c:	94 f0       	brlt	.+36     	; 0x1472 <ldexp+0x3a>
    144e:	59 f0       	breq	.+22     	; 0x1466 <ldexp+0x2e>
    1450:	88 23       	and	r24, r24
    1452:	32 f0       	brmi	.+12     	; 0x1460 <ldexp+0x28>
    1454:	66 0f       	add	r22, r22
    1456:	77 1f       	adc	r23, r23
    1458:	88 1f       	adc	r24, r24
    145a:	91 50       	subi	r25, 0x01	; 1
    145c:	50 40       	sbci	r21, 0x00	; 0
    145e:	c1 f7       	brne	.-16     	; 0x1450 <ldexp+0x18>
    1460:	9e 3f       	cpi	r25, 0xFE	; 254
    1462:	51 05       	cpc	r21, r1
    1464:	2c f7       	brge	.-54     	; 0x1430 <inverse+0x10>
    1466:	88 0f       	add	r24, r24
    1468:	91 1d       	adc	r25, r1
    146a:	96 95       	lsr	r25
    146c:	87 95       	ror	r24
    146e:	97 f9       	bld	r25, 7
    1470:	08 95       	ret
    1472:	5f 3f       	cpi	r21, 0xFF	; 255
    1474:	ac f0       	brlt	.+42     	; 0x14a0 <ldexp+0x68>
    1476:	98 3e       	cpi	r25, 0xE8	; 232
    1478:	9c f0       	brlt	.+38     	; 0x14a0 <ldexp+0x68>
    147a:	bb 27       	eor	r27, r27
    147c:	86 95       	lsr	r24
    147e:	77 95       	ror	r23
    1480:	67 95       	ror	r22
    1482:	b7 95       	ror	r27
    1484:	08 f4       	brcc	.+2      	; 0x1488 <ldexp+0x50>
    1486:	b1 60       	ori	r27, 0x01	; 1
    1488:	93 95       	inc	r25
    148a:	c1 f7       	brne	.-16     	; 0x147c <ldexp+0x44>
    148c:	bb 0f       	add	r27, r27
    148e:	58 f7       	brcc	.-42     	; 0x1466 <ldexp+0x2e>
    1490:	11 f4       	brne	.+4      	; 0x1496 <ldexp+0x5e>
    1492:	60 ff       	sbrs	r22, 0
    1494:	e8 cf       	rjmp	.-48     	; 0x1466 <ldexp+0x2e>
    1496:	6f 5f       	subi	r22, 0xFF	; 255
    1498:	7f 4f       	sbci	r23, 0xFF	; 255
    149a:	8f 4f       	sbci	r24, 0xFF	; 255
    149c:	9f 4f       	sbci	r25, 0xFF	; 255
    149e:	e3 cf       	rjmp	.-58     	; 0x1466 <ldexp+0x2e>
    14a0:	0c 94 59 09 	jmp	0x12b2	; 0x12b2 <__fp_szero>
    14a4:	16 f0       	brts	.+4      	; 0x14aa <ldexp+0x72>
    14a6:	0c 94 b0 0b 	jmp	0x1760	; 0x1760 <__fp_mpack>
    14aa:	0c 94 14 09 	jmp	0x1228	; 0x1228 <__fp_nan>
    14ae:	68 94       	set
    14b0:	0c 94 0e 09 	jmp	0x121c	; 0x121c <__fp_inf>

000014b4 <log>:
    14b4:	0e 94 3e 09 	call	0x127c	; 0x127c <__fp_splitA>
    14b8:	a8 f3       	brcs	.-22     	; 0x14a4 <ldexp+0x6c>
    14ba:	99 23       	and	r25, r25
    14bc:	c1 f3       	breq	.-16     	; 0x14ae <ldexp+0x76>
    14be:	ae f3       	brts	.-22     	; 0x14aa <ldexp+0x72>
    14c0:	df 93       	push	r29
    14c2:	cf 93       	push	r28
    14c4:	1f 93       	push	r17
    14c6:	0f 93       	push	r16
    14c8:	ff 92       	push	r15
    14ca:	c9 2f       	mov	r28, r25
    14cc:	dd 27       	eor	r29, r29
    14ce:	88 23       	and	r24, r24
    14d0:	2a f0       	brmi	.+10     	; 0x14dc <log+0x28>
    14d2:	21 97       	sbiw	r28, 0x01	; 1
    14d4:	66 0f       	add	r22, r22
    14d6:	77 1f       	adc	r23, r23
    14d8:	88 1f       	adc	r24, r24
    14da:	da f7       	brpl	.-10     	; 0x14d2 <log+0x1e>
    14dc:	20 e0       	ldi	r18, 0x00	; 0
    14de:	30 e0       	ldi	r19, 0x00	; 0
    14e0:	40 e8       	ldi	r20, 0x80	; 128
    14e2:	5f eb       	ldi	r21, 0xBF	; 191
    14e4:	9f e3       	ldi	r25, 0x3F	; 63
    14e6:	88 39       	cpi	r24, 0x98	; 152
    14e8:	20 f0       	brcs	.+8      	; 0x14f2 <log+0x3e>
    14ea:	80 3e       	cpi	r24, 0xE0	; 224
    14ec:	38 f0       	brcs	.+14     	; 0x14fc <log+0x48>
    14ee:	21 96       	adiw	r28, 0x01	; 1
    14f0:	8f 77       	andi	r24, 0x7F	; 127
    14f2:	0e 94 44 0b 	call	0x1688	; 0x1688 <__addsf3>
    14f6:	e0 e9       	ldi	r30, 0x90	; 144
    14f8:	f0 e0       	ldi	r31, 0x00	; 0
    14fa:	04 c0       	rjmp	.+8      	; 0x1504 <log+0x50>
    14fc:	0e 94 44 0b 	call	0x1688	; 0x1688 <__addsf3>
    1500:	ed eb       	ldi	r30, 0xBD	; 189
    1502:	f0 e0       	ldi	r31, 0x00	; 0
    1504:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <__fp_powser>
    1508:	8b 01       	movw	r16, r22
    150a:	be 01       	movw	r22, r28
    150c:	ec 01       	movw	r28, r24
    150e:	fb 2e       	mov	r15, r27
    1510:	6f 57       	subi	r22, 0x7F	; 127
    1512:	71 09       	sbc	r23, r1
    1514:	75 95       	asr	r23
    1516:	77 1f       	adc	r23, r23
    1518:	88 0b       	sbc	r24, r24
    151a:	99 0b       	sbc	r25, r25
    151c:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <__floatsisf>
    1520:	28 e1       	ldi	r18, 0x18	; 24
    1522:	32 e7       	ldi	r19, 0x72	; 114
    1524:	41 e3       	ldi	r20, 0x31	; 49
    1526:	5f e3       	ldi	r21, 0x3F	; 63
    1528:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <__mulsf3x>
    152c:	af 2d       	mov	r26, r15
    152e:	98 01       	movw	r18, r16
    1530:	ae 01       	movw	r20, r28
    1532:	ff 90       	pop	r15
    1534:	0f 91       	pop	r16
    1536:	1f 91       	pop	r17
    1538:	cf 91       	pop	r28
    153a:	df 91       	pop	r29
    153c:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <__addsf3x>
    1540:	0c 94 25 09 	jmp	0x124a	; 0x124a <__fp_round>

00001544 <modf>:
    1544:	fa 01       	movw	r30, r20
    1546:	dc 01       	movw	r26, r24
    1548:	aa 0f       	add	r26, r26
    154a:	bb 1f       	adc	r27, r27
    154c:	9b 01       	movw	r18, r22
    154e:	ac 01       	movw	r20, r24
    1550:	bf 57       	subi	r27, 0x7F	; 127
    1552:	28 f4       	brcc	.+10     	; 0x155e <modf+0x1a>
    1554:	22 27       	eor	r18, r18
    1556:	33 27       	eor	r19, r19
    1558:	44 27       	eor	r20, r20
    155a:	50 78       	andi	r21, 0x80	; 128
    155c:	20 c0       	rjmp	.+64     	; 0x159e <modf+0x5a>
    155e:	b7 51       	subi	r27, 0x17	; 23
    1560:	90 f4       	brcc	.+36     	; 0x1586 <modf+0x42>
    1562:	ab 2f       	mov	r26, r27
    1564:	00 24       	eor	r0, r0
    1566:	46 95       	lsr	r20
    1568:	37 95       	ror	r19
    156a:	27 95       	ror	r18
    156c:	01 1c       	adc	r0, r1
    156e:	a3 95       	inc	r26
    1570:	d2 f3       	brmi	.-12     	; 0x1566 <modf+0x22>
    1572:	00 20       	and	r0, r0
    1574:	71 f0       	breq	.+28     	; 0x1592 <modf+0x4e>
    1576:	22 0f       	add	r18, r18
    1578:	33 1f       	adc	r19, r19
    157a:	44 1f       	adc	r20, r20
    157c:	b3 95       	inc	r27
    157e:	da f3       	brmi	.-10     	; 0x1576 <modf+0x32>
    1580:	0e d0       	rcall	.+28     	; 0x159e <modf+0x5a>
    1582:	0c 94 43 0b 	jmp	0x1686	; 0x1686 <__subsf3>
    1586:	61 30       	cpi	r22, 0x01	; 1
    1588:	71 05       	cpc	r23, r1
    158a:	a0 e8       	ldi	r26, 0x80	; 128
    158c:	8a 07       	cpc	r24, r26
    158e:	b9 46       	sbci	r27, 0x69	; 105
    1590:	30 f4       	brcc	.+12     	; 0x159e <modf+0x5a>
    1592:	9b 01       	movw	r18, r22
    1594:	ac 01       	movw	r20, r24
    1596:	66 27       	eor	r22, r22
    1598:	77 27       	eor	r23, r23
    159a:	88 27       	eor	r24, r24
    159c:	90 78       	andi	r25, 0x80	; 128
    159e:	30 96       	adiw	r30, 0x00	; 0
    15a0:	21 f0       	breq	.+8      	; 0x15aa <modf+0x66>
    15a2:	20 83       	st	Z, r18
    15a4:	31 83       	std	Z+1, r19	; 0x01
    15a6:	42 83       	std	Z+2, r20	; 0x02
    15a8:	53 83       	std	Z+3, r21	; 0x03
    15aa:	08 95       	ret

000015ac <__mulsf3>:
    15ac:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <__mulsf3x>
    15b0:	0c 94 25 09 	jmp	0x124a	; 0x124a <__fp_round>
    15b4:	0e 94 17 09 	call	0x122e	; 0x122e <__fp_pscA>
    15b8:	38 f0       	brcs	.+14     	; 0x15c8 <__mulsf3+0x1c>
    15ba:	0e 94 1e 09 	call	0x123c	; 0x123c <__fp_pscB>
    15be:	20 f0       	brcs	.+8      	; 0x15c8 <__mulsf3+0x1c>
    15c0:	95 23       	and	r25, r21
    15c2:	11 f0       	breq	.+4      	; 0x15c8 <__mulsf3+0x1c>
    15c4:	0c 94 0e 09 	jmp	0x121c	; 0x121c <__fp_inf>
    15c8:	0c 94 14 09 	jmp	0x1228	; 0x1228 <__fp_nan>
    15cc:	11 24       	eor	r1, r1
    15ce:	0c 94 59 09 	jmp	0x12b2	; 0x12b2 <__fp_szero>

000015d2 <__mulsf3x>:
    15d2:	0e 94 36 09 	call	0x126c	; 0x126c <__fp_split3>
    15d6:	70 f3       	brcs	.-36     	; 0x15b4 <__mulsf3+0x8>

000015d8 <__mulsf3_pse>:
    15d8:	95 9f       	mul	r25, r21
    15da:	c1 f3       	breq	.-16     	; 0x15cc <__mulsf3+0x20>
    15dc:	95 0f       	add	r25, r21
    15de:	50 e0       	ldi	r21, 0x00	; 0
    15e0:	55 1f       	adc	r21, r21
    15e2:	62 9f       	mul	r22, r18
    15e4:	f0 01       	movw	r30, r0
    15e6:	72 9f       	mul	r23, r18
    15e8:	bb 27       	eor	r27, r27
    15ea:	f0 0d       	add	r31, r0
    15ec:	b1 1d       	adc	r27, r1
    15ee:	63 9f       	mul	r22, r19
    15f0:	aa 27       	eor	r26, r26
    15f2:	f0 0d       	add	r31, r0
    15f4:	b1 1d       	adc	r27, r1
    15f6:	aa 1f       	adc	r26, r26
    15f8:	64 9f       	mul	r22, r20
    15fa:	66 27       	eor	r22, r22
    15fc:	b0 0d       	add	r27, r0
    15fe:	a1 1d       	adc	r26, r1
    1600:	66 1f       	adc	r22, r22
    1602:	82 9f       	mul	r24, r18
    1604:	22 27       	eor	r18, r18
    1606:	b0 0d       	add	r27, r0
    1608:	a1 1d       	adc	r26, r1
    160a:	62 1f       	adc	r22, r18
    160c:	73 9f       	mul	r23, r19
    160e:	b0 0d       	add	r27, r0
    1610:	a1 1d       	adc	r26, r1
    1612:	62 1f       	adc	r22, r18
    1614:	83 9f       	mul	r24, r19
    1616:	a0 0d       	add	r26, r0
    1618:	61 1d       	adc	r22, r1
    161a:	22 1f       	adc	r18, r18
    161c:	74 9f       	mul	r23, r20
    161e:	33 27       	eor	r19, r19
    1620:	a0 0d       	add	r26, r0
    1622:	61 1d       	adc	r22, r1
    1624:	23 1f       	adc	r18, r19
    1626:	84 9f       	mul	r24, r20
    1628:	60 0d       	add	r22, r0
    162a:	21 1d       	adc	r18, r1
    162c:	82 2f       	mov	r24, r18
    162e:	76 2f       	mov	r23, r22
    1630:	6a 2f       	mov	r22, r26
    1632:	11 24       	eor	r1, r1
    1634:	9f 57       	subi	r25, 0x7F	; 127
    1636:	50 40       	sbci	r21, 0x00	; 0
    1638:	9a f0       	brmi	.+38     	; 0x1660 <__mulsf3_pse+0x88>
    163a:	f1 f0       	breq	.+60     	; 0x1678 <__mulsf3_pse+0xa0>
    163c:	88 23       	and	r24, r24
    163e:	4a f0       	brmi	.+18     	; 0x1652 <__mulsf3_pse+0x7a>
    1640:	ee 0f       	add	r30, r30
    1642:	ff 1f       	adc	r31, r31
    1644:	bb 1f       	adc	r27, r27
    1646:	66 1f       	adc	r22, r22
    1648:	77 1f       	adc	r23, r23
    164a:	88 1f       	adc	r24, r24
    164c:	91 50       	subi	r25, 0x01	; 1
    164e:	50 40       	sbci	r21, 0x00	; 0
    1650:	a9 f7       	brne	.-22     	; 0x163c <__mulsf3_pse+0x64>
    1652:	9e 3f       	cpi	r25, 0xFE	; 254
    1654:	51 05       	cpc	r21, r1
    1656:	80 f0       	brcs	.+32     	; 0x1678 <__mulsf3_pse+0xa0>
    1658:	0c 94 0e 09 	jmp	0x121c	; 0x121c <__fp_inf>
    165c:	0c 94 59 09 	jmp	0x12b2	; 0x12b2 <__fp_szero>
    1660:	5f 3f       	cpi	r21, 0xFF	; 255
    1662:	e4 f3       	brlt	.-8      	; 0x165c <__mulsf3_pse+0x84>
    1664:	98 3e       	cpi	r25, 0xE8	; 232
    1666:	d4 f3       	brlt	.-12     	; 0x165c <__mulsf3_pse+0x84>
    1668:	86 95       	lsr	r24
    166a:	77 95       	ror	r23
    166c:	67 95       	ror	r22
    166e:	b7 95       	ror	r27
    1670:	f7 95       	ror	r31
    1672:	e7 95       	ror	r30
    1674:	9f 5f       	subi	r25, 0xFF	; 255
    1676:	c1 f7       	brne	.-16     	; 0x1668 <__mulsf3_pse+0x90>
    1678:	fe 2b       	or	r31, r30
    167a:	88 0f       	add	r24, r24
    167c:	91 1d       	adc	r25, r1
    167e:	96 95       	lsr	r25
    1680:	87 95       	ror	r24
    1682:	97 f9       	bld	r25, 7
    1684:	08 95       	ret

00001686 <__subsf3>:
    1686:	50 58       	subi	r21, 0x80	; 128

00001688 <__addsf3>:
    1688:	bb 27       	eor	r27, r27
    168a:	aa 27       	eor	r26, r26
    168c:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <__addsf3x>
    1690:	0c 94 25 09 	jmp	0x124a	; 0x124a <__fp_round>
    1694:	0e 94 17 09 	call	0x122e	; 0x122e <__fp_pscA>
    1698:	38 f0       	brcs	.+14     	; 0x16a8 <__addsf3+0x20>
    169a:	0e 94 1e 09 	call	0x123c	; 0x123c <__fp_pscB>
    169e:	20 f0       	brcs	.+8      	; 0x16a8 <__addsf3+0x20>
    16a0:	39 f4       	brne	.+14     	; 0x16b0 <__addsf3+0x28>
    16a2:	9f 3f       	cpi	r25, 0xFF	; 255
    16a4:	19 f4       	brne	.+6      	; 0x16ac <__addsf3+0x24>
    16a6:	26 f4       	brtc	.+8      	; 0x16b0 <__addsf3+0x28>
    16a8:	0c 94 14 09 	jmp	0x1228	; 0x1228 <__fp_nan>
    16ac:	0e f4       	brtc	.+2      	; 0x16b0 <__addsf3+0x28>
    16ae:	e0 95       	com	r30
    16b0:	e7 fb       	bst	r30, 7
    16b2:	0c 94 0e 09 	jmp	0x121c	; 0x121c <__fp_inf>

000016b6 <__addsf3x>:
    16b6:	e9 2f       	mov	r30, r25
    16b8:	0e 94 36 09 	call	0x126c	; 0x126c <__fp_split3>
    16bc:	58 f3       	brcs	.-42     	; 0x1694 <__addsf3+0xc>
    16be:	ba 17       	cp	r27, r26
    16c0:	62 07       	cpc	r22, r18
    16c2:	73 07       	cpc	r23, r19
    16c4:	84 07       	cpc	r24, r20
    16c6:	95 07       	cpc	r25, r21
    16c8:	20 f0       	brcs	.+8      	; 0x16d2 <__addsf3x+0x1c>
    16ca:	79 f4       	brne	.+30     	; 0x16ea <__addsf3x+0x34>
    16cc:	a6 f5       	brtc	.+104    	; 0x1736 <__addsf3x+0x80>
    16ce:	0c 94 58 09 	jmp	0x12b0	; 0x12b0 <__fp_zero>
    16d2:	0e f4       	brtc	.+2      	; 0x16d6 <__addsf3x+0x20>
    16d4:	e0 95       	com	r30
    16d6:	0b 2e       	mov	r0, r27
    16d8:	ba 2f       	mov	r27, r26
    16da:	a0 2d       	mov	r26, r0
    16dc:	0b 01       	movw	r0, r22
    16de:	b9 01       	movw	r22, r18
    16e0:	90 01       	movw	r18, r0
    16e2:	0c 01       	movw	r0, r24
    16e4:	ca 01       	movw	r24, r20
    16e6:	a0 01       	movw	r20, r0
    16e8:	11 24       	eor	r1, r1
    16ea:	ff 27       	eor	r31, r31
    16ec:	59 1b       	sub	r21, r25
    16ee:	99 f0       	breq	.+38     	; 0x1716 <__addsf3x+0x60>
    16f0:	59 3f       	cpi	r21, 0xF9	; 249
    16f2:	50 f4       	brcc	.+20     	; 0x1708 <__addsf3x+0x52>
    16f4:	50 3e       	cpi	r21, 0xE0	; 224
    16f6:	68 f1       	brcs	.+90     	; 0x1752 <__addsf3x+0x9c>
    16f8:	1a 16       	cp	r1, r26
    16fa:	f0 40       	sbci	r31, 0x00	; 0
    16fc:	a2 2f       	mov	r26, r18
    16fe:	23 2f       	mov	r18, r19
    1700:	34 2f       	mov	r19, r20
    1702:	44 27       	eor	r20, r20
    1704:	58 5f       	subi	r21, 0xF8	; 248
    1706:	f3 cf       	rjmp	.-26     	; 0x16ee <__addsf3x+0x38>
    1708:	46 95       	lsr	r20
    170a:	37 95       	ror	r19
    170c:	27 95       	ror	r18
    170e:	a7 95       	ror	r26
    1710:	f0 40       	sbci	r31, 0x00	; 0
    1712:	53 95       	inc	r21
    1714:	c9 f7       	brne	.-14     	; 0x1708 <__addsf3x+0x52>
    1716:	7e f4       	brtc	.+30     	; 0x1736 <__addsf3x+0x80>
    1718:	1f 16       	cp	r1, r31
    171a:	ba 0b       	sbc	r27, r26
    171c:	62 0b       	sbc	r22, r18
    171e:	73 0b       	sbc	r23, r19
    1720:	84 0b       	sbc	r24, r20
    1722:	ba f0       	brmi	.+46     	; 0x1752 <__addsf3x+0x9c>
    1724:	91 50       	subi	r25, 0x01	; 1
    1726:	a1 f0       	breq	.+40     	; 0x1750 <__addsf3x+0x9a>
    1728:	ff 0f       	add	r31, r31
    172a:	bb 1f       	adc	r27, r27
    172c:	66 1f       	adc	r22, r22
    172e:	77 1f       	adc	r23, r23
    1730:	88 1f       	adc	r24, r24
    1732:	c2 f7       	brpl	.-16     	; 0x1724 <__addsf3x+0x6e>
    1734:	0e c0       	rjmp	.+28     	; 0x1752 <__addsf3x+0x9c>
    1736:	ba 0f       	add	r27, r26
    1738:	62 1f       	adc	r22, r18
    173a:	73 1f       	adc	r23, r19
    173c:	84 1f       	adc	r24, r20
    173e:	48 f4       	brcc	.+18     	; 0x1752 <__addsf3x+0x9c>
    1740:	87 95       	ror	r24
    1742:	77 95       	ror	r23
    1744:	67 95       	ror	r22
    1746:	b7 95       	ror	r27
    1748:	f7 95       	ror	r31
    174a:	9e 3f       	cpi	r25, 0xFE	; 254
    174c:	08 f0       	brcs	.+2      	; 0x1750 <__addsf3x+0x9a>
    174e:	b0 cf       	rjmp	.-160    	; 0x16b0 <__addsf3+0x28>
    1750:	93 95       	inc	r25
    1752:	88 0f       	add	r24, r24
    1754:	08 f0       	brcs	.+2      	; 0x1758 <__addsf3x+0xa2>
    1756:	99 27       	eor	r25, r25
    1758:	ee 0f       	add	r30, r30
    175a:	97 95       	ror	r25
    175c:	87 95       	ror	r24
    175e:	08 95       	ret

00001760 <__fp_mpack>:
    1760:	9f 3f       	cpi	r25, 0xFF	; 255
    1762:	31 f0       	breq	.+12     	; 0x1770 <__fp_mpack_finite+0xc>

00001764 <__fp_mpack_finite>:
    1764:	91 50       	subi	r25, 0x01	; 1
    1766:	20 f4       	brcc	.+8      	; 0x1770 <__fp_mpack_finite+0xc>
    1768:	87 95       	ror	r24
    176a:	77 95       	ror	r23
    176c:	67 95       	ror	r22
    176e:	b7 95       	ror	r27
    1770:	88 0f       	add	r24, r24
    1772:	91 1d       	adc	r25, r1
    1774:	96 95       	lsr	r25
    1776:	87 95       	ror	r24
    1778:	97 f9       	bld	r25, 7
    177a:	08 95       	ret

0000177c <__udivmodsi4>:
    177c:	a1 e2       	ldi	r26, 0x21	; 33
    177e:	1a 2e       	mov	r1, r26
    1780:	aa 1b       	sub	r26, r26
    1782:	bb 1b       	sub	r27, r27
    1784:	fd 01       	movw	r30, r26
    1786:	0d c0       	rjmp	.+26     	; 0x17a2 <__udivmodsi4_ep>

00001788 <__udivmodsi4_loop>:
    1788:	aa 1f       	adc	r26, r26
    178a:	bb 1f       	adc	r27, r27
    178c:	ee 1f       	adc	r30, r30
    178e:	ff 1f       	adc	r31, r31
    1790:	a2 17       	cp	r26, r18
    1792:	b3 07       	cpc	r27, r19
    1794:	e4 07       	cpc	r30, r20
    1796:	f5 07       	cpc	r31, r21
    1798:	20 f0       	brcs	.+8      	; 0x17a2 <__udivmodsi4_ep>
    179a:	a2 1b       	sub	r26, r18
    179c:	b3 0b       	sbc	r27, r19
    179e:	e4 0b       	sbc	r30, r20
    17a0:	f5 0b       	sbc	r31, r21

000017a2 <__udivmodsi4_ep>:
    17a2:	66 1f       	adc	r22, r22
    17a4:	77 1f       	adc	r23, r23
    17a6:	88 1f       	adc	r24, r24
    17a8:	99 1f       	adc	r25, r25
    17aa:	1a 94       	dec	r1
    17ac:	69 f7       	brne	.-38     	; 0x1788 <__udivmodsi4_loop>
    17ae:	60 95       	com	r22
    17b0:	70 95       	com	r23
    17b2:	80 95       	com	r24
    17b4:	90 95       	com	r25
    17b6:	9b 01       	movw	r18, r22
    17b8:	ac 01       	movw	r20, r24
    17ba:	bd 01       	movw	r22, r26
    17bc:	cf 01       	movw	r24, r30
    17be:	08 95       	ret

000017c0 <__divmodsi4>:
    17c0:	05 2e       	mov	r0, r21
    17c2:	97 fb       	bst	r25, 7
    17c4:	1e f4       	brtc	.+6      	; 0x17cc <__divmodsi4+0xc>
    17c6:	00 94       	com	r0
    17c8:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <__negsi2>
    17cc:	57 fd       	sbrc	r21, 7
    17ce:	07 d0       	rcall	.+14     	; 0x17de <__divmodsi4_neg2>
    17d0:	0e 94 be 0b 	call	0x177c	; 0x177c <__udivmodsi4>
    17d4:	07 fc       	sbrc	r0, 7
    17d6:	03 d0       	rcall	.+6      	; 0x17de <__divmodsi4_neg2>
    17d8:	4e f4       	brtc	.+18     	; 0x17ec <__divmodsi4_exit>
    17da:	0c 94 f7 0b 	jmp	0x17ee	; 0x17ee <__negsi2>

000017de <__divmodsi4_neg2>:
    17de:	50 95       	com	r21
    17e0:	40 95       	com	r20
    17e2:	30 95       	com	r19
    17e4:	21 95       	neg	r18
    17e6:	3f 4f       	sbci	r19, 0xFF	; 255
    17e8:	4f 4f       	sbci	r20, 0xFF	; 255
    17ea:	5f 4f       	sbci	r21, 0xFF	; 255

000017ec <__divmodsi4_exit>:
    17ec:	08 95       	ret

000017ee <__negsi2>:
    17ee:	90 95       	com	r25
    17f0:	80 95       	com	r24
    17f2:	70 95       	com	r23
    17f4:	61 95       	neg	r22
    17f6:	7f 4f       	sbci	r23, 0xFF	; 255
    17f8:	8f 4f       	sbci	r24, 0xFF	; 255
    17fa:	9f 4f       	sbci	r25, 0xFF	; 255
    17fc:	08 95       	ret

000017fe <strcpy>:
    17fe:	fb 01       	movw	r30, r22
    1800:	dc 01       	movw	r26, r24
    1802:	01 90       	ld	r0, Z+
    1804:	0d 92       	st	X+, r0
    1806:	00 20       	and	r0, r0
    1808:	e1 f7       	brne	.-8      	; 0x1802 <strcpy+0x4>
    180a:	08 95       	ret

0000180c <__itoa_ncheck>:
    180c:	bb 27       	eor	r27, r27
    180e:	4a 30       	cpi	r20, 0x0A	; 10
    1810:	31 f4       	brne	.+12     	; 0x181e <__itoa_ncheck+0x12>
    1812:	99 23       	and	r25, r25
    1814:	22 f4       	brpl	.+8      	; 0x181e <__itoa_ncheck+0x12>
    1816:	bd e2       	ldi	r27, 0x2D	; 45
    1818:	90 95       	com	r25
    181a:	81 95       	neg	r24
    181c:	9f 4f       	sbci	r25, 0xFF	; 255
    181e:	0c 94 12 0c 	jmp	0x1824	; 0x1824 <__utoa_common>

00001822 <__utoa_ncheck>:
    1822:	bb 27       	eor	r27, r27

00001824 <__utoa_common>:
    1824:	fb 01       	movw	r30, r22
    1826:	55 27       	eor	r21, r21
    1828:	aa 27       	eor	r26, r26
    182a:	88 0f       	add	r24, r24
    182c:	99 1f       	adc	r25, r25
    182e:	aa 1f       	adc	r26, r26
    1830:	a4 17       	cp	r26, r20
    1832:	10 f0       	brcs	.+4      	; 0x1838 <__utoa_common+0x14>
    1834:	a4 1b       	sub	r26, r20
    1836:	83 95       	inc	r24
    1838:	50 51       	subi	r21, 0x10	; 16
    183a:	b9 f7       	brne	.-18     	; 0x182a <__utoa_common+0x6>
    183c:	a0 5d       	subi	r26, 0xD0	; 208
    183e:	aa 33       	cpi	r26, 0x3A	; 58
    1840:	08 f0       	brcs	.+2      	; 0x1844 <__utoa_common+0x20>
    1842:	a9 5d       	subi	r26, 0xD9	; 217
    1844:	a1 93       	st	Z+, r26
    1846:	00 97       	sbiw	r24, 0x00	; 0
    1848:	79 f7       	brne	.-34     	; 0x1828 <__utoa_common+0x4>
    184a:	b1 11       	cpse	r27, r1
    184c:	b1 93       	st	Z+, r27
    184e:	11 92       	st	Z+, r1
    1850:	cb 01       	movw	r24, r22
    1852:	0c 94 2b 0c 	jmp	0x1856	; 0x1856 <strrev>

00001856 <strrev>:
    1856:	dc 01       	movw	r26, r24
    1858:	fc 01       	movw	r30, r24
    185a:	67 2f       	mov	r22, r23
    185c:	71 91       	ld	r23, Z+
    185e:	77 23       	and	r23, r23
    1860:	e1 f7       	brne	.-8      	; 0x185a <strrev+0x4>
    1862:	32 97       	sbiw	r30, 0x02	; 2
    1864:	04 c0       	rjmp	.+8      	; 0x186e <strrev+0x18>
    1866:	7c 91       	ld	r23, X
    1868:	6d 93       	st	X+, r22
    186a:	70 83       	st	Z, r23
    186c:	62 91       	ld	r22, -Z
    186e:	ae 17       	cp	r26, r30
    1870:	bf 07       	cpc	r27, r31
    1872:	c8 f3       	brcs	.-14     	; 0x1866 <strrev+0x10>
    1874:	08 95       	ret

00001876 <_exit>:
    1876:	f8 94       	cli

00001878 <__stop_program>:
    1878:	ff cf       	rjmp	.-2      	; 0x1878 <__stop_program>
