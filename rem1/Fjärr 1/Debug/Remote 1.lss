
Remote 1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000068  00800100  0000185c  000018f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000185c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000c0  00800168  00800168  00001958  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001958  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001988  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001f8  00000000  00000000  000019c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001ede  00000000  00000000  00001bc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f8c  00000000  00000000  00003a9e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000010df  00000000  00000000  00004a2a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000052c  00000000  00000000  00005b0c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000826  00000000  00000000  00006038  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001277  00000000  00000000  0000685e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001e8  00000000  00000000  00007ad5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 fa 02 	jmp	0x5f4	; 0x5f4 <__ctors_end>
       4:	0c 94 8a 04 	jmp	0x914	; 0x914 <__vector_1>
       8:	0c 94 c8 04 	jmp	0x990	; 0x990 <__vector_2>
       c:	0c 94 17 03 	jmp	0x62e	; 0x62e <__bad_interrupt>
      10:	0c 94 17 03 	jmp	0x62e	; 0x62e <__bad_interrupt>
      14:	0c 94 17 03 	jmp	0x62e	; 0x62e <__bad_interrupt>
      18:	0c 94 17 03 	jmp	0x62e	; 0x62e <__bad_interrupt>
      1c:	0c 94 2c 03 	jmp	0x658	; 0x658 <__vector_7>
      20:	0c 94 17 03 	jmp	0x62e	; 0x62e <__bad_interrupt>
      24:	0c 94 17 03 	jmp	0x62e	; 0x62e <__bad_interrupt>
      28:	0c 94 17 03 	jmp	0x62e	; 0x62e <__bad_interrupt>
      2c:	0c 94 b5 07 	jmp	0xf6a	; 0xf6a <__vector_11>
      30:	0c 94 17 03 	jmp	0x62e	; 0x62e <__bad_interrupt>
      34:	0c 94 17 03 	jmp	0x62e	; 0x62e <__bad_interrupt>
      38:	0c 94 17 03 	jmp	0x62e	; 0x62e <__bad_interrupt>
      3c:	0c 94 17 03 	jmp	0x62e	; 0x62e <__bad_interrupt>
      40:	0c 94 17 03 	jmp	0x62e	; 0x62e <__bad_interrupt>
      44:	0c 94 17 03 	jmp	0x62e	; 0x62e <__bad_interrupt>
      48:	0c 94 36 04 	jmp	0x86c	; 0x86c <__vector_18>
      4c:	0c 94 17 03 	jmp	0x62e	; 0x62e <__bad_interrupt>
      50:	0c 94 17 03 	jmp	0x62e	; 0x62e <__bad_interrupt>
      54:	0c 94 17 03 	jmp	0x62e	; 0x62e <__bad_interrupt>
      58:	0c 94 17 03 	jmp	0x62e	; 0x62e <__bad_interrupt>
      5c:	0c 94 17 03 	jmp	0x62e	; 0x62e <__bad_interrupt>
      60:	0c 94 17 03 	jmp	0x62e	; 0x62e <__bad_interrupt>
      64:	0c 94 17 03 	jmp	0x62e	; 0x62e <__bad_interrupt>
      68:	07 63       	ori	r16, 0x37	; 55
      6a:	42 36       	cpi	r20, 0x62	; 98
      6c:	b7 9b       	sbis	0x16, 7	; 22
      6e:	d8 a7       	std	Y+40, r29	; 0x28
      70:	1a 39       	cpi	r17, 0x9A	; 154
      72:	68 56       	subi	r22, 0x68	; 104
      74:	18 ae       	std	Y+56, r1	; 0x38
      76:	ba ab       	std	Y+50, r27	; 0x32
      78:	55 8c       	ldd	r5, Z+29	; 0x1d
      7a:	1d 3c       	cpi	r17, 0xCD	; 205
      7c:	b7 cc       	rjmp	.-1682   	; 0xfffff9ec <__eeprom_end+0xff7ef9ec>
      7e:	57 63       	ori	r21, 0x37	; 55
      80:	bd 6d       	ori	r27, 0xDD	; 221
      82:	ed fd       	.word	0xfded	; ????
      84:	75 3e       	cpi	r23, 0xE5	; 229
      86:	f6 17       	cp	r31, r22
      88:	72 31       	cpi	r23, 0x12	; 18
      8a:	bf 00       	.word	0x00bf	; ????
      8c:	00 00       	nop
      8e:	80 3f       	cpi	r24, 0xF0	; 240
      90:	08 00       	.word	0x0008	; ????
      92:	00 00       	nop
      94:	be 92       	st	-X, r11
      96:	24 49       	sbci	r18, 0x94	; 148
      98:	12 3e       	cpi	r17, 0xE2	; 226
      9a:	ab aa       	std	Y+51, r10	; 0x33
      9c:	aa 2a       	or	r10, r26
      9e:	be cd       	rjmp	.-1156   	; 0xfffffc1c <__eeprom_end+0xff7efc1c>
      a0:	cc cc       	rjmp	.-1640   	; 0xfffffa3a <__eeprom_end+0xff7efa3a>
      a2:	4c 3e       	cpi	r20, 0xEC	; 236
      a4:	00 00       	nop
      a6:	00 80       	ld	r0, Z
      a8:	be ab       	std	Y+54, r27	; 0x36
      aa:	aa aa       	std	Y+50, r10	; 0x32
      ac:	aa 3e       	cpi	r26, 0xEA	; 234
      ae:	00 00       	nop
      b0:	00 00       	nop
      b2:	bf 00       	.word	0x00bf	; ????
      b4:	00 00       	nop
      b6:	80 3f       	cpi	r24, 0xF0	; 240
      b8:	00 00       	nop
      ba:	00 00       	nop
      bc:	00 08       	sbc	r0, r0
      be:	41 78       	andi	r20, 0x81	; 129
      c0:	d3 bb       	out	0x13, r29	; 19
      c2:	43 87       	std	Z+11, r20	; 0x0b
      c4:	d1 13       	cpse	r29, r17
      c6:	3d 19       	sub	r19, r13
      c8:	0e 3c       	cpi	r16, 0xCE	; 206
      ca:	c3 bd       	out	0x23, r28	; 35
      cc:	42 82       	std	Z+2, r4	; 0x02
      ce:	ad 2b       	or	r26, r29
      d0:	3e 68       	ori	r19, 0x8E	; 142
      d2:	ec 82       	std	Y+4, r14	; 0x04
      d4:	76 be       	out	0x36, r7	; 54
      d6:	d9 8f       	std	Y+25, r29	; 0x19
      d8:	e1 a9       	ldd	r30, Z+49	; 0x31
      da:	3e 4c       	sbci	r19, 0xCE	; 206
      dc:	80 ef       	ldi	r24, 0xF0	; 240
      de:	ff be       	out	0x3f, r15	; 63
      e0:	01 c4       	rjmp	.+2050   	; 0x8e4 <__vector_18+0x78>
      e2:	ff 7f       	andi	r31, 0xFF	; 255
      e4:	3f 00       	.word	0x003f	; ????
      e6:	00 00       	nop
	...

000000ea <__trampolines_end>:
      ea:	39 15       	cp	r19, r9
      ec:	55 6e       	ori	r21, 0xE5	; 229
      ee:	72 38       	cpi	r23, 0x82	; 130
      f0:	0c 01       	movw	r0, r24
      f2:	06 71       	Address 0x000000f2 is out of bounds.
.word	0xffff	; ????

000000f3 <melodies>:
      f3:	71 80 71 00 00 00 00 00 00 00 00 00 00 00 00 00     q.q.............
	...
     1f3:	63 6c 6f 6c 48 63 6c 6f 6c 48 63 6d 60 6d 6a 60     clolHclolHcm`mj`
     203:	6a 48 68 00 00 00 00 00 00 00 00 00 00 00 00 00     jHh.............
	...
     2f3:	2d 4d 60 68 4d 68 88 8a 4c 85 80 65 4a 68 88 86     -M`hMh..L..eJh..
     303:	48 81 80 61 63 83 80 63 83 85 66 86 80 66 86 88     H..ac..c..f..f..
     313:	4a 6c 6d 4f 6f 68 51 6f 8f 8d 4f 6c 68 4d 6c 8c     JlmOohQo..OlhMl.
     323:	8a 4c 85 80 65 4a 68 88 86 48 61 80 81 4d 6c 8c     .L..eJh..Ha..Ml.
     333:	8a 68 6c 6d 6f 31 6f 6d 6c 6d 4f 6f 88 80 68 6c     .hlmo1omlmOo..hl
     343:	6d 6f 2d 6c 6a 68 6a 4c 6c 85 80 65 68 6a 6c 4d     mo-ljhjLl..ehjlM
     353:	6a 8a 8c 4d 6a 8a 8c 4d 6a 6d 52 72 60 32 71 6f     j..Mj..MjmRr`2qo
     363:	6d 6f 51 71 8d 80 2d 2f 6d 6c 6a 6c 4d 6d 8a 80     moQq..-/mljlMm..
     373:	2a 4d 6c 8c 8a 48 61 80 81 28 4a 4c 2d 6d 00 00     *Ml..Ha..(JL-m..
	...
     3f3:	4a 4c 4e 4f 51 53 6a 80 8a 4c 6e 80 8e 6f 8f 80     JLNOQSj..Ln..o..
     403:	4f 40 4a 4c 4e 4f 51 53 6a 80 8a 4c 6e 80 8e 6f     O@JLNOQSj..Ln..o
     413:	8f 80 4f 40 56 53 76 96 80 76 74 31 54 51 54 36     ..O@VSv..vt1TQT6
     423:	76 96 80 56 53 76 96 80 76 74 31 4a 4c 4e 2f 4f     v..VSv..vt1JLN/O
	...
     4f3:	61 81 80 41 68 88 80 48 6a 8a 80 4a 28 66 86 80     a..Ah..Hj..J(f..
     503:	46 65 85 80 45 63 83 80 43 21 68 88 80 48 66 86     Fe..Ec..C!h..Hf.
     513:	80 46 65 85 80 45 23 68 88 80 48 66 86 80 46 65     .Fe..E#h..Hf..Fe
     523:	85 80 45 23 61 81 80 41 68 88 80 48 6a 8a 80 4a     ..E#a..Ah..Hj..J
     533:	28 66 86 80 46 65 85 80 45 63 83 80 43 21 00 00     (f..Fe..Ec..C!..
	...

000005f4 <__ctors_end>:
     5f4:	11 24       	eor	r1, r1
     5f6:	1f be       	out	0x3f, r1	; 63
     5f8:	cf ef       	ldi	r28, 0xFF	; 255
     5fa:	d8 e0       	ldi	r29, 0x08	; 8
     5fc:	de bf       	out	0x3e, r29	; 62
     5fe:	cd bf       	out	0x3d, r28	; 61

00000600 <__do_copy_data>:
     600:	11 e0       	ldi	r17, 0x01	; 1
     602:	a0 e0       	ldi	r26, 0x00	; 0
     604:	b1 e0       	ldi	r27, 0x01	; 1
     606:	ec e5       	ldi	r30, 0x5C	; 92
     608:	f8 e1       	ldi	r31, 0x18	; 24
     60a:	02 c0       	rjmp	.+4      	; 0x610 <__do_copy_data+0x10>
     60c:	05 90       	lpm	r0, Z+
     60e:	0d 92       	st	X+, r0
     610:	a8 36       	cpi	r26, 0x68	; 104
     612:	b1 07       	cpc	r27, r17
     614:	d9 f7       	brne	.-10     	; 0x60c <__do_copy_data+0xc>

00000616 <__do_clear_bss>:
     616:	22 e0       	ldi	r18, 0x02	; 2
     618:	a8 e6       	ldi	r26, 0x68	; 104
     61a:	b1 e0       	ldi	r27, 0x01	; 1
     61c:	01 c0       	rjmp	.+2      	; 0x620 <.do_clear_bss_start>

0000061e <.do_clear_bss_loop>:
     61e:	1d 92       	st	X+, r1

00000620 <.do_clear_bss_start>:
     620:	a8 32       	cpi	r26, 0x28	; 40
     622:	b2 07       	cpc	r27, r18
     624:	e1 f7       	brne	.-8      	; 0x61e <.do_clear_bss_loop>
     626:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <main>
     62a:	0c 94 2c 0c 	jmp	0x1858	; 0x1858 <_exit>

0000062e <__bad_interrupt>:
     62e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000632 <uart_put_char>:
	}
}

bool button_is_pressed(char* args){
	return args[strlen(args)-2] == '0';
}
     632:	0e 94 db 05 	call	0xbb6	; 0xbb6 <uart_send_byte>
     636:	80 e0       	ldi	r24, 0x00	; 0
     638:	90 e0       	ldi	r25, 0x00	; 0
     63a:	08 95       	ret

0000063c <print_lcd_static>:
     63c:	80 e0       	ldi	r24, 0x00	; 0
     63e:	0e 94 7f 06 	call	0xcfe	; 0xcfe <set_cursor_pos>
     642:	81 e2       	ldi	r24, 0x21	; 33
     644:	91 e0       	ldi	r25, 0x01	; 1
     646:	0e 94 64 06 	call	0xcc8	; 0xcc8 <write_lcd_string>
     64a:	80 e1       	ldi	r24, 0x10	; 16
     64c:	0e 94 7f 06 	call	0xcfe	; 0xcfe <set_cursor_pos>
     650:	82 e3       	ldi	r24, 0x32	; 50
     652:	91 e0       	ldi	r25, 0x01	; 1
     654:	0c 94 64 06 	jmp	0xcc8	; 0xcc8 <write_lcd_string>

00000658 <__vector_7>:
     658:	1f 92       	push	r1
     65a:	0f 92       	push	r0
     65c:	0f b6       	in	r0, 0x3f	; 63
     65e:	0f 92       	push	r0
     660:	11 24       	eor	r1, r1
     662:	2f 93       	push	r18
     664:	3f 93       	push	r19
     666:	4f 93       	push	r20
     668:	5f 93       	push	r21
     66a:	6f 93       	push	r22
     66c:	7f 93       	push	r23
     66e:	8f 93       	push	r24
     670:	9f 93       	push	r25
     672:	af 93       	push	r26
     674:	bf 93       	push	r27
     676:	ef 93       	push	r30
     678:	ff 93       	push	r31
     67a:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <heart_hundreths>
     67e:	8f 5f       	subi	r24, 0xFF	; 255
     680:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <heart_hundreths>
     684:	83 33       	cpi	r24, 0x33	; 51
     686:	18 f0       	brcs	.+6      	; 0x68e <__vector_7+0x36>
     688:	5f 9a       	sbi	0x0b, 7	; 11
     68a:	10 92 69 01 	sts	0x0169, r1	; 0x800169 <heart_hundreths>
     68e:	0e 94 9a 06 	call	0xd34	; 0xd34 <messages_timerproc>
     692:	ff 91       	pop	r31
     694:	ef 91       	pop	r30
     696:	bf 91       	pop	r27
     698:	af 91       	pop	r26
     69a:	9f 91       	pop	r25
     69c:	8f 91       	pop	r24
     69e:	7f 91       	pop	r23
     6a0:	6f 91       	pop	r22
     6a2:	5f 91       	pop	r21
     6a4:	4f 91       	pop	r20
     6a6:	3f 91       	pop	r19
     6a8:	2f 91       	pop	r18
     6aa:	0f 90       	pop	r0
     6ac:	0f be       	out	0x3f, r0	; 63
     6ae:	0f 90       	pop	r0
     6b0:	1f 90       	pop	r1
     6b2:	18 95       	reti

000006b4 <timer_init>:
     6b4:	8d e4       	ldi	r24, 0x4D	; 77
     6b6:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
     6ba:	82 e0       	ldi	r24, 0x02	; 2
     6bc:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
     6c0:	97 e0       	ldi	r25, 0x07	; 7
     6c2:	90 93 b1 00 	sts	0x00B1, r25	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
     6c6:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f8070>
     6ca:	08 95       	ret

000006cc <clear_heart>:
     6cc:	5f 98       	cbi	0x0b, 7	; 11
     6ce:	08 95       	ret

000006d0 <perform_command>:
     6d0:	81 33       	cpi	r24, 0x31	; 49
     6d2:	19 f0       	breq	.+6      	; 0x6da <perform_command+0xa>
     6d4:	82 33       	cpi	r24, 0x32	; 50
     6d6:	b9 f0       	breq	.+46     	; 0x706 <perform_command+0x36>
     6d8:	08 95       	ret
     6da:	61 33       	cpi	r22, 0x31	; 49
     6dc:	41 f0       	breq	.+16     	; 0x6ee <perform_command+0x1e>
     6de:	62 33       	cpi	r22, 0x32	; 50
     6e0:	79 f0       	breq	.+30     	; 0x700 <perform_command+0x30>
     6e2:	60 33       	cpi	r22, 0x30	; 48
     6e4:	f1 f4       	brne	.+60     	; 0x722 <perform_command+0x52>
     6e6:	83 e4       	ldi	r24, 0x43	; 67
     6e8:	91 e0       	ldi	r25, 0x01	; 1
     6ea:	0c 94 bd 06 	jmp	0xd7a	; 0xd7a <force_message>
     6ee:	ba 01       	movw	r22, r20
     6f0:	82 e1       	ldi	r24, 0x12	; 18
     6f2:	92 e0       	ldi	r25, 0x02	; 2
     6f4:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <strcpy>
     6f8:	81 e0       	ldi	r24, 0x01	; 1
     6fa:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <__data_end>
     6fe:	08 95       	ret
     700:	8a e4       	ldi	r24, 0x4A	; 74
     702:	91 e0       	ldi	r25, 0x01	; 1
     704:	09 c0       	rjmp	.+18     	; 0x718 <perform_command+0x48>
     706:	61 33       	cpi	r22, 0x31	; 49
     708:	31 f0       	breq	.+12     	; 0x716 <perform_command+0x46>
     70a:	62 33       	cpi	r22, 0x32	; 50
     70c:	39 f0       	breq	.+14     	; 0x71c <perform_command+0x4c>
     70e:	60 33       	cpi	r22, 0x30	; 48
     710:	41 f4       	brne	.+16     	; 0x722 <perform_command+0x52>
     712:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <clear_heart>
     716:	ca 01       	movw	r24, r20
     718:	0c 94 d4 06 	jmp	0xda8	; 0xda8 <queue_message>
     71c:	80 e0       	ldi	r24, 0x00	; 0
     71e:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <Summer_PlayMelody>
     722:	08 95       	ret

00000724 <display_sensors>:

void display_sensors(){
     724:	ff 92       	push	r15
     726:	0f 93       	push	r16
     728:	1f 93       	push	r17
     72a:	cf 93       	push	r28
     72c:	df 93       	push	r29
	char* args = (char*)sensor_buf;
	uint8_t b = 0;
     72e:	00 e0       	ldi	r16, 0x00	; 0
	while(args[++b] != ' ');
     730:	81 e0       	ldi	r24, 0x01	; 1
     732:	80 0f       	add	r24, r16
     734:	e8 2f       	mov	r30, r24
     736:	f0 e0       	ldi	r31, 0x00	; 0
     738:	ee 5e       	subi	r30, 0xEE	; 238
     73a:	fd 4f       	sbci	r31, 0xFD	; 253
     73c:	90 81       	ld	r25, Z
     73e:	90 32       	cpi	r25, 0x20	; 32
     740:	11 f0       	breq	.+4      	; 0x746 <display_sensors+0x22>
     742:	08 2f       	mov	r16, r24
     744:	f5 cf       	rjmp	.-22     	; 0x730 <display_sensors+0xc>
	args[b++] = '\0';
     746:	0e 5f       	subi	r16, 0xFE	; 254
     748:	10 82       	st	Z, r1
     74a:	c0 2f       	mov	r28, r16
	uint8_t k = b;
	while(args[++k] != ' ');
     74c:	81 e0       	ldi	r24, 0x01	; 1
     74e:	8c 0f       	add	r24, r28
     750:	e8 2f       	mov	r30, r24
     752:	f0 e0       	ldi	r31, 0x00	; 0
     754:	ee 5e       	subi	r30, 0xEE	; 238
     756:	fd 4f       	sbci	r31, 0xFD	; 253
     758:	90 81       	ld	r25, Z
     75a:	90 32       	cpi	r25, 0x20	; 32
     75c:	11 f0       	breq	.+4      	; 0x762 <display_sensors+0x3e>
     75e:	c8 2f       	mov	r28, r24
     760:	f5 cf       	rjmp	.-22     	; 0x74c <display_sensors+0x28>
	args[k++] = '\0';
     762:	ce 5f       	subi	r28, 0xFE	; 254
     764:	10 82       	st	Z, r1
	
	
	set_cursor_pos(FRONT_POS);
     766:	85 e0       	ldi	r24, 0x05	; 5
     768:	0e 94 7f 06 	call	0xcfe	; 0xcfe <set_cursor_pos>
	if(b == 2 && args[0] == '0'){ //0 is sent for front
     76c:	02 30       	cpi	r16, 0x02	; 2
     76e:	39 f4       	brne	.+14     	; 0x77e <display_sensors+0x5a>
     770:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <sensor_buf>
     774:	80 33       	cpi	r24, 0x30	; 48
     776:	19 f4       	brne	.+6      	; 0x77e <display_sensors+0x5a>
		write_lcd_string("!!!");
     778:	8f e4       	ldi	r24, 0x4F	; 79
     77a:	91 e0       	ldi	r25, 0x01	; 1
     77c:	13 c0       	rjmp	.+38     	; 0x7a4 <display_sensors+0x80>
	} else{
		for (int8_t i = 3-strlen(args); i > 0; i--) write_lcd_char(' ');
     77e:	e2 e1       	ldi	r30, 0x12	; 18
     780:	f2 e0       	ldi	r31, 0x02	; 2
     782:	01 90       	ld	r0, Z+
     784:	00 20       	and	r0, r0
     786:	e9 f7       	brne	.-6      	; 0x782 <display_sensors+0x5e>
     788:	31 97       	sbiw	r30, 0x01	; 1
     78a:	e2 51       	subi	r30, 0x12	; 18
     78c:	f2 40       	sbci	r31, 0x02	; 2
     78e:	d3 e0       	ldi	r29, 0x03	; 3
     790:	de 1b       	sub	r29, r30
     792:	1d 16       	cp	r1, r29
     794:	2c f4       	brge	.+10     	; 0x7a0 <display_sensors+0x7c>
     796:	80 e2       	ldi	r24, 0x20	; 32
     798:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <write_lcd_char>
     79c:	d1 50       	subi	r29, 0x01	; 1
     79e:	f9 cf       	rjmp	.-14     	; 0x792 <display_sensors+0x6e>
		write_lcd_string(args);
     7a0:	82 e1       	ldi	r24, 0x12	; 18
     7a2:	92 e0       	ldi	r25, 0x02	; 2
     7a4:	0e 94 64 06 	call	0xcc8	; 0xcc8 <write_lcd_string>
	}
	
	set_cursor_pos(BACK_POS);
     7a8:	84 e1       	ldi	r24, 0x14	; 20
     7aa:	0e 94 7f 06 	call	0xcfe	; 0xcfe <set_cursor_pos>
	if(k-b == 2 && args[b] == '0'){ //0 is sent for back
     7ae:	d0 e0       	ldi	r29, 0x00	; 0
     7b0:	10 e0       	ldi	r17, 0x00	; 0
     7b2:	ce 01       	movw	r24, r28
     7b4:	80 1b       	sub	r24, r16
     7b6:	91 0b       	sbc	r25, r17
     7b8:	02 97       	sbiw	r24, 0x02	; 2
     7ba:	49 f4       	brne	.+18     	; 0x7ce <display_sensors+0xaa>
     7bc:	f8 01       	movw	r30, r16
     7be:	ee 5e       	subi	r30, 0xEE	; 238
     7c0:	fd 4f       	sbci	r31, 0xFD	; 253
     7c2:	80 81       	ld	r24, Z
     7c4:	80 33       	cpi	r24, 0x30	; 48
     7c6:	19 f4       	brne	.+6      	; 0x7ce <display_sensors+0xaa>
		write_lcd_string("!!!");
     7c8:	8f e4       	ldi	r24, 0x4F	; 79
     7ca:	91 e0       	ldi	r25, 0x01	; 1
     7cc:	13 c0       	rjmp	.+38     	; 0x7f4 <display_sensors+0xd0>
	} else{
		for (int8_t i = 3-strlen(args+b); i > 0; i--) write_lcd_char(' ');
     7ce:	0e 5e       	subi	r16, 0xEE	; 238
     7d0:	1d 4f       	sbci	r17, 0xFD	; 253
     7d2:	f8 01       	movw	r30, r16
     7d4:	01 90       	ld	r0, Z+
     7d6:	00 20       	and	r0, r0
     7d8:	e9 f7       	brne	.-6      	; 0x7d4 <display_sensors+0xb0>
     7da:	80 2f       	mov	r24, r16
     7dc:	8e 1b       	sub	r24, r30
     7de:	94 e0       	ldi	r25, 0x04	; 4
     7e0:	f9 2e       	mov	r15, r25
     7e2:	f8 0e       	add	r15, r24
     7e4:	1f 14       	cp	r1, r15
     7e6:	2c f4       	brge	.+10     	; 0x7f2 <display_sensors+0xce>
     7e8:	80 e2       	ldi	r24, 0x20	; 32
     7ea:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <write_lcd_char>
     7ee:	fa 94       	dec	r15
     7f0:	f9 cf       	rjmp	.-14     	; 0x7e4 <display_sensors+0xc0>
		write_lcd_string(args+b);
     7f2:	c8 01       	movw	r24, r16
     7f4:	0e 94 64 06 	call	0xcc8	; 0xcc8 <write_lcd_string>
	}
	set_cursor_pos(CR_POS);
     7f8:	8f e1       	ldi	r24, 0x1F	; 31
     7fa:	0e 94 7f 06 	call	0xcfe	; 0xcfe <set_cursor_pos>
	write_lcd_char((args[k] == '0') ? 'R' : '_');
     7fe:	fe 01       	movw	r30, r28
     800:	ee 5e       	subi	r30, 0xEE	; 238
     802:	fd 4f       	sbci	r31, 0xFD	; 253
     804:	80 81       	ld	r24, Z
     806:	80 33       	cpi	r24, 0x30	; 48
     808:	11 f0       	breq	.+4      	; 0x80e <__DATA_REGION_LENGTH__+0xe>
     80a:	8f e5       	ldi	r24, 0x5F	; 95
     80c:	01 c0       	rjmp	.+2      	; 0x810 <__DATA_REGION_LENGTH__+0x10>
     80e:	82 e5       	ldi	r24, 0x52	; 82
     810:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <write_lcd_char>
	set_cursor_pos(CL_POS);
     814:	8e e1       	ldi	r24, 0x1E	; 30
     816:	0e 94 7f 06 	call	0xcfe	; 0xcfe <set_cursor_pos>
	write_lcd_char((args[k+1] == '0') ? 'L' : '_');
     81a:	fe 01       	movw	r30, r28
     81c:	ed 5e       	subi	r30, 0xED	; 237
     81e:	fd 4f       	sbci	r31, 0xFD	; 253
     820:	80 81       	ld	r24, Z
     822:	80 33       	cpi	r24, 0x30	; 48
     824:	11 f0       	breq	.+4      	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
     826:	8f e5       	ldi	r24, 0x5F	; 95
     828:	01 c0       	rjmp	.+2      	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
     82a:	8c e4       	ldi	r24, 0x4C	; 76
     82c:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <write_lcd_char>
	set_cursor_pos(PIR_POS);
     830:	8f e0       	ldi	r24, 0x0F	; 15
     832:	0e 94 7f 06 	call	0xcfe	; 0xcfe <set_cursor_pos>
	write_lcd_char((args[k+3] == '0') ? 'X' : '_');
     836:	fe 01       	movw	r30, r28
     838:	eb 5e       	subi	r30, 0xEB	; 235
     83a:	fd 4f       	sbci	r31, 0xFD	; 253
     83c:	80 81       	ld	r24, Z
     83e:	80 33       	cpi	r24, 0x30	; 48
     840:	11 f0       	breq	.+4      	; 0x846 <__DATA_REGION_LENGTH__+0x46>
     842:	8f e5       	ldi	r24, 0x5F	; 95
     844:	01 c0       	rjmp	.+2      	; 0x848 <__DATA_REGION_LENGTH__+0x48>
     846:	88 e5       	ldi	r24, 0x58	; 88
     848:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <write_lcd_char>
	if(args[k+2] == '0'){
     84c:	cc 5e       	subi	r28, 0xEC	; 236
     84e:	dd 4f       	sbci	r29, 0xFD	; 253
     850:	88 81       	ld	r24, Y
     852:	80 33       	cpi	r24, 0x30	; 48
     854:	21 f4       	brne	.+8      	; 0x85e <__DATA_REGION_LENGTH__+0x5e>
		if(!(LED_PORT & 1<<LEDR1)){
     856:	5e 99       	sbic	0x0b, 6	; 11
     858:	03 c0       	rjmp	.+6      	; 0x860 <__DATA_REGION_LENGTH__+0x60>
			//Summer_PlayMelody(MELODY_HONK);
			LED_PORT |= 1<<LEDR1;
     85a:	5e 9a       	sbi	0x0b, 6	; 11
     85c:	01 c0       	rjmp	.+2      	; 0x860 <__DATA_REGION_LENGTH__+0x60>
		}
	} else{
		LED_PORT &= ~(1<<LEDR1);
     85e:	5e 98       	cbi	0x0b, 6	; 11
	}
}
     860:	df 91       	pop	r29
     862:	cf 91       	pop	r28
     864:	1f 91       	pop	r17
     866:	0f 91       	pop	r16
     868:	ff 90       	pop	r15
     86a:	08 95       	ret

0000086c <__vector_18>:

ISR(USART_RX_vect){
     86c:	1f 92       	push	r1
     86e:	0f 92       	push	r0
     870:	0f b6       	in	r0, 0x3f	; 63
     872:	0f 92       	push	r0
     874:	11 24       	eor	r1, r1
     876:	2f 93       	push	r18
     878:	3f 93       	push	r19
     87a:	4f 93       	push	r20
     87c:	5f 93       	push	r21
     87e:	6f 93       	push	r22
     880:	7f 93       	push	r23
     882:	8f 93       	push	r24
     884:	9f 93       	push	r25
     886:	af 93       	push	r26
     888:	bf 93       	push	r27
     88a:	ef 93       	push	r30
     88c:	ff 93       	push	r31
	uart_linebuf[uart_bufind] = UDR0;
     88e:	e0 91 6a 01 	lds	r30, 0x016A	; 0x80016a <uart_bufind>
     892:	f0 e0       	ldi	r31, 0x00	; 0
     894:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     898:	e2 50       	subi	r30, 0x02	; 2
     89a:	fe 4f       	sbci	r31, 0xFE	; 254
     89c:	80 83       	st	Z, r24
	if(uart_linebuf[uart_bufind] == '\n'){
     89e:	e0 91 6a 01 	lds	r30, 0x016A	; 0x80016a <uart_bufind>
     8a2:	f0 e0       	ldi	r31, 0x00	; 0
     8a4:	e2 50       	subi	r30, 0x02	; 2
     8a6:	fe 4f       	sbci	r31, 0xFE	; 254
     8a8:	80 81       	ld	r24, Z
     8aa:	8a 30       	cpi	r24, 0x0A	; 10
     8ac:	89 f4       	brne	.+34     	; 0x8d0 <__vector_18+0x64>
		uart_linebuf[uart_bufind] = '\0';
     8ae:	e0 91 6a 01 	lds	r30, 0x016A	; 0x80016a <uart_bufind>
     8b2:	f0 e0       	ldi	r31, 0x00	; 0
     8b4:	e2 50       	subi	r30, 0x02	; 2
     8b6:	fe 4f       	sbci	r31, 0xFE	; 254
     8b8:	10 82       	st	Z, r1
		//Do something
		perform_command(uart_linebuf[0], uart_linebuf[1], uart_linebuf+2);
     8ba:	60 91 ff 01 	lds	r22, 0x01FF	; 0x8001ff <uart_linebuf+0x1>
     8be:	80 91 fe 01 	lds	r24, 0x01FE	; 0x8001fe <uart_linebuf>
     8c2:	40 e0       	ldi	r20, 0x00	; 0
     8c4:	52 e0       	ldi	r21, 0x02	; 2
     8c6:	0e 94 68 03 	call	0x6d0	; 0x6d0 <perform_command>
		//Done something
		uart_bufind = 0;
     8ca:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <uart_bufind>
     8ce:	05 c0       	rjmp	.+10     	; 0x8da <__vector_18+0x6e>
	} else{
		uart_bufind++;
     8d0:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <uart_bufind>
     8d4:	8f 5f       	subi	r24, 0xFF	; 255
     8d6:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <uart_bufind>
	}
}
     8da:	ff 91       	pop	r31
     8dc:	ef 91       	pop	r30
     8de:	bf 91       	pop	r27
     8e0:	af 91       	pop	r26
     8e2:	9f 91       	pop	r25
     8e4:	8f 91       	pop	r24
     8e6:	7f 91       	pop	r23
     8e8:	6f 91       	pop	r22
     8ea:	5f 91       	pop	r21
     8ec:	4f 91       	pop	r20
     8ee:	3f 91       	pop	r19
     8f0:	2f 91       	pop	r18
     8f2:	0f 90       	pop	r0
     8f4:	0f be       	out	0x3f, r0	; 63
     8f6:	0f 90       	pop	r0
     8f8:	1f 90       	pop	r1
     8fa:	18 95       	reti

000008fc <btn_init>:

void btn_init(){
	BTN_DDR &= ~((1<<HONKBTN)|(1<<DEADMANBTN)|(1<<EXTRABTN));
     8fc:	8a b1       	in	r24, 0x0a	; 10
     8fe:	83 7e       	andi	r24, 0xE3	; 227
     900:	8a b9       	out	0x0a, r24	; 10
	BTN_PORT |= (1<<HONKBTN)|(1<<DEADMANBTN)|(1<<EXTRABTN);
     902:	8b b1       	in	r24, 0x0b	; 11
     904:	8c 61       	ori	r24, 0x1C	; 28
     906:	8b b9       	out	0x0b, r24	; 11
	EICRA = (2<<ISC00)|(2<<ISC10);
     908:	8a e0       	ldi	r24, 0x0A	; 10
     90a:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
	EIMSK = 3;
     90e:	83 e0       	ldi	r24, 0x03	; 3
     910:	8d bb       	out	0x1d, r24	; 29
     912:	08 95       	ret

00000914 <__vector_1>:
}

//Extra
ISR(INT0_vect){
     914:	1f 92       	push	r1
     916:	0f 92       	push	r0
     918:	0f b6       	in	r0, 0x3f	; 63
     91a:	0f 92       	push	r0
     91c:	11 24       	eor	r1, r1
     91e:	2f 93       	push	r18
     920:	3f 93       	push	r19
     922:	4f 93       	push	r20
     924:	5f 93       	push	r21
     926:	6f 93       	push	r22
     928:	7f 93       	push	r23
     92a:	8f 93       	push	r24
     92c:	9f 93       	push	r25
     92e:	af 93       	push	r26
     930:	bf 93       	push	r27
     932:	ef 93       	push	r30
     934:	ff 93       	push	r31
	if((BTN_PIN & 1<<DEADMANBTN) && (read_avg_adc(0, 5) > 630)){
     936:	4c 9b       	sbis	0x09, 4	; 9
     938:	1a c0       	rjmp	.+52     	; 0x96e <__vector_1+0x5a>
     93a:	65 e0       	ldi	r22, 0x05	; 5
     93c:	70 e0       	ldi	r23, 0x00	; 0
     93e:	80 e0       	ldi	r24, 0x00	; 0
     940:	0e 94 14 06 	call	0xc28	; 0xc28 <read_avg_adc>
     944:	87 37       	cpi	r24, 0x77	; 119
     946:	92 40       	sbci	r25, 0x02	; 2
     948:	90 f0       	brcs	.+36     	; 0x96e <__vector_1+0x5a>
		x_rest = read_avg_adc(1, 25);
     94a:	69 e1       	ldi	r22, 0x19	; 25
     94c:	70 e0       	ldi	r23, 0x00	; 0
     94e:	81 e0       	ldi	r24, 0x01	; 1
     950:	0e 94 14 06 	call	0xc28	; 0xc28 <read_avg_adc>
     954:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <x_rest+0x1>
     958:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <x_rest>
		y_rest = read_avg_adc(2, 25);
     95c:	69 e1       	ldi	r22, 0x19	; 25
     95e:	70 e0       	ldi	r23, 0x00	; 0
     960:	82 e0       	ldi	r24, 0x02	; 2
     962:	0e 94 14 06 	call	0xc28	; 0xc28 <read_avg_adc>
     966:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     96a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
}
     96e:	ff 91       	pop	r31
     970:	ef 91       	pop	r30
     972:	bf 91       	pop	r27
     974:	af 91       	pop	r26
     976:	9f 91       	pop	r25
     978:	8f 91       	pop	r24
     97a:	7f 91       	pop	r23
     97c:	6f 91       	pop	r22
     97e:	5f 91       	pop	r21
     980:	4f 91       	pop	r20
     982:	3f 91       	pop	r19
     984:	2f 91       	pop	r18
     986:	0f 90       	pop	r0
     988:	0f be       	out	0x3f, r0	; 63
     98a:	0f 90       	pop	r0
     98c:	1f 90       	pop	r1
     98e:	18 95       	reti

00000990 <__vector_2>:

//Honk
ISR(INT1_vect){
     990:	1f 92       	push	r1
     992:	0f 92       	push	r0
     994:	0f b6       	in	r0, 0x3f	; 63
     996:	0f 92       	push	r0
     998:	11 24       	eor	r1, r1
     99a:	2f 93       	push	r18
     99c:	3f 93       	push	r19
     99e:	4f 93       	push	r20
     9a0:	5f 93       	push	r21
     9a2:	6f 93       	push	r22
     9a4:	7f 93       	push	r23
     9a6:	8f 93       	push	r24
     9a8:	9f 93       	push	r25
     9aa:	af 93       	push	r26
     9ac:	bf 93       	push	r27
     9ae:	ef 93       	push	r30
     9b0:	ff 93       	push	r31
	if(!(BTN_PIN & 1<<DEADMANBTN)){
     9b2:	4c 99       	sbic	0x09, 4	; 9
     9b4:	03 c0       	rjmp	.+6      	; 0x9bc <__vector_2+0x2c>
		uart_send_line("020");
     9b6:	83 e5       	ldi	r24, 0x53	; 83
     9b8:	91 e0       	ldi	r25, 0x01	; 1
     9ba:	02 c0       	rjmp	.+4      	; 0x9c0 <__vector_2+0x30>
	} else{
		uart_send_line("32");
     9bc:	87 e5       	ldi	r24, 0x57	; 87
     9be:	91 e0       	ldi	r25, 0x01	; 1
     9c0:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <uart_send_line>
	}
}
     9c4:	ff 91       	pop	r31
     9c6:	ef 91       	pop	r30
     9c8:	bf 91       	pop	r27
     9ca:	af 91       	pop	r26
     9cc:	9f 91       	pop	r25
     9ce:	8f 91       	pop	r24
     9d0:	7f 91       	pop	r23
     9d2:	6f 91       	pop	r22
     9d4:	5f 91       	pop	r21
     9d6:	4f 91       	pop	r20
     9d8:	3f 91       	pop	r19
     9da:	2f 91       	pop	r18
     9dc:	0f 90       	pop	r0
     9de:	0f be       	out	0x3f, r0	; 63
     9e0:	0f 90       	pop	r0
     9e2:	1f 90       	pop	r1
     9e4:	18 95       	reti

000009e6 <led_init>:

void led_init(){
	LED_DDR |= (1<<LEDG)|(1<<LEDR1)|(1<<LEDR2);
     9e6:	8a b1       	in	r24, 0x0a	; 10
     9e8:	80 6e       	ori	r24, 0xE0	; 224
     9ea:	8a b9       	out	0x0a, r24	; 10
	LED_PORT &= ~((1<<LEDG)|(1<<LEDR1));
     9ec:	8b b1       	in	r24, 0x0b	; 11
     9ee:	8f 79       	andi	r24, 0x9F	; 159
     9f0:	8b b9       	out	0x0b, r24	; 11
	LED_PORT |= 1<<LEDR2;
     9f2:	5f 9a       	sbi	0x0b, 7	; 11
     9f4:	08 95       	ret

000009f6 <main>:
volatile uint16_t x_rest = 511;
volatile uint16_t y_rest = 507; 


int main(void)
{
     9f6:	cf 93       	push	r28
     9f8:	df 93       	push	r29
     9fa:	cd b7       	in	r28, 0x3d	; 61
     9fc:	de b7       	in	r29, 0x3e	; 62
     9fe:	2f 97       	sbiw	r28, 0x0f	; 15
     a00:	0f b6       	in	r0, 0x3f	; 63
     a02:	f8 94       	cli
     a04:	de bf       	out	0x3e, r29	; 62
     a06:	0f be       	out	0x3f, r0	; 63
     a08:	cd bf       	out	0x3d, r28	; 61
	int16_t last_left = 0;
	int16_t last_right = 0;
	char itoabuf[15] = "03";
     a0a:	83 e0       	ldi	r24, 0x03	; 3
     a0c:	e2 e1       	ldi	r30, 0x12	; 18
     a0e:	f1 e0       	ldi	r31, 0x01	; 1
     a10:	9e 01       	movw	r18, r28
     a12:	2f 5f       	subi	r18, 0xFF	; 255
     a14:	3f 4f       	sbci	r19, 0xFF	; 255
     a16:	69 01       	movw	r12, r18
     a18:	d9 01       	movw	r26, r18
     a1a:	01 90       	ld	r0, Z+
     a1c:	0d 92       	st	X+, r0
     a1e:	8a 95       	dec	r24
     a20:	e1 f7       	brne	.-8      	; 0xa1a <main+0x24>
     a22:	fe 01       	movw	r30, r28
     a24:	34 96       	adiw	r30, 0x04	; 4
     a26:	8c e0       	ldi	r24, 0x0C	; 12
     a28:	df 01       	movw	r26, r30
     a2a:	1d 92       	st	X+, r1
     a2c:	8a 95       	dec	r24
     a2e:	e9 f7       	brne	.-6      	; 0xa2a <main+0x34>
	
	spi_init();
     a30:	0e 94 29 07 	call	0xe52	; 0xe52 <spi_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a34:	bf ef       	ldi	r27, 0xFF	; 255
     a36:	e0 e7       	ldi	r30, 0x70	; 112
     a38:	f2 e0       	ldi	r31, 0x02	; 2
     a3a:	b1 50       	subi	r27, 0x01	; 1
     a3c:	e0 40       	sbci	r30, 0x00	; 0
     a3e:	f0 40       	sbci	r31, 0x00	; 0
     a40:	e1 f7       	brne	.-8      	; 0xa3a <main+0x44>
     a42:	00 c0       	rjmp	.+0      	; 0xa44 <main+0x4e>
     a44:	00 00       	nop
	_delay_ms(100);
	lcd_init();
     a46:	0e 94 3f 06 	call	0xc7e	; 0xc7e <lcd_init>
	adc_init();
     a4a:	0e 94 08 06 	call	0xc10	; 0xc10 <adc_init>
	uart_init();
     a4e:	0e 94 fd 05 	call	0xbfa	; 0xbfa <uart_init>
	uart_flush();
     a52:	0e 94 f5 05 	call	0xbea	; 0xbea <uart_flush>
	led_init();
     a56:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <led_init>
	btn_init();
     a5a:	0e 94 7e 04 	call	0x8fc	; 0x8fc <btn_init>
	Summer_Init();
     a5e:	0e 94 03 08 	call	0x1006	; 0x1006 <Summer_Init>
	timer_init();
     a62:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <timer_init>
	print_lcd_static();
     a66:	0e 94 1e 03 	call	0x63c	; 0x63c <print_lcd_static>
	stdout = &uartstdout;
     a6a:	84 e0       	ldi	r24, 0x04	; 4
     a6c:	91 e0       	ldi	r25, 0x01	; 1
     a6e:	90 93 25 02 	sts	0x0225, r25	; 0x800225 <__iob+0x3>
     a72:	80 93 24 02 	sts	0x0224, r24	; 0x800224 <__iob+0x2>
	sei();
     a76:	78 94       	sei


int main(void)
{
	int16_t last_left = 0;
	int16_t last_right = 0;
     a78:	81 2c       	mov	r8, r1
     a7a:	91 2c       	mov	r9, r1
volatile uint16_t y_rest = 507; 


int main(void)
{
	int16_t last_left = 0;
     a7c:	a1 2c       	mov	r10, r1
     a7e:	b1 2c       	mov	r11, r1
			} else if(right > -10 && right < 10) right = 0;
			
			if(left != last_left || right != last_right){
				itoa(left, itoabuf+2, 10);
				uint8_t len = strlen(itoabuf);
				itoabuf[len++] = ' ';
     a80:	20 e2       	ldi	r18, 0x20	; 32
     a82:	52 2e       	mov	r5, r18
	stdout = &uartstdout;
	sei();
  
    while (1) 
    {
		if(!message_is_displaying()) display_next_message();
     a84:	0e 94 26 07 	call	0xe4c	; 0xe4c <message_is_displaying>
     a88:	81 11       	cpse	r24, r1
     a8a:	02 c0       	rjmp	.+4      	; 0xa90 <main+0x9a>
     a8c:	0e 94 07 07 	call	0xe0e	; 0xe0e <display_next_message>
		if(sensors_received){
     a90:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <__data_end>
     a94:	88 23       	and	r24, r24
     a96:	21 f0       	breq	.+8      	; 0xaa0 <main+0xaa>
			 display_sensors();
     a98:	0e 94 92 03 	call	0x724	; 0x724 <display_sensors>
			 sensors_received = false;
     a9c:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <__data_end>
		}
		if(!(BTN_PIN & 1<<DEADMANBTN)){
     aa0:	4c 99       	sbic	0x09, 4	; 9
     aa2:	78 c0       	rjmp	.+240    	; 0xb94 <main+0x19e>
			if(!(LED_PORT & (1<<LEDG))){
     aa4:	5d 99       	sbic	0x0b, 5	; 11
     aa6:	05 c0       	rjmp	.+10     	; 0xab2 <main+0xbc>
				uart_send_line("041");
     aa8:	8a e5       	ldi	r24, 0x5A	; 90
     aaa:	91 e0       	ldi	r25, 0x01	; 1
     aac:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <uart_send_line>
				LED_PORT |= 1<<LEDG;
     ab0:	5d 9a       	sbi	0x0b, 5	; 11
			}
			int16_t adjusted_x = x_rest - read_avg_adc(1, 25);
     ab2:	00 91 02 01 	lds	r16, 0x0102	; 0x800102 <x_rest>
     ab6:	10 91 03 01 	lds	r17, 0x0103	; 0x800103 <x_rest+0x1>
     aba:	69 e1       	ldi	r22, 0x19	; 25
     abc:	70 e0       	ldi	r23, 0x00	; 0
     abe:	81 e0       	ldi	r24, 0x01	; 1
     ac0:	0e 94 14 06 	call	0xc28	; 0xc28 <read_avg_adc>
     ac4:	38 01       	movw	r6, r16
     ac6:	68 1a       	sub	r6, r24
     ac8:	79 0a       	sbc	r7, r25
			int16_t adjusted_y = y_rest - read_avg_adc(2, 25);
     aca:	00 91 00 01 	lds	r16, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     ace:	10 91 01 01 	lds	r17, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     ad2:	69 e1       	ldi	r22, 0x19	; 25
     ad4:	70 e0       	ldi	r23, 0x00	; 0
     ad6:	82 e0       	ldi	r24, 0x02	; 2
     ad8:	0e 94 14 06 	call	0xc28	; 0xc28 <read_avg_adc>
     adc:	08 1b       	sub	r16, r24
     ade:	19 0b       	sbc	r17, r25
			int16_t left = adjusted_x-adjusted_y;
     ae0:	73 01       	movw	r14, r6
     ae2:	e0 1a       	sub	r14, r16
     ae4:	f1 0a       	sbc	r15, r17
			int16_t right = adjusted_x+adjusted_y;
     ae6:	06 0d       	add	r16, r6
     ae8:	17 1d       	adc	r17, r7
			if(left > 127){
     aea:	20 e8       	ldi	r18, 0x80	; 128
     aec:	e2 16       	cp	r14, r18
     aee:	f1 04       	cpc	r15, r1
     af0:	64 f4       	brge	.+24     	; 0xb0a <main+0x114>
				left = 127;
			}
			else if(left < -127){
     af2:	31 e8       	ldi	r19, 0x81	; 129
     af4:	e3 16       	cp	r14, r19
     af6:	3f ef       	ldi	r19, 0xFF	; 255
     af8:	f3 06       	cpc	r15, r19
     afa:	5c f0       	brlt	.+22     	; 0xb12 <main+0x11c>
				left = -127;
			} else if(left > -10 && left < 10) left = 0;
     afc:	c7 01       	movw	r24, r14
     afe:	09 96       	adiw	r24, 0x09	; 9
     b00:	43 97       	sbiw	r24, 0x13	; 19
     b02:	58 f4       	brcc	.+22     	; 0xb1a <main+0x124>
     b04:	e1 2c       	mov	r14, r1
     b06:	f1 2c       	mov	r15, r1
     b08:	08 c0       	rjmp	.+16     	; 0xb1a <main+0x124>
			int16_t adjusted_x = x_rest - read_avg_adc(1, 25);
			int16_t adjusted_y = y_rest - read_avg_adc(2, 25);
			int16_t left = adjusted_x-adjusted_y;
			int16_t right = adjusted_x+adjusted_y;
			if(left > 127){
				left = 127;
     b0a:	9f e7       	ldi	r25, 0x7F	; 127
     b0c:	e9 2e       	mov	r14, r25
     b0e:	f1 2c       	mov	r15, r1
     b10:	04 c0       	rjmp	.+8      	; 0xb1a <main+0x124>
			}
			else if(left < -127){
				left = -127;
     b12:	81 e8       	ldi	r24, 0x81	; 129
     b14:	e8 2e       	mov	r14, r24
     b16:	ff 24       	eor	r15, r15
     b18:	fa 94       	dec	r15
			} else if(left > -10 && left < 10) left = 0;
			
			if(right > 127) {
     b1a:	00 38       	cpi	r16, 0x80	; 128
     b1c:	11 05       	cpc	r17, r1
     b1e:	5c f4       	brge	.+22     	; 0xb36 <main+0x140>
				right = 127;
			}
			else if(right < -127){
     b20:	01 38       	cpi	r16, 0x81	; 129
     b22:	8f ef       	ldi	r24, 0xFF	; 255
     b24:	18 07       	cpc	r17, r24
     b26:	54 f0       	brlt	.+20     	; 0xb3c <main+0x146>
				right = -127;
			} else if(right > -10 && right < 10) right = 0;
     b28:	c8 01       	movw	r24, r16
     b2a:	09 96       	adiw	r24, 0x09	; 9
     b2c:	43 97       	sbiw	r24, 0x13	; 19
     b2e:	40 f4       	brcc	.+16     	; 0xb40 <main+0x14a>
     b30:	00 e0       	ldi	r16, 0x00	; 0
     b32:	10 e0       	ldi	r17, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <main+0x14a>
			else if(left < -127){
				left = -127;
			} else if(left > -10 && left < 10) left = 0;
			
			if(right > 127) {
				right = 127;
     b36:	0f e7       	ldi	r16, 0x7F	; 127
     b38:	10 e0       	ldi	r17, 0x00	; 0
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <main+0x14a>
			}
			else if(right < -127){
				right = -127;
     b3c:	01 e8       	ldi	r16, 0x81	; 129
     b3e:	1f ef       	ldi	r17, 0xFF	; 255
			} else if(right > -10 && right < 10) right = 0;
			
			if(left != last_left || right != last_right){
     b40:	ae 14       	cp	r10, r14
     b42:	bf 04       	cpc	r11, r15
     b44:	19 f4       	brne	.+6      	; 0xb4c <main+0x156>
     b46:	80 16       	cp	r8, r16
     b48:	91 06       	cpc	r9, r17
     b4a:	59 f1       	breq	.+86     	; 0xba2 <main+0x1ac>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     b4c:	4a e0       	ldi	r20, 0x0A	; 10
     b4e:	be 01       	movw	r22, r28
     b50:	6d 5f       	subi	r22, 0xFD	; 253
     b52:	7f 4f       	sbci	r23, 0xFF	; 255
     b54:	c7 01       	movw	r24, r14
     b56:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <__itoa_ncheck>
				itoa(left, itoabuf+2, 10);
				uint8_t len = strlen(itoabuf);
     b5a:	f6 01       	movw	r30, r12
     b5c:	01 90       	ld	r0, Z+
     b5e:	00 20       	and	r0, r0
     b60:	e9 f7       	brne	.-6      	; 0xb5c <main+0x166>
     b62:	31 97       	sbiw	r30, 0x01	; 1
     b64:	ec 19       	sub	r30, r12
     b66:	fd 09       	sbc	r31, r13
				itoabuf[len++] = ' ';
     b68:	81 e0       	ldi	r24, 0x01	; 1
     b6a:	8e 0f       	add	r24, r30
     b6c:	d6 01       	movw	r26, r12
     b6e:	ae 0f       	add	r26, r30
     b70:	b1 1d       	adc	r27, r1
     b72:	fd 01       	movw	r30, r26
     b74:	50 82       	st	Z, r5
				itoabuf[len] = '\0';
     b76:	b6 01       	movw	r22, r12
     b78:	68 0f       	add	r22, r24
     b7a:	71 1d       	adc	r23, r1
     b7c:	fb 01       	movw	r30, r22
     b7e:	10 82       	st	Z, r1
     b80:	4a e0       	ldi	r20, 0x0A	; 10
     b82:	c8 01       	movw	r24, r16
     b84:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <__itoa_ncheck>
				itoa(right, itoabuf+len, 10);
				uart_send_line(itoabuf);
     b88:	c6 01       	movw	r24, r12
     b8a:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <uart_send_line>
     b8e:	48 01       	movw	r8, r16
     b90:	57 01       	movw	r10, r14
     b92:	07 c0       	rjmp	.+14     	; 0xba2 <main+0x1ac>
			}
			last_left = left;
			last_right = right;
		} else{
			if(LED_PORT & (1<<LEDG)){
     b94:	5d 9b       	sbis	0x0b, 5	; 11
     b96:	05 c0       	rjmp	.+10     	; 0xba2 <main+0x1ac>
				uart_send_line("040");
     b98:	8e e5       	ldi	r24, 0x5E	; 94
     b9a:	91 e0       	ldi	r25, 0x01	; 1
     b9c:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <uart_send_line>
				LED_PORT &= ~(1<<LEDG);
     ba0:	5d 98       	cbi	0x0b, 5	; 11
     ba2:	ff ef       	ldi	r31, 0xFF	; 255
     ba4:	20 e7       	ldi	r18, 0x70	; 112
     ba6:	32 e0       	ldi	r19, 0x02	; 2
     ba8:	f1 50       	subi	r31, 0x01	; 1
     baa:	20 40       	sbci	r18, 0x00	; 0
     bac:	30 40       	sbci	r19, 0x00	; 0
     bae:	e1 f7       	brne	.-8      	; 0xba8 <main+0x1b2>
     bb0:	00 c0       	rjmp	.+0      	; 0xbb2 <main+0x1bc>
     bb2:	00 00       	nop
     bb4:	67 cf       	rjmp	.-306    	; 0xa84 <main+0x8e>

00000bb6 <uart_send_byte>:

bool uart_receive_byte(uint8_t* buffer){
	if(!( UCSR0A & (1<<RXC0))) return false;
	*buffer = UDR0;
	return true;
}
     bb6:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     bba:	95 ff       	sbrs	r25, 5
     bbc:	fc cf       	rjmp	.-8      	; 0xbb6 <uart_send_byte>
     bbe:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     bc2:	08 95       	ret

00000bc4 <uart_send_line>:
     bc4:	fc 01       	movw	r30, r24
     bc6:	91 91       	ld	r25, Z+
     bc8:	99 23       	and	r25, r25
     bca:	39 f0       	breq	.+14     	; 0xbda <uart_send_line+0x16>
     bcc:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     bd0:	85 ff       	sbrs	r24, 5
     bd2:	fc cf       	rjmp	.-8      	; 0xbcc <uart_send_line+0x8>
     bd4:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     bd8:	f6 cf       	rjmp	.-20     	; 0xbc6 <uart_send_line+0x2>
     bda:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     bde:	85 ff       	sbrs	r24, 5
     be0:	fc cf       	rjmp	.-8      	; 0xbda <uart_send_line+0x16>
     be2:	8a e0       	ldi	r24, 0x0A	; 10
     be4:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     be8:	08 95       	ret

00000bea <uart_flush>:

void uart_flush(){
	uint8_t dummy;
	while ( UCSR0A & (1<<RXC0) ) dummy = UDR0;
     bea:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     bee:	87 ff       	sbrs	r24, 7
     bf0:	03 c0       	rjmp	.+6      	; 0xbf8 <uart_flush+0xe>
     bf2:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     bf6:	f9 cf       	rjmp	.-14     	; 0xbea <uart_flush>
}
     bf8:	08 95       	ret

00000bfa <uart_init>:

void uart_init(){
	UBRR0 = 0;		//0==500000 baud rate.  12==38400 baud rate
     bfa:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
     bfe:	10 92 c4 00 	sts	0x00C4, r1	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UCSR0B = (1<<RXEN0)|(1<<TXEN0)|(1<<RXCIE0);
     c02:	88 e9       	ldi	r24, 0x98	; 152
     c04:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	/* Set frame format: 8data, 1stop bit */
	UCSR0C = (0<<USBS0)|(3<<UCSZ00);
     c08:	86 e0       	ldi	r24, 0x06	; 6
     c0a:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
     c0e:	08 95       	ret

00000c10 <adc_init>:
	//Start conversion
	ADCSRA |= 1<<ADSC;
	//Wait for completion and return result
	while( ADCSRA & 1<<ADSC);
	return ADC;
}
     c10:	87 b1       	in	r24, 0x07	; 7
     c12:	88 7f       	andi	r24, 0xF8	; 248
     c14:	87 b9       	out	0x07, r24	; 7
     c16:	86 e8       	ldi	r24, 0x86	; 134
     c18:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     c1c:	88 e3       	ldi	r24, 0x38	; 56
     c1e:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7f807e>
     c22:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
     c26:	08 95       	ret

00000c28 <read_avg_adc>:
/* the average ADC-value from ADCH and ADCL	from the given amount		*/
/* of iterations														*/
/* @param port The port to read from (0-3)								*/
/* @param iterations The amount of iterations to take average from		*/
/************************************************************************/
uint16_t read_avg_adc(uint8_t port, uint16_t iterations){
     c28:	9b 01       	movw	r18, r22
	//Choose port and reference voltage
	ADMUX = port|(1<<REFS0);
     c2a:	80 64       	ori	r24, 0x40	; 64
     c2c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	uint32_t sum = 0;
	//Start given amount of conversions and add up results
	for (uint8_t i = 0; i < iterations; i++){
     c30:	40 e0       	ldi	r20, 0x00	; 0
/* @param iterations The amount of iterations to take average from		*/
/************************************************************************/
uint16_t read_avg_adc(uint8_t port, uint16_t iterations){
	//Choose port and reference voltage
	ADMUX = port|(1<<REFS0);
	uint32_t sum = 0;
     c32:	60 e0       	ldi	r22, 0x00	; 0
     c34:	70 e0       	ldi	r23, 0x00	; 0
     c36:	cb 01       	movw	r24, r22
	//Start given amount of conversions and add up results
	for (uint8_t i = 0; i < iterations; i++){
     c38:	e4 2f       	mov	r30, r20
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	e2 17       	cp	r30, r18
     c3e:	f3 07       	cpc	r31, r19
     c40:	98 f4       	brcc	.+38     	; 0xc68 <read_avg_adc+0x40>
		ADCSRA |= 1<<ADSC;
     c42:	50 91 7a 00 	lds	r21, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     c46:	50 64       	ori	r21, 0x40	; 64
     c48:	50 93 7a 00 	sts	0x007A, r21	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
		while( ADCSRA & 1<<ADSC);
     c4c:	50 91 7a 00 	lds	r21, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     c50:	56 fd       	sbrc	r21, 6
     c52:	fc cf       	rjmp	.-8      	; 0xc4c <read_avg_adc+0x24>
		sum += ADC;
     c54:	e0 91 78 00 	lds	r30, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     c58:	f0 91 79 00 	lds	r31, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     c5c:	6e 0f       	add	r22, r30
     c5e:	7f 1f       	adc	r23, r31
     c60:	81 1d       	adc	r24, r1
     c62:	91 1d       	adc	r25, r1
uint16_t read_avg_adc(uint8_t port, uint16_t iterations){
	//Choose port and reference voltage
	ADMUX = port|(1<<REFS0);
	uint32_t sum = 0;
	//Start given amount of conversions and add up results
	for (uint8_t i = 0; i < iterations; i++){
     c64:	4f 5f       	subi	r20, 0xFF	; 255
     c66:	e8 cf       	rjmp	.-48     	; 0xc38 <read_avg_adc+0x10>
		ADCSRA |= 1<<ADSC;
		while( ADCSRA & 1<<ADSC);
		sum += ADC;
	}
	//Return truncated average
	return (uint16_t)(sum/iterations);
     c68:	40 e0       	ldi	r20, 0x00	; 0
     c6a:	50 e0       	ldi	r21, 0x00	; 0
     c6c:	0e 94 af 0b 	call	0x175e	; 0x175e <__udivmodsi4>
     c70:	c9 01       	movw	r24, r18
     c72:	08 95       	ret

00000c74 <spi_tx>:
     c74:	8e bd       	out	0x2e, r24	; 46
     c76:	0d b4       	in	r0, 0x2d	; 45
     c78:	07 fe       	sbrs	r0, 7
     c7a:	fd cf       	rjmp	.-6      	; 0xc76 <spi_tx+0x2>
     c7c:	08 95       	ret

00000c7e <lcd_init>:
     c7e:	cf 93       	push	r28
     c80:	df 93       	push	r29
     c82:	84 b1       	in	r24, 0x04	; 4
     c84:	85 60       	ori	r24, 0x05	; 5
     c86:	84 b9       	out	0x04, r24	; 4
     c88:	85 b1       	in	r24, 0x05	; 5
     c8a:	8a 7f       	andi	r24, 0xFA	; 250
     c8c:	85 b9       	out	0x05, r24	; 5
     c8e:	ca ee       	ldi	r28, 0xEA	; 234
     c90:	d0 e0       	ldi	r29, 0x00	; 0
     c92:	fe 01       	movw	r30, r28
     c94:	84 91       	lpm	r24, Z
     c96:	0e 94 3a 06 	call	0xc74	; 0xc74 <spi_tx>
     c9a:	87 eb       	ldi	r24, 0xB7	; 183
     c9c:	9b e0       	ldi	r25, 0x0B	; 11
     c9e:	01 97       	sbiw	r24, 0x01	; 1
     ca0:	f1 f7       	brne	.-4      	; 0xc9e <lcd_init+0x20>
     ca2:	00 c0       	rjmp	.+0      	; 0xca4 <lcd_init+0x26>
     ca4:	00 00       	nop
     ca6:	21 96       	adiw	r28, 0x01	; 1
     ca8:	90 e0       	ldi	r25, 0x00	; 0
     caa:	c3 3f       	cpi	r28, 0xF3	; 243
     cac:	d9 07       	cpc	r29, r25
     cae:	89 f7       	brne	.-30     	; 0xc92 <lcd_init+0x14>
     cb0:	df 91       	pop	r29
     cb2:	cf 91       	pop	r28
     cb4:	08 95       	ret

00000cb6 <write_lcd_char>:
     cb6:	28 9a       	sbi	0x05, 0	; 5
     cb8:	2a 98       	cbi	0x05, 2	; 5
     cba:	0e 94 3a 06 	call	0xc74	; 0xc74 <spi_tx>
     cbe:	80 e5       	ldi	r24, 0x50	; 80
     cc0:	8a 95       	dec	r24
     cc2:	f1 f7       	brne	.-4      	; 0xcc0 <write_lcd_char+0xa>
     cc4:	28 98       	cbi	0x05, 0	; 5
     cc6:	08 95       	ret

00000cc8 <write_lcd_string>:
     cc8:	1f 93       	push	r17
     cca:	cf 93       	push	r28
     ccc:	df 93       	push	r29
     cce:	ec 01       	movw	r28, r24
     cd0:	28 9a       	sbi	0x05, 0	; 5
     cd2:	2a 98       	cbi	0x05, 2	; 5
     cd4:	80 e0       	ldi	r24, 0x00	; 0
     cd6:	11 e0       	ldi	r17, 0x01	; 1
     cd8:	18 0f       	add	r17, r24
     cda:	fe 01       	movw	r30, r28
     cdc:	e8 0f       	add	r30, r24
     cde:	f1 1d       	adc	r31, r1
     ce0:	80 81       	ld	r24, Z
     ce2:	88 23       	and	r24, r24
     ce4:	39 f0       	breq	.+14     	; 0xcf4 <write_lcd_string+0x2c>
     ce6:	0e 94 3a 06 	call	0xc74	; 0xc74 <spi_tx>
     cea:	80 e5       	ldi	r24, 0x50	; 80
     cec:	8a 95       	dec	r24
     cee:	f1 f7       	brne	.-4      	; 0xcec <write_lcd_string+0x24>
     cf0:	81 2f       	mov	r24, r17
     cf2:	f1 cf       	rjmp	.-30     	; 0xcd6 <write_lcd_string+0xe>
     cf4:	28 98       	cbi	0x05, 0	; 5
     cf6:	df 91       	pop	r29
     cf8:	cf 91       	pop	r28
     cfa:	1f 91       	pop	r17
     cfc:	08 95       	ret

00000cfe <set_cursor_pos>:
/************************************************************************/
/* Sets the LCD cursors position.										*/
/* @param pos The position to set to									*/
/************************************************************************/
void set_cursor_pos(uint8_t pos){
	PORTB &= ~(1<<CSB);   //Clear CSB
     cfe:	2a 98       	cbi	0x05, 2	; 5
	spi_tx(pos|0x80);
     d00:	80 68       	ori	r24, 0x80	; 128
     d02:	0e 94 3a 06 	call	0xc74	; 0xc74 <spi_tx>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     d06:	80 e5       	ldi	r24, 0x50	; 80
     d08:	8a 95       	dec	r24
     d0a:	f1 f7       	brne	.-4      	; 0xd08 <set_cursor_pos+0xa>
     d0c:	08 95       	ret

00000d0e <clear_line>:

/************************************************************************/
/* Clears the given line on the LCD                                     */
/* @param linenum The line to clear (0-2)								*/
/************************************************************************/
void clear_line(uint8_t linenum){
     d0e:	cf 93       	push	r28
	set_cursor_pos(linenum * 16);
     d10:	82 95       	swap	r24
     d12:	80 7f       	andi	r24, 0xF0	; 240
     d14:	0e 94 7f 06 	call	0xcfe	; 0xcfe <set_cursor_pos>
	PORTB |= 1<<RS;
     d18:	28 9a       	sbi	0x05, 0	; 5
	PORTB &= ~(1<<CSB);
     d1a:	2a 98       	cbi	0x05, 2	; 5
     d1c:	c0 e1       	ldi	r28, 0x10	; 16
	for (uint8_t i = 0; i < 16; i++){
		spi_tx(' ');
     d1e:	80 e2       	ldi	r24, 0x20	; 32
     d20:	0e 94 3a 06 	call	0xc74	; 0xc74 <spi_tx>
     d24:	80 e5       	ldi	r24, 0x50	; 80
     d26:	8a 95       	dec	r24
     d28:	f1 f7       	brne	.-4      	; 0xd26 <clear_line+0x18>
     d2a:	c1 50       	subi	r28, 0x01	; 1
/************************************************************************/
void clear_line(uint8_t linenum){
	set_cursor_pos(linenum * 16);
	PORTB |= 1<<RS;
	PORTB &= ~(1<<CSB);
	for (uint8_t i = 0; i < 16; i++){
     d2c:	c1 f7       	brne	.-16     	; 0xd1e <clear_line+0x10>
		spi_tx(' ');
		_delay_us(30);
	}
	PORTB &= ~(1<<RS);
     d2e:	28 98       	cbi	0x05, 0	; 5
}
     d30:	cf 91       	pop	r28
     d32:	08 95       	ret

00000d34 <messages_timerproc>:
static volatile uint8_t message_extract_ind = 0;
static volatile uint8_t message_count = 0;
static volatile bool message_displaying = false;

void messages_timerproc(){
	if(message_displaying && ++message_parts > 100){
     d34:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <message_displaying>
     d38:	88 23       	and	r24, r24
     d3a:	f1 f0       	breq	.+60     	; 0xd78 <messages_timerproc+0x44>
     d3c:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <message_parts>
     d40:	90 91 f9 01 	lds	r25, 0x01F9	; 0x8001f9 <message_parts+0x1>
     d44:	01 96       	adiw	r24, 0x01	; 1
     d46:	90 93 f9 01 	sts	0x01F9, r25	; 0x8001f9 <message_parts+0x1>
     d4a:	80 93 f8 01 	sts	0x01F8, r24	; 0x8001f8 <message_parts>
     d4e:	85 36       	cpi	r24, 0x65	; 101
     d50:	91 05       	cpc	r25, r1
     d52:	90 f0       	brcs	.+36     	; 0xd78 <messages_timerproc+0x44>
		if(++message_seconds > DISP_TIME){
     d54:	80 91 f7 01 	lds	r24, 0x01F7	; 0x8001f7 <message_seconds>
     d58:	8f 5f       	subi	r24, 0xFF	; 255
     d5a:	80 93 f7 01 	sts	0x01F7, r24	; 0x8001f7 <message_seconds>
     d5e:	86 30       	cpi	r24, 0x06	; 6
     d60:	38 f0       	brcs	.+14     	; 0xd70 <messages_timerproc+0x3c>
			message_seconds = 0;
     d62:	10 92 f7 01 	sts	0x01F7, r1	; 0x8001f7 <message_seconds>
			message_displaying = false;
     d66:	10 92 6b 01 	sts	0x016B, r1	; 0x80016b <message_displaying>
			clear_line(2);
     d6a:	82 e0       	ldi	r24, 0x02	; 2
     d6c:	0e 94 87 06 	call	0xd0e	; 0xd0e <clear_line>
		}
		message_parts = 0;
     d70:	10 92 f9 01 	sts	0x01F9, r1	; 0x8001f9 <message_parts+0x1>
     d74:	10 92 f8 01 	sts	0x01F8, r1	; 0x8001f8 <message_parts>
     d78:	08 95       	ret

00000d7a <force_message>:
	}
}

void force_message(char* msg){
     d7a:	cf 93       	push	r28
     d7c:	df 93       	push	r29
     d7e:	ec 01       	movw	r28, r24
	message_displaying = true;
     d80:	81 e0       	ldi	r24, 0x01	; 1
     d82:	80 93 6b 01 	sts	0x016B, r24	; 0x80016b <message_displaying>
	message_parts = 0;
     d86:	10 92 f9 01 	sts	0x01F9, r1	; 0x8001f9 <message_parts+0x1>
     d8a:	10 92 f8 01 	sts	0x01F8, r1	; 0x8001f8 <message_parts>
	message_seconds = 0;
     d8e:	10 92 f7 01 	sts	0x01F7, r1	; 0x8001f7 <message_seconds>
	clear_line(2);
     d92:	82 e0       	ldi	r24, 0x02	; 2
     d94:	0e 94 87 06 	call	0xd0e	; 0xd0e <clear_line>
	set_cursor_pos(32);
     d98:	80 e2       	ldi	r24, 0x20	; 32
     d9a:	0e 94 7f 06 	call	0xcfe	; 0xcfe <set_cursor_pos>
	write_lcd_string(msg);
     d9e:	ce 01       	movw	r24, r28
}
     da0:	df 91       	pop	r29
     da2:	cf 91       	pop	r28
	message_displaying = true;
	message_parts = 0;
	message_seconds = 0;
	clear_line(2);
	set_cursor_pos(32);
	write_lcd_string(msg);
     da4:	0c 94 64 06 	jmp	0xcc8	; 0xcc8 <write_lcd_string>

00000da8 <queue_message>:
}

void queue_message(char* msg){
     da8:	cf 93       	push	r28
     daa:	df 93       	push	r29
     dac:	ec 01       	movw	r28, r24
	if(message_count == MSGBUF_SIZE){
     dae:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <message_count>
     db2:	88 30       	cpi	r24, 0x08	; 8
     db4:	81 f4       	brne	.+32     	; 0xdd6 <queue_message+0x2e>
		force_message((char*)(message_buf)[MOD_BUFSIZE(message_extract_ind++)]);
     db6:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <message_extract_ind>
     dba:	91 e0       	ldi	r25, 0x01	; 1
     dbc:	98 0f       	add	r25, r24
     dbe:	90 93 6d 01 	sts	0x016D, r25	; 0x80016d <message_extract_ind>
     dc2:	87 70       	andi	r24, 0x07	; 7
     dc4:	21 e1       	ldi	r18, 0x11	; 17
     dc6:	82 9f       	mul	r24, r18
     dc8:	c0 01       	movw	r24, r0
     dca:	11 24       	eor	r1, r1
     dcc:	81 59       	subi	r24, 0x91	; 145
     dce:	9e 4f       	sbci	r25, 0xFE	; 254
     dd0:	0e 94 bd 06 	call	0xd7a	; 0xd7a <force_message>
     dd4:	0a c0       	rjmp	.+20     	; 0xdea <queue_message+0x42>
	} else if(++message_count > MSGBUF_SIZE) message_count = MSGBUF_SIZE;
     dd6:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <message_count>
     dda:	8f 5f       	subi	r24, 0xFF	; 255
     ddc:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <message_count>
     de0:	89 30       	cpi	r24, 0x09	; 9
     de2:	18 f0       	brcs	.+6      	; 0xdea <queue_message+0x42>
     de4:	88 e0       	ldi	r24, 0x08	; 8
     de6:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <message_count>
	strcpy((char*)(message_buf)[MOD_BUFSIZE(message_insert_ind++)], msg);
     dea:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <message_insert_ind>
     dee:	91 e0       	ldi	r25, 0x01	; 1
     df0:	98 0f       	add	r25, r24
     df2:	90 93 6e 01 	sts	0x016E, r25	; 0x80016e <message_insert_ind>
     df6:	87 70       	andi	r24, 0x07	; 7
     df8:	21 e1       	ldi	r18, 0x11	; 17
     dfa:	82 9f       	mul	r24, r18
     dfc:	c0 01       	movw	r24, r0
     dfe:	11 24       	eor	r1, r1
     e00:	be 01       	movw	r22, r28
     e02:	81 59       	subi	r24, 0x91	; 145
     e04:	9e 4f       	sbci	r25, 0xFE	; 254
}
     e06:	df 91       	pop	r29
     e08:	cf 91       	pop	r28

void queue_message(char* msg){
	if(message_count == MSGBUF_SIZE){
		force_message((char*)(message_buf)[MOD_BUFSIZE(message_extract_ind++)]);
	} else if(++message_count > MSGBUF_SIZE) message_count = MSGBUF_SIZE;
	strcpy((char*)(message_buf)[MOD_BUFSIZE(message_insert_ind++)], msg);
     e0a:	0c 94 f0 0b 	jmp	0x17e0	; 0x17e0 <strcpy>

00000e0e <display_next_message>:
}

void display_next_message(){
	if(message_count > 0){
     e0e:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <message_count>
     e12:	88 23       	and	r24, r24
     e14:	d1 f0       	breq	.+52     	; 0xe4a <display_next_message+0x3c>
		set_cursor_pos(32);
     e16:	80 e2       	ldi	r24, 0x20	; 32
     e18:	0e 94 7f 06 	call	0xcfe	; 0xcfe <set_cursor_pos>
		write_lcd_string((char*)(message_buf)[MOD_BUFSIZE(message_extract_ind++)]);
     e1c:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <message_extract_ind>
     e20:	91 e0       	ldi	r25, 0x01	; 1
     e22:	98 0f       	add	r25, r24
     e24:	90 93 6d 01 	sts	0x016D, r25	; 0x80016d <message_extract_ind>
     e28:	87 70       	andi	r24, 0x07	; 7
     e2a:	21 e1       	ldi	r18, 0x11	; 17
     e2c:	82 9f       	mul	r24, r18
     e2e:	c0 01       	movw	r24, r0
     e30:	11 24       	eor	r1, r1
     e32:	81 59       	subi	r24, 0x91	; 145
     e34:	9e 4f       	sbci	r25, 0xFE	; 254
     e36:	0e 94 64 06 	call	0xcc8	; 0xcc8 <write_lcd_string>
		message_displaying = true;
     e3a:	81 e0       	ldi	r24, 0x01	; 1
     e3c:	80 93 6b 01 	sts	0x016B, r24	; 0x80016b <message_displaying>
		message_count--;
     e40:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <message_count>
     e44:	81 50       	subi	r24, 0x01	; 1
     e46:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <message_count>
     e4a:	08 95       	ret

00000e4c <message_is_displaying>:
	}
}

bool message_is_displaying(){
	return message_displaying;
     e4c:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <message_displaying>
}
     e50:	08 95       	ret

00000e52 <spi_init>:
/************************************************************************/
/* Initiates the MCU SPI as master with 16 as prescaler factor           */
/************************************************************************/
void spi_init(){
	// Set MOSI and SCK as out
	DDRB |= (1<<MOSI) | (1<<SCK) | (1<<SS);
     e52:	84 b1       	in	r24, 0x04	; 4
     e54:	8c 62       	ori	r24, 0x2C	; 44
     e56:	84 b9       	out	0x04, r24	; 4
	DDRB &= ~(1<<MISO);
     e58:	24 98       	cbi	0x04, 4	; 4
	//Enable SPI in master mode with fck/4 as clock
	SPCR = (1<<SPE) | (1<<MSTR);
     e5a:	80 e5       	ldi	r24, 0x50	; 80
     e5c:	8c bd       	out	0x2c, r24	; 44
     e5e:	08 95       	ret

00000e60 <Summer_PlayNote>:
static volatile uint16_t note_time = 0; // The timer cycles left for current note
static volatile uint8_t cur_melody;     // The index of the current melody
static volatile uint8_t current_note;   // The index of the curent note

// Plays a single note on the buzzer
void Summer_PlayNote(uint8_t note){
     e60:	cf 92       	push	r12
     e62:	df 92       	push	r13
     e64:	ef 92       	push	r14
     e66:	ff 92       	push	r15
     e68:	cf 93       	push	r28
     e6a:	df 93       	push	r29
     e6c:	d8 2f       	mov	r29, r24
    if(GET_PITCH_EXP(note) == -1){  // Stop buzzer if note is a rest
     e6e:	68 2f       	mov	r22, r24
     e70:	70 e0       	ldi	r23, 0x00	; 0
     e72:	6f 71       	andi	r22, 0x1F	; 31
#ifdef SUMMER_USE_SW
        rest = true;
#else
        TCCR1A &= ~(1<<COM1A0);
     e74:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
static volatile uint8_t cur_melody;     // The index of the current melody
static volatile uint8_t current_note;   // The index of the curent note

// Plays a single note on the buzzer
void Summer_PlayNote(uint8_t note){
    if(GET_PITCH_EXP(note) == -1){  // Stop buzzer if note is a rest
     e78:	61 15       	cp	r22, r1
     e7a:	71 05       	cpc	r23, r1
     e7c:	21 f4       	brne	.+8      	; 0xe86 <Summer_PlayNote+0x26>
#ifdef SUMMER_USE_SW
        rest = true;
#else
        TCCR1A &= ~(1<<COM1A0);
     e7e:	8f 7b       	andi	r24, 0xBF	; 191
     e80:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
     e84:	21 c0       	rjmp	.+66     	; 0xec8 <Summer_PlayNote+0x68>
#endif
    } else{                         // Start buzzer and set correct frequency
#ifdef SUMMER_USE_SW
        rest = false;
#else
        TCCR1A |= (1<<COM1A0);
     e86:	80 64       	ori	r24, 0x40	; 64
     e88:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
#endif
        OCR1A = LOWC_OCR / (pow(ROOT12_2,GET_PITCH_EXP(note)));
     e8c:	61 50       	subi	r22, 0x01	; 1
     e8e:	71 09       	sbc	r23, r1
     e90:	07 2e       	mov	r0, r23
     e92:	00 0c       	add	r0, r0
     e94:	88 0b       	sbc	r24, r24
     e96:	99 0b       	sbc	r25, r25
     e98:	0e 94 c4 08 	call	0x1188	; 0x1188 <__floatsisf>
     e9c:	9b 01       	movw	r18, r22
     e9e:	ac 01       	movw	r20, r24
     ea0:	6d e7       	ldi	r22, 0x7D	; 125
     ea2:	7c e9       	ldi	r23, 0x9C	; 156
     ea4:	87 e8       	ldi	r24, 0x87	; 135
     ea6:	9f e3       	ldi	r25, 0x3F	; 63
     ea8:	0e 94 50 09 	call	0x12a0	; 0x12a0 <pow>
     eac:	9b 01       	movw	r18, r22
     eae:	ac 01       	movw	r20, r24
     eb0:	60 e0       	ldi	r22, 0x00	; 0
     eb2:	70 e6       	ldi	r23, 0x60	; 96
     eb4:	80 e7       	ldi	r24, 0x70	; 112
     eb6:	96 e4       	ldi	r25, 0x46	; 70
     eb8:	0e 94 21 08 	call	0x1042	; 0x1042 <__divsf3>
     ebc:	0e 94 93 08 	call	0x1126	; 0x1126 <__fixunssfsi>
     ec0:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     ec4:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
    }
    // cycles needed = frequency / (bar time) / (note length divisor)
    note_time = ((F_CPU/(OCR1A + 1))/(bpms[cur_melody]/(240.0)))/GET_DURATION_DIV(note);
     ec8:	20 91 88 00 	lds	r18, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
     ecc:	30 91 89 00 	lds	r19, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     ed0:	c0 91 fb 01 	lds	r28, 0x01FB	; 0x8001fb <cur_melody>
     ed4:	2f 5f       	subi	r18, 0xFF	; 255
     ed6:	3f 4f       	sbci	r19, 0xFF	; 255
     ed8:	40 e0       	ldi	r20, 0x00	; 0
     eda:	50 e0       	ldi	r21, 0x00	; 0
     edc:	60 e0       	ldi	r22, 0x00	; 0
     ede:	72 e1       	ldi	r23, 0x12	; 18
     ee0:	8a e7       	ldi	r24, 0x7A	; 122
     ee2:	90 e0       	ldi	r25, 0x00	; 0
     ee4:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <__divmodsi4>
     ee8:	ca 01       	movw	r24, r20
     eea:	b9 01       	movw	r22, r18
     eec:	0e 94 c4 08 	call	0x1188	; 0x1188 <__floatsisf>
     ef0:	6b 01       	movw	r12, r22
     ef2:	7c 01       	movw	r14, r24
     ef4:	ec 2f       	mov	r30, r28
     ef6:	f0 e0       	ldi	r31, 0x00	; 0
     ef8:	ee 59       	subi	r30, 0x9E	; 158
     efa:	fe 4f       	sbci	r31, 0xFE	; 254
     efc:	60 81       	ld	r22, Z
     efe:	70 e0       	ldi	r23, 0x00	; 0
     f00:	80 e0       	ldi	r24, 0x00	; 0
     f02:	90 e0       	ldi	r25, 0x00	; 0
     f04:	0e 94 c4 08 	call	0x1188	; 0x1188 <__floatsisf>
     f08:	20 e0       	ldi	r18, 0x00	; 0
     f0a:	30 e0       	ldi	r19, 0x00	; 0
     f0c:	40 e7       	ldi	r20, 0x70	; 112
     f0e:	53 e4       	ldi	r21, 0x43	; 67
     f10:	0e 94 21 08 	call	0x1042	; 0x1042 <__divsf3>
     f14:	9b 01       	movw	r18, r22
     f16:	ac 01       	movw	r20, r24
     f18:	c7 01       	movw	r24, r14
     f1a:	b6 01       	movw	r22, r12
     f1c:	0e 94 21 08 	call	0x1042	; 0x1042 <__divsf3>
     f20:	6b 01       	movw	r12, r22
     f22:	7c 01       	movw	r14, r24
     f24:	d2 95       	swap	r29
     f26:	d6 95       	lsr	r29
     f28:	d7 70       	andi	r29, 0x07	; 7
     f2a:	61 e0       	ldi	r22, 0x01	; 1
     f2c:	70 e0       	ldi	r23, 0x00	; 0
     f2e:	02 c0       	rjmp	.+4      	; 0xf34 <Summer_PlayNote+0xd4>
     f30:	66 0f       	add	r22, r22
     f32:	77 1f       	adc	r23, r23
     f34:	da 95       	dec	r29
     f36:	e2 f7       	brpl	.-8      	; 0xf30 <Summer_PlayNote+0xd0>
     f38:	07 2e       	mov	r0, r23
     f3a:	00 0c       	add	r0, r0
     f3c:	88 0b       	sbc	r24, r24
     f3e:	99 0b       	sbc	r25, r25
     f40:	0e 94 c4 08 	call	0x1188	; 0x1188 <__floatsisf>
     f44:	9b 01       	movw	r18, r22
     f46:	ac 01       	movw	r20, r24
     f48:	c7 01       	movw	r24, r14
     f4a:	b6 01       	movw	r22, r12
     f4c:	0e 94 21 08 	call	0x1042	; 0x1042 <__divsf3>
     f50:	0e 94 93 08 	call	0x1126	; 0x1126 <__fixunssfsi>
     f54:	70 93 fd 01 	sts	0x01FD, r23	; 0x8001fd <note_time+0x1>
     f58:	60 93 fc 01 	sts	0x01FC, r22	; 0x8001fc <note_time>
}
     f5c:	df 91       	pop	r29
     f5e:	cf 91       	pop	r28
     f60:	ff 90       	pop	r15
     f62:	ef 90       	pop	r14
     f64:	df 90       	pop	r13
     f66:	cf 90       	pop	r12
     f68:	08 95       	ret

00000f6a <__vector_11>:

// Interrupt vector to play next note after the current notes length is passed
// Stops the melody when it encounters a 0xFF
ISR(TIMER1_COMPA_vect){
     f6a:	1f 92       	push	r1
     f6c:	0f 92       	push	r0
     f6e:	0f b6       	in	r0, 0x3f	; 63
     f70:	0f 92       	push	r0
     f72:	11 24       	eor	r1, r1
     f74:	2f 93       	push	r18
     f76:	3f 93       	push	r19
     f78:	4f 93       	push	r20
     f7a:	5f 93       	push	r21
     f7c:	6f 93       	push	r22
     f7e:	7f 93       	push	r23
     f80:	8f 93       	push	r24
     f82:	9f 93       	push	r25
     f84:	af 93       	push	r26
     f86:	bf 93       	push	r27
     f88:	ef 93       	push	r30
     f8a:	ff 93       	push	r31
    if(rest)
        SW_SUMMER_PORT &= ~(1<<SUMMER_PIN);
    else
        SW_SUMMER_PORT ^= (1<<SUMMER_PIN);
#endif
    note_time--; 
     f8c:	80 91 fc 01 	lds	r24, 0x01FC	; 0x8001fc <note_time>
     f90:	90 91 fd 01 	lds	r25, 0x01FD	; 0x8001fd <note_time+0x1>
     f94:	01 97       	sbiw	r24, 0x01	; 1
     f96:	90 93 fd 01 	sts	0x01FD, r25	; 0x8001fd <note_time+0x1>
     f9a:	80 93 fc 01 	sts	0x01FC, r24	; 0x8001fc <note_time>
    if (note_time == 0){
     f9e:	80 91 fc 01 	lds	r24, 0x01FC	; 0x8001fc <note_time>
     fa2:	90 91 fd 01 	lds	r25, 0x01FD	; 0x8001fd <note_time+0x1>
     fa6:	89 2b       	or	r24, r25
     fa8:	e9 f4       	brne	.+58     	; 0xfe4 <__vector_11+0x7a>
        current_note++;
     faa:	80 91 fa 01 	lds	r24, 0x01FA	; 0x8001fa <current_note>
     fae:	8f 5f       	subi	r24, 0xFF	; 255
     fb0:	80 93 fa 01 	sts	0x01FA, r24	; 0x8001fa <current_note>
        // Read next note from program memory
        uint8_t note = pgm_read_byte(&(melodies[cur_melody][current_note]));
     fb4:	e0 91 fb 01 	lds	r30, 0x01FB	; 0x8001fb <cur_melody>
     fb8:	80 91 fa 01 	lds	r24, 0x01FA	; 0x8001fa <current_note>
     fbc:	f0 e0       	ldi	r31, 0x00	; 0
     fbe:	fe 2f       	mov	r31, r30
     fc0:	ee 27       	eor	r30, r30
     fc2:	e8 0f       	add	r30, r24
     fc4:	f1 1d       	adc	r31, r1
     fc6:	ed 50       	subi	r30, 0x0D	; 13
     fc8:	ff 4f       	sbci	r31, 0xFF	; 255
     fca:	84 91       	lpm	r24, Z
        if(note == 0x00){   // Stop buzzer if 0xFF
     fcc:	81 11       	cpse	r24, r1
     fce:	08 c0       	rjmp	.+16     	; 0xfe0 <__vector_11+0x76>
            TIMSK1 = 0;
     fd0:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
            TCCR1B &= ~(1<<CS10);
     fd4:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     fd8:	8e 7f       	andi	r24, 0xFE	; 254
     fda:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     fde:	02 c0       	rjmp	.+4      	; 0xfe4 <__vector_11+0x7a>
#ifdef SUMMER_USE_SW
            SW_SUMMER_PORT &= ~(1<<SUMMER_PIN);
#endif
        } else
            Summer_PlayNote(note);
     fe0:	0e 94 30 07 	call	0xe60	; 0xe60 <Summer_PlayNote>
    }
}
     fe4:	ff 91       	pop	r31
     fe6:	ef 91       	pop	r30
     fe8:	bf 91       	pop	r27
     fea:	af 91       	pop	r26
     fec:	9f 91       	pop	r25
     fee:	8f 91       	pop	r24
     ff0:	7f 91       	pop	r23
     ff2:	6f 91       	pop	r22
     ff4:	5f 91       	pop	r21
     ff6:	4f 91       	pop	r20
     ff8:	3f 91       	pop	r19
     ffa:	2f 91       	pop	r18
     ffc:	0f 90       	pop	r0
     ffe:	0f be       	out	0x3f, r0	; 63
    1000:	0f 90       	pop	r0
    1002:	1f 90       	pop	r1
    1004:	18 95       	reti

00001006 <Summer_Init>:

// ------------- PUBLIC -------------

// Initializes the summer
void Summer_Init(void){
    SUMMER_DDR |= (1<<SUMMER_PIN);
    1006:	21 9a       	sbi	0x04, 1	; 4
    // Start timer
#ifdef SUMMER_USE_SW
    TCCR1A = 0;
#else
    TCCR1A = (1<<COM1A0);
    1008:	80 e4       	ldi	r24, 0x40	; 64
    100a:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
#endif
    TCCR1B = (1<<WGM12);
    100e:	88 e0       	ldi	r24, 0x08	; 8
    1010:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    1014:	08 95       	ret

00001016 <Summer_PlayMelody>:
}

// Plays a specified melody on the buzzer
void Summer_PlayMelody(uint8_t melody){
    cur_melody = melody;
    1016:	80 93 fb 01 	sts	0x01FB, r24	; 0x8001fb <cur_melody>
    current_note = 0;
    101a:	10 92 fa 01 	sts	0x01FA, r1	; 0x8001fa <current_note>
    Summer_PlayNote(pgm_read_byte(&(melodies[melody][0])));
    101e:	e8 2f       	mov	r30, r24
    1020:	f0 e0       	ldi	r31, 0x00	; 0
    1022:	fe 2f       	mov	r31, r30
    1024:	ee 27       	eor	r30, r30
    1026:	ed 50       	subi	r30, 0x0D	; 13
    1028:	ff 4f       	sbci	r31, 0xFF	; 255
    102a:	84 91       	lpm	r24, Z
    102c:	0e 94 30 07 	call	0xe60	; 0xe60 <Summer_PlayNote>
    TIMSK1 = (1<<OCIE1A);
    1030:	82 e0       	ldi	r24, 0x02	; 2
    1032:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
    TCCR1B |= (1<<CS10);
    1036:	e1 e8       	ldi	r30, 0x81	; 129
    1038:	f0 e0       	ldi	r31, 0x00	; 0
    103a:	80 81       	ld	r24, Z
    103c:	81 60       	ori	r24, 0x01	; 1
    103e:	80 83       	st	Z, r24
    1040:	08 95       	ret

00001042 <__divsf3>:
    1042:	0e 94 35 08 	call	0x106a	; 0x106a <__divsf3x>
    1046:	0c 94 16 09 	jmp	0x122c	; 0x122c <__fp_round>
    104a:	0e 94 0f 09 	call	0x121e	; 0x121e <__fp_pscB>
    104e:	58 f0       	brcs	.+22     	; 0x1066 <__divsf3+0x24>
    1050:	0e 94 08 09 	call	0x1210	; 0x1210 <__fp_pscA>
    1054:	40 f0       	brcs	.+16     	; 0x1066 <__divsf3+0x24>
    1056:	29 f4       	brne	.+10     	; 0x1062 <__divsf3+0x20>
    1058:	5f 3f       	cpi	r21, 0xFF	; 255
    105a:	29 f0       	breq	.+10     	; 0x1066 <__divsf3+0x24>
    105c:	0c 94 ff 08 	jmp	0x11fe	; 0x11fe <__fp_inf>
    1060:	51 11       	cpse	r21, r1
    1062:	0c 94 4a 09 	jmp	0x1294	; 0x1294 <__fp_szero>
    1066:	0c 94 05 09 	jmp	0x120a	; 0x120a <__fp_nan>

0000106a <__divsf3x>:
    106a:	0e 94 27 09 	call	0x124e	; 0x124e <__fp_split3>
    106e:	68 f3       	brcs	.-38     	; 0x104a <__divsf3+0x8>

00001070 <__divsf3_pse>:
    1070:	99 23       	and	r25, r25
    1072:	b1 f3       	breq	.-20     	; 0x1060 <__divsf3+0x1e>
    1074:	55 23       	and	r21, r21
    1076:	91 f3       	breq	.-28     	; 0x105c <__divsf3+0x1a>
    1078:	95 1b       	sub	r25, r21
    107a:	55 0b       	sbc	r21, r21
    107c:	bb 27       	eor	r27, r27
    107e:	aa 27       	eor	r26, r26
    1080:	62 17       	cp	r22, r18
    1082:	73 07       	cpc	r23, r19
    1084:	84 07       	cpc	r24, r20
    1086:	38 f0       	brcs	.+14     	; 0x1096 <__divsf3_pse+0x26>
    1088:	9f 5f       	subi	r25, 0xFF	; 255
    108a:	5f 4f       	sbci	r21, 0xFF	; 255
    108c:	22 0f       	add	r18, r18
    108e:	33 1f       	adc	r19, r19
    1090:	44 1f       	adc	r20, r20
    1092:	aa 1f       	adc	r26, r26
    1094:	a9 f3       	breq	.-22     	; 0x1080 <__divsf3_pse+0x10>
    1096:	35 d0       	rcall	.+106    	; 0x1102 <__divsf3_pse+0x92>
    1098:	0e 2e       	mov	r0, r30
    109a:	3a f0       	brmi	.+14     	; 0x10aa <__divsf3_pse+0x3a>
    109c:	e0 e8       	ldi	r30, 0x80	; 128
    109e:	32 d0       	rcall	.+100    	; 0x1104 <__divsf3_pse+0x94>
    10a0:	91 50       	subi	r25, 0x01	; 1
    10a2:	50 40       	sbci	r21, 0x00	; 0
    10a4:	e6 95       	lsr	r30
    10a6:	00 1c       	adc	r0, r0
    10a8:	ca f7       	brpl	.-14     	; 0x109c <__divsf3_pse+0x2c>
    10aa:	2b d0       	rcall	.+86     	; 0x1102 <__divsf3_pse+0x92>
    10ac:	fe 2f       	mov	r31, r30
    10ae:	29 d0       	rcall	.+82     	; 0x1102 <__divsf3_pse+0x92>
    10b0:	66 0f       	add	r22, r22
    10b2:	77 1f       	adc	r23, r23
    10b4:	88 1f       	adc	r24, r24
    10b6:	bb 1f       	adc	r27, r27
    10b8:	26 17       	cp	r18, r22
    10ba:	37 07       	cpc	r19, r23
    10bc:	48 07       	cpc	r20, r24
    10be:	ab 07       	cpc	r26, r27
    10c0:	b0 e8       	ldi	r27, 0x80	; 128
    10c2:	09 f0       	breq	.+2      	; 0x10c6 <__divsf3_pse+0x56>
    10c4:	bb 0b       	sbc	r27, r27
    10c6:	80 2d       	mov	r24, r0
    10c8:	bf 01       	movw	r22, r30
    10ca:	ff 27       	eor	r31, r31
    10cc:	93 58       	subi	r25, 0x83	; 131
    10ce:	5f 4f       	sbci	r21, 0xFF	; 255
    10d0:	3a f0       	brmi	.+14     	; 0x10e0 <__divsf3_pse+0x70>
    10d2:	9e 3f       	cpi	r25, 0xFE	; 254
    10d4:	51 05       	cpc	r21, r1
    10d6:	78 f0       	brcs	.+30     	; 0x10f6 <__divsf3_pse+0x86>
    10d8:	0c 94 ff 08 	jmp	0x11fe	; 0x11fe <__fp_inf>
    10dc:	0c 94 4a 09 	jmp	0x1294	; 0x1294 <__fp_szero>
    10e0:	5f 3f       	cpi	r21, 0xFF	; 255
    10e2:	e4 f3       	brlt	.-8      	; 0x10dc <__divsf3_pse+0x6c>
    10e4:	98 3e       	cpi	r25, 0xE8	; 232
    10e6:	d4 f3       	brlt	.-12     	; 0x10dc <__divsf3_pse+0x6c>
    10e8:	86 95       	lsr	r24
    10ea:	77 95       	ror	r23
    10ec:	67 95       	ror	r22
    10ee:	b7 95       	ror	r27
    10f0:	f7 95       	ror	r31
    10f2:	9f 5f       	subi	r25, 0xFF	; 255
    10f4:	c9 f7       	brne	.-14     	; 0x10e8 <__divsf3_pse+0x78>
    10f6:	88 0f       	add	r24, r24
    10f8:	91 1d       	adc	r25, r1
    10fa:	96 95       	lsr	r25
    10fc:	87 95       	ror	r24
    10fe:	97 f9       	bld	r25, 7
    1100:	08 95       	ret
    1102:	e1 e0       	ldi	r30, 0x01	; 1
    1104:	66 0f       	add	r22, r22
    1106:	77 1f       	adc	r23, r23
    1108:	88 1f       	adc	r24, r24
    110a:	bb 1f       	adc	r27, r27
    110c:	62 17       	cp	r22, r18
    110e:	73 07       	cpc	r23, r19
    1110:	84 07       	cpc	r24, r20
    1112:	ba 07       	cpc	r27, r26
    1114:	20 f0       	brcs	.+8      	; 0x111e <__divsf3_pse+0xae>
    1116:	62 1b       	sub	r22, r18
    1118:	73 0b       	sbc	r23, r19
    111a:	84 0b       	sbc	r24, r20
    111c:	ba 0b       	sbc	r27, r26
    111e:	ee 1f       	adc	r30, r30
    1120:	88 f7       	brcc	.-30     	; 0x1104 <__divsf3_pse+0x94>
    1122:	e0 95       	com	r30
    1124:	08 95       	ret

00001126 <__fixunssfsi>:
    1126:	0e 94 2f 09 	call	0x125e	; 0x125e <__fp_splitA>
    112a:	88 f0       	brcs	.+34     	; 0x114e <__fixunssfsi+0x28>
    112c:	9f 57       	subi	r25, 0x7F	; 127
    112e:	98 f0       	brcs	.+38     	; 0x1156 <__fixunssfsi+0x30>
    1130:	b9 2f       	mov	r27, r25
    1132:	99 27       	eor	r25, r25
    1134:	b7 51       	subi	r27, 0x17	; 23
    1136:	b0 f0       	brcs	.+44     	; 0x1164 <__fixunssfsi+0x3e>
    1138:	e1 f0       	breq	.+56     	; 0x1172 <__fixunssfsi+0x4c>
    113a:	66 0f       	add	r22, r22
    113c:	77 1f       	adc	r23, r23
    113e:	88 1f       	adc	r24, r24
    1140:	99 1f       	adc	r25, r25
    1142:	1a f0       	brmi	.+6      	; 0x114a <__fixunssfsi+0x24>
    1144:	ba 95       	dec	r27
    1146:	c9 f7       	brne	.-14     	; 0x113a <__fixunssfsi+0x14>
    1148:	14 c0       	rjmp	.+40     	; 0x1172 <__fixunssfsi+0x4c>
    114a:	b1 30       	cpi	r27, 0x01	; 1
    114c:	91 f0       	breq	.+36     	; 0x1172 <__fixunssfsi+0x4c>
    114e:	0e 94 49 09 	call	0x1292	; 0x1292 <__fp_zero>
    1152:	b1 e0       	ldi	r27, 0x01	; 1
    1154:	08 95       	ret
    1156:	0c 94 49 09 	jmp	0x1292	; 0x1292 <__fp_zero>
    115a:	67 2f       	mov	r22, r23
    115c:	78 2f       	mov	r23, r24
    115e:	88 27       	eor	r24, r24
    1160:	b8 5f       	subi	r27, 0xF8	; 248
    1162:	39 f0       	breq	.+14     	; 0x1172 <__fixunssfsi+0x4c>
    1164:	b9 3f       	cpi	r27, 0xF9	; 249
    1166:	cc f3       	brlt	.-14     	; 0x115a <__fixunssfsi+0x34>
    1168:	86 95       	lsr	r24
    116a:	77 95       	ror	r23
    116c:	67 95       	ror	r22
    116e:	b3 95       	inc	r27
    1170:	d9 f7       	brne	.-10     	; 0x1168 <__fixunssfsi+0x42>
    1172:	3e f4       	brtc	.+14     	; 0x1182 <__fixunssfsi+0x5c>
    1174:	90 95       	com	r25
    1176:	80 95       	com	r24
    1178:	70 95       	com	r23
    117a:	61 95       	neg	r22
    117c:	7f 4f       	sbci	r23, 0xFF	; 255
    117e:	8f 4f       	sbci	r24, 0xFF	; 255
    1180:	9f 4f       	sbci	r25, 0xFF	; 255
    1182:	08 95       	ret

00001184 <__floatunsisf>:
    1184:	e8 94       	clt
    1186:	09 c0       	rjmp	.+18     	; 0x119a <__floatsisf+0x12>

00001188 <__floatsisf>:
    1188:	97 fb       	bst	r25, 7
    118a:	3e f4       	brtc	.+14     	; 0x119a <__floatsisf+0x12>
    118c:	90 95       	com	r25
    118e:	80 95       	com	r24
    1190:	70 95       	com	r23
    1192:	61 95       	neg	r22
    1194:	7f 4f       	sbci	r23, 0xFF	; 255
    1196:	8f 4f       	sbci	r24, 0xFF	; 255
    1198:	9f 4f       	sbci	r25, 0xFF	; 255
    119a:	99 23       	and	r25, r25
    119c:	a9 f0       	breq	.+42     	; 0x11c8 <__floatsisf+0x40>
    119e:	f9 2f       	mov	r31, r25
    11a0:	96 e9       	ldi	r25, 0x96	; 150
    11a2:	bb 27       	eor	r27, r27
    11a4:	93 95       	inc	r25
    11a6:	f6 95       	lsr	r31
    11a8:	87 95       	ror	r24
    11aa:	77 95       	ror	r23
    11ac:	67 95       	ror	r22
    11ae:	b7 95       	ror	r27
    11b0:	f1 11       	cpse	r31, r1
    11b2:	f8 cf       	rjmp	.-16     	; 0x11a4 <__floatsisf+0x1c>
    11b4:	fa f4       	brpl	.+62     	; 0x11f4 <__floatsisf+0x6c>
    11b6:	bb 0f       	add	r27, r27
    11b8:	11 f4       	brne	.+4      	; 0x11be <__floatsisf+0x36>
    11ba:	60 ff       	sbrs	r22, 0
    11bc:	1b c0       	rjmp	.+54     	; 0x11f4 <__floatsisf+0x6c>
    11be:	6f 5f       	subi	r22, 0xFF	; 255
    11c0:	7f 4f       	sbci	r23, 0xFF	; 255
    11c2:	8f 4f       	sbci	r24, 0xFF	; 255
    11c4:	9f 4f       	sbci	r25, 0xFF	; 255
    11c6:	16 c0       	rjmp	.+44     	; 0x11f4 <__floatsisf+0x6c>
    11c8:	88 23       	and	r24, r24
    11ca:	11 f0       	breq	.+4      	; 0x11d0 <__floatsisf+0x48>
    11cc:	96 e9       	ldi	r25, 0x96	; 150
    11ce:	11 c0       	rjmp	.+34     	; 0x11f2 <__floatsisf+0x6a>
    11d0:	77 23       	and	r23, r23
    11d2:	21 f0       	breq	.+8      	; 0x11dc <__floatsisf+0x54>
    11d4:	9e e8       	ldi	r25, 0x8E	; 142
    11d6:	87 2f       	mov	r24, r23
    11d8:	76 2f       	mov	r23, r22
    11da:	05 c0       	rjmp	.+10     	; 0x11e6 <__floatsisf+0x5e>
    11dc:	66 23       	and	r22, r22
    11de:	71 f0       	breq	.+28     	; 0x11fc <__floatsisf+0x74>
    11e0:	96 e8       	ldi	r25, 0x86	; 134
    11e2:	86 2f       	mov	r24, r22
    11e4:	70 e0       	ldi	r23, 0x00	; 0
    11e6:	60 e0       	ldi	r22, 0x00	; 0
    11e8:	2a f0       	brmi	.+10     	; 0x11f4 <__floatsisf+0x6c>
    11ea:	9a 95       	dec	r25
    11ec:	66 0f       	add	r22, r22
    11ee:	77 1f       	adc	r23, r23
    11f0:	88 1f       	adc	r24, r24
    11f2:	da f7       	brpl	.-10     	; 0x11ea <__floatsisf+0x62>
    11f4:	88 0f       	add	r24, r24
    11f6:	96 95       	lsr	r25
    11f8:	87 95       	ror	r24
    11fa:	97 f9       	bld	r25, 7
    11fc:	08 95       	ret

000011fe <__fp_inf>:
    11fe:	97 f9       	bld	r25, 7
    1200:	9f 67       	ori	r25, 0x7F	; 127
    1202:	80 e8       	ldi	r24, 0x80	; 128
    1204:	70 e0       	ldi	r23, 0x00	; 0
    1206:	60 e0       	ldi	r22, 0x00	; 0
    1208:	08 95       	ret

0000120a <__fp_nan>:
    120a:	9f ef       	ldi	r25, 0xFF	; 255
    120c:	80 ec       	ldi	r24, 0xC0	; 192
    120e:	08 95       	ret

00001210 <__fp_pscA>:
    1210:	00 24       	eor	r0, r0
    1212:	0a 94       	dec	r0
    1214:	16 16       	cp	r1, r22
    1216:	17 06       	cpc	r1, r23
    1218:	18 06       	cpc	r1, r24
    121a:	09 06       	cpc	r0, r25
    121c:	08 95       	ret

0000121e <__fp_pscB>:
    121e:	00 24       	eor	r0, r0
    1220:	0a 94       	dec	r0
    1222:	12 16       	cp	r1, r18
    1224:	13 06       	cpc	r1, r19
    1226:	14 06       	cpc	r1, r20
    1228:	05 06       	cpc	r0, r21
    122a:	08 95       	ret

0000122c <__fp_round>:
    122c:	09 2e       	mov	r0, r25
    122e:	03 94       	inc	r0
    1230:	00 0c       	add	r0, r0
    1232:	11 f4       	brne	.+4      	; 0x1238 <__fp_round+0xc>
    1234:	88 23       	and	r24, r24
    1236:	52 f0       	brmi	.+20     	; 0x124c <__fp_round+0x20>
    1238:	bb 0f       	add	r27, r27
    123a:	40 f4       	brcc	.+16     	; 0x124c <__fp_round+0x20>
    123c:	bf 2b       	or	r27, r31
    123e:	11 f4       	brne	.+4      	; 0x1244 <__fp_round+0x18>
    1240:	60 ff       	sbrs	r22, 0
    1242:	04 c0       	rjmp	.+8      	; 0x124c <__fp_round+0x20>
    1244:	6f 5f       	subi	r22, 0xFF	; 255
    1246:	7f 4f       	sbci	r23, 0xFF	; 255
    1248:	8f 4f       	sbci	r24, 0xFF	; 255
    124a:	9f 4f       	sbci	r25, 0xFF	; 255
    124c:	08 95       	ret

0000124e <__fp_split3>:
    124e:	57 fd       	sbrc	r21, 7
    1250:	90 58       	subi	r25, 0x80	; 128
    1252:	44 0f       	add	r20, r20
    1254:	55 1f       	adc	r21, r21
    1256:	59 f0       	breq	.+22     	; 0x126e <__fp_splitA+0x10>
    1258:	5f 3f       	cpi	r21, 0xFF	; 255
    125a:	71 f0       	breq	.+28     	; 0x1278 <__fp_splitA+0x1a>
    125c:	47 95       	ror	r20

0000125e <__fp_splitA>:
    125e:	88 0f       	add	r24, r24
    1260:	97 fb       	bst	r25, 7
    1262:	99 1f       	adc	r25, r25
    1264:	61 f0       	breq	.+24     	; 0x127e <__fp_splitA+0x20>
    1266:	9f 3f       	cpi	r25, 0xFF	; 255
    1268:	79 f0       	breq	.+30     	; 0x1288 <__fp_splitA+0x2a>
    126a:	87 95       	ror	r24
    126c:	08 95       	ret
    126e:	12 16       	cp	r1, r18
    1270:	13 06       	cpc	r1, r19
    1272:	14 06       	cpc	r1, r20
    1274:	55 1f       	adc	r21, r21
    1276:	f2 cf       	rjmp	.-28     	; 0x125c <__fp_split3+0xe>
    1278:	46 95       	lsr	r20
    127a:	f1 df       	rcall	.-30     	; 0x125e <__fp_splitA>
    127c:	08 c0       	rjmp	.+16     	; 0x128e <__fp_splitA+0x30>
    127e:	16 16       	cp	r1, r22
    1280:	17 06       	cpc	r1, r23
    1282:	18 06       	cpc	r1, r24
    1284:	99 1f       	adc	r25, r25
    1286:	f1 cf       	rjmp	.-30     	; 0x126a <__fp_splitA+0xc>
    1288:	86 95       	lsr	r24
    128a:	71 05       	cpc	r23, r1
    128c:	61 05       	cpc	r22, r1
    128e:	08 94       	sec
    1290:	08 95       	ret

00001292 <__fp_zero>:
    1292:	e8 94       	clt

00001294 <__fp_szero>:
    1294:	bb 27       	eor	r27, r27
    1296:	66 27       	eor	r22, r22
    1298:	77 27       	eor	r23, r23
    129a:	cb 01       	movw	r24, r22
    129c:	97 f9       	bld	r25, 7
    129e:	08 95       	ret

000012a0 <pow>:
    12a0:	fa 01       	movw	r30, r20
    12a2:	ee 0f       	add	r30, r30
    12a4:	ff 1f       	adc	r31, r31
    12a6:	30 96       	adiw	r30, 0x00	; 0
    12a8:	21 05       	cpc	r18, r1
    12aa:	31 05       	cpc	r19, r1
    12ac:	a1 f1       	breq	.+104    	; 0x1316 <pow+0x76>
    12ae:	61 15       	cp	r22, r1
    12b0:	71 05       	cpc	r23, r1
    12b2:	61 f4       	brne	.+24     	; 0x12cc <pow+0x2c>
    12b4:	80 38       	cpi	r24, 0x80	; 128
    12b6:	bf e3       	ldi	r27, 0x3F	; 63
    12b8:	9b 07       	cpc	r25, r27
    12ba:	49 f1       	breq	.+82     	; 0x130e <pow+0x6e>
    12bc:	68 94       	set
    12be:	90 38       	cpi	r25, 0x80	; 128
    12c0:	81 05       	cpc	r24, r1
    12c2:	61 f0       	breq	.+24     	; 0x12dc <pow+0x3c>
    12c4:	80 38       	cpi	r24, 0x80	; 128
    12c6:	bf ef       	ldi	r27, 0xFF	; 255
    12c8:	9b 07       	cpc	r25, r27
    12ca:	41 f0       	breq	.+16     	; 0x12dc <pow+0x3c>
    12cc:	99 23       	and	r25, r25
    12ce:	4a f5       	brpl	.+82     	; 0x1322 <pow+0x82>
    12d0:	ff 3f       	cpi	r31, 0xFF	; 255
    12d2:	e1 05       	cpc	r30, r1
    12d4:	31 05       	cpc	r19, r1
    12d6:	21 05       	cpc	r18, r1
    12d8:	19 f1       	breq	.+70     	; 0x1320 <pow+0x80>
    12da:	e8 94       	clt
    12dc:	08 94       	sec
    12de:	e7 95       	ror	r30
    12e0:	d9 01       	movw	r26, r18
    12e2:	aa 23       	and	r26, r26
    12e4:	29 f4       	brne	.+10     	; 0x12f0 <pow+0x50>
    12e6:	ab 2f       	mov	r26, r27
    12e8:	be 2f       	mov	r27, r30
    12ea:	f8 5f       	subi	r31, 0xF8	; 248
    12ec:	d0 f3       	brcs	.-12     	; 0x12e2 <pow+0x42>
    12ee:	10 c0       	rjmp	.+32     	; 0x1310 <pow+0x70>
    12f0:	ff 5f       	subi	r31, 0xFF	; 255
    12f2:	70 f4       	brcc	.+28     	; 0x1310 <pow+0x70>
    12f4:	a6 95       	lsr	r26
    12f6:	e0 f7       	brcc	.-8      	; 0x12f0 <pow+0x50>
    12f8:	f7 39       	cpi	r31, 0x97	; 151
    12fa:	50 f0       	brcs	.+20     	; 0x1310 <pow+0x70>
    12fc:	19 f0       	breq	.+6      	; 0x1304 <pow+0x64>
    12fe:	ff 3a       	cpi	r31, 0xAF	; 175
    1300:	38 f4       	brcc	.+14     	; 0x1310 <pow+0x70>
    1302:	9f 77       	andi	r25, 0x7F	; 127
    1304:	9f 93       	push	r25
    1306:	0d d0       	rcall	.+26     	; 0x1322 <pow+0x82>
    1308:	0f 90       	pop	r0
    130a:	07 fc       	sbrc	r0, 7
    130c:	90 58       	subi	r25, 0x80	; 128
    130e:	08 95       	ret
    1310:	46 f0       	brts	.+16     	; 0x1322 <pow+0x82>
    1312:	0c 94 05 09 	jmp	0x120a	; 0x120a <__fp_nan>
    1316:	60 e0       	ldi	r22, 0x00	; 0
    1318:	70 e0       	ldi	r23, 0x00	; 0
    131a:	80 e8       	ldi	r24, 0x80	; 128
    131c:	9f e3       	ldi	r25, 0x3F	; 63
    131e:	08 95       	ret
    1320:	4f e7       	ldi	r20, 0x7F	; 127
    1322:	9f 77       	andi	r25, 0x7F	; 127
    1324:	5f 93       	push	r21
    1326:	4f 93       	push	r20
    1328:	3f 93       	push	r19
    132a:	2f 93       	push	r18
    132c:	0e 94 4b 0a 	call	0x1496	; 0x1496 <log>
    1330:	2f 91       	pop	r18
    1332:	3f 91       	pop	r19
    1334:	4f 91       	pop	r20
    1336:	5f 91       	pop	r21
    1338:	0e 94 c7 0a 	call	0x158e	; 0x158e <__mulsf3>
    133c:	0c 94 a8 09 	jmp	0x1350	; 0x1350 <exp>
    1340:	29 f4       	brne	.+10     	; 0x134c <pow+0xac>
    1342:	16 f0       	brts	.+4      	; 0x1348 <pow+0xa8>
    1344:	0c 94 ff 08 	jmp	0x11fe	; 0x11fe <__fp_inf>
    1348:	0c 94 49 09 	jmp	0x1292	; 0x1292 <__fp_zero>
    134c:	0c 94 05 09 	jmp	0x120a	; 0x120a <__fp_nan>

00001350 <exp>:
    1350:	0e 94 2f 09 	call	0x125e	; 0x125e <__fp_splitA>
    1354:	a8 f3       	brcs	.-22     	; 0x1340 <pow+0xa0>
    1356:	96 38       	cpi	r25, 0x86	; 134
    1358:	a0 f7       	brcc	.-24     	; 0x1342 <pow+0xa2>
    135a:	07 f8       	bld	r0, 7
    135c:	0f 92       	push	r0
    135e:	e8 94       	clt
    1360:	2b e3       	ldi	r18, 0x3B	; 59
    1362:	3a ea       	ldi	r19, 0xAA	; 170
    1364:	48 eb       	ldi	r20, 0xB8	; 184
    1366:	5f e7       	ldi	r21, 0x7F	; 127
    1368:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <__mulsf3_pse>
    136c:	0f 92       	push	r0
    136e:	0f 92       	push	r0
    1370:	0f 92       	push	r0
    1372:	4d b7       	in	r20, 0x3d	; 61
    1374:	5e b7       	in	r21, 0x3e	; 62
    1376:	0f 92       	push	r0
    1378:	0e 94 93 0a 	call	0x1526	; 0x1526 <modf>
    137c:	e8 e6       	ldi	r30, 0x68	; 104
    137e:	f0 e0       	ldi	r31, 0x00	; 0
    1380:	0e 94 da 09 	call	0x13b4	; 0x13b4 <__fp_powser>
    1384:	4f 91       	pop	r20
    1386:	5f 91       	pop	r21
    1388:	ef 91       	pop	r30
    138a:	ff 91       	pop	r31
    138c:	e5 95       	asr	r30
    138e:	ee 1f       	adc	r30, r30
    1390:	ff 1f       	adc	r31, r31
    1392:	49 f0       	breq	.+18     	; 0x13a6 <exp+0x56>
    1394:	fe 57       	subi	r31, 0x7E	; 126
    1396:	e0 68       	ori	r30, 0x80	; 128
    1398:	44 27       	eor	r20, r20
    139a:	ee 0f       	add	r30, r30
    139c:	44 1f       	adc	r20, r20
    139e:	fa 95       	dec	r31
    13a0:	e1 f7       	brne	.-8      	; 0x139a <exp+0x4a>
    13a2:	41 95       	neg	r20
    13a4:	55 0b       	sbc	r21, r21
    13a6:	0e 94 0d 0a 	call	0x141a	; 0x141a <ldexp>
    13aa:	0f 90       	pop	r0
    13ac:	07 fe       	sbrs	r0, 7
    13ae:	0c 94 01 0a 	jmp	0x1402	; 0x1402 <inverse>
    13b2:	08 95       	ret

000013b4 <__fp_powser>:
    13b4:	df 93       	push	r29
    13b6:	cf 93       	push	r28
    13b8:	1f 93       	push	r17
    13ba:	0f 93       	push	r16
    13bc:	ff 92       	push	r15
    13be:	ef 92       	push	r14
    13c0:	df 92       	push	r13
    13c2:	7b 01       	movw	r14, r22
    13c4:	8c 01       	movw	r16, r24
    13c6:	68 94       	set
    13c8:	06 c0       	rjmp	.+12     	; 0x13d6 <__fp_powser+0x22>
    13ca:	da 2e       	mov	r13, r26
    13cc:	ef 01       	movw	r28, r30
    13ce:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <__mulsf3x>
    13d2:	fe 01       	movw	r30, r28
    13d4:	e8 94       	clt
    13d6:	a5 91       	lpm	r26, Z+
    13d8:	25 91       	lpm	r18, Z+
    13da:	35 91       	lpm	r19, Z+
    13dc:	45 91       	lpm	r20, Z+
    13de:	55 91       	lpm	r21, Z+
    13e0:	a6 f3       	brts	.-24     	; 0x13ca <__fp_powser+0x16>
    13e2:	ef 01       	movw	r28, r30
    13e4:	0e 94 4c 0b 	call	0x1698	; 0x1698 <__addsf3x>
    13e8:	fe 01       	movw	r30, r28
    13ea:	97 01       	movw	r18, r14
    13ec:	a8 01       	movw	r20, r16
    13ee:	da 94       	dec	r13
    13f0:	69 f7       	brne	.-38     	; 0x13cc <__fp_powser+0x18>
    13f2:	df 90       	pop	r13
    13f4:	ef 90       	pop	r14
    13f6:	ff 90       	pop	r15
    13f8:	0f 91       	pop	r16
    13fa:	1f 91       	pop	r17
    13fc:	cf 91       	pop	r28
    13fe:	df 91       	pop	r29
    1400:	08 95       	ret

00001402 <inverse>:
    1402:	9b 01       	movw	r18, r22
    1404:	ac 01       	movw	r20, r24
    1406:	60 e0       	ldi	r22, 0x00	; 0
    1408:	70 e0       	ldi	r23, 0x00	; 0
    140a:	80 e8       	ldi	r24, 0x80	; 128
    140c:	9f e3       	ldi	r25, 0x3F	; 63
    140e:	0c 94 21 08 	jmp	0x1042	; 0x1042 <__divsf3>
    1412:	0c 94 ff 08 	jmp	0x11fe	; 0x11fe <__fp_inf>
    1416:	0c 94 a1 0b 	jmp	0x1742	; 0x1742 <__fp_mpack>

0000141a <ldexp>:
    141a:	0e 94 2f 09 	call	0x125e	; 0x125e <__fp_splitA>
    141e:	d8 f3       	brcs	.-10     	; 0x1416 <inverse+0x14>
    1420:	99 23       	and	r25, r25
    1422:	c9 f3       	breq	.-14     	; 0x1416 <inverse+0x14>
    1424:	94 0f       	add	r25, r20
    1426:	51 1d       	adc	r21, r1
    1428:	a3 f3       	brvs	.-24     	; 0x1412 <inverse+0x10>
    142a:	91 50       	subi	r25, 0x01	; 1
    142c:	50 40       	sbci	r21, 0x00	; 0
    142e:	94 f0       	brlt	.+36     	; 0x1454 <ldexp+0x3a>
    1430:	59 f0       	breq	.+22     	; 0x1448 <ldexp+0x2e>
    1432:	88 23       	and	r24, r24
    1434:	32 f0       	brmi	.+12     	; 0x1442 <ldexp+0x28>
    1436:	66 0f       	add	r22, r22
    1438:	77 1f       	adc	r23, r23
    143a:	88 1f       	adc	r24, r24
    143c:	91 50       	subi	r25, 0x01	; 1
    143e:	50 40       	sbci	r21, 0x00	; 0
    1440:	c1 f7       	brne	.-16     	; 0x1432 <ldexp+0x18>
    1442:	9e 3f       	cpi	r25, 0xFE	; 254
    1444:	51 05       	cpc	r21, r1
    1446:	2c f7       	brge	.-54     	; 0x1412 <inverse+0x10>
    1448:	88 0f       	add	r24, r24
    144a:	91 1d       	adc	r25, r1
    144c:	96 95       	lsr	r25
    144e:	87 95       	ror	r24
    1450:	97 f9       	bld	r25, 7
    1452:	08 95       	ret
    1454:	5f 3f       	cpi	r21, 0xFF	; 255
    1456:	ac f0       	brlt	.+42     	; 0x1482 <ldexp+0x68>
    1458:	98 3e       	cpi	r25, 0xE8	; 232
    145a:	9c f0       	brlt	.+38     	; 0x1482 <ldexp+0x68>
    145c:	bb 27       	eor	r27, r27
    145e:	86 95       	lsr	r24
    1460:	77 95       	ror	r23
    1462:	67 95       	ror	r22
    1464:	b7 95       	ror	r27
    1466:	08 f4       	brcc	.+2      	; 0x146a <ldexp+0x50>
    1468:	b1 60       	ori	r27, 0x01	; 1
    146a:	93 95       	inc	r25
    146c:	c1 f7       	brne	.-16     	; 0x145e <ldexp+0x44>
    146e:	bb 0f       	add	r27, r27
    1470:	58 f7       	brcc	.-42     	; 0x1448 <ldexp+0x2e>
    1472:	11 f4       	brne	.+4      	; 0x1478 <ldexp+0x5e>
    1474:	60 ff       	sbrs	r22, 0
    1476:	e8 cf       	rjmp	.-48     	; 0x1448 <ldexp+0x2e>
    1478:	6f 5f       	subi	r22, 0xFF	; 255
    147a:	7f 4f       	sbci	r23, 0xFF	; 255
    147c:	8f 4f       	sbci	r24, 0xFF	; 255
    147e:	9f 4f       	sbci	r25, 0xFF	; 255
    1480:	e3 cf       	rjmp	.-58     	; 0x1448 <ldexp+0x2e>
    1482:	0c 94 4a 09 	jmp	0x1294	; 0x1294 <__fp_szero>
    1486:	16 f0       	brts	.+4      	; 0x148c <ldexp+0x72>
    1488:	0c 94 a1 0b 	jmp	0x1742	; 0x1742 <__fp_mpack>
    148c:	0c 94 05 09 	jmp	0x120a	; 0x120a <__fp_nan>
    1490:	68 94       	set
    1492:	0c 94 ff 08 	jmp	0x11fe	; 0x11fe <__fp_inf>

00001496 <log>:
    1496:	0e 94 2f 09 	call	0x125e	; 0x125e <__fp_splitA>
    149a:	a8 f3       	brcs	.-22     	; 0x1486 <ldexp+0x6c>
    149c:	99 23       	and	r25, r25
    149e:	c1 f3       	breq	.-16     	; 0x1490 <ldexp+0x76>
    14a0:	ae f3       	brts	.-22     	; 0x148c <ldexp+0x72>
    14a2:	df 93       	push	r29
    14a4:	cf 93       	push	r28
    14a6:	1f 93       	push	r17
    14a8:	0f 93       	push	r16
    14aa:	ff 92       	push	r15
    14ac:	c9 2f       	mov	r28, r25
    14ae:	dd 27       	eor	r29, r29
    14b0:	88 23       	and	r24, r24
    14b2:	2a f0       	brmi	.+10     	; 0x14be <log+0x28>
    14b4:	21 97       	sbiw	r28, 0x01	; 1
    14b6:	66 0f       	add	r22, r22
    14b8:	77 1f       	adc	r23, r23
    14ba:	88 1f       	adc	r24, r24
    14bc:	da f7       	brpl	.-10     	; 0x14b4 <log+0x1e>
    14be:	20 e0       	ldi	r18, 0x00	; 0
    14c0:	30 e0       	ldi	r19, 0x00	; 0
    14c2:	40 e8       	ldi	r20, 0x80	; 128
    14c4:	5f eb       	ldi	r21, 0xBF	; 191
    14c6:	9f e3       	ldi	r25, 0x3F	; 63
    14c8:	88 39       	cpi	r24, 0x98	; 152
    14ca:	20 f0       	brcs	.+8      	; 0x14d4 <log+0x3e>
    14cc:	80 3e       	cpi	r24, 0xE0	; 224
    14ce:	38 f0       	brcs	.+14     	; 0x14de <log+0x48>
    14d0:	21 96       	adiw	r28, 0x01	; 1
    14d2:	8f 77       	andi	r24, 0x7F	; 127
    14d4:	0e 94 35 0b 	call	0x166a	; 0x166a <__addsf3>
    14d8:	e0 e9       	ldi	r30, 0x90	; 144
    14da:	f0 e0       	ldi	r31, 0x00	; 0
    14dc:	04 c0       	rjmp	.+8      	; 0x14e6 <log+0x50>
    14de:	0e 94 35 0b 	call	0x166a	; 0x166a <__addsf3>
    14e2:	ed eb       	ldi	r30, 0xBD	; 189
    14e4:	f0 e0       	ldi	r31, 0x00	; 0
    14e6:	0e 94 da 09 	call	0x13b4	; 0x13b4 <__fp_powser>
    14ea:	8b 01       	movw	r16, r22
    14ec:	be 01       	movw	r22, r28
    14ee:	ec 01       	movw	r28, r24
    14f0:	fb 2e       	mov	r15, r27
    14f2:	6f 57       	subi	r22, 0x7F	; 127
    14f4:	71 09       	sbc	r23, r1
    14f6:	75 95       	asr	r23
    14f8:	77 1f       	adc	r23, r23
    14fa:	88 0b       	sbc	r24, r24
    14fc:	99 0b       	sbc	r25, r25
    14fe:	0e 94 c4 08 	call	0x1188	; 0x1188 <__floatsisf>
    1502:	28 e1       	ldi	r18, 0x18	; 24
    1504:	32 e7       	ldi	r19, 0x72	; 114
    1506:	41 e3       	ldi	r20, 0x31	; 49
    1508:	5f e3       	ldi	r21, 0x3F	; 63
    150a:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <__mulsf3x>
    150e:	af 2d       	mov	r26, r15
    1510:	98 01       	movw	r18, r16
    1512:	ae 01       	movw	r20, r28
    1514:	ff 90       	pop	r15
    1516:	0f 91       	pop	r16
    1518:	1f 91       	pop	r17
    151a:	cf 91       	pop	r28
    151c:	df 91       	pop	r29
    151e:	0e 94 4c 0b 	call	0x1698	; 0x1698 <__addsf3x>
    1522:	0c 94 16 09 	jmp	0x122c	; 0x122c <__fp_round>

00001526 <modf>:
    1526:	fa 01       	movw	r30, r20
    1528:	dc 01       	movw	r26, r24
    152a:	aa 0f       	add	r26, r26
    152c:	bb 1f       	adc	r27, r27
    152e:	9b 01       	movw	r18, r22
    1530:	ac 01       	movw	r20, r24
    1532:	bf 57       	subi	r27, 0x7F	; 127
    1534:	28 f4       	brcc	.+10     	; 0x1540 <modf+0x1a>
    1536:	22 27       	eor	r18, r18
    1538:	33 27       	eor	r19, r19
    153a:	44 27       	eor	r20, r20
    153c:	50 78       	andi	r21, 0x80	; 128
    153e:	20 c0       	rjmp	.+64     	; 0x1580 <modf+0x5a>
    1540:	b7 51       	subi	r27, 0x17	; 23
    1542:	90 f4       	brcc	.+36     	; 0x1568 <modf+0x42>
    1544:	ab 2f       	mov	r26, r27
    1546:	00 24       	eor	r0, r0
    1548:	46 95       	lsr	r20
    154a:	37 95       	ror	r19
    154c:	27 95       	ror	r18
    154e:	01 1c       	adc	r0, r1
    1550:	a3 95       	inc	r26
    1552:	d2 f3       	brmi	.-12     	; 0x1548 <modf+0x22>
    1554:	00 20       	and	r0, r0
    1556:	71 f0       	breq	.+28     	; 0x1574 <modf+0x4e>
    1558:	22 0f       	add	r18, r18
    155a:	33 1f       	adc	r19, r19
    155c:	44 1f       	adc	r20, r20
    155e:	b3 95       	inc	r27
    1560:	da f3       	brmi	.-10     	; 0x1558 <modf+0x32>
    1562:	0e d0       	rcall	.+28     	; 0x1580 <modf+0x5a>
    1564:	0c 94 34 0b 	jmp	0x1668	; 0x1668 <__subsf3>
    1568:	61 30       	cpi	r22, 0x01	; 1
    156a:	71 05       	cpc	r23, r1
    156c:	a0 e8       	ldi	r26, 0x80	; 128
    156e:	8a 07       	cpc	r24, r26
    1570:	b9 46       	sbci	r27, 0x69	; 105
    1572:	30 f4       	brcc	.+12     	; 0x1580 <modf+0x5a>
    1574:	9b 01       	movw	r18, r22
    1576:	ac 01       	movw	r20, r24
    1578:	66 27       	eor	r22, r22
    157a:	77 27       	eor	r23, r23
    157c:	88 27       	eor	r24, r24
    157e:	90 78       	andi	r25, 0x80	; 128
    1580:	30 96       	adiw	r30, 0x00	; 0
    1582:	21 f0       	breq	.+8      	; 0x158c <modf+0x66>
    1584:	20 83       	st	Z, r18
    1586:	31 83       	std	Z+1, r19	; 0x01
    1588:	42 83       	std	Z+2, r20	; 0x02
    158a:	53 83       	std	Z+3, r21	; 0x03
    158c:	08 95       	ret

0000158e <__mulsf3>:
    158e:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <__mulsf3x>
    1592:	0c 94 16 09 	jmp	0x122c	; 0x122c <__fp_round>
    1596:	0e 94 08 09 	call	0x1210	; 0x1210 <__fp_pscA>
    159a:	38 f0       	brcs	.+14     	; 0x15aa <__mulsf3+0x1c>
    159c:	0e 94 0f 09 	call	0x121e	; 0x121e <__fp_pscB>
    15a0:	20 f0       	brcs	.+8      	; 0x15aa <__mulsf3+0x1c>
    15a2:	95 23       	and	r25, r21
    15a4:	11 f0       	breq	.+4      	; 0x15aa <__mulsf3+0x1c>
    15a6:	0c 94 ff 08 	jmp	0x11fe	; 0x11fe <__fp_inf>
    15aa:	0c 94 05 09 	jmp	0x120a	; 0x120a <__fp_nan>
    15ae:	11 24       	eor	r1, r1
    15b0:	0c 94 4a 09 	jmp	0x1294	; 0x1294 <__fp_szero>

000015b4 <__mulsf3x>:
    15b4:	0e 94 27 09 	call	0x124e	; 0x124e <__fp_split3>
    15b8:	70 f3       	brcs	.-36     	; 0x1596 <__mulsf3+0x8>

000015ba <__mulsf3_pse>:
    15ba:	95 9f       	mul	r25, r21
    15bc:	c1 f3       	breq	.-16     	; 0x15ae <__mulsf3+0x20>
    15be:	95 0f       	add	r25, r21
    15c0:	50 e0       	ldi	r21, 0x00	; 0
    15c2:	55 1f       	adc	r21, r21
    15c4:	62 9f       	mul	r22, r18
    15c6:	f0 01       	movw	r30, r0
    15c8:	72 9f       	mul	r23, r18
    15ca:	bb 27       	eor	r27, r27
    15cc:	f0 0d       	add	r31, r0
    15ce:	b1 1d       	adc	r27, r1
    15d0:	63 9f       	mul	r22, r19
    15d2:	aa 27       	eor	r26, r26
    15d4:	f0 0d       	add	r31, r0
    15d6:	b1 1d       	adc	r27, r1
    15d8:	aa 1f       	adc	r26, r26
    15da:	64 9f       	mul	r22, r20
    15dc:	66 27       	eor	r22, r22
    15de:	b0 0d       	add	r27, r0
    15e0:	a1 1d       	adc	r26, r1
    15e2:	66 1f       	adc	r22, r22
    15e4:	82 9f       	mul	r24, r18
    15e6:	22 27       	eor	r18, r18
    15e8:	b0 0d       	add	r27, r0
    15ea:	a1 1d       	adc	r26, r1
    15ec:	62 1f       	adc	r22, r18
    15ee:	73 9f       	mul	r23, r19
    15f0:	b0 0d       	add	r27, r0
    15f2:	a1 1d       	adc	r26, r1
    15f4:	62 1f       	adc	r22, r18
    15f6:	83 9f       	mul	r24, r19
    15f8:	a0 0d       	add	r26, r0
    15fa:	61 1d       	adc	r22, r1
    15fc:	22 1f       	adc	r18, r18
    15fe:	74 9f       	mul	r23, r20
    1600:	33 27       	eor	r19, r19
    1602:	a0 0d       	add	r26, r0
    1604:	61 1d       	adc	r22, r1
    1606:	23 1f       	adc	r18, r19
    1608:	84 9f       	mul	r24, r20
    160a:	60 0d       	add	r22, r0
    160c:	21 1d       	adc	r18, r1
    160e:	82 2f       	mov	r24, r18
    1610:	76 2f       	mov	r23, r22
    1612:	6a 2f       	mov	r22, r26
    1614:	11 24       	eor	r1, r1
    1616:	9f 57       	subi	r25, 0x7F	; 127
    1618:	50 40       	sbci	r21, 0x00	; 0
    161a:	9a f0       	brmi	.+38     	; 0x1642 <__mulsf3_pse+0x88>
    161c:	f1 f0       	breq	.+60     	; 0x165a <__mulsf3_pse+0xa0>
    161e:	88 23       	and	r24, r24
    1620:	4a f0       	brmi	.+18     	; 0x1634 <__mulsf3_pse+0x7a>
    1622:	ee 0f       	add	r30, r30
    1624:	ff 1f       	adc	r31, r31
    1626:	bb 1f       	adc	r27, r27
    1628:	66 1f       	adc	r22, r22
    162a:	77 1f       	adc	r23, r23
    162c:	88 1f       	adc	r24, r24
    162e:	91 50       	subi	r25, 0x01	; 1
    1630:	50 40       	sbci	r21, 0x00	; 0
    1632:	a9 f7       	brne	.-22     	; 0x161e <__mulsf3_pse+0x64>
    1634:	9e 3f       	cpi	r25, 0xFE	; 254
    1636:	51 05       	cpc	r21, r1
    1638:	80 f0       	brcs	.+32     	; 0x165a <__mulsf3_pse+0xa0>
    163a:	0c 94 ff 08 	jmp	0x11fe	; 0x11fe <__fp_inf>
    163e:	0c 94 4a 09 	jmp	0x1294	; 0x1294 <__fp_szero>
    1642:	5f 3f       	cpi	r21, 0xFF	; 255
    1644:	e4 f3       	brlt	.-8      	; 0x163e <__mulsf3_pse+0x84>
    1646:	98 3e       	cpi	r25, 0xE8	; 232
    1648:	d4 f3       	brlt	.-12     	; 0x163e <__mulsf3_pse+0x84>
    164a:	86 95       	lsr	r24
    164c:	77 95       	ror	r23
    164e:	67 95       	ror	r22
    1650:	b7 95       	ror	r27
    1652:	f7 95       	ror	r31
    1654:	e7 95       	ror	r30
    1656:	9f 5f       	subi	r25, 0xFF	; 255
    1658:	c1 f7       	brne	.-16     	; 0x164a <__mulsf3_pse+0x90>
    165a:	fe 2b       	or	r31, r30
    165c:	88 0f       	add	r24, r24
    165e:	91 1d       	adc	r25, r1
    1660:	96 95       	lsr	r25
    1662:	87 95       	ror	r24
    1664:	97 f9       	bld	r25, 7
    1666:	08 95       	ret

00001668 <__subsf3>:
    1668:	50 58       	subi	r21, 0x80	; 128

0000166a <__addsf3>:
    166a:	bb 27       	eor	r27, r27
    166c:	aa 27       	eor	r26, r26
    166e:	0e 94 4c 0b 	call	0x1698	; 0x1698 <__addsf3x>
    1672:	0c 94 16 09 	jmp	0x122c	; 0x122c <__fp_round>
    1676:	0e 94 08 09 	call	0x1210	; 0x1210 <__fp_pscA>
    167a:	38 f0       	brcs	.+14     	; 0x168a <__addsf3+0x20>
    167c:	0e 94 0f 09 	call	0x121e	; 0x121e <__fp_pscB>
    1680:	20 f0       	brcs	.+8      	; 0x168a <__addsf3+0x20>
    1682:	39 f4       	brne	.+14     	; 0x1692 <__addsf3+0x28>
    1684:	9f 3f       	cpi	r25, 0xFF	; 255
    1686:	19 f4       	brne	.+6      	; 0x168e <__addsf3+0x24>
    1688:	26 f4       	brtc	.+8      	; 0x1692 <__addsf3+0x28>
    168a:	0c 94 05 09 	jmp	0x120a	; 0x120a <__fp_nan>
    168e:	0e f4       	brtc	.+2      	; 0x1692 <__addsf3+0x28>
    1690:	e0 95       	com	r30
    1692:	e7 fb       	bst	r30, 7
    1694:	0c 94 ff 08 	jmp	0x11fe	; 0x11fe <__fp_inf>

00001698 <__addsf3x>:
    1698:	e9 2f       	mov	r30, r25
    169a:	0e 94 27 09 	call	0x124e	; 0x124e <__fp_split3>
    169e:	58 f3       	brcs	.-42     	; 0x1676 <__addsf3+0xc>
    16a0:	ba 17       	cp	r27, r26
    16a2:	62 07       	cpc	r22, r18
    16a4:	73 07       	cpc	r23, r19
    16a6:	84 07       	cpc	r24, r20
    16a8:	95 07       	cpc	r25, r21
    16aa:	20 f0       	brcs	.+8      	; 0x16b4 <__addsf3x+0x1c>
    16ac:	79 f4       	brne	.+30     	; 0x16cc <__addsf3x+0x34>
    16ae:	a6 f5       	brtc	.+104    	; 0x1718 <__addsf3x+0x80>
    16b0:	0c 94 49 09 	jmp	0x1292	; 0x1292 <__fp_zero>
    16b4:	0e f4       	brtc	.+2      	; 0x16b8 <__addsf3x+0x20>
    16b6:	e0 95       	com	r30
    16b8:	0b 2e       	mov	r0, r27
    16ba:	ba 2f       	mov	r27, r26
    16bc:	a0 2d       	mov	r26, r0
    16be:	0b 01       	movw	r0, r22
    16c0:	b9 01       	movw	r22, r18
    16c2:	90 01       	movw	r18, r0
    16c4:	0c 01       	movw	r0, r24
    16c6:	ca 01       	movw	r24, r20
    16c8:	a0 01       	movw	r20, r0
    16ca:	11 24       	eor	r1, r1
    16cc:	ff 27       	eor	r31, r31
    16ce:	59 1b       	sub	r21, r25
    16d0:	99 f0       	breq	.+38     	; 0x16f8 <__addsf3x+0x60>
    16d2:	59 3f       	cpi	r21, 0xF9	; 249
    16d4:	50 f4       	brcc	.+20     	; 0x16ea <__addsf3x+0x52>
    16d6:	50 3e       	cpi	r21, 0xE0	; 224
    16d8:	68 f1       	brcs	.+90     	; 0x1734 <__addsf3x+0x9c>
    16da:	1a 16       	cp	r1, r26
    16dc:	f0 40       	sbci	r31, 0x00	; 0
    16de:	a2 2f       	mov	r26, r18
    16e0:	23 2f       	mov	r18, r19
    16e2:	34 2f       	mov	r19, r20
    16e4:	44 27       	eor	r20, r20
    16e6:	58 5f       	subi	r21, 0xF8	; 248
    16e8:	f3 cf       	rjmp	.-26     	; 0x16d0 <__addsf3x+0x38>
    16ea:	46 95       	lsr	r20
    16ec:	37 95       	ror	r19
    16ee:	27 95       	ror	r18
    16f0:	a7 95       	ror	r26
    16f2:	f0 40       	sbci	r31, 0x00	; 0
    16f4:	53 95       	inc	r21
    16f6:	c9 f7       	brne	.-14     	; 0x16ea <__addsf3x+0x52>
    16f8:	7e f4       	brtc	.+30     	; 0x1718 <__addsf3x+0x80>
    16fa:	1f 16       	cp	r1, r31
    16fc:	ba 0b       	sbc	r27, r26
    16fe:	62 0b       	sbc	r22, r18
    1700:	73 0b       	sbc	r23, r19
    1702:	84 0b       	sbc	r24, r20
    1704:	ba f0       	brmi	.+46     	; 0x1734 <__addsf3x+0x9c>
    1706:	91 50       	subi	r25, 0x01	; 1
    1708:	a1 f0       	breq	.+40     	; 0x1732 <__addsf3x+0x9a>
    170a:	ff 0f       	add	r31, r31
    170c:	bb 1f       	adc	r27, r27
    170e:	66 1f       	adc	r22, r22
    1710:	77 1f       	adc	r23, r23
    1712:	88 1f       	adc	r24, r24
    1714:	c2 f7       	brpl	.-16     	; 0x1706 <__addsf3x+0x6e>
    1716:	0e c0       	rjmp	.+28     	; 0x1734 <__addsf3x+0x9c>
    1718:	ba 0f       	add	r27, r26
    171a:	62 1f       	adc	r22, r18
    171c:	73 1f       	adc	r23, r19
    171e:	84 1f       	adc	r24, r20
    1720:	48 f4       	brcc	.+18     	; 0x1734 <__addsf3x+0x9c>
    1722:	87 95       	ror	r24
    1724:	77 95       	ror	r23
    1726:	67 95       	ror	r22
    1728:	b7 95       	ror	r27
    172a:	f7 95       	ror	r31
    172c:	9e 3f       	cpi	r25, 0xFE	; 254
    172e:	08 f0       	brcs	.+2      	; 0x1732 <__addsf3x+0x9a>
    1730:	b0 cf       	rjmp	.-160    	; 0x1692 <__addsf3+0x28>
    1732:	93 95       	inc	r25
    1734:	88 0f       	add	r24, r24
    1736:	08 f0       	brcs	.+2      	; 0x173a <__addsf3x+0xa2>
    1738:	99 27       	eor	r25, r25
    173a:	ee 0f       	add	r30, r30
    173c:	97 95       	ror	r25
    173e:	87 95       	ror	r24
    1740:	08 95       	ret

00001742 <__fp_mpack>:
    1742:	9f 3f       	cpi	r25, 0xFF	; 255
    1744:	31 f0       	breq	.+12     	; 0x1752 <__fp_mpack_finite+0xc>

00001746 <__fp_mpack_finite>:
    1746:	91 50       	subi	r25, 0x01	; 1
    1748:	20 f4       	brcc	.+8      	; 0x1752 <__fp_mpack_finite+0xc>
    174a:	87 95       	ror	r24
    174c:	77 95       	ror	r23
    174e:	67 95       	ror	r22
    1750:	b7 95       	ror	r27
    1752:	88 0f       	add	r24, r24
    1754:	91 1d       	adc	r25, r1
    1756:	96 95       	lsr	r25
    1758:	87 95       	ror	r24
    175a:	97 f9       	bld	r25, 7
    175c:	08 95       	ret

0000175e <__udivmodsi4>:
    175e:	a1 e2       	ldi	r26, 0x21	; 33
    1760:	1a 2e       	mov	r1, r26
    1762:	aa 1b       	sub	r26, r26
    1764:	bb 1b       	sub	r27, r27
    1766:	fd 01       	movw	r30, r26
    1768:	0d c0       	rjmp	.+26     	; 0x1784 <__udivmodsi4_ep>

0000176a <__udivmodsi4_loop>:
    176a:	aa 1f       	adc	r26, r26
    176c:	bb 1f       	adc	r27, r27
    176e:	ee 1f       	adc	r30, r30
    1770:	ff 1f       	adc	r31, r31
    1772:	a2 17       	cp	r26, r18
    1774:	b3 07       	cpc	r27, r19
    1776:	e4 07       	cpc	r30, r20
    1778:	f5 07       	cpc	r31, r21
    177a:	20 f0       	brcs	.+8      	; 0x1784 <__udivmodsi4_ep>
    177c:	a2 1b       	sub	r26, r18
    177e:	b3 0b       	sbc	r27, r19
    1780:	e4 0b       	sbc	r30, r20
    1782:	f5 0b       	sbc	r31, r21

00001784 <__udivmodsi4_ep>:
    1784:	66 1f       	adc	r22, r22
    1786:	77 1f       	adc	r23, r23
    1788:	88 1f       	adc	r24, r24
    178a:	99 1f       	adc	r25, r25
    178c:	1a 94       	dec	r1
    178e:	69 f7       	brne	.-38     	; 0x176a <__udivmodsi4_loop>
    1790:	60 95       	com	r22
    1792:	70 95       	com	r23
    1794:	80 95       	com	r24
    1796:	90 95       	com	r25
    1798:	9b 01       	movw	r18, r22
    179a:	ac 01       	movw	r20, r24
    179c:	bd 01       	movw	r22, r26
    179e:	cf 01       	movw	r24, r30
    17a0:	08 95       	ret

000017a2 <__divmodsi4>:
    17a2:	05 2e       	mov	r0, r21
    17a4:	97 fb       	bst	r25, 7
    17a6:	1e f4       	brtc	.+6      	; 0x17ae <__divmodsi4+0xc>
    17a8:	00 94       	com	r0
    17aa:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <__negsi2>
    17ae:	57 fd       	sbrc	r21, 7
    17b0:	07 d0       	rcall	.+14     	; 0x17c0 <__divmodsi4_neg2>
    17b2:	0e 94 af 0b 	call	0x175e	; 0x175e <__udivmodsi4>
    17b6:	07 fc       	sbrc	r0, 7
    17b8:	03 d0       	rcall	.+6      	; 0x17c0 <__divmodsi4_neg2>
    17ba:	4e f4       	brtc	.+18     	; 0x17ce <__divmodsi4_exit>
    17bc:	0c 94 e8 0b 	jmp	0x17d0	; 0x17d0 <__negsi2>

000017c0 <__divmodsi4_neg2>:
    17c0:	50 95       	com	r21
    17c2:	40 95       	com	r20
    17c4:	30 95       	com	r19
    17c6:	21 95       	neg	r18
    17c8:	3f 4f       	sbci	r19, 0xFF	; 255
    17ca:	4f 4f       	sbci	r20, 0xFF	; 255
    17cc:	5f 4f       	sbci	r21, 0xFF	; 255

000017ce <__divmodsi4_exit>:
    17ce:	08 95       	ret

000017d0 <__negsi2>:
    17d0:	90 95       	com	r25
    17d2:	80 95       	com	r24
    17d4:	70 95       	com	r23
    17d6:	61 95       	neg	r22
    17d8:	7f 4f       	sbci	r23, 0xFF	; 255
    17da:	8f 4f       	sbci	r24, 0xFF	; 255
    17dc:	9f 4f       	sbci	r25, 0xFF	; 255
    17de:	08 95       	ret

000017e0 <strcpy>:
    17e0:	fb 01       	movw	r30, r22
    17e2:	dc 01       	movw	r26, r24
    17e4:	01 90       	ld	r0, Z+
    17e6:	0d 92       	st	X+, r0
    17e8:	00 20       	and	r0, r0
    17ea:	e1 f7       	brne	.-8      	; 0x17e4 <strcpy+0x4>
    17ec:	08 95       	ret

000017ee <__itoa_ncheck>:
    17ee:	bb 27       	eor	r27, r27
    17f0:	4a 30       	cpi	r20, 0x0A	; 10
    17f2:	31 f4       	brne	.+12     	; 0x1800 <__itoa_ncheck+0x12>
    17f4:	99 23       	and	r25, r25
    17f6:	22 f4       	brpl	.+8      	; 0x1800 <__itoa_ncheck+0x12>
    17f8:	bd e2       	ldi	r27, 0x2D	; 45
    17fa:	90 95       	com	r25
    17fc:	81 95       	neg	r24
    17fe:	9f 4f       	sbci	r25, 0xFF	; 255
    1800:	0c 94 03 0c 	jmp	0x1806	; 0x1806 <__utoa_common>

00001804 <__utoa_ncheck>:
    1804:	bb 27       	eor	r27, r27

00001806 <__utoa_common>:
    1806:	fb 01       	movw	r30, r22
    1808:	55 27       	eor	r21, r21
    180a:	aa 27       	eor	r26, r26
    180c:	88 0f       	add	r24, r24
    180e:	99 1f       	adc	r25, r25
    1810:	aa 1f       	adc	r26, r26
    1812:	a4 17       	cp	r26, r20
    1814:	10 f0       	brcs	.+4      	; 0x181a <__utoa_common+0x14>
    1816:	a4 1b       	sub	r26, r20
    1818:	83 95       	inc	r24
    181a:	50 51       	subi	r21, 0x10	; 16
    181c:	b9 f7       	brne	.-18     	; 0x180c <__utoa_common+0x6>
    181e:	a0 5d       	subi	r26, 0xD0	; 208
    1820:	aa 33       	cpi	r26, 0x3A	; 58
    1822:	08 f0       	brcs	.+2      	; 0x1826 <__utoa_common+0x20>
    1824:	a9 5d       	subi	r26, 0xD9	; 217
    1826:	a1 93       	st	Z+, r26
    1828:	00 97       	sbiw	r24, 0x00	; 0
    182a:	79 f7       	brne	.-34     	; 0x180a <__utoa_common+0x4>
    182c:	b1 11       	cpse	r27, r1
    182e:	b1 93       	st	Z+, r27
    1830:	11 92       	st	Z+, r1
    1832:	cb 01       	movw	r24, r22
    1834:	0c 94 1c 0c 	jmp	0x1838	; 0x1838 <strrev>

00001838 <strrev>:
    1838:	dc 01       	movw	r26, r24
    183a:	fc 01       	movw	r30, r24
    183c:	67 2f       	mov	r22, r23
    183e:	71 91       	ld	r23, Z+
    1840:	77 23       	and	r23, r23
    1842:	e1 f7       	brne	.-8      	; 0x183c <strrev+0x4>
    1844:	32 97       	sbiw	r30, 0x02	; 2
    1846:	04 c0       	rjmp	.+8      	; 0x1850 <strrev+0x18>
    1848:	7c 91       	ld	r23, X
    184a:	6d 93       	st	X+, r22
    184c:	70 83       	st	Z, r23
    184e:	62 91       	ld	r22, -Z
    1850:	ae 17       	cp	r26, r30
    1852:	bf 07       	cpc	r27, r31
    1854:	c8 f3       	brcs	.-14     	; 0x1848 <strrev+0x10>
    1856:	08 95       	ret

00001858 <_exit>:
    1858:	f8 94       	cli

0000185a <__stop_program>:
    185a:	ff cf       	rjmp	.-2      	; 0x185a <__stop_program>
