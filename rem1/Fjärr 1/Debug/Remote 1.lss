
Remote 1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000d4  00800100  00002196  0000222a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002196  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001f7  008001d4  008001d4  000022fe  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000022fe  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002330  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000298  00000000  00000000  00002370  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002d31  00000000  00000000  00002608  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001177  00000000  00000000  00005339  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001a98  00000000  00000000  000064b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006c0  00000000  00000000  00007f48  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000ad2  00000000  00000000  00008608  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001d38  00000000  00000000  000090da  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002a8  00000000  00000000  0000ae12  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 13 03 	jmp	0x626	; 0x626 <__ctors_end>
       4:	0c 94 53 09 	jmp	0x12a6	; 0x12a6 <__vector_1>
       8:	0c 94 b9 09 	jmp	0x1372	; 0x1372 <__vector_2>
       c:	0c 94 30 03 	jmp	0x660	; 0x660 <__bad_interrupt>
      10:	0c 94 30 03 	jmp	0x660	; 0x660 <__bad_interrupt>
      14:	0c 94 30 03 	jmp	0x660	; 0x660 <__bad_interrupt>
      18:	0c 94 30 03 	jmp	0x660	; 0x660 <__bad_interrupt>
      1c:	0c 94 a4 06 	jmp	0xd48	; 0xd48 <__vector_7>
      20:	0c 94 30 03 	jmp	0x660	; 0x660 <__bad_interrupt>
      24:	0c 94 30 03 	jmp	0x660	; 0x660 <__bad_interrupt>
      28:	0c 94 30 03 	jmp	0x660	; 0x660 <__bad_interrupt>
      2c:	0c 94 6a 0c 	jmp	0x18d4	; 0x18d4 <__vector_11>
      30:	0c 94 30 03 	jmp	0x660	; 0x660 <__bad_interrupt>
      34:	0c 94 30 03 	jmp	0x660	; 0x660 <__bad_interrupt>
      38:	0c 94 30 03 	jmp	0x660	; 0x660 <__bad_interrupt>
      3c:	0c 94 30 03 	jmp	0x660	; 0x660 <__bad_interrupt>
      40:	0c 94 30 03 	jmp	0x660	; 0x660 <__bad_interrupt>
      44:	0c 94 30 03 	jmp	0x660	; 0x660 <__bad_interrupt>
      48:	0c 94 fd 08 	jmp	0x11fa	; 0x11fa <__vector_18>
      4c:	0c 94 30 03 	jmp	0x660	; 0x660 <__bad_interrupt>
      50:	0c 94 30 03 	jmp	0x660	; 0x660 <__bad_interrupt>
      54:	0c 94 30 03 	jmp	0x660	; 0x660 <__bad_interrupt>
      58:	0c 94 30 03 	jmp	0x660	; 0x660 <__bad_interrupt>
      5c:	0c 94 30 03 	jmp	0x660	; 0x660 <__bad_interrupt>
      60:	0c 94 30 03 	jmp	0x660	; 0x660 <__bad_interrupt>
      64:	0c 94 30 03 	jmp	0x660	; 0x660 <__bad_interrupt>
      68:	07 63       	ori	r16, 0x37	; 55
      6a:	42 36       	cpi	r20, 0x62	; 98
      6c:	b7 9b       	sbis	0x16, 7	; 22
      6e:	d8 a7       	std	Y+40, r29	; 0x28
      70:	1a 39       	cpi	r17, 0x9A	; 154
      72:	68 56       	subi	r22, 0x68	; 104
      74:	18 ae       	std	Y+56, r1	; 0x38
      76:	ba ab       	std	Y+50, r27	; 0x32
      78:	55 8c       	ldd	r5, Z+29	; 0x1d
      7a:	1d 3c       	cpi	r17, 0xCD	; 205
      7c:	b7 cc       	rjmp	.-1682   	; 0xfffff9ec <__eeprom_end+0xff7ef9ec>
      7e:	57 63       	ori	r21, 0x37	; 55
      80:	bd 6d       	ori	r27, 0xDD	; 221
      82:	ed fd       	.word	0xfded	; ????
      84:	75 3e       	cpi	r23, 0xE5	; 229
      86:	f6 17       	cp	r31, r22
      88:	72 31       	cpi	r23, 0x12	; 18
      8a:	bf 00       	.word	0x00bf	; ????
      8c:	00 00       	nop
      8e:	80 3f       	cpi	r24, 0xF0	; 240
      90:	08 00       	.word	0x0008	; ????
      92:	00 00       	nop
      94:	be 92       	st	-X, r11
      96:	24 49       	sbci	r18, 0x94	; 148
      98:	12 3e       	cpi	r17, 0xE2	; 226
      9a:	ab aa       	std	Y+51, r10	; 0x33
      9c:	aa 2a       	or	r10, r26
      9e:	be cd       	rjmp	.-1156   	; 0xfffffc1c <__eeprom_end+0xff7efc1c>
      a0:	cc cc       	rjmp	.-1640   	; 0xfffffa3a <__eeprom_end+0xff7efa3a>
      a2:	4c 3e       	cpi	r20, 0xEC	; 236
      a4:	00 00       	nop
      a6:	00 80       	ld	r0, Z
      a8:	be ab       	std	Y+54, r27	; 0x36
      aa:	aa aa       	std	Y+50, r10	; 0x32
      ac:	aa 3e       	cpi	r26, 0xEA	; 234
      ae:	00 00       	nop
      b0:	00 00       	nop
      b2:	bf 00       	.word	0x00bf	; ????
      b4:	00 00       	nop
      b6:	80 3f       	cpi	r24, 0xF0	; 240
      b8:	00 00       	nop
      ba:	00 00       	nop
      bc:	00 08       	sbc	r0, r0
      be:	41 78       	andi	r20, 0x81	; 129
      c0:	d3 bb       	out	0x13, r29	; 19
      c2:	43 87       	std	Z+11, r20	; 0x0b
      c4:	d1 13       	cpse	r29, r17
      c6:	3d 19       	sub	r19, r13
      c8:	0e 3c       	cpi	r16, 0xCE	; 206
      ca:	c3 bd       	out	0x23, r28	; 35
      cc:	42 82       	std	Z+2, r4	; 0x02
      ce:	ad 2b       	or	r26, r29
      d0:	3e 68       	ori	r19, 0x8E	; 142
      d2:	ec 82       	std	Y+4, r14	; 0x04
      d4:	76 be       	out	0x36, r7	; 54
      d6:	d9 8f       	std	Y+25, r29	; 0x19
      d8:	e1 a9       	ldd	r30, Z+49	; 0x31
      da:	3e 4c       	sbci	r19, 0xCE	; 206
      dc:	80 ef       	ldi	r24, 0xF0	; 240
      de:	ff be       	out	0x3f, r15	; 63
      e0:	01 c4       	rjmp	.+2050   	; 0x8e4 <fiveinarow_render+0x50>
      e2:	ff 7f       	andi	r31, 0xFF	; 255
      e4:	3f 00       	.word	0x003f	; ????
      e6:	00 00       	nop
	...

000000ea <__trampolines_end>:
      ea:	0e 11       	cpse	r16, r14
      ec:	11 11       	cpse	r17, r1
      ee:	11 11       	cpse	r17, r1
      f0:	0e 1f       	adc	r16, r30

000000f2 <x_under_char>:
      f2:	11 11 0a 04 0a 11 11 1f                             ........

000000fa <under_char>:
      fa:	00 00 00 00 00 00 00 1f                             ........

00000102 <o_curs_char>:
     102:	0e 15 15 1f 15 15 0e 00                             ........

0000010a <x_curs_char>:
     10a:	11 15 1f 0e 1f 15 11 00                             ........

00000112 <melodies>:
     112:	b4 71 80 71 00 00 00 00 00 00 00 00 00 00 00 00     .q.q............
	...
     212:	00 00 4b 2d 4d 60 68 4d 68 88 8a 4c 85 80 65 4a     ..K-M`hMh..L..eJ
     222:	68 88 86 48 81 80 61 63 83 80 63 83 85 66 86 80     h..H..ac..c..f..
     232:	66 86 88 4a 6c 6d 4f 6f 68 51 6f 8f 8d 4f 6c 68     f..JlmOohQo..Olh
     242:	4d 6c 8c 8a 4c 85 80 65 4a 68 88 86 48 61 80 81     Ml..L..eJh..Ha..
     252:	4d 6c 8c 8a 68 6c 6d 6f 31 6f 6d 6c 6d 4f 6f 88     Ml..hlmo1omlmOo.
     262:	80 68 6c 6d 6f 2d 6c 6a 68 6a 4c 6c 85 80 65 68     .hlmo-ljhjLl..eh
     272:	6a 6c 4d 6a 8a 8c 4d 6a 8a 8c 4d 6a 6d 52 72 60     jlMj..Mj..MjmRr`
     282:	32 71 6f 6d 6f 51 71 8d 80 2d 2f 6d 6c 6a 6c 4d     2qomoQq..-/mljlM
     292:	6d 8a 80 2a 4d 6c 8c 8a 48 61 80 81 28 4a 4c 2d     m..*Ml..Ha..(JL-
     2a2:	6d 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     m...............
	...
     316:	64 8d 80 90 80 92 80 93 80 92 80 90 80 8d 40 80     d.............@.
     326:	8b 8f 8d 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     416:	00 00 64 80 83 88 8a 6b 80 83 88 8a 6b 60 80 80     ..d....k....k`..
     426:	84 88 8a 6b 80 84 88 8a 6b 80 81 86 88 6a 80 81     ...k....k....j..
     436:	86 88 6a 60 80 80 88 8a 88 67 00 00 00 00 00 00     ..j`.....g......
	...
     51a:	60 60 6e e0 6e e0 6e 72 73 72 73 53 60 6e 72 73     ``n.n.nrsrsS`nrs
     52a:	72 73 53 60 6e 72 73 72 73 53 60 6e 73 e0 73 60     rsS`nrsrsS`ns.s`
     53a:	53 72 60 72 e0 52 e0 72 73 72 73 60 6e 72 73 72     Sr`r.R.rsrs`nrsr
     54a:	73 53 60 6e 72 73 e0 73 e0 73 33 53 40 60 6e e0     sS`nrs.s.s3S@`n.
     55a:	6e e0 6e 60 72 73 72 73 53 00 00 00 00 00 00 00     n.n`rsrsS.......
	...

0000061c <initseq>:
     61c:	39 15 55 6e 72 38 0c 01 06 00                       9.Unr8....

00000626 <__ctors_end>:
     626:	11 24       	eor	r1, r1
     628:	1f be       	out	0x3f, r1	; 63
     62a:	cf ef       	ldi	r28, 0xFF	; 255
     62c:	d8 e0       	ldi	r29, 0x08	; 8
     62e:	de bf       	out	0x3e, r29	; 62
     630:	cd bf       	out	0x3d, r28	; 61

00000632 <__do_copy_data>:
     632:	11 e0       	ldi	r17, 0x01	; 1
     634:	a0 e0       	ldi	r26, 0x00	; 0
     636:	b1 e0       	ldi	r27, 0x01	; 1
     638:	e6 e9       	ldi	r30, 0x96	; 150
     63a:	f1 e2       	ldi	r31, 0x21	; 33
     63c:	02 c0       	rjmp	.+4      	; 0x642 <__do_copy_data+0x10>
     63e:	05 90       	lpm	r0, Z+
     640:	0d 92       	st	X+, r0
     642:	a4 3d       	cpi	r26, 0xD4	; 212
     644:	b1 07       	cpc	r27, r17
     646:	d9 f7       	brne	.-10     	; 0x63e <__do_copy_data+0xc>

00000648 <__do_clear_bss>:
     648:	23 e0       	ldi	r18, 0x03	; 3
     64a:	a4 ed       	ldi	r26, 0xD4	; 212
     64c:	b1 e0       	ldi	r27, 0x01	; 1
     64e:	01 c0       	rjmp	.+2      	; 0x652 <.do_clear_bss_start>

00000650 <.do_clear_bss_loop>:
     650:	1d 92       	st	X+, r1

00000652 <.do_clear_bss_start>:
     652:	ab 3c       	cpi	r26, 0xCB	; 203
     654:	b2 07       	cpc	r27, r18
     656:	e1 f7       	brne	.-8      	; 0x650 <.do_clear_bss_loop>
     658:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <main>
     65c:	0c 94 c9 10 	jmp	0x2192	; 0x2192 <_exit>

00000660 <__bad_interrupt>:
     660:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000664 <fiveinarow_is_char>:
	return false;
}

//Internal helper functions
bool fiveinarow_is_char(uint8_t x, uint8_t y, char c){
	if(x > 14)return false;
     664:	8f 30       	cpi	r24, 0x0F	; 15
     666:	68 f4       	brcc	.+26     	; 0x682 <fiveinarow_is_char+0x1e>
	if(y > 14)return false;
     668:	6f 30       	cpi	r22, 0x0F	; 15
     66a:	58 f4       	brcc	.+22     	; 0x682 <fiveinarow_is_char+0x1e>
	if(row_markers[x][y] == c)return true;
     66c:	9f e0       	ldi	r25, 0x0F	; 15
     66e:	89 9f       	mul	r24, r25
     670:	f0 01       	movw	r30, r0
     672:	11 24       	eor	r1, r1
     674:	e7 52       	subi	r30, 0x27	; 39
     676:	fe 4f       	sbci	r31, 0xFE	; 254
     678:	e6 0f       	add	r30, r22
     67a:	f1 1d       	adc	r31, r1
     67c:	90 81       	ld	r25, Z
     67e:	81 e0       	ldi	r24, 0x01	; 1
     680:	94 13       	cpse	r25, r20
	return false;
}

//Internal helper functions
bool fiveinarow_is_char(uint8_t x, uint8_t y, char c){
	if(x > 14)return false;
     682:	80 e0       	ldi	r24, 0x00	; 0
	if(y > 14)return false;
	if(row_markers[x][y] == c)return true;
	return false;
     684:	08 95       	ret

00000686 <fiveinarow_init>:
static const uint8_t under_char[8] PROGMEM = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F};
static const uint8_t x_under_char[8] PROGMEM = {0x11, 0x11, 0x0A, 0x04, 0x0A, 0x11, 0x11, 0x1F};
static const uint8_t o_under_char[8] PROGMEM = {0x0E, 0x11, 0x11, 0x11, 0x11, 0x11, 0x0E, 0x1F};

void fiveinarow_init(){
	set_character_pgm(X_CURS_CODE, x_curs_char);
     686:	6a e0       	ldi	r22, 0x0A	; 10
     688:	71 e0       	ldi	r23, 0x01	; 1
     68a:	81 e0       	ldi	r24, 0x01	; 1
     68c:	0e 94 06 0b 	call	0x160c	; 0x160c <set_character_pgm>
	set_character_pgm(O_CURS_CODE, o_curs_char);
     690:	62 e0       	ldi	r22, 0x02	; 2
     692:	71 e0       	ldi	r23, 0x01	; 1
     694:	82 e0       	ldi	r24, 0x02	; 2
     696:	0e 94 06 0b 	call	0x160c	; 0x160c <set_character_pgm>
	set_character_pgm(UNDER_CODE, under_char);
     69a:	6a ef       	ldi	r22, 0xFA	; 250
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	83 e0       	ldi	r24, 0x03	; 3
     6a0:	0e 94 06 0b 	call	0x160c	; 0x160c <set_character_pgm>
	set_character_pgm(X_UNDER_CODE, x_under_char);
     6a4:	62 ef       	ldi	r22, 0xF2	; 242
     6a6:	70 e0       	ldi	r23, 0x00	; 0
     6a8:	84 e0       	ldi	r24, 0x04	; 4
     6aa:	0e 94 06 0b 	call	0x160c	; 0x160c <set_character_pgm>
	set_character_pgm(O_UNDER_CODE, o_under_char);
     6ae:	6a ee       	ldi	r22, 0xEA	; 234
     6b0:	70 e0       	ldi	r23, 0x00	; 0
     6b2:	85 e0       	ldi	r24, 0x05	; 5
     6b4:	0c 94 06 0b 	jmp	0x160c	; 0x160c <set_character_pgm>

000006b8 <fiveinarow_setup>:
}

void fiveinarow_setup(bool turn){
	row_cursor_x = 7;
     6b8:	97 e0       	ldi	r25, 0x07	; 7
     6ba:	90 93 d8 01 	sts	0x01D8, r25	; 0x8001d8 <row_cursor_x>
	row_cursor_y = 7;
     6be:	90 93 d7 01 	sts	0x01D7, r25	; 0x8001d7 <row_cursor_y>
	row_display_pos = 6;
     6c2:	96 e0       	ldi	r25, 0x06	; 6
     6c4:	90 93 d4 01 	sts	0x01D4, r25	; 0x8001d4 <__data_end>
	row_player_turn = turn;
     6c8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     6cc:	20 e0       	ldi	r18, 0x00	; 0
     6ce:	30 e0       	ldi	r19, 0x00	; 0
	
	for(uint8_t q = 0; q < 15; q++){
		for(uint8_t i = 0; i < 15; i++){
			row_markers[i][q] = ' ';
     6d0:	4f e0       	ldi	r20, 0x0F	; 15
     6d2:	50 e2       	ldi	r21, 0x20	; 32
	set_character_pgm(UNDER_CODE, under_char);
	set_character_pgm(X_UNDER_CODE, x_under_char);
	set_character_pgm(O_UNDER_CODE, o_under_char);
}

void fiveinarow_setup(bool turn){
     6d4:	80 e0       	ldi	r24, 0x00	; 0
     6d6:	90 e0       	ldi	r25, 0x00	; 0
	row_display_pos = 6;
	row_player_turn = turn;
	
	for(uint8_t q = 0; q < 15; q++){
		for(uint8_t i = 0; i < 15; i++){
			row_markers[i][q] = ' ';
     6d8:	48 9f       	mul	r20, r24
     6da:	f0 01       	movw	r30, r0
     6dc:	49 9f       	mul	r20, r25
     6de:	f0 0d       	add	r31, r0
     6e0:	11 24       	eor	r1, r1
     6e2:	e7 52       	subi	r30, 0x27	; 39
     6e4:	fe 4f       	sbci	r31, 0xFE	; 254
     6e6:	e2 0f       	add	r30, r18
     6e8:	f3 1f       	adc	r31, r19
     6ea:	50 83       	st	Z, r21
     6ec:	01 96       	adiw	r24, 0x01	; 1
	row_cursor_y = 7;
	row_display_pos = 6;
	row_player_turn = turn;
	
	for(uint8_t q = 0; q < 15; q++){
		for(uint8_t i = 0; i < 15; i++){
     6ee:	8f 30       	cpi	r24, 0x0F	; 15
     6f0:	91 05       	cpc	r25, r1
     6f2:	91 f7       	brne	.-28     	; 0x6d8 <fiveinarow_setup+0x20>
     6f4:	2f 5f       	subi	r18, 0xFF	; 255
     6f6:	3f 4f       	sbci	r19, 0xFF	; 255
	row_cursor_x = 7;
	row_cursor_y = 7;
	row_display_pos = 6;
	row_player_turn = turn;
	
	for(uint8_t q = 0; q < 15; q++){
     6f8:	2f 30       	cpi	r18, 0x0F	; 15
     6fa:	31 05       	cpc	r19, r1
     6fc:	59 f7       	brne	.-42     	; 0x6d4 <fiveinarow_setup+0x1c>
     6fe:	08 95       	ret

00000700 <fiveinarow_left>:
			row_markers[i][q] = ' ';
		}
	}
}
void fiveinarow_left(){
	if(row_cursor_x == 0)row_cursor_x = 1;
     700:	80 91 d8 01 	lds	r24, 0x01D8	; 0x8001d8 <row_cursor_x>
     704:	81 11       	cpse	r24, r1
     706:	03 c0       	rjmp	.+6      	; 0x70e <fiveinarow_left+0xe>
     708:	81 e0       	ldi	r24, 0x01	; 1
     70a:	80 93 d8 01 	sts	0x01D8, r24	; 0x8001d8 <row_cursor_x>
	row_cursor_x--;
     70e:	80 91 d8 01 	lds	r24, 0x01D8	; 0x8001d8 <row_cursor_x>
     712:	81 50       	subi	r24, 0x01	; 1
     714:	80 93 d8 01 	sts	0x01D8, r24	; 0x8001d8 <row_cursor_x>
     718:	08 95       	ret

0000071a <fiveinarow_right>:
}

void fiveinarow_right(){
	row_cursor_x++;
     71a:	80 91 d8 01 	lds	r24, 0x01D8	; 0x8001d8 <row_cursor_x>
     71e:	8f 5f       	subi	r24, 0xFF	; 255
     720:	80 93 d8 01 	sts	0x01D8, r24	; 0x8001d8 <row_cursor_x>
	if(row_cursor_x > 14)row_cursor_x = 14;
     724:	80 91 d8 01 	lds	r24, 0x01D8	; 0x8001d8 <row_cursor_x>
     728:	8f 30       	cpi	r24, 0x0F	; 15
     72a:	18 f0       	brcs	.+6      	; 0x732 <fiveinarow_right+0x18>
     72c:	8e e0       	ldi	r24, 0x0E	; 14
     72e:	80 93 d8 01 	sts	0x01D8, r24	; 0x8001d8 <row_cursor_x>
     732:	08 95       	ret

00000734 <fiveinarow_up>:
}

void fiveinarow_up(){
	if(row_cursor_y == 0)row_cursor_y = 1;
     734:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <row_cursor_y>
     738:	81 11       	cpse	r24, r1
     73a:	03 c0       	rjmp	.+6      	; 0x742 <fiveinarow_up+0xe>
     73c:	81 e0       	ldi	r24, 0x01	; 1
     73e:	80 93 d7 01 	sts	0x01D7, r24	; 0x8001d7 <row_cursor_y>
	row_cursor_y--;
     742:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <row_cursor_y>
     746:	81 50       	subi	r24, 0x01	; 1
     748:	80 93 d7 01 	sts	0x01D7, r24	; 0x8001d7 <row_cursor_y>
	
	if(row_cursor_y < row_display_pos)row_display_pos = row_cursor_y;
     74c:	90 91 d7 01 	lds	r25, 0x01D7	; 0x8001d7 <row_cursor_y>
     750:	80 91 d4 01 	lds	r24, 0x01D4	; 0x8001d4 <__data_end>
     754:	98 17       	cp	r25, r24
     756:	20 f4       	brcc	.+8      	; 0x760 <fiveinarow_up+0x2c>
     758:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <row_cursor_y>
     75c:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <__data_end>
     760:	08 95       	ret

00000762 <fiveinarow_down>:
}

void fiveinarow_down(){
	row_cursor_y++;
     762:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <row_cursor_y>
     766:	8f 5f       	subi	r24, 0xFF	; 255
     768:	80 93 d7 01 	sts	0x01D7, r24	; 0x8001d7 <row_cursor_y>
	if(row_cursor_y > 14)row_cursor_y = 14;
     76c:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <row_cursor_y>
     770:	8f 30       	cpi	r24, 0x0F	; 15
     772:	18 f0       	brcs	.+6      	; 0x77a <fiveinarow_down+0x18>
     774:	8e e0       	ldi	r24, 0x0E	; 14
     776:	80 93 d7 01 	sts	0x01D7, r24	; 0x8001d7 <row_cursor_y>
	
	if(row_cursor_y > row_display_pos+2)row_display_pos = row_cursor_y-2;
     77a:	20 91 d7 01 	lds	r18, 0x01D7	; 0x8001d7 <row_cursor_y>
     77e:	80 91 d4 01 	lds	r24, 0x01D4	; 0x8001d4 <__data_end>
     782:	30 e0       	ldi	r19, 0x00	; 0
     784:	90 e0       	ldi	r25, 0x00	; 0
     786:	02 96       	adiw	r24, 0x02	; 2
     788:	82 17       	cp	r24, r18
     78a:	93 07       	cpc	r25, r19
     78c:	2c f4       	brge	.+10     	; 0x798 <fiveinarow_down+0x36>
     78e:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <row_cursor_y>
     792:	82 50       	subi	r24, 0x02	; 2
     794:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <__data_end>
     798:	08 95       	ret

0000079a <fiveinarow_place>:
}

void fiveinarow_place(char* message, char topic){
     79a:	dc 01       	movw	r26, r24
	if(row_player_turn && row_markers[row_cursor_x][row_cursor_y] == ' '){
     79c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     7a0:	88 23       	and	r24, r24
     7a2:	d1 f1       	breq	.+116    	; 0x818 <__DATA_REGION_LENGTH__+0x18>
     7a4:	e0 91 d8 01 	lds	r30, 0x01D8	; 0x8001d8 <row_cursor_x>
     7a8:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <row_cursor_y>
     7ac:	9f e0       	ldi	r25, 0x0F	; 15
     7ae:	9e 9f       	mul	r25, r30
     7b0:	f0 01       	movw	r30, r0
     7b2:	11 24       	eor	r1, r1
     7b4:	e7 52       	subi	r30, 0x27	; 39
     7b6:	fe 4f       	sbci	r31, 0xFE	; 254
     7b8:	e8 0f       	add	r30, r24
     7ba:	f1 1d       	adc	r31, r1
     7bc:	80 81       	ld	r24, Z
     7be:	80 32       	cpi	r24, 0x20	; 32
     7c0:	59 f5       	brne	.+86     	; 0x818 <__DATA_REGION_LENGTH__+0x18>
		row_last_x = row_cursor_x;
     7c2:	80 91 d8 01 	lds	r24, 0x01D8	; 0x8001d8 <row_cursor_x>
     7c6:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <row_last_x>
		row_last_y = row_cursor_y;
     7ca:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <row_cursor_y>
     7ce:	80 93 d5 01 	sts	0x01D5, r24	; 0x8001d5 <row_last_y>
		row_player_turn = false;
     7d2:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
		
		row_markers[row_cursor_x][row_cursor_y] = 'X';
     7d6:	e0 91 d8 01 	lds	r30, 0x01D8	; 0x8001d8 <row_cursor_x>
     7da:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <row_cursor_y>
     7de:	9e 9f       	mul	r25, r30
     7e0:	f0 01       	movw	r30, r0
     7e2:	11 24       	eor	r1, r1
     7e4:	e7 52       	subi	r30, 0x27	; 39
     7e6:	fe 4f       	sbci	r31, 0xFE	; 254
     7e8:	e8 0f       	add	r30, r24
     7ea:	f1 1d       	adc	r31, r1
     7ec:	88 e5       	ldi	r24, 0x58	; 88
     7ee:	80 83       	st	Z, r24
		message[0] = topic;
     7f0:	6c 93       	st	X, r22
		message[1] = '3';
     7f2:	83 e3       	ldi	r24, 0x33	; 51
     7f4:	11 96       	adiw	r26, 0x01	; 1
     7f6:	8c 93       	st	X, r24
     7f8:	11 97       	sbiw	r26, 0x01	; 1
		message[2] = row_cursor_x+48;
     7fa:	80 91 d8 01 	lds	r24, 0x01D8	; 0x8001d8 <row_cursor_x>
     7fe:	80 5d       	subi	r24, 0xD0	; 208
     800:	12 96       	adiw	r26, 0x02	; 2
     802:	8c 93       	st	X, r24
     804:	12 97       	sbiw	r26, 0x02	; 2
		message[3] = row_cursor_y+48;
     806:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <row_cursor_y>
     80a:	80 5d       	subi	r24, 0xD0	; 208
     80c:	13 96       	adiw	r26, 0x03	; 3
     80e:	8c 93       	st	X, r24
     810:	13 97       	sbiw	r26, 0x03	; 3
		message[4] = '\0';
     812:	14 96       	adiw	r26, 0x04	; 4
     814:	1c 92       	st	X, r1
     816:	08 95       	ret
	}else{
		message[0] = '\0';
     818:	1c 92       	st	X, r1
     81a:	08 95       	ret

0000081c <fiveinarow_recive>:
	}
	
}

void fiveinarow_recive(char* message){
     81c:	fc 01       	movw	r30, r24
	row_player_turn = true;
     81e:	81 e0       	ldi	r24, 0x01	; 1
     820:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>

	row_last_x = message[2]-48;
     824:	92 81       	ldd	r25, Z+2	; 0x02
     826:	90 53       	subi	r25, 0x30	; 48
     828:	90 93 d6 01 	sts	0x01D6, r25	; 0x8001d6 <row_last_x>
	row_last_y = message[3]-48;
     82c:	83 81       	ldd	r24, Z+3	; 0x03
     82e:	80 53       	subi	r24, 0x30	; 48
     830:	80 93 d5 01 	sts	0x01D5, r24	; 0x8001d5 <row_last_y>
	
	row_cursor_x = row_last_x;
     834:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <row_last_x>
     838:	80 93 d8 01 	sts	0x01D8, r24	; 0x8001d8 <row_cursor_x>
	row_cursor_y = row_last_y;
     83c:	80 91 d5 01 	lds	r24, 0x01D5	; 0x8001d5 <row_last_y>
     840:	80 93 d7 01 	sts	0x01D7, r24	; 0x8001d7 <row_cursor_y>
	
	row_markers[row_last_x][row_last_y] = 'O';
     844:	e0 91 d6 01 	lds	r30, 0x01D6	; 0x8001d6 <row_last_x>
     848:	80 91 d5 01 	lds	r24, 0x01D5	; 0x8001d5 <row_last_y>
     84c:	9f e0       	ldi	r25, 0x0F	; 15
     84e:	e9 9f       	mul	r30, r25
     850:	f0 01       	movw	r30, r0
     852:	11 24       	eor	r1, r1
     854:	e7 52       	subi	r30, 0x27	; 39
     856:	fe 4f       	sbci	r31, 0xFE	; 254
     858:	e8 0f       	add	r30, r24
     85a:	f1 1d       	adc	r31, r1
     85c:	8f e4       	ldi	r24, 0x4F	; 79
     85e:	80 83       	st	Z, r24
	if(row_last_y < row_display_pos){
     860:	90 91 d5 01 	lds	r25, 0x01D5	; 0x8001d5 <row_last_y>
     864:	80 91 d4 01 	lds	r24, 0x01D4	; 0x8001d4 <__data_end>
     868:	98 17       	cp	r25, r24
     86a:	20 f4       	brcc	.+8      	; 0x874 <fiveinarow_recive+0x58>
		row_display_pos = row_last_y;
     86c:	80 91 d5 01 	lds	r24, 0x01D5	; 0x8001d5 <row_last_y>
     870:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <__data_end>
		//if(row_cursor_y < row_display_pos)row_cursor_y = row_display_pos;
	}
	if(row_last_y > row_display_pos+2){
     874:	20 91 d5 01 	lds	r18, 0x01D5	; 0x8001d5 <row_last_y>
     878:	80 91 d4 01 	lds	r24, 0x01D4	; 0x8001d4 <__data_end>
     87c:	30 e0       	ldi	r19, 0x00	; 0
     87e:	90 e0       	ldi	r25, 0x00	; 0
     880:	02 96       	adiw	r24, 0x02	; 2
     882:	82 17       	cp	r24, r18
     884:	93 07       	cpc	r25, r19
     886:	2c f4       	brge	.+10     	; 0x892 <fiveinarow_recive+0x76>
		row_display_pos = row_last_y-2;
     888:	80 91 d5 01 	lds	r24, 0x01D5	; 0x8001d5 <row_last_y>
     88c:	82 50       	subi	r24, 0x02	; 2
     88e:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <__data_end>
     892:	08 95       	ret

00000894 <fiveinarow_render>:
		//if(row_cursor_y > row_display_pos+2)row_cursor_y = row_display_pos+2;
	}
}

void fiveinarow_render(char* row_buf){	
     894:	cf 93       	push	r28
     896:	df 93       	push	r29
	uint8_t index = 0;
	for(uint8_t q = row_display_pos; q < row_display_pos+3; q++){
     898:	20 91 d4 01 	lds	r18, 0x01D4	; 0x8001d4 <__data_end>
		//if(row_cursor_y > row_display_pos+2)row_cursor_y = row_display_pos+2;
	}
}

void fiveinarow_render(char* row_buf){	
	uint8_t index = 0;
     89c:	30 e0       	ldi	r19, 0x00	; 0
			row_buf[index] = q+56;
		}
		index++;
		
		for(uint8_t i = 0; i < 15; i++){
			row_buf[index] = row_markers[i][q];
     89e:	bf e0       	ldi	r27, 0x0F	; 15
	}
}

void fiveinarow_render(char* row_buf){	
	uint8_t index = 0;
	for(uint8_t q = row_display_pos; q < row_display_pos+3; q++){
     8a0:	40 91 d4 01 	lds	r20, 0x01D4	; 0x8001d4 <__data_end>
     8a4:	62 2f       	mov	r22, r18
     8a6:	70 e0       	ldi	r23, 0x00	; 0
     8a8:	50 e0       	ldi	r21, 0x00	; 0
     8aa:	4e 5f       	subi	r20, 0xFE	; 254
     8ac:	5f 4f       	sbci	r21, 0xFF	; 255
     8ae:	46 17       	cp	r20, r22
     8b0:	57 07       	cpc	r21, r23
     8b2:	3c f1       	brlt	.+78     	; 0x902 <__stack+0x3>
     8b4:	43 2f       	mov	r20, r19
     8b6:	50 e0       	ldi	r21, 0x00	; 0
		if(q < 9){
			row_buf[index] = q+49;
     8b8:	ec 01       	movw	r28, r24
     8ba:	c4 0f       	add	r28, r20
     8bc:	d5 1f       	adc	r29, r21
}

void fiveinarow_render(char* row_buf){	
	uint8_t index = 0;
	for(uint8_t q = row_display_pos; q < row_display_pos+3; q++){
		if(q < 9){
     8be:	29 30       	cpi	r18, 0x09	; 9
     8c0:	10 f4       	brcc	.+4      	; 0x8c6 <fiveinarow_render+0x32>
			row_buf[index] = q+49;
     8c2:	e1 e3       	ldi	r30, 0x31	; 49
     8c4:	01 c0       	rjmp	.+2      	; 0x8c8 <fiveinarow_render+0x34>
		}else{
			row_buf[index] = q+56;
     8c6:	e8 e3       	ldi	r30, 0x38	; 56
     8c8:	e2 0f       	add	r30, r18
     8ca:	e8 83       	st	Y, r30
		}
		index++;
     8cc:	a1 e0       	ldi	r26, 0x01	; 1
     8ce:	a3 0f       	add	r26, r19
     8d0:	40 e0       	ldi	r20, 0x00	; 0
     8d2:	50 e0       	ldi	r21, 0x00	; 0
		
		for(uint8_t i = 0; i < 15; i++){
			row_buf[index] = row_markers[i][q];
     8d4:	b4 9f       	mul	r27, r20
     8d6:	f0 01       	movw	r30, r0
     8d8:	b5 9f       	mul	r27, r21
     8da:	f0 0d       	add	r31, r0
     8dc:	11 24       	eor	r1, r1
     8de:	e7 52       	subi	r30, 0x27	; 39
     8e0:	fe 4f       	sbci	r31, 0xFE	; 254
     8e2:	e6 0f       	add	r30, r22
     8e4:	f7 1f       	adc	r31, r23
     8e6:	c0 81       	ld	r28, Z
     8e8:	fc 01       	movw	r30, r24
     8ea:	ea 0f       	add	r30, r26
     8ec:	f1 1d       	adc	r31, r1
     8ee:	c0 83       	st	Z, r28
			index++;
     8f0:	af 5f       	subi	r26, 0xFF	; 255
     8f2:	4f 5f       	subi	r20, 0xFF	; 255
     8f4:	5f 4f       	sbci	r21, 0xFF	; 255
		}else{
			row_buf[index] = q+56;
		}
		index++;
		
		for(uint8_t i = 0; i < 15; i++){
     8f6:	4f 30       	cpi	r20, 0x0F	; 15
     8f8:	51 05       	cpc	r21, r1
     8fa:	61 f7       	brne	.-40     	; 0x8d4 <fiveinarow_render+0x40>
     8fc:	30 5f       	subi	r19, 0xF0	; 240
	}
}

void fiveinarow_render(char* row_buf){	
	uint8_t index = 0;
	for(uint8_t q = row_display_pos; q < row_display_pos+3; q++){
     8fe:	2f 5f       	subi	r18, 0xFF	; 255
     900:	cf cf       	rjmp	.-98     	; 0x8a0 <fiveinarow_render+0xc>
		for(uint8_t i = 0; i < 15; i++){
			row_buf[index] = row_markers[i][q];
			index++;
		}
	}
	uint8_t cursor_string_pos = ((row_cursor_y-row_display_pos)*16)+row_cursor_x+1;
     902:	20 91 d7 01 	lds	r18, 0x01D7	; 0x8001d7 <row_cursor_y>
     906:	30 91 d4 01 	lds	r19, 0x01D4	; 0x8001d4 <__data_end>
     90a:	e0 91 d8 01 	lds	r30, 0x01D8	; 0x8001d8 <row_cursor_x>
     90e:	23 1b       	sub	r18, r19
     910:	ef 5f       	subi	r30, 0xFF	; 255
     912:	30 e1       	ldi	r19, 0x10	; 16
     914:	23 9f       	mul	r18, r19
     916:	e0 0d       	add	r30, r0
     918:	11 24       	eor	r1, r1
	if(row_player_turn){
     91a:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     91e:	f0 e0       	ldi	r31, 0x00	; 0
		switch(row_buf[cursor_string_pos]){
     920:	e8 0f       	add	r30, r24
     922:	f9 1f       	adc	r31, r25
			row_buf[index] = row_markers[i][q];
			index++;
		}
	}
	uint8_t cursor_string_pos = ((row_cursor_y-row_display_pos)*16)+row_cursor_x+1;
	if(row_player_turn){
     924:	22 23       	and	r18, r18
     926:	59 f0       	breq	.+22     	; 0x93e <__stack+0x3f>
		switch(row_buf[cursor_string_pos]){
     928:	20 81       	ld	r18, Z
     92a:	2f 34       	cpi	r18, 0x4F	; 79
     92c:	21 f0       	breq	.+8      	; 0x936 <__stack+0x37>
     92e:	28 35       	cpi	r18, 0x58	; 88
     930:	21 f4       	brne	.+8      	; 0x93a <__stack+0x3b>
			case 'X':
				row_buf[cursor_string_pos] = X_CURS_CODE;
     932:	21 e0       	ldi	r18, 0x01	; 1
     934:	0e c0       	rjmp	.+28     	; 0x952 <__stack+0x53>
				break;
			case 'O':
				row_buf[cursor_string_pos] = O_CURS_CODE;
     936:	22 e0       	ldi	r18, 0x02	; 2
     938:	0c c0       	rjmp	.+24     	; 0x952 <__stack+0x53>
				break;
			default:
				row_buf[cursor_string_pos] = '*';
     93a:	2a e2       	ldi	r18, 0x2A	; 42
     93c:	0a c0       	rjmp	.+20     	; 0x952 <__stack+0x53>
				break;
		}	
	} else{
		switch(row_buf[cursor_string_pos]){
     93e:	20 81       	ld	r18, Z
     940:	2f 34       	cpi	r18, 0x4F	; 79
     942:	21 f0       	breq	.+8      	; 0x94c <__stack+0x4d>
     944:	28 35       	cpi	r18, 0x58	; 88
     946:	21 f4       	brne	.+8      	; 0x950 <__stack+0x51>
			case 'X':
				row_buf[cursor_string_pos] = X_UNDER_CODE;
     948:	24 e0       	ldi	r18, 0x04	; 4
     94a:	03 c0       	rjmp	.+6      	; 0x952 <__stack+0x53>
				break;
			case 'O':
				row_buf[cursor_string_pos] = O_UNDER_CODE;
     94c:	25 e0       	ldi	r18, 0x05	; 5
     94e:	01 c0       	rjmp	.+2      	; 0x952 <__stack+0x53>
				break;
			default:
				row_buf[cursor_string_pos] = UNDER_CODE;
     950:	23 e0       	ldi	r18, 0x03	; 3
     952:	20 83       	st	Z, r18
				break;
		}
	}
	
	row_buf[48] = '\0';
     954:	fc 01       	movw	r30, r24
     956:	10 aa       	std	Z+48, r1	; 0x30
}
     958:	df 91       	pop	r29
     95a:	cf 91       	pop	r28
     95c:	08 95       	ret

0000095e <fiveinarow_check_win>:

bool fiveinarow_check_win(){
     95e:	ff 92       	push	r15
     960:	0f 93       	push	r16
     962:	1f 93       	push	r17
     964:	cf 93       	push	r28
     966:	df 93       	push	r29
	char last_player = row_markers[row_last_x][row_last_y];
     968:	e0 91 d6 01 	lds	r30, 0x01D6	; 0x8001d6 <row_last_x>
     96c:	80 91 d5 01 	lds	r24, 0x01D5	; 0x8001d5 <row_last_y>
     970:	9f e0       	ldi	r25, 0x0F	; 15
     972:	e9 9f       	mul	r30, r25
     974:	f0 01       	movw	r30, r0
     976:	11 24       	eor	r1, r1
     978:	e7 52       	subi	r30, 0x27	; 39
     97a:	fe 4f       	sbci	r31, 0xFE	; 254
     97c:	e8 0f       	add	r30, r24
     97e:	f1 1d       	adc	r31, r1
     980:	c0 81       	ld	r28, Z
	uint8_t test_x;
	uint8_t test_y;
	
	//Horizontal
	row_lenght = 1;
	test_x = row_last_x;
     982:	10 91 d6 01 	lds	r17, 0x01D6	; 0x8001d6 <row_last_x>
	test_y = row_last_y;
     986:	00 91 d5 01 	lds	r16, 0x01D5	; 0x8001d5 <row_last_y>
	uint8_t row_lenght;
	uint8_t test_x;
	uint8_t test_y;
	
	//Horizontal
	row_lenght = 1;
     98a:	d1 e0       	ldi	r29, 0x01	; 1
	test_x = row_last_x;
	test_y = row_last_y;
	while(fiveinarow_is_char(--test_x, test_y, last_player))row_lenght++;
     98c:	4c 2f       	mov	r20, r28
     98e:	60 2f       	mov	r22, r16
     990:	81 2f       	mov	r24, r17
     992:	8d 1b       	sub	r24, r29
     994:	0e 94 32 03 	call	0x664	; 0x664 <fiveinarow_is_char>
     998:	88 23       	and	r24, r24
     99a:	11 f0       	breq	.+4      	; 0x9a0 <fiveinarow_check_win+0x42>
     99c:	df 5f       	subi	r29, 0xFF	; 255
     99e:	f6 cf       	rjmp	.-20     	; 0x98c <fiveinarow_check_win+0x2e>
	test_x = row_last_x;	
     9a0:	10 91 d6 01 	lds	r17, 0x01D6	; 0x8001d6 <row_last_x>
     9a4:	d1 1b       	sub	r29, r17
     9a6:	fd 2e       	mov	r15, r29
     9a8:	f1 0e       	add	r15, r17
	while(fiveinarow_is_char(++test_x, test_y, last_player))row_lenght++;
     9aa:	1f 5f       	subi	r17, 0xFF	; 255
     9ac:	4c 2f       	mov	r20, r28
     9ae:	60 2f       	mov	r22, r16
     9b0:	81 2f       	mov	r24, r17
     9b2:	0e 94 32 03 	call	0x664	; 0x664 <fiveinarow_is_char>
     9b6:	81 11       	cpse	r24, r1
     9b8:	f6 cf       	rjmp	.-20     	; 0x9a6 <fiveinarow_check_win+0x48>
	if(row_lenght >= 5)return true;
     9ba:	84 e0       	ldi	r24, 0x04	; 4
     9bc:	8f 15       	cp	r24, r15
     9be:	10 f4       	brcc	.+4      	; 0x9c4 <fiveinarow_check_win+0x66>
     9c0:	81 e0       	ldi	r24, 0x01	; 1
     9c2:	69 c0       	rjmp	.+210    	; 0xa96 <fiveinarow_check_win+0x138>
	
	//Vertical
	row_lenght = 1;
	test_x = row_last_x;
     9c4:	00 91 d6 01 	lds	r16, 0x01D6	; 0x8001d6 <row_last_x>
	test_y = row_last_y;
     9c8:	10 91 d5 01 	lds	r17, 0x01D5	; 0x8001d5 <row_last_y>
	test_x = row_last_x;	
	while(fiveinarow_is_char(++test_x, test_y, last_player))row_lenght++;
	if(row_lenght >= 5)return true;
	
	//Vertical
	row_lenght = 1;
     9cc:	d1 e0       	ldi	r29, 0x01	; 1
	test_x = row_last_x;
	test_y = row_last_y;
	while(fiveinarow_is_char(test_x, --test_y, last_player))row_lenght++;
     9ce:	4c 2f       	mov	r20, r28
     9d0:	61 2f       	mov	r22, r17
     9d2:	6d 1b       	sub	r22, r29
     9d4:	80 2f       	mov	r24, r16
     9d6:	0e 94 32 03 	call	0x664	; 0x664 <fiveinarow_is_char>
     9da:	88 23       	and	r24, r24
     9dc:	11 f0       	breq	.+4      	; 0x9e2 <fiveinarow_check_win+0x84>
     9de:	df 5f       	subi	r29, 0xFF	; 255
     9e0:	f6 cf       	rjmp	.-20     	; 0x9ce <fiveinarow_check_win+0x70>
	test_y = row_last_y;
     9e2:	10 91 d5 01 	lds	r17, 0x01D5	; 0x8001d5 <row_last_y>
     9e6:	d1 1b       	sub	r29, r17
     9e8:	fd 2e       	mov	r15, r29
     9ea:	f1 0e       	add	r15, r17
	while(fiveinarow_is_char(test_x, ++test_y, last_player))row_lenght++;
     9ec:	1f 5f       	subi	r17, 0xFF	; 255
     9ee:	4c 2f       	mov	r20, r28
     9f0:	61 2f       	mov	r22, r17
     9f2:	80 2f       	mov	r24, r16
     9f4:	0e 94 32 03 	call	0x664	; 0x664 <fiveinarow_is_char>
     9f8:	81 11       	cpse	r24, r1
     9fa:	f6 cf       	rjmp	.-20     	; 0x9e8 <fiveinarow_check_win+0x8a>
	if(row_lenght >= 5)return true;
     9fc:	94 e0       	ldi	r25, 0x04	; 4
     9fe:	9f 15       	cp	r25, r15
     a00:	f8 f2       	brcs	.-66     	; 0x9c0 <fiveinarow_check_win+0x62>
	
	//Diagonal forward
	row_lenght = 1;
	test_x = row_last_x;
     a02:	d0 91 d6 01 	lds	r29, 0x01D6	; 0x8001d6 <row_last_x>
	test_y = row_last_y;
     a06:	00 91 d5 01 	lds	r16, 0x01D5	; 0x8001d5 <row_last_y>
	test_y = row_last_y;
	while(fiveinarow_is_char(test_x, ++test_y, last_player))row_lenght++;
	if(row_lenght >= 5)return true;
	
	//Diagonal forward
	row_lenght = 1;
     a0a:	11 e0       	ldi	r17, 0x01	; 1
	test_x = row_last_x;
	test_y = row_last_y;
	while(fiveinarow_is_char(--test_x, --test_y, last_player))row_lenght++;
     a0c:	4c 2f       	mov	r20, r28
     a0e:	60 2f       	mov	r22, r16
     a10:	61 1b       	sub	r22, r17
     a12:	8d 2f       	mov	r24, r29
     a14:	81 1b       	sub	r24, r17
     a16:	0e 94 32 03 	call	0x664	; 0x664 <fiveinarow_is_char>
     a1a:	88 23       	and	r24, r24
     a1c:	11 f0       	breq	.+4      	; 0xa22 <fiveinarow_check_win+0xc4>
     a1e:	1f 5f       	subi	r17, 0xFF	; 255
     a20:	f5 cf       	rjmp	.-22     	; 0xa0c <fiveinarow_check_win+0xae>
	test_x = row_last_x;
     a22:	00 91 d6 01 	lds	r16, 0x01D6	; 0x8001d6 <row_last_x>
	test_y = row_last_y;
     a26:	d0 91 d5 01 	lds	r29, 0x01D5	; 0x8001d5 <row_last_y>
     a2a:	1d 1b       	sub	r17, r29
	while(fiveinarow_is_char(++test_x, ++test_y, last_player))row_lenght++;
     a2c:	0d 1b       	sub	r16, r29
     a2e:	f1 2e       	mov	r15, r17
     a30:	fd 0e       	add	r15, r29
     a32:	df 5f       	subi	r29, 0xFF	; 255
     a34:	4c 2f       	mov	r20, r28
     a36:	6d 2f       	mov	r22, r29
     a38:	80 2f       	mov	r24, r16
     a3a:	8d 0f       	add	r24, r29
     a3c:	0e 94 32 03 	call	0x664	; 0x664 <fiveinarow_is_char>
     a40:	81 11       	cpse	r24, r1
     a42:	f5 cf       	rjmp	.-22     	; 0xa2e <fiveinarow_check_win+0xd0>
	if(row_lenght >= 5)return true;
     a44:	84 e0       	ldi	r24, 0x04	; 4
     a46:	8f 15       	cp	r24, r15
     a48:	08 f4       	brcc	.+2      	; 0xa4c <fiveinarow_check_win+0xee>
     a4a:	ba cf       	rjmp	.-140    	; 0x9c0 <fiveinarow_check_win+0x62>
	
	//Diagonal backwards
	row_lenght = 1;
	test_x = row_last_x;
     a4c:	d0 91 d6 01 	lds	r29, 0x01D6	; 0x8001d6 <row_last_x>
	test_y = row_last_y;
     a50:	00 91 d5 01 	lds	r16, 0x01D5	; 0x8001d5 <row_last_y>
	test_y = row_last_y;
	while(fiveinarow_is_char(++test_x, ++test_y, last_player))row_lenght++;
	if(row_lenght >= 5)return true;
	
	//Diagonal backwards
	row_lenght = 1;
     a54:	11 e0       	ldi	r17, 0x01	; 1
	test_x = row_last_x;
	test_y = row_last_y;
	while(fiveinarow_is_char(--test_x, ++test_y, last_player))row_lenght++;
     a56:	4c 2f       	mov	r20, r28
     a58:	61 2f       	mov	r22, r17
     a5a:	60 0f       	add	r22, r16
     a5c:	8d 2f       	mov	r24, r29
     a5e:	81 1b       	sub	r24, r17
     a60:	0e 94 32 03 	call	0x664	; 0x664 <fiveinarow_is_char>
     a64:	88 23       	and	r24, r24
     a66:	11 f0       	breq	.+4      	; 0xa6c <fiveinarow_check_win+0x10e>
     a68:	1f 5f       	subi	r17, 0xFF	; 255
     a6a:	f5 cf       	rjmp	.-22     	; 0xa56 <fiveinarow_check_win+0xf8>
	test_x = row_last_x;
     a6c:	d0 91 d6 01 	lds	r29, 0x01D6	; 0x8001d6 <row_last_x>
	test_y = row_last_y;
     a70:	00 91 d5 01 	lds	r16, 0x01D5	; 0x8001d5 <row_last_y>
     a74:	1d 1b       	sub	r17, r29
     a76:	f1 2e       	mov	r15, r17
     a78:	fd 0e       	add	r15, r29
	while(fiveinarow_is_char(++test_x, --test_y, last_player))row_lenght++;
     a7a:	01 50       	subi	r16, 0x01	; 1
     a7c:	df 5f       	subi	r29, 0xFF	; 255
     a7e:	4c 2f       	mov	r20, r28
     a80:	60 2f       	mov	r22, r16
     a82:	8d 2f       	mov	r24, r29
     a84:	0e 94 32 03 	call	0x664	; 0x664 <fiveinarow_is_char>
     a88:	81 11       	cpse	r24, r1
     a8a:	f5 cf       	rjmp	.-22     	; 0xa76 <fiveinarow_check_win+0x118>
	if(row_lenght >= 5)return true;
     a8c:	81 e0       	ldi	r24, 0x01	; 1
     a8e:	94 e0       	ldi	r25, 0x04	; 4
     a90:	9f 15       	cp	r25, r15
     a92:	08 f0       	brcs	.+2      	; 0xa96 <fiveinarow_check_win+0x138>
     a94:	80 e0       	ldi	r24, 0x00	; 0
	
	return false;
}
     a96:	df 91       	pop	r29
     a98:	cf 91       	pop	r28
     a9a:	1f 91       	pop	r17
     a9c:	0f 91       	pop	r16
     a9e:	ff 90       	pop	r15
     aa0:	08 95       	ret

00000aa2 <draw_five_map>:
		}
	}
}

void draw_five_map(){
	fiveinarow_render(row_buf);
     aa2:	80 e6       	ldi	r24, 0x60	; 96
     aa4:	93 e0       	ldi	r25, 0x03	; 3
     aa6:	0e 94 4a 04 	call	0x894	; 0x894 <fiveinarow_render>
	set_cursor_pos(0);
     aaa:	80 e0       	ldi	r24, 0x00	; 0
     aac:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <set_cursor_pos>
	write_lcd_string(row_buf);
     ab0:	80 e6       	ldi	r24, 0x60	; 96
     ab2:	93 e0       	ldi	r25, 0x03	; 3
     ab4:	0c 94 bb 0a 	jmp	0x1576	; 0x1576 <write_lcd_string>

00000ab8 <enter_main_mode>:
	}
	_delay_ms(30);
}

void enter_main_mode(char* message){
	program_mode = MAIN_MODE;
     ab8:	10 92 be 02 	sts	0x02BE, r1	; 0x8002be <program_mode>
	/*Reset variables and force given message in buffer*/
	game_prompted = false;
     abc:	10 92 bd 02 	sts	0x02BD, r1	; 0x8002bd <game_prompted>
	redraw = true;
     ac0:	21 e0       	ldi	r18, 0x01	; 1
     ac2:	20 93 01 01 	sts	0x0101, r18	; 0x800101 <redraw>
	request_sent = false;
     ac6:	10 92 bc 02 	sts	0x02BC, r1	; 0x8002bc <request_sent>
	messages_force(message);
     aca:	0c 94 56 0b 	jmp	0x16ac	; 0x16ac <messages_force>

00000ace <do_fir_actions>:
	fiveinarow_render(row_buf);
	set_cursor_pos(0);
	write_lcd_string(row_buf);
}

void do_fir_actions(){
     ace:	0f 93       	push	r16
     ad0:	1f 93       	push	r17
     ad2:	cf 93       	push	r28
     ad4:	df 93       	push	r29
	if(game_over !=  0){ /*Game is over*/
     ad6:	80 91 ba 02 	lds	r24, 0x02BA	; 0x8002ba <game_over>
     ada:	88 23       	and	r24, r24
     adc:	b9 f0       	breq	.+46     	; 0xb0c <do_fir_actions+0x3e>
		draw_five_map();
     ade:	0e 94 51 05 	call	0xaa2	; 0xaa2 <draw_five_map>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     ae2:	2f ef       	ldi	r18, 0xFF	; 255
     ae4:	8d e3       	ldi	r24, 0x3D	; 61
     ae6:	99 e4       	ldi	r25, 0x49	; 73
     ae8:	21 50       	subi	r18, 0x01	; 1
     aea:	80 40       	sbci	r24, 0x00	; 0
     aec:	90 40       	sbci	r25, 0x00	; 0
     aee:	e1 f7       	brne	.-8      	; 0xae8 <do_fir_actions+0x1a>
     af0:	00 c0       	rjmp	.+0      	; 0xaf2 <do_fir_actions+0x24>
     af2:	00 00       	nop
		_delay_ms(3000);
		enter_main_mode(game_over == 1 ? "You won!" : "You lost!");
     af4:	80 91 ba 02 	lds	r24, 0x02BA	; 0x8002ba <game_over>
     af8:	81 30       	cpi	r24, 0x01	; 1
     afa:	19 f0       	breq	.+6      	; 0xb02 <do_fir_actions+0x34>
     afc:	83 e2       	ldi	r24, 0x23	; 35
     afe:	91 e0       	ldi	r25, 0x01	; 1
     b00:	02 c0       	rjmp	.+4      	; 0xb06 <do_fir_actions+0x38>
     b02:	8a e1       	ldi	r24, 0x1A	; 26
     b04:	91 e0       	ldi	r25, 0x01	; 1
     b06:	0e 94 5c 05 	call	0xab8	; 0xab8 <enter_main_mode>
     b0a:	6d c0       	rjmp	.+218    	; 0xbe6 <do_fir_actions+0x118>
	} else{ /*Game is running*/
		if(DEADMAN_PRESSED){ /*If deadmans is pressed, attempt to place at cursor*/
     b0c:	4c 99       	sbic	0x09, 4	; 9
     b0e:	23 c0       	rjmp	.+70     	; 0xb56 <do_fir_actions+0x88>
			fiveinarow_place(placebuf, '3');
     b10:	63 e3       	ldi	r22, 0x33	; 51
     b12:	81 e9       	ldi	r24, 0x91	; 145
     b14:	93 e0       	ldi	r25, 0x03	; 3
     b16:	0e 94 cd 03 	call	0x79a	; 0x79a <fiveinarow_place>
			if(placebuf[0] != '\0'){ /*If could be placed*/
     b1a:	80 91 91 03 	lds	r24, 0x0391	; 0x800391 <placebuf>
     b1e:	88 23       	and	r24, r24
     b20:	09 f4       	brne	.+2      	; 0xb24 <do_fir_actions+0x56>
     b22:	61 c0       	rjmp	.+194    	; 0xbe6 <do_fir_actions+0x118>
				music_play_note(NOTE(F_PITCH, 2, SIXTEENTH_NOTE), 100);
     b24:	64 e6       	ldi	r22, 0x64	; 100
     b26:	82 e9       	ldi	r24, 0x92	; 146
     b28:	0e 94 cc 0b 	call	0x1798	; 0x1798 <music_play_note>
				if(fiveinarow_check_win()){ /*Check for win*/
     b2c:	0e 94 af 04 	call	0x95e	; 0x95e <fiveinarow_check_win>
     b30:	88 23       	and	r24, r24
     b32:	49 f0       	breq	.+18     	; 0xb46 <do_fir_actions+0x78>
					game_over = 1;
     b34:	81 e0       	ldi	r24, 0x01	; 1
     b36:	80 93 ba 02 	sts	0x02BA, r24	; 0x8002ba <game_over>
					punished = false;
     b3a:	10 92 bb 02 	sts	0x02BB, r1	; 0x8002bb <punished>
					music_play_song_pgm(melodies[AMOGUS_SONG]);
     b3e:	86 e1       	ldi	r24, 0x16	; 22
     b40:	93 e0       	ldi	r25, 0x03	; 3
     b42:	0e 94 56 0c 	call	0x18ac	; 0x18ac <music_play_song_pgm>
				}
				uart_send_line(placebuf);
     b46:	81 e9       	ldi	r24, 0x91	; 145
     b48:	93 e0       	ldi	r25, 0x03	; 3
     b4a:	0e 94 1f 0a 	call	0x143e	; 0x143e <uart_send_line>
				redraw = true;
     b4e:	81 e0       	ldi	r24, 0x01	; 1
     b50:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <redraw>
     b54:	48 c0       	rjmp	.+144    	; 0xbe6 <do_fir_actions+0x118>
			}
		} else { /*If deadmans is not pressed. Check for moving cursor*/
			uint16_t x = read_avg_adc(1, 20);
     b56:	64 e1       	ldi	r22, 0x14	; 20
     b58:	70 e0       	ldi	r23, 0x00	; 0
     b5a:	81 e0       	ldi	r24, 0x01	; 1
     b5c:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <read_avg_adc>
     b60:	8c 01       	movw	r16, r24
			uint16_t y = read_avg_adc(2, 20);
     b62:	64 e1       	ldi	r22, 0x14	; 20
     b64:	70 e0       	ldi	r23, 0x00	; 0
     b66:	82 e0       	ldi	r24, 0x02	; 2
     b68:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <read_avg_adc>
     b6c:	ec 01       	movw	r28, r24
			
			
			if(fir_cursor_move_delay == 0){
     b6e:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <fir_cursor_move_delay>
     b72:	81 11       	cpse	r24, r1
     b74:	33 c0       	rjmp	.+102    	; 0xbdc <do_fir_actions+0x10e>
				if(x > x_rest+20){
     b76:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <x_rest>
     b7a:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <x_rest+0x1>
     b7e:	44 96       	adiw	r24, 0x14	; 20
     b80:	80 17       	cp	r24, r16
     b82:	91 07       	cpc	r25, r17
     b84:	18 f4       	brcc	.+6      	; 0xb8c <do_fir_actions+0xbe>
					fiveinarow_down();
     b86:	0e 94 b1 03 	call	0x762	; 0x762 <fiveinarow_down>
     b8a:	0a c0       	rjmp	.+20     	; 0xba0 <do_fir_actions+0xd2>
					redraw = true;
				}
				else if(x < x_rest-15){
     b8c:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <x_rest>
     b90:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <x_rest+0x1>
     b94:	0f 97       	sbiw	r24, 0x0f	; 15
     b96:	08 17       	cp	r16, r24
     b98:	19 07       	cpc	r17, r25
     b9a:	28 f4       	brcc	.+10     	; 0xba6 <do_fir_actions+0xd8>
					fiveinarow_up();
     b9c:	0e 94 9a 03 	call	0x734	; 0x734 <fiveinarow_up>
					redraw = true;
     ba0:	81 e0       	ldi	r24, 0x01	; 1
     ba2:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <redraw>
				}
				if(y > y_rest+20){
     ba6:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <y_rest>
     baa:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <y_rest+0x1>
     bae:	44 96       	adiw	r24, 0x14	; 20
     bb0:	8c 17       	cp	r24, r28
     bb2:	9d 07       	cpc	r25, r29
     bb4:	18 f4       	brcc	.+6      	; 0xbbc <do_fir_actions+0xee>
					fiveinarow_left();
     bb6:	0e 94 80 03 	call	0x700	; 0x700 <fiveinarow_left>
     bba:	0a c0       	rjmp	.+20     	; 0xbd0 <do_fir_actions+0x102>
					redraw = true;
				}
				else if(y < y_rest-20){
     bbc:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <y_rest>
     bc0:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <y_rest+0x1>
     bc4:	44 97       	sbiw	r24, 0x14	; 20
     bc6:	c8 17       	cp	r28, r24
     bc8:	d9 07       	cpc	r29, r25
     bca:	28 f4       	brcc	.+10     	; 0xbd6 <do_fir_actions+0x108>
					fiveinarow_right();
     bcc:	0e 94 8d 03 	call	0x71a	; 0x71a <fiveinarow_right>
					redraw = true;
     bd0:	81 e0       	ldi	r24, 0x01	; 1
     bd2:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <redraw>
				}
				fir_cursor_move_delay = MOVE_DELAY_VAL;
     bd6:	8d e2       	ldi	r24, 0x2D	; 45
     bd8:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <fir_cursor_move_delay>
			}
			if(redraw){
     bdc:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <redraw>
     be0:	81 11       	cpse	r24, r1
				draw_five_map();
     be2:	0e 94 51 05 	call	0xaa2	; 0xaa2 <draw_five_map>
     be6:	8f e5       	ldi	r24, 0x5F	; 95
     be8:	9a ee       	ldi	r25, 0xEA	; 234
     bea:	01 97       	sbiw	r24, 0x01	; 1
     bec:	f1 f7       	brne	.-4      	; 0xbea <do_fir_actions+0x11c>
     bee:	00 c0       	rjmp	.+0      	; 0xbf0 <do_fir_actions+0x122>
     bf0:	00 00       	nop
			}
		}
	}
	_delay_ms(30);
}
     bf2:	df 91       	pop	r29
     bf4:	cf 91       	pop	r28
     bf6:	1f 91       	pop	r17
     bf8:	0f 91       	pop	r16
     bfa:	08 95       	ret

00000bfc <enter_fir_mode>:
	request_sent = false;
	messages_force(message);
}

void enter_fir_mode(){
	program_mode = FIR_MODE;
     bfc:	81 e0       	ldi	r24, 0x01	; 1
     bfe:	80 93 be 02 	sts	0x02BE, r24	; 0x8002be <program_mode>
	game_over = 0;
     c02:	10 92 ba 02 	sts	0x02BA, r1	; 0x8002ba <game_over>
	redraw = true;
     c06:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <redraw>
	if(LED_PORT & (1<<LEDG)){ /*If deadmans is active, disable*/
     c0a:	5d 9b       	sbis	0x0b, 5	; 11
     c0c:	05 c0       	rjmp	.+10     	; 0xc18 <enter_fir_mode+0x1c>
		uart_send_line("040");
     c0e:	8d e2       	ldi	r24, 0x2D	; 45
     c10:	91 e0       	ldi	r25, 0x01	; 1
     c12:	0e 94 1f 0a 	call	0x143e	; 0x143e <uart_send_line>
		LED_PORT &= ~(1<<LEDG);
     c16:	5d 98       	cbi	0x0b, 5	; 11
     c18:	08 95       	ret

00000c1a <send_move_command>:
		}
	}
	_delay_ms(50);
}

void send_move_command(){
     c1a:	0f 93       	push	r16
     c1c:	1f 93       	push	r17
     c1e:	cf 93       	push	r28
     c20:	df 93       	push	r29
	if(move_command_hundreths == CMD_DELAY){ /*If no cooldown*/
     c22:	80 91 c6 02 	lds	r24, 0x02C6	; 0x8002c6 <move_command_hundreths>
     c26:	84 31       	cpi	r24, 0x14	; 20
     c28:	09 f0       	breq	.+2      	; 0xc2c <send_move_command+0x12>
     c2a:	7b c0       	rjmp	.+246    	; 0xd22 <send_move_command+0x108>
		int16_t x_diff = x_rest - read_avg_adc(1, 25);
     c2c:	c0 91 15 01 	lds	r28, 0x0115	; 0x800115 <x_rest>
     c30:	d0 91 16 01 	lds	r29, 0x0116	; 0x800116 <x_rest+0x1>
     c34:	69 e1       	ldi	r22, 0x19	; 25
     c36:	70 e0       	ldi	r23, 0x00	; 0
     c38:	81 e0       	ldi	r24, 0x01	; 1
     c3a:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <read_avg_adc>
     c3e:	c8 1b       	sub	r28, r24
     c40:	d9 0b       	sbc	r29, r25
		int16_t y_diff = y_rest - read_avg_adc(2, 25);
     c42:	00 91 13 01 	lds	r16, 0x0113	; 0x800113 <y_rest>
     c46:	10 91 14 01 	lds	r17, 0x0114	; 0x800114 <y_rest+0x1>
     c4a:	69 e1       	ldi	r22, 0x19	; 25
     c4c:	70 e0       	ldi	r23, 0x00	; 0
     c4e:	82 e0       	ldi	r24, 0x02	; 2
     c50:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <read_avg_adc>
     c54:	98 01       	movw	r18, r16
     c56:	28 1b       	sub	r18, r24
     c58:	39 0b       	sbc	r19, r25
		int16_t left = x_diff+y_diff;
     c5a:	8e 01       	movw	r16, r28
     c5c:	02 0f       	add	r16, r18
     c5e:	13 1f       	adc	r17, r19
		int16_t right = x_diff-y_diff;
     c60:	c2 1b       	sub	r28, r18
     c62:	d3 0b       	sbc	r29, r19
		/*Keep values within bounds*/
		if(left > 127){
     c64:	00 38       	cpi	r16, 0x80	; 128
     c66:	11 05       	cpc	r17, r1
     c68:	5c f4       	brge	.+22     	; 0xc80 <send_move_command+0x66>
			left = 127;
		}
		else if(left < -127){
     c6a:	01 38       	cpi	r16, 0x81	; 129
     c6c:	3f ef       	ldi	r19, 0xFF	; 255
     c6e:	13 07       	cpc	r17, r19
     c70:	54 f0       	brlt	.+20     	; 0xc86 <send_move_command+0x6c>
			left = -127;
		} else if(left > -5 && left < 5) left = 0;
     c72:	c8 01       	movw	r24, r16
     c74:	04 96       	adiw	r24, 0x04	; 4
     c76:	09 97       	sbiw	r24, 0x09	; 9
     c78:	40 f4       	brcc	.+16     	; 0xc8a <send_move_command+0x70>
     c7a:	00 e0       	ldi	r16, 0x00	; 0
     c7c:	10 e0       	ldi	r17, 0x00	; 0
     c7e:	05 c0       	rjmp	.+10     	; 0xc8a <send_move_command+0x70>
		int16_t y_diff = y_rest - read_avg_adc(2, 25);
		int16_t left = x_diff+y_diff;
		int16_t right = x_diff-y_diff;
		/*Keep values within bounds*/
		if(left > 127){
			left = 127;
     c80:	0f e7       	ldi	r16, 0x7F	; 127
     c82:	10 e0       	ldi	r17, 0x00	; 0
     c84:	02 c0       	rjmp	.+4      	; 0xc8a <send_move_command+0x70>
		}
		else if(left < -127){
			left = -127;
     c86:	01 e8       	ldi	r16, 0x81	; 129
     c88:	1f ef       	ldi	r17, 0xFF	; 255
		} else if(left > -5 && left < 5) left = 0;
		
		if(right > 127) {
     c8a:	c0 38       	cpi	r28, 0x80	; 128
     c8c:	d1 05       	cpc	r29, r1
     c8e:	5c f4       	brge	.+22     	; 0xca6 <send_move_command+0x8c>
			right = 127;
		}
		else if(right < -127){
     c90:	c1 38       	cpi	r28, 0x81	; 129
     c92:	8f ef       	ldi	r24, 0xFF	; 255
     c94:	d8 07       	cpc	r29, r24
     c96:	54 f0       	brlt	.+20     	; 0xcac <send_move_command+0x92>
			right = -127;
		} else if(right > -5 && right < 5) right = 0;
     c98:	ce 01       	movw	r24, r28
     c9a:	04 96       	adiw	r24, 0x04	; 4
     c9c:	09 97       	sbiw	r24, 0x09	; 9
     c9e:	40 f4       	brcc	.+16     	; 0xcb0 <send_move_command+0x96>
     ca0:	c0 e0       	ldi	r28, 0x00	; 0
     ca2:	d0 e0       	ldi	r29, 0x00	; 0
     ca4:	05 c0       	rjmp	.+10     	; 0xcb0 <send_move_command+0x96>
		else if(left < -127){
			left = -127;
		} else if(left > -5 && left < 5) left = 0;
		
		if(right > 127) {
			right = 127;
     ca6:	cf e7       	ldi	r28, 0x7F	; 127
     ca8:	d0 e0       	ldi	r29, 0x00	; 0
     caa:	02 c0       	rjmp	.+4      	; 0xcb0 <send_move_command+0x96>
		}
		else if(right < -127){
			right = -127;
     cac:	c1 e8       	ldi	r28, 0x81	; 129
     cae:	df ef       	ldi	r29, 0xFF	; 255
		} else if(right > -5 && right < 5) right = 0;
		
		/*Ignore duplicate values*/
		if(left != last_left || right != last_right){
     cb0:	80 91 c1 02 	lds	r24, 0x02C1	; 0x8002c1 <last_left>
     cb4:	90 91 c2 02 	lds	r25, 0x02C2	; 0x8002c2 <last_left+0x1>
     cb8:	80 17       	cp	r24, r16
     cba:	91 07       	cpc	r25, r17
     cbc:	39 f4       	brne	.+14     	; 0xccc <send_move_command+0xb2>
     cbe:	80 91 bf 02 	lds	r24, 0x02BF	; 0x8002bf <last_right>
     cc2:	90 91 c0 02 	lds	r25, 0x02C0	; 0x8002c0 <last_right+0x1>
     cc6:	8c 17       	cp	r24, r28
     cc8:	9d 07       	cpc	r25, r29
     cca:	19 f1       	breq	.+70     	; 0xd12 <send_move_command+0xf8>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     ccc:	4a e0       	ldi	r20, 0x0A	; 10
     cce:	64 e0       	ldi	r22, 0x04	; 4
     cd0:	71 e0       	ldi	r23, 0x01	; 1
     cd2:	c8 01       	movw	r24, r16
     cd4:	0e 94 94 10 	call	0x2128	; 0x2128 <__itoa_ncheck>
			/*Build output string*/
			itoa(left, itoabuf+2, 10);
			uint8_t len = strlen(itoabuf);
     cd8:	e2 e0       	ldi	r30, 0x02	; 2
     cda:	f1 e0       	ldi	r31, 0x01	; 1
     cdc:	01 90       	ld	r0, Z+
     cde:	00 20       	and	r0, r0
     ce0:	e9 f7       	brne	.-6      	; 0xcdc <send_move_command+0xc2>
     ce2:	31 97       	sbiw	r30, 0x01	; 1
     ce4:	e2 50       	subi	r30, 0x02	; 2
     ce6:	f1 40       	sbci	r31, 0x01	; 1
			itoabuf[len++] = ' ';
     ce8:	df 01       	movw	r26, r30
     cea:	bb 27       	eor	r27, r27
     cec:	ae 5f       	subi	r26, 0xFE	; 254
     cee:	be 4f       	sbci	r27, 0xFE	; 254
     cf0:	80 e2       	ldi	r24, 0x20	; 32
     cf2:	8c 93       	st	X, r24
     cf4:	ef 5f       	subi	r30, 0xFF	; 255
     cf6:	6e 2f       	mov	r22, r30
     cf8:	70 e0       	ldi	r23, 0x00	; 0
     cfa:	6e 5f       	subi	r22, 0xFE	; 254
     cfc:	7e 4f       	sbci	r23, 0xFE	; 254
     cfe:	4a e0       	ldi	r20, 0x0A	; 10
     d00:	ce 01       	movw	r24, r28
     d02:	0e 94 94 10 	call	0x2128	; 0x2128 <__itoa_ncheck>
			itoa(right, itoabuf+len, 10);
			/*Send string*/
			uart_send_line(itoabuf);
     d06:	82 e0       	ldi	r24, 0x02	; 2
     d08:	91 e0       	ldi	r25, 0x01	; 1
     d0a:	0e 94 1f 0a 	call	0x143e	; 0x143e <uart_send_line>
			move_command_hundreths = 0; /*Reset cooldown*/
     d0e:	10 92 c6 02 	sts	0x02C6, r1	; 0x8002c6 <move_command_hundreths>
		}
		last_left = left;
     d12:	10 93 c2 02 	sts	0x02C2, r17	; 0x8002c2 <last_left+0x1>
     d16:	00 93 c1 02 	sts	0x02C1, r16	; 0x8002c1 <last_left>
		last_right = right;
     d1a:	d0 93 c0 02 	sts	0x02C0, r29	; 0x8002c0 <last_right+0x1>
     d1e:	c0 93 bf 02 	sts	0x02BF, r28	; 0x8002bf <last_right>
	}
}
     d22:	df 91       	pop	r29
     d24:	cf 91       	pop	r28
     d26:	1f 91       	pop	r17
     d28:	0f 91       	pop	r16
     d2a:	08 95       	ret

00000d2c <print_lcd_static>:

void print_lcd_static(){
	set_cursor_pos(0);
     d2c:	80 e0       	ldi	r24, 0x00	; 0
     d2e:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <set_cursor_pos>
	write_lcd_string("Fram: __cm PIR:_");
     d32:	81 e3       	ldi	r24, 0x31	; 49
     d34:	91 e0       	ldi	r25, 0x01	; 1
     d36:	0e 94 bb 0a 	call	0x1576	; 0x1576 <write_lcd_string>
	set_cursor_pos(16);
     d3a:	80 e1       	ldi	r24, 0x10	; 16
     d3c:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <set_cursor_pos>
	write_lcd_string("Bak: __cm  C: __");
     d40:	82 e4       	ldi	r24, 0x42	; 66
     d42:	91 e0       	ldi	r25, 0x01	; 1
     d44:	0c 94 bb 0a 	jmp	0x1576	; 0x1576 <write_lcd_string>

00000d48 <__vector_7>:
}

ISR(TIMER2_COMPA_vect){
     d48:	1f 92       	push	r1
     d4a:	0f 92       	push	r0
     d4c:	0f b6       	in	r0, 0x3f	; 63
     d4e:	0f 92       	push	r0
     d50:	11 24       	eor	r1, r1
     d52:	2f 93       	push	r18
     d54:	3f 93       	push	r19
     d56:	4f 93       	push	r20
     d58:	5f 93       	push	r21
     d5a:	6f 93       	push	r22
     d5c:	7f 93       	push	r23
     d5e:	8f 93       	push	r24
     d60:	9f 93       	push	r25
     d62:	af 93       	push	r26
     d64:	bf 93       	push	r27
     d66:	ef 93       	push	r30
     d68:	ff 93       	push	r31
	/*Toggles heartbeat LED back on every half second to produce a blinking effect
	  when heartbeat is active*/
	if(++heart_hundreths > 50){
     d6a:	80 91 c7 02 	lds	r24, 0x02C7	; 0x8002c7 <heart_hundreths>
     d6e:	8f 5f       	subi	r24, 0xFF	; 255
     d70:	80 93 c7 02 	sts	0x02C7, r24	; 0x8002c7 <heart_hundreths>
     d74:	83 33       	cpi	r24, 0x33	; 51
     d76:	18 f0       	brcs	.+6      	; 0xd7e <__vector_7+0x36>
		LED_PORT |= 1<<LEDR2;
     d78:	5f 9a       	sbi	0x0b, 7	; 11
		heart_hundreths = 0;
     d7a:	10 92 c7 02 	sts	0x02C7, r1	; 0x8002c7 <heart_hundreths>
	}
	/*Cooldown for sending move commands to vehicle*/
	if(move_command_hundreths < CMD_DELAY) move_command_hundreths++;
     d7e:	80 91 c6 02 	lds	r24, 0x02C6	; 0x8002c6 <move_command_hundreths>
     d82:	84 31       	cpi	r24, 0x14	; 20
     d84:	28 f4       	brcc	.+10     	; 0xd90 <__vector_7+0x48>
     d86:	80 91 c6 02 	lds	r24, 0x02C6	; 0x8002c6 <move_command_hundreths>
     d8a:	8f 5f       	subi	r24, 0xFF	; 255
     d8c:	80 93 c6 02 	sts	0x02C6, r24	; 0x8002c6 <move_command_hundreths>
	/*Cooldown for honk button to reduce debounce*/
	if(honk_debounce_hundreths > 0) honk_debounce_hundreths--;
     d90:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <honk_debounce_hundreths>
     d94:	88 23       	and	r24, r24
     d96:	29 f0       	breq	.+10     	; 0xda2 <__vector_7+0x5a>
     d98:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <honk_debounce_hundreths>
     d9c:	81 50       	subi	r24, 0x01	; 1
     d9e:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <honk_debounce_hundreths>
	/*Timout for sending game invitations*/
	if(request_sent && invite_timeout_hundreths < TIMEOUT_VAL) invite_timeout_hundreths++;
     da2:	80 91 bc 02 	lds	r24, 0x02BC	; 0x8002bc <request_sent>
     da6:	88 23       	and	r24, r24
     da8:	89 f0       	breq	.+34     	; 0xdcc <__vector_7+0x84>
     daa:	80 91 c4 02 	lds	r24, 0x02C4	; 0x8002c4 <invite_timeout_hundreths>
     dae:	90 91 c5 02 	lds	r25, 0x02C5	; 0x8002c5 <invite_timeout_hundreths+0x1>
     db2:	88 38       	cpi	r24, 0x88	; 136
     db4:	93 41       	sbci	r25, 0x13	; 19
     db6:	50 f4       	brcc	.+20     	; 0xdcc <__vector_7+0x84>
     db8:	80 91 c4 02 	lds	r24, 0x02C4	; 0x8002c4 <invite_timeout_hundreths>
     dbc:	90 91 c5 02 	lds	r25, 0x02C5	; 0x8002c5 <invite_timeout_hundreths+0x1>
     dc0:	01 96       	adiw	r24, 0x01	; 1
     dc2:	90 93 c5 02 	sts	0x02C5, r25	; 0x8002c5 <invite_timeout_hundreths+0x1>
     dc6:	80 93 c4 02 	sts	0x02C4, r24	; 0x8002c4 <invite_timeout_hundreths>
     dca:	06 c0       	rjmp	.+12     	; 0xdd8 <__vector_7+0x90>
	else{
		request_sent = false;
     dcc:	10 92 bc 02 	sts	0x02BC, r1	; 0x8002bc <request_sent>
		invite_timeout_hundreths = 0;
     dd0:	10 92 c5 02 	sts	0x02C5, r1	; 0x8002c5 <invite_timeout_hundreths+0x1>
     dd4:	10 92 c4 02 	sts	0x02C4, r1	; 0x8002c4 <invite_timeout_hundreths>
	}
	if(fir_cursor_move_delay > 0) fir_cursor_move_delay--;
     dd8:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <fir_cursor_move_delay>
     ddc:	88 23       	and	r24, r24
     dde:	29 f0       	breq	.+10     	; 0xdea <__vector_7+0xa2>
     de0:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <fir_cursor_move_delay>
     de4:	81 50       	subi	r24, 0x01	; 1
     de6:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <fir_cursor_move_delay>
	/*Timer proc for messages module*/
	messages_timerproc();
     dea:	0e 94 2e 0b 	call	0x165c	; 0x165c <messages_timerproc>
}
     dee:	ff 91       	pop	r31
     df0:	ef 91       	pop	r30
     df2:	bf 91       	pop	r27
     df4:	af 91       	pop	r26
     df6:	9f 91       	pop	r25
     df8:	8f 91       	pop	r24
     dfa:	7f 91       	pop	r23
     dfc:	6f 91       	pop	r22
     dfe:	5f 91       	pop	r21
     e00:	4f 91       	pop	r20
     e02:	3f 91       	pop	r19
     e04:	2f 91       	pop	r18
     e06:	0f 90       	pop	r0
     e08:	0f be       	out	0x3f, r0	; 63
     e0a:	0f 90       	pop	r0
     e0c:	1f 90       	pop	r1
     e0e:	18 95       	reti

00000e10 <timer_init>:

void timer_init(){
	/* Start 100Hz system timer with TC2 for counting time */
	OCR2A = 77;
     e10:	8d e4       	ldi	r24, 0x4D	; 77
     e12:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
	TCCR2A = 1<<WGM21;
     e16:	82 e0       	ldi	r24, 0x02	; 2
     e18:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
	TCCR2B = 7;
     e1c:	97 e0       	ldi	r25, 0x07	; 7
     e1e:	90 93 b1 00 	sts	0x00B1, r25	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
	TIMSK2 = 1<<OCIE2A;
     e22:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f8070>
     e26:	08 95       	ret

00000e28 <process_fir_command>:
			}
			break;
	}
}

void process_fir_command(volatile uint8_t* args){
     e28:	cf 93       	push	r28
     e2a:	df 93       	push	r29
     e2c:	ec 01       	movw	r28, r24
	if(program_mode == FIR_MODE){ /*If already in a game*/
     e2e:	80 91 be 02 	lds	r24, 0x02BE	; 0x8002be <program_mode>
     e32:	81 30       	cpi	r24, 0x01	; 1
     e34:	11 f5       	brne	.+68     	; 0xe7a <process_fir_command+0x52>
		if(*args >= 'A'){ /*Protocol dictates that argument over 'A' is "Cancel match" during match*/
     e36:	88 81       	ld	r24, Y
     e38:	81 34       	cpi	r24, 0x41	; 65
     e3a:	30 f0       	brcs	.+12     	; 0xe48 <process_fir_command+0x20>
			enter_main_mode("Game canceled");
     e3c:	83 e5       	ldi	r24, 0x53	; 83
     e3e:	91 e0       	ldi	r25, 0x01	; 1
		enter_fir_mode();
		fiveinarow_setup(false); /*Start match where opponent starts first*/
		fiveinarow_recive((char*)(args-2)); /*Receive first move*/
		music_play_note(NOTE(G_PITCH, 2, SIXTEENTH_NOTE), 100);
	}
}
     e40:	df 91       	pop	r29
     e42:	cf 91       	pop	r28
}

void process_fir_command(volatile uint8_t* args){
	if(program_mode == FIR_MODE){ /*If already in a game*/
		if(*args >= 'A'){ /*Protocol dictates that argument over 'A' is "Cancel match" during match*/
			enter_main_mode("Game canceled");
     e44:	0c 94 5c 05 	jmp	0xab8	; 0xab8 <enter_main_mode>
			} else{ /*All other arguments during match are moves*/
			if(!row_player_turn){
     e48:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     e4c:	81 11       	cpse	r24, r1
     e4e:	30 c0       	rjmp	.+96     	; 0xeb0 <process_fir_command+0x88>
				fiveinarow_recive((char*)(args-2));
     e50:	ce 01       	movw	r24, r28
     e52:	02 97       	sbiw	r24, 0x02	; 2
     e54:	0e 94 0e 04 	call	0x81c	; 0x81c <fiveinarow_recive>
				music_play_note(NOTE(G_PITCH, 2, SIXTEENTH_NOTE), 100);
     e58:	64 e6       	ldi	r22, 0x64	; 100
     e5a:	84 e9       	ldi	r24, 0x94	; 148
     e5c:	0e 94 cc 0b 	call	0x1798	; 0x1798 <music_play_note>
				if(fiveinarow_check_win()){
     e60:	0e 94 af 04 	call	0x95e	; 0x95e <fiveinarow_check_win>
     e64:	88 23       	and	r24, r24
     e66:	39 f0       	breq	.+14     	; 0xe76 <process_fir_command+0x4e>
					game_over = 2; /*Mark game as over and lost*/
     e68:	82 e0       	ldi	r24, 0x02	; 2
     e6a:	80 93 ba 02 	sts	0x02BA, r24	; 0x8002ba <game_over>
					music_play_song_pgm(melodies[UNTITLED_SONG]);
     e6e:	8a e1       	ldi	r24, 0x1A	; 26
     e70:	95 e0       	ldi	r25, 0x05	; 5
     e72:	0e 94 56 0c 	call	0x18ac	; 0x18ac <music_play_song_pgm>
				}
				redraw = true;
     e76:	81 e0       	ldi	r24, 0x01	; 1
     e78:	06 c0       	rjmp	.+12     	; 0xe86 <process_fir_command+0x5e>
			}
		}
		} else if(*args < '0'){ /*Protocol dictates that outside of a match < '0' means "Shall we play?"*/
     e7a:	88 81       	ld	r24, Y
     e7c:	80 33       	cpi	r24, 0x30	; 48
     e7e:	30 f4       	brcc	.+12     	; 0xe8c <process_fir_command+0x64>
		game_prompted = true;
     e80:	81 e0       	ldi	r24, 0x01	; 1
     e82:	80 93 bd 02 	sts	0x02BD, r24	; 0x8002bd <game_prompted>
		redraw = true;
     e86:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <redraw>
     e8a:	12 c0       	rjmp	.+36     	; 0xeb0 <process_fir_command+0x88>
		} else if(*args < 'A'){ /*Else the command received is the first move of the opponent*/
     e8c:	88 81       	ld	r24, Y
     e8e:	81 34       	cpi	r24, 0x41	; 65
     e90:	78 f4       	brcc	.+30     	; 0xeb0 <process_fir_command+0x88>
		enter_fir_mode();
     e92:	0e 94 fe 05 	call	0xbfc	; 0xbfc <enter_fir_mode>
		fiveinarow_setup(false); /*Start match where opponent starts first*/
     e96:	80 e0       	ldi	r24, 0x00	; 0
     e98:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <fiveinarow_setup>
		fiveinarow_recive((char*)(args-2)); /*Receive first move*/
     e9c:	ce 01       	movw	r24, r28
     e9e:	02 97       	sbiw	r24, 0x02	; 2
     ea0:	0e 94 0e 04 	call	0x81c	; 0x81c <fiveinarow_recive>
		music_play_note(NOTE(G_PITCH, 2, SIXTEENTH_NOTE), 100);
     ea4:	64 e6       	ldi	r22, 0x64	; 100
     ea6:	84 e9       	ldi	r24, 0x94	; 148
	}
}
     ea8:	df 91       	pop	r29
     eaa:	cf 91       	pop	r28
		redraw = true;
		} else if(*args < 'A'){ /*Else the command received is the first move of the opponent*/
		enter_fir_mode();
		fiveinarow_setup(false); /*Start match where opponent starts first*/
		fiveinarow_recive((char*)(args-2)); /*Receive first move*/
		music_play_note(NOTE(G_PITCH, 2, SIXTEENTH_NOTE), 100);
     eac:	0c 94 cc 0b 	jmp	0x1798	; 0x1798 <music_play_note>
	}
}
     eb0:	df 91       	pop	r29
     eb2:	cf 91       	pop	r28
     eb4:	08 95       	ret

00000eb6 <perform_command>:
	TCCR2A = 1<<WGM21;
	TCCR2B = 7;
	TIMSK2 = 1<<OCIE2A;
}

void perform_command(uint8_t topic, uint8_t command, volatile uint8_t* args){
     eb6:	28 2f       	mov	r18, r24
     eb8:	ca 01       	movw	r24, r20
	switch(topic){
     eba:	21 33       	cpi	r18, 0x31	; 49
     ebc:	19 f0       	breq	.+6      	; 0xec4 <perform_command+0xe>
     ebe:	22 33       	cpi	r18, 0x32	; 50
     ec0:	b9 f0       	breq	.+46     	; 0xef0 <perform_command+0x3a>
     ec2:	08 95       	ret
		case '1': //From car
			switch(command){
     ec4:	61 33       	cpi	r22, 0x31	; 49
     ec6:	41 f0       	breq	.+16     	; 0xed8 <perform_command+0x22>
     ec8:	62 33       	cpi	r22, 0x32	; 50
     eca:	79 f0       	breq	.+30     	; 0xeea <perform_command+0x34>
     ecc:	60 33       	cpi	r22, 0x30	; 48
     ece:	e1 f5       	brne	.+120    	; 0xf48 <perform_command+0x92>
				case '0': /*Emergency break triggered*/
					messages_force("Stopp!          ");
     ed0:	81 e6       	ldi	r24, 0x61	; 97
     ed2:	91 e0       	ldi	r25, 0x01	; 1
     ed4:	0c 94 56 0b 	jmp	0x16ac	; 0x16ac <messages_force>
     ed8:	ba 01       	movw	r22, r20
					break;
				case '1': /*Sensor data received*/
					strcpy((char*)sensor_buf, (char*)args);
     eda:	8a ea       	ldi	r24, 0xAA	; 170
     edc:	93 e0       	ldi	r25, 0x03	; 3
     ede:	0e 94 8d 10 	call	0x211a	; 0x211a <strcpy>
					sensors_received = true;
     ee2:	81 e0       	ldi	r24, 0x01	; 1
     ee4:	80 93 c3 02 	sts	0x02C3, r24	; 0x8002c3 <sensors_received>
					break;
     ee8:	08 95       	ret
				case '2': /*PONG response to a PING*/
					messages_queue("PONG            ");
     eea:	82 e7       	ldi	r24, 0x72	; 114
     eec:	91 e0       	ldi	r25, 0x01	; 1
     eee:	0f c0       	rjmp	.+30     	; 0xf0e <perform_command+0x58>
			}
			break;
		case '2': //To remote
			switch(command){
     ef0:	62 33       	cpi	r22, 0x32	; 50
     ef2:	79 f0       	breq	.+30     	; 0xf12 <perform_command+0x5c>
     ef4:	28 f4       	brcc	.+10     	; 0xf00 <perform_command+0x4a>
     ef6:	60 33       	cpi	r22, 0x30	; 48
     ef8:	41 f0       	breq	.+16     	; 0xf0a <perform_command+0x54>
     efa:	61 33       	cpi	r22, 0x31	; 49
     efc:	41 f0       	breq	.+16     	; 0xf0e <perform_command+0x58>
     efe:	08 95       	ret
     f00:	63 33       	cpi	r22, 0x33	; 51
     f02:	b9 f0       	breq	.+46     	; 0xf32 <perform_command+0x7c>
     f04:	64 33       	cpi	r22, 0x34	; 52
     f06:	b9 f0       	breq	.+46     	; 0xf36 <perform_command+0x80>
     f08:	08 95       	ret
				case '0': /*Heartbeat received*/
					LED_PORT &= ~(1<<LEDR2);
     f0a:	5f 98       	cbi	0x0b, 7	; 11
     f0c:	08 95       	ret
					break;
				case '1': /*Message received*/
					messages_queue((char*)args);
     f0e:	0c 94 67 0b 	jmp	0x16ce	; 0x16ce <messages_queue>
					break;
				case '2': /*Honk request received*/
					music_play_song_pgm(melodies[args[0]-'0']);
     f12:	fa 01       	movw	r30, r20
     f14:	20 81       	ld	r18, Z
     f16:	30 e0       	ldi	r19, 0x00	; 0
     f18:	20 53       	subi	r18, 0x30	; 48
     f1a:	31 09       	sbc	r19, r1
     f1c:	c9 01       	movw	r24, r18
     f1e:	88 0f       	add	r24, r24
     f20:	99 1f       	adc	r25, r25
     f22:	32 2f       	mov	r19, r18
     f24:	22 27       	eor	r18, r18
     f26:	82 0f       	add	r24, r18
     f28:	93 1f       	adc	r25, r19
     f2a:	8e 5e       	subi	r24, 0xEE	; 238
     f2c:	9e 4f       	sbci	r25, 0xFE	; 254
     f2e:	0c 94 56 0c 	jmp	0x18ac	; 0x18ac <music_play_song_pgm>
					break;
				case '3': /*Five in a row related command received*/
					process_fir_command(args);
     f32:	0c 94 14 07 	jmp	0xe28	; 0xe28 <process_fir_command>
					break;
				case '4': /*Received deadman info from rem2*/
					/*Set lamp to correspond with opponents deadman switch*/
					if(args[0] == '1'){
     f36:	fa 01       	movw	r30, r20
     f38:	80 81       	ld	r24, Z
     f3a:	81 33       	cpi	r24, 0x31	; 49
     f3c:	11 f4       	brne	.+4      	; 0xf42 <perform_command+0x8c>
						SETBIT(LED_PORT, LEDR1);
     f3e:	5e 9a       	sbi	0x0b, 6	; 11
     f40:	08 95       	ret
					} else{
						CLEARBIT(LED_PORT, LEDR1);
     f42:	5e 98       	cbi	0x0b, 6	; 11
						/*Clear punished state when rem2 releases deadmans switch*/
						punished = false;
     f44:	10 92 bb 02 	sts	0x02BB, r1	; 0x8002bb <punished>
     f48:	08 95       	ret

00000f4a <display_sensors>:
		fiveinarow_recive((char*)(args-2)); /*Receive first move*/
		music_play_note(NOTE(G_PITCH, 2, SIXTEENTH_NOTE), 100);
	}
}

void display_sensors(){
     f4a:	1f 93       	push	r17
     f4c:	cf 93       	push	r28
     f4e:	df 93       	push	r29
	char* args = (char*)sensor_buf;
	/*Write out contact sensors, PIR-sensor*/
	set_cursor_pos(CR_POS);
     f50:	8f e1       	ldi	r24, 0x1F	; 31
     f52:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <set_cursor_pos>
	write_lcd_char((args[0] == '0') ? 'R' : '_');
     f56:	80 91 aa 03 	lds	r24, 0x03AA	; 0x8003aa <sensor_buf>
     f5a:	80 33       	cpi	r24, 0x30	; 48
     f5c:	11 f0       	breq	.+4      	; 0xf62 <display_sensors+0x18>
     f5e:	8f e5       	ldi	r24, 0x5F	; 95
     f60:	01 c0       	rjmp	.+2      	; 0xf64 <display_sensors+0x1a>
     f62:	82 e5       	ldi	r24, 0x52	; 82
     f64:	0e 94 ac 0a 	call	0x1558	; 0x1558 <write_lcd_char>
	set_cursor_pos(CL_POS);
     f68:	8e e1       	ldi	r24, 0x1E	; 30
     f6a:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <set_cursor_pos>
	write_lcd_char((args[1] == '0') ? 'L' : '_');
     f6e:	80 91 ab 03 	lds	r24, 0x03AB	; 0x8003ab <sensor_buf+0x1>
     f72:	80 33       	cpi	r24, 0x30	; 48
     f74:	11 f0       	breq	.+4      	; 0xf7a <display_sensors+0x30>
     f76:	8f e5       	ldi	r24, 0x5F	; 95
     f78:	01 c0       	rjmp	.+2      	; 0xf7c <display_sensors+0x32>
     f7a:	8c e4       	ldi	r24, 0x4C	; 76
     f7c:	0e 94 ac 0a 	call	0x1558	; 0x1558 <write_lcd_char>
	set_cursor_pos(PIR_POS);
     f80:	8f e0       	ldi	r24, 0x0F	; 15
     f82:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <set_cursor_pos>
	write_lcd_char((args[3] == '0') ? 'X' : '_');
     f86:	80 91 ad 03 	lds	r24, 0x03AD	; 0x8003ad <sensor_buf+0x3>
     f8a:	80 33       	cpi	r24, 0x30	; 48
     f8c:	11 f0       	breq	.+4      	; 0xf92 <display_sensors+0x48>
     f8e:	8f e5       	ldi	r24, 0x5F	; 95
     f90:	01 c0       	rjmp	.+2      	; 0xf94 <display_sensors+0x4a>
     f92:	88 e5       	ldi	r24, 0x58	; 88
     f94:	0e 94 ac 0a 	call	0x1558	; 0x1558 <write_lcd_char>
	/*If button is pressed, honk*/
	if(args[2] == '0') music_play_song_pgm(melodies[HONK_SONG]);
     f98:	80 91 ac 03 	lds	r24, 0x03AC	; 0x8003ac <sensor_buf+0x2>
     f9c:	80 33       	cpi	r24, 0x30	; 48
     f9e:	21 f4       	brne	.+8      	; 0xfa8 <display_sensors+0x5e>
     fa0:	82 e1       	ldi	r24, 0x12	; 18
     fa2:	91 e0       	ldi	r25, 0x01	; 1
     fa4:	0e 94 56 0c 	call	0x18ac	; 0x18ac <music_play_song_pgm>
	
	/*Read through arguments and store indices of range data*/
	uint8_t b = 5;
     fa8:	c5 e0       	ldi	r28, 0x05	; 5
	while(args[++b] != ' ');
     faa:	81 e0       	ldi	r24, 0x01	; 1
     fac:	8c 0f       	add	r24, r28
     fae:	e8 2f       	mov	r30, r24
     fb0:	f0 e0       	ldi	r31, 0x00	; 0
     fb2:	e6 55       	subi	r30, 0x56	; 86
     fb4:	fc 4f       	sbci	r31, 0xFC	; 252
     fb6:	90 81       	ld	r25, Z
     fb8:	90 32       	cpi	r25, 0x20	; 32
     fba:	11 f0       	breq	.+4      	; 0xfc0 <display_sensors+0x76>
     fbc:	c8 2f       	mov	r28, r24
     fbe:	f5 cf       	rjmp	.-22     	; 0xfaa <display_sensors+0x60>
	args[b++] = '\0';
     fc0:	ce 5f       	subi	r28, 0xFE	; 254
     fc2:	10 82       	st	Z, r1
     fc4:	8c 2f       	mov	r24, r28
	uint8_t k = b;
	while(args[++k] != ' ');
     fc6:	91 e0       	ldi	r25, 0x01	; 1
     fc8:	98 0f       	add	r25, r24
     fca:	e9 2f       	mov	r30, r25
     fcc:	f0 e0       	ldi	r31, 0x00	; 0
     fce:	e6 55       	subi	r30, 0x56	; 86
     fd0:	fc 4f       	sbci	r31, 0xFC	; 252
     fd2:	20 81       	ld	r18, Z
     fd4:	20 32       	cpi	r18, 0x20	; 32
     fd6:	11 f0       	breq	.+4      	; 0xfdc <display_sensors+0x92>
     fd8:	89 2f       	mov	r24, r25
     fda:	f5 cf       	rjmp	.-22     	; 0xfc6 <display_sensors+0x7c>
	args[k++] = '\0';
     fdc:	d2 e0       	ldi	r29, 0x02	; 2
     fde:	d8 0f       	add	r29, r24
     fe0:	10 82       	st	Z, r1
	
	/*Write front value*/
	set_cursor_pos(FRONT_POS);
     fe2:	85 e0       	ldi	r24, 0x05	; 5
     fe4:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <set_cursor_pos>
	if(b == 7 && args[5] == '0'){ //0 is sent for front
     fe8:	c7 30       	cpi	r28, 0x07	; 7
     fea:	39 f4       	brne	.+14     	; 0xffa <display_sensors+0xb0>
     fec:	80 91 af 03 	lds	r24, 0x03AF	; 0x8003af <sensor_buf+0x5>
     ff0:	80 33       	cpi	r24, 0x30	; 48
     ff2:	19 f4       	brne	.+6      	; 0xffa <display_sensors+0xb0>
		write_lcd_string("!!!");
     ff4:	83 e8       	ldi	r24, 0x83	; 131
     ff6:	91 e0       	ldi	r25, 0x01	; 1
     ff8:	13 c0       	rjmp	.+38     	; 0x1020 <display_sensors+0xd6>
	} else{
		for (int8_t i = 3-strlen(args+5); i > 0; i--) write_lcd_char(' ');
     ffa:	ef ea       	ldi	r30, 0xAF	; 175
     ffc:	f3 e0       	ldi	r31, 0x03	; 3
     ffe:	01 90       	ld	r0, Z+
    1000:	00 20       	and	r0, r0
    1002:	e9 f7       	brne	.-6      	; 0xffe <display_sensors+0xb4>
    1004:	cf 01       	movw	r24, r30
    1006:	80 5b       	subi	r24, 0xB0	; 176
    1008:	93 40       	sbci	r25, 0x03	; 3
    100a:	13 e0       	ldi	r17, 0x03	; 3
    100c:	18 1b       	sub	r17, r24
    100e:	11 16       	cp	r1, r17
    1010:	2c f4       	brge	.+10     	; 0x101c <display_sensors+0xd2>
    1012:	80 e2       	ldi	r24, 0x20	; 32
    1014:	0e 94 ac 0a 	call	0x1558	; 0x1558 <write_lcd_char>
    1018:	11 50       	subi	r17, 0x01	; 1
    101a:	f9 cf       	rjmp	.-14     	; 0x100e <display_sensors+0xc4>
		write_lcd_string(args+5);
    101c:	8f ea       	ldi	r24, 0xAF	; 175
    101e:	93 e0       	ldi	r25, 0x03	; 3
    1020:	0e 94 bb 0a 	call	0x1576	; 0x1576 <write_lcd_string>
	}
	
	/*Write back value*/
	set_cursor_pos(BACK_POS);
    1024:	84 e1       	ldi	r24, 0x14	; 20
    1026:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <set_cursor_pos>
	if(k-b == 2 && args[b] == '0'){ //0 is sent for back
    102a:	8d 2f       	mov	r24, r29
    102c:	90 e0       	ldi	r25, 0x00	; 0
    102e:	d0 e0       	ldi	r29, 0x00	; 0
    1030:	8c 1b       	sub	r24, r28
    1032:	9d 0b       	sbc	r25, r29
    1034:	02 97       	sbiw	r24, 0x02	; 2
    1036:	49 f4       	brne	.+18     	; 0x104a <display_sensors+0x100>
    1038:	fe 01       	movw	r30, r28
    103a:	e6 55       	subi	r30, 0x56	; 86
    103c:	fc 4f       	sbci	r31, 0xFC	; 252
    103e:	80 81       	ld	r24, Z
    1040:	80 33       	cpi	r24, 0x30	; 48
    1042:	19 f4       	brne	.+6      	; 0x104a <display_sensors+0x100>
		write_lcd_string("!!!");
    1044:	83 e8       	ldi	r24, 0x83	; 131
    1046:	91 e0       	ldi	r25, 0x01	; 1
    1048:	11 c0       	rjmp	.+34     	; 0x106c <display_sensors+0x122>
	} else{
		for (int8_t i = 3-strlen(args+b); i > 0; i--) write_lcd_char(' ');
    104a:	c6 55       	subi	r28, 0x56	; 86
    104c:	dc 4f       	sbci	r29, 0xFC	; 252
    104e:	fe 01       	movw	r30, r28
    1050:	01 90       	ld	r0, Z+
    1052:	00 20       	and	r0, r0
    1054:	e9 f7       	brne	.-6      	; 0x1050 <display_sensors+0x106>
    1056:	1c 2f       	mov	r17, r28
    1058:	1e 1b       	sub	r17, r30
    105a:	1c 5f       	subi	r17, 0xFC	; 252
    105c:	11 16       	cp	r1, r17
    105e:	2c f4       	brge	.+10     	; 0x106a <display_sensors+0x120>
    1060:	80 e2       	ldi	r24, 0x20	; 32
    1062:	0e 94 ac 0a 	call	0x1558	; 0x1558 <write_lcd_char>
    1066:	11 50       	subi	r17, 0x01	; 1
    1068:	f9 cf       	rjmp	.-14     	; 0x105c <display_sensors+0x112>
		write_lcd_string(args+b);
    106a:	ce 01       	movw	r24, r28
	}
}
    106c:	df 91       	pop	r29
    106e:	cf 91       	pop	r28
    1070:	1f 91       	pop	r17
	set_cursor_pos(BACK_POS);
	if(k-b == 2 && args[b] == '0'){ //0 is sent for back
		write_lcd_string("!!!");
	} else{
		for (int8_t i = 3-strlen(args+b); i > 0; i--) write_lcd_char(' ');
		write_lcd_string(args+b);
    1072:	0c 94 bb 0a 	jmp	0x1576	; 0x1576 <write_lcd_string>

00001076 <do_normal_actions>:
		uart_send_line("040");
		LED_PORT &= ~(1<<LEDG);
	}
}

void do_normal_actions(){
    1076:	cf 93       	push	r28
    1078:	df 93       	push	r29
	/*If a game has been prompted, draw prompt screen if not drawn and poll for accept*/
	if(game_prompted){
    107a:	80 91 bd 02 	lds	r24, 0x02BD	; 0x8002bd <game_prompted>
    107e:	88 23       	and	r24, r24
    1080:	01 f1       	breq	.+64     	; 0x10c2 <do_normal_actions+0x4c>
		if(redraw){
    1082:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <redraw>
    1086:	88 23       	and	r24, r24
    1088:	59 f0       	breq	.+22     	; 0x10a0 <do_normal_actions+0x2a>
			clear_LCD();
    108a:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <clear_LCD>
			set_cursor_pos(16);
    108e:	80 e1       	ldi	r24, 0x10	; 16
    1090:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <set_cursor_pos>
			write_lcd_string("Want to play?");
    1094:	88 e9       	ldi	r24, 0x98	; 152
    1096:	91 e0       	ldi	r25, 0x01	; 1
    1098:	0e 94 bb 0a 	call	0x1576	; 0x1576 <write_lcd_string>
			redraw = false;
    109c:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <redraw>
		}
		if(DEADMAN_PRESSED){
    10a0:	4c 99       	sbic	0x09, 4	; 9
    10a2:	9f c0       	rjmp	.+318    	; 0x11e2 <do_normal_actions+0x16c>
			enter_fir_mode();
    10a4:	0e 94 fe 05 	call	0xbfc	; 0xbfc <enter_fir_mode>
			fiveinarow_setup(true); /*Game starts with player as first turn*/
    10a8:	81 e0       	ldi	r24, 0x01	; 1
    10aa:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <fiveinarow_setup>
    10ae:	2f ef       	ldi	r18, 0xFF	; 255
    10b0:	80 e7       	ldi	r24, 0x70	; 112
    10b2:	92 e0       	ldi	r25, 0x02	; 2
    10b4:	21 50       	subi	r18, 0x01	; 1
    10b6:	80 40       	sbci	r24, 0x00	; 0
    10b8:	90 40       	sbci	r25, 0x00	; 0
    10ba:	e1 f7       	brne	.-8      	; 0x10b4 <do_normal_actions+0x3e>
    10bc:	00 c0       	rjmp	.+0      	; 0x10be <do_normal_actions+0x48>
    10be:	00 00       	nop
    10c0:	90 c0       	rjmp	.+288    	; 0x11e2 <do_normal_actions+0x16c>
			_delay_ms(100);			/* Avoid debounce*/
		}
		/*Canceling a game prompt is handled in ISR*/
	} else{
		/*Redraw static text if returning from other screen*/
		if(redraw){
    10c2:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <redraw>
    10c6:	88 23       	and	r24, r24
    10c8:	51 f0       	breq	.+20     	; 0x10de <do_normal_actions+0x68>
			clear_line(0);
    10ca:	80 e0       	ldi	r24, 0x00	; 0
    10cc:	0e 94 ed 0a 	call	0x15da	; 0x15da <clear_line>
			clear_line(1);
    10d0:	81 e0       	ldi	r24, 0x01	; 1
    10d2:	0e 94 ed 0a 	call	0x15da	; 0x15da <clear_line>
			print_lcd_static();
    10d6:	0e 94 96 06 	call	0xd2c	; 0xd2c <print_lcd_static>
			redraw = false;
    10da:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <redraw>
		}
		/*Move along message queue (if message done, handled by module) and write buffer if not read before*/
		messages_move_queue();
    10de:	0e 94 9a 0b 	call	0x1734	; 0x1734 <messages_move_queue>
		if(!output_buf_read){
    10e2:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <output_buf_read>
    10e6:	81 11       	cpse	r24, r1
    10e8:	0d c0       	rjmp	.+26     	; 0x1104 <do_normal_actions+0x8e>
			set_cursor_pos(32);
    10ea:	80 e2       	ldi	r24, 0x20	; 32
    10ec:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <set_cursor_pos>
			char* buffer = (char*)messages_get_buffer();
    10f0:	0e 94 be 0b 	call	0x177c	; 0x177c <messages_get_buffer>
			/*If buffer is empty, write clear line. Otherwise write buffer*/
			write_lcd_string((buffer[0] != '\0') ? buffer :  "                ");
    10f4:	fc 01       	movw	r30, r24
    10f6:	20 81       	ld	r18, Z
    10f8:	21 11       	cpse	r18, r1
    10fa:	02 c0       	rjmp	.+4      	; 0x1100 <do_normal_actions+0x8a>
    10fc:	87 e8       	ldi	r24, 0x87	; 135
    10fe:	91 e0       	ldi	r25, 0x01	; 1
    1100:	0e 94 bb 0a 	call	0x1576	; 0x1576 <write_lcd_string>
		}
		/*If sensor data was recived in ISR write data to screen*/
		if(sensors_received){
    1104:	80 91 c3 02 	lds	r24, 0x02C3	; 0x8002c3 <sensors_received>
    1108:	88 23       	and	r24, r24
    110a:	21 f0       	breq	.+8      	; 0x1114 <do_normal_actions+0x9e>
			display_sensors();
    110c:	0e 94 a5 07 	call	0xf4a	; 0xf4a <display_sensors>
			sensors_received = false;
    1110:	10 92 c3 02 	sts	0x02C3, r1	; 0x8002c3 <sensors_received>
		}
		/*Poll for deadmans switch. If pressed (And not pusnished) send status to car and send move_commands*/
		if(DEADMAN_PRESSED && !punished){
    1114:	4c 99       	sbic	0x09, 4	; 9
    1116:	12 c0       	rjmp	.+36     	; 0x113c <do_normal_actions+0xc6>
    1118:	80 91 bb 02 	lds	r24, 0x02BB	; 0x8002bb <punished>
    111c:	81 11       	cpse	r24, r1
    111e:	0e c0       	rjmp	.+28     	; 0x113c <do_normal_actions+0xc6>
			if(!(LED_PORT & (1<<LEDG))){
    1120:	5d 99       	sbic	0x0b, 5	; 11
    1122:	09 c0       	rjmp	.+18     	; 0x1136 <do_normal_actions+0xc0>
				uart_send_line("041");
    1124:	86 ea       	ldi	r24, 0xA6	; 166
    1126:	91 e0       	ldi	r25, 0x01	; 1
    1128:	0e 94 1f 0a 	call	0x143e	; 0x143e <uart_send_line>
				uart_send_line("341");
    112c:	8a ea       	ldi	r24, 0xAA	; 170
    112e:	91 e0       	ldi	r25, 0x01	; 1
    1130:	0e 94 1f 0a 	call	0x143e	; 0x143e <uart_send_line>
				LED_PORT |= 1<<LEDG;
    1134:	5d 9a       	sbi	0x0b, 5	; 11
			}
			send_move_command();
    1136:	0e 94 0d 06 	call	0xc1a	; 0xc1a <send_move_command>
    113a:	0b c0       	rjmp	.+22     	; 0x1152 <do_normal_actions+0xdc>
		} else if(LED_PORT & (1<<LEDG)){ /*If button is not pressed AND LED indicating dms is on*/
    113c:	5d 9b       	sbis	0x0b, 5	; 11
    113e:	09 c0       	rjmp	.+18     	; 0x1152 <do_normal_actions+0xdc>
			uart_send_line("040"); /*Send deadman off to car*/
    1140:	8d e2       	ldi	r24, 0x2D	; 45
    1142:	91 e0       	ldi	r25, 0x01	; 1
    1144:	0e 94 1f 0a 	call	0x143e	; 0x143e <uart_send_line>
			uart_send_line("340"); /*Send deadman off to rem2*/
    1148:	8e ea       	ldi	r24, 0xAE	; 174
    114a:	91 e0       	ldi	r25, 0x01	; 1
    114c:	0e 94 1f 0a 	call	0x143e	; 0x143e <uart_send_line>
			LED_PORT &= ~(1<<LEDG); /*Disable LED*/
    1150:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		if(GAMEBTN_PRESSED){
    1152:	1e 99       	sbic	0x03, 6	; 3
    1154:	2f c0       	rjmp	.+94     	; 0x11b4 <do_normal_actions+0x13e>
			if(DEADMAN_PRESSED){
    1156:	4c 99       	sbic	0x09, 4	; 9
    1158:	16 c0       	rjmp	.+44     	; 0x1186 <do_normal_actions+0x110>
				if(gamebtn_last != GAMEBTN_PRESSED) uart_send_line("08"); /*Return car to home*/;
    115a:	23 b1       	in	r18, 0x03	; 3
    115c:	80 91 c8 02 	lds	r24, 0x02C8	; 0x8002c8 <gamebtn_last>
    1160:	90 e0       	ldi	r25, 0x00	; 0
    1162:	22 95       	swap	r18
    1164:	26 95       	lsr	r18
    1166:	26 95       	lsr	r18
    1168:	23 70       	andi	r18, 0x03	; 3
    116a:	31 e0       	ldi	r19, 0x01	; 1
    116c:	23 27       	eor	r18, r19
    116e:	21 70       	andi	r18, 0x01	; 1
    1170:	c2 2f       	mov	r28, r18
    1172:	f0 e0       	ldi	r31, 0x00	; 0
    1174:	df 2f       	mov	r29, r31
    1176:	8c 17       	cp	r24, r28
    1178:	9d 07       	cpc	r25, r29
    117a:	c1 f0       	breq	.+48     	; 0x11ac <do_normal_actions+0x136>
    117c:	82 eb       	ldi	r24, 0xB2	; 178
    117e:	91 e0       	ldi	r25, 0x01	; 1
    1180:	0e 94 1f 0a 	call	0x143e	; 0x143e <uart_send_line>
    1184:	13 c0       	rjmp	.+38     	; 0x11ac <do_normal_actions+0x136>
			} else if(!request_sent){ /*If button is pressed and no request is waiting, send game request*/
    1186:	80 91 bc 02 	lds	r24, 0x02BC	; 0x8002bc <request_sent>
    118a:	81 11       	cpse	r24, r1
    118c:	0f c0       	rjmp	.+30     	; 0x11ac <do_normal_actions+0x136>
				uart_send_line("33."); /*Game request to rem2. '.' < '0'*/
    118e:	85 eb       	ldi	r24, 0xB5	; 181
    1190:	91 e0       	ldi	r25, 0x01	; 1
    1192:	0e 94 1f 0a 	call	0x143e	; 0x143e <uart_send_line>
				messages_force("Invitation sent");
    1196:	89 eb       	ldi	r24, 0xB9	; 185
    1198:	91 e0       	ldi	r25, 0x01	; 1
    119a:	0e 94 56 0b 	call	0x16ac	; 0x16ac <messages_force>
				request_sent = true;
    119e:	81 e0       	ldi	r24, 0x01	; 1
    11a0:	80 93 bc 02 	sts	0x02BC, r24	; 0x8002bc <request_sent>
				invite_timeout_hundreths = 0;
    11a4:	10 92 c5 02 	sts	0x02C5, r1	; 0x8002c5 <invite_timeout_hundreths+0x1>
    11a8:	10 92 c4 02 	sts	0x02C4, r1	; 0x8002c4 <invite_timeout_hundreths>
			}
			gamebtn_last = 1;
    11ac:	81 e0       	ldi	r24, 0x01	; 1
    11ae:	80 93 c8 02 	sts	0x02C8, r24	; 0x8002c8 <gamebtn_last>
    11b2:	02 c0       	rjmp	.+4      	; 0x11b8 <do_normal_actions+0x142>
		} else gamebtn_last = 0;
    11b4:	10 92 c8 02 	sts	0x02C8, r1	; 0x8002c8 <gamebtn_last>
		
		/*Poll for game button*/
		if(GAMEBTN_PRESSED && !request_sent){ /*If button is sent and to request is waiting, send game request*/
    11b8:	1e 99       	sbic	0x03, 6	; 3
    11ba:	13 c0       	rjmp	.+38     	; 0x11e2 <do_normal_actions+0x16c>
    11bc:	80 91 bc 02 	lds	r24, 0x02BC	; 0x8002bc <request_sent>
    11c0:	81 11       	cpse	r24, r1
    11c2:	0f c0       	rjmp	.+30     	; 0x11e2 <do_normal_actions+0x16c>
			uart_send_line("33."); /*Game request to rem2. '.' < '0'*/
    11c4:	85 eb       	ldi	r24, 0xB5	; 181
    11c6:	91 e0       	ldi	r25, 0x01	; 1
    11c8:	0e 94 1f 0a 	call	0x143e	; 0x143e <uart_send_line>
			messages_force("Invitation sent");
    11cc:	89 eb       	ldi	r24, 0xB9	; 185
    11ce:	91 e0       	ldi	r25, 0x01	; 1
    11d0:	0e 94 56 0b 	call	0x16ac	; 0x16ac <messages_force>
			request_sent = true;
    11d4:	81 e0       	ldi	r24, 0x01	; 1
    11d6:	80 93 bc 02 	sts	0x02BC, r24	; 0x8002bc <request_sent>
			invite_timeout_hundreths = 0;
    11da:	10 92 c5 02 	sts	0x02C5, r1	; 0x8002c5 <invite_timeout_hundreths+0x1>
    11de:	10 92 c4 02 	sts	0x02C4, r1	; 0x8002c4 <invite_timeout_hundreths>
    11e2:	2f e7       	ldi	r18, 0x7F	; 127
    11e4:	88 e3       	ldi	r24, 0x38	; 56
    11e6:	91 e0       	ldi	r25, 0x01	; 1
    11e8:	21 50       	subi	r18, 0x01	; 1
    11ea:	80 40       	sbci	r24, 0x00	; 0
    11ec:	90 40       	sbci	r25, 0x00	; 0
    11ee:	e1 f7       	brne	.-8      	; 0x11e8 <do_normal_actions+0x172>
    11f0:	00 c0       	rjmp	.+0      	; 0x11f2 <do_normal_actions+0x17c>
    11f2:	00 00       	nop
		}
	}
	_delay_ms(50);
}
    11f4:	df 91       	pop	r29
    11f6:	cf 91       	pop	r28
    11f8:	08 95       	ret

000011fa <__vector_18>:
		for (int8_t i = 3-strlen(args+b); i > 0; i--) write_lcd_char(' ');
		write_lcd_string(args+b);
	}
}

ISR(USART_RX_vect){
    11fa:	1f 92       	push	r1
    11fc:	0f 92       	push	r0
    11fe:	0f b6       	in	r0, 0x3f	; 63
    1200:	0f 92       	push	r0
    1202:	11 24       	eor	r1, r1
    1204:	2f 93       	push	r18
    1206:	3f 93       	push	r19
    1208:	4f 93       	push	r20
    120a:	5f 93       	push	r21
    120c:	6f 93       	push	r22
    120e:	7f 93       	push	r23
    1210:	8f 93       	push	r24
    1212:	9f 93       	push	r25
    1214:	af 93       	push	r26
    1216:	bf 93       	push	r27
    1218:	ef 93       	push	r30
    121a:	ff 93       	push	r31
	uart_linebuf[uart_bufind] = UDR0;
    121c:	e0 91 c9 02 	lds	r30, 0x02C9	; 0x8002c9 <uart_bufind>
    1220:	f0 e0       	ldi	r31, 0x00	; 0
    1222:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    1226:	ea 56       	subi	r30, 0x6A	; 106
    1228:	fc 4f       	sbci	r31, 0xFC	; 252
    122a:	80 83       	st	Z, r24
	if(uart_linebuf[uart_bufind] == '\n'){
    122c:	e0 91 c9 02 	lds	r30, 0x02C9	; 0x8002c9 <uart_bufind>
    1230:	f0 e0       	ldi	r31, 0x00	; 0
    1232:	ea 56       	subi	r30, 0x6A	; 106
    1234:	fc 4f       	sbci	r31, 0xFC	; 252
    1236:	80 81       	ld	r24, Z
    1238:	8a 30       	cpi	r24, 0x0A	; 10
    123a:	89 f4       	brne	.+34     	; 0x125e <__vector_18+0x64>
		uart_linebuf[uart_bufind] = '\0';
    123c:	e0 91 c9 02 	lds	r30, 0x02C9	; 0x8002c9 <uart_bufind>
    1240:	f0 e0       	ldi	r31, 0x00	; 0
    1242:	ea 56       	subi	r30, 0x6A	; 106
    1244:	fc 4f       	sbci	r31, 0xFC	; 252
    1246:	10 82       	st	Z, r1
		//Do something
		perform_command(uart_linebuf[0], uart_linebuf[1], uart_linebuf+2);
    1248:	60 91 97 03 	lds	r22, 0x0397	; 0x800397 <uart_linebuf+0x1>
    124c:	80 91 96 03 	lds	r24, 0x0396	; 0x800396 <uart_linebuf>
    1250:	48 e9       	ldi	r20, 0x98	; 152
    1252:	53 e0       	ldi	r21, 0x03	; 3
    1254:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <perform_command>
		//Done something
		uart_bufind = 0;
    1258:	10 92 c9 02 	sts	0x02C9, r1	; 0x8002c9 <uart_bufind>
    125c:	05 c0       	rjmp	.+10     	; 0x1268 <__vector_18+0x6e>
	} else{
		uart_bufind++;
    125e:	80 91 c9 02 	lds	r24, 0x02C9	; 0x8002c9 <uart_bufind>
    1262:	8f 5f       	subi	r24, 0xFF	; 255
    1264:	80 93 c9 02 	sts	0x02C9, r24	; 0x8002c9 <uart_bufind>
	}
}
    1268:	ff 91       	pop	r31
    126a:	ef 91       	pop	r30
    126c:	bf 91       	pop	r27
    126e:	af 91       	pop	r26
    1270:	9f 91       	pop	r25
    1272:	8f 91       	pop	r24
    1274:	7f 91       	pop	r23
    1276:	6f 91       	pop	r22
    1278:	5f 91       	pop	r21
    127a:	4f 91       	pop	r20
    127c:	3f 91       	pop	r19
    127e:	2f 91       	pop	r18
    1280:	0f 90       	pop	r0
    1282:	0f be       	out	0x3f, r0	; 63
    1284:	0f 90       	pop	r0
    1286:	1f 90       	pop	r1
    1288:	18 95       	reti

0000128a <btn_init>:

void btn_init(){
	BTN_DDR &= ~((1<<HONKBTN)|(1<<DEADMANBTN)|(1<<EXTRABTN));
    128a:	8a b1       	in	r24, 0x0a	; 10
    128c:	83 7e       	andi	r24, 0xE3	; 227
    128e:	8a b9       	out	0x0a, r24	; 10
	BTN_PORT |= (1<<HONKBTN)|(1<<DEADMANBTN)|(1<<EXTRABTN);
    1290:	8b b1       	in	r24, 0x0b	; 11
    1292:	8c 61       	ori	r24, 0x1C	; 28
    1294:	8b b9       	out	0x0b, r24	; 11
	DDRB &= ~(1<<GAMEBTN);
    1296:	26 98       	cbi	0x04, 6	; 4
	PORTB |= 1<<GAMEBTN;
    1298:	2e 9a       	sbi	0x05, 6	; 5
	EICRA = (2<<ISC00)|(2<<ISC10);
    129a:	8a e0       	ldi	r24, 0x0A	; 10
    129c:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
	EIMSK = 3;
    12a0:	83 e0       	ldi	r24, 0x03	; 3
    12a2:	8d bb       	out	0x1d, r24	; 29
    12a4:	08 95       	ret

000012a6 <__vector_1>:
}

//Extra
ISR(INT0_vect){
    12a6:	1f 92       	push	r1
    12a8:	0f 92       	push	r0
    12aa:	0f b6       	in	r0, 0x3f	; 63
    12ac:	0f 92       	push	r0
    12ae:	11 24       	eor	r1, r1
    12b0:	2f 93       	push	r18
    12b2:	3f 93       	push	r19
    12b4:	4f 93       	push	r20
    12b6:	5f 93       	push	r21
    12b8:	6f 93       	push	r22
    12ba:	7f 93       	push	r23
    12bc:	8f 93       	push	r24
    12be:	9f 93       	push	r25
    12c0:	af 93       	push	r26
    12c2:	bf 93       	push	r27
    12c4:	cf 93       	push	r28
    12c6:	ef 93       	push	r30
    12c8:	ff 93       	push	r31
	if(program_mode == FIR_MODE){
    12ca:	c0 91 be 02 	lds	r28, 0x02BE	; 0x8002be <program_mode>
    12ce:	c1 30       	cpi	r28, 0x01	; 1
    12d0:	59 f4       	brne	.+22     	; 0x12e8 <__vector_1+0x42>
		enter_main_mode("Game canceled");
    12d2:	83 e5       	ldi	r24, 0x53	; 83
    12d4:	91 e0       	ldi	r25, 0x01	; 1
    12d6:	0e 94 5c 05 	call	0xab8	; 0xab8 <enter_main_mode>
		uart_send_line("33A");
    12da:	89 ec       	ldi	r24, 0xC9	; 201
    12dc:	91 e0       	ldi	r25, 0x01	; 1
    12de:	0e 94 1f 0a 	call	0x143e	; 0x143e <uart_send_line>
		punished = true;
    12e2:	c0 93 bb 02 	sts	0x02BB, r28	; 0x8002bb <punished>
    12e6:	33 c0       	rjmp	.+102    	; 0x134e <__vector_1+0xa8>
	} else{
		if(game_prompted){
    12e8:	80 91 bd 02 	lds	r24, 0x02BD	; 0x8002bd <game_prompted>
    12ec:	88 23       	and	r24, r24
    12ee:	31 f0       	breq	.+12     	; 0x12fc <__vector_1+0x56>
			game_prompted = false;
    12f0:	10 92 bd 02 	sts	0x02BD, r1	; 0x8002bd <game_prompted>
			redraw = true;
    12f4:	81 e0       	ldi	r24, 0x01	; 1
    12f6:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <redraw>
    12fa:	29 c0       	rjmp	.+82     	; 0x134e <__vector_1+0xa8>
		} else if((BTN_PIN & 1<<DEADMANBTN) && (read_adc(0) > z_rest-5)){ /*If deadmans is not pressed and device is flat*/
    12fc:	4c 9b       	sbis	0x09, 4	; 9
    12fe:	27 c0       	rjmp	.+78     	; 0x134e <__vector_1+0xa8>
    1300:	80 e0       	ldi	r24, 0x00	; 0
    1302:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <read_adc>
    1306:	20 91 11 01 	lds	r18, 0x0111	; 0x800111 <z_rest>
    130a:	30 91 12 01 	lds	r19, 0x0112	; 0x800112 <z_rest+0x1>
    130e:	25 50       	subi	r18, 0x05	; 5
    1310:	31 09       	sbc	r19, r1
    1312:	28 17       	cp	r18, r24
    1314:	39 07       	cpc	r19, r25
    1316:	d8 f4       	brcc	.+54     	; 0x134e <__vector_1+0xa8>
			z_rest = read_avg_adc(0, 25);
    1318:	69 e1       	ldi	r22, 0x19	; 25
    131a:	70 e0       	ldi	r23, 0x00	; 0
    131c:	80 e0       	ldi	r24, 0x00	; 0
    131e:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <read_avg_adc>
    1322:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <z_rest+0x1>
    1326:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <z_rest>
			x_rest = read_avg_adc(1, 25);
    132a:	69 e1       	ldi	r22, 0x19	; 25
    132c:	70 e0       	ldi	r23, 0x00	; 0
    132e:	81 e0       	ldi	r24, 0x01	; 1
    1330:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <read_avg_adc>
    1334:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <x_rest+0x1>
    1338:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <x_rest>
			y_rest = read_avg_adc(2, 25);
    133c:	69 e1       	ldi	r22, 0x19	; 25
    133e:	70 e0       	ldi	r23, 0x00	; 0
    1340:	82 e0       	ldi	r24, 0x02	; 2
    1342:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <read_avg_adc>
    1346:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <y_rest+0x1>
    134a:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <y_rest>
		}
	}
	
}
    134e:	ff 91       	pop	r31
    1350:	ef 91       	pop	r30
    1352:	cf 91       	pop	r28
    1354:	bf 91       	pop	r27
    1356:	af 91       	pop	r26
    1358:	9f 91       	pop	r25
    135a:	8f 91       	pop	r24
    135c:	7f 91       	pop	r23
    135e:	6f 91       	pop	r22
    1360:	5f 91       	pop	r21
    1362:	4f 91       	pop	r20
    1364:	3f 91       	pop	r19
    1366:	2f 91       	pop	r18
    1368:	0f 90       	pop	r0
    136a:	0f be       	out	0x3f, r0	; 63
    136c:	0f 90       	pop	r0
    136e:	1f 90       	pop	r1
    1370:	18 95       	reti

00001372 <__vector_2>:

//Honk
ISR(INT1_vect){
    1372:	1f 92       	push	r1
    1374:	0f 92       	push	r0
    1376:	0f b6       	in	r0, 0x3f	; 63
    1378:	0f 92       	push	r0
    137a:	11 24       	eor	r1, r1
    137c:	2f 93       	push	r18
    137e:	3f 93       	push	r19
    1380:	4f 93       	push	r20
    1382:	5f 93       	push	r21
    1384:	6f 93       	push	r22
    1386:	7f 93       	push	r23
    1388:	8f 93       	push	r24
    138a:	9f 93       	push	r25
    138c:	af 93       	push	r26
    138e:	bf 93       	push	r27
    1390:	ef 93       	push	r30
    1392:	ff 93       	push	r31
	if(honk_debounce_hundreths == 0){ /*If no cooldown*/
    1394:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <honk_debounce_hundreths>
    1398:	81 11       	cpse	r24, r1
    139a:	0c c0       	rjmp	.+24     	; 0x13b4 <__vector_2+0x42>
		if(DEADMAN_PRESSED){
    139c:	4c 99       	sbic	0x09, 4	; 9
    139e:	03 c0       	rjmp	.+6      	; 0x13a6 <__vector_2+0x34>
			uart_send_line("020"); /*Send honk to car*/
    13a0:	8d ec       	ldi	r24, 0xCD	; 205
    13a2:	91 e0       	ldi	r25, 0x01	; 1
    13a4:	02 c0       	rjmp	.+4      	; 0x13aa <__vector_2+0x38>
		} else{
			uart_send_line("32");	/*Send honk to rem2*/
    13a6:	81 ed       	ldi	r24, 0xD1	; 209
    13a8:	91 e0       	ldi	r25, 0x01	; 1
    13aa:	0e 94 1f 0a 	call	0x143e	; 0x143e <uart_send_line>
		}
		honk_debounce_hundreths = DEBOUNCE_VAL;	
    13ae:	84 e1       	ldi	r24, 0x14	; 20
    13b0:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <honk_debounce_hundreths>
	}
}
    13b4:	ff 91       	pop	r31
    13b6:	ef 91       	pop	r30
    13b8:	bf 91       	pop	r27
    13ba:	af 91       	pop	r26
    13bc:	9f 91       	pop	r25
    13be:	8f 91       	pop	r24
    13c0:	7f 91       	pop	r23
    13c2:	6f 91       	pop	r22
    13c4:	5f 91       	pop	r21
    13c6:	4f 91       	pop	r20
    13c8:	3f 91       	pop	r19
    13ca:	2f 91       	pop	r18
    13cc:	0f 90       	pop	r0
    13ce:	0f be       	out	0x3f, r0	; 63
    13d0:	0f 90       	pop	r0
    13d2:	1f 90       	pop	r1
    13d4:	18 95       	reti

000013d6 <led_init>:

void led_init(){
	LED_DDR |= (1<<LEDG)|(1<<LEDR1)|(1<<LEDR2);
    13d6:	8a b1       	in	r24, 0x0a	; 10
    13d8:	80 6e       	ori	r24, 0xE0	; 224
    13da:	8a b9       	out	0x0a, r24	; 10
	LED_PORT &= ~((1<<LEDG)|(1<<LEDR1));
    13dc:	8b b1       	in	r24, 0x0b	; 11
    13de:	8f 79       	andi	r24, 0x9F	; 159
    13e0:	8b b9       	out	0x0b, r24	; 11
	LED_PORT |= 1<<LEDR2;
    13e2:	5f 9a       	sbi	0x0b, 7	; 11
    13e4:	08 95       	ret

000013e6 <main>:
char row_buf[49];


int main(void)
{
	spi_init();
    13e6:	0e 94 b7 0c 	call	0x196e	; 0x196e <spi_init>
    13ea:	2f ef       	ldi	r18, 0xFF	; 255
    13ec:	80 e7       	ldi	r24, 0x70	; 112
    13ee:	92 e0       	ldi	r25, 0x02	; 2
    13f0:	21 50       	subi	r18, 0x01	; 1
    13f2:	80 40       	sbci	r24, 0x00	; 0
    13f4:	90 40       	sbci	r25, 0x00	; 0
    13f6:	e1 f7       	brne	.-8      	; 0x13f0 <main+0xa>
    13f8:	00 c0       	rjmp	.+0      	; 0x13fa <main+0x14>
    13fa:	00 00       	nop
	_delay_ms(100);
	lcd_init();
    13fc:	0e 94 8d 0a 	call	0x151a	; 0x151a <lcd_init>
	fiveinarow_init();
    1400:	0e 94 43 03 	call	0x686	; 0x686 <fiveinarow_init>
	adc_init();
    1404:	0e 94 45 0a 	call	0x148a	; 0x148a <adc_init>
	uart_init();
    1408:	0e 94 3a 0a 	call	0x1474	; 0x1474 <uart_init>
	uart_flush();
    140c:	0e 94 32 0a 	call	0x1464	; 0x1464 <uart_flush>
	led_init();
    1410:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <led_init>
	btn_init();
    1414:	0e 94 45 09 	call	0x128a	; 0x128a <btn_init>
	music_init();
    1418:	0e 94 c4 0b 	call	0x1788	; 0x1788 <music_init>
	timer_init();
    141c:	0e 94 08 07 	call	0xe10	; 0xe10 <timer_init>
	print_lcd_static();
    1420:	0e 94 96 06 	call	0xd2c	; 0xd2c <print_lcd_static>
	sei();
    1424:	78 94       	sei
    while (1) 
    {
		switch(program_mode){
    1426:	80 91 be 02 	lds	r24, 0x02BE	; 0x8002be <program_mode>
    142a:	88 23       	and	r24, r24
    142c:	29 f0       	breq	.+10     	; 0x1438 <main+0x52>
    142e:	81 30       	cpi	r24, 0x01	; 1
    1430:	d1 f7       	brne	.-12     	; 0x1426 <main+0x40>
			case MAIN_MODE:
				do_normal_actions();
				break;
			case FIR_MODE:
				do_fir_actions();
    1432:	0e 94 67 05 	call	0xace	; 0xace <do_fir_actions>
				break;
    1436:	f7 cf       	rjmp	.-18     	; 0x1426 <main+0x40>
	sei();
    while (1) 
    {
		switch(program_mode){
			case MAIN_MODE:
				do_normal_actions();
    1438:	0e 94 3b 08 	call	0x1076	; 0x1076 <do_normal_actions>
				break;
    143c:	f4 cf       	rjmp	.-24     	; 0x1426 <main+0x40>

0000143e <uart_send_line>:

bool uart_receive_byte(uint8_t* buffer){
	if(!( UCSR0A & (1<<RXC0))) return false;
	*buffer = UDR0;
	return true;
}
    143e:	fc 01       	movw	r30, r24
    1440:	91 91       	ld	r25, Z+
    1442:	99 23       	and	r25, r25
    1444:	39 f0       	breq	.+14     	; 0x1454 <uart_send_line+0x16>
    1446:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
    144a:	85 ff       	sbrs	r24, 5
    144c:	fc cf       	rjmp	.-8      	; 0x1446 <uart_send_line+0x8>
    144e:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    1452:	f6 cf       	rjmp	.-20     	; 0x1440 <uart_send_line+0x2>
    1454:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
    1458:	85 ff       	sbrs	r24, 5
    145a:	fc cf       	rjmp	.-8      	; 0x1454 <uart_send_line+0x16>
    145c:	8a e0       	ldi	r24, 0x0A	; 10
    145e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    1462:	08 95       	ret

00001464 <uart_flush>:

void uart_flush(){
	uint8_t dummy;
	while ( UCSR0A & (1<<RXC0) ) dummy = UDR0;
    1464:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
    1468:	87 ff       	sbrs	r24, 7
    146a:	03 c0       	rjmp	.+6      	; 0x1472 <uart_flush+0xe>
    146c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    1470:	f9 cf       	rjmp	.-14     	; 0x1464 <uart_flush>
}
    1472:	08 95       	ret

00001474 <uart_init>:

void uart_init(){
	UBRR0 = 0;		//0==500000 baud rate.  12==38400 baud rate
    1474:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
    1478:	10 92 c4 00 	sts	0x00C4, r1	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UCSR0B = (1<<RXEN0)|(1<<TXEN0)|(1<<RXCIE0);
    147c:	88 e9       	ldi	r24, 0x98	; 152
    147e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	/* Set frame format: 8data, 1stop bit */
	UCSR0C = (0<<USBS0)|(3<<UCSZ00);
    1482:	86 e0       	ldi	r24, 0x06	; 6
    1484:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
    1488:	08 95       	ret

0000148a <adc_init>:

/************************************************************************/
/* Initializes the MCU ADC with 100KHz clock and with ports 0-3 enabled */
/************************************************************************/
void adc_init(){
	DDRC &= ~((1<<1)|(1<<0)|(1<<2));					//Enable input on ADC-ports
    148a:	87 b1       	in	r24, 0x07	; 7
    148c:	88 7f       	andi	r24, 0xF8	; 248
    148e:	87 b9       	out	0x07, r24	; 7
	ADCSRA = (1<<ADEN)|(1<<ADPS1)|(1<<ADPS2);   //ADC-clock F_CPU/64
    1490:	86 e8       	ldi	r24, 0x86	; 134
    1492:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
	DIDR0 = (1<<ADC5D)|(1<<ADC4D)|(1<<ADC3D);	//Disable unused ADC-ports			
    1496:	88 e3       	ldi	r24, 0x38	; 56
    1498:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7f807e>
	ADCSRB = 0;									//No auto trigger
    149c:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
    14a0:	08 95       	ret

000014a2 <read_adc>:
/* the ADC-value from ADCH and ADCL										*/
/* @param port The port to read from (0-3)								*/
/************************************************************************/
uint16_t read_adc(uint8_t port){
	//Choose port and reference voltage
	ADMUX = port|(1<<REFS0);
    14a2:	80 64       	ori	r24, 0x40	; 64
    14a4:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	//Start conversion
	ADCSRA |= 1<<ADSC;
    14a8:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    14ac:	80 64       	ori	r24, 0x40	; 64
    14ae:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
	//Wait for completion and return result
	while( ADCSRA & 1<<ADSC);
    14b2:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    14b6:	86 fd       	sbrc	r24, 6
    14b8:	fc cf       	rjmp	.-8      	; 0x14b2 <read_adc+0x10>
	return ADC;
    14ba:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
    14be:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
    14c2:	08 95       	ret

000014c4 <read_avg_adc>:
/* the average ADC-value from ADCH and ADCL	from the given amount		*/
/* of iterations														*/
/* @param port The port to read from (0-3)								*/
/* @param iterations The amount of iterations to take average from		*/
/************************************************************************/
uint16_t read_avg_adc(uint8_t port, uint16_t iterations){
    14c4:	9b 01       	movw	r18, r22
	//Choose port and reference voltage
	ADMUX = port|(1<<REFS0);
    14c6:	80 64       	ori	r24, 0x40	; 64
    14c8:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	uint32_t sum = 0;
	//Start given amount of conversions and add up results
	for (uint8_t i = 0; i < iterations; i++){
    14cc:	40 e0       	ldi	r20, 0x00	; 0
/* @param iterations The amount of iterations to take average from		*/
/************************************************************************/
uint16_t read_avg_adc(uint8_t port, uint16_t iterations){
	//Choose port and reference voltage
	ADMUX = port|(1<<REFS0);
	uint32_t sum = 0;
    14ce:	60 e0       	ldi	r22, 0x00	; 0
    14d0:	70 e0       	ldi	r23, 0x00	; 0
    14d2:	cb 01       	movw	r24, r22
	//Start given amount of conversions and add up results
	for (uint8_t i = 0; i < iterations; i++){
    14d4:	e4 2f       	mov	r30, r20
    14d6:	f0 e0       	ldi	r31, 0x00	; 0
    14d8:	e2 17       	cp	r30, r18
    14da:	f3 07       	cpc	r31, r19
    14dc:	98 f4       	brcc	.+38     	; 0x1504 <read_avg_adc+0x40>
		ADCSRA |= 1<<ADSC;
    14de:	50 91 7a 00 	lds	r21, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    14e2:	50 64       	ori	r21, 0x40	; 64
    14e4:	50 93 7a 00 	sts	0x007A, r21	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
		while( ADCSRA & 1<<ADSC);
    14e8:	50 91 7a 00 	lds	r21, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    14ec:	56 fd       	sbrc	r21, 6
    14ee:	fc cf       	rjmp	.-8      	; 0x14e8 <read_avg_adc+0x24>
		sum += ADC;
    14f0:	e0 91 78 00 	lds	r30, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
    14f4:	f0 91 79 00 	lds	r31, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
    14f8:	6e 0f       	add	r22, r30
    14fa:	7f 1f       	adc	r23, r31
    14fc:	81 1d       	adc	r24, r1
    14fe:	91 1d       	adc	r25, r1
uint16_t read_avg_adc(uint8_t port, uint16_t iterations){
	//Choose port and reference voltage
	ADMUX = port|(1<<REFS0);
	uint32_t sum = 0;
	//Start given amount of conversions and add up results
	for (uint8_t i = 0; i < iterations; i++){
    1500:	4f 5f       	subi	r20, 0xFF	; 255
    1502:	e8 cf       	rjmp	.-48     	; 0x14d4 <read_avg_adc+0x10>
		ADCSRA |= 1<<ADSC;
		while( ADCSRA & 1<<ADSC);
		sum += ADC;
	}
	//Return truncated average
	return (uint16_t)(sum/iterations);
    1504:	40 e0       	ldi	r20, 0x00	; 0
    1506:	50 e0       	ldi	r21, 0x00	; 0
    1508:	0e 94 4c 10 	call	0x2098	; 0x2098 <__udivmodsi4>
    150c:	c9 01       	movw	r24, r18
    150e:	08 95       	ret

00001510 <spi_tx>:
		spi_tx(rows[i]);
		_delay_us(30);
	}
	PORTB &= ~(1<<RS);
	PORTB |= 1<<CSB;
}
    1510:	8e bd       	out	0x2e, r24	; 46
    1512:	0d b4       	in	r0, 0x2d	; 45
    1514:	07 fe       	sbrs	r0, 7
    1516:	fd cf       	rjmp	.-6      	; 0x1512 <spi_tx+0x2>
    1518:	08 95       	ret

0000151a <lcd_init>:
    151a:	cf 93       	push	r28
    151c:	df 93       	push	r29
    151e:	84 b1       	in	r24, 0x04	; 4
    1520:	85 60       	ori	r24, 0x05	; 5
    1522:	84 b9       	out	0x04, r24	; 4
    1524:	85 b1       	in	r24, 0x05	; 5
    1526:	8a 7f       	andi	r24, 0xFA	; 250
    1528:	85 b9       	out	0x05, r24	; 5
    152a:	cc e1       	ldi	r28, 0x1C	; 28
    152c:	d6 e0       	ldi	r29, 0x06	; 6
    152e:	fe 01       	movw	r30, r28
    1530:	84 91       	lpm	r24, Z
    1532:	0e 94 88 0a 	call	0x1510	; 0x1510 <spi_tx>
    1536:	87 eb       	ldi	r24, 0xB7	; 183
    1538:	9b e0       	ldi	r25, 0x0B	; 11
    153a:	01 97       	sbiw	r24, 0x01	; 1
    153c:	f1 f7       	brne	.-4      	; 0x153a <lcd_init+0x20>
    153e:	00 c0       	rjmp	.+0      	; 0x1540 <lcd_init+0x26>
    1540:	00 00       	nop
    1542:	21 96       	adiw	r28, 0x01	; 1
    1544:	96 e0       	ldi	r25, 0x06	; 6
    1546:	c5 32       	cpi	r28, 0x25	; 37
    1548:	d9 07       	cpc	r29, r25
    154a:	89 f7       	brne	.-30     	; 0x152e <lcd_init+0x14>
    154c:	10 92 ca 02 	sts	0x02CA, r1	; 0x8002ca <cursor_pos>
    1550:	2a 9a       	sbi	0x05, 2	; 5
    1552:	df 91       	pop	r29
    1554:	cf 91       	pop	r28
    1556:	08 95       	ret

00001558 <write_lcd_char>:
    1558:	28 9a       	sbi	0x05, 0	; 5
    155a:	2a 98       	cbi	0x05, 2	; 5
    155c:	0e 94 88 0a 	call	0x1510	; 0x1510 <spi_tx>
    1560:	80 e5       	ldi	r24, 0x50	; 80
    1562:	8a 95       	dec	r24
    1564:	f1 f7       	brne	.-4      	; 0x1562 <write_lcd_char+0xa>
    1566:	28 98       	cbi	0x05, 0	; 5
    1568:	2a 9a       	sbi	0x05, 2	; 5
    156a:	80 91 ca 02 	lds	r24, 0x02CA	; 0x8002ca <cursor_pos>
    156e:	8f 5f       	subi	r24, 0xFF	; 255
    1570:	80 93 ca 02 	sts	0x02CA, r24	; 0x8002ca <cursor_pos>
    1574:	08 95       	ret

00001576 <write_lcd_string>:
    1576:	cf 93       	push	r28
    1578:	df 93       	push	r29
    157a:	28 9a       	sbi	0x05, 0	; 5
    157c:	2a 98       	cbi	0x05, 2	; 5
    157e:	ec 01       	movw	r28, r24
    1580:	89 91       	ld	r24, Y+
    1582:	88 23       	and	r24, r24
    1584:	59 f0       	breq	.+22     	; 0x159c <write_lcd_string+0x26>
    1586:	0e 94 88 0a 	call	0x1510	; 0x1510 <spi_tx>
    158a:	80 e5       	ldi	r24, 0x50	; 80
    158c:	8a 95       	dec	r24
    158e:	f1 f7       	brne	.-4      	; 0x158c <write_lcd_string+0x16>
    1590:	80 91 ca 02 	lds	r24, 0x02CA	; 0x8002ca <cursor_pos>
    1594:	8f 5f       	subi	r24, 0xFF	; 255
    1596:	80 93 ca 02 	sts	0x02CA, r24	; 0x8002ca <cursor_pos>
    159a:	f2 cf       	rjmp	.-28     	; 0x1580 <write_lcd_string+0xa>
    159c:	28 98       	cbi	0x05, 0	; 5
    159e:	2a 9a       	sbi	0x05, 2	; 5
    15a0:	df 91       	pop	r29
    15a2:	cf 91       	pop	r28
    15a4:	08 95       	ret

000015a6 <clear_LCD>:
    15a6:	2a 98       	cbi	0x05, 2	; 5
    15a8:	81 e0       	ldi	r24, 0x01	; 1
    15aa:	0e 94 88 0a 	call	0x1510	; 0x1510 <spi_tx>
    15ae:	87 eb       	ldi	r24, 0xB7	; 183
    15b0:	9b e0       	ldi	r25, 0x0B	; 11
    15b2:	01 97       	sbiw	r24, 0x01	; 1
    15b4:	f1 f7       	brne	.-4      	; 0x15b2 <clear_LCD+0xc>
    15b6:	00 c0       	rjmp	.+0      	; 0x15b8 <clear_LCD+0x12>
    15b8:	00 00       	nop
    15ba:	10 92 ca 02 	sts	0x02CA, r1	; 0x8002ca <cursor_pos>
    15be:	08 95       	ret

000015c0 <set_cursor_pos>:
    15c0:	cf 93       	push	r28
    15c2:	c8 2f       	mov	r28, r24
    15c4:	2a 98       	cbi	0x05, 2	; 5
    15c6:	80 68       	ori	r24, 0x80	; 128
    15c8:	0e 94 88 0a 	call	0x1510	; 0x1510 <spi_tx>
    15cc:	80 e5       	ldi	r24, 0x50	; 80
    15ce:	8a 95       	dec	r24
    15d0:	f1 f7       	brne	.-4      	; 0x15ce <set_cursor_pos+0xe>
    15d2:	c0 93 ca 02 	sts	0x02CA, r28	; 0x8002ca <cursor_pos>
    15d6:	cf 91       	pop	r28
    15d8:	08 95       	ret

000015da <clear_line>:
    15da:	cf 93       	push	r28
    15dc:	82 95       	swap	r24
    15de:	80 7f       	andi	r24, 0xF0	; 240
    15e0:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <set_cursor_pos>
    15e4:	28 9a       	sbi	0x05, 0	; 5
    15e6:	2a 98       	cbi	0x05, 2	; 5
    15e8:	c0 e1       	ldi	r28, 0x10	; 16
    15ea:	80 e2       	ldi	r24, 0x20	; 32
    15ec:	0e 94 88 0a 	call	0x1510	; 0x1510 <spi_tx>
    15f0:	80 e5       	ldi	r24, 0x50	; 80
    15f2:	8a 95       	dec	r24
    15f4:	f1 f7       	brne	.-4      	; 0x15f2 <clear_line+0x18>
    15f6:	80 91 ca 02 	lds	r24, 0x02CA	; 0x8002ca <cursor_pos>
    15fa:	8f 5f       	subi	r24, 0xFF	; 255
    15fc:	80 93 ca 02 	sts	0x02CA, r24	; 0x8002ca <cursor_pos>
    1600:	c1 50       	subi	r28, 0x01	; 1
    1602:	99 f7       	brne	.-26     	; 0x15ea <clear_line+0x10>
    1604:	28 98       	cbi	0x05, 0	; 5
    1606:	2a 9a       	sbi	0x05, 2	; 5
    1608:	cf 91       	pop	r28
    160a:	08 95       	ret

0000160c <set_character_pgm>:
/* Set a given address in CGRAM to a given bitmap stored in pgm_space	*/
/* @param char_code The address or char code in CGRAM to write to		*/
/* @param rows An array of 8 bytes where each bytes b0-b4 is			*/
/*	      a row of the character. Must be stored in program memory		*/
/************************************************************************/
void set_character_pgm(uint8_t char_code, const uint8_t rows[8]){
    160c:	0f 93       	push	r16
    160e:	1f 93       	push	r17
    1610:	cf 93       	push	r28
    1612:	df 93       	push	r29
	PORTB &= ~(1<<CSB);   //Clear CSB
    1614:	2a 98       	cbi	0x05, 2	; 5
    1616:	28 e0       	ldi	r18, 0x08	; 8
    1618:	82 9f       	mul	r24, r18
    161a:	c0 01       	movw	r24, r0
    161c:	11 24       	eor	r1, r1
    161e:	08 2f       	mov	r16, r24
    1620:	00 64       	ori	r16, 0x40	; 64
    1622:	eb 01       	movw	r28, r22
	for (uint8_t i = 0; i < 8; i++){
    1624:	10 e0       	ldi	r17, 0x00	; 0
		//Set CGRAM address
		PORTB &= ~(1<<RS);
    1626:	28 98       	cbi	0x05, 0	; 5
		spi_tx(0x40|(char_code<<3)|(i));
    1628:	80 2f       	mov	r24, r16
    162a:	81 2b       	or	r24, r17
    162c:	0e 94 88 0a 	call	0x1510	; 0x1510 <spi_tx>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1630:	80 e5       	ldi	r24, 0x50	; 80
    1632:	8a 95       	dec	r24
    1634:	f1 f7       	brne	.-4      	; 0x1632 <set_character_pgm+0x26>
		_delay_us(30);
		//Write row to character
		PORTB |= 1<<RS;
    1636:	28 9a       	sbi	0x05, 0	; 5
		spi_tx(pgm_read_byte(&(rows[i])));
    1638:	fe 01       	movw	r30, r28
    163a:	84 91       	lpm	r24, Z
    163c:	0e 94 88 0a 	call	0x1510	; 0x1510 <spi_tx>
    1640:	f0 e5       	ldi	r31, 0x50	; 80
    1642:	fa 95       	dec	r31
    1644:	f1 f7       	brne	.-4      	; 0x1642 <set_character_pgm+0x36>
/* @param rows An array of 8 bytes where each bytes b0-b4 is			*/
/*	      a row of the character. Must be stored in program memory		*/
/************************************************************************/
void set_character_pgm(uint8_t char_code, const uint8_t rows[8]){
	PORTB &= ~(1<<CSB);   //Clear CSB
	for (uint8_t i = 0; i < 8; i++){
    1646:	1f 5f       	subi	r17, 0xFF	; 255
    1648:	21 96       	adiw	r28, 0x01	; 1
    164a:	18 30       	cpi	r17, 0x08	; 8
    164c:	61 f7       	brne	.-40     	; 0x1626 <set_character_pgm+0x1a>
		//Write row to character
		PORTB |= 1<<RS;
		spi_tx(pgm_read_byte(&(rows[i])));
		_delay_us(30);
	}
	PORTB &= ~(1<<RS);
    164e:	28 98       	cbi	0x05, 0	; 5
	PORTB |= 1<<CSB;
    1650:	2a 9a       	sbi	0x05, 2	; 5
}
    1652:	df 91       	pop	r29
    1654:	cf 91       	pop	r28
    1656:	1f 91       	pop	r17
    1658:	0f 91       	pop	r16
    165a:	08 95       	ret

0000165c <messages_timerproc>:
/*bool for tracking if any message is active*/
static volatile bool message_displaying = false;

/*Keeps time running and clears buffer on deactivation of a message*/
void messages_timerproc(){
	if(message_displaying && ++message_parts > 100){
    165c:	80 91 cb 02 	lds	r24, 0x02CB	; 0x8002cb <message_displaying>
    1660:	88 23       	and	r24, r24
    1662:	19 f1       	breq	.+70     	; 0x16aa <messages_timerproc+0x4e>
    1664:	80 91 58 03 	lds	r24, 0x0358	; 0x800358 <message_parts>
    1668:	90 91 59 03 	lds	r25, 0x0359	; 0x800359 <message_parts+0x1>
    166c:	01 96       	adiw	r24, 0x01	; 1
    166e:	90 93 59 03 	sts	0x0359, r25	; 0x800359 <message_parts+0x1>
    1672:	80 93 58 03 	sts	0x0358, r24	; 0x800358 <message_parts>
    1676:	85 36       	cpi	r24, 0x65	; 101
    1678:	91 05       	cpc	r25, r1
    167a:	b8 f0       	brcs	.+46     	; 0x16aa <messages_timerproc+0x4e>
		if(++message_seconds > DISP_TIME){
    167c:	80 91 57 03 	lds	r24, 0x0357	; 0x800357 <message_seconds>
    1680:	8f 5f       	subi	r24, 0xFF	; 255
    1682:	80 93 57 03 	sts	0x0357, r24	; 0x800357 <message_seconds>
    1686:	86 30       	cpi	r24, 0x06	; 6
    1688:	60 f0       	brcs	.+24     	; 0x16a2 <messages_timerproc+0x46>
			message_seconds = 0;
    168a:	10 92 57 03 	sts	0x0357, r1	; 0x800357 <message_seconds>
			message_displaying = false;
    168e:	10 92 cb 02 	sts	0x02CB, r1	; 0x8002cb <message_displaying>
			strcpy((char*)output_buf, "");
    1692:	67 e9       	ldi	r22, 0x97	; 151
    1694:	71 e0       	ldi	r23, 0x01	; 1
    1696:	8a eb       	ldi	r24, 0xBA	; 186
    1698:	93 e0       	ldi	r25, 0x03	; 3
    169a:	0e 94 8d 10 	call	0x211a	; 0x211a <strcpy>
			output_buf_read = false;
    169e:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <output_buf_read>
		}
		message_parts = 0;
    16a2:	10 92 59 03 	sts	0x0359, r1	; 0x800359 <message_parts+0x1>
    16a6:	10 92 58 03 	sts	0x0358, r1	; 0x800358 <message_parts>
    16aa:	08 95       	ret

000016ac <messages_force>:
	}
}

/*Forces a message to be copied into buffer and marks buffer as changed*/
void messages_force(char* msg){
	message_displaying = true;
    16ac:	21 e0       	ldi	r18, 0x01	; 1
    16ae:	20 93 cb 02 	sts	0x02CB, r18	; 0x8002cb <message_displaying>
	/*Reset time counter to display for full time*/
	message_parts = 0;
    16b2:	10 92 59 03 	sts	0x0359, r1	; 0x800359 <message_parts+0x1>
    16b6:	10 92 58 03 	sts	0x0358, r1	; 0x800358 <message_parts>
	message_seconds = 0;
    16ba:	10 92 57 03 	sts	0x0357, r1	; 0x800357 <message_seconds>
	strcpy((char*)output_buf, msg);
    16be:	bc 01       	movw	r22, r24
    16c0:	8a eb       	ldi	r24, 0xBA	; 186
    16c2:	93 e0       	ldi	r25, 0x03	; 3
    16c4:	0e 94 8d 10 	call	0x211a	; 0x211a <strcpy>
	output_buf_read = false;
    16c8:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <output_buf_read>
    16cc:	08 95       	ret

000016ce <messages_queue>:
}

/*Queues a message. Forces front most message out of queue if queue is full*/
void messages_queue(char* msg){
    16ce:	cf 93       	push	r28
    16d0:	df 93       	push	r29
    16d2:	ec 01       	movw	r28, r24
	if(message_count == MSGBUF_SIZE){
    16d4:	80 91 cc 02 	lds	r24, 0x02CC	; 0x8002cc <message_count>
    16d8:	88 30       	cpi	r24, 0x08	; 8
    16da:	81 f4       	brne	.+32     	; 0x16fc <messages_queue+0x2e>
		messages_force((char*)(message_buf)[MOD_BUFSIZE(message_extract_ind++)]);
    16dc:	80 91 cd 02 	lds	r24, 0x02CD	; 0x8002cd <message_extract_ind>
    16e0:	91 e0       	ldi	r25, 0x01	; 1
    16e2:	98 0f       	add	r25, r24
    16e4:	90 93 cd 02 	sts	0x02CD, r25	; 0x8002cd <message_extract_ind>
    16e8:	87 70       	andi	r24, 0x07	; 7
    16ea:	21 e1       	ldi	r18, 0x11	; 17
    16ec:	82 9f       	mul	r24, r18
    16ee:	c0 01       	movw	r24, r0
    16f0:	11 24       	eor	r1, r1
    16f2:	81 53       	subi	r24, 0x31	; 49
    16f4:	9d 4f       	sbci	r25, 0xFD	; 253
    16f6:	0e 94 56 0b 	call	0x16ac	; 0x16ac <messages_force>
    16fa:	0a c0       	rjmp	.+20     	; 0x1710 <messages_queue+0x42>
	} else if(++message_count > MSGBUF_SIZE) message_count = MSGBUF_SIZE;
    16fc:	80 91 cc 02 	lds	r24, 0x02CC	; 0x8002cc <message_count>
    1700:	8f 5f       	subi	r24, 0xFF	; 255
    1702:	80 93 cc 02 	sts	0x02CC, r24	; 0x8002cc <message_count>
    1706:	89 30       	cpi	r24, 0x09	; 9
    1708:	18 f0       	brcs	.+6      	; 0x1710 <messages_queue+0x42>
    170a:	88 e0       	ldi	r24, 0x08	; 8
    170c:	80 93 cc 02 	sts	0x02CC, r24	; 0x8002cc <message_count>
	strcpy((char*)(message_buf)[MOD_BUFSIZE(message_insert_ind++)], msg);
    1710:	80 91 ce 02 	lds	r24, 0x02CE	; 0x8002ce <message_insert_ind>
    1714:	91 e0       	ldi	r25, 0x01	; 1
    1716:	98 0f       	add	r25, r24
    1718:	90 93 ce 02 	sts	0x02CE, r25	; 0x8002ce <message_insert_ind>
    171c:	87 70       	andi	r24, 0x07	; 7
    171e:	21 e1       	ldi	r18, 0x11	; 17
    1720:	82 9f       	mul	r24, r18
    1722:	c0 01       	movw	r24, r0
    1724:	11 24       	eor	r1, r1
    1726:	be 01       	movw	r22, r28
    1728:	81 53       	subi	r24, 0x31	; 49
    172a:	9d 4f       	sbci	r25, 0xFD	; 253
}
    172c:	df 91       	pop	r29
    172e:	cf 91       	pop	r28
/*Queues a message. Forces front most message out of queue if queue is full*/
void messages_queue(char* msg){
	if(message_count == MSGBUF_SIZE){
		messages_force((char*)(message_buf)[MOD_BUFSIZE(message_extract_ind++)]);
	} else if(++message_count > MSGBUF_SIZE) message_count = MSGBUF_SIZE;
	strcpy((char*)(message_buf)[MOD_BUFSIZE(message_insert_ind++)], msg);
    1730:	0c 94 8d 10 	jmp	0x211a	; 0x211a <strcpy>

00001734 <messages_move_queue>:
}

/*Moves queue along if no message is active*/
void messages_move_queue(){
	if(message_count > 0 && !message_displaying){
    1734:	80 91 cc 02 	lds	r24, 0x02CC	; 0x8002cc <message_count>
    1738:	88 23       	and	r24, r24
    173a:	f9 f0       	breq	.+62     	; 0x177a <messages_move_queue+0x46>
    173c:	80 91 cb 02 	lds	r24, 0x02CB	; 0x8002cb <message_displaying>
    1740:	81 11       	cpse	r24, r1
    1742:	1b c0       	rjmp	.+54     	; 0x177a <messages_move_queue+0x46>
		/*Copy next message to output buffer and increment/decremnt index and counter*/
		strcpy((char*)output_buf, (char*)(message_buf)[MOD_BUFSIZE(message_extract_ind++)]);
    1744:	60 91 cd 02 	lds	r22, 0x02CD	; 0x8002cd <message_extract_ind>
    1748:	81 e0       	ldi	r24, 0x01	; 1
    174a:	86 0f       	add	r24, r22
    174c:	80 93 cd 02 	sts	0x02CD, r24	; 0x8002cd <message_extract_ind>
    1750:	67 70       	andi	r22, 0x07	; 7
    1752:	81 e1       	ldi	r24, 0x11	; 17
    1754:	68 9f       	mul	r22, r24
    1756:	b0 01       	movw	r22, r0
    1758:	11 24       	eor	r1, r1
    175a:	61 53       	subi	r22, 0x31	; 49
    175c:	7d 4f       	sbci	r23, 0xFD	; 253
    175e:	8a eb       	ldi	r24, 0xBA	; 186
    1760:	93 e0       	ldi	r25, 0x03	; 3
    1762:	0e 94 8d 10 	call	0x211a	; 0x211a <strcpy>
		output_buf_read = false;
    1766:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <output_buf_read>
		message_displaying = true;
    176a:	81 e0       	ldi	r24, 0x01	; 1
    176c:	80 93 cb 02 	sts	0x02CB, r24	; 0x8002cb <message_displaying>
		message_count--;
    1770:	80 91 cc 02 	lds	r24, 0x02CC	; 0x8002cc <message_count>
    1774:	81 50       	subi	r24, 0x01	; 1
    1776:	80 93 cc 02 	sts	0x02CC, r24	; 0x8002cc <message_count>
    177a:	08 95       	ret

0000177c <messages_get_buffer>:
	}
}

/*Mark buffer as read and return pointer to buffer*/
volatile char* messages_get_buffer(){
	output_buf_read = true;
    177c:	81 e0       	ldi	r24, 0x01	; 1
    177e:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <output_buf_read>
	return output_buf;
    1782:	8a eb       	ldi	r24, 0xBA	; 186
    1784:	93 e0       	ldi	r25, 0x03	; 3
    1786:	08 95       	ret

00001788 <music_init>:
static volatile uint8_t curr_bpm;
static const volatile uint8_t* curr_song = NULL;


void music_init(){
	DDRB |= 1<<PINB1;
    1788:	21 9a       	sbi	0x04, 1	; 4
	TCCR1A = 1<<COM1A0;
    178a:	80 e4       	ldi	r24, 0x40	; 64
    178c:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = 1<<WGM12;
    1790:	88 e0       	ldi	r24, 0x08	; 8
    1792:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    1796:	08 95       	ret

00001798 <music_play_note>:
	curr_bpm = pgm_read_byte(&(curr_song[0]));
	note_ind = 1;
	music_play_note(pgm_read_byte(&(curr_song[note_ind])), curr_bpm);
}

void music_play_note(uint8_t note, uint8_t bpm){
    1798:	cf 92       	push	r12
    179a:	df 92       	push	r13
    179c:	ef 92       	push	r14
    179e:	ff 92       	push	r15
    17a0:	cf 93       	push	r28
    17a2:	df 93       	push	r29
    17a4:	c8 2f       	mov	r28, r24
    17a6:	d6 2f       	mov	r29, r22
	TIMSK1 |= 1<<OCIE1A;
    17a8:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
    17ac:	82 60       	ori	r24, 0x02	; 2
    17ae:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
	TCCR1B |= 1<<CS10;
    17b2:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    17b6:	81 60       	ori	r24, 0x01	; 1
    17b8:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	if(GET_PITCH_EXP(note) == -1){  // Stop buzzer if note is a rest
    17bc:	6c 2f       	mov	r22, r28
    17be:	70 e0       	ldi	r23, 0x00	; 0
    17c0:	6f 71       	andi	r22, 0x1F	; 31
		TCCR1A &= ~(1<<COM1A0);
    17c2:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
}

void music_play_note(uint8_t note, uint8_t bpm){
	TIMSK1 |= 1<<OCIE1A;
	TCCR1B |= 1<<CS10;
	if(GET_PITCH_EXP(note) == -1){  // Stop buzzer if note is a rest
    17c6:	61 15       	cp	r22, r1
    17c8:	71 05       	cpc	r23, r1
    17ca:	21 f4       	brne	.+8      	; 0x17d4 <music_play_note+0x3c>
		TCCR1A &= ~(1<<COM1A0);
    17cc:	8f 7b       	andi	r24, 0xBF	; 191
    17ce:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    17d2:	21 c0       	rjmp	.+66     	; 0x1816 <music_play_note+0x7e>
	} else{                         // Start buzzer and set correct frequency
		TCCR1A |= 1<<COM1A0;
    17d4:	80 64       	ori	r24, 0x40	; 64
    17d6:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
		OCR1A = LOWC_OCR / pow(ROOT12_2,GET_PITCH_EXP(note));
    17da:	61 50       	subi	r22, 0x01	; 1
    17dc:	71 09       	sbc	r23, r1
    17de:	07 2e       	mov	r0, r23
    17e0:	00 0c       	add	r0, r0
    17e2:	88 0b       	sbc	r24, r24
    17e4:	99 0b       	sbc	r25, r25
    17e6:	0e 94 61 0d 	call	0x1ac2	; 0x1ac2 <__floatsisf>
    17ea:	9b 01       	movw	r18, r22
    17ec:	ac 01       	movw	r20, r24
    17ee:	6d e7       	ldi	r22, 0x7D	; 125
    17f0:	7c e9       	ldi	r23, 0x9C	; 156
    17f2:	87 e8       	ldi	r24, 0x87	; 135
    17f4:	9f e3       	ldi	r25, 0x3F	; 63
    17f6:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <pow>
    17fa:	9b 01       	movw	r18, r22
    17fc:	ac 01       	movw	r20, r24
    17fe:	60 e0       	ldi	r22, 0x00	; 0
    1800:	70 e6       	ldi	r23, 0x60	; 96
    1802:	80 e7       	ldi	r24, 0x70	; 112
    1804:	96 e4       	ldi	r25, 0x46	; 70
    1806:	0e 94 be 0c 	call	0x197c	; 0x197c <__divsf3>
    180a:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <__fixunssfsi>
    180e:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    1812:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	}
	// cycles needed = frequency / (bar time) / (note length divisor)
	curr_note_time = ((F_CPU/(OCR1A + 1))/(bpm/(240.0)))/GET_DURATION_DIV(note);
    1816:	20 91 88 00 	lds	r18, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
    181a:	30 91 89 00 	lds	r19, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    181e:	2f 5f       	subi	r18, 0xFF	; 255
    1820:	3f 4f       	sbci	r19, 0xFF	; 255
    1822:	40 e0       	ldi	r20, 0x00	; 0
    1824:	50 e0       	ldi	r21, 0x00	; 0
    1826:	60 e0       	ldi	r22, 0x00	; 0
    1828:	72 e1       	ldi	r23, 0x12	; 18
    182a:	8a e7       	ldi	r24, 0x7A	; 122
    182c:	90 e0       	ldi	r25, 0x00	; 0
    182e:	0e 94 6e 10 	call	0x20dc	; 0x20dc <__divmodsi4>
    1832:	ca 01       	movw	r24, r20
    1834:	b9 01       	movw	r22, r18
    1836:	0e 94 61 0d 	call	0x1ac2	; 0x1ac2 <__floatsisf>
    183a:	6b 01       	movw	r12, r22
    183c:	7c 01       	movw	r14, r24
    183e:	6d 2f       	mov	r22, r29
    1840:	70 e0       	ldi	r23, 0x00	; 0
    1842:	80 e0       	ldi	r24, 0x00	; 0
    1844:	90 e0       	ldi	r25, 0x00	; 0
    1846:	0e 94 61 0d 	call	0x1ac2	; 0x1ac2 <__floatsisf>
    184a:	20 e0       	ldi	r18, 0x00	; 0
    184c:	30 e0       	ldi	r19, 0x00	; 0
    184e:	40 e7       	ldi	r20, 0x70	; 112
    1850:	53 e4       	ldi	r21, 0x43	; 67
    1852:	0e 94 be 0c 	call	0x197c	; 0x197c <__divsf3>
    1856:	9b 01       	movw	r18, r22
    1858:	ac 01       	movw	r20, r24
    185a:	c7 01       	movw	r24, r14
    185c:	b6 01       	movw	r22, r12
    185e:	0e 94 be 0c 	call	0x197c	; 0x197c <__divsf3>
    1862:	6b 01       	movw	r12, r22
    1864:	7c 01       	movw	r14, r24
    1866:	c2 95       	swap	r28
    1868:	c6 95       	lsr	r28
    186a:	c7 70       	andi	r28, 0x07	; 7
    186c:	61 e0       	ldi	r22, 0x01	; 1
    186e:	70 e0       	ldi	r23, 0x00	; 0
    1870:	02 c0       	rjmp	.+4      	; 0x1876 <music_play_note+0xde>
    1872:	66 0f       	add	r22, r22
    1874:	77 1f       	adc	r23, r23
    1876:	ca 95       	dec	r28
    1878:	e2 f7       	brpl	.-8      	; 0x1872 <music_play_note+0xda>
    187a:	07 2e       	mov	r0, r23
    187c:	00 0c       	add	r0, r0
    187e:	88 0b       	sbc	r24, r24
    1880:	99 0b       	sbc	r25, r25
    1882:	0e 94 61 0d 	call	0x1ac2	; 0x1ac2 <__floatsisf>
    1886:	9b 01       	movw	r18, r22
    1888:	ac 01       	movw	r20, r24
    188a:	c7 01       	movw	r24, r14
    188c:	b6 01       	movw	r22, r12
    188e:	0e 94 be 0c 	call	0x197c	; 0x197c <__divsf3>
    1892:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <__fixunssfsi>
    1896:	70 93 5f 03 	sts	0x035F, r23	; 0x80035f <curr_note_time+0x1>
    189a:	60 93 5e 03 	sts	0x035E, r22	; 0x80035e <curr_note_time>
}
    189e:	df 91       	pop	r29
    18a0:	cf 91       	pop	r28
    18a2:	ff 90       	pop	r15
    18a4:	ef 90       	pop	r14
    18a6:	df 90       	pop	r13
    18a8:	cf 90       	pop	r12
    18aa:	08 95       	ret

000018ac <music_play_song_pgm>:
	TCCR1A = 1<<COM1A0;
	TCCR1B = 1<<WGM12;
}

void music_play_song_pgm(const uint8_t* song){
	curr_song = song;
    18ac:	90 93 5b 03 	sts	0x035B, r25	; 0x80035b <curr_song+0x1>
    18b0:	80 93 5a 03 	sts	0x035A, r24	; 0x80035a <curr_song>
	curr_bpm = pgm_read_byte(&(curr_song[0]));
    18b4:	fc 01       	movw	r30, r24
    18b6:	24 91       	lpm	r18, Z
    18b8:	20 93 5c 03 	sts	0x035C, r18	; 0x80035c <curr_bpm>
	note_ind = 1;
    18bc:	21 e0       	ldi	r18, 0x01	; 1
    18be:	20 93 5d 03 	sts	0x035D, r18	; 0x80035d <note_ind>
	music_play_note(pgm_read_byte(&(curr_song[note_ind])), curr_bpm);
    18c2:	60 91 5c 03 	lds	r22, 0x035C	; 0x80035c <curr_bpm>
    18c6:	20 91 5d 03 	lds	r18, 0x035D	; 0x80035d <note_ind>
    18ca:	e2 0f       	add	r30, r18
    18cc:	f1 1d       	adc	r31, r1
    18ce:	84 91       	lpm	r24, Z
    18d0:	0c 94 cc 0b 	jmp	0x1798	; 0x1798 <music_play_note>

000018d4 <__vector_11>:
	}
	// cycles needed = frequency / (bar time) / (note length divisor)
	curr_note_time = ((F_CPU/(OCR1A + 1))/(bpm/(240.0)))/GET_DURATION_DIV(note);
}

ISR(TIMER1_COMPA_vect){
    18d4:	1f 92       	push	r1
    18d6:	0f 92       	push	r0
    18d8:	0f b6       	in	r0, 0x3f	; 63
    18da:	0f 92       	push	r0
    18dc:	11 24       	eor	r1, r1
    18de:	2f 93       	push	r18
    18e0:	3f 93       	push	r19
    18e2:	4f 93       	push	r20
    18e4:	5f 93       	push	r21
    18e6:	6f 93       	push	r22
    18e8:	7f 93       	push	r23
    18ea:	8f 93       	push	r24
    18ec:	9f 93       	push	r25
    18ee:	af 93       	push	r26
    18f0:	bf 93       	push	r27
    18f2:	ef 93       	push	r30
    18f4:	ff 93       	push	r31
	if(--curr_note_time == 0){
    18f6:	80 91 5e 03 	lds	r24, 0x035E	; 0x80035e <curr_note_time>
    18fa:	90 91 5f 03 	lds	r25, 0x035F	; 0x80035f <curr_note_time+0x1>
    18fe:	01 97       	sbiw	r24, 0x01	; 1
    1900:	90 93 5f 03 	sts	0x035F, r25	; 0x80035f <curr_note_time+0x1>
    1904:	80 93 5e 03 	sts	0x035E, r24	; 0x80035e <curr_note_time>
    1908:	89 2b       	or	r24, r25
    190a:	01 f5       	brne	.+64     	; 0x194c <__vector_11+0x78>
		uint8_t note;
		/*Read next note*/
		if(curr_song != NULL && (note = pgm_read_byte(&(curr_song[++note_ind]))) != 0){
    190c:	e0 91 5a 03 	lds	r30, 0x035A	; 0x80035a <curr_song>
    1910:	f0 91 5b 03 	lds	r31, 0x035B	; 0x80035b <curr_song+0x1>
    1914:	30 97       	sbiw	r30, 0x00	; 0
    1916:	79 f0       	breq	.+30     	; 0x1936 <__vector_11+0x62>
    1918:	80 91 5d 03 	lds	r24, 0x035D	; 0x80035d <note_ind>
    191c:	8f 5f       	subi	r24, 0xFF	; 255
    191e:	80 93 5d 03 	sts	0x035D, r24	; 0x80035d <note_ind>
    1922:	e8 0f       	add	r30, r24
    1924:	f1 1d       	adc	r31, r1
    1926:	84 91       	lpm	r24, Z
    1928:	88 23       	and	r24, r24
    192a:	29 f0       	breq	.+10     	; 0x1936 <__vector_11+0x62>
			music_play_note(note, curr_bpm);
    192c:	60 91 5c 03 	lds	r22, 0x035C	; 0x80035c <curr_bpm>
    1930:	0e 94 cc 0b 	call	0x1798	; 0x1798 <music_play_note>
    1934:	0b c0       	rjmp	.+22     	; 0x194c <__vector_11+0x78>
			} else{
			TIMSK1 = 0;
    1936:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
			TCCR1B &= ~(1<<CS10);
    193a:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    193e:	8e 7f       	andi	r24, 0xFE	; 254
    1940:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
			curr_song = NULL;
    1944:	10 92 5b 03 	sts	0x035B, r1	; 0x80035b <curr_song+0x1>
    1948:	10 92 5a 03 	sts	0x035A, r1	; 0x80035a <curr_song>
		}
	}
    194c:	ff 91       	pop	r31
    194e:	ef 91       	pop	r30
    1950:	bf 91       	pop	r27
    1952:	af 91       	pop	r26
    1954:	9f 91       	pop	r25
    1956:	8f 91       	pop	r24
    1958:	7f 91       	pop	r23
    195a:	6f 91       	pop	r22
    195c:	5f 91       	pop	r21
    195e:	4f 91       	pop	r20
    1960:	3f 91       	pop	r19
    1962:	2f 91       	pop	r18
    1964:	0f 90       	pop	r0
    1966:	0f be       	out	0x3f, r0	; 63
    1968:	0f 90       	pop	r0
    196a:	1f 90       	pop	r1
    196c:	18 95       	reti

0000196e <spi_init>:
/************************************************************************/
/* Initiates the MCU SPI as master with 16 as prescaler factor           */
/************************************************************************/
void spi_init(){
	// Set MOSI and SCK as out
	DDRB |= (1<<MOSI) | (1<<SCK) | (1<<SS);
    196e:	84 b1       	in	r24, 0x04	; 4
    1970:	8c 62       	ori	r24, 0x2C	; 44
    1972:	84 b9       	out	0x04, r24	; 4
	DDRB &= ~(1<<MISO);
    1974:	24 98       	cbi	0x04, 4	; 4
	//Enable SPI in master mode with fck/4 as clock
	SPCR = (1<<SPE) | (1<<MSTR);
    1976:	80 e5       	ldi	r24, 0x50	; 80
    1978:	8c bd       	out	0x2c, r24	; 44
    197a:	08 95       	ret

0000197c <__divsf3>:
    197c:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <__divsf3x>
    1980:	0c 94 b3 0d 	jmp	0x1b66	; 0x1b66 <__fp_round>
    1984:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <__fp_pscB>
    1988:	58 f0       	brcs	.+22     	; 0x19a0 <__divsf3+0x24>
    198a:	0e 94 a5 0d 	call	0x1b4a	; 0x1b4a <__fp_pscA>
    198e:	40 f0       	brcs	.+16     	; 0x19a0 <__divsf3+0x24>
    1990:	29 f4       	brne	.+10     	; 0x199c <__divsf3+0x20>
    1992:	5f 3f       	cpi	r21, 0xFF	; 255
    1994:	29 f0       	breq	.+10     	; 0x19a0 <__divsf3+0x24>
    1996:	0c 94 9c 0d 	jmp	0x1b38	; 0x1b38 <__fp_inf>
    199a:	51 11       	cpse	r21, r1
    199c:	0c 94 e7 0d 	jmp	0x1bce	; 0x1bce <__fp_szero>
    19a0:	0c 94 a2 0d 	jmp	0x1b44	; 0x1b44 <__fp_nan>

000019a4 <__divsf3x>:
    19a4:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <__fp_split3>
    19a8:	68 f3       	brcs	.-38     	; 0x1984 <__divsf3+0x8>

000019aa <__divsf3_pse>:
    19aa:	99 23       	and	r25, r25
    19ac:	b1 f3       	breq	.-20     	; 0x199a <__divsf3+0x1e>
    19ae:	55 23       	and	r21, r21
    19b0:	91 f3       	breq	.-28     	; 0x1996 <__divsf3+0x1a>
    19b2:	95 1b       	sub	r25, r21
    19b4:	55 0b       	sbc	r21, r21
    19b6:	bb 27       	eor	r27, r27
    19b8:	aa 27       	eor	r26, r26
    19ba:	62 17       	cp	r22, r18
    19bc:	73 07       	cpc	r23, r19
    19be:	84 07       	cpc	r24, r20
    19c0:	38 f0       	brcs	.+14     	; 0x19d0 <__divsf3_pse+0x26>
    19c2:	9f 5f       	subi	r25, 0xFF	; 255
    19c4:	5f 4f       	sbci	r21, 0xFF	; 255
    19c6:	22 0f       	add	r18, r18
    19c8:	33 1f       	adc	r19, r19
    19ca:	44 1f       	adc	r20, r20
    19cc:	aa 1f       	adc	r26, r26
    19ce:	a9 f3       	breq	.-22     	; 0x19ba <__divsf3_pse+0x10>
    19d0:	35 d0       	rcall	.+106    	; 0x1a3c <__divsf3_pse+0x92>
    19d2:	0e 2e       	mov	r0, r30
    19d4:	3a f0       	brmi	.+14     	; 0x19e4 <__divsf3_pse+0x3a>
    19d6:	e0 e8       	ldi	r30, 0x80	; 128
    19d8:	32 d0       	rcall	.+100    	; 0x1a3e <__divsf3_pse+0x94>
    19da:	91 50       	subi	r25, 0x01	; 1
    19dc:	50 40       	sbci	r21, 0x00	; 0
    19de:	e6 95       	lsr	r30
    19e0:	00 1c       	adc	r0, r0
    19e2:	ca f7       	brpl	.-14     	; 0x19d6 <__divsf3_pse+0x2c>
    19e4:	2b d0       	rcall	.+86     	; 0x1a3c <__divsf3_pse+0x92>
    19e6:	fe 2f       	mov	r31, r30
    19e8:	29 d0       	rcall	.+82     	; 0x1a3c <__divsf3_pse+0x92>
    19ea:	66 0f       	add	r22, r22
    19ec:	77 1f       	adc	r23, r23
    19ee:	88 1f       	adc	r24, r24
    19f0:	bb 1f       	adc	r27, r27
    19f2:	26 17       	cp	r18, r22
    19f4:	37 07       	cpc	r19, r23
    19f6:	48 07       	cpc	r20, r24
    19f8:	ab 07       	cpc	r26, r27
    19fa:	b0 e8       	ldi	r27, 0x80	; 128
    19fc:	09 f0       	breq	.+2      	; 0x1a00 <__divsf3_pse+0x56>
    19fe:	bb 0b       	sbc	r27, r27
    1a00:	80 2d       	mov	r24, r0
    1a02:	bf 01       	movw	r22, r30
    1a04:	ff 27       	eor	r31, r31
    1a06:	93 58       	subi	r25, 0x83	; 131
    1a08:	5f 4f       	sbci	r21, 0xFF	; 255
    1a0a:	3a f0       	brmi	.+14     	; 0x1a1a <__divsf3_pse+0x70>
    1a0c:	9e 3f       	cpi	r25, 0xFE	; 254
    1a0e:	51 05       	cpc	r21, r1
    1a10:	78 f0       	brcs	.+30     	; 0x1a30 <__divsf3_pse+0x86>
    1a12:	0c 94 9c 0d 	jmp	0x1b38	; 0x1b38 <__fp_inf>
    1a16:	0c 94 e7 0d 	jmp	0x1bce	; 0x1bce <__fp_szero>
    1a1a:	5f 3f       	cpi	r21, 0xFF	; 255
    1a1c:	e4 f3       	brlt	.-8      	; 0x1a16 <__divsf3_pse+0x6c>
    1a1e:	98 3e       	cpi	r25, 0xE8	; 232
    1a20:	d4 f3       	brlt	.-12     	; 0x1a16 <__divsf3_pse+0x6c>
    1a22:	86 95       	lsr	r24
    1a24:	77 95       	ror	r23
    1a26:	67 95       	ror	r22
    1a28:	b7 95       	ror	r27
    1a2a:	f7 95       	ror	r31
    1a2c:	9f 5f       	subi	r25, 0xFF	; 255
    1a2e:	c9 f7       	brne	.-14     	; 0x1a22 <__divsf3_pse+0x78>
    1a30:	88 0f       	add	r24, r24
    1a32:	91 1d       	adc	r25, r1
    1a34:	96 95       	lsr	r25
    1a36:	87 95       	ror	r24
    1a38:	97 f9       	bld	r25, 7
    1a3a:	08 95       	ret
    1a3c:	e1 e0       	ldi	r30, 0x01	; 1
    1a3e:	66 0f       	add	r22, r22
    1a40:	77 1f       	adc	r23, r23
    1a42:	88 1f       	adc	r24, r24
    1a44:	bb 1f       	adc	r27, r27
    1a46:	62 17       	cp	r22, r18
    1a48:	73 07       	cpc	r23, r19
    1a4a:	84 07       	cpc	r24, r20
    1a4c:	ba 07       	cpc	r27, r26
    1a4e:	20 f0       	brcs	.+8      	; 0x1a58 <__divsf3_pse+0xae>
    1a50:	62 1b       	sub	r22, r18
    1a52:	73 0b       	sbc	r23, r19
    1a54:	84 0b       	sbc	r24, r20
    1a56:	ba 0b       	sbc	r27, r26
    1a58:	ee 1f       	adc	r30, r30
    1a5a:	88 f7       	brcc	.-30     	; 0x1a3e <__divsf3_pse+0x94>
    1a5c:	e0 95       	com	r30
    1a5e:	08 95       	ret

00001a60 <__fixunssfsi>:
    1a60:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <__fp_splitA>
    1a64:	88 f0       	brcs	.+34     	; 0x1a88 <__fixunssfsi+0x28>
    1a66:	9f 57       	subi	r25, 0x7F	; 127
    1a68:	98 f0       	brcs	.+38     	; 0x1a90 <__fixunssfsi+0x30>
    1a6a:	b9 2f       	mov	r27, r25
    1a6c:	99 27       	eor	r25, r25
    1a6e:	b7 51       	subi	r27, 0x17	; 23
    1a70:	b0 f0       	brcs	.+44     	; 0x1a9e <__fixunssfsi+0x3e>
    1a72:	e1 f0       	breq	.+56     	; 0x1aac <__fixunssfsi+0x4c>
    1a74:	66 0f       	add	r22, r22
    1a76:	77 1f       	adc	r23, r23
    1a78:	88 1f       	adc	r24, r24
    1a7a:	99 1f       	adc	r25, r25
    1a7c:	1a f0       	brmi	.+6      	; 0x1a84 <__fixunssfsi+0x24>
    1a7e:	ba 95       	dec	r27
    1a80:	c9 f7       	brne	.-14     	; 0x1a74 <__fixunssfsi+0x14>
    1a82:	14 c0       	rjmp	.+40     	; 0x1aac <__fixunssfsi+0x4c>
    1a84:	b1 30       	cpi	r27, 0x01	; 1
    1a86:	91 f0       	breq	.+36     	; 0x1aac <__fixunssfsi+0x4c>
    1a88:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <__fp_zero>
    1a8c:	b1 e0       	ldi	r27, 0x01	; 1
    1a8e:	08 95       	ret
    1a90:	0c 94 e6 0d 	jmp	0x1bcc	; 0x1bcc <__fp_zero>
    1a94:	67 2f       	mov	r22, r23
    1a96:	78 2f       	mov	r23, r24
    1a98:	88 27       	eor	r24, r24
    1a9a:	b8 5f       	subi	r27, 0xF8	; 248
    1a9c:	39 f0       	breq	.+14     	; 0x1aac <__fixunssfsi+0x4c>
    1a9e:	b9 3f       	cpi	r27, 0xF9	; 249
    1aa0:	cc f3       	brlt	.-14     	; 0x1a94 <__fixunssfsi+0x34>
    1aa2:	86 95       	lsr	r24
    1aa4:	77 95       	ror	r23
    1aa6:	67 95       	ror	r22
    1aa8:	b3 95       	inc	r27
    1aaa:	d9 f7       	brne	.-10     	; 0x1aa2 <__fixunssfsi+0x42>
    1aac:	3e f4       	brtc	.+14     	; 0x1abc <__fixunssfsi+0x5c>
    1aae:	90 95       	com	r25
    1ab0:	80 95       	com	r24
    1ab2:	70 95       	com	r23
    1ab4:	61 95       	neg	r22
    1ab6:	7f 4f       	sbci	r23, 0xFF	; 255
    1ab8:	8f 4f       	sbci	r24, 0xFF	; 255
    1aba:	9f 4f       	sbci	r25, 0xFF	; 255
    1abc:	08 95       	ret

00001abe <__floatunsisf>:
    1abe:	e8 94       	clt
    1ac0:	09 c0       	rjmp	.+18     	; 0x1ad4 <__floatsisf+0x12>

00001ac2 <__floatsisf>:
    1ac2:	97 fb       	bst	r25, 7
    1ac4:	3e f4       	brtc	.+14     	; 0x1ad4 <__floatsisf+0x12>
    1ac6:	90 95       	com	r25
    1ac8:	80 95       	com	r24
    1aca:	70 95       	com	r23
    1acc:	61 95       	neg	r22
    1ace:	7f 4f       	sbci	r23, 0xFF	; 255
    1ad0:	8f 4f       	sbci	r24, 0xFF	; 255
    1ad2:	9f 4f       	sbci	r25, 0xFF	; 255
    1ad4:	99 23       	and	r25, r25
    1ad6:	a9 f0       	breq	.+42     	; 0x1b02 <__floatsisf+0x40>
    1ad8:	f9 2f       	mov	r31, r25
    1ada:	96 e9       	ldi	r25, 0x96	; 150
    1adc:	bb 27       	eor	r27, r27
    1ade:	93 95       	inc	r25
    1ae0:	f6 95       	lsr	r31
    1ae2:	87 95       	ror	r24
    1ae4:	77 95       	ror	r23
    1ae6:	67 95       	ror	r22
    1ae8:	b7 95       	ror	r27
    1aea:	f1 11       	cpse	r31, r1
    1aec:	f8 cf       	rjmp	.-16     	; 0x1ade <__floatsisf+0x1c>
    1aee:	fa f4       	brpl	.+62     	; 0x1b2e <__floatsisf+0x6c>
    1af0:	bb 0f       	add	r27, r27
    1af2:	11 f4       	brne	.+4      	; 0x1af8 <__floatsisf+0x36>
    1af4:	60 ff       	sbrs	r22, 0
    1af6:	1b c0       	rjmp	.+54     	; 0x1b2e <__floatsisf+0x6c>
    1af8:	6f 5f       	subi	r22, 0xFF	; 255
    1afa:	7f 4f       	sbci	r23, 0xFF	; 255
    1afc:	8f 4f       	sbci	r24, 0xFF	; 255
    1afe:	9f 4f       	sbci	r25, 0xFF	; 255
    1b00:	16 c0       	rjmp	.+44     	; 0x1b2e <__floatsisf+0x6c>
    1b02:	88 23       	and	r24, r24
    1b04:	11 f0       	breq	.+4      	; 0x1b0a <__floatsisf+0x48>
    1b06:	96 e9       	ldi	r25, 0x96	; 150
    1b08:	11 c0       	rjmp	.+34     	; 0x1b2c <__floatsisf+0x6a>
    1b0a:	77 23       	and	r23, r23
    1b0c:	21 f0       	breq	.+8      	; 0x1b16 <__floatsisf+0x54>
    1b0e:	9e e8       	ldi	r25, 0x8E	; 142
    1b10:	87 2f       	mov	r24, r23
    1b12:	76 2f       	mov	r23, r22
    1b14:	05 c0       	rjmp	.+10     	; 0x1b20 <__floatsisf+0x5e>
    1b16:	66 23       	and	r22, r22
    1b18:	71 f0       	breq	.+28     	; 0x1b36 <__floatsisf+0x74>
    1b1a:	96 e8       	ldi	r25, 0x86	; 134
    1b1c:	86 2f       	mov	r24, r22
    1b1e:	70 e0       	ldi	r23, 0x00	; 0
    1b20:	60 e0       	ldi	r22, 0x00	; 0
    1b22:	2a f0       	brmi	.+10     	; 0x1b2e <__floatsisf+0x6c>
    1b24:	9a 95       	dec	r25
    1b26:	66 0f       	add	r22, r22
    1b28:	77 1f       	adc	r23, r23
    1b2a:	88 1f       	adc	r24, r24
    1b2c:	da f7       	brpl	.-10     	; 0x1b24 <__floatsisf+0x62>
    1b2e:	88 0f       	add	r24, r24
    1b30:	96 95       	lsr	r25
    1b32:	87 95       	ror	r24
    1b34:	97 f9       	bld	r25, 7
    1b36:	08 95       	ret

00001b38 <__fp_inf>:
    1b38:	97 f9       	bld	r25, 7
    1b3a:	9f 67       	ori	r25, 0x7F	; 127
    1b3c:	80 e8       	ldi	r24, 0x80	; 128
    1b3e:	70 e0       	ldi	r23, 0x00	; 0
    1b40:	60 e0       	ldi	r22, 0x00	; 0
    1b42:	08 95       	ret

00001b44 <__fp_nan>:
    1b44:	9f ef       	ldi	r25, 0xFF	; 255
    1b46:	80 ec       	ldi	r24, 0xC0	; 192
    1b48:	08 95       	ret

00001b4a <__fp_pscA>:
    1b4a:	00 24       	eor	r0, r0
    1b4c:	0a 94       	dec	r0
    1b4e:	16 16       	cp	r1, r22
    1b50:	17 06       	cpc	r1, r23
    1b52:	18 06       	cpc	r1, r24
    1b54:	09 06       	cpc	r0, r25
    1b56:	08 95       	ret

00001b58 <__fp_pscB>:
    1b58:	00 24       	eor	r0, r0
    1b5a:	0a 94       	dec	r0
    1b5c:	12 16       	cp	r1, r18
    1b5e:	13 06       	cpc	r1, r19
    1b60:	14 06       	cpc	r1, r20
    1b62:	05 06       	cpc	r0, r21
    1b64:	08 95       	ret

00001b66 <__fp_round>:
    1b66:	09 2e       	mov	r0, r25
    1b68:	03 94       	inc	r0
    1b6a:	00 0c       	add	r0, r0
    1b6c:	11 f4       	brne	.+4      	; 0x1b72 <__fp_round+0xc>
    1b6e:	88 23       	and	r24, r24
    1b70:	52 f0       	brmi	.+20     	; 0x1b86 <__fp_round+0x20>
    1b72:	bb 0f       	add	r27, r27
    1b74:	40 f4       	brcc	.+16     	; 0x1b86 <__fp_round+0x20>
    1b76:	bf 2b       	or	r27, r31
    1b78:	11 f4       	brne	.+4      	; 0x1b7e <__fp_round+0x18>
    1b7a:	60 ff       	sbrs	r22, 0
    1b7c:	04 c0       	rjmp	.+8      	; 0x1b86 <__fp_round+0x20>
    1b7e:	6f 5f       	subi	r22, 0xFF	; 255
    1b80:	7f 4f       	sbci	r23, 0xFF	; 255
    1b82:	8f 4f       	sbci	r24, 0xFF	; 255
    1b84:	9f 4f       	sbci	r25, 0xFF	; 255
    1b86:	08 95       	ret

00001b88 <__fp_split3>:
    1b88:	57 fd       	sbrc	r21, 7
    1b8a:	90 58       	subi	r25, 0x80	; 128
    1b8c:	44 0f       	add	r20, r20
    1b8e:	55 1f       	adc	r21, r21
    1b90:	59 f0       	breq	.+22     	; 0x1ba8 <__fp_splitA+0x10>
    1b92:	5f 3f       	cpi	r21, 0xFF	; 255
    1b94:	71 f0       	breq	.+28     	; 0x1bb2 <__fp_splitA+0x1a>
    1b96:	47 95       	ror	r20

00001b98 <__fp_splitA>:
    1b98:	88 0f       	add	r24, r24
    1b9a:	97 fb       	bst	r25, 7
    1b9c:	99 1f       	adc	r25, r25
    1b9e:	61 f0       	breq	.+24     	; 0x1bb8 <__fp_splitA+0x20>
    1ba0:	9f 3f       	cpi	r25, 0xFF	; 255
    1ba2:	79 f0       	breq	.+30     	; 0x1bc2 <__fp_splitA+0x2a>
    1ba4:	87 95       	ror	r24
    1ba6:	08 95       	ret
    1ba8:	12 16       	cp	r1, r18
    1baa:	13 06       	cpc	r1, r19
    1bac:	14 06       	cpc	r1, r20
    1bae:	55 1f       	adc	r21, r21
    1bb0:	f2 cf       	rjmp	.-28     	; 0x1b96 <__fp_split3+0xe>
    1bb2:	46 95       	lsr	r20
    1bb4:	f1 df       	rcall	.-30     	; 0x1b98 <__fp_splitA>
    1bb6:	08 c0       	rjmp	.+16     	; 0x1bc8 <__fp_splitA+0x30>
    1bb8:	16 16       	cp	r1, r22
    1bba:	17 06       	cpc	r1, r23
    1bbc:	18 06       	cpc	r1, r24
    1bbe:	99 1f       	adc	r25, r25
    1bc0:	f1 cf       	rjmp	.-30     	; 0x1ba4 <__fp_splitA+0xc>
    1bc2:	86 95       	lsr	r24
    1bc4:	71 05       	cpc	r23, r1
    1bc6:	61 05       	cpc	r22, r1
    1bc8:	08 94       	sec
    1bca:	08 95       	ret

00001bcc <__fp_zero>:
    1bcc:	e8 94       	clt

00001bce <__fp_szero>:
    1bce:	bb 27       	eor	r27, r27
    1bd0:	66 27       	eor	r22, r22
    1bd2:	77 27       	eor	r23, r23
    1bd4:	cb 01       	movw	r24, r22
    1bd6:	97 f9       	bld	r25, 7
    1bd8:	08 95       	ret

00001bda <pow>:
    1bda:	fa 01       	movw	r30, r20
    1bdc:	ee 0f       	add	r30, r30
    1bde:	ff 1f       	adc	r31, r31
    1be0:	30 96       	adiw	r30, 0x00	; 0
    1be2:	21 05       	cpc	r18, r1
    1be4:	31 05       	cpc	r19, r1
    1be6:	a1 f1       	breq	.+104    	; 0x1c50 <pow+0x76>
    1be8:	61 15       	cp	r22, r1
    1bea:	71 05       	cpc	r23, r1
    1bec:	61 f4       	brne	.+24     	; 0x1c06 <pow+0x2c>
    1bee:	80 38       	cpi	r24, 0x80	; 128
    1bf0:	bf e3       	ldi	r27, 0x3F	; 63
    1bf2:	9b 07       	cpc	r25, r27
    1bf4:	49 f1       	breq	.+82     	; 0x1c48 <pow+0x6e>
    1bf6:	68 94       	set
    1bf8:	90 38       	cpi	r25, 0x80	; 128
    1bfa:	81 05       	cpc	r24, r1
    1bfc:	61 f0       	breq	.+24     	; 0x1c16 <pow+0x3c>
    1bfe:	80 38       	cpi	r24, 0x80	; 128
    1c00:	bf ef       	ldi	r27, 0xFF	; 255
    1c02:	9b 07       	cpc	r25, r27
    1c04:	41 f0       	breq	.+16     	; 0x1c16 <pow+0x3c>
    1c06:	99 23       	and	r25, r25
    1c08:	4a f5       	brpl	.+82     	; 0x1c5c <pow+0x82>
    1c0a:	ff 3f       	cpi	r31, 0xFF	; 255
    1c0c:	e1 05       	cpc	r30, r1
    1c0e:	31 05       	cpc	r19, r1
    1c10:	21 05       	cpc	r18, r1
    1c12:	19 f1       	breq	.+70     	; 0x1c5a <pow+0x80>
    1c14:	e8 94       	clt
    1c16:	08 94       	sec
    1c18:	e7 95       	ror	r30
    1c1a:	d9 01       	movw	r26, r18
    1c1c:	aa 23       	and	r26, r26
    1c1e:	29 f4       	brne	.+10     	; 0x1c2a <pow+0x50>
    1c20:	ab 2f       	mov	r26, r27
    1c22:	be 2f       	mov	r27, r30
    1c24:	f8 5f       	subi	r31, 0xF8	; 248
    1c26:	d0 f3       	brcs	.-12     	; 0x1c1c <pow+0x42>
    1c28:	10 c0       	rjmp	.+32     	; 0x1c4a <pow+0x70>
    1c2a:	ff 5f       	subi	r31, 0xFF	; 255
    1c2c:	70 f4       	brcc	.+28     	; 0x1c4a <pow+0x70>
    1c2e:	a6 95       	lsr	r26
    1c30:	e0 f7       	brcc	.-8      	; 0x1c2a <pow+0x50>
    1c32:	f7 39       	cpi	r31, 0x97	; 151
    1c34:	50 f0       	brcs	.+20     	; 0x1c4a <pow+0x70>
    1c36:	19 f0       	breq	.+6      	; 0x1c3e <pow+0x64>
    1c38:	ff 3a       	cpi	r31, 0xAF	; 175
    1c3a:	38 f4       	brcc	.+14     	; 0x1c4a <pow+0x70>
    1c3c:	9f 77       	andi	r25, 0x7F	; 127
    1c3e:	9f 93       	push	r25
    1c40:	0d d0       	rcall	.+26     	; 0x1c5c <pow+0x82>
    1c42:	0f 90       	pop	r0
    1c44:	07 fc       	sbrc	r0, 7
    1c46:	90 58       	subi	r25, 0x80	; 128
    1c48:	08 95       	ret
    1c4a:	46 f0       	brts	.+16     	; 0x1c5c <pow+0x82>
    1c4c:	0c 94 a2 0d 	jmp	0x1b44	; 0x1b44 <__fp_nan>
    1c50:	60 e0       	ldi	r22, 0x00	; 0
    1c52:	70 e0       	ldi	r23, 0x00	; 0
    1c54:	80 e8       	ldi	r24, 0x80	; 128
    1c56:	9f e3       	ldi	r25, 0x3F	; 63
    1c58:	08 95       	ret
    1c5a:	4f e7       	ldi	r20, 0x7F	; 127
    1c5c:	9f 77       	andi	r25, 0x7F	; 127
    1c5e:	5f 93       	push	r21
    1c60:	4f 93       	push	r20
    1c62:	3f 93       	push	r19
    1c64:	2f 93       	push	r18
    1c66:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <log>
    1c6a:	2f 91       	pop	r18
    1c6c:	3f 91       	pop	r19
    1c6e:	4f 91       	pop	r20
    1c70:	5f 91       	pop	r21
    1c72:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <__mulsf3>
    1c76:	0c 94 45 0e 	jmp	0x1c8a	; 0x1c8a <exp>
    1c7a:	29 f4       	brne	.+10     	; 0x1c86 <pow+0xac>
    1c7c:	16 f0       	brts	.+4      	; 0x1c82 <pow+0xa8>
    1c7e:	0c 94 9c 0d 	jmp	0x1b38	; 0x1b38 <__fp_inf>
    1c82:	0c 94 e6 0d 	jmp	0x1bcc	; 0x1bcc <__fp_zero>
    1c86:	0c 94 a2 0d 	jmp	0x1b44	; 0x1b44 <__fp_nan>

00001c8a <exp>:
    1c8a:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <__fp_splitA>
    1c8e:	a8 f3       	brcs	.-22     	; 0x1c7a <pow+0xa0>
    1c90:	96 38       	cpi	r25, 0x86	; 134
    1c92:	a0 f7       	brcc	.-24     	; 0x1c7c <pow+0xa2>
    1c94:	07 f8       	bld	r0, 7
    1c96:	0f 92       	push	r0
    1c98:	e8 94       	clt
    1c9a:	2b e3       	ldi	r18, 0x3B	; 59
    1c9c:	3a ea       	ldi	r19, 0xAA	; 170
    1c9e:	48 eb       	ldi	r20, 0xB8	; 184
    1ca0:	5f e7       	ldi	r21, 0x7F	; 127
    1ca2:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <__mulsf3_pse>
    1ca6:	0f 92       	push	r0
    1ca8:	0f 92       	push	r0
    1caa:	0f 92       	push	r0
    1cac:	4d b7       	in	r20, 0x3d	; 61
    1cae:	5e b7       	in	r21, 0x3e	; 62
    1cb0:	0f 92       	push	r0
    1cb2:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <modf>
    1cb6:	e8 e6       	ldi	r30, 0x68	; 104
    1cb8:	f0 e0       	ldi	r31, 0x00	; 0
    1cba:	0e 94 77 0e 	call	0x1cee	; 0x1cee <__fp_powser>
    1cbe:	4f 91       	pop	r20
    1cc0:	5f 91       	pop	r21
    1cc2:	ef 91       	pop	r30
    1cc4:	ff 91       	pop	r31
    1cc6:	e5 95       	asr	r30
    1cc8:	ee 1f       	adc	r30, r30
    1cca:	ff 1f       	adc	r31, r31
    1ccc:	49 f0       	breq	.+18     	; 0x1ce0 <exp+0x56>
    1cce:	fe 57       	subi	r31, 0x7E	; 126
    1cd0:	e0 68       	ori	r30, 0x80	; 128
    1cd2:	44 27       	eor	r20, r20
    1cd4:	ee 0f       	add	r30, r30
    1cd6:	44 1f       	adc	r20, r20
    1cd8:	fa 95       	dec	r31
    1cda:	e1 f7       	brne	.-8      	; 0x1cd4 <exp+0x4a>
    1cdc:	41 95       	neg	r20
    1cde:	55 0b       	sbc	r21, r21
    1ce0:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <ldexp>
    1ce4:	0f 90       	pop	r0
    1ce6:	07 fe       	sbrs	r0, 7
    1ce8:	0c 94 9e 0e 	jmp	0x1d3c	; 0x1d3c <inverse>
    1cec:	08 95       	ret

00001cee <__fp_powser>:
    1cee:	df 93       	push	r29
    1cf0:	cf 93       	push	r28
    1cf2:	1f 93       	push	r17
    1cf4:	0f 93       	push	r16
    1cf6:	ff 92       	push	r15
    1cf8:	ef 92       	push	r14
    1cfa:	df 92       	push	r13
    1cfc:	7b 01       	movw	r14, r22
    1cfe:	8c 01       	movw	r16, r24
    1d00:	68 94       	set
    1d02:	06 c0       	rjmp	.+12     	; 0x1d10 <__fp_powser+0x22>
    1d04:	da 2e       	mov	r13, r26
    1d06:	ef 01       	movw	r28, r30
    1d08:	0e 94 77 0f 	call	0x1eee	; 0x1eee <__mulsf3x>
    1d0c:	fe 01       	movw	r30, r28
    1d0e:	e8 94       	clt
    1d10:	a5 91       	lpm	r26, Z+
    1d12:	25 91       	lpm	r18, Z+
    1d14:	35 91       	lpm	r19, Z+
    1d16:	45 91       	lpm	r20, Z+
    1d18:	55 91       	lpm	r21, Z+
    1d1a:	a6 f3       	brts	.-24     	; 0x1d04 <__fp_powser+0x16>
    1d1c:	ef 01       	movw	r28, r30
    1d1e:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <__addsf3x>
    1d22:	fe 01       	movw	r30, r28
    1d24:	97 01       	movw	r18, r14
    1d26:	a8 01       	movw	r20, r16
    1d28:	da 94       	dec	r13
    1d2a:	69 f7       	brne	.-38     	; 0x1d06 <__fp_powser+0x18>
    1d2c:	df 90       	pop	r13
    1d2e:	ef 90       	pop	r14
    1d30:	ff 90       	pop	r15
    1d32:	0f 91       	pop	r16
    1d34:	1f 91       	pop	r17
    1d36:	cf 91       	pop	r28
    1d38:	df 91       	pop	r29
    1d3a:	08 95       	ret

00001d3c <inverse>:
    1d3c:	9b 01       	movw	r18, r22
    1d3e:	ac 01       	movw	r20, r24
    1d40:	60 e0       	ldi	r22, 0x00	; 0
    1d42:	70 e0       	ldi	r23, 0x00	; 0
    1d44:	80 e8       	ldi	r24, 0x80	; 128
    1d46:	9f e3       	ldi	r25, 0x3F	; 63
    1d48:	0c 94 be 0c 	jmp	0x197c	; 0x197c <__divsf3>
    1d4c:	0c 94 9c 0d 	jmp	0x1b38	; 0x1b38 <__fp_inf>
    1d50:	0c 94 3e 10 	jmp	0x207c	; 0x207c <__fp_mpack>

00001d54 <ldexp>:
    1d54:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <__fp_splitA>
    1d58:	d8 f3       	brcs	.-10     	; 0x1d50 <inverse+0x14>
    1d5a:	99 23       	and	r25, r25
    1d5c:	c9 f3       	breq	.-14     	; 0x1d50 <inverse+0x14>
    1d5e:	94 0f       	add	r25, r20
    1d60:	51 1d       	adc	r21, r1
    1d62:	a3 f3       	brvs	.-24     	; 0x1d4c <inverse+0x10>
    1d64:	91 50       	subi	r25, 0x01	; 1
    1d66:	50 40       	sbci	r21, 0x00	; 0
    1d68:	94 f0       	brlt	.+36     	; 0x1d8e <ldexp+0x3a>
    1d6a:	59 f0       	breq	.+22     	; 0x1d82 <ldexp+0x2e>
    1d6c:	88 23       	and	r24, r24
    1d6e:	32 f0       	brmi	.+12     	; 0x1d7c <ldexp+0x28>
    1d70:	66 0f       	add	r22, r22
    1d72:	77 1f       	adc	r23, r23
    1d74:	88 1f       	adc	r24, r24
    1d76:	91 50       	subi	r25, 0x01	; 1
    1d78:	50 40       	sbci	r21, 0x00	; 0
    1d7a:	c1 f7       	brne	.-16     	; 0x1d6c <ldexp+0x18>
    1d7c:	9e 3f       	cpi	r25, 0xFE	; 254
    1d7e:	51 05       	cpc	r21, r1
    1d80:	2c f7       	brge	.-54     	; 0x1d4c <inverse+0x10>
    1d82:	88 0f       	add	r24, r24
    1d84:	91 1d       	adc	r25, r1
    1d86:	96 95       	lsr	r25
    1d88:	87 95       	ror	r24
    1d8a:	97 f9       	bld	r25, 7
    1d8c:	08 95       	ret
    1d8e:	5f 3f       	cpi	r21, 0xFF	; 255
    1d90:	ac f0       	brlt	.+42     	; 0x1dbc <ldexp+0x68>
    1d92:	98 3e       	cpi	r25, 0xE8	; 232
    1d94:	9c f0       	brlt	.+38     	; 0x1dbc <ldexp+0x68>
    1d96:	bb 27       	eor	r27, r27
    1d98:	86 95       	lsr	r24
    1d9a:	77 95       	ror	r23
    1d9c:	67 95       	ror	r22
    1d9e:	b7 95       	ror	r27
    1da0:	08 f4       	brcc	.+2      	; 0x1da4 <ldexp+0x50>
    1da2:	b1 60       	ori	r27, 0x01	; 1
    1da4:	93 95       	inc	r25
    1da6:	c1 f7       	brne	.-16     	; 0x1d98 <ldexp+0x44>
    1da8:	bb 0f       	add	r27, r27
    1daa:	58 f7       	brcc	.-42     	; 0x1d82 <ldexp+0x2e>
    1dac:	11 f4       	brne	.+4      	; 0x1db2 <ldexp+0x5e>
    1dae:	60 ff       	sbrs	r22, 0
    1db0:	e8 cf       	rjmp	.-48     	; 0x1d82 <ldexp+0x2e>
    1db2:	6f 5f       	subi	r22, 0xFF	; 255
    1db4:	7f 4f       	sbci	r23, 0xFF	; 255
    1db6:	8f 4f       	sbci	r24, 0xFF	; 255
    1db8:	9f 4f       	sbci	r25, 0xFF	; 255
    1dba:	e3 cf       	rjmp	.-58     	; 0x1d82 <ldexp+0x2e>
    1dbc:	0c 94 e7 0d 	jmp	0x1bce	; 0x1bce <__fp_szero>
    1dc0:	16 f0       	brts	.+4      	; 0x1dc6 <ldexp+0x72>
    1dc2:	0c 94 3e 10 	jmp	0x207c	; 0x207c <__fp_mpack>
    1dc6:	0c 94 a2 0d 	jmp	0x1b44	; 0x1b44 <__fp_nan>
    1dca:	68 94       	set
    1dcc:	0c 94 9c 0d 	jmp	0x1b38	; 0x1b38 <__fp_inf>

00001dd0 <log>:
    1dd0:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <__fp_splitA>
    1dd4:	a8 f3       	brcs	.-22     	; 0x1dc0 <ldexp+0x6c>
    1dd6:	99 23       	and	r25, r25
    1dd8:	c1 f3       	breq	.-16     	; 0x1dca <ldexp+0x76>
    1dda:	ae f3       	brts	.-22     	; 0x1dc6 <ldexp+0x72>
    1ddc:	df 93       	push	r29
    1dde:	cf 93       	push	r28
    1de0:	1f 93       	push	r17
    1de2:	0f 93       	push	r16
    1de4:	ff 92       	push	r15
    1de6:	c9 2f       	mov	r28, r25
    1de8:	dd 27       	eor	r29, r29
    1dea:	88 23       	and	r24, r24
    1dec:	2a f0       	brmi	.+10     	; 0x1df8 <log+0x28>
    1dee:	21 97       	sbiw	r28, 0x01	; 1
    1df0:	66 0f       	add	r22, r22
    1df2:	77 1f       	adc	r23, r23
    1df4:	88 1f       	adc	r24, r24
    1df6:	da f7       	brpl	.-10     	; 0x1dee <log+0x1e>
    1df8:	20 e0       	ldi	r18, 0x00	; 0
    1dfa:	30 e0       	ldi	r19, 0x00	; 0
    1dfc:	40 e8       	ldi	r20, 0x80	; 128
    1dfe:	5f eb       	ldi	r21, 0xBF	; 191
    1e00:	9f e3       	ldi	r25, 0x3F	; 63
    1e02:	88 39       	cpi	r24, 0x98	; 152
    1e04:	20 f0       	brcs	.+8      	; 0x1e0e <log+0x3e>
    1e06:	80 3e       	cpi	r24, 0xE0	; 224
    1e08:	38 f0       	brcs	.+14     	; 0x1e18 <log+0x48>
    1e0a:	21 96       	adiw	r28, 0x01	; 1
    1e0c:	8f 77       	andi	r24, 0x7F	; 127
    1e0e:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <__addsf3>
    1e12:	e0 e9       	ldi	r30, 0x90	; 144
    1e14:	f0 e0       	ldi	r31, 0x00	; 0
    1e16:	04 c0       	rjmp	.+8      	; 0x1e20 <log+0x50>
    1e18:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <__addsf3>
    1e1c:	ed eb       	ldi	r30, 0xBD	; 189
    1e1e:	f0 e0       	ldi	r31, 0x00	; 0
    1e20:	0e 94 77 0e 	call	0x1cee	; 0x1cee <__fp_powser>
    1e24:	8b 01       	movw	r16, r22
    1e26:	be 01       	movw	r22, r28
    1e28:	ec 01       	movw	r28, r24
    1e2a:	fb 2e       	mov	r15, r27
    1e2c:	6f 57       	subi	r22, 0x7F	; 127
    1e2e:	71 09       	sbc	r23, r1
    1e30:	75 95       	asr	r23
    1e32:	77 1f       	adc	r23, r23
    1e34:	88 0b       	sbc	r24, r24
    1e36:	99 0b       	sbc	r25, r25
    1e38:	0e 94 61 0d 	call	0x1ac2	; 0x1ac2 <__floatsisf>
    1e3c:	28 e1       	ldi	r18, 0x18	; 24
    1e3e:	32 e7       	ldi	r19, 0x72	; 114
    1e40:	41 e3       	ldi	r20, 0x31	; 49
    1e42:	5f e3       	ldi	r21, 0x3F	; 63
    1e44:	0e 94 77 0f 	call	0x1eee	; 0x1eee <__mulsf3x>
    1e48:	af 2d       	mov	r26, r15
    1e4a:	98 01       	movw	r18, r16
    1e4c:	ae 01       	movw	r20, r28
    1e4e:	ff 90       	pop	r15
    1e50:	0f 91       	pop	r16
    1e52:	1f 91       	pop	r17
    1e54:	cf 91       	pop	r28
    1e56:	df 91       	pop	r29
    1e58:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <__addsf3x>
    1e5c:	0c 94 b3 0d 	jmp	0x1b66	; 0x1b66 <__fp_round>

00001e60 <modf>:
    1e60:	fa 01       	movw	r30, r20
    1e62:	dc 01       	movw	r26, r24
    1e64:	aa 0f       	add	r26, r26
    1e66:	bb 1f       	adc	r27, r27
    1e68:	9b 01       	movw	r18, r22
    1e6a:	ac 01       	movw	r20, r24
    1e6c:	bf 57       	subi	r27, 0x7F	; 127
    1e6e:	28 f4       	brcc	.+10     	; 0x1e7a <modf+0x1a>
    1e70:	22 27       	eor	r18, r18
    1e72:	33 27       	eor	r19, r19
    1e74:	44 27       	eor	r20, r20
    1e76:	50 78       	andi	r21, 0x80	; 128
    1e78:	20 c0       	rjmp	.+64     	; 0x1eba <modf+0x5a>
    1e7a:	b7 51       	subi	r27, 0x17	; 23
    1e7c:	90 f4       	brcc	.+36     	; 0x1ea2 <modf+0x42>
    1e7e:	ab 2f       	mov	r26, r27
    1e80:	00 24       	eor	r0, r0
    1e82:	46 95       	lsr	r20
    1e84:	37 95       	ror	r19
    1e86:	27 95       	ror	r18
    1e88:	01 1c       	adc	r0, r1
    1e8a:	a3 95       	inc	r26
    1e8c:	d2 f3       	brmi	.-12     	; 0x1e82 <modf+0x22>
    1e8e:	00 20       	and	r0, r0
    1e90:	71 f0       	breq	.+28     	; 0x1eae <modf+0x4e>
    1e92:	22 0f       	add	r18, r18
    1e94:	33 1f       	adc	r19, r19
    1e96:	44 1f       	adc	r20, r20
    1e98:	b3 95       	inc	r27
    1e9a:	da f3       	brmi	.-10     	; 0x1e92 <modf+0x32>
    1e9c:	0e d0       	rcall	.+28     	; 0x1eba <modf+0x5a>
    1e9e:	0c 94 d1 0f 	jmp	0x1fa2	; 0x1fa2 <__subsf3>
    1ea2:	61 30       	cpi	r22, 0x01	; 1
    1ea4:	71 05       	cpc	r23, r1
    1ea6:	a0 e8       	ldi	r26, 0x80	; 128
    1ea8:	8a 07       	cpc	r24, r26
    1eaa:	b9 46       	sbci	r27, 0x69	; 105
    1eac:	30 f4       	brcc	.+12     	; 0x1eba <modf+0x5a>
    1eae:	9b 01       	movw	r18, r22
    1eb0:	ac 01       	movw	r20, r24
    1eb2:	66 27       	eor	r22, r22
    1eb4:	77 27       	eor	r23, r23
    1eb6:	88 27       	eor	r24, r24
    1eb8:	90 78       	andi	r25, 0x80	; 128
    1eba:	30 96       	adiw	r30, 0x00	; 0
    1ebc:	21 f0       	breq	.+8      	; 0x1ec6 <modf+0x66>
    1ebe:	20 83       	st	Z, r18
    1ec0:	31 83       	std	Z+1, r19	; 0x01
    1ec2:	42 83       	std	Z+2, r20	; 0x02
    1ec4:	53 83       	std	Z+3, r21	; 0x03
    1ec6:	08 95       	ret

00001ec8 <__mulsf3>:
    1ec8:	0e 94 77 0f 	call	0x1eee	; 0x1eee <__mulsf3x>
    1ecc:	0c 94 b3 0d 	jmp	0x1b66	; 0x1b66 <__fp_round>
    1ed0:	0e 94 a5 0d 	call	0x1b4a	; 0x1b4a <__fp_pscA>
    1ed4:	38 f0       	brcs	.+14     	; 0x1ee4 <__mulsf3+0x1c>
    1ed6:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <__fp_pscB>
    1eda:	20 f0       	brcs	.+8      	; 0x1ee4 <__mulsf3+0x1c>
    1edc:	95 23       	and	r25, r21
    1ede:	11 f0       	breq	.+4      	; 0x1ee4 <__mulsf3+0x1c>
    1ee0:	0c 94 9c 0d 	jmp	0x1b38	; 0x1b38 <__fp_inf>
    1ee4:	0c 94 a2 0d 	jmp	0x1b44	; 0x1b44 <__fp_nan>
    1ee8:	11 24       	eor	r1, r1
    1eea:	0c 94 e7 0d 	jmp	0x1bce	; 0x1bce <__fp_szero>

00001eee <__mulsf3x>:
    1eee:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <__fp_split3>
    1ef2:	70 f3       	brcs	.-36     	; 0x1ed0 <__mulsf3+0x8>

00001ef4 <__mulsf3_pse>:
    1ef4:	95 9f       	mul	r25, r21
    1ef6:	c1 f3       	breq	.-16     	; 0x1ee8 <__mulsf3+0x20>
    1ef8:	95 0f       	add	r25, r21
    1efa:	50 e0       	ldi	r21, 0x00	; 0
    1efc:	55 1f       	adc	r21, r21
    1efe:	62 9f       	mul	r22, r18
    1f00:	f0 01       	movw	r30, r0
    1f02:	72 9f       	mul	r23, r18
    1f04:	bb 27       	eor	r27, r27
    1f06:	f0 0d       	add	r31, r0
    1f08:	b1 1d       	adc	r27, r1
    1f0a:	63 9f       	mul	r22, r19
    1f0c:	aa 27       	eor	r26, r26
    1f0e:	f0 0d       	add	r31, r0
    1f10:	b1 1d       	adc	r27, r1
    1f12:	aa 1f       	adc	r26, r26
    1f14:	64 9f       	mul	r22, r20
    1f16:	66 27       	eor	r22, r22
    1f18:	b0 0d       	add	r27, r0
    1f1a:	a1 1d       	adc	r26, r1
    1f1c:	66 1f       	adc	r22, r22
    1f1e:	82 9f       	mul	r24, r18
    1f20:	22 27       	eor	r18, r18
    1f22:	b0 0d       	add	r27, r0
    1f24:	a1 1d       	adc	r26, r1
    1f26:	62 1f       	adc	r22, r18
    1f28:	73 9f       	mul	r23, r19
    1f2a:	b0 0d       	add	r27, r0
    1f2c:	a1 1d       	adc	r26, r1
    1f2e:	62 1f       	adc	r22, r18
    1f30:	83 9f       	mul	r24, r19
    1f32:	a0 0d       	add	r26, r0
    1f34:	61 1d       	adc	r22, r1
    1f36:	22 1f       	adc	r18, r18
    1f38:	74 9f       	mul	r23, r20
    1f3a:	33 27       	eor	r19, r19
    1f3c:	a0 0d       	add	r26, r0
    1f3e:	61 1d       	adc	r22, r1
    1f40:	23 1f       	adc	r18, r19
    1f42:	84 9f       	mul	r24, r20
    1f44:	60 0d       	add	r22, r0
    1f46:	21 1d       	adc	r18, r1
    1f48:	82 2f       	mov	r24, r18
    1f4a:	76 2f       	mov	r23, r22
    1f4c:	6a 2f       	mov	r22, r26
    1f4e:	11 24       	eor	r1, r1
    1f50:	9f 57       	subi	r25, 0x7F	; 127
    1f52:	50 40       	sbci	r21, 0x00	; 0
    1f54:	9a f0       	brmi	.+38     	; 0x1f7c <__mulsf3_pse+0x88>
    1f56:	f1 f0       	breq	.+60     	; 0x1f94 <__mulsf3_pse+0xa0>
    1f58:	88 23       	and	r24, r24
    1f5a:	4a f0       	brmi	.+18     	; 0x1f6e <__mulsf3_pse+0x7a>
    1f5c:	ee 0f       	add	r30, r30
    1f5e:	ff 1f       	adc	r31, r31
    1f60:	bb 1f       	adc	r27, r27
    1f62:	66 1f       	adc	r22, r22
    1f64:	77 1f       	adc	r23, r23
    1f66:	88 1f       	adc	r24, r24
    1f68:	91 50       	subi	r25, 0x01	; 1
    1f6a:	50 40       	sbci	r21, 0x00	; 0
    1f6c:	a9 f7       	brne	.-22     	; 0x1f58 <__mulsf3_pse+0x64>
    1f6e:	9e 3f       	cpi	r25, 0xFE	; 254
    1f70:	51 05       	cpc	r21, r1
    1f72:	80 f0       	brcs	.+32     	; 0x1f94 <__mulsf3_pse+0xa0>
    1f74:	0c 94 9c 0d 	jmp	0x1b38	; 0x1b38 <__fp_inf>
    1f78:	0c 94 e7 0d 	jmp	0x1bce	; 0x1bce <__fp_szero>
    1f7c:	5f 3f       	cpi	r21, 0xFF	; 255
    1f7e:	e4 f3       	brlt	.-8      	; 0x1f78 <__mulsf3_pse+0x84>
    1f80:	98 3e       	cpi	r25, 0xE8	; 232
    1f82:	d4 f3       	brlt	.-12     	; 0x1f78 <__mulsf3_pse+0x84>
    1f84:	86 95       	lsr	r24
    1f86:	77 95       	ror	r23
    1f88:	67 95       	ror	r22
    1f8a:	b7 95       	ror	r27
    1f8c:	f7 95       	ror	r31
    1f8e:	e7 95       	ror	r30
    1f90:	9f 5f       	subi	r25, 0xFF	; 255
    1f92:	c1 f7       	brne	.-16     	; 0x1f84 <__mulsf3_pse+0x90>
    1f94:	fe 2b       	or	r31, r30
    1f96:	88 0f       	add	r24, r24
    1f98:	91 1d       	adc	r25, r1
    1f9a:	96 95       	lsr	r25
    1f9c:	87 95       	ror	r24
    1f9e:	97 f9       	bld	r25, 7
    1fa0:	08 95       	ret

00001fa2 <__subsf3>:
    1fa2:	50 58       	subi	r21, 0x80	; 128

00001fa4 <__addsf3>:
    1fa4:	bb 27       	eor	r27, r27
    1fa6:	aa 27       	eor	r26, r26
    1fa8:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <__addsf3x>
    1fac:	0c 94 b3 0d 	jmp	0x1b66	; 0x1b66 <__fp_round>
    1fb0:	0e 94 a5 0d 	call	0x1b4a	; 0x1b4a <__fp_pscA>
    1fb4:	38 f0       	brcs	.+14     	; 0x1fc4 <__addsf3+0x20>
    1fb6:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <__fp_pscB>
    1fba:	20 f0       	brcs	.+8      	; 0x1fc4 <__addsf3+0x20>
    1fbc:	39 f4       	brne	.+14     	; 0x1fcc <__addsf3+0x28>
    1fbe:	9f 3f       	cpi	r25, 0xFF	; 255
    1fc0:	19 f4       	brne	.+6      	; 0x1fc8 <__addsf3+0x24>
    1fc2:	26 f4       	brtc	.+8      	; 0x1fcc <__addsf3+0x28>
    1fc4:	0c 94 a2 0d 	jmp	0x1b44	; 0x1b44 <__fp_nan>
    1fc8:	0e f4       	brtc	.+2      	; 0x1fcc <__addsf3+0x28>
    1fca:	e0 95       	com	r30
    1fcc:	e7 fb       	bst	r30, 7
    1fce:	0c 94 9c 0d 	jmp	0x1b38	; 0x1b38 <__fp_inf>

00001fd2 <__addsf3x>:
    1fd2:	e9 2f       	mov	r30, r25
    1fd4:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <__fp_split3>
    1fd8:	58 f3       	brcs	.-42     	; 0x1fb0 <__addsf3+0xc>
    1fda:	ba 17       	cp	r27, r26
    1fdc:	62 07       	cpc	r22, r18
    1fde:	73 07       	cpc	r23, r19
    1fe0:	84 07       	cpc	r24, r20
    1fe2:	95 07       	cpc	r25, r21
    1fe4:	20 f0       	brcs	.+8      	; 0x1fee <__addsf3x+0x1c>
    1fe6:	79 f4       	brne	.+30     	; 0x2006 <__addsf3x+0x34>
    1fe8:	a6 f5       	brtc	.+104    	; 0x2052 <__addsf3x+0x80>
    1fea:	0c 94 e6 0d 	jmp	0x1bcc	; 0x1bcc <__fp_zero>
    1fee:	0e f4       	brtc	.+2      	; 0x1ff2 <__addsf3x+0x20>
    1ff0:	e0 95       	com	r30
    1ff2:	0b 2e       	mov	r0, r27
    1ff4:	ba 2f       	mov	r27, r26
    1ff6:	a0 2d       	mov	r26, r0
    1ff8:	0b 01       	movw	r0, r22
    1ffa:	b9 01       	movw	r22, r18
    1ffc:	90 01       	movw	r18, r0
    1ffe:	0c 01       	movw	r0, r24
    2000:	ca 01       	movw	r24, r20
    2002:	a0 01       	movw	r20, r0
    2004:	11 24       	eor	r1, r1
    2006:	ff 27       	eor	r31, r31
    2008:	59 1b       	sub	r21, r25
    200a:	99 f0       	breq	.+38     	; 0x2032 <__addsf3x+0x60>
    200c:	59 3f       	cpi	r21, 0xF9	; 249
    200e:	50 f4       	brcc	.+20     	; 0x2024 <__addsf3x+0x52>
    2010:	50 3e       	cpi	r21, 0xE0	; 224
    2012:	68 f1       	brcs	.+90     	; 0x206e <__addsf3x+0x9c>
    2014:	1a 16       	cp	r1, r26
    2016:	f0 40       	sbci	r31, 0x00	; 0
    2018:	a2 2f       	mov	r26, r18
    201a:	23 2f       	mov	r18, r19
    201c:	34 2f       	mov	r19, r20
    201e:	44 27       	eor	r20, r20
    2020:	58 5f       	subi	r21, 0xF8	; 248
    2022:	f3 cf       	rjmp	.-26     	; 0x200a <__addsf3x+0x38>
    2024:	46 95       	lsr	r20
    2026:	37 95       	ror	r19
    2028:	27 95       	ror	r18
    202a:	a7 95       	ror	r26
    202c:	f0 40       	sbci	r31, 0x00	; 0
    202e:	53 95       	inc	r21
    2030:	c9 f7       	brne	.-14     	; 0x2024 <__addsf3x+0x52>
    2032:	7e f4       	brtc	.+30     	; 0x2052 <__addsf3x+0x80>
    2034:	1f 16       	cp	r1, r31
    2036:	ba 0b       	sbc	r27, r26
    2038:	62 0b       	sbc	r22, r18
    203a:	73 0b       	sbc	r23, r19
    203c:	84 0b       	sbc	r24, r20
    203e:	ba f0       	brmi	.+46     	; 0x206e <__addsf3x+0x9c>
    2040:	91 50       	subi	r25, 0x01	; 1
    2042:	a1 f0       	breq	.+40     	; 0x206c <__addsf3x+0x9a>
    2044:	ff 0f       	add	r31, r31
    2046:	bb 1f       	adc	r27, r27
    2048:	66 1f       	adc	r22, r22
    204a:	77 1f       	adc	r23, r23
    204c:	88 1f       	adc	r24, r24
    204e:	c2 f7       	brpl	.-16     	; 0x2040 <__addsf3x+0x6e>
    2050:	0e c0       	rjmp	.+28     	; 0x206e <__addsf3x+0x9c>
    2052:	ba 0f       	add	r27, r26
    2054:	62 1f       	adc	r22, r18
    2056:	73 1f       	adc	r23, r19
    2058:	84 1f       	adc	r24, r20
    205a:	48 f4       	brcc	.+18     	; 0x206e <__addsf3x+0x9c>
    205c:	87 95       	ror	r24
    205e:	77 95       	ror	r23
    2060:	67 95       	ror	r22
    2062:	b7 95       	ror	r27
    2064:	f7 95       	ror	r31
    2066:	9e 3f       	cpi	r25, 0xFE	; 254
    2068:	08 f0       	brcs	.+2      	; 0x206c <__addsf3x+0x9a>
    206a:	b0 cf       	rjmp	.-160    	; 0x1fcc <__addsf3+0x28>
    206c:	93 95       	inc	r25
    206e:	88 0f       	add	r24, r24
    2070:	08 f0       	brcs	.+2      	; 0x2074 <__addsf3x+0xa2>
    2072:	99 27       	eor	r25, r25
    2074:	ee 0f       	add	r30, r30
    2076:	97 95       	ror	r25
    2078:	87 95       	ror	r24
    207a:	08 95       	ret

0000207c <__fp_mpack>:
    207c:	9f 3f       	cpi	r25, 0xFF	; 255
    207e:	31 f0       	breq	.+12     	; 0x208c <__fp_mpack_finite+0xc>

00002080 <__fp_mpack_finite>:
    2080:	91 50       	subi	r25, 0x01	; 1
    2082:	20 f4       	brcc	.+8      	; 0x208c <__fp_mpack_finite+0xc>
    2084:	87 95       	ror	r24
    2086:	77 95       	ror	r23
    2088:	67 95       	ror	r22
    208a:	b7 95       	ror	r27
    208c:	88 0f       	add	r24, r24
    208e:	91 1d       	adc	r25, r1
    2090:	96 95       	lsr	r25
    2092:	87 95       	ror	r24
    2094:	97 f9       	bld	r25, 7
    2096:	08 95       	ret

00002098 <__udivmodsi4>:
    2098:	a1 e2       	ldi	r26, 0x21	; 33
    209a:	1a 2e       	mov	r1, r26
    209c:	aa 1b       	sub	r26, r26
    209e:	bb 1b       	sub	r27, r27
    20a0:	fd 01       	movw	r30, r26
    20a2:	0d c0       	rjmp	.+26     	; 0x20be <__udivmodsi4_ep>

000020a4 <__udivmodsi4_loop>:
    20a4:	aa 1f       	adc	r26, r26
    20a6:	bb 1f       	adc	r27, r27
    20a8:	ee 1f       	adc	r30, r30
    20aa:	ff 1f       	adc	r31, r31
    20ac:	a2 17       	cp	r26, r18
    20ae:	b3 07       	cpc	r27, r19
    20b0:	e4 07       	cpc	r30, r20
    20b2:	f5 07       	cpc	r31, r21
    20b4:	20 f0       	brcs	.+8      	; 0x20be <__udivmodsi4_ep>
    20b6:	a2 1b       	sub	r26, r18
    20b8:	b3 0b       	sbc	r27, r19
    20ba:	e4 0b       	sbc	r30, r20
    20bc:	f5 0b       	sbc	r31, r21

000020be <__udivmodsi4_ep>:
    20be:	66 1f       	adc	r22, r22
    20c0:	77 1f       	adc	r23, r23
    20c2:	88 1f       	adc	r24, r24
    20c4:	99 1f       	adc	r25, r25
    20c6:	1a 94       	dec	r1
    20c8:	69 f7       	brne	.-38     	; 0x20a4 <__udivmodsi4_loop>
    20ca:	60 95       	com	r22
    20cc:	70 95       	com	r23
    20ce:	80 95       	com	r24
    20d0:	90 95       	com	r25
    20d2:	9b 01       	movw	r18, r22
    20d4:	ac 01       	movw	r20, r24
    20d6:	bd 01       	movw	r22, r26
    20d8:	cf 01       	movw	r24, r30
    20da:	08 95       	ret

000020dc <__divmodsi4>:
    20dc:	05 2e       	mov	r0, r21
    20de:	97 fb       	bst	r25, 7
    20e0:	1e f4       	brtc	.+6      	; 0x20e8 <__divmodsi4+0xc>
    20e2:	00 94       	com	r0
    20e4:	0e 94 85 10 	call	0x210a	; 0x210a <__negsi2>
    20e8:	57 fd       	sbrc	r21, 7
    20ea:	07 d0       	rcall	.+14     	; 0x20fa <__divmodsi4_neg2>
    20ec:	0e 94 4c 10 	call	0x2098	; 0x2098 <__udivmodsi4>
    20f0:	07 fc       	sbrc	r0, 7
    20f2:	03 d0       	rcall	.+6      	; 0x20fa <__divmodsi4_neg2>
    20f4:	4e f4       	brtc	.+18     	; 0x2108 <__divmodsi4_exit>
    20f6:	0c 94 85 10 	jmp	0x210a	; 0x210a <__negsi2>

000020fa <__divmodsi4_neg2>:
    20fa:	50 95       	com	r21
    20fc:	40 95       	com	r20
    20fe:	30 95       	com	r19
    2100:	21 95       	neg	r18
    2102:	3f 4f       	sbci	r19, 0xFF	; 255
    2104:	4f 4f       	sbci	r20, 0xFF	; 255
    2106:	5f 4f       	sbci	r21, 0xFF	; 255

00002108 <__divmodsi4_exit>:
    2108:	08 95       	ret

0000210a <__negsi2>:
    210a:	90 95       	com	r25
    210c:	80 95       	com	r24
    210e:	70 95       	com	r23
    2110:	61 95       	neg	r22
    2112:	7f 4f       	sbci	r23, 0xFF	; 255
    2114:	8f 4f       	sbci	r24, 0xFF	; 255
    2116:	9f 4f       	sbci	r25, 0xFF	; 255
    2118:	08 95       	ret

0000211a <strcpy>:
    211a:	fb 01       	movw	r30, r22
    211c:	dc 01       	movw	r26, r24
    211e:	01 90       	ld	r0, Z+
    2120:	0d 92       	st	X+, r0
    2122:	00 20       	and	r0, r0
    2124:	e1 f7       	brne	.-8      	; 0x211e <strcpy+0x4>
    2126:	08 95       	ret

00002128 <__itoa_ncheck>:
    2128:	bb 27       	eor	r27, r27
    212a:	4a 30       	cpi	r20, 0x0A	; 10
    212c:	31 f4       	brne	.+12     	; 0x213a <__itoa_ncheck+0x12>
    212e:	99 23       	and	r25, r25
    2130:	22 f4       	brpl	.+8      	; 0x213a <__itoa_ncheck+0x12>
    2132:	bd e2       	ldi	r27, 0x2D	; 45
    2134:	90 95       	com	r25
    2136:	81 95       	neg	r24
    2138:	9f 4f       	sbci	r25, 0xFF	; 255
    213a:	0c 94 a0 10 	jmp	0x2140	; 0x2140 <__utoa_common>

0000213e <__utoa_ncheck>:
    213e:	bb 27       	eor	r27, r27

00002140 <__utoa_common>:
    2140:	fb 01       	movw	r30, r22
    2142:	55 27       	eor	r21, r21
    2144:	aa 27       	eor	r26, r26
    2146:	88 0f       	add	r24, r24
    2148:	99 1f       	adc	r25, r25
    214a:	aa 1f       	adc	r26, r26
    214c:	a4 17       	cp	r26, r20
    214e:	10 f0       	brcs	.+4      	; 0x2154 <__utoa_common+0x14>
    2150:	a4 1b       	sub	r26, r20
    2152:	83 95       	inc	r24
    2154:	50 51       	subi	r21, 0x10	; 16
    2156:	b9 f7       	brne	.-18     	; 0x2146 <__utoa_common+0x6>
    2158:	a0 5d       	subi	r26, 0xD0	; 208
    215a:	aa 33       	cpi	r26, 0x3A	; 58
    215c:	08 f0       	brcs	.+2      	; 0x2160 <__utoa_common+0x20>
    215e:	a9 5d       	subi	r26, 0xD9	; 217
    2160:	a1 93       	st	Z+, r26
    2162:	00 97       	sbiw	r24, 0x00	; 0
    2164:	79 f7       	brne	.-34     	; 0x2144 <__utoa_common+0x4>
    2166:	b1 11       	cpse	r27, r1
    2168:	b1 93       	st	Z+, r27
    216a:	11 92       	st	Z+, r1
    216c:	cb 01       	movw	r24, r22
    216e:	0c 94 b9 10 	jmp	0x2172	; 0x2172 <strrev>

00002172 <strrev>:
    2172:	dc 01       	movw	r26, r24
    2174:	fc 01       	movw	r30, r24
    2176:	67 2f       	mov	r22, r23
    2178:	71 91       	ld	r23, Z+
    217a:	77 23       	and	r23, r23
    217c:	e1 f7       	brne	.-8      	; 0x2176 <strrev+0x4>
    217e:	32 97       	sbiw	r30, 0x02	; 2
    2180:	04 c0       	rjmp	.+8      	; 0x218a <strrev+0x18>
    2182:	7c 91       	ld	r23, X
    2184:	6d 93       	st	X+, r22
    2186:	70 83       	st	Z, r23
    2188:	62 91       	ld	r22, -Z
    218a:	ae 17       	cp	r26, r30
    218c:	bf 07       	cpc	r27, r31
    218e:	c8 f3       	brcs	.-14     	; 0x2182 <strrev+0x10>
    2190:	08 95       	ret

00002192 <_exit>:
    2192:	f8 94       	cli

00002194 <__stop_program>:
    2194:	ff cf       	rjmp	.-2      	; 0x2194 <__stop_program>
