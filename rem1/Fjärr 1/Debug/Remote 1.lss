
Remote 1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000036  00800100  000012aa  0000133e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000012aa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000063  00800136  00800136  00001374  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001374  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000013a4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000170  00000000  00000000  000013e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000015be  00000000  00000000  00001554  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d2f  00000000  00000000  00002b12  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bc4  00000000  00000000  00003841  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000370  00000000  00000000  00004408  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000623  00000000  00000000  00004778  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000aab  00000000  00000000  00004d9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000140  00000000  00000000  00005846  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 fa 02 	jmp	0x5f4	; 0x5f4 <__ctors_end>
       4:	0c 94 a3 03 	jmp	0x746	; 0x746 <__vector_1>
       8:	0c 94 ad 03 	jmp	0x75a	; 0x75a <__vector_2>
       c:	0c 94 17 03 	jmp	0x62e	; 0x62e <__bad_interrupt>
      10:	0c 94 17 03 	jmp	0x62e	; 0x62e <__bad_interrupt>
      14:	0c 94 17 03 	jmp	0x62e	; 0x62e <__bad_interrupt>
      18:	0c 94 17 03 	jmp	0x62e	; 0x62e <__bad_interrupt>
      1c:	0c 94 17 03 	jmp	0x62e	; 0x62e <__bad_interrupt>
      20:	0c 94 17 03 	jmp	0x62e	; 0x62e <__bad_interrupt>
      24:	0c 94 17 03 	jmp	0x62e	; 0x62e <__bad_interrupt>
      28:	0c 94 17 03 	jmp	0x62e	; 0x62e <__bad_interrupt>
      2c:	0c 94 f2 04 	jmp	0x9e4	; 0x9e4 <__vector_11>
      30:	0c 94 17 03 	jmp	0x62e	; 0x62e <__bad_interrupt>
      34:	0c 94 17 03 	jmp	0x62e	; 0x62e <__bad_interrupt>
      38:	0c 94 17 03 	jmp	0x62e	; 0x62e <__bad_interrupt>
      3c:	0c 94 17 03 	jmp	0x62e	; 0x62e <__bad_interrupt>
      40:	0c 94 17 03 	jmp	0x62e	; 0x62e <__bad_interrupt>
      44:	0c 94 17 03 	jmp	0x62e	; 0x62e <__bad_interrupt>
      48:	0c 94 22 03 	jmp	0x644	; 0x644 <__vector_18>
      4c:	0c 94 17 03 	jmp	0x62e	; 0x62e <__bad_interrupt>
      50:	0c 94 17 03 	jmp	0x62e	; 0x62e <__bad_interrupt>
      54:	0c 94 17 03 	jmp	0x62e	; 0x62e <__bad_interrupt>
      58:	0c 94 17 03 	jmp	0x62e	; 0x62e <__bad_interrupt>
      5c:	0c 94 17 03 	jmp	0x62e	; 0x62e <__bad_interrupt>
      60:	0c 94 17 03 	jmp	0x62e	; 0x62e <__bad_interrupt>
      64:	0c 94 17 03 	jmp	0x62e	; 0x62e <__bad_interrupt>
      68:	07 63       	ori	r16, 0x37	; 55
      6a:	42 36       	cpi	r20, 0x62	; 98
      6c:	b7 9b       	sbis	0x16, 7	; 22
      6e:	d8 a7       	std	Y+40, r29	; 0x28
      70:	1a 39       	cpi	r17, 0x9A	; 154
      72:	68 56       	subi	r22, 0x68	; 104
      74:	18 ae       	std	Y+56, r1	; 0x38
      76:	ba ab       	std	Y+50, r27	; 0x32
      78:	55 8c       	ldd	r5, Z+29	; 0x1d
      7a:	1d 3c       	cpi	r17, 0xCD	; 205
      7c:	b7 cc       	rjmp	.-1682   	; 0xfffff9ec <__eeprom_end+0xff7ef9ec>
      7e:	57 63       	ori	r21, 0x37	; 55
      80:	bd 6d       	ori	r27, 0xDD	; 221
      82:	ed fd       	.word	0xfded	; ????
      84:	75 3e       	cpi	r23, 0xE5	; 229
      86:	f6 17       	cp	r31, r22
      88:	72 31       	cpi	r23, 0x12	; 18
      8a:	bf 00       	.word	0x00bf	; ????
      8c:	00 00       	nop
      8e:	80 3f       	cpi	r24, 0xF0	; 240
      90:	08 00       	.word	0x0008	; ????
      92:	00 00       	nop
      94:	be 92       	st	-X, r11
      96:	24 49       	sbci	r18, 0x94	; 148
      98:	12 3e       	cpi	r17, 0xE2	; 226
      9a:	ab aa       	std	Y+51, r10	; 0x33
      9c:	aa 2a       	or	r10, r26
      9e:	be cd       	rjmp	.-1156   	; 0xfffffc1c <__eeprom_end+0xff7efc1c>
      a0:	cc cc       	rjmp	.-1640   	; 0xfffffa3a <__eeprom_end+0xff7efa3a>
      a2:	4c 3e       	cpi	r20, 0xEC	; 236
      a4:	00 00       	nop
      a6:	00 80       	ld	r0, Z
      a8:	be ab       	std	Y+54, r27	; 0x36
      aa:	aa aa       	std	Y+50, r10	; 0x32
      ac:	aa 3e       	cpi	r26, 0xEA	; 234
      ae:	00 00       	nop
      b0:	00 00       	nop
      b2:	bf 00       	.word	0x00bf	; ????
      b4:	00 00       	nop
      b6:	80 3f       	cpi	r24, 0xF0	; 240
      b8:	00 00       	nop
      ba:	00 00       	nop
      bc:	00 08       	sbc	r0, r0
      be:	41 78       	andi	r20, 0x81	; 129
      c0:	d3 bb       	out	0x13, r29	; 19
      c2:	43 87       	std	Z+11, r20	; 0x0b
      c4:	d1 13       	cpse	r29, r17
      c6:	3d 19       	sub	r19, r13
      c8:	0e 3c       	cpi	r16, 0xCE	; 206
      ca:	c3 bd       	out	0x23, r28	; 35
      cc:	42 82       	std	Z+2, r4	; 0x02
      ce:	ad 2b       	or	r26, r29
      d0:	3e 68       	ori	r19, 0x8E	; 142
      d2:	ec 82       	std	Y+4, r14	; 0x04
      d4:	76 be       	out	0x36, r7	; 54
      d6:	d9 8f       	std	Y+25, r29	; 0x19
      d8:	e1 a9       	ldd	r30, Z+49	; 0x31
      da:	3e 4c       	sbci	r19, 0xCE	; 206
      dc:	80 ef       	ldi	r24, 0xF0	; 240
      de:	ff be       	out	0x3f, r15	; 63
      e0:	01 c4       	rjmp	.+2050   	; 0x8e4 <Summer_PlayNote+0xa>
      e2:	ff 7f       	andi	r31, 0xFF	; 255
      e4:	3f 00       	.word	0x003f	; ????
      e6:	00 00       	nop
	...

000000ea <__trampolines_end>:
      ea:	39 15       	cp	r19, r9
      ec:	55 6e       	ori	r21, 0xE5	; 229
      ee:	72 38       	cpi	r23, 0x82	; 130
      f0:	0c 01       	movw	r0, r24
      f2:	06 71       	Address 0x000000f2 is out of bounds.
.word	0xffff	; ????

000000f3 <melodies>:
      f3:	71 80 71 00 00 00 00 00 00 00 00 00 00 00 00 00     q.q.............
	...
     1f3:	63 6c 6f 6c 48 63 6c 6f 6c 48 63 6d 60 6d 6a 60     clolHclolHcm`mj`
     203:	6a 48 68 00 00 00 00 00 00 00 00 00 00 00 00 00     jHh.............
	...
     2f3:	2d 4d 60 68 4d 68 88 8a 4c 85 80 65 4a 68 88 86     -M`hMh..L..eJh..
     303:	48 81 80 61 63 83 80 63 83 85 66 86 80 66 86 88     H..ac..c..f..f..
     313:	4a 6c 6d 4f 6f 68 51 6f 8f 8d 4f 6c 68 4d 6c 8c     JlmOohQo..OlhMl.
     323:	8a 4c 85 80 65 4a 68 88 86 48 61 80 81 4d 6c 8c     .L..eJh..Ha..Ml.
     333:	8a 68 6c 6d 6f 31 6f 6d 6c 6d 4f 6f 88 80 68 6c     .hlmo1omlmOo..hl
     343:	6d 6f 2d 6c 6a 68 6a 4c 6c 85 80 65 68 6a 6c 4d     mo-ljhjLl..ehjlM
     353:	6a 8a 8c 4d 6a 8a 8c 4d 6a 6d 52 72 60 32 71 6f     j..Mj..MjmRr`2qo
     363:	6d 6f 51 71 8d 80 2d 2f 6d 6c 6a 6c 4d 6d 8a 80     moQq..-/mljlMm..
     373:	2a 4d 6c 8c 8a 48 61 80 81 28 4a 4c 2d 6d 00 00     *Ml..Ha..(JL-m..
	...
     3f3:	4a 4c 4e 4f 51 53 6a 80 8a 4c 6e 80 8e 6f 8f 80     JLNOQSj..Ln..o..
     403:	4f 40 4a 4c 4e 4f 51 53 6a 80 8a 4c 6e 80 8e 6f     O@JLNOQSj..Ln..o
     413:	8f 80 4f 40 56 53 76 96 80 76 74 31 54 51 54 36     ..O@VSv..vt1TQT6
     423:	76 96 80 56 53 76 96 80 76 74 31 4a 4c 4e 2f 4f     v..VSv..vt1JLN/O
	...
     4f3:	61 81 80 41 68 88 80 48 6a 8a 80 4a 28 66 86 80     a..Ah..Hj..J(f..
     503:	46 65 85 80 45 63 83 80 43 21 68 88 80 48 66 86     Fe..Ec..C!h..Hf.
     513:	80 46 65 85 80 45 23 68 88 80 48 66 86 80 46 65     .Fe..E#h..Hf..Fe
     523:	85 80 45 23 61 81 80 41 68 88 80 48 6a 8a 80 4a     ..E#a..Ah..Hj..J
     533:	28 66 86 80 46 65 85 80 45 63 83 80 43 21 00 00     (f..Fe..Ec..C!..
	...

000005f4 <__ctors_end>:
     5f4:	11 24       	eor	r1, r1
     5f6:	1f be       	out	0x3f, r1	; 63
     5f8:	cf ef       	ldi	r28, 0xFF	; 255
     5fa:	d8 e0       	ldi	r29, 0x08	; 8
     5fc:	de bf       	out	0x3e, r29	; 62
     5fe:	cd bf       	out	0x3d, r28	; 61

00000600 <__do_copy_data>:
     600:	11 e0       	ldi	r17, 0x01	; 1
     602:	a0 e0       	ldi	r26, 0x00	; 0
     604:	b1 e0       	ldi	r27, 0x01	; 1
     606:	ea ea       	ldi	r30, 0xAA	; 170
     608:	f2 e1       	ldi	r31, 0x12	; 18
     60a:	02 c0       	rjmp	.+4      	; 0x610 <__do_copy_data+0x10>
     60c:	05 90       	lpm	r0, Z+
     60e:	0d 92       	st	X+, r0
     610:	a6 33       	cpi	r26, 0x36	; 54
     612:	b1 07       	cpc	r27, r17
     614:	d9 f7       	brne	.-10     	; 0x60c <__do_copy_data+0xc>

00000616 <__do_clear_bss>:
     616:	21 e0       	ldi	r18, 0x01	; 1
     618:	a6 e3       	ldi	r26, 0x36	; 54
     61a:	b1 e0       	ldi	r27, 0x01	; 1
     61c:	01 c0       	rjmp	.+2      	; 0x620 <.do_clear_bss_start>

0000061e <.do_clear_bss_loop>:
     61e:	1d 92       	st	X+, r1

00000620 <.do_clear_bss_start>:
     620:	a9 39       	cpi	r26, 0x99	; 153
     622:	b2 07       	cpc	r27, r18
     624:	e1 f7       	brne	.-8      	; 0x61e <.do_clear_bss_loop>
     626:	0e 94 da 03 	call	0x7b4	; 0x7b4 <main>
     62a:	0c 94 53 09 	jmp	0x12a6	; 0x12a6 <_exit>

0000062e <__bad_interrupt>:
     62e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000632 <uart_put_char>:

volatile uint8_t uart_linebuf[40];
volatile uint8_t uart_bufind = 0;

static int uart_put_char(char c, FILE* stream){
	while ( !( UCSR0A & (1<<UDRE0)) );
     632:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     636:	95 ff       	sbrs	r25, 5
     638:	fc cf       	rjmp	.-8      	; 0x632 <uart_put_char>
	UDR0 = c;
     63a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	return 0;
}
     63e:	80 e0       	ldi	r24, 0x00	; 0
     640:	90 e0       	ldi	r25, 0x00	; 0
     642:	08 95       	ret

00000644 <__vector_18>:
		}
		_delay_ms(10);
    }
}

ISR(USART_RX_vect){
     644:	1f 92       	push	r1
     646:	0f 92       	push	r0
     648:	0f b6       	in	r0, 0x3f	; 63
     64a:	0f 92       	push	r0
     64c:	11 24       	eor	r1, r1
     64e:	2f 93       	push	r18
     650:	3f 93       	push	r19
     652:	4f 93       	push	r20
     654:	5f 93       	push	r21
     656:	6f 93       	push	r22
     658:	7f 93       	push	r23
     65a:	8f 93       	push	r24
     65c:	9f 93       	push	r25
     65e:	af 93       	push	r26
     660:	bf 93       	push	r27
     662:	ef 93       	push	r30
     664:	ff 93       	push	r31
	uart_linebuf[uart_bufind] = UDR0;
     666:	e0 91 36 01 	lds	r30, 0x0136	; 0x800136 <__data_end>
     66a:	f0 e0       	ldi	r31, 0x00	; 0
     66c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     670:	e5 59       	subi	r30, 0x95	; 149
     672:	fe 4f       	sbci	r31, 0xFE	; 254
     674:	80 83       	st	Z, r24
	if(uart_linebuf[uart_bufind] == '\n'){
     676:	e0 91 36 01 	lds	r30, 0x0136	; 0x800136 <__data_end>
     67a:	f0 e0       	ldi	r31, 0x00	; 0
     67c:	e5 59       	subi	r30, 0x95	; 149
     67e:	fe 4f       	sbci	r31, 0xFE	; 254
     680:	80 81       	ld	r24, Z
     682:	8a 30       	cpi	r24, 0x0A	; 10
     684:	f1 f5       	brne	.+124    	; 0x702 <__vector_18+0xbe>
		uart_linebuf[uart_bufind] = '\0';
     686:	e0 91 36 01 	lds	r30, 0x0136	; 0x800136 <__data_end>
     68a:	f0 e0       	ldi	r31, 0x00	; 0
     68c:	e5 59       	subi	r30, 0x95	; 149
     68e:	fe 4f       	sbci	r31, 0xFE	; 254
     690:	10 82       	st	Z, r1
		//Do something
		clear_line(0);
     692:	80 e0       	ldi	r24, 0x00	; 0
     694:	0e 94 4d 04 	call	0x89a	; 0x89a <clear_line>
		set_cursor_pos(0);
     698:	80 e0       	ldi	r24, 0x00	; 0
     69a:	0e 94 45 04 	call	0x88a	; 0x88a <set_cursor_pos>
		if(uart_linebuf[0] == '2'){
     69e:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <uart_linebuf>
     6a2:	82 33       	cpi	r24, 0x32	; 50
     6a4:	49 f5       	brne	.+82     	; 0x6f8 <__vector_18+0xb4>
			if(uart_linebuf[2] == '0'){
     6a6:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <uart_linebuf+0x2>
     6aa:	80 33       	cpi	r24, 0x30	; 48
     6ac:	19 f4       	brne	.+6      	; 0x6b4 <__vector_18+0x70>
				write_lcd_string("Heartbeat");
     6ae:	8e e0       	ldi	r24, 0x0E	; 14
     6b0:	91 e0       	ldi	r25, 0x01	; 1
     6b2:	10 c0       	rjmp	.+32     	; 0x6d4 <__vector_18+0x90>
			} else if(uart_linebuf[2] == '1'){
     6b4:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <uart_linebuf+0x2>
     6b8:	81 33       	cpi	r24, 0x31	; 49
     6ba:	79 f4       	brne	.+30     	; 0x6da <__vector_18+0x96>
				write_lcd_string("Meddelande");
     6bc:	88 e1       	ldi	r24, 0x18	; 24
     6be:	91 e0       	ldi	r25, 0x01	; 1
     6c0:	0e 94 2a 04 	call	0x854	; 0x854 <write_lcd_string>
				clear_line(2);
     6c4:	82 e0       	ldi	r24, 0x02	; 2
     6c6:	0e 94 4d 04 	call	0x89a	; 0x89a <clear_line>
				set_cursor_pos(32);
     6ca:	80 e2       	ldi	r24, 0x20	; 32
     6cc:	0e 94 45 04 	call	0x88a	; 0x88a <set_cursor_pos>
				write_lcd_string(uart_linebuf + 4);
     6d0:	8f e6       	ldi	r24, 0x6F	; 111
     6d2:	91 e0       	ldi	r25, 0x01	; 1
     6d4:	0e 94 2a 04 	call	0x854	; 0x854 <write_lcd_string>
     6d8:	11 c0       	rjmp	.+34     	; 0x6fc <__vector_18+0xb8>
			} else if(uart_linebuf[2] == '2'){
     6da:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <uart_linebuf+0x2>
     6de:	82 33       	cpi	r24, 0x32	; 50
     6e0:	41 f4       	brne	.+16     	; 0x6f2 <__vector_18+0xae>
				write_lcd_string("Honk");
     6e2:	83 e2       	ldi	r24, 0x23	; 35
     6e4:	91 e0       	ldi	r25, 0x01	; 1
     6e6:	0e 94 2a 04 	call	0x854	; 0x854 <write_lcd_string>
				Summer_PlayMelody(MELODY_HONK);	
     6ea:	80 e0       	ldi	r24, 0x00	; 0
     6ec:	0e 94 48 05 	call	0xa90	; 0xa90 <Summer_PlayMelody>
     6f0:	05 c0       	rjmp	.+10     	; 0x6fc <__vector_18+0xb8>
			} else{
				write_lcd_string("Wtf");
     6f2:	88 e2       	ldi	r24, 0x28	; 40
     6f4:	91 e0       	ldi	r25, 0x01	; 1
     6f6:	ee cf       	rjmp	.-36     	; 0x6d4 <__vector_18+0x90>
			}
		} else if(uart_linebuf[0] == '1'){
     6f8:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <uart_linebuf>
			
		}
		//Done something
		uart_bufind = 0;
     6fc:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <__data_end>
     700:	05 c0       	rjmp	.+10     	; 0x70c <__vector_18+0xc8>
	} else{
		uart_bufind++;
     702:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <__data_end>
     706:	8f 5f       	subi	r24, 0xFF	; 255
     708:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <__data_end>
	}
}
     70c:	ff 91       	pop	r31
     70e:	ef 91       	pop	r30
     710:	bf 91       	pop	r27
     712:	af 91       	pop	r26
     714:	9f 91       	pop	r25
     716:	8f 91       	pop	r24
     718:	7f 91       	pop	r23
     71a:	6f 91       	pop	r22
     71c:	5f 91       	pop	r21
     71e:	4f 91       	pop	r20
     720:	3f 91       	pop	r19
     722:	2f 91       	pop	r18
     724:	0f 90       	pop	r0
     726:	0f be       	out	0x3f, r0	; 63
     728:	0f 90       	pop	r0
     72a:	1f 90       	pop	r1
     72c:	18 95       	reti

0000072e <btn_init>:

void btn_init(){
	BTN_DDR &= ~((1<<HONKBTN)|(1<<DEADMANBTN)|(1<<EXTRABTN));
     72e:	8a b1       	in	r24, 0x0a	; 10
     730:	83 7e       	andi	r24, 0xE3	; 227
     732:	8a b9       	out	0x0a, r24	; 10
	BTN_PORT |= (1<<HONKBTN)|(1<<DEADMANBTN)|(1<<EXTRABTN);
     734:	8b b1       	in	r24, 0x0b	; 11
     736:	8c 61       	ori	r24, 0x1C	; 28
     738:	8b b9       	out	0x0b, r24	; 11
	EICRA = (2<<ISC00)|(2<<ISC10);
     73a:	8a e0       	ldi	r24, 0x0A	; 10
     73c:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
	EIMSK = 3;
     740:	83 e0       	ldi	r24, 0x03	; 3
     742:	8d bb       	out	0x1d, r24	; 29
     744:	08 95       	ret

00000746 <__vector_1>:
}

//Extra
ISR(INT0_vect){
     746:	1f 92       	push	r1
     748:	0f 92       	push	r0
     74a:	0f b6       	in	r0, 0x3f	; 63
     74c:	0f 92       	push	r0
     74e:	11 24       	eor	r1, r1
}
     750:	0f 90       	pop	r0
     752:	0f be       	out	0x3f, r0	; 63
     754:	0f 90       	pop	r0
     756:	1f 90       	pop	r1
     758:	18 95       	reti

0000075a <__vector_2>:

//Honk
ISR(INT1_vect){
     75a:	1f 92       	push	r1
     75c:	0f 92       	push	r0
     75e:	0f b6       	in	r0, 0x3f	; 63
     760:	0f 92       	push	r0
     762:	11 24       	eor	r1, r1
     764:	2f 93       	push	r18
     766:	3f 93       	push	r19
     768:	4f 93       	push	r20
     76a:	5f 93       	push	r21
     76c:	6f 93       	push	r22
     76e:	7f 93       	push	r23
     770:	8f 93       	push	r24
     772:	9f 93       	push	r25
     774:	af 93       	push	r26
     776:	bf 93       	push	r27
     778:	ef 93       	push	r30
     77a:	ff 93       	push	r31
	uart_send_line("3 2");
     77c:	8c e2       	ldi	r24, 0x2C	; 44
     77e:	91 e0       	ldi	r25, 0x01	; 1
     780:	0e 94 5e 05 	call	0xabc	; 0xabc <uart_send_line>
}
     784:	ff 91       	pop	r31
     786:	ef 91       	pop	r30
     788:	bf 91       	pop	r27
     78a:	af 91       	pop	r26
     78c:	9f 91       	pop	r25
     78e:	8f 91       	pop	r24
     790:	7f 91       	pop	r23
     792:	6f 91       	pop	r22
     794:	5f 91       	pop	r21
     796:	4f 91       	pop	r20
     798:	3f 91       	pop	r19
     79a:	2f 91       	pop	r18
     79c:	0f 90       	pop	r0
     79e:	0f be       	out	0x3f, r0	; 63
     7a0:	0f 90       	pop	r0
     7a2:	1f 90       	pop	r1
     7a4:	18 95       	reti

000007a6 <led_init>:

void led_init(){
	LED_DDR |= (1<<LEDG)|(1<<LEDR1)|(1<<LEDR2);
     7a6:	8a b1       	in	r24, 0x0a	; 10
     7a8:	80 6e       	ori	r24, 0xE0	; 224
     7aa:	8a b9       	out	0x0a, r24	; 10
	LED_PORT &= ~((1<<LEDG)|(1<<LEDR1)|(1<<LEDR2));
     7ac:	8b b1       	in	r24, 0x0b	; 11
     7ae:	8f 71       	andi	r24, 0x1F	; 31
     7b0:	8b b9       	out	0x0b, r24	; 11
     7b2:	08 95       	ret

000007b4 <main>:

static FILE mystdout = FDEV_SETUP_STREAM(uart_put_char, NULL, _FDEV_SETUP_WRITE);

int main(void)
{
	spi_init();
     7b4:	0e 94 66 04 	call	0x8cc	; 0x8cc <spi_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7b8:	2f ef       	ldi	r18, 0xFF	; 255
     7ba:	80 e7       	ldi	r24, 0x70	; 112
     7bc:	92 e0       	ldi	r25, 0x02	; 2
     7be:	21 50       	subi	r18, 0x01	; 1
     7c0:	80 40       	sbci	r24, 0x00	; 0
     7c2:	90 40       	sbci	r25, 0x00	; 0
     7c4:	e1 f7       	brne	.-8      	; 0x7be <main+0xa>
     7c6:	00 c0       	rjmp	.+0      	; 0x7c8 <main+0x14>
     7c8:	00 00       	nop
	_delay_ms(100);
	lcd_init();
     7ca:	0e 94 0e 04 	call	0x81c	; 0x81c <lcd_init>
	adc_init();
     7ce:	0e 94 02 04 	call	0x804	; 0x804 <adc_init>
	uart_init();
     7d2:	0e 94 79 05 	call	0xaf2	; 0xaf2 <uart_init>
	uart_flush();
     7d6:	0e 94 71 05 	call	0xae2	; 0xae2 <uart_flush>
	led_init();
     7da:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <led_init>
	btn_init();
     7de:	0e 94 97 03 	call	0x72e	; 0x72e <btn_init>
	Summer_Init();
     7e2:	0e 94 40 05 	call	0xa80	; 0xa80 <Summer_Init>
	sei();
     7e6:	78 94       	sei
	stdout = &mystdout;
     7e8:	80 e0       	ldi	r24, 0x00	; 0
     7ea:	91 e0       	ldi	r25, 0x01	; 1
     7ec:	90 93 96 01 	sts	0x0196, r25	; 0x800196 <__iob+0x3>
     7f0:	80 93 95 01 	sts	0x0195, r24	; 0x800195 <__iob+0x2>
    /* Replace with your application code */
    while (1) 
    {
		if(!(BTN_PIN & 1<<DEADMANBTN)){
     7f4:	89 b1       	in	r24, 0x09	; 9
     7f6:	8f e1       	ldi	r24, 0x1F	; 31
     7f8:	9e e4       	ldi	r25, 0x4E	; 78
     7fa:	01 97       	sbiw	r24, 0x01	; 1
     7fc:	f1 f7       	brne	.-4      	; 0x7fa <main+0x46>
     7fe:	00 c0       	rjmp	.+0      	; 0x800 <__DATA_REGION_LENGTH__>
     800:	00 00       	nop
     802:	f8 cf       	rjmp	.-16     	; 0x7f4 <main+0x40>

00000804 <adc_init>:

/************************************************************************/
/* Initializes the MCU ADC with 100KHz clock and with ports 0-3 enabled */
/************************************************************************/
void adc_init(){
	DDRC &= ~((1<<1)|(1<<0));					//Enable input on ADC-ports
     804:	87 b1       	in	r24, 0x07	; 7
     806:	8c 7f       	andi	r24, 0xFC	; 252
     808:	87 b9       	out	0x07, r24	; 7
	ADCSRA = (1<<ADEN)|(1<<ADPS1)|(1<<ADPS2);   //ADC-clock F_CPU/64
     80a:	86 e8       	ldi	r24, 0x86	; 134
     80c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
	DIDR0 = (1<<ADC5D)|(1<<ADC4D)|(1<<ADC3D);	//Disable unused ADC-ports			
     810:	88 e3       	ldi	r24, 0x38	; 56
     812:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7f807e>
	ADCSRB = 0;									//No auto trigger
     816:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
     81a:	08 95       	ret

0000081c <lcd_init>:
     81c:	cf 93       	push	r28
     81e:	df 93       	push	r29
     820:	84 b1       	in	r24, 0x04	; 4
     822:	85 60       	ori	r24, 0x05	; 5
     824:	84 b9       	out	0x04, r24	; 4
     826:	85 b1       	in	r24, 0x05	; 5
     828:	8a 7f       	andi	r24, 0xFA	; 250
     82a:	85 b9       	out	0x05, r24	; 5
     82c:	ca ee       	ldi	r28, 0xEA	; 234
     82e:	d0 e0       	ldi	r29, 0x00	; 0
     830:	fe 01       	movw	r30, r28
     832:	84 91       	lpm	r24, Z
     834:	0e 94 60 04 	call	0x8c0	; 0x8c0 <spi_txrx>
     838:	87 eb       	ldi	r24, 0xB7	; 183
     83a:	9b e0       	ldi	r25, 0x0B	; 11
     83c:	01 97       	sbiw	r24, 0x01	; 1
     83e:	f1 f7       	brne	.-4      	; 0x83c <lcd_init+0x20>
     840:	00 c0       	rjmp	.+0      	; 0x842 <lcd_init+0x26>
     842:	00 00       	nop
     844:	21 96       	adiw	r28, 0x01	; 1
     846:	90 e0       	ldi	r25, 0x00	; 0
     848:	c3 3f       	cpi	r28, 0xF3	; 243
     84a:	d9 07       	cpc	r29, r25
     84c:	89 f7       	brne	.-30     	; 0x830 <lcd_init+0x14>
     84e:	df 91       	pop	r29
     850:	cf 91       	pop	r28
     852:	08 95       	ret

00000854 <write_lcd_string>:
     854:	1f 93       	push	r17
     856:	cf 93       	push	r28
     858:	df 93       	push	r29
     85a:	ec 01       	movw	r28, r24
     85c:	28 9a       	sbi	0x05, 0	; 5
     85e:	2a 98       	cbi	0x05, 2	; 5
     860:	80 e0       	ldi	r24, 0x00	; 0
     862:	11 e0       	ldi	r17, 0x01	; 1
     864:	18 0f       	add	r17, r24
     866:	fe 01       	movw	r30, r28
     868:	e8 0f       	add	r30, r24
     86a:	f1 1d       	adc	r31, r1
     86c:	80 81       	ld	r24, Z
     86e:	88 23       	and	r24, r24
     870:	39 f0       	breq	.+14     	; 0x880 <write_lcd_string+0x2c>
     872:	0e 94 60 04 	call	0x8c0	; 0x8c0 <spi_txrx>
     876:	80 e5       	ldi	r24, 0x50	; 80
     878:	8a 95       	dec	r24
     87a:	f1 f7       	brne	.-4      	; 0x878 <write_lcd_string+0x24>
     87c:	81 2f       	mov	r24, r17
     87e:	f1 cf       	rjmp	.-30     	; 0x862 <write_lcd_string+0xe>
     880:	28 98       	cbi	0x05, 0	; 5
     882:	df 91       	pop	r29
     884:	cf 91       	pop	r28
     886:	1f 91       	pop	r17
     888:	08 95       	ret

0000088a <set_cursor_pos>:
/************************************************************************/
/* Sets the LCD cursors position.										*/
/* @param pos The position to set to									*/
/************************************************************************/
void set_cursor_pos(uint8_t pos){
	PORTB &= ~(1<<CSB);   //Clear CSB
     88a:	2a 98       	cbi	0x05, 2	; 5
	spi_txrx(pos|0x80);
     88c:	80 68       	ori	r24, 0x80	; 128
     88e:	0e 94 60 04 	call	0x8c0	; 0x8c0 <spi_txrx>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     892:	80 e5       	ldi	r24, 0x50	; 80
     894:	8a 95       	dec	r24
     896:	f1 f7       	brne	.-4      	; 0x894 <set_cursor_pos+0xa>
     898:	08 95       	ret

0000089a <clear_line>:

/************************************************************************/
/* Clears the given line on the LCD                                     */
/* @param linenum The line to clear (0-2)								*/
/************************************************************************/
void clear_line(uint8_t linenum){
     89a:	cf 93       	push	r28
	set_cursor_pos(linenum * 16);
     89c:	82 95       	swap	r24
     89e:	80 7f       	andi	r24, 0xF0	; 240
     8a0:	0e 94 45 04 	call	0x88a	; 0x88a <set_cursor_pos>
	PORTB |= 1<<RS;
     8a4:	28 9a       	sbi	0x05, 0	; 5
	PORTB &= ~(1<<CSB);
     8a6:	2a 98       	cbi	0x05, 2	; 5
     8a8:	c0 e1       	ldi	r28, 0x10	; 16
	for (uint8_t i = 0; i < 16; i++){
		spi_txrx(' ');
     8aa:	80 e2       	ldi	r24, 0x20	; 32
     8ac:	0e 94 60 04 	call	0x8c0	; 0x8c0 <spi_txrx>
     8b0:	80 e5       	ldi	r24, 0x50	; 80
     8b2:	8a 95       	dec	r24
     8b4:	f1 f7       	brne	.-4      	; 0x8b2 <clear_line+0x18>
     8b6:	c1 50       	subi	r28, 0x01	; 1
/************************************************************************/
void clear_line(uint8_t linenum){
	set_cursor_pos(linenum * 16);
	PORTB |= 1<<RS;
	PORTB &= ~(1<<CSB);
	for (uint8_t i = 0; i < 16; i++){
     8b8:	c1 f7       	brne	.-16     	; 0x8aa <clear_line+0x10>
		spi_txrx(' ');
		_delay_us(30);
	}
	PORTB &= ~(1<<RS);
     8ba:	28 98       	cbi	0x05, 0	; 5
}
     8bc:	cf 91       	pop	r28
     8be:	08 95       	ret

000008c0 <spi_txrx>:
/* Starts a SPI communication with a given data in SPI buffer			*/
/* and receives incoming data                                           */
/* @param data The data to send											*/
/************************************************************************/
uint8_t spi_txrx(uint8_t data){
	SPDR = data;
     8c0:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));
     8c2:	0d b4       	in	r0, 0x2d	; 45
     8c4:	07 fe       	sbrs	r0, 7
     8c6:	fd cf       	rjmp	.-6      	; 0x8c2 <spi_txrx+0x2>
	return SPDR;
     8c8:	8e b5       	in	r24, 0x2e	; 46
}
     8ca:	08 95       	ret

000008cc <spi_init>:
/************************************************************************/
/* Initiates the MCU SPI as master with 16 as prescaler factor           */
/************************************************************************/
void spi_init(){
	// Set MOSI and SCK as out
	DDRB |= (1<<MOSI) | (1<<SCK) | (1<<SS);
     8cc:	84 b1       	in	r24, 0x04	; 4
     8ce:	8c 62       	ori	r24, 0x2C	; 44
     8d0:	84 b9       	out	0x04, r24	; 4
	DDRB &= ~(1<<MISO);
     8d2:	24 98       	cbi	0x04, 4	; 4
	//Enable SPI in master mode with fck/4 as clock
	SPCR = (1<<SPE) | (1<<MSTR);
     8d4:	80 e5       	ldi	r24, 0x50	; 80
     8d6:	8c bd       	out	0x2c, r24	; 44
     8d8:	08 95       	ret

000008da <Summer_PlayNote>:
static volatile uint16_t note_time = 0; // The timer cycles left for current note
static volatile uint8_t cur_melody;     // The index of the current melody
static volatile uint8_t current_note;   // The index of the curent note

// Plays a single note on the buzzer
void Summer_PlayNote(uint8_t note){
     8da:	cf 92       	push	r12
     8dc:	df 92       	push	r13
     8de:	ef 92       	push	r14
     8e0:	ff 92       	push	r15
     8e2:	cf 93       	push	r28
     8e4:	df 93       	push	r29
     8e6:	d8 2f       	mov	r29, r24
    if(GET_PITCH_EXP(note) == -1){  // Stop buzzer if note is a rest
     8e8:	68 2f       	mov	r22, r24
     8ea:	70 e0       	ldi	r23, 0x00	; 0
     8ec:	6f 71       	andi	r22, 0x1F	; 31
#ifdef SUMMER_USE_SW
        rest = true;
#else
        TCCR1A &= ~(1<<COM1A0);
     8ee:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
static volatile uint8_t cur_melody;     // The index of the current melody
static volatile uint8_t current_note;   // The index of the curent note

// Plays a single note on the buzzer
void Summer_PlayNote(uint8_t note){
    if(GET_PITCH_EXP(note) == -1){  // Stop buzzer if note is a rest
     8f2:	61 15       	cp	r22, r1
     8f4:	71 05       	cpc	r23, r1
     8f6:	21 f4       	brne	.+8      	; 0x900 <__stack+0x1>
#ifdef SUMMER_USE_SW
        rest = true;
#else
        TCCR1A &= ~(1<<COM1A0);
     8f8:	8f 7b       	andi	r24, 0xBF	; 191
     8fa:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
     8fe:	21 c0       	rjmp	.+66     	; 0x942 <__stack+0x43>
#endif
    } else{                         // Start buzzer and set correct frequency
#ifdef SUMMER_USE_SW
        rest = false;
#else
        TCCR1A |= (1<<COM1A0);
     900:	80 64       	ori	r24, 0x40	; 64
     902:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
#endif
        OCR1A = LOWC_OCR / (pow(ROOT12_2,GET_PITCH_EXP(note)));
     906:	61 50       	subi	r22, 0x01	; 1
     908:	71 09       	sbc	r23, r1
     90a:	07 2e       	mov	r0, r23
     90c:	00 0c       	add	r0, r0
     90e:	88 0b       	sbc	r24, r24
     910:	99 0b       	sbc	r25, r25
     912:	0e 94 27 06 	call	0xc4e	; 0xc4e <__floatsisf>
     916:	9b 01       	movw	r18, r22
     918:	ac 01       	movw	r20, r24
     91a:	6d e7       	ldi	r22, 0x7D	; 125
     91c:	7c e9       	ldi	r23, 0x9C	; 156
     91e:	87 e8       	ldi	r24, 0x87	; 135
     920:	9f e3       	ldi	r25, 0x3F	; 63
     922:	0e 94 b3 06 	call	0xd66	; 0xd66 <pow>
     926:	9b 01       	movw	r18, r22
     928:	ac 01       	movw	r20, r24
     92a:	60 e0       	ldi	r22, 0x00	; 0
     92c:	70 e6       	ldi	r23, 0x60	; 96
     92e:	80 e7       	ldi	r24, 0x70	; 112
     930:	96 e4       	ldi	r25, 0x46	; 70
     932:	0e 94 84 05 	call	0xb08	; 0xb08 <__divsf3>
     936:	0e 94 f6 05 	call	0xbec	; 0xbec <__fixunssfsi>
     93a:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     93e:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
    }
    // cycles needed = frequency / (bar time) / (note length divisor)
    note_time = ((F_CPU/(OCR1A + 1))/(bpms[cur_melody]/(240.0)))/GET_DURATION_DIV(note);
     942:	20 91 88 00 	lds	r18, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
     946:	30 91 89 00 	lds	r19, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     94a:	c0 91 38 01 	lds	r28, 0x0138	; 0x800138 <cur_melody>
     94e:	2f 5f       	subi	r18, 0xFF	; 255
     950:	3f 4f       	sbci	r19, 0xFF	; 255
     952:	40 e0       	ldi	r20, 0x00	; 0
     954:	50 e0       	ldi	r21, 0x00	; 0
     956:	60 e0       	ldi	r22, 0x00	; 0
     958:	72 e1       	ldi	r23, 0x12	; 18
     95a:	8a e7       	ldi	r24, 0x7A	; 122
     95c:	90 e0       	ldi	r25, 0x00	; 0
     95e:	0e 94 34 09 	call	0x1268	; 0x1268 <__divmodsi4>
     962:	ca 01       	movw	r24, r20
     964:	b9 01       	movw	r22, r18
     966:	0e 94 27 06 	call	0xc4e	; 0xc4e <__floatsisf>
     96a:	6b 01       	movw	r12, r22
     96c:	7c 01       	movw	r14, r24
     96e:	ec 2f       	mov	r30, r28
     970:	f0 e0       	ldi	r31, 0x00	; 0
     972:	e0 5d       	subi	r30, 0xD0	; 208
     974:	fe 4f       	sbci	r31, 0xFE	; 254
     976:	60 81       	ld	r22, Z
     978:	70 e0       	ldi	r23, 0x00	; 0
     97a:	80 e0       	ldi	r24, 0x00	; 0
     97c:	90 e0       	ldi	r25, 0x00	; 0
     97e:	0e 94 27 06 	call	0xc4e	; 0xc4e <__floatsisf>
     982:	20 e0       	ldi	r18, 0x00	; 0
     984:	30 e0       	ldi	r19, 0x00	; 0
     986:	40 e7       	ldi	r20, 0x70	; 112
     988:	53 e4       	ldi	r21, 0x43	; 67
     98a:	0e 94 84 05 	call	0xb08	; 0xb08 <__divsf3>
     98e:	9b 01       	movw	r18, r22
     990:	ac 01       	movw	r20, r24
     992:	c7 01       	movw	r24, r14
     994:	b6 01       	movw	r22, r12
     996:	0e 94 84 05 	call	0xb08	; 0xb08 <__divsf3>
     99a:	6b 01       	movw	r12, r22
     99c:	7c 01       	movw	r14, r24
     99e:	d2 95       	swap	r29
     9a0:	d6 95       	lsr	r29
     9a2:	d7 70       	andi	r29, 0x07	; 7
     9a4:	61 e0       	ldi	r22, 0x01	; 1
     9a6:	70 e0       	ldi	r23, 0x00	; 0
     9a8:	02 c0       	rjmp	.+4      	; 0x9ae <__stack+0xaf>
     9aa:	66 0f       	add	r22, r22
     9ac:	77 1f       	adc	r23, r23
     9ae:	da 95       	dec	r29
     9b0:	e2 f7       	brpl	.-8      	; 0x9aa <__stack+0xab>
     9b2:	07 2e       	mov	r0, r23
     9b4:	00 0c       	add	r0, r0
     9b6:	88 0b       	sbc	r24, r24
     9b8:	99 0b       	sbc	r25, r25
     9ba:	0e 94 27 06 	call	0xc4e	; 0xc4e <__floatsisf>
     9be:	9b 01       	movw	r18, r22
     9c0:	ac 01       	movw	r20, r24
     9c2:	c7 01       	movw	r24, r14
     9c4:	b6 01       	movw	r22, r12
     9c6:	0e 94 84 05 	call	0xb08	; 0xb08 <__divsf3>
     9ca:	0e 94 f6 05 	call	0xbec	; 0xbec <__fixunssfsi>
     9ce:	70 93 3a 01 	sts	0x013A, r23	; 0x80013a <note_time+0x1>
     9d2:	60 93 39 01 	sts	0x0139, r22	; 0x800139 <note_time>
}
     9d6:	df 91       	pop	r29
     9d8:	cf 91       	pop	r28
     9da:	ff 90       	pop	r15
     9dc:	ef 90       	pop	r14
     9de:	df 90       	pop	r13
     9e0:	cf 90       	pop	r12
     9e2:	08 95       	ret

000009e4 <__vector_11>:

// Interrupt vector to play next note after the current notes length is passed
// Stops the melody when it encounters a 0xFF
ISR(TIMER1_COMPA_vect){
     9e4:	1f 92       	push	r1
     9e6:	0f 92       	push	r0
     9e8:	0f b6       	in	r0, 0x3f	; 63
     9ea:	0f 92       	push	r0
     9ec:	11 24       	eor	r1, r1
     9ee:	2f 93       	push	r18
     9f0:	3f 93       	push	r19
     9f2:	4f 93       	push	r20
     9f4:	5f 93       	push	r21
     9f6:	6f 93       	push	r22
     9f8:	7f 93       	push	r23
     9fa:	8f 93       	push	r24
     9fc:	9f 93       	push	r25
     9fe:	af 93       	push	r26
     a00:	bf 93       	push	r27
     a02:	ef 93       	push	r30
     a04:	ff 93       	push	r31
    if(rest)
        SW_SUMMER_PORT &= ~(1<<SUMMER_PIN);
    else
        SW_SUMMER_PORT ^= (1<<SUMMER_PIN);
#endif
    note_time--; 
     a06:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <note_time>
     a0a:	90 91 3a 01 	lds	r25, 0x013A	; 0x80013a <note_time+0x1>
     a0e:	01 97       	sbiw	r24, 0x01	; 1
     a10:	90 93 3a 01 	sts	0x013A, r25	; 0x80013a <note_time+0x1>
     a14:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <note_time>
    if (note_time == 0){
     a18:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <note_time>
     a1c:	90 91 3a 01 	lds	r25, 0x013A	; 0x80013a <note_time+0x1>
     a20:	89 2b       	or	r24, r25
     a22:	e9 f4       	brne	.+58     	; 0xa5e <__vector_11+0x7a>
        current_note++;
     a24:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <current_note>
     a28:	8f 5f       	subi	r24, 0xFF	; 255
     a2a:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <current_note>
        // Read next note from program memory
        uint8_t note = pgm_read_byte(&(melodies[cur_melody][current_note]));
     a2e:	e0 91 38 01 	lds	r30, 0x0138	; 0x800138 <cur_melody>
     a32:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <current_note>
     a36:	f0 e0       	ldi	r31, 0x00	; 0
     a38:	fe 2f       	mov	r31, r30
     a3a:	ee 27       	eor	r30, r30
     a3c:	e8 0f       	add	r30, r24
     a3e:	f1 1d       	adc	r31, r1
     a40:	ed 50       	subi	r30, 0x0D	; 13
     a42:	ff 4f       	sbci	r31, 0xFF	; 255
     a44:	84 91       	lpm	r24, Z
        if(note == 0x00){   // Stop buzzer if 0xFF
     a46:	81 11       	cpse	r24, r1
     a48:	08 c0       	rjmp	.+16     	; 0xa5a <__vector_11+0x76>
            TIMSK1 = 0;
     a4a:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
            TCCR1B &= ~(1<<CS10);
     a4e:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     a52:	8e 7f       	andi	r24, 0xFE	; 254
     a54:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     a58:	02 c0       	rjmp	.+4      	; 0xa5e <__vector_11+0x7a>
#ifdef SUMMER_USE_SW
            SW_SUMMER_PORT &= ~(1<<SUMMER_PIN);
#endif
        } else
            Summer_PlayNote(note);
     a5a:	0e 94 6d 04 	call	0x8da	; 0x8da <Summer_PlayNote>
    }
}
     a5e:	ff 91       	pop	r31
     a60:	ef 91       	pop	r30
     a62:	bf 91       	pop	r27
     a64:	af 91       	pop	r26
     a66:	9f 91       	pop	r25
     a68:	8f 91       	pop	r24
     a6a:	7f 91       	pop	r23
     a6c:	6f 91       	pop	r22
     a6e:	5f 91       	pop	r21
     a70:	4f 91       	pop	r20
     a72:	3f 91       	pop	r19
     a74:	2f 91       	pop	r18
     a76:	0f 90       	pop	r0
     a78:	0f be       	out	0x3f, r0	; 63
     a7a:	0f 90       	pop	r0
     a7c:	1f 90       	pop	r1
     a7e:	18 95       	reti

00000a80 <Summer_Init>:

// ------------- PUBLIC -------------

// Initializes the summer
void Summer_Init(void){
    SUMMER_DDR |= (1<<SUMMER_PIN);
     a80:	21 9a       	sbi	0x04, 1	; 4
    // Start timer
#ifdef SUMMER_USE_SW
    TCCR1A = 0;
#else
    TCCR1A = (1<<COM1A0);
     a82:	80 e4       	ldi	r24, 0x40	; 64
     a84:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
#endif
    TCCR1B = (1<<WGM12);
     a88:	88 e0       	ldi	r24, 0x08	; 8
     a8a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     a8e:	08 95       	ret

00000a90 <Summer_PlayMelody>:
}

// Plays a specified melody on the buzzer
void Summer_PlayMelody(uint8_t melody){
    cur_melody = melody;
     a90:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <cur_melody>
    current_note = 0;
     a94:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <current_note>
    Summer_PlayNote(pgm_read_byte(&(melodies[melody][0])));
     a98:	e8 2f       	mov	r30, r24
     a9a:	f0 e0       	ldi	r31, 0x00	; 0
     a9c:	fe 2f       	mov	r31, r30
     a9e:	ee 27       	eor	r30, r30
     aa0:	ed 50       	subi	r30, 0x0D	; 13
     aa2:	ff 4f       	sbci	r31, 0xFF	; 255
     aa4:	84 91       	lpm	r24, Z
     aa6:	0e 94 6d 04 	call	0x8da	; 0x8da <Summer_PlayNote>
    TIMSK1 = (1<<OCIE1A);
     aaa:	82 e0       	ldi	r24, 0x02	; 2
     aac:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
    TCCR1B |= (1<<CS10);
     ab0:	e1 e8       	ldi	r30, 0x81	; 129
     ab2:	f0 e0       	ldi	r31, 0x00	; 0
     ab4:	80 81       	ld	r24, Z
     ab6:	81 60       	ori	r24, 0x01	; 1
     ab8:	80 83       	st	Z, r24
     aba:	08 95       	ret

00000abc <uart_send_line>:

bool uart_receive_byte(uint8_t* buffer){
	if(!( UCSR0A & (1<<RXC0))) return false;
	*buffer = UDR0;
	return true;
}
     abc:	fc 01       	movw	r30, r24
     abe:	91 91       	ld	r25, Z+
     ac0:	99 23       	and	r25, r25
     ac2:	39 f0       	breq	.+14     	; 0xad2 <uart_send_line+0x16>
     ac4:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     ac8:	85 ff       	sbrs	r24, 5
     aca:	fc cf       	rjmp	.-8      	; 0xac4 <uart_send_line+0x8>
     acc:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     ad0:	f6 cf       	rjmp	.-20     	; 0xabe <uart_send_line+0x2>
     ad2:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     ad6:	85 ff       	sbrs	r24, 5
     ad8:	fc cf       	rjmp	.-8      	; 0xad2 <uart_send_line+0x16>
     ada:	8a e0       	ldi	r24, 0x0A	; 10
     adc:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     ae0:	08 95       	ret

00000ae2 <uart_flush>:

void uart_flush(){
	uint8_t dummy;
	while ( UCSR0A & (1<<RXC0) ) dummy = UDR0;
     ae2:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     ae6:	87 ff       	sbrs	r24, 7
     ae8:	03 c0       	rjmp	.+6      	; 0xaf0 <uart_flush+0xe>
     aea:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     aee:	f9 cf       	rjmp	.-14     	; 0xae2 <uart_flush>
}
     af0:	08 95       	ret

00000af2 <uart_init>:

void uart_init(){
	UBRR0 = 0;		//0==500000 baud rate.  12==38400 baud rate
     af2:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
     af6:	10 92 c4 00 	sts	0x00C4, r1	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UCSR0B = (1<<RXEN0)|(1<<TXEN0)|(1<<RXCIE0);
     afa:	88 e9       	ldi	r24, 0x98	; 152
     afc:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	/* Set frame format: 8data, 1stop bit */
	UCSR0C = (0<<USBS0)|(3<<UCSZ00);
     b00:	86 e0       	ldi	r24, 0x06	; 6
     b02:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
     b06:	08 95       	ret

00000b08 <__divsf3>:
     b08:	0e 94 98 05 	call	0xb30	; 0xb30 <__divsf3x>
     b0c:	0c 94 79 06 	jmp	0xcf2	; 0xcf2 <__fp_round>
     b10:	0e 94 72 06 	call	0xce4	; 0xce4 <__fp_pscB>
     b14:	58 f0       	brcs	.+22     	; 0xb2c <__divsf3+0x24>
     b16:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <__fp_pscA>
     b1a:	40 f0       	brcs	.+16     	; 0xb2c <__divsf3+0x24>
     b1c:	29 f4       	brne	.+10     	; 0xb28 <__divsf3+0x20>
     b1e:	5f 3f       	cpi	r21, 0xFF	; 255
     b20:	29 f0       	breq	.+10     	; 0xb2c <__divsf3+0x24>
     b22:	0c 94 62 06 	jmp	0xcc4	; 0xcc4 <__fp_inf>
     b26:	51 11       	cpse	r21, r1
     b28:	0c 94 ad 06 	jmp	0xd5a	; 0xd5a <__fp_szero>
     b2c:	0c 94 68 06 	jmp	0xcd0	; 0xcd0 <__fp_nan>

00000b30 <__divsf3x>:
     b30:	0e 94 8a 06 	call	0xd14	; 0xd14 <__fp_split3>
     b34:	68 f3       	brcs	.-38     	; 0xb10 <__divsf3+0x8>

00000b36 <__divsf3_pse>:
     b36:	99 23       	and	r25, r25
     b38:	b1 f3       	breq	.-20     	; 0xb26 <__divsf3+0x1e>
     b3a:	55 23       	and	r21, r21
     b3c:	91 f3       	breq	.-28     	; 0xb22 <__divsf3+0x1a>
     b3e:	95 1b       	sub	r25, r21
     b40:	55 0b       	sbc	r21, r21
     b42:	bb 27       	eor	r27, r27
     b44:	aa 27       	eor	r26, r26
     b46:	62 17       	cp	r22, r18
     b48:	73 07       	cpc	r23, r19
     b4a:	84 07       	cpc	r24, r20
     b4c:	38 f0       	brcs	.+14     	; 0xb5c <__divsf3_pse+0x26>
     b4e:	9f 5f       	subi	r25, 0xFF	; 255
     b50:	5f 4f       	sbci	r21, 0xFF	; 255
     b52:	22 0f       	add	r18, r18
     b54:	33 1f       	adc	r19, r19
     b56:	44 1f       	adc	r20, r20
     b58:	aa 1f       	adc	r26, r26
     b5a:	a9 f3       	breq	.-22     	; 0xb46 <__divsf3_pse+0x10>
     b5c:	35 d0       	rcall	.+106    	; 0xbc8 <__divsf3_pse+0x92>
     b5e:	0e 2e       	mov	r0, r30
     b60:	3a f0       	brmi	.+14     	; 0xb70 <__divsf3_pse+0x3a>
     b62:	e0 e8       	ldi	r30, 0x80	; 128
     b64:	32 d0       	rcall	.+100    	; 0xbca <__divsf3_pse+0x94>
     b66:	91 50       	subi	r25, 0x01	; 1
     b68:	50 40       	sbci	r21, 0x00	; 0
     b6a:	e6 95       	lsr	r30
     b6c:	00 1c       	adc	r0, r0
     b6e:	ca f7       	brpl	.-14     	; 0xb62 <__divsf3_pse+0x2c>
     b70:	2b d0       	rcall	.+86     	; 0xbc8 <__divsf3_pse+0x92>
     b72:	fe 2f       	mov	r31, r30
     b74:	29 d0       	rcall	.+82     	; 0xbc8 <__divsf3_pse+0x92>
     b76:	66 0f       	add	r22, r22
     b78:	77 1f       	adc	r23, r23
     b7a:	88 1f       	adc	r24, r24
     b7c:	bb 1f       	adc	r27, r27
     b7e:	26 17       	cp	r18, r22
     b80:	37 07       	cpc	r19, r23
     b82:	48 07       	cpc	r20, r24
     b84:	ab 07       	cpc	r26, r27
     b86:	b0 e8       	ldi	r27, 0x80	; 128
     b88:	09 f0       	breq	.+2      	; 0xb8c <__divsf3_pse+0x56>
     b8a:	bb 0b       	sbc	r27, r27
     b8c:	80 2d       	mov	r24, r0
     b8e:	bf 01       	movw	r22, r30
     b90:	ff 27       	eor	r31, r31
     b92:	93 58       	subi	r25, 0x83	; 131
     b94:	5f 4f       	sbci	r21, 0xFF	; 255
     b96:	3a f0       	brmi	.+14     	; 0xba6 <__divsf3_pse+0x70>
     b98:	9e 3f       	cpi	r25, 0xFE	; 254
     b9a:	51 05       	cpc	r21, r1
     b9c:	78 f0       	brcs	.+30     	; 0xbbc <__divsf3_pse+0x86>
     b9e:	0c 94 62 06 	jmp	0xcc4	; 0xcc4 <__fp_inf>
     ba2:	0c 94 ad 06 	jmp	0xd5a	; 0xd5a <__fp_szero>
     ba6:	5f 3f       	cpi	r21, 0xFF	; 255
     ba8:	e4 f3       	brlt	.-8      	; 0xba2 <__divsf3_pse+0x6c>
     baa:	98 3e       	cpi	r25, 0xE8	; 232
     bac:	d4 f3       	brlt	.-12     	; 0xba2 <__divsf3_pse+0x6c>
     bae:	86 95       	lsr	r24
     bb0:	77 95       	ror	r23
     bb2:	67 95       	ror	r22
     bb4:	b7 95       	ror	r27
     bb6:	f7 95       	ror	r31
     bb8:	9f 5f       	subi	r25, 0xFF	; 255
     bba:	c9 f7       	brne	.-14     	; 0xbae <__divsf3_pse+0x78>
     bbc:	88 0f       	add	r24, r24
     bbe:	91 1d       	adc	r25, r1
     bc0:	96 95       	lsr	r25
     bc2:	87 95       	ror	r24
     bc4:	97 f9       	bld	r25, 7
     bc6:	08 95       	ret
     bc8:	e1 e0       	ldi	r30, 0x01	; 1
     bca:	66 0f       	add	r22, r22
     bcc:	77 1f       	adc	r23, r23
     bce:	88 1f       	adc	r24, r24
     bd0:	bb 1f       	adc	r27, r27
     bd2:	62 17       	cp	r22, r18
     bd4:	73 07       	cpc	r23, r19
     bd6:	84 07       	cpc	r24, r20
     bd8:	ba 07       	cpc	r27, r26
     bda:	20 f0       	brcs	.+8      	; 0xbe4 <__divsf3_pse+0xae>
     bdc:	62 1b       	sub	r22, r18
     bde:	73 0b       	sbc	r23, r19
     be0:	84 0b       	sbc	r24, r20
     be2:	ba 0b       	sbc	r27, r26
     be4:	ee 1f       	adc	r30, r30
     be6:	88 f7       	brcc	.-30     	; 0xbca <__divsf3_pse+0x94>
     be8:	e0 95       	com	r30
     bea:	08 95       	ret

00000bec <__fixunssfsi>:
     bec:	0e 94 92 06 	call	0xd24	; 0xd24 <__fp_splitA>
     bf0:	88 f0       	brcs	.+34     	; 0xc14 <__fixunssfsi+0x28>
     bf2:	9f 57       	subi	r25, 0x7F	; 127
     bf4:	98 f0       	brcs	.+38     	; 0xc1c <__fixunssfsi+0x30>
     bf6:	b9 2f       	mov	r27, r25
     bf8:	99 27       	eor	r25, r25
     bfa:	b7 51       	subi	r27, 0x17	; 23
     bfc:	b0 f0       	brcs	.+44     	; 0xc2a <__fixunssfsi+0x3e>
     bfe:	e1 f0       	breq	.+56     	; 0xc38 <__fixunssfsi+0x4c>
     c00:	66 0f       	add	r22, r22
     c02:	77 1f       	adc	r23, r23
     c04:	88 1f       	adc	r24, r24
     c06:	99 1f       	adc	r25, r25
     c08:	1a f0       	brmi	.+6      	; 0xc10 <__fixunssfsi+0x24>
     c0a:	ba 95       	dec	r27
     c0c:	c9 f7       	brne	.-14     	; 0xc00 <__fixunssfsi+0x14>
     c0e:	14 c0       	rjmp	.+40     	; 0xc38 <__fixunssfsi+0x4c>
     c10:	b1 30       	cpi	r27, 0x01	; 1
     c12:	91 f0       	breq	.+36     	; 0xc38 <__fixunssfsi+0x4c>
     c14:	0e 94 ac 06 	call	0xd58	; 0xd58 <__fp_zero>
     c18:	b1 e0       	ldi	r27, 0x01	; 1
     c1a:	08 95       	ret
     c1c:	0c 94 ac 06 	jmp	0xd58	; 0xd58 <__fp_zero>
     c20:	67 2f       	mov	r22, r23
     c22:	78 2f       	mov	r23, r24
     c24:	88 27       	eor	r24, r24
     c26:	b8 5f       	subi	r27, 0xF8	; 248
     c28:	39 f0       	breq	.+14     	; 0xc38 <__fixunssfsi+0x4c>
     c2a:	b9 3f       	cpi	r27, 0xF9	; 249
     c2c:	cc f3       	brlt	.-14     	; 0xc20 <__fixunssfsi+0x34>
     c2e:	86 95       	lsr	r24
     c30:	77 95       	ror	r23
     c32:	67 95       	ror	r22
     c34:	b3 95       	inc	r27
     c36:	d9 f7       	brne	.-10     	; 0xc2e <__fixunssfsi+0x42>
     c38:	3e f4       	brtc	.+14     	; 0xc48 <__fixunssfsi+0x5c>
     c3a:	90 95       	com	r25
     c3c:	80 95       	com	r24
     c3e:	70 95       	com	r23
     c40:	61 95       	neg	r22
     c42:	7f 4f       	sbci	r23, 0xFF	; 255
     c44:	8f 4f       	sbci	r24, 0xFF	; 255
     c46:	9f 4f       	sbci	r25, 0xFF	; 255
     c48:	08 95       	ret

00000c4a <__floatunsisf>:
     c4a:	e8 94       	clt
     c4c:	09 c0       	rjmp	.+18     	; 0xc60 <__floatsisf+0x12>

00000c4e <__floatsisf>:
     c4e:	97 fb       	bst	r25, 7
     c50:	3e f4       	brtc	.+14     	; 0xc60 <__floatsisf+0x12>
     c52:	90 95       	com	r25
     c54:	80 95       	com	r24
     c56:	70 95       	com	r23
     c58:	61 95       	neg	r22
     c5a:	7f 4f       	sbci	r23, 0xFF	; 255
     c5c:	8f 4f       	sbci	r24, 0xFF	; 255
     c5e:	9f 4f       	sbci	r25, 0xFF	; 255
     c60:	99 23       	and	r25, r25
     c62:	a9 f0       	breq	.+42     	; 0xc8e <__floatsisf+0x40>
     c64:	f9 2f       	mov	r31, r25
     c66:	96 e9       	ldi	r25, 0x96	; 150
     c68:	bb 27       	eor	r27, r27
     c6a:	93 95       	inc	r25
     c6c:	f6 95       	lsr	r31
     c6e:	87 95       	ror	r24
     c70:	77 95       	ror	r23
     c72:	67 95       	ror	r22
     c74:	b7 95       	ror	r27
     c76:	f1 11       	cpse	r31, r1
     c78:	f8 cf       	rjmp	.-16     	; 0xc6a <__floatsisf+0x1c>
     c7a:	fa f4       	brpl	.+62     	; 0xcba <__floatsisf+0x6c>
     c7c:	bb 0f       	add	r27, r27
     c7e:	11 f4       	brne	.+4      	; 0xc84 <__floatsisf+0x36>
     c80:	60 ff       	sbrs	r22, 0
     c82:	1b c0       	rjmp	.+54     	; 0xcba <__floatsisf+0x6c>
     c84:	6f 5f       	subi	r22, 0xFF	; 255
     c86:	7f 4f       	sbci	r23, 0xFF	; 255
     c88:	8f 4f       	sbci	r24, 0xFF	; 255
     c8a:	9f 4f       	sbci	r25, 0xFF	; 255
     c8c:	16 c0       	rjmp	.+44     	; 0xcba <__floatsisf+0x6c>
     c8e:	88 23       	and	r24, r24
     c90:	11 f0       	breq	.+4      	; 0xc96 <__floatsisf+0x48>
     c92:	96 e9       	ldi	r25, 0x96	; 150
     c94:	11 c0       	rjmp	.+34     	; 0xcb8 <__floatsisf+0x6a>
     c96:	77 23       	and	r23, r23
     c98:	21 f0       	breq	.+8      	; 0xca2 <__floatsisf+0x54>
     c9a:	9e e8       	ldi	r25, 0x8E	; 142
     c9c:	87 2f       	mov	r24, r23
     c9e:	76 2f       	mov	r23, r22
     ca0:	05 c0       	rjmp	.+10     	; 0xcac <__floatsisf+0x5e>
     ca2:	66 23       	and	r22, r22
     ca4:	71 f0       	breq	.+28     	; 0xcc2 <__floatsisf+0x74>
     ca6:	96 e8       	ldi	r25, 0x86	; 134
     ca8:	86 2f       	mov	r24, r22
     caa:	70 e0       	ldi	r23, 0x00	; 0
     cac:	60 e0       	ldi	r22, 0x00	; 0
     cae:	2a f0       	brmi	.+10     	; 0xcba <__floatsisf+0x6c>
     cb0:	9a 95       	dec	r25
     cb2:	66 0f       	add	r22, r22
     cb4:	77 1f       	adc	r23, r23
     cb6:	88 1f       	adc	r24, r24
     cb8:	da f7       	brpl	.-10     	; 0xcb0 <__floatsisf+0x62>
     cba:	88 0f       	add	r24, r24
     cbc:	96 95       	lsr	r25
     cbe:	87 95       	ror	r24
     cc0:	97 f9       	bld	r25, 7
     cc2:	08 95       	ret

00000cc4 <__fp_inf>:
     cc4:	97 f9       	bld	r25, 7
     cc6:	9f 67       	ori	r25, 0x7F	; 127
     cc8:	80 e8       	ldi	r24, 0x80	; 128
     cca:	70 e0       	ldi	r23, 0x00	; 0
     ccc:	60 e0       	ldi	r22, 0x00	; 0
     cce:	08 95       	ret

00000cd0 <__fp_nan>:
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	80 ec       	ldi	r24, 0xC0	; 192
     cd4:	08 95       	ret

00000cd6 <__fp_pscA>:
     cd6:	00 24       	eor	r0, r0
     cd8:	0a 94       	dec	r0
     cda:	16 16       	cp	r1, r22
     cdc:	17 06       	cpc	r1, r23
     cde:	18 06       	cpc	r1, r24
     ce0:	09 06       	cpc	r0, r25
     ce2:	08 95       	ret

00000ce4 <__fp_pscB>:
     ce4:	00 24       	eor	r0, r0
     ce6:	0a 94       	dec	r0
     ce8:	12 16       	cp	r1, r18
     cea:	13 06       	cpc	r1, r19
     cec:	14 06       	cpc	r1, r20
     cee:	05 06       	cpc	r0, r21
     cf0:	08 95       	ret

00000cf2 <__fp_round>:
     cf2:	09 2e       	mov	r0, r25
     cf4:	03 94       	inc	r0
     cf6:	00 0c       	add	r0, r0
     cf8:	11 f4       	brne	.+4      	; 0xcfe <__fp_round+0xc>
     cfa:	88 23       	and	r24, r24
     cfc:	52 f0       	brmi	.+20     	; 0xd12 <__fp_round+0x20>
     cfe:	bb 0f       	add	r27, r27
     d00:	40 f4       	brcc	.+16     	; 0xd12 <__fp_round+0x20>
     d02:	bf 2b       	or	r27, r31
     d04:	11 f4       	brne	.+4      	; 0xd0a <__fp_round+0x18>
     d06:	60 ff       	sbrs	r22, 0
     d08:	04 c0       	rjmp	.+8      	; 0xd12 <__fp_round+0x20>
     d0a:	6f 5f       	subi	r22, 0xFF	; 255
     d0c:	7f 4f       	sbci	r23, 0xFF	; 255
     d0e:	8f 4f       	sbci	r24, 0xFF	; 255
     d10:	9f 4f       	sbci	r25, 0xFF	; 255
     d12:	08 95       	ret

00000d14 <__fp_split3>:
     d14:	57 fd       	sbrc	r21, 7
     d16:	90 58       	subi	r25, 0x80	; 128
     d18:	44 0f       	add	r20, r20
     d1a:	55 1f       	adc	r21, r21
     d1c:	59 f0       	breq	.+22     	; 0xd34 <__fp_splitA+0x10>
     d1e:	5f 3f       	cpi	r21, 0xFF	; 255
     d20:	71 f0       	breq	.+28     	; 0xd3e <__fp_splitA+0x1a>
     d22:	47 95       	ror	r20

00000d24 <__fp_splitA>:
     d24:	88 0f       	add	r24, r24
     d26:	97 fb       	bst	r25, 7
     d28:	99 1f       	adc	r25, r25
     d2a:	61 f0       	breq	.+24     	; 0xd44 <__fp_splitA+0x20>
     d2c:	9f 3f       	cpi	r25, 0xFF	; 255
     d2e:	79 f0       	breq	.+30     	; 0xd4e <__fp_splitA+0x2a>
     d30:	87 95       	ror	r24
     d32:	08 95       	ret
     d34:	12 16       	cp	r1, r18
     d36:	13 06       	cpc	r1, r19
     d38:	14 06       	cpc	r1, r20
     d3a:	55 1f       	adc	r21, r21
     d3c:	f2 cf       	rjmp	.-28     	; 0xd22 <__fp_split3+0xe>
     d3e:	46 95       	lsr	r20
     d40:	f1 df       	rcall	.-30     	; 0xd24 <__fp_splitA>
     d42:	08 c0       	rjmp	.+16     	; 0xd54 <__fp_splitA+0x30>
     d44:	16 16       	cp	r1, r22
     d46:	17 06       	cpc	r1, r23
     d48:	18 06       	cpc	r1, r24
     d4a:	99 1f       	adc	r25, r25
     d4c:	f1 cf       	rjmp	.-30     	; 0xd30 <__fp_splitA+0xc>
     d4e:	86 95       	lsr	r24
     d50:	71 05       	cpc	r23, r1
     d52:	61 05       	cpc	r22, r1
     d54:	08 94       	sec
     d56:	08 95       	ret

00000d58 <__fp_zero>:
     d58:	e8 94       	clt

00000d5a <__fp_szero>:
     d5a:	bb 27       	eor	r27, r27
     d5c:	66 27       	eor	r22, r22
     d5e:	77 27       	eor	r23, r23
     d60:	cb 01       	movw	r24, r22
     d62:	97 f9       	bld	r25, 7
     d64:	08 95       	ret

00000d66 <pow>:
     d66:	fa 01       	movw	r30, r20
     d68:	ee 0f       	add	r30, r30
     d6a:	ff 1f       	adc	r31, r31
     d6c:	30 96       	adiw	r30, 0x00	; 0
     d6e:	21 05       	cpc	r18, r1
     d70:	31 05       	cpc	r19, r1
     d72:	a1 f1       	breq	.+104    	; 0xddc <pow+0x76>
     d74:	61 15       	cp	r22, r1
     d76:	71 05       	cpc	r23, r1
     d78:	61 f4       	brne	.+24     	; 0xd92 <pow+0x2c>
     d7a:	80 38       	cpi	r24, 0x80	; 128
     d7c:	bf e3       	ldi	r27, 0x3F	; 63
     d7e:	9b 07       	cpc	r25, r27
     d80:	49 f1       	breq	.+82     	; 0xdd4 <pow+0x6e>
     d82:	68 94       	set
     d84:	90 38       	cpi	r25, 0x80	; 128
     d86:	81 05       	cpc	r24, r1
     d88:	61 f0       	breq	.+24     	; 0xda2 <pow+0x3c>
     d8a:	80 38       	cpi	r24, 0x80	; 128
     d8c:	bf ef       	ldi	r27, 0xFF	; 255
     d8e:	9b 07       	cpc	r25, r27
     d90:	41 f0       	breq	.+16     	; 0xda2 <pow+0x3c>
     d92:	99 23       	and	r25, r25
     d94:	4a f5       	brpl	.+82     	; 0xde8 <pow+0x82>
     d96:	ff 3f       	cpi	r31, 0xFF	; 255
     d98:	e1 05       	cpc	r30, r1
     d9a:	31 05       	cpc	r19, r1
     d9c:	21 05       	cpc	r18, r1
     d9e:	19 f1       	breq	.+70     	; 0xde6 <pow+0x80>
     da0:	e8 94       	clt
     da2:	08 94       	sec
     da4:	e7 95       	ror	r30
     da6:	d9 01       	movw	r26, r18
     da8:	aa 23       	and	r26, r26
     daa:	29 f4       	brne	.+10     	; 0xdb6 <pow+0x50>
     dac:	ab 2f       	mov	r26, r27
     dae:	be 2f       	mov	r27, r30
     db0:	f8 5f       	subi	r31, 0xF8	; 248
     db2:	d0 f3       	brcs	.-12     	; 0xda8 <pow+0x42>
     db4:	10 c0       	rjmp	.+32     	; 0xdd6 <pow+0x70>
     db6:	ff 5f       	subi	r31, 0xFF	; 255
     db8:	70 f4       	brcc	.+28     	; 0xdd6 <pow+0x70>
     dba:	a6 95       	lsr	r26
     dbc:	e0 f7       	brcc	.-8      	; 0xdb6 <pow+0x50>
     dbe:	f7 39       	cpi	r31, 0x97	; 151
     dc0:	50 f0       	brcs	.+20     	; 0xdd6 <pow+0x70>
     dc2:	19 f0       	breq	.+6      	; 0xdca <pow+0x64>
     dc4:	ff 3a       	cpi	r31, 0xAF	; 175
     dc6:	38 f4       	brcc	.+14     	; 0xdd6 <pow+0x70>
     dc8:	9f 77       	andi	r25, 0x7F	; 127
     dca:	9f 93       	push	r25
     dcc:	0d d0       	rcall	.+26     	; 0xde8 <pow+0x82>
     dce:	0f 90       	pop	r0
     dd0:	07 fc       	sbrc	r0, 7
     dd2:	90 58       	subi	r25, 0x80	; 128
     dd4:	08 95       	ret
     dd6:	46 f0       	brts	.+16     	; 0xde8 <pow+0x82>
     dd8:	0c 94 68 06 	jmp	0xcd0	; 0xcd0 <__fp_nan>
     ddc:	60 e0       	ldi	r22, 0x00	; 0
     dde:	70 e0       	ldi	r23, 0x00	; 0
     de0:	80 e8       	ldi	r24, 0x80	; 128
     de2:	9f e3       	ldi	r25, 0x3F	; 63
     de4:	08 95       	ret
     de6:	4f e7       	ldi	r20, 0x7F	; 127
     de8:	9f 77       	andi	r25, 0x7F	; 127
     dea:	5f 93       	push	r21
     dec:	4f 93       	push	r20
     dee:	3f 93       	push	r19
     df0:	2f 93       	push	r18
     df2:	0e 94 ae 07 	call	0xf5c	; 0xf5c <log>
     df6:	2f 91       	pop	r18
     df8:	3f 91       	pop	r19
     dfa:	4f 91       	pop	r20
     dfc:	5f 91       	pop	r21
     dfe:	0e 94 2a 08 	call	0x1054	; 0x1054 <__mulsf3>
     e02:	0c 94 0b 07 	jmp	0xe16	; 0xe16 <exp>
     e06:	29 f4       	brne	.+10     	; 0xe12 <pow+0xac>
     e08:	16 f0       	brts	.+4      	; 0xe0e <pow+0xa8>
     e0a:	0c 94 62 06 	jmp	0xcc4	; 0xcc4 <__fp_inf>
     e0e:	0c 94 ac 06 	jmp	0xd58	; 0xd58 <__fp_zero>
     e12:	0c 94 68 06 	jmp	0xcd0	; 0xcd0 <__fp_nan>

00000e16 <exp>:
     e16:	0e 94 92 06 	call	0xd24	; 0xd24 <__fp_splitA>
     e1a:	a8 f3       	brcs	.-22     	; 0xe06 <pow+0xa0>
     e1c:	96 38       	cpi	r25, 0x86	; 134
     e1e:	a0 f7       	brcc	.-24     	; 0xe08 <pow+0xa2>
     e20:	07 f8       	bld	r0, 7
     e22:	0f 92       	push	r0
     e24:	e8 94       	clt
     e26:	2b e3       	ldi	r18, 0x3B	; 59
     e28:	3a ea       	ldi	r19, 0xAA	; 170
     e2a:	48 eb       	ldi	r20, 0xB8	; 184
     e2c:	5f e7       	ldi	r21, 0x7F	; 127
     e2e:	0e 94 40 08 	call	0x1080	; 0x1080 <__mulsf3_pse>
     e32:	0f 92       	push	r0
     e34:	0f 92       	push	r0
     e36:	0f 92       	push	r0
     e38:	4d b7       	in	r20, 0x3d	; 61
     e3a:	5e b7       	in	r21, 0x3e	; 62
     e3c:	0f 92       	push	r0
     e3e:	0e 94 f6 07 	call	0xfec	; 0xfec <modf>
     e42:	e8 e6       	ldi	r30, 0x68	; 104
     e44:	f0 e0       	ldi	r31, 0x00	; 0
     e46:	0e 94 3d 07 	call	0xe7a	; 0xe7a <__fp_powser>
     e4a:	4f 91       	pop	r20
     e4c:	5f 91       	pop	r21
     e4e:	ef 91       	pop	r30
     e50:	ff 91       	pop	r31
     e52:	e5 95       	asr	r30
     e54:	ee 1f       	adc	r30, r30
     e56:	ff 1f       	adc	r31, r31
     e58:	49 f0       	breq	.+18     	; 0xe6c <exp+0x56>
     e5a:	fe 57       	subi	r31, 0x7E	; 126
     e5c:	e0 68       	ori	r30, 0x80	; 128
     e5e:	44 27       	eor	r20, r20
     e60:	ee 0f       	add	r30, r30
     e62:	44 1f       	adc	r20, r20
     e64:	fa 95       	dec	r31
     e66:	e1 f7       	brne	.-8      	; 0xe60 <exp+0x4a>
     e68:	41 95       	neg	r20
     e6a:	55 0b       	sbc	r21, r21
     e6c:	0e 94 70 07 	call	0xee0	; 0xee0 <ldexp>
     e70:	0f 90       	pop	r0
     e72:	07 fe       	sbrs	r0, 7
     e74:	0c 94 64 07 	jmp	0xec8	; 0xec8 <inverse>
     e78:	08 95       	ret

00000e7a <__fp_powser>:
     e7a:	df 93       	push	r29
     e7c:	cf 93       	push	r28
     e7e:	1f 93       	push	r17
     e80:	0f 93       	push	r16
     e82:	ff 92       	push	r15
     e84:	ef 92       	push	r14
     e86:	df 92       	push	r13
     e88:	7b 01       	movw	r14, r22
     e8a:	8c 01       	movw	r16, r24
     e8c:	68 94       	set
     e8e:	06 c0       	rjmp	.+12     	; 0xe9c <__fp_powser+0x22>
     e90:	da 2e       	mov	r13, r26
     e92:	ef 01       	movw	r28, r30
     e94:	0e 94 3d 08 	call	0x107a	; 0x107a <__mulsf3x>
     e98:	fe 01       	movw	r30, r28
     e9a:	e8 94       	clt
     e9c:	a5 91       	lpm	r26, Z+
     e9e:	25 91       	lpm	r18, Z+
     ea0:	35 91       	lpm	r19, Z+
     ea2:	45 91       	lpm	r20, Z+
     ea4:	55 91       	lpm	r21, Z+
     ea6:	a6 f3       	brts	.-24     	; 0xe90 <__fp_powser+0x16>
     ea8:	ef 01       	movw	r28, r30
     eaa:	0e 94 af 08 	call	0x115e	; 0x115e <__addsf3x>
     eae:	fe 01       	movw	r30, r28
     eb0:	97 01       	movw	r18, r14
     eb2:	a8 01       	movw	r20, r16
     eb4:	da 94       	dec	r13
     eb6:	69 f7       	brne	.-38     	; 0xe92 <__fp_powser+0x18>
     eb8:	df 90       	pop	r13
     eba:	ef 90       	pop	r14
     ebc:	ff 90       	pop	r15
     ebe:	0f 91       	pop	r16
     ec0:	1f 91       	pop	r17
     ec2:	cf 91       	pop	r28
     ec4:	df 91       	pop	r29
     ec6:	08 95       	ret

00000ec8 <inverse>:
     ec8:	9b 01       	movw	r18, r22
     eca:	ac 01       	movw	r20, r24
     ecc:	60 e0       	ldi	r22, 0x00	; 0
     ece:	70 e0       	ldi	r23, 0x00	; 0
     ed0:	80 e8       	ldi	r24, 0x80	; 128
     ed2:	9f e3       	ldi	r25, 0x3F	; 63
     ed4:	0c 94 84 05 	jmp	0xb08	; 0xb08 <__divsf3>
     ed8:	0c 94 62 06 	jmp	0xcc4	; 0xcc4 <__fp_inf>
     edc:	0c 94 04 09 	jmp	0x1208	; 0x1208 <__fp_mpack>

00000ee0 <ldexp>:
     ee0:	0e 94 92 06 	call	0xd24	; 0xd24 <__fp_splitA>
     ee4:	d8 f3       	brcs	.-10     	; 0xedc <inverse+0x14>
     ee6:	99 23       	and	r25, r25
     ee8:	c9 f3       	breq	.-14     	; 0xedc <inverse+0x14>
     eea:	94 0f       	add	r25, r20
     eec:	51 1d       	adc	r21, r1
     eee:	a3 f3       	brvs	.-24     	; 0xed8 <inverse+0x10>
     ef0:	91 50       	subi	r25, 0x01	; 1
     ef2:	50 40       	sbci	r21, 0x00	; 0
     ef4:	94 f0       	brlt	.+36     	; 0xf1a <ldexp+0x3a>
     ef6:	59 f0       	breq	.+22     	; 0xf0e <ldexp+0x2e>
     ef8:	88 23       	and	r24, r24
     efa:	32 f0       	brmi	.+12     	; 0xf08 <ldexp+0x28>
     efc:	66 0f       	add	r22, r22
     efe:	77 1f       	adc	r23, r23
     f00:	88 1f       	adc	r24, r24
     f02:	91 50       	subi	r25, 0x01	; 1
     f04:	50 40       	sbci	r21, 0x00	; 0
     f06:	c1 f7       	brne	.-16     	; 0xef8 <ldexp+0x18>
     f08:	9e 3f       	cpi	r25, 0xFE	; 254
     f0a:	51 05       	cpc	r21, r1
     f0c:	2c f7       	brge	.-54     	; 0xed8 <inverse+0x10>
     f0e:	88 0f       	add	r24, r24
     f10:	91 1d       	adc	r25, r1
     f12:	96 95       	lsr	r25
     f14:	87 95       	ror	r24
     f16:	97 f9       	bld	r25, 7
     f18:	08 95       	ret
     f1a:	5f 3f       	cpi	r21, 0xFF	; 255
     f1c:	ac f0       	brlt	.+42     	; 0xf48 <ldexp+0x68>
     f1e:	98 3e       	cpi	r25, 0xE8	; 232
     f20:	9c f0       	brlt	.+38     	; 0xf48 <ldexp+0x68>
     f22:	bb 27       	eor	r27, r27
     f24:	86 95       	lsr	r24
     f26:	77 95       	ror	r23
     f28:	67 95       	ror	r22
     f2a:	b7 95       	ror	r27
     f2c:	08 f4       	brcc	.+2      	; 0xf30 <ldexp+0x50>
     f2e:	b1 60       	ori	r27, 0x01	; 1
     f30:	93 95       	inc	r25
     f32:	c1 f7       	brne	.-16     	; 0xf24 <ldexp+0x44>
     f34:	bb 0f       	add	r27, r27
     f36:	58 f7       	brcc	.-42     	; 0xf0e <ldexp+0x2e>
     f38:	11 f4       	brne	.+4      	; 0xf3e <ldexp+0x5e>
     f3a:	60 ff       	sbrs	r22, 0
     f3c:	e8 cf       	rjmp	.-48     	; 0xf0e <ldexp+0x2e>
     f3e:	6f 5f       	subi	r22, 0xFF	; 255
     f40:	7f 4f       	sbci	r23, 0xFF	; 255
     f42:	8f 4f       	sbci	r24, 0xFF	; 255
     f44:	9f 4f       	sbci	r25, 0xFF	; 255
     f46:	e3 cf       	rjmp	.-58     	; 0xf0e <ldexp+0x2e>
     f48:	0c 94 ad 06 	jmp	0xd5a	; 0xd5a <__fp_szero>
     f4c:	16 f0       	brts	.+4      	; 0xf52 <ldexp+0x72>
     f4e:	0c 94 04 09 	jmp	0x1208	; 0x1208 <__fp_mpack>
     f52:	0c 94 68 06 	jmp	0xcd0	; 0xcd0 <__fp_nan>
     f56:	68 94       	set
     f58:	0c 94 62 06 	jmp	0xcc4	; 0xcc4 <__fp_inf>

00000f5c <log>:
     f5c:	0e 94 92 06 	call	0xd24	; 0xd24 <__fp_splitA>
     f60:	a8 f3       	brcs	.-22     	; 0xf4c <ldexp+0x6c>
     f62:	99 23       	and	r25, r25
     f64:	c1 f3       	breq	.-16     	; 0xf56 <ldexp+0x76>
     f66:	ae f3       	brts	.-22     	; 0xf52 <ldexp+0x72>
     f68:	df 93       	push	r29
     f6a:	cf 93       	push	r28
     f6c:	1f 93       	push	r17
     f6e:	0f 93       	push	r16
     f70:	ff 92       	push	r15
     f72:	c9 2f       	mov	r28, r25
     f74:	dd 27       	eor	r29, r29
     f76:	88 23       	and	r24, r24
     f78:	2a f0       	brmi	.+10     	; 0xf84 <log+0x28>
     f7a:	21 97       	sbiw	r28, 0x01	; 1
     f7c:	66 0f       	add	r22, r22
     f7e:	77 1f       	adc	r23, r23
     f80:	88 1f       	adc	r24, r24
     f82:	da f7       	brpl	.-10     	; 0xf7a <log+0x1e>
     f84:	20 e0       	ldi	r18, 0x00	; 0
     f86:	30 e0       	ldi	r19, 0x00	; 0
     f88:	40 e8       	ldi	r20, 0x80	; 128
     f8a:	5f eb       	ldi	r21, 0xBF	; 191
     f8c:	9f e3       	ldi	r25, 0x3F	; 63
     f8e:	88 39       	cpi	r24, 0x98	; 152
     f90:	20 f0       	brcs	.+8      	; 0xf9a <log+0x3e>
     f92:	80 3e       	cpi	r24, 0xE0	; 224
     f94:	38 f0       	brcs	.+14     	; 0xfa4 <log+0x48>
     f96:	21 96       	adiw	r28, 0x01	; 1
     f98:	8f 77       	andi	r24, 0x7F	; 127
     f9a:	0e 94 98 08 	call	0x1130	; 0x1130 <__addsf3>
     f9e:	e0 e9       	ldi	r30, 0x90	; 144
     fa0:	f0 e0       	ldi	r31, 0x00	; 0
     fa2:	04 c0       	rjmp	.+8      	; 0xfac <log+0x50>
     fa4:	0e 94 98 08 	call	0x1130	; 0x1130 <__addsf3>
     fa8:	ed eb       	ldi	r30, 0xBD	; 189
     faa:	f0 e0       	ldi	r31, 0x00	; 0
     fac:	0e 94 3d 07 	call	0xe7a	; 0xe7a <__fp_powser>
     fb0:	8b 01       	movw	r16, r22
     fb2:	be 01       	movw	r22, r28
     fb4:	ec 01       	movw	r28, r24
     fb6:	fb 2e       	mov	r15, r27
     fb8:	6f 57       	subi	r22, 0x7F	; 127
     fba:	71 09       	sbc	r23, r1
     fbc:	75 95       	asr	r23
     fbe:	77 1f       	adc	r23, r23
     fc0:	88 0b       	sbc	r24, r24
     fc2:	99 0b       	sbc	r25, r25
     fc4:	0e 94 27 06 	call	0xc4e	; 0xc4e <__floatsisf>
     fc8:	28 e1       	ldi	r18, 0x18	; 24
     fca:	32 e7       	ldi	r19, 0x72	; 114
     fcc:	41 e3       	ldi	r20, 0x31	; 49
     fce:	5f e3       	ldi	r21, 0x3F	; 63
     fd0:	0e 94 3d 08 	call	0x107a	; 0x107a <__mulsf3x>
     fd4:	af 2d       	mov	r26, r15
     fd6:	98 01       	movw	r18, r16
     fd8:	ae 01       	movw	r20, r28
     fda:	ff 90       	pop	r15
     fdc:	0f 91       	pop	r16
     fde:	1f 91       	pop	r17
     fe0:	cf 91       	pop	r28
     fe2:	df 91       	pop	r29
     fe4:	0e 94 af 08 	call	0x115e	; 0x115e <__addsf3x>
     fe8:	0c 94 79 06 	jmp	0xcf2	; 0xcf2 <__fp_round>

00000fec <modf>:
     fec:	fa 01       	movw	r30, r20
     fee:	dc 01       	movw	r26, r24
     ff0:	aa 0f       	add	r26, r26
     ff2:	bb 1f       	adc	r27, r27
     ff4:	9b 01       	movw	r18, r22
     ff6:	ac 01       	movw	r20, r24
     ff8:	bf 57       	subi	r27, 0x7F	; 127
     ffa:	28 f4       	brcc	.+10     	; 0x1006 <modf+0x1a>
     ffc:	22 27       	eor	r18, r18
     ffe:	33 27       	eor	r19, r19
    1000:	44 27       	eor	r20, r20
    1002:	50 78       	andi	r21, 0x80	; 128
    1004:	20 c0       	rjmp	.+64     	; 0x1046 <modf+0x5a>
    1006:	b7 51       	subi	r27, 0x17	; 23
    1008:	90 f4       	brcc	.+36     	; 0x102e <modf+0x42>
    100a:	ab 2f       	mov	r26, r27
    100c:	00 24       	eor	r0, r0
    100e:	46 95       	lsr	r20
    1010:	37 95       	ror	r19
    1012:	27 95       	ror	r18
    1014:	01 1c       	adc	r0, r1
    1016:	a3 95       	inc	r26
    1018:	d2 f3       	brmi	.-12     	; 0x100e <modf+0x22>
    101a:	00 20       	and	r0, r0
    101c:	71 f0       	breq	.+28     	; 0x103a <modf+0x4e>
    101e:	22 0f       	add	r18, r18
    1020:	33 1f       	adc	r19, r19
    1022:	44 1f       	adc	r20, r20
    1024:	b3 95       	inc	r27
    1026:	da f3       	brmi	.-10     	; 0x101e <modf+0x32>
    1028:	0e d0       	rcall	.+28     	; 0x1046 <modf+0x5a>
    102a:	0c 94 97 08 	jmp	0x112e	; 0x112e <__subsf3>
    102e:	61 30       	cpi	r22, 0x01	; 1
    1030:	71 05       	cpc	r23, r1
    1032:	a0 e8       	ldi	r26, 0x80	; 128
    1034:	8a 07       	cpc	r24, r26
    1036:	b9 46       	sbci	r27, 0x69	; 105
    1038:	30 f4       	brcc	.+12     	; 0x1046 <modf+0x5a>
    103a:	9b 01       	movw	r18, r22
    103c:	ac 01       	movw	r20, r24
    103e:	66 27       	eor	r22, r22
    1040:	77 27       	eor	r23, r23
    1042:	88 27       	eor	r24, r24
    1044:	90 78       	andi	r25, 0x80	; 128
    1046:	30 96       	adiw	r30, 0x00	; 0
    1048:	21 f0       	breq	.+8      	; 0x1052 <modf+0x66>
    104a:	20 83       	st	Z, r18
    104c:	31 83       	std	Z+1, r19	; 0x01
    104e:	42 83       	std	Z+2, r20	; 0x02
    1050:	53 83       	std	Z+3, r21	; 0x03
    1052:	08 95       	ret

00001054 <__mulsf3>:
    1054:	0e 94 3d 08 	call	0x107a	; 0x107a <__mulsf3x>
    1058:	0c 94 79 06 	jmp	0xcf2	; 0xcf2 <__fp_round>
    105c:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <__fp_pscA>
    1060:	38 f0       	brcs	.+14     	; 0x1070 <__mulsf3+0x1c>
    1062:	0e 94 72 06 	call	0xce4	; 0xce4 <__fp_pscB>
    1066:	20 f0       	brcs	.+8      	; 0x1070 <__mulsf3+0x1c>
    1068:	95 23       	and	r25, r21
    106a:	11 f0       	breq	.+4      	; 0x1070 <__mulsf3+0x1c>
    106c:	0c 94 62 06 	jmp	0xcc4	; 0xcc4 <__fp_inf>
    1070:	0c 94 68 06 	jmp	0xcd0	; 0xcd0 <__fp_nan>
    1074:	11 24       	eor	r1, r1
    1076:	0c 94 ad 06 	jmp	0xd5a	; 0xd5a <__fp_szero>

0000107a <__mulsf3x>:
    107a:	0e 94 8a 06 	call	0xd14	; 0xd14 <__fp_split3>
    107e:	70 f3       	brcs	.-36     	; 0x105c <__mulsf3+0x8>

00001080 <__mulsf3_pse>:
    1080:	95 9f       	mul	r25, r21
    1082:	c1 f3       	breq	.-16     	; 0x1074 <__mulsf3+0x20>
    1084:	95 0f       	add	r25, r21
    1086:	50 e0       	ldi	r21, 0x00	; 0
    1088:	55 1f       	adc	r21, r21
    108a:	62 9f       	mul	r22, r18
    108c:	f0 01       	movw	r30, r0
    108e:	72 9f       	mul	r23, r18
    1090:	bb 27       	eor	r27, r27
    1092:	f0 0d       	add	r31, r0
    1094:	b1 1d       	adc	r27, r1
    1096:	63 9f       	mul	r22, r19
    1098:	aa 27       	eor	r26, r26
    109a:	f0 0d       	add	r31, r0
    109c:	b1 1d       	adc	r27, r1
    109e:	aa 1f       	adc	r26, r26
    10a0:	64 9f       	mul	r22, r20
    10a2:	66 27       	eor	r22, r22
    10a4:	b0 0d       	add	r27, r0
    10a6:	a1 1d       	adc	r26, r1
    10a8:	66 1f       	adc	r22, r22
    10aa:	82 9f       	mul	r24, r18
    10ac:	22 27       	eor	r18, r18
    10ae:	b0 0d       	add	r27, r0
    10b0:	a1 1d       	adc	r26, r1
    10b2:	62 1f       	adc	r22, r18
    10b4:	73 9f       	mul	r23, r19
    10b6:	b0 0d       	add	r27, r0
    10b8:	a1 1d       	adc	r26, r1
    10ba:	62 1f       	adc	r22, r18
    10bc:	83 9f       	mul	r24, r19
    10be:	a0 0d       	add	r26, r0
    10c0:	61 1d       	adc	r22, r1
    10c2:	22 1f       	adc	r18, r18
    10c4:	74 9f       	mul	r23, r20
    10c6:	33 27       	eor	r19, r19
    10c8:	a0 0d       	add	r26, r0
    10ca:	61 1d       	adc	r22, r1
    10cc:	23 1f       	adc	r18, r19
    10ce:	84 9f       	mul	r24, r20
    10d0:	60 0d       	add	r22, r0
    10d2:	21 1d       	adc	r18, r1
    10d4:	82 2f       	mov	r24, r18
    10d6:	76 2f       	mov	r23, r22
    10d8:	6a 2f       	mov	r22, r26
    10da:	11 24       	eor	r1, r1
    10dc:	9f 57       	subi	r25, 0x7F	; 127
    10de:	50 40       	sbci	r21, 0x00	; 0
    10e0:	9a f0       	brmi	.+38     	; 0x1108 <__mulsf3_pse+0x88>
    10e2:	f1 f0       	breq	.+60     	; 0x1120 <__mulsf3_pse+0xa0>
    10e4:	88 23       	and	r24, r24
    10e6:	4a f0       	brmi	.+18     	; 0x10fa <__mulsf3_pse+0x7a>
    10e8:	ee 0f       	add	r30, r30
    10ea:	ff 1f       	adc	r31, r31
    10ec:	bb 1f       	adc	r27, r27
    10ee:	66 1f       	adc	r22, r22
    10f0:	77 1f       	adc	r23, r23
    10f2:	88 1f       	adc	r24, r24
    10f4:	91 50       	subi	r25, 0x01	; 1
    10f6:	50 40       	sbci	r21, 0x00	; 0
    10f8:	a9 f7       	brne	.-22     	; 0x10e4 <__mulsf3_pse+0x64>
    10fa:	9e 3f       	cpi	r25, 0xFE	; 254
    10fc:	51 05       	cpc	r21, r1
    10fe:	80 f0       	brcs	.+32     	; 0x1120 <__mulsf3_pse+0xa0>
    1100:	0c 94 62 06 	jmp	0xcc4	; 0xcc4 <__fp_inf>
    1104:	0c 94 ad 06 	jmp	0xd5a	; 0xd5a <__fp_szero>
    1108:	5f 3f       	cpi	r21, 0xFF	; 255
    110a:	e4 f3       	brlt	.-8      	; 0x1104 <__mulsf3_pse+0x84>
    110c:	98 3e       	cpi	r25, 0xE8	; 232
    110e:	d4 f3       	brlt	.-12     	; 0x1104 <__mulsf3_pse+0x84>
    1110:	86 95       	lsr	r24
    1112:	77 95       	ror	r23
    1114:	67 95       	ror	r22
    1116:	b7 95       	ror	r27
    1118:	f7 95       	ror	r31
    111a:	e7 95       	ror	r30
    111c:	9f 5f       	subi	r25, 0xFF	; 255
    111e:	c1 f7       	brne	.-16     	; 0x1110 <__mulsf3_pse+0x90>
    1120:	fe 2b       	or	r31, r30
    1122:	88 0f       	add	r24, r24
    1124:	91 1d       	adc	r25, r1
    1126:	96 95       	lsr	r25
    1128:	87 95       	ror	r24
    112a:	97 f9       	bld	r25, 7
    112c:	08 95       	ret

0000112e <__subsf3>:
    112e:	50 58       	subi	r21, 0x80	; 128

00001130 <__addsf3>:
    1130:	bb 27       	eor	r27, r27
    1132:	aa 27       	eor	r26, r26
    1134:	0e 94 af 08 	call	0x115e	; 0x115e <__addsf3x>
    1138:	0c 94 79 06 	jmp	0xcf2	; 0xcf2 <__fp_round>
    113c:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <__fp_pscA>
    1140:	38 f0       	brcs	.+14     	; 0x1150 <__addsf3+0x20>
    1142:	0e 94 72 06 	call	0xce4	; 0xce4 <__fp_pscB>
    1146:	20 f0       	brcs	.+8      	; 0x1150 <__addsf3+0x20>
    1148:	39 f4       	brne	.+14     	; 0x1158 <__addsf3+0x28>
    114a:	9f 3f       	cpi	r25, 0xFF	; 255
    114c:	19 f4       	brne	.+6      	; 0x1154 <__addsf3+0x24>
    114e:	26 f4       	brtc	.+8      	; 0x1158 <__addsf3+0x28>
    1150:	0c 94 68 06 	jmp	0xcd0	; 0xcd0 <__fp_nan>
    1154:	0e f4       	brtc	.+2      	; 0x1158 <__addsf3+0x28>
    1156:	e0 95       	com	r30
    1158:	e7 fb       	bst	r30, 7
    115a:	0c 94 62 06 	jmp	0xcc4	; 0xcc4 <__fp_inf>

0000115e <__addsf3x>:
    115e:	e9 2f       	mov	r30, r25
    1160:	0e 94 8a 06 	call	0xd14	; 0xd14 <__fp_split3>
    1164:	58 f3       	brcs	.-42     	; 0x113c <__addsf3+0xc>
    1166:	ba 17       	cp	r27, r26
    1168:	62 07       	cpc	r22, r18
    116a:	73 07       	cpc	r23, r19
    116c:	84 07       	cpc	r24, r20
    116e:	95 07       	cpc	r25, r21
    1170:	20 f0       	brcs	.+8      	; 0x117a <__addsf3x+0x1c>
    1172:	79 f4       	brne	.+30     	; 0x1192 <__addsf3x+0x34>
    1174:	a6 f5       	brtc	.+104    	; 0x11de <__addsf3x+0x80>
    1176:	0c 94 ac 06 	jmp	0xd58	; 0xd58 <__fp_zero>
    117a:	0e f4       	brtc	.+2      	; 0x117e <__addsf3x+0x20>
    117c:	e0 95       	com	r30
    117e:	0b 2e       	mov	r0, r27
    1180:	ba 2f       	mov	r27, r26
    1182:	a0 2d       	mov	r26, r0
    1184:	0b 01       	movw	r0, r22
    1186:	b9 01       	movw	r22, r18
    1188:	90 01       	movw	r18, r0
    118a:	0c 01       	movw	r0, r24
    118c:	ca 01       	movw	r24, r20
    118e:	a0 01       	movw	r20, r0
    1190:	11 24       	eor	r1, r1
    1192:	ff 27       	eor	r31, r31
    1194:	59 1b       	sub	r21, r25
    1196:	99 f0       	breq	.+38     	; 0x11be <__addsf3x+0x60>
    1198:	59 3f       	cpi	r21, 0xF9	; 249
    119a:	50 f4       	brcc	.+20     	; 0x11b0 <__addsf3x+0x52>
    119c:	50 3e       	cpi	r21, 0xE0	; 224
    119e:	68 f1       	brcs	.+90     	; 0x11fa <__addsf3x+0x9c>
    11a0:	1a 16       	cp	r1, r26
    11a2:	f0 40       	sbci	r31, 0x00	; 0
    11a4:	a2 2f       	mov	r26, r18
    11a6:	23 2f       	mov	r18, r19
    11a8:	34 2f       	mov	r19, r20
    11aa:	44 27       	eor	r20, r20
    11ac:	58 5f       	subi	r21, 0xF8	; 248
    11ae:	f3 cf       	rjmp	.-26     	; 0x1196 <__addsf3x+0x38>
    11b0:	46 95       	lsr	r20
    11b2:	37 95       	ror	r19
    11b4:	27 95       	ror	r18
    11b6:	a7 95       	ror	r26
    11b8:	f0 40       	sbci	r31, 0x00	; 0
    11ba:	53 95       	inc	r21
    11bc:	c9 f7       	brne	.-14     	; 0x11b0 <__addsf3x+0x52>
    11be:	7e f4       	brtc	.+30     	; 0x11de <__addsf3x+0x80>
    11c0:	1f 16       	cp	r1, r31
    11c2:	ba 0b       	sbc	r27, r26
    11c4:	62 0b       	sbc	r22, r18
    11c6:	73 0b       	sbc	r23, r19
    11c8:	84 0b       	sbc	r24, r20
    11ca:	ba f0       	brmi	.+46     	; 0x11fa <__addsf3x+0x9c>
    11cc:	91 50       	subi	r25, 0x01	; 1
    11ce:	a1 f0       	breq	.+40     	; 0x11f8 <__addsf3x+0x9a>
    11d0:	ff 0f       	add	r31, r31
    11d2:	bb 1f       	adc	r27, r27
    11d4:	66 1f       	adc	r22, r22
    11d6:	77 1f       	adc	r23, r23
    11d8:	88 1f       	adc	r24, r24
    11da:	c2 f7       	brpl	.-16     	; 0x11cc <__addsf3x+0x6e>
    11dc:	0e c0       	rjmp	.+28     	; 0x11fa <__addsf3x+0x9c>
    11de:	ba 0f       	add	r27, r26
    11e0:	62 1f       	adc	r22, r18
    11e2:	73 1f       	adc	r23, r19
    11e4:	84 1f       	adc	r24, r20
    11e6:	48 f4       	brcc	.+18     	; 0x11fa <__addsf3x+0x9c>
    11e8:	87 95       	ror	r24
    11ea:	77 95       	ror	r23
    11ec:	67 95       	ror	r22
    11ee:	b7 95       	ror	r27
    11f0:	f7 95       	ror	r31
    11f2:	9e 3f       	cpi	r25, 0xFE	; 254
    11f4:	08 f0       	brcs	.+2      	; 0x11f8 <__addsf3x+0x9a>
    11f6:	b0 cf       	rjmp	.-160    	; 0x1158 <__addsf3+0x28>
    11f8:	93 95       	inc	r25
    11fa:	88 0f       	add	r24, r24
    11fc:	08 f0       	brcs	.+2      	; 0x1200 <__addsf3x+0xa2>
    11fe:	99 27       	eor	r25, r25
    1200:	ee 0f       	add	r30, r30
    1202:	97 95       	ror	r25
    1204:	87 95       	ror	r24
    1206:	08 95       	ret

00001208 <__fp_mpack>:
    1208:	9f 3f       	cpi	r25, 0xFF	; 255
    120a:	31 f0       	breq	.+12     	; 0x1218 <__fp_mpack_finite+0xc>

0000120c <__fp_mpack_finite>:
    120c:	91 50       	subi	r25, 0x01	; 1
    120e:	20 f4       	brcc	.+8      	; 0x1218 <__fp_mpack_finite+0xc>
    1210:	87 95       	ror	r24
    1212:	77 95       	ror	r23
    1214:	67 95       	ror	r22
    1216:	b7 95       	ror	r27
    1218:	88 0f       	add	r24, r24
    121a:	91 1d       	adc	r25, r1
    121c:	96 95       	lsr	r25
    121e:	87 95       	ror	r24
    1220:	97 f9       	bld	r25, 7
    1222:	08 95       	ret

00001224 <__udivmodsi4>:
    1224:	a1 e2       	ldi	r26, 0x21	; 33
    1226:	1a 2e       	mov	r1, r26
    1228:	aa 1b       	sub	r26, r26
    122a:	bb 1b       	sub	r27, r27
    122c:	fd 01       	movw	r30, r26
    122e:	0d c0       	rjmp	.+26     	; 0x124a <__udivmodsi4_ep>

00001230 <__udivmodsi4_loop>:
    1230:	aa 1f       	adc	r26, r26
    1232:	bb 1f       	adc	r27, r27
    1234:	ee 1f       	adc	r30, r30
    1236:	ff 1f       	adc	r31, r31
    1238:	a2 17       	cp	r26, r18
    123a:	b3 07       	cpc	r27, r19
    123c:	e4 07       	cpc	r30, r20
    123e:	f5 07       	cpc	r31, r21
    1240:	20 f0       	brcs	.+8      	; 0x124a <__udivmodsi4_ep>
    1242:	a2 1b       	sub	r26, r18
    1244:	b3 0b       	sbc	r27, r19
    1246:	e4 0b       	sbc	r30, r20
    1248:	f5 0b       	sbc	r31, r21

0000124a <__udivmodsi4_ep>:
    124a:	66 1f       	adc	r22, r22
    124c:	77 1f       	adc	r23, r23
    124e:	88 1f       	adc	r24, r24
    1250:	99 1f       	adc	r25, r25
    1252:	1a 94       	dec	r1
    1254:	69 f7       	brne	.-38     	; 0x1230 <__udivmodsi4_loop>
    1256:	60 95       	com	r22
    1258:	70 95       	com	r23
    125a:	80 95       	com	r24
    125c:	90 95       	com	r25
    125e:	9b 01       	movw	r18, r22
    1260:	ac 01       	movw	r20, r24
    1262:	bd 01       	movw	r22, r26
    1264:	cf 01       	movw	r24, r30
    1266:	08 95       	ret

00001268 <__divmodsi4>:
    1268:	05 2e       	mov	r0, r21
    126a:	97 fb       	bst	r25, 7
    126c:	1e f4       	brtc	.+6      	; 0x1274 <__divmodsi4+0xc>
    126e:	00 94       	com	r0
    1270:	0e 94 4b 09 	call	0x1296	; 0x1296 <__negsi2>
    1274:	57 fd       	sbrc	r21, 7
    1276:	07 d0       	rcall	.+14     	; 0x1286 <__divmodsi4_neg2>
    1278:	0e 94 12 09 	call	0x1224	; 0x1224 <__udivmodsi4>
    127c:	07 fc       	sbrc	r0, 7
    127e:	03 d0       	rcall	.+6      	; 0x1286 <__divmodsi4_neg2>
    1280:	4e f4       	brtc	.+18     	; 0x1294 <__divmodsi4_exit>
    1282:	0c 94 4b 09 	jmp	0x1296	; 0x1296 <__negsi2>

00001286 <__divmodsi4_neg2>:
    1286:	50 95       	com	r21
    1288:	40 95       	com	r20
    128a:	30 95       	com	r19
    128c:	21 95       	neg	r18
    128e:	3f 4f       	sbci	r19, 0xFF	; 255
    1290:	4f 4f       	sbci	r20, 0xFF	; 255
    1292:	5f 4f       	sbci	r21, 0xFF	; 255

00001294 <__divmodsi4_exit>:
    1294:	08 95       	ret

00001296 <__negsi2>:
    1296:	90 95       	com	r25
    1298:	80 95       	com	r24
    129a:	70 95       	com	r23
    129c:	61 95       	neg	r22
    129e:	7f 4f       	sbci	r23, 0xFF	; 255
    12a0:	8f 4f       	sbci	r24, 0xFF	; 255
    12a2:	9f 4f       	sbci	r25, 0xFF	; 255
    12a4:	08 95       	ret

000012a6 <_exit>:
    12a6:	f8 94       	cli

000012a8 <__stop_program>:
    12a8:	ff cf       	rjmp	.-2      	; 0x12a8 <__stop_program>
