
Remote 1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000068  00800100  00001864  000018f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001864  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000c1  00800168  00800168  00001960  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001960  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001990  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001f0  00000000  00000000  000019d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001ed0  00000000  00000000  00001bc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f8c  00000000  00000000  00003a90  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000010e0  00000000  00000000  00004a1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000510  00000000  00000000  00005afc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000826  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001239  00000000  00000000  00006832  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001e0  00000000  00000000  00007a6b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 fa 02 	jmp	0x5f4	; 0x5f4 <__ctors_end>
       4:	0c 94 8b 04 	jmp	0x916	; 0x916 <__vector_1>
       8:	0c 94 c9 04 	jmp	0x992	; 0x992 <__vector_2>
       c:	0c 94 17 03 	jmp	0x62e	; 0x62e <__bad_interrupt>
      10:	0c 94 17 03 	jmp	0x62e	; 0x62e <__bad_interrupt>
      14:	0c 94 17 03 	jmp	0x62e	; 0x62e <__bad_interrupt>
      18:	0c 94 17 03 	jmp	0x62e	; 0x62e <__bad_interrupt>
      1c:	0c 94 2c 03 	jmp	0x658	; 0x658 <__vector_7>
      20:	0c 94 17 03 	jmp	0x62e	; 0x62e <__bad_interrupt>
      24:	0c 94 17 03 	jmp	0x62e	; 0x62e <__bad_interrupt>
      28:	0c 94 17 03 	jmp	0x62e	; 0x62e <__bad_interrupt>
      2c:	0c 94 b9 07 	jmp	0xf72	; 0xf72 <__vector_11>
      30:	0c 94 17 03 	jmp	0x62e	; 0x62e <__bad_interrupt>
      34:	0c 94 17 03 	jmp	0x62e	; 0x62e <__bad_interrupt>
      38:	0c 94 17 03 	jmp	0x62e	; 0x62e <__bad_interrupt>
      3c:	0c 94 17 03 	jmp	0x62e	; 0x62e <__bad_interrupt>
      40:	0c 94 17 03 	jmp	0x62e	; 0x62e <__bad_interrupt>
      44:	0c 94 17 03 	jmp	0x62e	; 0x62e <__bad_interrupt>
      48:	0c 94 37 04 	jmp	0x86e	; 0x86e <__vector_18>
      4c:	0c 94 17 03 	jmp	0x62e	; 0x62e <__bad_interrupt>
      50:	0c 94 17 03 	jmp	0x62e	; 0x62e <__bad_interrupt>
      54:	0c 94 17 03 	jmp	0x62e	; 0x62e <__bad_interrupt>
      58:	0c 94 17 03 	jmp	0x62e	; 0x62e <__bad_interrupt>
      5c:	0c 94 17 03 	jmp	0x62e	; 0x62e <__bad_interrupt>
      60:	0c 94 17 03 	jmp	0x62e	; 0x62e <__bad_interrupt>
      64:	0c 94 17 03 	jmp	0x62e	; 0x62e <__bad_interrupt>
      68:	07 63       	ori	r16, 0x37	; 55
      6a:	42 36       	cpi	r20, 0x62	; 98
      6c:	b7 9b       	sbis	0x16, 7	; 22
      6e:	d8 a7       	std	Y+40, r29	; 0x28
      70:	1a 39       	cpi	r17, 0x9A	; 154
      72:	68 56       	subi	r22, 0x68	; 104
      74:	18 ae       	std	Y+56, r1	; 0x38
      76:	ba ab       	std	Y+50, r27	; 0x32
      78:	55 8c       	ldd	r5, Z+29	; 0x1d
      7a:	1d 3c       	cpi	r17, 0xCD	; 205
      7c:	b7 cc       	rjmp	.-1682   	; 0xfffff9ec <__eeprom_end+0xff7ef9ec>
      7e:	57 63       	ori	r21, 0x37	; 55
      80:	bd 6d       	ori	r27, 0xDD	; 221
      82:	ed fd       	.word	0xfded	; ????
      84:	75 3e       	cpi	r23, 0xE5	; 229
      86:	f6 17       	cp	r31, r22
      88:	72 31       	cpi	r23, 0x12	; 18
      8a:	bf 00       	.word	0x00bf	; ????
      8c:	00 00       	nop
      8e:	80 3f       	cpi	r24, 0xF0	; 240
      90:	08 00       	.word	0x0008	; ????
      92:	00 00       	nop
      94:	be 92       	st	-X, r11
      96:	24 49       	sbci	r18, 0x94	; 148
      98:	12 3e       	cpi	r17, 0xE2	; 226
      9a:	ab aa       	std	Y+51, r10	; 0x33
      9c:	aa 2a       	or	r10, r26
      9e:	be cd       	rjmp	.-1156   	; 0xfffffc1c <__eeprom_end+0xff7efc1c>
      a0:	cc cc       	rjmp	.-1640   	; 0xfffffa3a <__eeprom_end+0xff7efa3a>
      a2:	4c 3e       	cpi	r20, 0xEC	; 236
      a4:	00 00       	nop
      a6:	00 80       	ld	r0, Z
      a8:	be ab       	std	Y+54, r27	; 0x36
      aa:	aa aa       	std	Y+50, r10	; 0x32
      ac:	aa 3e       	cpi	r26, 0xEA	; 234
      ae:	00 00       	nop
      b0:	00 00       	nop
      b2:	bf 00       	.word	0x00bf	; ????
      b4:	00 00       	nop
      b6:	80 3f       	cpi	r24, 0xF0	; 240
      b8:	00 00       	nop
      ba:	00 00       	nop
      bc:	00 08       	sbc	r0, r0
      be:	41 78       	andi	r20, 0x81	; 129
      c0:	d3 bb       	out	0x13, r29	; 19
      c2:	43 87       	std	Z+11, r20	; 0x0b
      c4:	d1 13       	cpse	r29, r17
      c6:	3d 19       	sub	r19, r13
      c8:	0e 3c       	cpi	r16, 0xCE	; 206
      ca:	c3 bd       	out	0x23, r28	; 35
      cc:	42 82       	std	Z+2, r4	; 0x02
      ce:	ad 2b       	or	r26, r29
      d0:	3e 68       	ori	r19, 0x8E	; 142
      d2:	ec 82       	std	Y+4, r14	; 0x04
      d4:	76 be       	out	0x36, r7	; 54
      d6:	d9 8f       	std	Y+25, r29	; 0x19
      d8:	e1 a9       	ldd	r30, Z+49	; 0x31
      da:	3e 4c       	sbci	r19, 0xCE	; 206
      dc:	80 ef       	ldi	r24, 0xF0	; 240
      de:	ff be       	out	0x3f, r15	; 63
      e0:	01 c4       	rjmp	.+2050   	; 0x8e4 <__vector_18+0x76>
      e2:	ff 7f       	andi	r31, 0xFF	; 255
      e4:	3f 00       	.word	0x003f	; ????
      e6:	00 00       	nop
	...

000000ea <__trampolines_end>:
      ea:	39 15       	cp	r19, r9
      ec:	55 6e       	ori	r21, 0xE5	; 229
      ee:	72 38       	cpi	r23, 0x82	; 130
      f0:	0c 01       	movw	r0, r24
      f2:	06 71       	Address 0x000000f2 is out of bounds.
.word	0xffff	; ????

000000f3 <melodies>:
      f3:	71 80 71 00 00 00 00 00 00 00 00 00 00 00 00 00     q.q.............
	...
     1f3:	63 6c 6f 6c 48 63 6c 6f 6c 48 63 6d 60 6d 6a 60     clolHclolHcm`mj`
     203:	6a 48 68 00 00 00 00 00 00 00 00 00 00 00 00 00     jHh.............
	...
     2f3:	2d 4d 60 68 4d 68 88 8a 4c 85 80 65 4a 68 88 86     -M`hMh..L..eJh..
     303:	48 81 80 61 63 83 80 63 83 85 66 86 80 66 86 88     H..ac..c..f..f..
     313:	4a 6c 6d 4f 6f 68 51 6f 8f 8d 4f 6c 68 4d 6c 8c     JlmOohQo..OlhMl.
     323:	8a 4c 85 80 65 4a 68 88 86 48 61 80 81 4d 6c 8c     .L..eJh..Ha..Ml.
     333:	8a 68 6c 6d 6f 31 6f 6d 6c 6d 4f 6f 88 80 68 6c     .hlmo1omlmOo..hl
     343:	6d 6f 2d 6c 6a 68 6a 4c 6c 85 80 65 68 6a 6c 4d     mo-ljhjLl..ehjlM
     353:	6a 8a 8c 4d 6a 8a 8c 4d 6a 6d 52 72 60 32 71 6f     j..Mj..MjmRr`2qo
     363:	6d 6f 51 71 8d 80 2d 2f 6d 6c 6a 6c 4d 6d 8a 80     moQq..-/mljlMm..
     373:	2a 4d 6c 8c 8a 48 61 80 81 28 4a 4c 2d 6d 00 00     *Ml..Ha..(JL-m..
	...
     3f3:	4a 4c 4e 4f 51 53 6a 80 8a 4c 6e 80 8e 6f 8f 80     JLNOQSj..Ln..o..
     403:	4f 40 4a 4c 4e 4f 51 53 6a 80 8a 4c 6e 80 8e 6f     O@JLNOQSj..Ln..o
     413:	8f 80 4f 40 56 53 76 96 80 76 74 31 54 51 54 36     ..O@VSv..vt1TQT6
     423:	76 96 80 56 53 76 96 80 76 74 31 4a 4c 4e 2f 4f     v..VSv..vt1JLN/O
	...
     4f3:	61 81 80 41 68 88 80 48 6a 8a 80 4a 28 66 86 80     a..Ah..Hj..J(f..
     503:	46 65 85 80 45 63 83 80 43 21 68 88 80 48 66 86     Fe..Ec..C!h..Hf.
     513:	80 46 65 85 80 45 23 68 88 80 48 66 86 80 46 65     .Fe..E#h..Hf..Fe
     523:	85 80 45 23 61 81 80 41 68 88 80 48 6a 8a 80 4a     ..E#a..Ah..Hj..J
     533:	28 66 86 80 46 65 85 80 45 63 83 80 43 21 00 00     (f..Fe..Ec..C!..
	...

000005f4 <__ctors_end>:
     5f4:	11 24       	eor	r1, r1
     5f6:	1f be       	out	0x3f, r1	; 63
     5f8:	cf ef       	ldi	r28, 0xFF	; 255
     5fa:	d8 e0       	ldi	r29, 0x08	; 8
     5fc:	de bf       	out	0x3e, r29	; 62
     5fe:	cd bf       	out	0x3d, r28	; 61

00000600 <__do_copy_data>:
     600:	11 e0       	ldi	r17, 0x01	; 1
     602:	a0 e0       	ldi	r26, 0x00	; 0
     604:	b1 e0       	ldi	r27, 0x01	; 1
     606:	e4 e6       	ldi	r30, 0x64	; 100
     608:	f8 e1       	ldi	r31, 0x18	; 24
     60a:	02 c0       	rjmp	.+4      	; 0x610 <__do_copy_data+0x10>
     60c:	05 90       	lpm	r0, Z+
     60e:	0d 92       	st	X+, r0
     610:	a8 36       	cpi	r26, 0x68	; 104
     612:	b1 07       	cpc	r27, r17
     614:	d9 f7       	brne	.-10     	; 0x60c <__do_copy_data+0xc>

00000616 <__do_clear_bss>:
     616:	22 e0       	ldi	r18, 0x02	; 2
     618:	a8 e6       	ldi	r26, 0x68	; 104
     61a:	b1 e0       	ldi	r27, 0x01	; 1
     61c:	01 c0       	rjmp	.+2      	; 0x620 <.do_clear_bss_start>

0000061e <.do_clear_bss_loop>:
     61e:	1d 92       	st	X+, r1

00000620 <.do_clear_bss_start>:
     620:	a9 32       	cpi	r26, 0x29	; 41
     622:	b2 07       	cpc	r27, r18
     624:	e1 f7       	brne	.-8      	; 0x61e <.do_clear_bss_loop>
     626:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <main>
     62a:	0c 94 30 0c 	jmp	0x1860	; 0x1860 <_exit>

0000062e <__bad_interrupt>:
     62e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000632 <uart_put_char>:
}

int lcd_put_char(char c, FILE* stream){
	write_lcd_char(c);
	return 0;
}
     632:	0e 94 df 05 	call	0xbbe	; 0xbbe <uart_send_byte>
     636:	80 e0       	ldi	r24, 0x00	; 0
     638:	90 e0       	ldi	r25, 0x00	; 0
     63a:	08 95       	ret

0000063c <print_lcd_static>:

void print_lcd_static(){
	set_cursor_pos(0);
     63c:	80 e0       	ldi	r24, 0x00	; 0
     63e:	0e 94 83 06 	call	0xd06	; 0xd06 <set_cursor_pos>
	write_lcd_string("Fram: __cm PIR:_");
     642:	81 e2       	ldi	r24, 0x21	; 33
     644:	91 e0       	ldi	r25, 0x01	; 1
     646:	0e 94 68 06 	call	0xcd0	; 0xcd0 <write_lcd_string>
	set_cursor_pos(16);
     64a:	80 e1       	ldi	r24, 0x10	; 16
     64c:	0e 94 83 06 	call	0xd06	; 0xd06 <set_cursor_pos>
	write_lcd_string("Bak: __cm  C: __");
     650:	82 e3       	ldi	r24, 0x32	; 50
     652:	91 e0       	ldi	r25, 0x01	; 1
     654:	0c 94 68 06 	jmp	0xcd0	; 0xcd0 <write_lcd_string>

00000658 <__vector_7>:
}

ISR(TIMER2_COMPA_vect){
     658:	1f 92       	push	r1
     65a:	0f 92       	push	r0
     65c:	0f b6       	in	r0, 0x3f	; 63
     65e:	0f 92       	push	r0
     660:	11 24       	eor	r1, r1
     662:	2f 93       	push	r18
     664:	3f 93       	push	r19
     666:	4f 93       	push	r20
     668:	5f 93       	push	r21
     66a:	6f 93       	push	r22
     66c:	7f 93       	push	r23
     66e:	8f 93       	push	r24
     670:	9f 93       	push	r25
     672:	af 93       	push	r26
     674:	bf 93       	push	r27
     676:	ef 93       	push	r30
     678:	ff 93       	push	r31
	if(++heart_hundreths > 50){
     67a:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <heart_hundreths>
     67e:	8f 5f       	subi	r24, 0xFF	; 255
     680:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <heart_hundreths>
     684:	83 33       	cpi	r24, 0x33	; 51
     686:	18 f0       	brcs	.+6      	; 0x68e <__vector_7+0x36>
		LED_PORT |= 1<<LEDR2;
     688:	5f 9a       	sbi	0x0b, 7	; 11
		heart_hundreths = 0;
     68a:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <heart_hundreths>
	}
	if(command_hundreths < CMD_DELAY){
     68e:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <command_hundreths>
     692:	84 31       	cpi	r24, 0x14	; 20
     694:	28 f4       	brcc	.+10     	; 0x6a0 <__vector_7+0x48>
		command_hundreths++;
     696:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <command_hundreths>
     69a:	8f 5f       	subi	r24, 0xFF	; 255
     69c:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <command_hundreths>
	}
	messages_timerproc();
     6a0:	0e 94 9e 06 	call	0xd3c	; 0xd3c <messages_timerproc>
}
     6a4:	ff 91       	pop	r31
     6a6:	ef 91       	pop	r30
     6a8:	bf 91       	pop	r27
     6aa:	af 91       	pop	r26
     6ac:	9f 91       	pop	r25
     6ae:	8f 91       	pop	r24
     6b0:	7f 91       	pop	r23
     6b2:	6f 91       	pop	r22
     6b4:	5f 91       	pop	r21
     6b6:	4f 91       	pop	r20
     6b8:	3f 91       	pop	r19
     6ba:	2f 91       	pop	r18
     6bc:	0f 90       	pop	r0
     6be:	0f be       	out	0x3f, r0	; 63
     6c0:	0f 90       	pop	r0
     6c2:	1f 90       	pop	r1
     6c4:	18 95       	reti

000006c6 <timer_init>:

void timer_init(){
	/* Start 100Hz system timer with TC2 for counting time */
	OCR2A = 77;
     6c6:	8d e4       	ldi	r24, 0x4D	; 77
     6c8:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
	TCCR2A = 1<<WGM21;
     6cc:	82 e0       	ldi	r24, 0x02	; 2
     6ce:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
	TCCR2B = 7;
     6d2:	97 e0       	ldi	r25, 0x07	; 7
     6d4:	90 93 b1 00 	sts	0x00B1, r25	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
	TIMSK2 = 1<<OCIE2A;
     6d8:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f8070>
     6dc:	08 95       	ret

000006de <clear_heart>:
}

void clear_heart(){
	LED_PORT &= ~(1<<LEDR2);
     6de:	5f 98       	cbi	0x0b, 7	; 11
     6e0:	08 95       	ret

000006e2 <perform_command>:
}

void perform_command(uint8_t topic, uint8_t command, volatile uint8_t* args){
	switch(topic){
     6e2:	81 33       	cpi	r24, 0x31	; 49
     6e4:	19 f0       	breq	.+6      	; 0x6ec <perform_command+0xa>
     6e6:	82 33       	cpi	r24, 0x32	; 50
     6e8:	b9 f0       	breq	.+46     	; 0x718 <perform_command+0x36>
     6ea:	08 95       	ret
		case '1': //From car
			switch(command){
     6ec:	61 33       	cpi	r22, 0x31	; 49
     6ee:	41 f0       	breq	.+16     	; 0x700 <perform_command+0x1e>
     6f0:	62 33       	cpi	r22, 0x32	; 50
     6f2:	79 f0       	breq	.+30     	; 0x712 <perform_command+0x30>
     6f4:	60 33       	cpi	r22, 0x30	; 48
     6f6:	01 f5       	brne	.+64     	; 0x738 <perform_command+0x56>
				case '0':
					force_message("Stopp!");
     6f8:	83 e4       	ldi	r24, 0x43	; 67
     6fa:	91 e0       	ldi	r25, 0x01	; 1
     6fc:	0c 94 c1 06 	jmp	0xd82	; 0xd82 <force_message>
     700:	ba 01       	movw	r22, r20
					break;
				case '1':
					strcpy((char*)sensor_buf, (char*)args);
     702:	83 e1       	ldi	r24, 0x13	; 19
     704:	92 e0       	ldi	r25, 0x02	; 2
     706:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <strcpy>
					sensors_received = true;
     70a:	81 e0       	ldi	r24, 0x01	; 1
     70c:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <__data_end>
     710:	08 95       	ret
					break;
				case '2':
					queue_message("PONG");
     712:	8a e4       	ldi	r24, 0x4A	; 74
     714:	91 e0       	ldi	r25, 0x01	; 1
     716:	09 c0       	rjmp	.+18     	; 0x72a <perform_command+0x48>
			}
			break;
		case '2': //To remote
			switch(command){
     718:	61 33       	cpi	r22, 0x31	; 49
     71a:	31 f0       	breq	.+12     	; 0x728 <perform_command+0x46>
     71c:	62 33       	cpi	r22, 0x32	; 50
     71e:	39 f0       	breq	.+14     	; 0x72e <perform_command+0x4c>
     720:	60 33       	cpi	r22, 0x30	; 48
     722:	51 f4       	brne	.+20     	; 0x738 <perform_command+0x56>
				case '0':
					clear_heart();
     724:	0c 94 6f 03 	jmp	0x6de	; 0x6de <clear_heart>
					break;
				case '1':
					queue_message((char*)args);
     728:	ca 01       	movw	r24, r20
     72a:	0c 94 d8 06 	jmp	0xdb0	; 0xdb0 <queue_message>
					break;
				case '2':
					Summer_PlayMelody(args[0]-'0');
     72e:	fa 01       	movw	r30, r20
     730:	80 81       	ld	r24, Z
     732:	80 53       	subi	r24, 0x30	; 48
     734:	0c 94 0f 08 	jmp	0x101e	; 0x101e <Summer_PlayMelody>
     738:	08 95       	ret

0000073a <display_sensors>:
			}
			break;
	}
}

void display_sensors(){
     73a:	1f 93       	push	r17
     73c:	cf 93       	push	r28
     73e:	df 93       	push	r29
	char* args = (char*)sensor_buf;
	
	set_cursor_pos(CR_POS);
     740:	8f e1       	ldi	r24, 0x1F	; 31
     742:	0e 94 83 06 	call	0xd06	; 0xd06 <set_cursor_pos>
	write_lcd_char((args[0] == '0') ? 'R' : '_');
     746:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <sensor_buf>
     74a:	80 33       	cpi	r24, 0x30	; 48
     74c:	11 f0       	breq	.+4      	; 0x752 <display_sensors+0x18>
     74e:	8f e5       	ldi	r24, 0x5F	; 95
     750:	01 c0       	rjmp	.+2      	; 0x754 <display_sensors+0x1a>
     752:	82 e5       	ldi	r24, 0x52	; 82
     754:	0e 94 5f 06 	call	0xcbe	; 0xcbe <write_lcd_char>
	set_cursor_pos(CL_POS);
     758:	8e e1       	ldi	r24, 0x1E	; 30
     75a:	0e 94 83 06 	call	0xd06	; 0xd06 <set_cursor_pos>
	write_lcd_char((args[1] == '0') ? 'L' : '_');
     75e:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <sensor_buf+0x1>
     762:	80 33       	cpi	r24, 0x30	; 48
     764:	11 f0       	breq	.+4      	; 0x76a <display_sensors+0x30>
     766:	8f e5       	ldi	r24, 0x5F	; 95
     768:	01 c0       	rjmp	.+2      	; 0x76c <display_sensors+0x32>
     76a:	8c e4       	ldi	r24, 0x4C	; 76
     76c:	0e 94 5f 06 	call	0xcbe	; 0xcbe <write_lcd_char>
	set_cursor_pos(PIR_POS);
     770:	8f e0       	ldi	r24, 0x0F	; 15
     772:	0e 94 83 06 	call	0xd06	; 0xd06 <set_cursor_pos>
	write_lcd_char((args[3] == '0') ? 'X' : '_');
     776:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <sensor_buf+0x3>
     77a:	80 33       	cpi	r24, 0x30	; 48
     77c:	11 f0       	breq	.+4      	; 0x782 <display_sensors+0x48>
     77e:	8f e5       	ldi	r24, 0x5F	; 95
     780:	01 c0       	rjmp	.+2      	; 0x784 <display_sensors+0x4a>
     782:	88 e5       	ldi	r24, 0x58	; 88
     784:	0e 94 5f 06 	call	0xcbe	; 0xcbe <write_lcd_char>
	if(args[2] == '0'){
     788:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <sensor_buf+0x2>
     78c:	80 33       	cpi	r24, 0x30	; 48
     78e:	39 f4       	brne	.+14     	; 0x79e <display_sensors+0x64>
		if(!(LED_PORT & 1<<LEDR1)){
     790:	5e 99       	sbic	0x0b, 6	; 11
     792:	06 c0       	rjmp	.+12     	; 0x7a0 <display_sensors+0x66>
			Summer_PlayMelody(MELODY_HONK);
     794:	80 e0       	ldi	r24, 0x00	; 0
     796:	0e 94 0f 08 	call	0x101e	; 0x101e <Summer_PlayMelody>
			LED_PORT |= 1<<LEDR1;
     79a:	5e 9a       	sbi	0x0b, 6	; 11
     79c:	01 c0       	rjmp	.+2      	; 0x7a0 <display_sensors+0x66>
		}
		} else{
		LED_PORT &= ~(1<<LEDR1);
     79e:	5e 98       	cbi	0x0b, 6	; 11
	}
	
	
	uint8_t b = 5;
     7a0:	c5 e0       	ldi	r28, 0x05	; 5
	while(args[++b] != ' ');
     7a2:	81 e0       	ldi	r24, 0x01	; 1
     7a4:	8c 0f       	add	r24, r28
     7a6:	e8 2f       	mov	r30, r24
     7a8:	f0 e0       	ldi	r31, 0x00	; 0
     7aa:	ed 5e       	subi	r30, 0xED	; 237
     7ac:	fd 4f       	sbci	r31, 0xFD	; 253
     7ae:	90 81       	ld	r25, Z
     7b0:	90 32       	cpi	r25, 0x20	; 32
     7b2:	11 f0       	breq	.+4      	; 0x7b8 <display_sensors+0x7e>
     7b4:	c8 2f       	mov	r28, r24
     7b6:	f5 cf       	rjmp	.-22     	; 0x7a2 <display_sensors+0x68>
	args[b++] = '\0';
     7b8:	ce 5f       	subi	r28, 0xFE	; 254
     7ba:	10 82       	st	Z, r1
     7bc:	8c 2f       	mov	r24, r28
	uint8_t k = b;
	while(args[++k] != ' ');
     7be:	91 e0       	ldi	r25, 0x01	; 1
     7c0:	98 0f       	add	r25, r24
     7c2:	e9 2f       	mov	r30, r25
     7c4:	f0 e0       	ldi	r31, 0x00	; 0
     7c6:	ed 5e       	subi	r30, 0xED	; 237
     7c8:	fd 4f       	sbci	r31, 0xFD	; 253
     7ca:	20 81       	ld	r18, Z
     7cc:	20 32       	cpi	r18, 0x20	; 32
     7ce:	11 f0       	breq	.+4      	; 0x7d4 <display_sensors+0x9a>
     7d0:	89 2f       	mov	r24, r25
     7d2:	f5 cf       	rjmp	.-22     	; 0x7be <display_sensors+0x84>
	args[k++] = '\0';
     7d4:	d2 e0       	ldi	r29, 0x02	; 2
     7d6:	d8 0f       	add	r29, r24
     7d8:	10 82       	st	Z, r1
	
	
	set_cursor_pos(FRONT_POS);
     7da:	85 e0       	ldi	r24, 0x05	; 5
     7dc:	0e 94 83 06 	call	0xd06	; 0xd06 <set_cursor_pos>
	if(b == 7 && args[0] == '0'){ //0 is sent for front
     7e0:	c7 30       	cpi	r28, 0x07	; 7
     7e2:	39 f4       	brne	.+14     	; 0x7f2 <display_sensors+0xb8>
     7e4:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <sensor_buf>
     7e8:	80 33       	cpi	r24, 0x30	; 48
     7ea:	19 f4       	brne	.+6      	; 0x7f2 <display_sensors+0xb8>
		write_lcd_string("!!!");
     7ec:	8f e4       	ldi	r24, 0x4F	; 79
     7ee:	91 e0       	ldi	r25, 0x01	; 1
     7f0:	13 c0       	rjmp	.+38     	; 0x818 <__DATA_REGION_LENGTH__+0x18>
	} else{
		for (int8_t i = 3-strlen(args+5); i > 0; i--) write_lcd_char(' ');
     7f2:	e8 e1       	ldi	r30, 0x18	; 24
     7f4:	f2 e0       	ldi	r31, 0x02	; 2
     7f6:	01 90       	ld	r0, Z+
     7f8:	00 20       	and	r0, r0
     7fa:	e9 f7       	brne	.-6      	; 0x7f6 <display_sensors+0xbc>
     7fc:	cf 01       	movw	r24, r30
     7fe:	89 51       	subi	r24, 0x19	; 25
     800:	92 40       	sbci	r25, 0x02	; 2
     802:	13 e0       	ldi	r17, 0x03	; 3
     804:	18 1b       	sub	r17, r24
     806:	11 16       	cp	r1, r17
     808:	2c f4       	brge	.+10     	; 0x814 <__DATA_REGION_LENGTH__+0x14>
     80a:	80 e2       	ldi	r24, 0x20	; 32
     80c:	0e 94 5f 06 	call	0xcbe	; 0xcbe <write_lcd_char>
     810:	11 50       	subi	r17, 0x01	; 1
     812:	f9 cf       	rjmp	.-14     	; 0x806 <__DATA_REGION_LENGTH__+0x6>
		write_lcd_string(args+5);
     814:	88 e1       	ldi	r24, 0x18	; 24
     816:	92 e0       	ldi	r25, 0x02	; 2
     818:	0e 94 68 06 	call	0xcd0	; 0xcd0 <write_lcd_string>
	}
	
	set_cursor_pos(BACK_POS);
     81c:	84 e1       	ldi	r24, 0x14	; 20
     81e:	0e 94 83 06 	call	0xd06	; 0xd06 <set_cursor_pos>
	if(k-b == 2 && args[b] == '0'){ //0 is sent for back
     822:	8d 2f       	mov	r24, r29
     824:	90 e0       	ldi	r25, 0x00	; 0
     826:	d0 e0       	ldi	r29, 0x00	; 0
     828:	8c 1b       	sub	r24, r28
     82a:	9d 0b       	sbc	r25, r29
     82c:	02 97       	sbiw	r24, 0x02	; 2
     82e:	49 f4       	brne	.+18     	; 0x842 <__DATA_REGION_LENGTH__+0x42>
     830:	fe 01       	movw	r30, r28
     832:	ed 5e       	subi	r30, 0xED	; 237
     834:	fd 4f       	sbci	r31, 0xFD	; 253
     836:	80 81       	ld	r24, Z
     838:	80 33       	cpi	r24, 0x30	; 48
     83a:	19 f4       	brne	.+6      	; 0x842 <__DATA_REGION_LENGTH__+0x42>
		write_lcd_string("!!!");
     83c:	8f e4       	ldi	r24, 0x4F	; 79
     83e:	91 e0       	ldi	r25, 0x01	; 1
     840:	11 c0       	rjmp	.+34     	; 0x864 <__DATA_REGION_LENGTH__+0x64>
	} else{
		for (int8_t i = 3-strlen(args+b); i > 0; i--) write_lcd_char(' ');
     842:	cd 5e       	subi	r28, 0xED	; 237
     844:	dd 4f       	sbci	r29, 0xFD	; 253
     846:	fe 01       	movw	r30, r28
     848:	01 90       	ld	r0, Z+
     84a:	00 20       	and	r0, r0
     84c:	e9 f7       	brne	.-6      	; 0x848 <__DATA_REGION_LENGTH__+0x48>
     84e:	1c 2f       	mov	r17, r28
     850:	1e 1b       	sub	r17, r30
     852:	1c 5f       	subi	r17, 0xFC	; 252
     854:	11 16       	cp	r1, r17
     856:	2c f4       	brge	.+10     	; 0x862 <__DATA_REGION_LENGTH__+0x62>
     858:	80 e2       	ldi	r24, 0x20	; 32
     85a:	0e 94 5f 06 	call	0xcbe	; 0xcbe <write_lcd_char>
     85e:	11 50       	subi	r17, 0x01	; 1
     860:	f9 cf       	rjmp	.-14     	; 0x854 <__DATA_REGION_LENGTH__+0x54>
		write_lcd_string(args+b);
     862:	ce 01       	movw	r24, r28
	}
}
     864:	df 91       	pop	r29
     866:	cf 91       	pop	r28
     868:	1f 91       	pop	r17
	set_cursor_pos(BACK_POS);
	if(k-b == 2 && args[b] == '0'){ //0 is sent for back
		write_lcd_string("!!!");
	} else{
		for (int8_t i = 3-strlen(args+b); i > 0; i--) write_lcd_char(' ');
		write_lcd_string(args+b);
     86a:	0c 94 68 06 	jmp	0xcd0	; 0xcd0 <write_lcd_string>

0000086e <__vector_18>:
	}
}

ISR(USART_RX_vect){
     86e:	1f 92       	push	r1
     870:	0f 92       	push	r0
     872:	0f b6       	in	r0, 0x3f	; 63
     874:	0f 92       	push	r0
     876:	11 24       	eor	r1, r1
     878:	2f 93       	push	r18
     87a:	3f 93       	push	r19
     87c:	4f 93       	push	r20
     87e:	5f 93       	push	r21
     880:	6f 93       	push	r22
     882:	7f 93       	push	r23
     884:	8f 93       	push	r24
     886:	9f 93       	push	r25
     888:	af 93       	push	r26
     88a:	bf 93       	push	r27
     88c:	ef 93       	push	r30
     88e:	ff 93       	push	r31
	uart_linebuf[uart_bufind] = UDR0;
     890:	e0 91 6b 01 	lds	r30, 0x016B	; 0x80016b <uart_bufind>
     894:	f0 e0       	ldi	r31, 0x00	; 0
     896:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     89a:	e1 50       	subi	r30, 0x01	; 1
     89c:	fe 4f       	sbci	r31, 0xFE	; 254
     89e:	80 83       	st	Z, r24
	if(uart_linebuf[uart_bufind] == '\n'){
     8a0:	e0 91 6b 01 	lds	r30, 0x016B	; 0x80016b <uart_bufind>
     8a4:	f0 e0       	ldi	r31, 0x00	; 0
     8a6:	e1 50       	subi	r30, 0x01	; 1
     8a8:	fe 4f       	sbci	r31, 0xFE	; 254
     8aa:	80 81       	ld	r24, Z
     8ac:	8a 30       	cpi	r24, 0x0A	; 10
     8ae:	89 f4       	brne	.+34     	; 0x8d2 <__vector_18+0x64>
		uart_linebuf[uart_bufind] = '\0';
     8b0:	e0 91 6b 01 	lds	r30, 0x016B	; 0x80016b <uart_bufind>
     8b4:	f0 e0       	ldi	r31, 0x00	; 0
     8b6:	e1 50       	subi	r30, 0x01	; 1
     8b8:	fe 4f       	sbci	r31, 0xFE	; 254
     8ba:	10 82       	st	Z, r1
		//Do something
		perform_command(uart_linebuf[0], uart_linebuf[1], uart_linebuf+2);
     8bc:	60 91 00 02 	lds	r22, 0x0200	; 0x800200 <uart_linebuf+0x1>
     8c0:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <uart_linebuf>
     8c4:	41 e0       	ldi	r20, 0x01	; 1
     8c6:	52 e0       	ldi	r21, 0x02	; 2
     8c8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <perform_command>
		//Done something
		uart_bufind = 0;
     8cc:	10 92 6b 01 	sts	0x016B, r1	; 0x80016b <uart_bufind>
     8d0:	05 c0       	rjmp	.+10     	; 0x8dc <__vector_18+0x6e>
	} else{
		uart_bufind++;
     8d2:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <uart_bufind>
     8d6:	8f 5f       	subi	r24, 0xFF	; 255
     8d8:	80 93 6b 01 	sts	0x016B, r24	; 0x80016b <uart_bufind>
	}
}
     8dc:	ff 91       	pop	r31
     8de:	ef 91       	pop	r30
     8e0:	bf 91       	pop	r27
     8e2:	af 91       	pop	r26
     8e4:	9f 91       	pop	r25
     8e6:	8f 91       	pop	r24
     8e8:	7f 91       	pop	r23
     8ea:	6f 91       	pop	r22
     8ec:	5f 91       	pop	r21
     8ee:	4f 91       	pop	r20
     8f0:	3f 91       	pop	r19
     8f2:	2f 91       	pop	r18
     8f4:	0f 90       	pop	r0
     8f6:	0f be       	out	0x3f, r0	; 63
     8f8:	0f 90       	pop	r0
     8fa:	1f 90       	pop	r1
     8fc:	18 95       	reti

000008fe <btn_init>:

void btn_init(){
	BTN_DDR &= ~((1<<HONKBTN)|(1<<DEADMANBTN)|(1<<EXTRABTN));
     8fe:	8a b1       	in	r24, 0x0a	; 10
     900:	83 7e       	andi	r24, 0xE3	; 227
     902:	8a b9       	out	0x0a, r24	; 10
	BTN_PORT |= (1<<HONKBTN)|(1<<DEADMANBTN)|(1<<EXTRABTN);
     904:	8b b1       	in	r24, 0x0b	; 11
     906:	8c 61       	ori	r24, 0x1C	; 28
     908:	8b b9       	out	0x0b, r24	; 11
	EICRA = (2<<ISC00)|(2<<ISC10);
     90a:	8a e0       	ldi	r24, 0x0A	; 10
     90c:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
	EIMSK = 3;
     910:	83 e0       	ldi	r24, 0x03	; 3
     912:	8d bb       	out	0x1d, r24	; 29
     914:	08 95       	ret

00000916 <__vector_1>:
}

//Extra
ISR(INT0_vect){
     916:	1f 92       	push	r1
     918:	0f 92       	push	r0
     91a:	0f b6       	in	r0, 0x3f	; 63
     91c:	0f 92       	push	r0
     91e:	11 24       	eor	r1, r1
     920:	2f 93       	push	r18
     922:	3f 93       	push	r19
     924:	4f 93       	push	r20
     926:	5f 93       	push	r21
     928:	6f 93       	push	r22
     92a:	7f 93       	push	r23
     92c:	8f 93       	push	r24
     92e:	9f 93       	push	r25
     930:	af 93       	push	r26
     932:	bf 93       	push	r27
     934:	ef 93       	push	r30
     936:	ff 93       	push	r31
	if((BTN_PIN & 1<<DEADMANBTN) && (read_avg_adc(0, 5) > 630)){
     938:	4c 9b       	sbis	0x09, 4	; 9
     93a:	1a c0       	rjmp	.+52     	; 0x970 <__vector_1+0x5a>
     93c:	65 e0       	ldi	r22, 0x05	; 5
     93e:	70 e0       	ldi	r23, 0x00	; 0
     940:	80 e0       	ldi	r24, 0x00	; 0
     942:	0e 94 18 06 	call	0xc30	; 0xc30 <read_avg_adc>
     946:	87 37       	cpi	r24, 0x77	; 119
     948:	92 40       	sbci	r25, 0x02	; 2
     94a:	90 f0       	brcs	.+36     	; 0x970 <__vector_1+0x5a>
		x_rest = read_avg_adc(1, 25);
     94c:	69 e1       	ldi	r22, 0x19	; 25
     94e:	70 e0       	ldi	r23, 0x00	; 0
     950:	81 e0       	ldi	r24, 0x01	; 1
     952:	0e 94 18 06 	call	0xc30	; 0xc30 <read_avg_adc>
     956:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <x_rest+0x1>
     95a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <x_rest>
		y_rest = read_avg_adc(2, 25);
     95e:	69 e1       	ldi	r22, 0x19	; 25
     960:	70 e0       	ldi	r23, 0x00	; 0
     962:	82 e0       	ldi	r24, 0x02	; 2
     964:	0e 94 18 06 	call	0xc30	; 0xc30 <read_avg_adc>
     968:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     96c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
}
     970:	ff 91       	pop	r31
     972:	ef 91       	pop	r30
     974:	bf 91       	pop	r27
     976:	af 91       	pop	r26
     978:	9f 91       	pop	r25
     97a:	8f 91       	pop	r24
     97c:	7f 91       	pop	r23
     97e:	6f 91       	pop	r22
     980:	5f 91       	pop	r21
     982:	4f 91       	pop	r20
     984:	3f 91       	pop	r19
     986:	2f 91       	pop	r18
     988:	0f 90       	pop	r0
     98a:	0f be       	out	0x3f, r0	; 63
     98c:	0f 90       	pop	r0
     98e:	1f 90       	pop	r1
     990:	18 95       	reti

00000992 <__vector_2>:

//Honk
ISR(INT1_vect){
     992:	1f 92       	push	r1
     994:	0f 92       	push	r0
     996:	0f b6       	in	r0, 0x3f	; 63
     998:	0f 92       	push	r0
     99a:	11 24       	eor	r1, r1
     99c:	2f 93       	push	r18
     99e:	3f 93       	push	r19
     9a0:	4f 93       	push	r20
     9a2:	5f 93       	push	r21
     9a4:	6f 93       	push	r22
     9a6:	7f 93       	push	r23
     9a8:	8f 93       	push	r24
     9aa:	9f 93       	push	r25
     9ac:	af 93       	push	r26
     9ae:	bf 93       	push	r27
     9b0:	ef 93       	push	r30
     9b2:	ff 93       	push	r31
	if(!(BTN_PIN & 1<<DEADMANBTN)){
     9b4:	4c 99       	sbic	0x09, 4	; 9
     9b6:	03 c0       	rjmp	.+6      	; 0x9be <__vector_2+0x2c>
		uart_send_line("020");
     9b8:	83 e5       	ldi	r24, 0x53	; 83
     9ba:	91 e0       	ldi	r25, 0x01	; 1
     9bc:	02 c0       	rjmp	.+4      	; 0x9c2 <__vector_2+0x30>
	} else{
		uart_send_line("32");
     9be:	87 e5       	ldi	r24, 0x57	; 87
     9c0:	91 e0       	ldi	r25, 0x01	; 1
     9c2:	0e 94 e6 05 	call	0xbcc	; 0xbcc <uart_send_line>
	}
}
     9c6:	ff 91       	pop	r31
     9c8:	ef 91       	pop	r30
     9ca:	bf 91       	pop	r27
     9cc:	af 91       	pop	r26
     9ce:	9f 91       	pop	r25
     9d0:	8f 91       	pop	r24
     9d2:	7f 91       	pop	r23
     9d4:	6f 91       	pop	r22
     9d6:	5f 91       	pop	r21
     9d8:	4f 91       	pop	r20
     9da:	3f 91       	pop	r19
     9dc:	2f 91       	pop	r18
     9de:	0f 90       	pop	r0
     9e0:	0f be       	out	0x3f, r0	; 63
     9e2:	0f 90       	pop	r0
     9e4:	1f 90       	pop	r1
     9e6:	18 95       	reti

000009e8 <led_init>:

void led_init(){
	LED_DDR |= (1<<LEDG)|(1<<LEDR1)|(1<<LEDR2);
     9e8:	8a b1       	in	r24, 0x0a	; 10
     9ea:	80 6e       	ori	r24, 0xE0	; 224
     9ec:	8a b9       	out	0x0a, r24	; 10
	LED_PORT &= ~((1<<LEDG)|(1<<LEDR1));
     9ee:	8b b1       	in	r24, 0x0b	; 11
     9f0:	8f 79       	andi	r24, 0x9F	; 159
     9f2:	8b b9       	out	0x0b, r24	; 11
	LED_PORT |= 1<<LEDR2;
     9f4:	5f 9a       	sbi	0x0b, 7	; 11
     9f6:	08 95       	ret

000009f8 <main>:
volatile uint16_t x_rest = 511;
volatile uint16_t y_rest = 507; 


int main(void)
{
     9f8:	cf 93       	push	r28
     9fa:	df 93       	push	r29
     9fc:	cd b7       	in	r28, 0x3d	; 61
     9fe:	de b7       	in	r29, 0x3e	; 62
     a00:	2f 97       	sbiw	r28, 0x0f	; 15
     a02:	0f b6       	in	r0, 0x3f	; 63
     a04:	f8 94       	cli
     a06:	de bf       	out	0x3e, r29	; 62
     a08:	0f be       	out	0x3f, r0	; 63
     a0a:	cd bf       	out	0x3d, r28	; 61
	int16_t last_left = 0;
	int16_t last_right = 0;
	char itoabuf[15] = "03";
     a0c:	83 e0       	ldi	r24, 0x03	; 3
     a0e:	e2 e1       	ldi	r30, 0x12	; 18
     a10:	f1 e0       	ldi	r31, 0x01	; 1
     a12:	9e 01       	movw	r18, r28
     a14:	2f 5f       	subi	r18, 0xFF	; 255
     a16:	3f 4f       	sbci	r19, 0xFF	; 255
     a18:	69 01       	movw	r12, r18
     a1a:	d9 01       	movw	r26, r18
     a1c:	01 90       	ld	r0, Z+
     a1e:	0d 92       	st	X+, r0
     a20:	8a 95       	dec	r24
     a22:	e1 f7       	brne	.-8      	; 0xa1c <main+0x24>
     a24:	fe 01       	movw	r30, r28
     a26:	34 96       	adiw	r30, 0x04	; 4
     a28:	8c e0       	ldi	r24, 0x0C	; 12
     a2a:	df 01       	movw	r26, r30
     a2c:	1d 92       	st	X+, r1
     a2e:	8a 95       	dec	r24
     a30:	e9 f7       	brne	.-6      	; 0xa2c <main+0x34>
	
	spi_init();
     a32:	0e 94 2d 07 	call	0xe5a	; 0xe5a <spi_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a36:	bf ef       	ldi	r27, 0xFF	; 255
     a38:	20 e7       	ldi	r18, 0x70	; 112
     a3a:	32 e0       	ldi	r19, 0x02	; 2
     a3c:	b1 50       	subi	r27, 0x01	; 1
     a3e:	20 40       	sbci	r18, 0x00	; 0
     a40:	30 40       	sbci	r19, 0x00	; 0
     a42:	e1 f7       	brne	.-8      	; 0xa3c <main+0x44>
     a44:	00 c0       	rjmp	.+0      	; 0xa46 <main+0x4e>
     a46:	00 00       	nop
	_delay_ms(100);
	lcd_init();
     a48:	0e 94 43 06 	call	0xc86	; 0xc86 <lcd_init>
	adc_init();
     a4c:	0e 94 0c 06 	call	0xc18	; 0xc18 <adc_init>
	uart_init();
     a50:	0e 94 01 06 	call	0xc02	; 0xc02 <uart_init>
	uart_flush();
     a54:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <uart_flush>
	led_init();
     a58:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <led_init>
	btn_init();
     a5c:	0e 94 7f 04 	call	0x8fe	; 0x8fe <btn_init>
	Summer_Init();
     a60:	0e 94 07 08 	call	0x100e	; 0x100e <Summer_Init>
	timer_init();
     a64:	0e 94 63 03 	call	0x6c6	; 0x6c6 <timer_init>
	print_lcd_static();
     a68:	0e 94 1e 03 	call	0x63c	; 0x63c <print_lcd_static>
	stdout = &uartstdout;
     a6c:	84 e0       	ldi	r24, 0x04	; 4
     a6e:	91 e0       	ldi	r25, 0x01	; 1
     a70:	90 93 26 02 	sts	0x0226, r25	; 0x800226 <__iob+0x3>
     a74:	80 93 25 02 	sts	0x0225, r24	; 0x800225 <__iob+0x2>
	sei();
     a78:	78 94       	sei


int main(void)
{
	int16_t last_left = 0;
	int16_t last_right = 0;
     a7a:	81 2c       	mov	r8, r1
     a7c:	91 2c       	mov	r9, r1
volatile uint16_t y_rest = 507; 


int main(void)
{
	int16_t last_left = 0;
     a7e:	a1 2c       	mov	r10, r1
     a80:	b1 2c       	mov	r11, r1
				} else if(right > -10 && right < 10) right = 0;
				
				if(left != last_left || right != last_right){
					itoa(left, itoabuf+2, 10);
					uint8_t len = strlen(itoabuf);
					itoabuf[len++] = ' ';
     a82:	20 e2       	ldi	r18, 0x20	; 32
     a84:	52 2e       	mov	r5, r18
	stdout = &uartstdout;
	sei();
  
    while (1) 
    {
		if(!message_is_displaying()) display_next_message();
     a86:	0e 94 2a 07 	call	0xe54	; 0xe54 <message_is_displaying>
     a8a:	81 11       	cpse	r24, r1
     a8c:	02 c0       	rjmp	.+4      	; 0xa92 <main+0x9a>
     a8e:	0e 94 0b 07 	call	0xe16	; 0xe16 <display_next_message>
		if(sensors_received){
     a92:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <__data_end>
     a96:	88 23       	and	r24, r24
     a98:	21 f0       	breq	.+8      	; 0xaa2 <main+0xaa>
			 display_sensors();
     a9a:	0e 94 9d 03 	call	0x73a	; 0x73a <display_sensors>
			 sensors_received = false;
     a9e:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <__data_end>
		}
		if(!(BTN_PIN & 1<<DEADMANBTN)){
     aa2:	4c 99       	sbic	0x09, 4	; 9
     aa4:	7b c0       	rjmp	.+246    	; 0xb9c <main+0x1a4>
			if(!(LED_PORT & (1<<LEDG))){
     aa6:	5d 99       	sbic	0x0b, 5	; 11
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <main+0xbc>
				uart_send_line("041");
     aaa:	8a e5       	ldi	r24, 0x5A	; 90
     aac:	91 e0       	ldi	r25, 0x01	; 1
     aae:	0e 94 e6 05 	call	0xbcc	; 0xbcc <uart_send_line>
				LED_PORT |= 1<<LEDG;
     ab2:	5d 9a       	sbi	0x0b, 5	; 11
			}
			if(command_hundreths == CMD_DELAY){
     ab4:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <command_hundreths>
     ab8:	84 31       	cpi	r24, 0x14	; 20
     aba:	09 f0       	breq	.+2      	; 0xabe <main+0xc6>
     abc:	76 c0       	rjmp	.+236    	; 0xbaa <main+0x1b2>
				command_hundreths = 0;
     abe:	10 92 69 01 	sts	0x0169, r1	; 0x800169 <command_hundreths>
				int16_t adjusted_x = x_rest - read_avg_adc(1, 25);
     ac2:	00 91 02 01 	lds	r16, 0x0102	; 0x800102 <x_rest>
     ac6:	10 91 03 01 	lds	r17, 0x0103	; 0x800103 <x_rest+0x1>
     aca:	69 e1       	ldi	r22, 0x19	; 25
     acc:	70 e0       	ldi	r23, 0x00	; 0
     ace:	81 e0       	ldi	r24, 0x01	; 1
     ad0:	0e 94 18 06 	call	0xc30	; 0xc30 <read_avg_adc>
     ad4:	38 01       	movw	r6, r16
     ad6:	68 1a       	sub	r6, r24
     ad8:	79 0a       	sbc	r7, r25
				int16_t adjusted_y = y_rest - read_avg_adc(2, 25);
     ada:	00 91 00 01 	lds	r16, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     ade:	10 91 01 01 	lds	r17, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     ae2:	69 e1       	ldi	r22, 0x19	; 25
     ae4:	70 e0       	ldi	r23, 0x00	; 0
     ae6:	82 e0       	ldi	r24, 0x02	; 2
     ae8:	0e 94 18 06 	call	0xc30	; 0xc30 <read_avg_adc>
     aec:	08 1b       	sub	r16, r24
     aee:	19 0b       	sbc	r17, r25
				int16_t left = adjusted_x-adjusted_y;
     af0:	73 01       	movw	r14, r6
     af2:	e0 1a       	sub	r14, r16
     af4:	f1 0a       	sbc	r15, r17
				int16_t right = adjusted_x+adjusted_y;
     af6:	06 0d       	add	r16, r6
     af8:	17 1d       	adc	r17, r7
				if(left > 127){
     afa:	80 e8       	ldi	r24, 0x80	; 128
     afc:	e8 16       	cp	r14, r24
     afe:	f1 04       	cpc	r15, r1
     b00:	64 f4       	brge	.+24     	; 0xb1a <main+0x122>
					left = 127;
				}
				else if(left < -127){
     b02:	91 e8       	ldi	r25, 0x81	; 129
     b04:	e9 16       	cp	r14, r25
     b06:	9f ef       	ldi	r25, 0xFF	; 255
     b08:	f9 06       	cpc	r15, r25
     b0a:	5c f0       	brlt	.+22     	; 0xb22 <main+0x12a>
					left = -127;
				} else if(left > -10 && left < 10) left = 0;
     b0c:	c7 01       	movw	r24, r14
     b0e:	09 96       	adiw	r24, 0x09	; 9
     b10:	43 97       	sbiw	r24, 0x13	; 19
     b12:	58 f4       	brcc	.+22     	; 0xb2a <main+0x132>
     b14:	e1 2c       	mov	r14, r1
     b16:	f1 2c       	mov	r15, r1
     b18:	08 c0       	rjmp	.+16     	; 0xb2a <main+0x132>
				int16_t adjusted_x = x_rest - read_avg_adc(1, 25);
				int16_t adjusted_y = y_rest - read_avg_adc(2, 25);
				int16_t left = adjusted_x-adjusted_y;
				int16_t right = adjusted_x+adjusted_y;
				if(left > 127){
					left = 127;
     b1a:	9f e7       	ldi	r25, 0x7F	; 127
     b1c:	e9 2e       	mov	r14, r25
     b1e:	f1 2c       	mov	r15, r1
     b20:	04 c0       	rjmp	.+8      	; 0xb2a <main+0x132>
				}
				else if(left < -127){
					left = -127;
     b22:	81 e8       	ldi	r24, 0x81	; 129
     b24:	e8 2e       	mov	r14, r24
     b26:	ff 24       	eor	r15, r15
     b28:	fa 94       	dec	r15
				} else if(left > -10 && left < 10) left = 0;
				
				if(right > 127) {
     b2a:	00 38       	cpi	r16, 0x80	; 128
     b2c:	11 05       	cpc	r17, r1
     b2e:	5c f4       	brge	.+22     	; 0xb46 <main+0x14e>
					right = 127;
				}
				else if(right < -127){
     b30:	01 38       	cpi	r16, 0x81	; 129
     b32:	af ef       	ldi	r26, 0xFF	; 255
     b34:	1a 07       	cpc	r17, r26
     b36:	54 f0       	brlt	.+20     	; 0xb4c <main+0x154>
					right = -127;
				} else if(right > -10 && right < 10) right = 0;
     b38:	c8 01       	movw	r24, r16
     b3a:	09 96       	adiw	r24, 0x09	; 9
     b3c:	43 97       	sbiw	r24, 0x13	; 19
     b3e:	40 f4       	brcc	.+16     	; 0xb50 <main+0x158>
     b40:	00 e0       	ldi	r16, 0x00	; 0
     b42:	10 e0       	ldi	r17, 0x00	; 0
     b44:	05 c0       	rjmp	.+10     	; 0xb50 <main+0x158>
				else if(left < -127){
					left = -127;
				} else if(left > -10 && left < 10) left = 0;
				
				if(right > 127) {
					right = 127;
     b46:	0f e7       	ldi	r16, 0x7F	; 127
     b48:	10 e0       	ldi	r17, 0x00	; 0
     b4a:	02 c0       	rjmp	.+4      	; 0xb50 <main+0x158>
				}
				else if(right < -127){
					right = -127;
     b4c:	01 e8       	ldi	r16, 0x81	; 129
     b4e:	1f ef       	ldi	r17, 0xFF	; 255
				} else if(right > -10 && right < 10) right = 0;
				
				if(left != last_left || right != last_right){
     b50:	ae 14       	cp	r10, r14
     b52:	bf 04       	cpc	r11, r15
     b54:	19 f4       	brne	.+6      	; 0xb5c <main+0x164>
     b56:	80 16       	cp	r8, r16
     b58:	91 06       	cpc	r9, r17
     b5a:	39 f1       	breq	.+78     	; 0xbaa <main+0x1b2>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     b5c:	4a e0       	ldi	r20, 0x0A	; 10
     b5e:	be 01       	movw	r22, r28
     b60:	6d 5f       	subi	r22, 0xFD	; 253
     b62:	7f 4f       	sbci	r23, 0xFF	; 255
     b64:	c7 01       	movw	r24, r14
     b66:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <__itoa_ncheck>
					itoa(left, itoabuf+2, 10);
					uint8_t len = strlen(itoabuf);
     b6a:	f6 01       	movw	r30, r12
     b6c:	01 90       	ld	r0, Z+
     b6e:	00 20       	and	r0, r0
     b70:	e9 f7       	brne	.-6      	; 0xb6c <main+0x174>
     b72:	31 97       	sbiw	r30, 0x01	; 1
     b74:	ec 19       	sub	r30, r12
     b76:	fd 09       	sbc	r31, r13
					itoabuf[len++] = ' ';
     b78:	d6 01       	movw	r26, r12
     b7a:	ae 0f       	add	r26, r30
     b7c:	b1 1d       	adc	r27, r1
     b7e:	5c 92       	st	X, r5
     b80:	ef 5f       	subi	r30, 0xFF	; 255
     b82:	b6 01       	movw	r22, r12
     b84:	6e 0f       	add	r22, r30
     b86:	71 1d       	adc	r23, r1
     b88:	4a e0       	ldi	r20, 0x0A	; 10
     b8a:	c8 01       	movw	r24, r16
     b8c:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <__itoa_ncheck>
					itoa(right, itoabuf+len, 10);
					uart_send_line(itoabuf);
     b90:	c6 01       	movw	r24, r12
     b92:	0e 94 e6 05 	call	0xbcc	; 0xbcc <uart_send_line>
     b96:	48 01       	movw	r8, r16
     b98:	57 01       	movw	r10, r14
     b9a:	07 c0       	rjmp	.+14     	; 0xbaa <main+0x1b2>
				}
				last_left = left;
				last_right = right;
			}
		} else{
			if(LED_PORT & (1<<LEDG)){
     b9c:	5d 9b       	sbis	0x0b, 5	; 11
     b9e:	05 c0       	rjmp	.+10     	; 0xbaa <main+0x1b2>
				uart_send_line("040");
     ba0:	8e e5       	ldi	r24, 0x5E	; 94
     ba2:	91 e0       	ldi	r25, 0x01	; 1
     ba4:	0e 94 e6 05 	call	0xbcc	; 0xbcc <uart_send_line>
				LED_PORT &= ~(1<<LEDG);
     ba8:	5d 98       	cbi	0x0b, 5	; 11
     baa:	bf ef       	ldi	r27, 0xFF	; 255
     bac:	20 e7       	ldi	r18, 0x70	; 112
     bae:	32 e0       	ldi	r19, 0x02	; 2
     bb0:	b1 50       	subi	r27, 0x01	; 1
     bb2:	20 40       	sbci	r18, 0x00	; 0
     bb4:	30 40       	sbci	r19, 0x00	; 0
     bb6:	e1 f7       	brne	.-8      	; 0xbb0 <main+0x1b8>
     bb8:	00 c0       	rjmp	.+0      	; 0xbba <main+0x1c2>
     bba:	00 00       	nop
     bbc:	64 cf       	rjmp	.-312    	; 0xa86 <main+0x8e>

00000bbe <uart_send_byte>:

bool uart_receive_byte(uint8_t* buffer){
	if(!( UCSR0A & (1<<RXC0))) return false;
	*buffer = UDR0;
	return true;
}
     bbe:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     bc2:	95 ff       	sbrs	r25, 5
     bc4:	fc cf       	rjmp	.-8      	; 0xbbe <uart_send_byte>
     bc6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     bca:	08 95       	ret

00000bcc <uart_send_line>:
     bcc:	fc 01       	movw	r30, r24
     bce:	91 91       	ld	r25, Z+
     bd0:	99 23       	and	r25, r25
     bd2:	39 f0       	breq	.+14     	; 0xbe2 <uart_send_line+0x16>
     bd4:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     bd8:	85 ff       	sbrs	r24, 5
     bda:	fc cf       	rjmp	.-8      	; 0xbd4 <uart_send_line+0x8>
     bdc:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     be0:	f6 cf       	rjmp	.-20     	; 0xbce <uart_send_line+0x2>
     be2:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     be6:	85 ff       	sbrs	r24, 5
     be8:	fc cf       	rjmp	.-8      	; 0xbe2 <uart_send_line+0x16>
     bea:	8a e0       	ldi	r24, 0x0A	; 10
     bec:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     bf0:	08 95       	ret

00000bf2 <uart_flush>:

void uart_flush(){
	uint8_t dummy;
	while ( UCSR0A & (1<<RXC0) ) dummy = UDR0;
     bf2:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     bf6:	87 ff       	sbrs	r24, 7
     bf8:	03 c0       	rjmp	.+6      	; 0xc00 <uart_flush+0xe>
     bfa:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     bfe:	f9 cf       	rjmp	.-14     	; 0xbf2 <uart_flush>
}
     c00:	08 95       	ret

00000c02 <uart_init>:

void uart_init(){
	UBRR0 = 0;		//0==500000 baud rate.  12==38400 baud rate
     c02:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
     c06:	10 92 c4 00 	sts	0x00C4, r1	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UCSR0B = (1<<RXEN0)|(1<<TXEN0)|(1<<RXCIE0);
     c0a:	88 e9       	ldi	r24, 0x98	; 152
     c0c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	/* Set frame format: 8data, 1stop bit */
	UCSR0C = (0<<USBS0)|(3<<UCSZ00);
     c10:	86 e0       	ldi	r24, 0x06	; 6
     c12:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
     c16:	08 95       	ret

00000c18 <adc_init>:
	//Start conversion
	ADCSRA |= 1<<ADSC;
	//Wait for completion and return result
	while( ADCSRA & 1<<ADSC);
	return ADC;
}
     c18:	87 b1       	in	r24, 0x07	; 7
     c1a:	88 7f       	andi	r24, 0xF8	; 248
     c1c:	87 b9       	out	0x07, r24	; 7
     c1e:	86 e8       	ldi	r24, 0x86	; 134
     c20:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     c24:	88 e3       	ldi	r24, 0x38	; 56
     c26:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7f807e>
     c2a:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
     c2e:	08 95       	ret

00000c30 <read_avg_adc>:
/* the average ADC-value from ADCH and ADCL	from the given amount		*/
/* of iterations														*/
/* @param port The port to read from (0-3)								*/
/* @param iterations The amount of iterations to take average from		*/
/************************************************************************/
uint16_t read_avg_adc(uint8_t port, uint16_t iterations){
     c30:	9b 01       	movw	r18, r22
	//Choose port and reference voltage
	ADMUX = port|(1<<REFS0);
     c32:	80 64       	ori	r24, 0x40	; 64
     c34:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	uint32_t sum = 0;
	//Start given amount of conversions and add up results
	for (uint8_t i = 0; i < iterations; i++){
     c38:	40 e0       	ldi	r20, 0x00	; 0
/* @param iterations The amount of iterations to take average from		*/
/************************************************************************/
uint16_t read_avg_adc(uint8_t port, uint16_t iterations){
	//Choose port and reference voltage
	ADMUX = port|(1<<REFS0);
	uint32_t sum = 0;
     c3a:	60 e0       	ldi	r22, 0x00	; 0
     c3c:	70 e0       	ldi	r23, 0x00	; 0
     c3e:	cb 01       	movw	r24, r22
	//Start given amount of conversions and add up results
	for (uint8_t i = 0; i < iterations; i++){
     c40:	e4 2f       	mov	r30, r20
     c42:	f0 e0       	ldi	r31, 0x00	; 0
     c44:	e2 17       	cp	r30, r18
     c46:	f3 07       	cpc	r31, r19
     c48:	98 f4       	brcc	.+38     	; 0xc70 <read_avg_adc+0x40>
		ADCSRA |= 1<<ADSC;
     c4a:	50 91 7a 00 	lds	r21, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     c4e:	50 64       	ori	r21, 0x40	; 64
     c50:	50 93 7a 00 	sts	0x007A, r21	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
		while( ADCSRA & 1<<ADSC);
     c54:	50 91 7a 00 	lds	r21, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     c58:	56 fd       	sbrc	r21, 6
     c5a:	fc cf       	rjmp	.-8      	; 0xc54 <read_avg_adc+0x24>
		sum += ADC;
     c5c:	e0 91 78 00 	lds	r30, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     c60:	f0 91 79 00 	lds	r31, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     c64:	6e 0f       	add	r22, r30
     c66:	7f 1f       	adc	r23, r31
     c68:	81 1d       	adc	r24, r1
     c6a:	91 1d       	adc	r25, r1
uint16_t read_avg_adc(uint8_t port, uint16_t iterations){
	//Choose port and reference voltage
	ADMUX = port|(1<<REFS0);
	uint32_t sum = 0;
	//Start given amount of conversions and add up results
	for (uint8_t i = 0; i < iterations; i++){
     c6c:	4f 5f       	subi	r20, 0xFF	; 255
     c6e:	e8 cf       	rjmp	.-48     	; 0xc40 <read_avg_adc+0x10>
		ADCSRA |= 1<<ADSC;
		while( ADCSRA & 1<<ADSC);
		sum += ADC;
	}
	//Return truncated average
	return (uint16_t)(sum/iterations);
     c70:	40 e0       	ldi	r20, 0x00	; 0
     c72:	50 e0       	ldi	r21, 0x00	; 0
     c74:	0e 94 b3 0b 	call	0x1766	; 0x1766 <__udivmodsi4>
     c78:	c9 01       	movw	r24, r18
     c7a:	08 95       	ret

00000c7c <spi_tx>:
     c7c:	8e bd       	out	0x2e, r24	; 46
     c7e:	0d b4       	in	r0, 0x2d	; 45
     c80:	07 fe       	sbrs	r0, 7
     c82:	fd cf       	rjmp	.-6      	; 0xc7e <spi_tx+0x2>
     c84:	08 95       	ret

00000c86 <lcd_init>:
     c86:	cf 93       	push	r28
     c88:	df 93       	push	r29
     c8a:	84 b1       	in	r24, 0x04	; 4
     c8c:	85 60       	ori	r24, 0x05	; 5
     c8e:	84 b9       	out	0x04, r24	; 4
     c90:	85 b1       	in	r24, 0x05	; 5
     c92:	8a 7f       	andi	r24, 0xFA	; 250
     c94:	85 b9       	out	0x05, r24	; 5
     c96:	ca ee       	ldi	r28, 0xEA	; 234
     c98:	d0 e0       	ldi	r29, 0x00	; 0
     c9a:	fe 01       	movw	r30, r28
     c9c:	84 91       	lpm	r24, Z
     c9e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <spi_tx>
     ca2:	87 eb       	ldi	r24, 0xB7	; 183
     ca4:	9b e0       	ldi	r25, 0x0B	; 11
     ca6:	01 97       	sbiw	r24, 0x01	; 1
     ca8:	f1 f7       	brne	.-4      	; 0xca6 <lcd_init+0x20>
     caa:	00 c0       	rjmp	.+0      	; 0xcac <lcd_init+0x26>
     cac:	00 00       	nop
     cae:	21 96       	adiw	r28, 0x01	; 1
     cb0:	90 e0       	ldi	r25, 0x00	; 0
     cb2:	c3 3f       	cpi	r28, 0xF3	; 243
     cb4:	d9 07       	cpc	r29, r25
     cb6:	89 f7       	brne	.-30     	; 0xc9a <lcd_init+0x14>
     cb8:	df 91       	pop	r29
     cba:	cf 91       	pop	r28
     cbc:	08 95       	ret

00000cbe <write_lcd_char>:
     cbe:	28 9a       	sbi	0x05, 0	; 5
     cc0:	2a 98       	cbi	0x05, 2	; 5
     cc2:	0e 94 3e 06 	call	0xc7c	; 0xc7c <spi_tx>
     cc6:	80 e5       	ldi	r24, 0x50	; 80
     cc8:	8a 95       	dec	r24
     cca:	f1 f7       	brne	.-4      	; 0xcc8 <write_lcd_char+0xa>
     ccc:	28 98       	cbi	0x05, 0	; 5
     cce:	08 95       	ret

00000cd0 <write_lcd_string>:
     cd0:	1f 93       	push	r17
     cd2:	cf 93       	push	r28
     cd4:	df 93       	push	r29
     cd6:	ec 01       	movw	r28, r24
     cd8:	28 9a       	sbi	0x05, 0	; 5
     cda:	2a 98       	cbi	0x05, 2	; 5
     cdc:	80 e0       	ldi	r24, 0x00	; 0
     cde:	11 e0       	ldi	r17, 0x01	; 1
     ce0:	18 0f       	add	r17, r24
     ce2:	fe 01       	movw	r30, r28
     ce4:	e8 0f       	add	r30, r24
     ce6:	f1 1d       	adc	r31, r1
     ce8:	80 81       	ld	r24, Z
     cea:	88 23       	and	r24, r24
     cec:	39 f0       	breq	.+14     	; 0xcfc <write_lcd_string+0x2c>
     cee:	0e 94 3e 06 	call	0xc7c	; 0xc7c <spi_tx>
     cf2:	80 e5       	ldi	r24, 0x50	; 80
     cf4:	8a 95       	dec	r24
     cf6:	f1 f7       	brne	.-4      	; 0xcf4 <write_lcd_string+0x24>
     cf8:	81 2f       	mov	r24, r17
     cfa:	f1 cf       	rjmp	.-30     	; 0xcde <write_lcd_string+0xe>
     cfc:	28 98       	cbi	0x05, 0	; 5
     cfe:	df 91       	pop	r29
     d00:	cf 91       	pop	r28
     d02:	1f 91       	pop	r17
     d04:	08 95       	ret

00000d06 <set_cursor_pos>:
/************************************************************************/
/* Sets the LCD cursors position.										*/
/* @param pos The position to set to									*/
/************************************************************************/
void set_cursor_pos(uint8_t pos){
	PORTB &= ~(1<<CSB);   //Clear CSB
     d06:	2a 98       	cbi	0x05, 2	; 5
	spi_tx(pos|0x80);
     d08:	80 68       	ori	r24, 0x80	; 128
     d0a:	0e 94 3e 06 	call	0xc7c	; 0xc7c <spi_tx>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     d0e:	80 e5       	ldi	r24, 0x50	; 80
     d10:	8a 95       	dec	r24
     d12:	f1 f7       	brne	.-4      	; 0xd10 <set_cursor_pos+0xa>
     d14:	08 95       	ret

00000d16 <clear_line>:

/************************************************************************/
/* Clears the given line on the LCD                                     */
/* @param linenum The line to clear (0-2)								*/
/************************************************************************/
void clear_line(uint8_t linenum){
     d16:	cf 93       	push	r28
	set_cursor_pos(linenum * 16);
     d18:	82 95       	swap	r24
     d1a:	80 7f       	andi	r24, 0xF0	; 240
     d1c:	0e 94 83 06 	call	0xd06	; 0xd06 <set_cursor_pos>
	PORTB |= 1<<RS;
     d20:	28 9a       	sbi	0x05, 0	; 5
	PORTB &= ~(1<<CSB);
     d22:	2a 98       	cbi	0x05, 2	; 5
     d24:	c0 e1       	ldi	r28, 0x10	; 16
	for (uint8_t i = 0; i < 16; i++){
		spi_tx(' ');
     d26:	80 e2       	ldi	r24, 0x20	; 32
     d28:	0e 94 3e 06 	call	0xc7c	; 0xc7c <spi_tx>
     d2c:	80 e5       	ldi	r24, 0x50	; 80
     d2e:	8a 95       	dec	r24
     d30:	f1 f7       	brne	.-4      	; 0xd2e <clear_line+0x18>
     d32:	c1 50       	subi	r28, 0x01	; 1
/************************************************************************/
void clear_line(uint8_t linenum){
	set_cursor_pos(linenum * 16);
	PORTB |= 1<<RS;
	PORTB &= ~(1<<CSB);
	for (uint8_t i = 0; i < 16; i++){
     d34:	c1 f7       	brne	.-16     	; 0xd26 <clear_line+0x10>
		spi_tx(' ');
		_delay_us(30);
	}
	PORTB &= ~(1<<RS);
     d36:	28 98       	cbi	0x05, 0	; 5
}
     d38:	cf 91       	pop	r28
     d3a:	08 95       	ret

00000d3c <messages_timerproc>:
static volatile uint8_t message_extract_ind = 0;
static volatile uint8_t message_count = 0;
static volatile bool message_displaying = false;

void messages_timerproc(){
	if(message_displaying && ++message_parts > 100){
     d3c:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <message_displaying>
     d40:	88 23       	and	r24, r24
     d42:	f1 f0       	breq	.+60     	; 0xd80 <messages_timerproc+0x44>
     d44:	80 91 f9 01 	lds	r24, 0x01F9	; 0x8001f9 <message_parts>
     d48:	90 91 fa 01 	lds	r25, 0x01FA	; 0x8001fa <message_parts+0x1>
     d4c:	01 96       	adiw	r24, 0x01	; 1
     d4e:	90 93 fa 01 	sts	0x01FA, r25	; 0x8001fa <message_parts+0x1>
     d52:	80 93 f9 01 	sts	0x01F9, r24	; 0x8001f9 <message_parts>
     d56:	85 36       	cpi	r24, 0x65	; 101
     d58:	91 05       	cpc	r25, r1
     d5a:	90 f0       	brcs	.+36     	; 0xd80 <messages_timerproc+0x44>
		if(++message_seconds > DISP_TIME){
     d5c:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <message_seconds>
     d60:	8f 5f       	subi	r24, 0xFF	; 255
     d62:	80 93 f8 01 	sts	0x01F8, r24	; 0x8001f8 <message_seconds>
     d66:	86 30       	cpi	r24, 0x06	; 6
     d68:	38 f0       	brcs	.+14     	; 0xd78 <messages_timerproc+0x3c>
			message_seconds = 0;
     d6a:	10 92 f8 01 	sts	0x01F8, r1	; 0x8001f8 <message_seconds>
			message_displaying = false;
     d6e:	10 92 6c 01 	sts	0x016C, r1	; 0x80016c <message_displaying>
			clear_line(2);
     d72:	82 e0       	ldi	r24, 0x02	; 2
     d74:	0e 94 8b 06 	call	0xd16	; 0xd16 <clear_line>
		}
		message_parts = 0;
     d78:	10 92 fa 01 	sts	0x01FA, r1	; 0x8001fa <message_parts+0x1>
     d7c:	10 92 f9 01 	sts	0x01F9, r1	; 0x8001f9 <message_parts>
     d80:	08 95       	ret

00000d82 <force_message>:
	}
}

void force_message(char* msg){
     d82:	cf 93       	push	r28
     d84:	df 93       	push	r29
     d86:	ec 01       	movw	r28, r24
	message_displaying = true;
     d88:	81 e0       	ldi	r24, 0x01	; 1
     d8a:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <message_displaying>
	message_parts = 0;
     d8e:	10 92 fa 01 	sts	0x01FA, r1	; 0x8001fa <message_parts+0x1>
     d92:	10 92 f9 01 	sts	0x01F9, r1	; 0x8001f9 <message_parts>
	message_seconds = 0;
     d96:	10 92 f8 01 	sts	0x01F8, r1	; 0x8001f8 <message_seconds>
	clear_line(2);
     d9a:	82 e0       	ldi	r24, 0x02	; 2
     d9c:	0e 94 8b 06 	call	0xd16	; 0xd16 <clear_line>
	set_cursor_pos(32);
     da0:	80 e2       	ldi	r24, 0x20	; 32
     da2:	0e 94 83 06 	call	0xd06	; 0xd06 <set_cursor_pos>
	write_lcd_string(msg);
     da6:	ce 01       	movw	r24, r28
}
     da8:	df 91       	pop	r29
     daa:	cf 91       	pop	r28
	message_displaying = true;
	message_parts = 0;
	message_seconds = 0;
	clear_line(2);
	set_cursor_pos(32);
	write_lcd_string(msg);
     dac:	0c 94 68 06 	jmp	0xcd0	; 0xcd0 <write_lcd_string>

00000db0 <queue_message>:
}

void queue_message(char* msg){
     db0:	cf 93       	push	r28
     db2:	df 93       	push	r29
     db4:	ec 01       	movw	r28, r24
	if(message_count == MSGBUF_SIZE){
     db6:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <message_count>
     dba:	88 30       	cpi	r24, 0x08	; 8
     dbc:	81 f4       	brne	.+32     	; 0xdde <queue_message+0x2e>
		force_message((char*)(message_buf)[MOD_BUFSIZE(message_extract_ind++)]);
     dbe:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <message_extract_ind>
     dc2:	91 e0       	ldi	r25, 0x01	; 1
     dc4:	98 0f       	add	r25, r24
     dc6:	90 93 6e 01 	sts	0x016E, r25	; 0x80016e <message_extract_ind>
     dca:	87 70       	andi	r24, 0x07	; 7
     dcc:	21 e1       	ldi	r18, 0x11	; 17
     dce:	82 9f       	mul	r24, r18
     dd0:	c0 01       	movw	r24, r0
     dd2:	11 24       	eor	r1, r1
     dd4:	80 59       	subi	r24, 0x90	; 144
     dd6:	9e 4f       	sbci	r25, 0xFE	; 254
     dd8:	0e 94 c1 06 	call	0xd82	; 0xd82 <force_message>
     ddc:	0a c0       	rjmp	.+20     	; 0xdf2 <queue_message+0x42>
	} else if(++message_count > MSGBUF_SIZE) message_count = MSGBUF_SIZE;
     dde:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <message_count>
     de2:	8f 5f       	subi	r24, 0xFF	; 255
     de4:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <message_count>
     de8:	89 30       	cpi	r24, 0x09	; 9
     dea:	18 f0       	brcs	.+6      	; 0xdf2 <queue_message+0x42>
     dec:	88 e0       	ldi	r24, 0x08	; 8
     dee:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <message_count>
	strcpy((char*)(message_buf)[MOD_BUFSIZE(message_insert_ind++)], msg);
     df2:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <message_insert_ind>
     df6:	91 e0       	ldi	r25, 0x01	; 1
     df8:	98 0f       	add	r25, r24
     dfa:	90 93 6f 01 	sts	0x016F, r25	; 0x80016f <message_insert_ind>
     dfe:	87 70       	andi	r24, 0x07	; 7
     e00:	21 e1       	ldi	r18, 0x11	; 17
     e02:	82 9f       	mul	r24, r18
     e04:	c0 01       	movw	r24, r0
     e06:	11 24       	eor	r1, r1
     e08:	be 01       	movw	r22, r28
     e0a:	80 59       	subi	r24, 0x90	; 144
     e0c:	9e 4f       	sbci	r25, 0xFE	; 254
}
     e0e:	df 91       	pop	r29
     e10:	cf 91       	pop	r28

void queue_message(char* msg){
	if(message_count == MSGBUF_SIZE){
		force_message((char*)(message_buf)[MOD_BUFSIZE(message_extract_ind++)]);
	} else if(++message_count > MSGBUF_SIZE) message_count = MSGBUF_SIZE;
	strcpy((char*)(message_buf)[MOD_BUFSIZE(message_insert_ind++)], msg);
     e12:	0c 94 f4 0b 	jmp	0x17e8	; 0x17e8 <strcpy>

00000e16 <display_next_message>:
}

void display_next_message(){
	if(message_count > 0){
     e16:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <message_count>
     e1a:	88 23       	and	r24, r24
     e1c:	d1 f0       	breq	.+52     	; 0xe52 <display_next_message+0x3c>
		set_cursor_pos(32);
     e1e:	80 e2       	ldi	r24, 0x20	; 32
     e20:	0e 94 83 06 	call	0xd06	; 0xd06 <set_cursor_pos>
		write_lcd_string((char*)(message_buf)[MOD_BUFSIZE(message_extract_ind++)]);
     e24:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <message_extract_ind>
     e28:	91 e0       	ldi	r25, 0x01	; 1
     e2a:	98 0f       	add	r25, r24
     e2c:	90 93 6e 01 	sts	0x016E, r25	; 0x80016e <message_extract_ind>
     e30:	87 70       	andi	r24, 0x07	; 7
     e32:	21 e1       	ldi	r18, 0x11	; 17
     e34:	82 9f       	mul	r24, r18
     e36:	c0 01       	movw	r24, r0
     e38:	11 24       	eor	r1, r1
     e3a:	80 59       	subi	r24, 0x90	; 144
     e3c:	9e 4f       	sbci	r25, 0xFE	; 254
     e3e:	0e 94 68 06 	call	0xcd0	; 0xcd0 <write_lcd_string>
		message_displaying = true;
     e42:	81 e0       	ldi	r24, 0x01	; 1
     e44:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <message_displaying>
		message_count--;
     e48:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <message_count>
     e4c:	81 50       	subi	r24, 0x01	; 1
     e4e:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <message_count>
     e52:	08 95       	ret

00000e54 <message_is_displaying>:
	}
}

bool message_is_displaying(){
	return message_displaying;
     e54:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <message_displaying>
}
     e58:	08 95       	ret

00000e5a <spi_init>:
/************************************************************************/
/* Initiates the MCU SPI as master with 16 as prescaler factor           */
/************************************************************************/
void spi_init(){
	// Set MOSI and SCK as out
	DDRB |= (1<<MOSI) | (1<<SCK) | (1<<SS);
     e5a:	84 b1       	in	r24, 0x04	; 4
     e5c:	8c 62       	ori	r24, 0x2C	; 44
     e5e:	84 b9       	out	0x04, r24	; 4
	DDRB &= ~(1<<MISO);
     e60:	24 98       	cbi	0x04, 4	; 4
	//Enable SPI in master mode with fck/4 as clock
	SPCR = (1<<SPE) | (1<<MSTR);
     e62:	80 e5       	ldi	r24, 0x50	; 80
     e64:	8c bd       	out	0x2c, r24	; 44
     e66:	08 95       	ret

00000e68 <Summer_PlayNote>:
static volatile uint16_t note_time = 0; // The timer cycles left for current note
static volatile uint8_t cur_melody;     // The index of the current melody
static volatile uint8_t current_note;   // The index of the curent note

// Plays a single note on the buzzer
void Summer_PlayNote(uint8_t note){
     e68:	cf 92       	push	r12
     e6a:	df 92       	push	r13
     e6c:	ef 92       	push	r14
     e6e:	ff 92       	push	r15
     e70:	cf 93       	push	r28
     e72:	df 93       	push	r29
     e74:	d8 2f       	mov	r29, r24
    if(GET_PITCH_EXP(note) == -1){  // Stop buzzer if note is a rest
     e76:	68 2f       	mov	r22, r24
     e78:	70 e0       	ldi	r23, 0x00	; 0
     e7a:	6f 71       	andi	r22, 0x1F	; 31
#ifdef SUMMER_USE_SW
        rest = true;
#else
        TCCR1A &= ~(1<<COM1A0);
     e7c:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
static volatile uint8_t cur_melody;     // The index of the current melody
static volatile uint8_t current_note;   // The index of the curent note

// Plays a single note on the buzzer
void Summer_PlayNote(uint8_t note){
    if(GET_PITCH_EXP(note) == -1){  // Stop buzzer if note is a rest
     e80:	61 15       	cp	r22, r1
     e82:	71 05       	cpc	r23, r1
     e84:	21 f4       	brne	.+8      	; 0xe8e <Summer_PlayNote+0x26>
#ifdef SUMMER_USE_SW
        rest = true;
#else
        TCCR1A &= ~(1<<COM1A0);
     e86:	8f 7b       	andi	r24, 0xBF	; 191
     e88:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
     e8c:	21 c0       	rjmp	.+66     	; 0xed0 <Summer_PlayNote+0x68>
#endif
    } else{                         // Start buzzer and set correct frequency
#ifdef SUMMER_USE_SW
        rest = false;
#else
        TCCR1A |= (1<<COM1A0);
     e8e:	80 64       	ori	r24, 0x40	; 64
     e90:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
#endif
        OCR1A = LOWC_OCR / (pow(ROOT12_2,GET_PITCH_EXP(note)));
     e94:	61 50       	subi	r22, 0x01	; 1
     e96:	71 09       	sbc	r23, r1
     e98:	07 2e       	mov	r0, r23
     e9a:	00 0c       	add	r0, r0
     e9c:	88 0b       	sbc	r24, r24
     e9e:	99 0b       	sbc	r25, r25
     ea0:	0e 94 c8 08 	call	0x1190	; 0x1190 <__floatsisf>
     ea4:	9b 01       	movw	r18, r22
     ea6:	ac 01       	movw	r20, r24
     ea8:	6d e7       	ldi	r22, 0x7D	; 125
     eaa:	7c e9       	ldi	r23, 0x9C	; 156
     eac:	87 e8       	ldi	r24, 0x87	; 135
     eae:	9f e3       	ldi	r25, 0x3F	; 63
     eb0:	0e 94 54 09 	call	0x12a8	; 0x12a8 <pow>
     eb4:	9b 01       	movw	r18, r22
     eb6:	ac 01       	movw	r20, r24
     eb8:	60 e0       	ldi	r22, 0x00	; 0
     eba:	70 e6       	ldi	r23, 0x60	; 96
     ebc:	80 e7       	ldi	r24, 0x70	; 112
     ebe:	96 e4       	ldi	r25, 0x46	; 70
     ec0:	0e 94 25 08 	call	0x104a	; 0x104a <__divsf3>
     ec4:	0e 94 97 08 	call	0x112e	; 0x112e <__fixunssfsi>
     ec8:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     ecc:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
    }
    // cycles needed = frequency / (bar time) / (note length divisor)
    note_time = ((F_CPU/(OCR1A + 1))/(bpms[cur_melody]/(240.0)))/GET_DURATION_DIV(note);
     ed0:	20 91 88 00 	lds	r18, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
     ed4:	30 91 89 00 	lds	r19, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     ed8:	c0 91 fc 01 	lds	r28, 0x01FC	; 0x8001fc <cur_melody>
     edc:	2f 5f       	subi	r18, 0xFF	; 255
     ede:	3f 4f       	sbci	r19, 0xFF	; 255
     ee0:	40 e0       	ldi	r20, 0x00	; 0
     ee2:	50 e0       	ldi	r21, 0x00	; 0
     ee4:	60 e0       	ldi	r22, 0x00	; 0
     ee6:	72 e1       	ldi	r23, 0x12	; 18
     ee8:	8a e7       	ldi	r24, 0x7A	; 122
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <__divmodsi4>
     ef0:	ca 01       	movw	r24, r20
     ef2:	b9 01       	movw	r22, r18
     ef4:	0e 94 c8 08 	call	0x1190	; 0x1190 <__floatsisf>
     ef8:	6b 01       	movw	r12, r22
     efa:	7c 01       	movw	r14, r24
     efc:	ec 2f       	mov	r30, r28
     efe:	f0 e0       	ldi	r31, 0x00	; 0
     f00:	ee 59       	subi	r30, 0x9E	; 158
     f02:	fe 4f       	sbci	r31, 0xFE	; 254
     f04:	60 81       	ld	r22, Z
     f06:	70 e0       	ldi	r23, 0x00	; 0
     f08:	80 e0       	ldi	r24, 0x00	; 0
     f0a:	90 e0       	ldi	r25, 0x00	; 0
     f0c:	0e 94 c8 08 	call	0x1190	; 0x1190 <__floatsisf>
     f10:	20 e0       	ldi	r18, 0x00	; 0
     f12:	30 e0       	ldi	r19, 0x00	; 0
     f14:	40 e7       	ldi	r20, 0x70	; 112
     f16:	53 e4       	ldi	r21, 0x43	; 67
     f18:	0e 94 25 08 	call	0x104a	; 0x104a <__divsf3>
     f1c:	9b 01       	movw	r18, r22
     f1e:	ac 01       	movw	r20, r24
     f20:	c7 01       	movw	r24, r14
     f22:	b6 01       	movw	r22, r12
     f24:	0e 94 25 08 	call	0x104a	; 0x104a <__divsf3>
     f28:	6b 01       	movw	r12, r22
     f2a:	7c 01       	movw	r14, r24
     f2c:	d2 95       	swap	r29
     f2e:	d6 95       	lsr	r29
     f30:	d7 70       	andi	r29, 0x07	; 7
     f32:	61 e0       	ldi	r22, 0x01	; 1
     f34:	70 e0       	ldi	r23, 0x00	; 0
     f36:	02 c0       	rjmp	.+4      	; 0xf3c <Summer_PlayNote+0xd4>
     f38:	66 0f       	add	r22, r22
     f3a:	77 1f       	adc	r23, r23
     f3c:	da 95       	dec	r29
     f3e:	e2 f7       	brpl	.-8      	; 0xf38 <Summer_PlayNote+0xd0>
     f40:	07 2e       	mov	r0, r23
     f42:	00 0c       	add	r0, r0
     f44:	88 0b       	sbc	r24, r24
     f46:	99 0b       	sbc	r25, r25
     f48:	0e 94 c8 08 	call	0x1190	; 0x1190 <__floatsisf>
     f4c:	9b 01       	movw	r18, r22
     f4e:	ac 01       	movw	r20, r24
     f50:	c7 01       	movw	r24, r14
     f52:	b6 01       	movw	r22, r12
     f54:	0e 94 25 08 	call	0x104a	; 0x104a <__divsf3>
     f58:	0e 94 97 08 	call	0x112e	; 0x112e <__fixunssfsi>
     f5c:	70 93 fe 01 	sts	0x01FE, r23	; 0x8001fe <note_time+0x1>
     f60:	60 93 fd 01 	sts	0x01FD, r22	; 0x8001fd <note_time>
}
     f64:	df 91       	pop	r29
     f66:	cf 91       	pop	r28
     f68:	ff 90       	pop	r15
     f6a:	ef 90       	pop	r14
     f6c:	df 90       	pop	r13
     f6e:	cf 90       	pop	r12
     f70:	08 95       	ret

00000f72 <__vector_11>:

// Interrupt vector to play next note after the current notes length is passed
// Stops the melody when it encounters a 0xFF
ISR(TIMER1_COMPA_vect){
     f72:	1f 92       	push	r1
     f74:	0f 92       	push	r0
     f76:	0f b6       	in	r0, 0x3f	; 63
     f78:	0f 92       	push	r0
     f7a:	11 24       	eor	r1, r1
     f7c:	2f 93       	push	r18
     f7e:	3f 93       	push	r19
     f80:	4f 93       	push	r20
     f82:	5f 93       	push	r21
     f84:	6f 93       	push	r22
     f86:	7f 93       	push	r23
     f88:	8f 93       	push	r24
     f8a:	9f 93       	push	r25
     f8c:	af 93       	push	r26
     f8e:	bf 93       	push	r27
     f90:	ef 93       	push	r30
     f92:	ff 93       	push	r31
    if(rest)
        SW_SUMMER_PORT &= ~(1<<SUMMER_PIN);
    else
        SW_SUMMER_PORT ^= (1<<SUMMER_PIN);
#endif
    note_time--; 
     f94:	80 91 fd 01 	lds	r24, 0x01FD	; 0x8001fd <note_time>
     f98:	90 91 fe 01 	lds	r25, 0x01FE	; 0x8001fe <note_time+0x1>
     f9c:	01 97       	sbiw	r24, 0x01	; 1
     f9e:	90 93 fe 01 	sts	0x01FE, r25	; 0x8001fe <note_time+0x1>
     fa2:	80 93 fd 01 	sts	0x01FD, r24	; 0x8001fd <note_time>
    if (note_time == 0){
     fa6:	80 91 fd 01 	lds	r24, 0x01FD	; 0x8001fd <note_time>
     faa:	90 91 fe 01 	lds	r25, 0x01FE	; 0x8001fe <note_time+0x1>
     fae:	89 2b       	or	r24, r25
     fb0:	e9 f4       	brne	.+58     	; 0xfec <__vector_11+0x7a>
        current_note++;
     fb2:	80 91 fb 01 	lds	r24, 0x01FB	; 0x8001fb <current_note>
     fb6:	8f 5f       	subi	r24, 0xFF	; 255
     fb8:	80 93 fb 01 	sts	0x01FB, r24	; 0x8001fb <current_note>
        // Read next note from program memory
        uint8_t note = pgm_read_byte(&(melodies[cur_melody][current_note]));
     fbc:	e0 91 fc 01 	lds	r30, 0x01FC	; 0x8001fc <cur_melody>
     fc0:	80 91 fb 01 	lds	r24, 0x01FB	; 0x8001fb <current_note>
     fc4:	f0 e0       	ldi	r31, 0x00	; 0
     fc6:	fe 2f       	mov	r31, r30
     fc8:	ee 27       	eor	r30, r30
     fca:	e8 0f       	add	r30, r24
     fcc:	f1 1d       	adc	r31, r1
     fce:	ed 50       	subi	r30, 0x0D	; 13
     fd0:	ff 4f       	sbci	r31, 0xFF	; 255
     fd2:	84 91       	lpm	r24, Z
        if(note == 0x00){   // Stop buzzer if 0xFF
     fd4:	81 11       	cpse	r24, r1
     fd6:	08 c0       	rjmp	.+16     	; 0xfe8 <__vector_11+0x76>
            TIMSK1 = 0;
     fd8:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
            TCCR1B &= ~(1<<CS10);
     fdc:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     fe0:	8e 7f       	andi	r24, 0xFE	; 254
     fe2:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     fe6:	02 c0       	rjmp	.+4      	; 0xfec <__vector_11+0x7a>
#ifdef SUMMER_USE_SW
            SW_SUMMER_PORT &= ~(1<<SUMMER_PIN);
#endif
        } else
            Summer_PlayNote(note);
     fe8:	0e 94 34 07 	call	0xe68	; 0xe68 <Summer_PlayNote>
    }
}
     fec:	ff 91       	pop	r31
     fee:	ef 91       	pop	r30
     ff0:	bf 91       	pop	r27
     ff2:	af 91       	pop	r26
     ff4:	9f 91       	pop	r25
     ff6:	8f 91       	pop	r24
     ff8:	7f 91       	pop	r23
     ffa:	6f 91       	pop	r22
     ffc:	5f 91       	pop	r21
     ffe:	4f 91       	pop	r20
    1000:	3f 91       	pop	r19
    1002:	2f 91       	pop	r18
    1004:	0f 90       	pop	r0
    1006:	0f be       	out	0x3f, r0	; 63
    1008:	0f 90       	pop	r0
    100a:	1f 90       	pop	r1
    100c:	18 95       	reti

0000100e <Summer_Init>:

// ------------- PUBLIC -------------

// Initializes the summer
void Summer_Init(void){
    SUMMER_DDR |= (1<<SUMMER_PIN);
    100e:	21 9a       	sbi	0x04, 1	; 4
    // Start timer
#ifdef SUMMER_USE_SW
    TCCR1A = 0;
#else
    TCCR1A = (1<<COM1A0);
    1010:	80 e4       	ldi	r24, 0x40	; 64
    1012:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
#endif
    TCCR1B = (1<<WGM12);
    1016:	88 e0       	ldi	r24, 0x08	; 8
    1018:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    101c:	08 95       	ret

0000101e <Summer_PlayMelody>:
}

// Plays a specified melody on the buzzer
void Summer_PlayMelody(uint8_t melody){
    cur_melody = melody;
    101e:	80 93 fc 01 	sts	0x01FC, r24	; 0x8001fc <cur_melody>
    current_note = 0;
    1022:	10 92 fb 01 	sts	0x01FB, r1	; 0x8001fb <current_note>
    Summer_PlayNote(pgm_read_byte(&(melodies[melody][0])));
    1026:	e8 2f       	mov	r30, r24
    1028:	f0 e0       	ldi	r31, 0x00	; 0
    102a:	fe 2f       	mov	r31, r30
    102c:	ee 27       	eor	r30, r30
    102e:	ed 50       	subi	r30, 0x0D	; 13
    1030:	ff 4f       	sbci	r31, 0xFF	; 255
    1032:	84 91       	lpm	r24, Z
    1034:	0e 94 34 07 	call	0xe68	; 0xe68 <Summer_PlayNote>
    TIMSK1 = (1<<OCIE1A);
    1038:	82 e0       	ldi	r24, 0x02	; 2
    103a:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
    TCCR1B |= (1<<CS10);
    103e:	e1 e8       	ldi	r30, 0x81	; 129
    1040:	f0 e0       	ldi	r31, 0x00	; 0
    1042:	80 81       	ld	r24, Z
    1044:	81 60       	ori	r24, 0x01	; 1
    1046:	80 83       	st	Z, r24
    1048:	08 95       	ret

0000104a <__divsf3>:
    104a:	0e 94 39 08 	call	0x1072	; 0x1072 <__divsf3x>
    104e:	0c 94 1a 09 	jmp	0x1234	; 0x1234 <__fp_round>
    1052:	0e 94 13 09 	call	0x1226	; 0x1226 <__fp_pscB>
    1056:	58 f0       	brcs	.+22     	; 0x106e <__divsf3+0x24>
    1058:	0e 94 0c 09 	call	0x1218	; 0x1218 <__fp_pscA>
    105c:	40 f0       	brcs	.+16     	; 0x106e <__divsf3+0x24>
    105e:	29 f4       	brne	.+10     	; 0x106a <__divsf3+0x20>
    1060:	5f 3f       	cpi	r21, 0xFF	; 255
    1062:	29 f0       	breq	.+10     	; 0x106e <__divsf3+0x24>
    1064:	0c 94 03 09 	jmp	0x1206	; 0x1206 <__fp_inf>
    1068:	51 11       	cpse	r21, r1
    106a:	0c 94 4e 09 	jmp	0x129c	; 0x129c <__fp_szero>
    106e:	0c 94 09 09 	jmp	0x1212	; 0x1212 <__fp_nan>

00001072 <__divsf3x>:
    1072:	0e 94 2b 09 	call	0x1256	; 0x1256 <__fp_split3>
    1076:	68 f3       	brcs	.-38     	; 0x1052 <__divsf3+0x8>

00001078 <__divsf3_pse>:
    1078:	99 23       	and	r25, r25
    107a:	b1 f3       	breq	.-20     	; 0x1068 <__divsf3+0x1e>
    107c:	55 23       	and	r21, r21
    107e:	91 f3       	breq	.-28     	; 0x1064 <__divsf3+0x1a>
    1080:	95 1b       	sub	r25, r21
    1082:	55 0b       	sbc	r21, r21
    1084:	bb 27       	eor	r27, r27
    1086:	aa 27       	eor	r26, r26
    1088:	62 17       	cp	r22, r18
    108a:	73 07       	cpc	r23, r19
    108c:	84 07       	cpc	r24, r20
    108e:	38 f0       	brcs	.+14     	; 0x109e <__divsf3_pse+0x26>
    1090:	9f 5f       	subi	r25, 0xFF	; 255
    1092:	5f 4f       	sbci	r21, 0xFF	; 255
    1094:	22 0f       	add	r18, r18
    1096:	33 1f       	adc	r19, r19
    1098:	44 1f       	adc	r20, r20
    109a:	aa 1f       	adc	r26, r26
    109c:	a9 f3       	breq	.-22     	; 0x1088 <__divsf3_pse+0x10>
    109e:	35 d0       	rcall	.+106    	; 0x110a <__divsf3_pse+0x92>
    10a0:	0e 2e       	mov	r0, r30
    10a2:	3a f0       	brmi	.+14     	; 0x10b2 <__divsf3_pse+0x3a>
    10a4:	e0 e8       	ldi	r30, 0x80	; 128
    10a6:	32 d0       	rcall	.+100    	; 0x110c <__divsf3_pse+0x94>
    10a8:	91 50       	subi	r25, 0x01	; 1
    10aa:	50 40       	sbci	r21, 0x00	; 0
    10ac:	e6 95       	lsr	r30
    10ae:	00 1c       	adc	r0, r0
    10b0:	ca f7       	brpl	.-14     	; 0x10a4 <__divsf3_pse+0x2c>
    10b2:	2b d0       	rcall	.+86     	; 0x110a <__divsf3_pse+0x92>
    10b4:	fe 2f       	mov	r31, r30
    10b6:	29 d0       	rcall	.+82     	; 0x110a <__divsf3_pse+0x92>
    10b8:	66 0f       	add	r22, r22
    10ba:	77 1f       	adc	r23, r23
    10bc:	88 1f       	adc	r24, r24
    10be:	bb 1f       	adc	r27, r27
    10c0:	26 17       	cp	r18, r22
    10c2:	37 07       	cpc	r19, r23
    10c4:	48 07       	cpc	r20, r24
    10c6:	ab 07       	cpc	r26, r27
    10c8:	b0 e8       	ldi	r27, 0x80	; 128
    10ca:	09 f0       	breq	.+2      	; 0x10ce <__divsf3_pse+0x56>
    10cc:	bb 0b       	sbc	r27, r27
    10ce:	80 2d       	mov	r24, r0
    10d0:	bf 01       	movw	r22, r30
    10d2:	ff 27       	eor	r31, r31
    10d4:	93 58       	subi	r25, 0x83	; 131
    10d6:	5f 4f       	sbci	r21, 0xFF	; 255
    10d8:	3a f0       	brmi	.+14     	; 0x10e8 <__divsf3_pse+0x70>
    10da:	9e 3f       	cpi	r25, 0xFE	; 254
    10dc:	51 05       	cpc	r21, r1
    10de:	78 f0       	brcs	.+30     	; 0x10fe <__divsf3_pse+0x86>
    10e0:	0c 94 03 09 	jmp	0x1206	; 0x1206 <__fp_inf>
    10e4:	0c 94 4e 09 	jmp	0x129c	; 0x129c <__fp_szero>
    10e8:	5f 3f       	cpi	r21, 0xFF	; 255
    10ea:	e4 f3       	brlt	.-8      	; 0x10e4 <__divsf3_pse+0x6c>
    10ec:	98 3e       	cpi	r25, 0xE8	; 232
    10ee:	d4 f3       	brlt	.-12     	; 0x10e4 <__divsf3_pse+0x6c>
    10f0:	86 95       	lsr	r24
    10f2:	77 95       	ror	r23
    10f4:	67 95       	ror	r22
    10f6:	b7 95       	ror	r27
    10f8:	f7 95       	ror	r31
    10fa:	9f 5f       	subi	r25, 0xFF	; 255
    10fc:	c9 f7       	brne	.-14     	; 0x10f0 <__divsf3_pse+0x78>
    10fe:	88 0f       	add	r24, r24
    1100:	91 1d       	adc	r25, r1
    1102:	96 95       	lsr	r25
    1104:	87 95       	ror	r24
    1106:	97 f9       	bld	r25, 7
    1108:	08 95       	ret
    110a:	e1 e0       	ldi	r30, 0x01	; 1
    110c:	66 0f       	add	r22, r22
    110e:	77 1f       	adc	r23, r23
    1110:	88 1f       	adc	r24, r24
    1112:	bb 1f       	adc	r27, r27
    1114:	62 17       	cp	r22, r18
    1116:	73 07       	cpc	r23, r19
    1118:	84 07       	cpc	r24, r20
    111a:	ba 07       	cpc	r27, r26
    111c:	20 f0       	brcs	.+8      	; 0x1126 <__divsf3_pse+0xae>
    111e:	62 1b       	sub	r22, r18
    1120:	73 0b       	sbc	r23, r19
    1122:	84 0b       	sbc	r24, r20
    1124:	ba 0b       	sbc	r27, r26
    1126:	ee 1f       	adc	r30, r30
    1128:	88 f7       	brcc	.-30     	; 0x110c <__divsf3_pse+0x94>
    112a:	e0 95       	com	r30
    112c:	08 95       	ret

0000112e <__fixunssfsi>:
    112e:	0e 94 33 09 	call	0x1266	; 0x1266 <__fp_splitA>
    1132:	88 f0       	brcs	.+34     	; 0x1156 <__fixunssfsi+0x28>
    1134:	9f 57       	subi	r25, 0x7F	; 127
    1136:	98 f0       	brcs	.+38     	; 0x115e <__fixunssfsi+0x30>
    1138:	b9 2f       	mov	r27, r25
    113a:	99 27       	eor	r25, r25
    113c:	b7 51       	subi	r27, 0x17	; 23
    113e:	b0 f0       	brcs	.+44     	; 0x116c <__fixunssfsi+0x3e>
    1140:	e1 f0       	breq	.+56     	; 0x117a <__fixunssfsi+0x4c>
    1142:	66 0f       	add	r22, r22
    1144:	77 1f       	adc	r23, r23
    1146:	88 1f       	adc	r24, r24
    1148:	99 1f       	adc	r25, r25
    114a:	1a f0       	brmi	.+6      	; 0x1152 <__fixunssfsi+0x24>
    114c:	ba 95       	dec	r27
    114e:	c9 f7       	brne	.-14     	; 0x1142 <__fixunssfsi+0x14>
    1150:	14 c0       	rjmp	.+40     	; 0x117a <__fixunssfsi+0x4c>
    1152:	b1 30       	cpi	r27, 0x01	; 1
    1154:	91 f0       	breq	.+36     	; 0x117a <__fixunssfsi+0x4c>
    1156:	0e 94 4d 09 	call	0x129a	; 0x129a <__fp_zero>
    115a:	b1 e0       	ldi	r27, 0x01	; 1
    115c:	08 95       	ret
    115e:	0c 94 4d 09 	jmp	0x129a	; 0x129a <__fp_zero>
    1162:	67 2f       	mov	r22, r23
    1164:	78 2f       	mov	r23, r24
    1166:	88 27       	eor	r24, r24
    1168:	b8 5f       	subi	r27, 0xF8	; 248
    116a:	39 f0       	breq	.+14     	; 0x117a <__fixunssfsi+0x4c>
    116c:	b9 3f       	cpi	r27, 0xF9	; 249
    116e:	cc f3       	brlt	.-14     	; 0x1162 <__fixunssfsi+0x34>
    1170:	86 95       	lsr	r24
    1172:	77 95       	ror	r23
    1174:	67 95       	ror	r22
    1176:	b3 95       	inc	r27
    1178:	d9 f7       	brne	.-10     	; 0x1170 <__fixunssfsi+0x42>
    117a:	3e f4       	brtc	.+14     	; 0x118a <__fixunssfsi+0x5c>
    117c:	90 95       	com	r25
    117e:	80 95       	com	r24
    1180:	70 95       	com	r23
    1182:	61 95       	neg	r22
    1184:	7f 4f       	sbci	r23, 0xFF	; 255
    1186:	8f 4f       	sbci	r24, 0xFF	; 255
    1188:	9f 4f       	sbci	r25, 0xFF	; 255
    118a:	08 95       	ret

0000118c <__floatunsisf>:
    118c:	e8 94       	clt
    118e:	09 c0       	rjmp	.+18     	; 0x11a2 <__floatsisf+0x12>

00001190 <__floatsisf>:
    1190:	97 fb       	bst	r25, 7
    1192:	3e f4       	brtc	.+14     	; 0x11a2 <__floatsisf+0x12>
    1194:	90 95       	com	r25
    1196:	80 95       	com	r24
    1198:	70 95       	com	r23
    119a:	61 95       	neg	r22
    119c:	7f 4f       	sbci	r23, 0xFF	; 255
    119e:	8f 4f       	sbci	r24, 0xFF	; 255
    11a0:	9f 4f       	sbci	r25, 0xFF	; 255
    11a2:	99 23       	and	r25, r25
    11a4:	a9 f0       	breq	.+42     	; 0x11d0 <__floatsisf+0x40>
    11a6:	f9 2f       	mov	r31, r25
    11a8:	96 e9       	ldi	r25, 0x96	; 150
    11aa:	bb 27       	eor	r27, r27
    11ac:	93 95       	inc	r25
    11ae:	f6 95       	lsr	r31
    11b0:	87 95       	ror	r24
    11b2:	77 95       	ror	r23
    11b4:	67 95       	ror	r22
    11b6:	b7 95       	ror	r27
    11b8:	f1 11       	cpse	r31, r1
    11ba:	f8 cf       	rjmp	.-16     	; 0x11ac <__floatsisf+0x1c>
    11bc:	fa f4       	brpl	.+62     	; 0x11fc <__floatsisf+0x6c>
    11be:	bb 0f       	add	r27, r27
    11c0:	11 f4       	brne	.+4      	; 0x11c6 <__floatsisf+0x36>
    11c2:	60 ff       	sbrs	r22, 0
    11c4:	1b c0       	rjmp	.+54     	; 0x11fc <__floatsisf+0x6c>
    11c6:	6f 5f       	subi	r22, 0xFF	; 255
    11c8:	7f 4f       	sbci	r23, 0xFF	; 255
    11ca:	8f 4f       	sbci	r24, 0xFF	; 255
    11cc:	9f 4f       	sbci	r25, 0xFF	; 255
    11ce:	16 c0       	rjmp	.+44     	; 0x11fc <__floatsisf+0x6c>
    11d0:	88 23       	and	r24, r24
    11d2:	11 f0       	breq	.+4      	; 0x11d8 <__floatsisf+0x48>
    11d4:	96 e9       	ldi	r25, 0x96	; 150
    11d6:	11 c0       	rjmp	.+34     	; 0x11fa <__floatsisf+0x6a>
    11d8:	77 23       	and	r23, r23
    11da:	21 f0       	breq	.+8      	; 0x11e4 <__floatsisf+0x54>
    11dc:	9e e8       	ldi	r25, 0x8E	; 142
    11de:	87 2f       	mov	r24, r23
    11e0:	76 2f       	mov	r23, r22
    11e2:	05 c0       	rjmp	.+10     	; 0x11ee <__floatsisf+0x5e>
    11e4:	66 23       	and	r22, r22
    11e6:	71 f0       	breq	.+28     	; 0x1204 <__floatsisf+0x74>
    11e8:	96 e8       	ldi	r25, 0x86	; 134
    11ea:	86 2f       	mov	r24, r22
    11ec:	70 e0       	ldi	r23, 0x00	; 0
    11ee:	60 e0       	ldi	r22, 0x00	; 0
    11f0:	2a f0       	brmi	.+10     	; 0x11fc <__floatsisf+0x6c>
    11f2:	9a 95       	dec	r25
    11f4:	66 0f       	add	r22, r22
    11f6:	77 1f       	adc	r23, r23
    11f8:	88 1f       	adc	r24, r24
    11fa:	da f7       	brpl	.-10     	; 0x11f2 <__floatsisf+0x62>
    11fc:	88 0f       	add	r24, r24
    11fe:	96 95       	lsr	r25
    1200:	87 95       	ror	r24
    1202:	97 f9       	bld	r25, 7
    1204:	08 95       	ret

00001206 <__fp_inf>:
    1206:	97 f9       	bld	r25, 7
    1208:	9f 67       	ori	r25, 0x7F	; 127
    120a:	80 e8       	ldi	r24, 0x80	; 128
    120c:	70 e0       	ldi	r23, 0x00	; 0
    120e:	60 e0       	ldi	r22, 0x00	; 0
    1210:	08 95       	ret

00001212 <__fp_nan>:
    1212:	9f ef       	ldi	r25, 0xFF	; 255
    1214:	80 ec       	ldi	r24, 0xC0	; 192
    1216:	08 95       	ret

00001218 <__fp_pscA>:
    1218:	00 24       	eor	r0, r0
    121a:	0a 94       	dec	r0
    121c:	16 16       	cp	r1, r22
    121e:	17 06       	cpc	r1, r23
    1220:	18 06       	cpc	r1, r24
    1222:	09 06       	cpc	r0, r25
    1224:	08 95       	ret

00001226 <__fp_pscB>:
    1226:	00 24       	eor	r0, r0
    1228:	0a 94       	dec	r0
    122a:	12 16       	cp	r1, r18
    122c:	13 06       	cpc	r1, r19
    122e:	14 06       	cpc	r1, r20
    1230:	05 06       	cpc	r0, r21
    1232:	08 95       	ret

00001234 <__fp_round>:
    1234:	09 2e       	mov	r0, r25
    1236:	03 94       	inc	r0
    1238:	00 0c       	add	r0, r0
    123a:	11 f4       	brne	.+4      	; 0x1240 <__fp_round+0xc>
    123c:	88 23       	and	r24, r24
    123e:	52 f0       	brmi	.+20     	; 0x1254 <__fp_round+0x20>
    1240:	bb 0f       	add	r27, r27
    1242:	40 f4       	brcc	.+16     	; 0x1254 <__fp_round+0x20>
    1244:	bf 2b       	or	r27, r31
    1246:	11 f4       	brne	.+4      	; 0x124c <__fp_round+0x18>
    1248:	60 ff       	sbrs	r22, 0
    124a:	04 c0       	rjmp	.+8      	; 0x1254 <__fp_round+0x20>
    124c:	6f 5f       	subi	r22, 0xFF	; 255
    124e:	7f 4f       	sbci	r23, 0xFF	; 255
    1250:	8f 4f       	sbci	r24, 0xFF	; 255
    1252:	9f 4f       	sbci	r25, 0xFF	; 255
    1254:	08 95       	ret

00001256 <__fp_split3>:
    1256:	57 fd       	sbrc	r21, 7
    1258:	90 58       	subi	r25, 0x80	; 128
    125a:	44 0f       	add	r20, r20
    125c:	55 1f       	adc	r21, r21
    125e:	59 f0       	breq	.+22     	; 0x1276 <__fp_splitA+0x10>
    1260:	5f 3f       	cpi	r21, 0xFF	; 255
    1262:	71 f0       	breq	.+28     	; 0x1280 <__fp_splitA+0x1a>
    1264:	47 95       	ror	r20

00001266 <__fp_splitA>:
    1266:	88 0f       	add	r24, r24
    1268:	97 fb       	bst	r25, 7
    126a:	99 1f       	adc	r25, r25
    126c:	61 f0       	breq	.+24     	; 0x1286 <__fp_splitA+0x20>
    126e:	9f 3f       	cpi	r25, 0xFF	; 255
    1270:	79 f0       	breq	.+30     	; 0x1290 <__fp_splitA+0x2a>
    1272:	87 95       	ror	r24
    1274:	08 95       	ret
    1276:	12 16       	cp	r1, r18
    1278:	13 06       	cpc	r1, r19
    127a:	14 06       	cpc	r1, r20
    127c:	55 1f       	adc	r21, r21
    127e:	f2 cf       	rjmp	.-28     	; 0x1264 <__fp_split3+0xe>
    1280:	46 95       	lsr	r20
    1282:	f1 df       	rcall	.-30     	; 0x1266 <__fp_splitA>
    1284:	08 c0       	rjmp	.+16     	; 0x1296 <__fp_splitA+0x30>
    1286:	16 16       	cp	r1, r22
    1288:	17 06       	cpc	r1, r23
    128a:	18 06       	cpc	r1, r24
    128c:	99 1f       	adc	r25, r25
    128e:	f1 cf       	rjmp	.-30     	; 0x1272 <__fp_splitA+0xc>
    1290:	86 95       	lsr	r24
    1292:	71 05       	cpc	r23, r1
    1294:	61 05       	cpc	r22, r1
    1296:	08 94       	sec
    1298:	08 95       	ret

0000129a <__fp_zero>:
    129a:	e8 94       	clt

0000129c <__fp_szero>:
    129c:	bb 27       	eor	r27, r27
    129e:	66 27       	eor	r22, r22
    12a0:	77 27       	eor	r23, r23
    12a2:	cb 01       	movw	r24, r22
    12a4:	97 f9       	bld	r25, 7
    12a6:	08 95       	ret

000012a8 <pow>:
    12a8:	fa 01       	movw	r30, r20
    12aa:	ee 0f       	add	r30, r30
    12ac:	ff 1f       	adc	r31, r31
    12ae:	30 96       	adiw	r30, 0x00	; 0
    12b0:	21 05       	cpc	r18, r1
    12b2:	31 05       	cpc	r19, r1
    12b4:	a1 f1       	breq	.+104    	; 0x131e <pow+0x76>
    12b6:	61 15       	cp	r22, r1
    12b8:	71 05       	cpc	r23, r1
    12ba:	61 f4       	brne	.+24     	; 0x12d4 <pow+0x2c>
    12bc:	80 38       	cpi	r24, 0x80	; 128
    12be:	bf e3       	ldi	r27, 0x3F	; 63
    12c0:	9b 07       	cpc	r25, r27
    12c2:	49 f1       	breq	.+82     	; 0x1316 <pow+0x6e>
    12c4:	68 94       	set
    12c6:	90 38       	cpi	r25, 0x80	; 128
    12c8:	81 05       	cpc	r24, r1
    12ca:	61 f0       	breq	.+24     	; 0x12e4 <pow+0x3c>
    12cc:	80 38       	cpi	r24, 0x80	; 128
    12ce:	bf ef       	ldi	r27, 0xFF	; 255
    12d0:	9b 07       	cpc	r25, r27
    12d2:	41 f0       	breq	.+16     	; 0x12e4 <pow+0x3c>
    12d4:	99 23       	and	r25, r25
    12d6:	4a f5       	brpl	.+82     	; 0x132a <pow+0x82>
    12d8:	ff 3f       	cpi	r31, 0xFF	; 255
    12da:	e1 05       	cpc	r30, r1
    12dc:	31 05       	cpc	r19, r1
    12de:	21 05       	cpc	r18, r1
    12e0:	19 f1       	breq	.+70     	; 0x1328 <pow+0x80>
    12e2:	e8 94       	clt
    12e4:	08 94       	sec
    12e6:	e7 95       	ror	r30
    12e8:	d9 01       	movw	r26, r18
    12ea:	aa 23       	and	r26, r26
    12ec:	29 f4       	brne	.+10     	; 0x12f8 <pow+0x50>
    12ee:	ab 2f       	mov	r26, r27
    12f0:	be 2f       	mov	r27, r30
    12f2:	f8 5f       	subi	r31, 0xF8	; 248
    12f4:	d0 f3       	brcs	.-12     	; 0x12ea <pow+0x42>
    12f6:	10 c0       	rjmp	.+32     	; 0x1318 <pow+0x70>
    12f8:	ff 5f       	subi	r31, 0xFF	; 255
    12fa:	70 f4       	brcc	.+28     	; 0x1318 <pow+0x70>
    12fc:	a6 95       	lsr	r26
    12fe:	e0 f7       	brcc	.-8      	; 0x12f8 <pow+0x50>
    1300:	f7 39       	cpi	r31, 0x97	; 151
    1302:	50 f0       	brcs	.+20     	; 0x1318 <pow+0x70>
    1304:	19 f0       	breq	.+6      	; 0x130c <pow+0x64>
    1306:	ff 3a       	cpi	r31, 0xAF	; 175
    1308:	38 f4       	brcc	.+14     	; 0x1318 <pow+0x70>
    130a:	9f 77       	andi	r25, 0x7F	; 127
    130c:	9f 93       	push	r25
    130e:	0d d0       	rcall	.+26     	; 0x132a <pow+0x82>
    1310:	0f 90       	pop	r0
    1312:	07 fc       	sbrc	r0, 7
    1314:	90 58       	subi	r25, 0x80	; 128
    1316:	08 95       	ret
    1318:	46 f0       	brts	.+16     	; 0x132a <pow+0x82>
    131a:	0c 94 09 09 	jmp	0x1212	; 0x1212 <__fp_nan>
    131e:	60 e0       	ldi	r22, 0x00	; 0
    1320:	70 e0       	ldi	r23, 0x00	; 0
    1322:	80 e8       	ldi	r24, 0x80	; 128
    1324:	9f e3       	ldi	r25, 0x3F	; 63
    1326:	08 95       	ret
    1328:	4f e7       	ldi	r20, 0x7F	; 127
    132a:	9f 77       	andi	r25, 0x7F	; 127
    132c:	5f 93       	push	r21
    132e:	4f 93       	push	r20
    1330:	3f 93       	push	r19
    1332:	2f 93       	push	r18
    1334:	0e 94 4f 0a 	call	0x149e	; 0x149e <log>
    1338:	2f 91       	pop	r18
    133a:	3f 91       	pop	r19
    133c:	4f 91       	pop	r20
    133e:	5f 91       	pop	r21
    1340:	0e 94 cb 0a 	call	0x1596	; 0x1596 <__mulsf3>
    1344:	0c 94 ac 09 	jmp	0x1358	; 0x1358 <exp>
    1348:	29 f4       	brne	.+10     	; 0x1354 <pow+0xac>
    134a:	16 f0       	brts	.+4      	; 0x1350 <pow+0xa8>
    134c:	0c 94 03 09 	jmp	0x1206	; 0x1206 <__fp_inf>
    1350:	0c 94 4d 09 	jmp	0x129a	; 0x129a <__fp_zero>
    1354:	0c 94 09 09 	jmp	0x1212	; 0x1212 <__fp_nan>

00001358 <exp>:
    1358:	0e 94 33 09 	call	0x1266	; 0x1266 <__fp_splitA>
    135c:	a8 f3       	brcs	.-22     	; 0x1348 <pow+0xa0>
    135e:	96 38       	cpi	r25, 0x86	; 134
    1360:	a0 f7       	brcc	.-24     	; 0x134a <pow+0xa2>
    1362:	07 f8       	bld	r0, 7
    1364:	0f 92       	push	r0
    1366:	e8 94       	clt
    1368:	2b e3       	ldi	r18, 0x3B	; 59
    136a:	3a ea       	ldi	r19, 0xAA	; 170
    136c:	48 eb       	ldi	r20, 0xB8	; 184
    136e:	5f e7       	ldi	r21, 0x7F	; 127
    1370:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <__mulsf3_pse>
    1374:	0f 92       	push	r0
    1376:	0f 92       	push	r0
    1378:	0f 92       	push	r0
    137a:	4d b7       	in	r20, 0x3d	; 61
    137c:	5e b7       	in	r21, 0x3e	; 62
    137e:	0f 92       	push	r0
    1380:	0e 94 97 0a 	call	0x152e	; 0x152e <modf>
    1384:	e8 e6       	ldi	r30, 0x68	; 104
    1386:	f0 e0       	ldi	r31, 0x00	; 0
    1388:	0e 94 de 09 	call	0x13bc	; 0x13bc <__fp_powser>
    138c:	4f 91       	pop	r20
    138e:	5f 91       	pop	r21
    1390:	ef 91       	pop	r30
    1392:	ff 91       	pop	r31
    1394:	e5 95       	asr	r30
    1396:	ee 1f       	adc	r30, r30
    1398:	ff 1f       	adc	r31, r31
    139a:	49 f0       	breq	.+18     	; 0x13ae <exp+0x56>
    139c:	fe 57       	subi	r31, 0x7E	; 126
    139e:	e0 68       	ori	r30, 0x80	; 128
    13a0:	44 27       	eor	r20, r20
    13a2:	ee 0f       	add	r30, r30
    13a4:	44 1f       	adc	r20, r20
    13a6:	fa 95       	dec	r31
    13a8:	e1 f7       	brne	.-8      	; 0x13a2 <exp+0x4a>
    13aa:	41 95       	neg	r20
    13ac:	55 0b       	sbc	r21, r21
    13ae:	0e 94 11 0a 	call	0x1422	; 0x1422 <ldexp>
    13b2:	0f 90       	pop	r0
    13b4:	07 fe       	sbrs	r0, 7
    13b6:	0c 94 05 0a 	jmp	0x140a	; 0x140a <inverse>
    13ba:	08 95       	ret

000013bc <__fp_powser>:
    13bc:	df 93       	push	r29
    13be:	cf 93       	push	r28
    13c0:	1f 93       	push	r17
    13c2:	0f 93       	push	r16
    13c4:	ff 92       	push	r15
    13c6:	ef 92       	push	r14
    13c8:	df 92       	push	r13
    13ca:	7b 01       	movw	r14, r22
    13cc:	8c 01       	movw	r16, r24
    13ce:	68 94       	set
    13d0:	06 c0       	rjmp	.+12     	; 0x13de <__fp_powser+0x22>
    13d2:	da 2e       	mov	r13, r26
    13d4:	ef 01       	movw	r28, r30
    13d6:	0e 94 de 0a 	call	0x15bc	; 0x15bc <__mulsf3x>
    13da:	fe 01       	movw	r30, r28
    13dc:	e8 94       	clt
    13de:	a5 91       	lpm	r26, Z+
    13e0:	25 91       	lpm	r18, Z+
    13e2:	35 91       	lpm	r19, Z+
    13e4:	45 91       	lpm	r20, Z+
    13e6:	55 91       	lpm	r21, Z+
    13e8:	a6 f3       	brts	.-24     	; 0x13d2 <__fp_powser+0x16>
    13ea:	ef 01       	movw	r28, r30
    13ec:	0e 94 50 0b 	call	0x16a0	; 0x16a0 <__addsf3x>
    13f0:	fe 01       	movw	r30, r28
    13f2:	97 01       	movw	r18, r14
    13f4:	a8 01       	movw	r20, r16
    13f6:	da 94       	dec	r13
    13f8:	69 f7       	brne	.-38     	; 0x13d4 <__fp_powser+0x18>
    13fa:	df 90       	pop	r13
    13fc:	ef 90       	pop	r14
    13fe:	ff 90       	pop	r15
    1400:	0f 91       	pop	r16
    1402:	1f 91       	pop	r17
    1404:	cf 91       	pop	r28
    1406:	df 91       	pop	r29
    1408:	08 95       	ret

0000140a <inverse>:
    140a:	9b 01       	movw	r18, r22
    140c:	ac 01       	movw	r20, r24
    140e:	60 e0       	ldi	r22, 0x00	; 0
    1410:	70 e0       	ldi	r23, 0x00	; 0
    1412:	80 e8       	ldi	r24, 0x80	; 128
    1414:	9f e3       	ldi	r25, 0x3F	; 63
    1416:	0c 94 25 08 	jmp	0x104a	; 0x104a <__divsf3>
    141a:	0c 94 03 09 	jmp	0x1206	; 0x1206 <__fp_inf>
    141e:	0c 94 a5 0b 	jmp	0x174a	; 0x174a <__fp_mpack>

00001422 <ldexp>:
    1422:	0e 94 33 09 	call	0x1266	; 0x1266 <__fp_splitA>
    1426:	d8 f3       	brcs	.-10     	; 0x141e <inverse+0x14>
    1428:	99 23       	and	r25, r25
    142a:	c9 f3       	breq	.-14     	; 0x141e <inverse+0x14>
    142c:	94 0f       	add	r25, r20
    142e:	51 1d       	adc	r21, r1
    1430:	a3 f3       	brvs	.-24     	; 0x141a <inverse+0x10>
    1432:	91 50       	subi	r25, 0x01	; 1
    1434:	50 40       	sbci	r21, 0x00	; 0
    1436:	94 f0       	brlt	.+36     	; 0x145c <ldexp+0x3a>
    1438:	59 f0       	breq	.+22     	; 0x1450 <ldexp+0x2e>
    143a:	88 23       	and	r24, r24
    143c:	32 f0       	brmi	.+12     	; 0x144a <ldexp+0x28>
    143e:	66 0f       	add	r22, r22
    1440:	77 1f       	adc	r23, r23
    1442:	88 1f       	adc	r24, r24
    1444:	91 50       	subi	r25, 0x01	; 1
    1446:	50 40       	sbci	r21, 0x00	; 0
    1448:	c1 f7       	brne	.-16     	; 0x143a <ldexp+0x18>
    144a:	9e 3f       	cpi	r25, 0xFE	; 254
    144c:	51 05       	cpc	r21, r1
    144e:	2c f7       	brge	.-54     	; 0x141a <inverse+0x10>
    1450:	88 0f       	add	r24, r24
    1452:	91 1d       	adc	r25, r1
    1454:	96 95       	lsr	r25
    1456:	87 95       	ror	r24
    1458:	97 f9       	bld	r25, 7
    145a:	08 95       	ret
    145c:	5f 3f       	cpi	r21, 0xFF	; 255
    145e:	ac f0       	brlt	.+42     	; 0x148a <ldexp+0x68>
    1460:	98 3e       	cpi	r25, 0xE8	; 232
    1462:	9c f0       	brlt	.+38     	; 0x148a <ldexp+0x68>
    1464:	bb 27       	eor	r27, r27
    1466:	86 95       	lsr	r24
    1468:	77 95       	ror	r23
    146a:	67 95       	ror	r22
    146c:	b7 95       	ror	r27
    146e:	08 f4       	brcc	.+2      	; 0x1472 <ldexp+0x50>
    1470:	b1 60       	ori	r27, 0x01	; 1
    1472:	93 95       	inc	r25
    1474:	c1 f7       	brne	.-16     	; 0x1466 <ldexp+0x44>
    1476:	bb 0f       	add	r27, r27
    1478:	58 f7       	brcc	.-42     	; 0x1450 <ldexp+0x2e>
    147a:	11 f4       	brne	.+4      	; 0x1480 <ldexp+0x5e>
    147c:	60 ff       	sbrs	r22, 0
    147e:	e8 cf       	rjmp	.-48     	; 0x1450 <ldexp+0x2e>
    1480:	6f 5f       	subi	r22, 0xFF	; 255
    1482:	7f 4f       	sbci	r23, 0xFF	; 255
    1484:	8f 4f       	sbci	r24, 0xFF	; 255
    1486:	9f 4f       	sbci	r25, 0xFF	; 255
    1488:	e3 cf       	rjmp	.-58     	; 0x1450 <ldexp+0x2e>
    148a:	0c 94 4e 09 	jmp	0x129c	; 0x129c <__fp_szero>
    148e:	16 f0       	brts	.+4      	; 0x1494 <ldexp+0x72>
    1490:	0c 94 a5 0b 	jmp	0x174a	; 0x174a <__fp_mpack>
    1494:	0c 94 09 09 	jmp	0x1212	; 0x1212 <__fp_nan>
    1498:	68 94       	set
    149a:	0c 94 03 09 	jmp	0x1206	; 0x1206 <__fp_inf>

0000149e <log>:
    149e:	0e 94 33 09 	call	0x1266	; 0x1266 <__fp_splitA>
    14a2:	a8 f3       	brcs	.-22     	; 0x148e <ldexp+0x6c>
    14a4:	99 23       	and	r25, r25
    14a6:	c1 f3       	breq	.-16     	; 0x1498 <ldexp+0x76>
    14a8:	ae f3       	brts	.-22     	; 0x1494 <ldexp+0x72>
    14aa:	df 93       	push	r29
    14ac:	cf 93       	push	r28
    14ae:	1f 93       	push	r17
    14b0:	0f 93       	push	r16
    14b2:	ff 92       	push	r15
    14b4:	c9 2f       	mov	r28, r25
    14b6:	dd 27       	eor	r29, r29
    14b8:	88 23       	and	r24, r24
    14ba:	2a f0       	brmi	.+10     	; 0x14c6 <log+0x28>
    14bc:	21 97       	sbiw	r28, 0x01	; 1
    14be:	66 0f       	add	r22, r22
    14c0:	77 1f       	adc	r23, r23
    14c2:	88 1f       	adc	r24, r24
    14c4:	da f7       	brpl	.-10     	; 0x14bc <log+0x1e>
    14c6:	20 e0       	ldi	r18, 0x00	; 0
    14c8:	30 e0       	ldi	r19, 0x00	; 0
    14ca:	40 e8       	ldi	r20, 0x80	; 128
    14cc:	5f eb       	ldi	r21, 0xBF	; 191
    14ce:	9f e3       	ldi	r25, 0x3F	; 63
    14d0:	88 39       	cpi	r24, 0x98	; 152
    14d2:	20 f0       	brcs	.+8      	; 0x14dc <log+0x3e>
    14d4:	80 3e       	cpi	r24, 0xE0	; 224
    14d6:	38 f0       	brcs	.+14     	; 0x14e6 <log+0x48>
    14d8:	21 96       	adiw	r28, 0x01	; 1
    14da:	8f 77       	andi	r24, 0x7F	; 127
    14dc:	0e 94 39 0b 	call	0x1672	; 0x1672 <__addsf3>
    14e0:	e0 e9       	ldi	r30, 0x90	; 144
    14e2:	f0 e0       	ldi	r31, 0x00	; 0
    14e4:	04 c0       	rjmp	.+8      	; 0x14ee <log+0x50>
    14e6:	0e 94 39 0b 	call	0x1672	; 0x1672 <__addsf3>
    14ea:	ed eb       	ldi	r30, 0xBD	; 189
    14ec:	f0 e0       	ldi	r31, 0x00	; 0
    14ee:	0e 94 de 09 	call	0x13bc	; 0x13bc <__fp_powser>
    14f2:	8b 01       	movw	r16, r22
    14f4:	be 01       	movw	r22, r28
    14f6:	ec 01       	movw	r28, r24
    14f8:	fb 2e       	mov	r15, r27
    14fa:	6f 57       	subi	r22, 0x7F	; 127
    14fc:	71 09       	sbc	r23, r1
    14fe:	75 95       	asr	r23
    1500:	77 1f       	adc	r23, r23
    1502:	88 0b       	sbc	r24, r24
    1504:	99 0b       	sbc	r25, r25
    1506:	0e 94 c8 08 	call	0x1190	; 0x1190 <__floatsisf>
    150a:	28 e1       	ldi	r18, 0x18	; 24
    150c:	32 e7       	ldi	r19, 0x72	; 114
    150e:	41 e3       	ldi	r20, 0x31	; 49
    1510:	5f e3       	ldi	r21, 0x3F	; 63
    1512:	0e 94 de 0a 	call	0x15bc	; 0x15bc <__mulsf3x>
    1516:	af 2d       	mov	r26, r15
    1518:	98 01       	movw	r18, r16
    151a:	ae 01       	movw	r20, r28
    151c:	ff 90       	pop	r15
    151e:	0f 91       	pop	r16
    1520:	1f 91       	pop	r17
    1522:	cf 91       	pop	r28
    1524:	df 91       	pop	r29
    1526:	0e 94 50 0b 	call	0x16a0	; 0x16a0 <__addsf3x>
    152a:	0c 94 1a 09 	jmp	0x1234	; 0x1234 <__fp_round>

0000152e <modf>:
    152e:	fa 01       	movw	r30, r20
    1530:	dc 01       	movw	r26, r24
    1532:	aa 0f       	add	r26, r26
    1534:	bb 1f       	adc	r27, r27
    1536:	9b 01       	movw	r18, r22
    1538:	ac 01       	movw	r20, r24
    153a:	bf 57       	subi	r27, 0x7F	; 127
    153c:	28 f4       	brcc	.+10     	; 0x1548 <modf+0x1a>
    153e:	22 27       	eor	r18, r18
    1540:	33 27       	eor	r19, r19
    1542:	44 27       	eor	r20, r20
    1544:	50 78       	andi	r21, 0x80	; 128
    1546:	20 c0       	rjmp	.+64     	; 0x1588 <modf+0x5a>
    1548:	b7 51       	subi	r27, 0x17	; 23
    154a:	90 f4       	brcc	.+36     	; 0x1570 <modf+0x42>
    154c:	ab 2f       	mov	r26, r27
    154e:	00 24       	eor	r0, r0
    1550:	46 95       	lsr	r20
    1552:	37 95       	ror	r19
    1554:	27 95       	ror	r18
    1556:	01 1c       	adc	r0, r1
    1558:	a3 95       	inc	r26
    155a:	d2 f3       	brmi	.-12     	; 0x1550 <modf+0x22>
    155c:	00 20       	and	r0, r0
    155e:	71 f0       	breq	.+28     	; 0x157c <modf+0x4e>
    1560:	22 0f       	add	r18, r18
    1562:	33 1f       	adc	r19, r19
    1564:	44 1f       	adc	r20, r20
    1566:	b3 95       	inc	r27
    1568:	da f3       	brmi	.-10     	; 0x1560 <modf+0x32>
    156a:	0e d0       	rcall	.+28     	; 0x1588 <modf+0x5a>
    156c:	0c 94 38 0b 	jmp	0x1670	; 0x1670 <__subsf3>
    1570:	61 30       	cpi	r22, 0x01	; 1
    1572:	71 05       	cpc	r23, r1
    1574:	a0 e8       	ldi	r26, 0x80	; 128
    1576:	8a 07       	cpc	r24, r26
    1578:	b9 46       	sbci	r27, 0x69	; 105
    157a:	30 f4       	brcc	.+12     	; 0x1588 <modf+0x5a>
    157c:	9b 01       	movw	r18, r22
    157e:	ac 01       	movw	r20, r24
    1580:	66 27       	eor	r22, r22
    1582:	77 27       	eor	r23, r23
    1584:	88 27       	eor	r24, r24
    1586:	90 78       	andi	r25, 0x80	; 128
    1588:	30 96       	adiw	r30, 0x00	; 0
    158a:	21 f0       	breq	.+8      	; 0x1594 <modf+0x66>
    158c:	20 83       	st	Z, r18
    158e:	31 83       	std	Z+1, r19	; 0x01
    1590:	42 83       	std	Z+2, r20	; 0x02
    1592:	53 83       	std	Z+3, r21	; 0x03
    1594:	08 95       	ret

00001596 <__mulsf3>:
    1596:	0e 94 de 0a 	call	0x15bc	; 0x15bc <__mulsf3x>
    159a:	0c 94 1a 09 	jmp	0x1234	; 0x1234 <__fp_round>
    159e:	0e 94 0c 09 	call	0x1218	; 0x1218 <__fp_pscA>
    15a2:	38 f0       	brcs	.+14     	; 0x15b2 <__mulsf3+0x1c>
    15a4:	0e 94 13 09 	call	0x1226	; 0x1226 <__fp_pscB>
    15a8:	20 f0       	brcs	.+8      	; 0x15b2 <__mulsf3+0x1c>
    15aa:	95 23       	and	r25, r21
    15ac:	11 f0       	breq	.+4      	; 0x15b2 <__mulsf3+0x1c>
    15ae:	0c 94 03 09 	jmp	0x1206	; 0x1206 <__fp_inf>
    15b2:	0c 94 09 09 	jmp	0x1212	; 0x1212 <__fp_nan>
    15b6:	11 24       	eor	r1, r1
    15b8:	0c 94 4e 09 	jmp	0x129c	; 0x129c <__fp_szero>

000015bc <__mulsf3x>:
    15bc:	0e 94 2b 09 	call	0x1256	; 0x1256 <__fp_split3>
    15c0:	70 f3       	brcs	.-36     	; 0x159e <__mulsf3+0x8>

000015c2 <__mulsf3_pse>:
    15c2:	95 9f       	mul	r25, r21
    15c4:	c1 f3       	breq	.-16     	; 0x15b6 <__mulsf3+0x20>
    15c6:	95 0f       	add	r25, r21
    15c8:	50 e0       	ldi	r21, 0x00	; 0
    15ca:	55 1f       	adc	r21, r21
    15cc:	62 9f       	mul	r22, r18
    15ce:	f0 01       	movw	r30, r0
    15d0:	72 9f       	mul	r23, r18
    15d2:	bb 27       	eor	r27, r27
    15d4:	f0 0d       	add	r31, r0
    15d6:	b1 1d       	adc	r27, r1
    15d8:	63 9f       	mul	r22, r19
    15da:	aa 27       	eor	r26, r26
    15dc:	f0 0d       	add	r31, r0
    15de:	b1 1d       	adc	r27, r1
    15e0:	aa 1f       	adc	r26, r26
    15e2:	64 9f       	mul	r22, r20
    15e4:	66 27       	eor	r22, r22
    15e6:	b0 0d       	add	r27, r0
    15e8:	a1 1d       	adc	r26, r1
    15ea:	66 1f       	adc	r22, r22
    15ec:	82 9f       	mul	r24, r18
    15ee:	22 27       	eor	r18, r18
    15f0:	b0 0d       	add	r27, r0
    15f2:	a1 1d       	adc	r26, r1
    15f4:	62 1f       	adc	r22, r18
    15f6:	73 9f       	mul	r23, r19
    15f8:	b0 0d       	add	r27, r0
    15fa:	a1 1d       	adc	r26, r1
    15fc:	62 1f       	adc	r22, r18
    15fe:	83 9f       	mul	r24, r19
    1600:	a0 0d       	add	r26, r0
    1602:	61 1d       	adc	r22, r1
    1604:	22 1f       	adc	r18, r18
    1606:	74 9f       	mul	r23, r20
    1608:	33 27       	eor	r19, r19
    160a:	a0 0d       	add	r26, r0
    160c:	61 1d       	adc	r22, r1
    160e:	23 1f       	adc	r18, r19
    1610:	84 9f       	mul	r24, r20
    1612:	60 0d       	add	r22, r0
    1614:	21 1d       	adc	r18, r1
    1616:	82 2f       	mov	r24, r18
    1618:	76 2f       	mov	r23, r22
    161a:	6a 2f       	mov	r22, r26
    161c:	11 24       	eor	r1, r1
    161e:	9f 57       	subi	r25, 0x7F	; 127
    1620:	50 40       	sbci	r21, 0x00	; 0
    1622:	9a f0       	brmi	.+38     	; 0x164a <__mulsf3_pse+0x88>
    1624:	f1 f0       	breq	.+60     	; 0x1662 <__mulsf3_pse+0xa0>
    1626:	88 23       	and	r24, r24
    1628:	4a f0       	brmi	.+18     	; 0x163c <__mulsf3_pse+0x7a>
    162a:	ee 0f       	add	r30, r30
    162c:	ff 1f       	adc	r31, r31
    162e:	bb 1f       	adc	r27, r27
    1630:	66 1f       	adc	r22, r22
    1632:	77 1f       	adc	r23, r23
    1634:	88 1f       	adc	r24, r24
    1636:	91 50       	subi	r25, 0x01	; 1
    1638:	50 40       	sbci	r21, 0x00	; 0
    163a:	a9 f7       	brne	.-22     	; 0x1626 <__mulsf3_pse+0x64>
    163c:	9e 3f       	cpi	r25, 0xFE	; 254
    163e:	51 05       	cpc	r21, r1
    1640:	80 f0       	brcs	.+32     	; 0x1662 <__mulsf3_pse+0xa0>
    1642:	0c 94 03 09 	jmp	0x1206	; 0x1206 <__fp_inf>
    1646:	0c 94 4e 09 	jmp	0x129c	; 0x129c <__fp_szero>
    164a:	5f 3f       	cpi	r21, 0xFF	; 255
    164c:	e4 f3       	brlt	.-8      	; 0x1646 <__mulsf3_pse+0x84>
    164e:	98 3e       	cpi	r25, 0xE8	; 232
    1650:	d4 f3       	brlt	.-12     	; 0x1646 <__mulsf3_pse+0x84>
    1652:	86 95       	lsr	r24
    1654:	77 95       	ror	r23
    1656:	67 95       	ror	r22
    1658:	b7 95       	ror	r27
    165a:	f7 95       	ror	r31
    165c:	e7 95       	ror	r30
    165e:	9f 5f       	subi	r25, 0xFF	; 255
    1660:	c1 f7       	brne	.-16     	; 0x1652 <__mulsf3_pse+0x90>
    1662:	fe 2b       	or	r31, r30
    1664:	88 0f       	add	r24, r24
    1666:	91 1d       	adc	r25, r1
    1668:	96 95       	lsr	r25
    166a:	87 95       	ror	r24
    166c:	97 f9       	bld	r25, 7
    166e:	08 95       	ret

00001670 <__subsf3>:
    1670:	50 58       	subi	r21, 0x80	; 128

00001672 <__addsf3>:
    1672:	bb 27       	eor	r27, r27
    1674:	aa 27       	eor	r26, r26
    1676:	0e 94 50 0b 	call	0x16a0	; 0x16a0 <__addsf3x>
    167a:	0c 94 1a 09 	jmp	0x1234	; 0x1234 <__fp_round>
    167e:	0e 94 0c 09 	call	0x1218	; 0x1218 <__fp_pscA>
    1682:	38 f0       	brcs	.+14     	; 0x1692 <__addsf3+0x20>
    1684:	0e 94 13 09 	call	0x1226	; 0x1226 <__fp_pscB>
    1688:	20 f0       	brcs	.+8      	; 0x1692 <__addsf3+0x20>
    168a:	39 f4       	brne	.+14     	; 0x169a <__addsf3+0x28>
    168c:	9f 3f       	cpi	r25, 0xFF	; 255
    168e:	19 f4       	brne	.+6      	; 0x1696 <__addsf3+0x24>
    1690:	26 f4       	brtc	.+8      	; 0x169a <__addsf3+0x28>
    1692:	0c 94 09 09 	jmp	0x1212	; 0x1212 <__fp_nan>
    1696:	0e f4       	brtc	.+2      	; 0x169a <__addsf3+0x28>
    1698:	e0 95       	com	r30
    169a:	e7 fb       	bst	r30, 7
    169c:	0c 94 03 09 	jmp	0x1206	; 0x1206 <__fp_inf>

000016a0 <__addsf3x>:
    16a0:	e9 2f       	mov	r30, r25
    16a2:	0e 94 2b 09 	call	0x1256	; 0x1256 <__fp_split3>
    16a6:	58 f3       	brcs	.-42     	; 0x167e <__addsf3+0xc>
    16a8:	ba 17       	cp	r27, r26
    16aa:	62 07       	cpc	r22, r18
    16ac:	73 07       	cpc	r23, r19
    16ae:	84 07       	cpc	r24, r20
    16b0:	95 07       	cpc	r25, r21
    16b2:	20 f0       	brcs	.+8      	; 0x16bc <__addsf3x+0x1c>
    16b4:	79 f4       	brne	.+30     	; 0x16d4 <__addsf3x+0x34>
    16b6:	a6 f5       	brtc	.+104    	; 0x1720 <__addsf3x+0x80>
    16b8:	0c 94 4d 09 	jmp	0x129a	; 0x129a <__fp_zero>
    16bc:	0e f4       	brtc	.+2      	; 0x16c0 <__addsf3x+0x20>
    16be:	e0 95       	com	r30
    16c0:	0b 2e       	mov	r0, r27
    16c2:	ba 2f       	mov	r27, r26
    16c4:	a0 2d       	mov	r26, r0
    16c6:	0b 01       	movw	r0, r22
    16c8:	b9 01       	movw	r22, r18
    16ca:	90 01       	movw	r18, r0
    16cc:	0c 01       	movw	r0, r24
    16ce:	ca 01       	movw	r24, r20
    16d0:	a0 01       	movw	r20, r0
    16d2:	11 24       	eor	r1, r1
    16d4:	ff 27       	eor	r31, r31
    16d6:	59 1b       	sub	r21, r25
    16d8:	99 f0       	breq	.+38     	; 0x1700 <__addsf3x+0x60>
    16da:	59 3f       	cpi	r21, 0xF9	; 249
    16dc:	50 f4       	brcc	.+20     	; 0x16f2 <__addsf3x+0x52>
    16de:	50 3e       	cpi	r21, 0xE0	; 224
    16e0:	68 f1       	brcs	.+90     	; 0x173c <__addsf3x+0x9c>
    16e2:	1a 16       	cp	r1, r26
    16e4:	f0 40       	sbci	r31, 0x00	; 0
    16e6:	a2 2f       	mov	r26, r18
    16e8:	23 2f       	mov	r18, r19
    16ea:	34 2f       	mov	r19, r20
    16ec:	44 27       	eor	r20, r20
    16ee:	58 5f       	subi	r21, 0xF8	; 248
    16f0:	f3 cf       	rjmp	.-26     	; 0x16d8 <__addsf3x+0x38>
    16f2:	46 95       	lsr	r20
    16f4:	37 95       	ror	r19
    16f6:	27 95       	ror	r18
    16f8:	a7 95       	ror	r26
    16fa:	f0 40       	sbci	r31, 0x00	; 0
    16fc:	53 95       	inc	r21
    16fe:	c9 f7       	brne	.-14     	; 0x16f2 <__addsf3x+0x52>
    1700:	7e f4       	brtc	.+30     	; 0x1720 <__addsf3x+0x80>
    1702:	1f 16       	cp	r1, r31
    1704:	ba 0b       	sbc	r27, r26
    1706:	62 0b       	sbc	r22, r18
    1708:	73 0b       	sbc	r23, r19
    170a:	84 0b       	sbc	r24, r20
    170c:	ba f0       	brmi	.+46     	; 0x173c <__addsf3x+0x9c>
    170e:	91 50       	subi	r25, 0x01	; 1
    1710:	a1 f0       	breq	.+40     	; 0x173a <__addsf3x+0x9a>
    1712:	ff 0f       	add	r31, r31
    1714:	bb 1f       	adc	r27, r27
    1716:	66 1f       	adc	r22, r22
    1718:	77 1f       	adc	r23, r23
    171a:	88 1f       	adc	r24, r24
    171c:	c2 f7       	brpl	.-16     	; 0x170e <__addsf3x+0x6e>
    171e:	0e c0       	rjmp	.+28     	; 0x173c <__addsf3x+0x9c>
    1720:	ba 0f       	add	r27, r26
    1722:	62 1f       	adc	r22, r18
    1724:	73 1f       	adc	r23, r19
    1726:	84 1f       	adc	r24, r20
    1728:	48 f4       	brcc	.+18     	; 0x173c <__addsf3x+0x9c>
    172a:	87 95       	ror	r24
    172c:	77 95       	ror	r23
    172e:	67 95       	ror	r22
    1730:	b7 95       	ror	r27
    1732:	f7 95       	ror	r31
    1734:	9e 3f       	cpi	r25, 0xFE	; 254
    1736:	08 f0       	brcs	.+2      	; 0x173a <__addsf3x+0x9a>
    1738:	b0 cf       	rjmp	.-160    	; 0x169a <__addsf3+0x28>
    173a:	93 95       	inc	r25
    173c:	88 0f       	add	r24, r24
    173e:	08 f0       	brcs	.+2      	; 0x1742 <__addsf3x+0xa2>
    1740:	99 27       	eor	r25, r25
    1742:	ee 0f       	add	r30, r30
    1744:	97 95       	ror	r25
    1746:	87 95       	ror	r24
    1748:	08 95       	ret

0000174a <__fp_mpack>:
    174a:	9f 3f       	cpi	r25, 0xFF	; 255
    174c:	31 f0       	breq	.+12     	; 0x175a <__fp_mpack_finite+0xc>

0000174e <__fp_mpack_finite>:
    174e:	91 50       	subi	r25, 0x01	; 1
    1750:	20 f4       	brcc	.+8      	; 0x175a <__fp_mpack_finite+0xc>
    1752:	87 95       	ror	r24
    1754:	77 95       	ror	r23
    1756:	67 95       	ror	r22
    1758:	b7 95       	ror	r27
    175a:	88 0f       	add	r24, r24
    175c:	91 1d       	adc	r25, r1
    175e:	96 95       	lsr	r25
    1760:	87 95       	ror	r24
    1762:	97 f9       	bld	r25, 7
    1764:	08 95       	ret

00001766 <__udivmodsi4>:
    1766:	a1 e2       	ldi	r26, 0x21	; 33
    1768:	1a 2e       	mov	r1, r26
    176a:	aa 1b       	sub	r26, r26
    176c:	bb 1b       	sub	r27, r27
    176e:	fd 01       	movw	r30, r26
    1770:	0d c0       	rjmp	.+26     	; 0x178c <__udivmodsi4_ep>

00001772 <__udivmodsi4_loop>:
    1772:	aa 1f       	adc	r26, r26
    1774:	bb 1f       	adc	r27, r27
    1776:	ee 1f       	adc	r30, r30
    1778:	ff 1f       	adc	r31, r31
    177a:	a2 17       	cp	r26, r18
    177c:	b3 07       	cpc	r27, r19
    177e:	e4 07       	cpc	r30, r20
    1780:	f5 07       	cpc	r31, r21
    1782:	20 f0       	brcs	.+8      	; 0x178c <__udivmodsi4_ep>
    1784:	a2 1b       	sub	r26, r18
    1786:	b3 0b       	sbc	r27, r19
    1788:	e4 0b       	sbc	r30, r20
    178a:	f5 0b       	sbc	r31, r21

0000178c <__udivmodsi4_ep>:
    178c:	66 1f       	adc	r22, r22
    178e:	77 1f       	adc	r23, r23
    1790:	88 1f       	adc	r24, r24
    1792:	99 1f       	adc	r25, r25
    1794:	1a 94       	dec	r1
    1796:	69 f7       	brne	.-38     	; 0x1772 <__udivmodsi4_loop>
    1798:	60 95       	com	r22
    179a:	70 95       	com	r23
    179c:	80 95       	com	r24
    179e:	90 95       	com	r25
    17a0:	9b 01       	movw	r18, r22
    17a2:	ac 01       	movw	r20, r24
    17a4:	bd 01       	movw	r22, r26
    17a6:	cf 01       	movw	r24, r30
    17a8:	08 95       	ret

000017aa <__divmodsi4>:
    17aa:	05 2e       	mov	r0, r21
    17ac:	97 fb       	bst	r25, 7
    17ae:	1e f4       	brtc	.+6      	; 0x17b6 <__divmodsi4+0xc>
    17b0:	00 94       	com	r0
    17b2:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <__negsi2>
    17b6:	57 fd       	sbrc	r21, 7
    17b8:	07 d0       	rcall	.+14     	; 0x17c8 <__divmodsi4_neg2>
    17ba:	0e 94 b3 0b 	call	0x1766	; 0x1766 <__udivmodsi4>
    17be:	07 fc       	sbrc	r0, 7
    17c0:	03 d0       	rcall	.+6      	; 0x17c8 <__divmodsi4_neg2>
    17c2:	4e f4       	brtc	.+18     	; 0x17d6 <__divmodsi4_exit>
    17c4:	0c 94 ec 0b 	jmp	0x17d8	; 0x17d8 <__negsi2>

000017c8 <__divmodsi4_neg2>:
    17c8:	50 95       	com	r21
    17ca:	40 95       	com	r20
    17cc:	30 95       	com	r19
    17ce:	21 95       	neg	r18
    17d0:	3f 4f       	sbci	r19, 0xFF	; 255
    17d2:	4f 4f       	sbci	r20, 0xFF	; 255
    17d4:	5f 4f       	sbci	r21, 0xFF	; 255

000017d6 <__divmodsi4_exit>:
    17d6:	08 95       	ret

000017d8 <__negsi2>:
    17d8:	90 95       	com	r25
    17da:	80 95       	com	r24
    17dc:	70 95       	com	r23
    17de:	61 95       	neg	r22
    17e0:	7f 4f       	sbci	r23, 0xFF	; 255
    17e2:	8f 4f       	sbci	r24, 0xFF	; 255
    17e4:	9f 4f       	sbci	r25, 0xFF	; 255
    17e6:	08 95       	ret

000017e8 <strcpy>:
    17e8:	fb 01       	movw	r30, r22
    17ea:	dc 01       	movw	r26, r24
    17ec:	01 90       	ld	r0, Z+
    17ee:	0d 92       	st	X+, r0
    17f0:	00 20       	and	r0, r0
    17f2:	e1 f7       	brne	.-8      	; 0x17ec <strcpy+0x4>
    17f4:	08 95       	ret

000017f6 <__itoa_ncheck>:
    17f6:	bb 27       	eor	r27, r27
    17f8:	4a 30       	cpi	r20, 0x0A	; 10
    17fa:	31 f4       	brne	.+12     	; 0x1808 <__itoa_ncheck+0x12>
    17fc:	99 23       	and	r25, r25
    17fe:	22 f4       	brpl	.+8      	; 0x1808 <__itoa_ncheck+0x12>
    1800:	bd e2       	ldi	r27, 0x2D	; 45
    1802:	90 95       	com	r25
    1804:	81 95       	neg	r24
    1806:	9f 4f       	sbci	r25, 0xFF	; 255
    1808:	0c 94 07 0c 	jmp	0x180e	; 0x180e <__utoa_common>

0000180c <__utoa_ncheck>:
    180c:	bb 27       	eor	r27, r27

0000180e <__utoa_common>:
    180e:	fb 01       	movw	r30, r22
    1810:	55 27       	eor	r21, r21
    1812:	aa 27       	eor	r26, r26
    1814:	88 0f       	add	r24, r24
    1816:	99 1f       	adc	r25, r25
    1818:	aa 1f       	adc	r26, r26
    181a:	a4 17       	cp	r26, r20
    181c:	10 f0       	brcs	.+4      	; 0x1822 <__utoa_common+0x14>
    181e:	a4 1b       	sub	r26, r20
    1820:	83 95       	inc	r24
    1822:	50 51       	subi	r21, 0x10	; 16
    1824:	b9 f7       	brne	.-18     	; 0x1814 <__utoa_common+0x6>
    1826:	a0 5d       	subi	r26, 0xD0	; 208
    1828:	aa 33       	cpi	r26, 0x3A	; 58
    182a:	08 f0       	brcs	.+2      	; 0x182e <__utoa_common+0x20>
    182c:	a9 5d       	subi	r26, 0xD9	; 217
    182e:	a1 93       	st	Z+, r26
    1830:	00 97       	sbiw	r24, 0x00	; 0
    1832:	79 f7       	brne	.-34     	; 0x1812 <__utoa_common+0x4>
    1834:	b1 11       	cpse	r27, r1
    1836:	b1 93       	st	Z+, r27
    1838:	11 92       	st	Z+, r1
    183a:	cb 01       	movw	r24, r22
    183c:	0c 94 20 0c 	jmp	0x1840	; 0x1840 <strrev>

00001840 <strrev>:
    1840:	dc 01       	movw	r26, r24
    1842:	fc 01       	movw	r30, r24
    1844:	67 2f       	mov	r22, r23
    1846:	71 91       	ld	r23, Z+
    1848:	77 23       	and	r23, r23
    184a:	e1 f7       	brne	.-8      	; 0x1844 <strrev+0x4>
    184c:	32 97       	sbiw	r30, 0x02	; 2
    184e:	04 c0       	rjmp	.+8      	; 0x1858 <strrev+0x18>
    1850:	7c 91       	ld	r23, X
    1852:	6d 93       	st	X+, r22
    1854:	70 83       	st	Z, r23
    1856:	62 91       	ld	r22, -Z
    1858:	ae 17       	cp	r26, r30
    185a:	bf 07       	cpc	r27, r31
    185c:	c8 f3       	brcs	.-14     	; 0x1850 <strrev+0x10>
    185e:	08 95       	ret

00001860 <_exit>:
    1860:	f8 94       	cli

00001862 <__stop_program>:
    1862:	ff cf       	rjmp	.-2      	; 0x1862 <__stop_program>
