
Remote 1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000060  00800100  0000176e  00001802  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000176e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000009b  00800160  00800160  00001862  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001862  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001894  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001c0  00000000  00000000  000018d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001cb7  00000000  00000000  00001a94  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e99  00000000  00000000  0000374b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f35  00000000  00000000  000045e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000048c  00000000  00000000  0000551c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007c3  00000000  00000000  000059a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000011b0  00000000  00000000  0000616b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001c0  00000000  00000000  0000731b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 fa 02 	jmp	0x5f4	; 0x5f4 <__ctors_end>
       4:	0c 94 e5 04 	jmp	0x9ca	; 0x9ca <__vector_1>
       8:	0c 94 ef 04 	jmp	0x9de	; 0x9de <__vector_2>
       c:	0c 94 17 03 	jmp	0x62e	; 0x62e <__bad_interrupt>
      10:	0c 94 17 03 	jmp	0x62e	; 0x62e <__bad_interrupt>
      14:	0c 94 17 03 	jmp	0x62e	; 0x62e <__bad_interrupt>
      18:	0c 94 17 03 	jmp	0x62e	; 0x62e <__bad_interrupt>
      1c:	0c 94 2c 03 	jmp	0x658	; 0x658 <__vector_7>
      20:	0c 94 17 03 	jmp	0x62e	; 0x62e <__bad_interrupt>
      24:	0c 94 17 03 	jmp	0x62e	; 0x62e <__bad_interrupt>
      28:	0c 94 17 03 	jmp	0x62e	; 0x62e <__bad_interrupt>
      2c:	0c 94 3e 07 	jmp	0xe7c	; 0xe7c <__vector_11>
      30:	0c 94 17 03 	jmp	0x62e	; 0x62e <__bad_interrupt>
      34:	0c 94 17 03 	jmp	0x62e	; 0x62e <__bad_interrupt>
      38:	0c 94 17 03 	jmp	0x62e	; 0x62e <__bad_interrupt>
      3c:	0c 94 17 03 	jmp	0x62e	; 0x62e <__bad_interrupt>
      40:	0c 94 17 03 	jmp	0x62e	; 0x62e <__bad_interrupt>
      44:	0c 94 17 03 	jmp	0x62e	; 0x62e <__bad_interrupt>
      48:	0c 94 91 04 	jmp	0x922	; 0x922 <__vector_18>
      4c:	0c 94 17 03 	jmp	0x62e	; 0x62e <__bad_interrupt>
      50:	0c 94 17 03 	jmp	0x62e	; 0x62e <__bad_interrupt>
      54:	0c 94 17 03 	jmp	0x62e	; 0x62e <__bad_interrupt>
      58:	0c 94 17 03 	jmp	0x62e	; 0x62e <__bad_interrupt>
      5c:	0c 94 17 03 	jmp	0x62e	; 0x62e <__bad_interrupt>
      60:	0c 94 17 03 	jmp	0x62e	; 0x62e <__bad_interrupt>
      64:	0c 94 17 03 	jmp	0x62e	; 0x62e <__bad_interrupt>
      68:	07 63       	ori	r16, 0x37	; 55
      6a:	42 36       	cpi	r20, 0x62	; 98
      6c:	b7 9b       	sbis	0x16, 7	; 22
      6e:	d8 a7       	std	Y+40, r29	; 0x28
      70:	1a 39       	cpi	r17, 0x9A	; 154
      72:	68 56       	subi	r22, 0x68	; 104
      74:	18 ae       	std	Y+56, r1	; 0x38
      76:	ba ab       	std	Y+50, r27	; 0x32
      78:	55 8c       	ldd	r5, Z+29	; 0x1d
      7a:	1d 3c       	cpi	r17, 0xCD	; 205
      7c:	b7 cc       	rjmp	.-1682   	; 0xfffff9ec <__eeprom_end+0xff7ef9ec>
      7e:	57 63       	ori	r21, 0x37	; 55
      80:	bd 6d       	ori	r27, 0xDD	; 221
      82:	ed fd       	.word	0xfded	; ????
      84:	75 3e       	cpi	r23, 0xE5	; 229
      86:	f6 17       	cp	r31, r22
      88:	72 31       	cpi	r23, 0x12	; 18
      8a:	bf 00       	.word	0x00bf	; ????
      8c:	00 00       	nop
      8e:	80 3f       	cpi	r24, 0xF0	; 240
      90:	08 00       	.word	0x0008	; ????
      92:	00 00       	nop
      94:	be 92       	st	-X, r11
      96:	24 49       	sbci	r18, 0x94	; 148
      98:	12 3e       	cpi	r17, 0xE2	; 226
      9a:	ab aa       	std	Y+51, r10	; 0x33
      9c:	aa 2a       	or	r10, r26
      9e:	be cd       	rjmp	.-1156   	; 0xfffffc1c <__eeprom_end+0xff7efc1c>
      a0:	cc cc       	rjmp	.-1640   	; 0xfffffa3a <__eeprom_end+0xff7efa3a>
      a2:	4c 3e       	cpi	r20, 0xEC	; 236
      a4:	00 00       	nop
      a6:	00 80       	ld	r0, Z
      a8:	be ab       	std	Y+54, r27	; 0x36
      aa:	aa aa       	std	Y+50, r10	; 0x32
      ac:	aa 3e       	cpi	r26, 0xEA	; 234
      ae:	00 00       	nop
      b0:	00 00       	nop
      b2:	bf 00       	.word	0x00bf	; ????
      b4:	00 00       	nop
      b6:	80 3f       	cpi	r24, 0xF0	; 240
      b8:	00 00       	nop
      ba:	00 00       	nop
      bc:	00 08       	sbc	r0, r0
      be:	41 78       	andi	r20, 0x81	; 129
      c0:	d3 bb       	out	0x13, r29	; 19
      c2:	43 87       	std	Z+11, r20	; 0x0b
      c4:	d1 13       	cpse	r29, r17
      c6:	3d 19       	sub	r19, r13
      c8:	0e 3c       	cpi	r16, 0xCE	; 206
      ca:	c3 bd       	out	0x23, r28	; 35
      cc:	42 82       	std	Z+2, r4	; 0x02
      ce:	ad 2b       	or	r26, r29
      d0:	3e 68       	ori	r19, 0x8E	; 142
      d2:	ec 82       	std	Y+4, r14	; 0x04
      d4:	76 be       	out	0x36, r7	; 54
      d6:	d9 8f       	std	Y+25, r29	; 0x19
      d8:	e1 a9       	ldd	r30, Z+49	; 0x31
      da:	3e 4c       	sbci	r19, 0xCE	; 206
      dc:	80 ef       	ldi	r24, 0xF0	; 240
      de:	ff be       	out	0x3f, r15	; 63
      e0:	01 c4       	rjmp	.+2050   	; 0x8e4 <display_sensors+0x78>
      e2:	ff 7f       	andi	r31, 0xFF	; 255
      e4:	3f 00       	.word	0x003f	; ????
      e6:	00 00       	nop
	...

000000ea <__trampolines_end>:
      ea:	39 15       	cp	r19, r9
      ec:	55 6e       	ori	r21, 0xE5	; 229
      ee:	72 38       	cpi	r23, 0x82	; 130
      f0:	0c 01       	movw	r0, r24
      f2:	06 71       	Address 0x000000f2 is out of bounds.
.word	0xffff	; ????

000000f3 <melodies>:
      f3:	71 80 71 00 00 00 00 00 00 00 00 00 00 00 00 00     q.q.............
	...
     1f3:	63 6c 6f 6c 48 63 6c 6f 6c 48 63 6d 60 6d 6a 60     clolHclolHcm`mj`
     203:	6a 48 68 00 00 00 00 00 00 00 00 00 00 00 00 00     jHh.............
	...
     2f3:	2d 4d 60 68 4d 68 88 8a 4c 85 80 65 4a 68 88 86     -M`hMh..L..eJh..
     303:	48 81 80 61 63 83 80 63 83 85 66 86 80 66 86 88     H..ac..c..f..f..
     313:	4a 6c 6d 4f 6f 68 51 6f 8f 8d 4f 6c 68 4d 6c 8c     JlmOohQo..OlhMl.
     323:	8a 4c 85 80 65 4a 68 88 86 48 61 80 81 4d 6c 8c     .L..eJh..Ha..Ml.
     333:	8a 68 6c 6d 6f 31 6f 6d 6c 6d 4f 6f 88 80 68 6c     .hlmo1omlmOo..hl
     343:	6d 6f 2d 6c 6a 68 6a 4c 6c 85 80 65 68 6a 6c 4d     mo-ljhjLl..ehjlM
     353:	6a 8a 8c 4d 6a 8a 8c 4d 6a 6d 52 72 60 32 71 6f     j..Mj..MjmRr`2qo
     363:	6d 6f 51 71 8d 80 2d 2f 6d 6c 6a 6c 4d 6d 8a 80     moQq..-/mljlMm..
     373:	2a 4d 6c 8c 8a 48 61 80 81 28 4a 4c 2d 6d 00 00     *Ml..Ha..(JL-m..
	...
     3f3:	4a 4c 4e 4f 51 53 6a 80 8a 4c 6e 80 8e 6f 8f 80     JLNOQSj..Ln..o..
     403:	4f 40 4a 4c 4e 4f 51 53 6a 80 8a 4c 6e 80 8e 6f     O@JLNOQSj..Ln..o
     413:	8f 80 4f 40 56 53 76 96 80 76 74 31 54 51 54 36     ..O@VSv..vt1TQT6
     423:	76 96 80 56 53 76 96 80 76 74 31 4a 4c 4e 2f 4f     v..VSv..vt1JLN/O
	...
     4f3:	61 81 80 41 68 88 80 48 6a 8a 80 4a 28 66 86 80     a..Ah..Hj..J(f..
     503:	46 65 85 80 45 63 83 80 43 21 68 88 80 48 66 86     Fe..Ec..C!h..Hf.
     513:	80 46 65 85 80 45 23 68 88 80 48 66 86 80 46 65     .Fe..E#h..Hf..Fe
     523:	85 80 45 23 61 81 80 41 68 88 80 48 6a 8a 80 4a     ..E#a..Ah..Hj..J
     533:	28 66 86 80 46 65 85 80 45 63 83 80 43 21 00 00     (f..Fe..Ec..C!..
	...

000005f4 <__ctors_end>:
     5f4:	11 24       	eor	r1, r1
     5f6:	1f be       	out	0x3f, r1	; 63
     5f8:	cf ef       	ldi	r28, 0xFF	; 255
     5fa:	d8 e0       	ldi	r29, 0x08	; 8
     5fc:	de bf       	out	0x3e, r29	; 62
     5fe:	cd bf       	out	0x3d, r28	; 61

00000600 <__do_copy_data>:
     600:	11 e0       	ldi	r17, 0x01	; 1
     602:	a0 e0       	ldi	r26, 0x00	; 0
     604:	b1 e0       	ldi	r27, 0x01	; 1
     606:	ee e6       	ldi	r30, 0x6E	; 110
     608:	f7 e1       	ldi	r31, 0x17	; 23
     60a:	02 c0       	rjmp	.+4      	; 0x610 <__do_copy_data+0x10>
     60c:	05 90       	lpm	r0, Z+
     60e:	0d 92       	st	X+, r0
     610:	a0 36       	cpi	r26, 0x60	; 96
     612:	b1 07       	cpc	r27, r17
     614:	d9 f7       	brne	.-10     	; 0x60c <__do_copy_data+0xc>

00000616 <__do_clear_bss>:
     616:	21 e0       	ldi	r18, 0x01	; 1
     618:	a0 e6       	ldi	r26, 0x60	; 96
     61a:	b1 e0       	ldi	r27, 0x01	; 1
     61c:	01 c0       	rjmp	.+2      	; 0x620 <.do_clear_bss_start>

0000061e <.do_clear_bss_loop>:
     61e:	1d 92       	st	X+, r1

00000620 <.do_clear_bss_start>:
     620:	ab 3f       	cpi	r26, 0xFB	; 251
     622:	b2 07       	cpc	r27, r18
     624:	e1 f7       	brne	.-8      	; 0x61e <.do_clear_bss_loop>
     626:	0e 94 22 05 	call	0xa44	; 0xa44 <main>
     62a:	0c 94 b5 0b 	jmp	0x176a	; 0x176a <_exit>

0000062e <__bad_interrupt>:
     62e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000632 <uart_put_char>:
}

int lcd_put_char(char c, FILE* stream){
	write_lcd_char(c);
	return 0;
}
     632:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <uart_send_byte>
     636:	80 e0       	ldi	r24, 0x00	; 0
     638:	90 e0       	ldi	r25, 0x00	; 0
     63a:	08 95       	ret

0000063c <print_lcd_static>:

void print_lcd_static(){
	set_cursor_pos(0);
     63c:	80 e0       	ldi	r24, 0x00	; 0
     63e:	0e 94 91 06 	call	0xd22	; 0xd22 <set_cursor_pos>
	write_lcd_string("Fram: __cm PIR:_");
     642:	8d e1       	ldi	r24, 0x1D	; 29
     644:	91 e0       	ldi	r25, 0x01	; 1
     646:	0e 94 76 06 	call	0xcec	; 0xcec <write_lcd_string>
	set_cursor_pos(16);
     64a:	80 e1       	ldi	r24, 0x10	; 16
     64c:	0e 94 91 06 	call	0xd22	; 0xd22 <set_cursor_pos>
	write_lcd_string("Bak: __cm  C: __");
     650:	8e e2       	ldi	r24, 0x2E	; 46
     652:	91 e0       	ldi	r25, 0x01	; 1
     654:	0c 94 76 06 	jmp	0xcec	; 0xcec <write_lcd_string>

00000658 <__vector_7>:
}

ISR(TIMER2_COMPA_vect){
     658:	1f 92       	push	r1
     65a:	0f 92       	push	r0
     65c:	0f b6       	in	r0, 0x3f	; 63
     65e:	0f 92       	push	r0
     660:	11 24       	eor	r1, r1
     662:	2f 93       	push	r18
     664:	3f 93       	push	r19
     666:	4f 93       	push	r20
     668:	5f 93       	push	r21
     66a:	6f 93       	push	r22
     66c:	7f 93       	push	r23
     66e:	8f 93       	push	r24
     670:	9f 93       	push	r25
     672:	af 93       	push	r26
     674:	bf 93       	push	r27
     676:	ef 93       	push	r30
     678:	ff 93       	push	r31
	if(++heart_hundreths > 50){
     67a:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <heart_hundreths>
     67e:	8f 5f       	subi	r24, 0xFF	; 255
     680:	80 93 67 01 	sts	0x0167, r24	; 0x800167 <heart_hundreths>
     684:	83 33       	cpi	r24, 0x33	; 51
     686:	18 f0       	brcs	.+6      	; 0x68e <__vector_7+0x36>
		LED_PORT |= 1<<LEDR2;
     688:	5f 9a       	sbi	0x0b, 7	; 11
		heart_hundreths = 0;
     68a:	10 92 67 01 	sts	0x0167, r1	; 0x800167 <heart_hundreths>
	}
	if(message_displaying && ++message_hundreths > 100){
     68e:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <message_displaying>
     692:	88 23       	and	r24, r24
     694:	b9 f0       	breq	.+46     	; 0x6c4 <__vector_7+0x6c>
     696:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <message_hundreths>
     69a:	8f 5f       	subi	r24, 0xFF	; 255
     69c:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <message_hundreths>
     6a0:	85 36       	cpi	r24, 0x65	; 101
     6a2:	80 f0       	brcs	.+32     	; 0x6c4 <__vector_7+0x6c>
		if(++message_seconds > 5){
     6a4:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <message_seconds>
     6a8:	8f 5f       	subi	r24, 0xFF	; 255
     6aa:	80 93 65 01 	sts	0x0165, r24	; 0x800165 <message_seconds>
     6ae:	86 30       	cpi	r24, 0x06	; 6
     6b0:	38 f0       	brcs	.+14     	; 0x6c0 <__vector_7+0x68>
			message_seconds = 0;
     6b2:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <message_seconds>
			message_displaying = false;
     6b6:	10 92 61 01 	sts	0x0161, r1	; 0x800161 <message_displaying>
			clear_line(2);
     6ba:	82 e0       	ldi	r24, 0x02	; 2
     6bc:	0e 94 99 06 	call	0xd32	; 0xd32 <clear_line>
		}
		message_hundreths = 0;
     6c0:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <message_hundreths>
	}
}
     6c4:	ff 91       	pop	r31
     6c6:	ef 91       	pop	r30
     6c8:	bf 91       	pop	r27
     6ca:	af 91       	pop	r26
     6cc:	9f 91       	pop	r25
     6ce:	8f 91       	pop	r24
     6d0:	7f 91       	pop	r23
     6d2:	6f 91       	pop	r22
     6d4:	5f 91       	pop	r21
     6d6:	4f 91       	pop	r20
     6d8:	3f 91       	pop	r19
     6da:	2f 91       	pop	r18
     6dc:	0f 90       	pop	r0
     6de:	0f be       	out	0x3f, r0	; 63
     6e0:	0f 90       	pop	r0
     6e2:	1f 90       	pop	r1
     6e4:	18 95       	reti

000006e6 <timer_init>:

void timer_init(){
	/* Start 100Hz system timer with TC2 for counting time */
	OCR2A = 77;
     6e6:	8d e4       	ldi	r24, 0x4D	; 77
     6e8:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
	TCCR2A = 1<<WGM21;
     6ec:	82 e0       	ldi	r24, 0x02	; 2
     6ee:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
	TCCR2B = 7;
     6f2:	97 e0       	ldi	r25, 0x07	; 7
     6f4:	90 93 b1 00 	sts	0x00B1, r25	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
	TIMSK2 = 1<<OCIE2A;
     6f8:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f8070>
     6fc:	08 95       	ret

000006fe <clear_heart>:
}

void clear_heart(){
	LED_PORT &= ~(1<<LEDR2);
     6fe:	5f 98       	cbi	0x0b, 7	; 11
     700:	08 95       	ret

00000702 <force_message>:
			}
			break;
	}
}

void force_message(char* msg){
     702:	cf 93       	push	r28
     704:	df 93       	push	r29
     706:	ec 01       	movw	r28, r24
	cli();
     708:	f8 94       	cli
	message_displaying = true;
     70a:	81 e0       	ldi	r24, 0x01	; 1
     70c:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <message_displaying>
	message_hundreths = 0;
     710:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <message_hundreths>
	message_seconds = 0;
     714:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <message_seconds>
	clear_line(2);
     718:	82 e0       	ldi	r24, 0x02	; 2
     71a:	0e 94 99 06 	call	0xd32	; 0xd32 <clear_line>
	set_cursor_pos(32);
     71e:	80 e2       	ldi	r24, 0x20	; 32
     720:	0e 94 91 06 	call	0xd22	; 0xd22 <set_cursor_pos>
	write_lcd_string(msg);
     724:	ce 01       	movw	r24, r28
     726:	0e 94 76 06 	call	0xcec	; 0xcec <write_lcd_string>
	sei();
     72a:	78 94       	sei
}
     72c:	df 91       	pop	r29
     72e:	cf 91       	pop	r28
     730:	08 95       	ret

00000732 <queue_message>:

void queue_message(char* msg, bool urgent){
     732:	cf 93       	push	r28
     734:	df 93       	push	r29
	if(urgent){
     736:	66 23       	and	r22, r22
     738:	21 f0       	breq	.+8      	; 0x742 <queue_message+0x10>
		}
		strcpy((char*)(message_buf)[message_buf_ind++], msg);
		if(++message_counter > 5) message_counter = 5;
		if(message_buf_ind > 4) message_buf_ind = 0;
	}
}
     73a:	df 91       	pop	r29
     73c:	cf 91       	pop	r28
	sei();
}

void queue_message(char* msg, bool urgent){
	if(urgent){
		force_message(msg);
     73e:	0c 94 81 03 	jmp	0x702	; 0x702 <force_message>
     742:	ec 01       	movw	r28, r24
	} else{
		if(message_counter == 5){
     744:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <message_counter>
     748:	85 30       	cpi	r24, 0x05	; 5
     74a:	f1 f4       	brne	.+60     	; 0x788 <queue_message+0x56>
			force_message((char*)(message_buf)[message_disp_ind++]);
     74c:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <message_disp_ind>
     750:	91 e0       	ldi	r25, 0x01	; 1
     752:	98 0f       	add	r25, r24
     754:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <message_disp_ind>
     758:	20 e1       	ldi	r18, 0x10	; 16
     75a:	82 9f       	mul	r24, r18
     75c:	c0 01       	movw	r24, r0
     75e:	11 24       	eor	r1, r1
     760:	83 59       	subi	r24, 0x93	; 147
     762:	9e 4f       	sbci	r25, 0xFE	; 254
     764:	0e 94 81 03 	call	0x702	; 0x702 <force_message>
			if(message_disp_ind > 4) message_disp_ind = 0;
     768:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <message_disp_ind>
     76c:	85 30       	cpi	r24, 0x05	; 5
     76e:	10 f0       	brcs	.+4      	; 0x774 <queue_message+0x42>
     770:	10 92 63 01 	sts	0x0163, r1	; 0x800163 <message_disp_ind>
			message_counter--;
     774:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <message_counter>
     778:	81 50       	subi	r24, 0x01	; 1
     77a:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <message_counter>
			message_buf_ind++;
     77e:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <message_buf_ind>
     782:	8f 5f       	subi	r24, 0xFF	; 255
     784:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <message_buf_ind>
		}
		strcpy((char*)(message_buf)[message_buf_ind++], msg);
     788:	90 91 64 01 	lds	r25, 0x0164	; 0x800164 <message_buf_ind>
     78c:	81 e0       	ldi	r24, 0x01	; 1
     78e:	89 0f       	add	r24, r25
     790:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <message_buf_ind>
     794:	20 e1       	ldi	r18, 0x10	; 16
     796:	92 9f       	mul	r25, r18
     798:	c0 01       	movw	r24, r0
     79a:	11 24       	eor	r1, r1
     79c:	be 01       	movw	r22, r28
     79e:	83 59       	subi	r24, 0x93	; 147
     7a0:	9e 4f       	sbci	r25, 0xFE	; 254
     7a2:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <strcpy>
		if(++message_counter > 5) message_counter = 5;
     7a6:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <message_counter>
     7aa:	8f 5f       	subi	r24, 0xFF	; 255
     7ac:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <message_counter>
     7b0:	86 30       	cpi	r24, 0x06	; 6
     7b2:	18 f0       	brcs	.+6      	; 0x7ba <queue_message+0x88>
     7b4:	85 e0       	ldi	r24, 0x05	; 5
     7b6:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <message_counter>
		if(message_buf_ind > 4) message_buf_ind = 0;
     7ba:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <message_buf_ind>
     7be:	85 30       	cpi	r24, 0x05	; 5
     7c0:	10 f0       	brcs	.+4      	; 0x7c6 <queue_message+0x94>
     7c2:	10 92 64 01 	sts	0x0164, r1	; 0x800164 <message_buf_ind>
	}
}
     7c6:	df 91       	pop	r29
     7c8:	cf 91       	pop	r28
     7ca:	08 95       	ret

000007cc <perform_command>:
void clear_heart(){
	LED_PORT &= ~(1<<LEDR2);
}

void perform_command(uint8_t topic, uint8_t command, volatile uint8_t* args){
	switch(topic){
     7cc:	81 33       	cpi	r24, 0x31	; 49
     7ce:	19 f0       	breq	.+6      	; 0x7d6 <perform_command+0xa>
     7d0:	82 33       	cpi	r24, 0x32	; 50
     7d2:	c1 f0       	breq	.+48     	; 0x804 <__DATA_REGION_LENGTH__+0x4>
     7d4:	08 95       	ret
		case '1': //From car
			switch(command){
     7d6:	61 33       	cpi	r22, 0x31	; 49
     7d8:	41 f0       	breq	.+16     	; 0x7ea <perform_command+0x1e>
     7da:	62 33       	cpi	r22, 0x32	; 50
     7dc:	79 f0       	breq	.+30     	; 0x7fc <perform_command+0x30>
     7de:	60 33       	cpi	r22, 0x30	; 48
     7e0:	01 f5       	brne	.+64     	; 0x822 <__DATA_REGION_LENGTH__+0x22>
	sei();
}

void queue_message(char* msg, bool urgent){
	if(urgent){
		force_message(msg);
     7e2:	8f e3       	ldi	r24, 0x3F	; 63
     7e4:	91 e0       	ldi	r25, 0x01	; 1
     7e6:	0c 94 81 03 	jmp	0x702	; 0x702 <force_message>
     7ea:	ba 01       	movw	r22, r20
			switch(command){
				case '0':
					queue_message("Stopp!", true);
					break;
				case '1':
					strcpy((char*)sensor_buf, (char*)args);
     7ec:	85 ee       	ldi	r24, 0xE5	; 229
     7ee:	91 e0       	ldi	r25, 0x01	; 1
     7f0:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <strcpy>
					sensors_received = true;
     7f4:	81 e0       	ldi	r24, 0x01	; 1
     7f6:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <__data_end>
     7fa:	08 95       	ret
					break;
				case '2':
					queue_message("PONG", false);
     7fc:	60 e0       	ldi	r22, 0x00	; 0
     7fe:	86 e4       	ldi	r24, 0x46	; 70
     800:	91 e0       	ldi	r25, 0x01	; 1
     802:	0a c0       	rjmp	.+20     	; 0x818 <__DATA_REGION_LENGTH__+0x18>
			}
			break;
		case '2': //To remote
			switch(command){
     804:	61 33       	cpi	r22, 0x31	; 49
     806:	31 f0       	breq	.+12     	; 0x814 <__DATA_REGION_LENGTH__+0x14>
     808:	62 33       	cpi	r22, 0x32	; 50
     80a:	41 f0       	breq	.+16     	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
     80c:	60 33       	cpi	r22, 0x30	; 48
     80e:	49 f4       	brne	.+18     	; 0x822 <__DATA_REGION_LENGTH__+0x22>
				case '0':
					clear_heart();
     810:	0c 94 7f 03 	jmp	0x6fe	; 0x6fe <clear_heart>
					break;
				case '1':
					queue_message((char*)args, false);
     814:	60 e0       	ldi	r22, 0x00	; 0
     816:	ca 01       	movw	r24, r20
     818:	0c 94 99 03 	jmp	0x732	; 0x732 <queue_message>
					break;
				case '2':
					Summer_PlayMelody(MELODY_HONK);
     81c:	80 e0       	ldi	r24, 0x00	; 0
     81e:	0c 94 94 07 	jmp	0xf28	; 0xf28 <Summer_PlayMelody>
     822:	08 95       	ret

00000824 <display_next_message>:
		if(message_buf_ind > 4) message_buf_ind = 0;
	}
}

void display_next_message(){
	if(message_counter > 0){
     824:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <message_counter>
     828:	88 23       	and	r24, r24
     82a:	f9 f0       	breq	.+62     	; 0x86a <display_next_message+0x46>
		set_cursor_pos(32);
     82c:	80 e2       	ldi	r24, 0x20	; 32
     82e:	0e 94 91 06 	call	0xd22	; 0xd22 <set_cursor_pos>
		write_lcd_string((char*)(message_buf)[message_disp_ind++]);
     832:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <message_disp_ind>
     836:	91 e0       	ldi	r25, 0x01	; 1
     838:	98 0f       	add	r25, r24
     83a:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <message_disp_ind>
     83e:	20 e1       	ldi	r18, 0x10	; 16
     840:	82 9f       	mul	r24, r18
     842:	c0 01       	movw	r24, r0
     844:	11 24       	eor	r1, r1
     846:	83 59       	subi	r24, 0x93	; 147
     848:	9e 4f       	sbci	r25, 0xFE	; 254
     84a:	0e 94 76 06 	call	0xcec	; 0xcec <write_lcd_string>
		message_displaying = true;
     84e:	81 e0       	ldi	r24, 0x01	; 1
     850:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <message_displaying>
		if(message_disp_ind > 4) message_disp_ind = 0;
     854:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <message_disp_ind>
     858:	85 30       	cpi	r24, 0x05	; 5
     85a:	10 f0       	brcs	.+4      	; 0x860 <display_next_message+0x3c>
     85c:	10 92 63 01 	sts	0x0163, r1	; 0x800163 <message_disp_ind>
		message_counter--;	
     860:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <message_counter>
     864:	81 50       	subi	r24, 0x01	; 1
     866:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <message_counter>
     86a:	08 95       	ret

0000086c <display_sensors>:
	}
}

void display_sensors(){
     86c:	cf 93       	push	r28
     86e:	df 93       	push	r29
	char* args = (char*)sensor_buf;
	uint8_t b = 0;
     870:	80 e0       	ldi	r24, 0x00	; 0
	while(args[++b] != ' ');
     872:	91 e0       	ldi	r25, 0x01	; 1
     874:	98 0f       	add	r25, r24
     876:	e9 2f       	mov	r30, r25
     878:	f0 e0       	ldi	r31, 0x00	; 0
     87a:	eb 51       	subi	r30, 0x1B	; 27
     87c:	fe 4f       	sbci	r31, 0xFE	; 254
     87e:	20 81       	ld	r18, Z
     880:	20 32       	cpi	r18, 0x20	; 32
     882:	11 f0       	breq	.+4      	; 0x888 <display_sensors+0x1c>
     884:	89 2f       	mov	r24, r25
     886:	f5 cf       	rjmp	.-22     	; 0x872 <display_sensors+0x6>
	args[b++] = '\0';
     888:	d2 e0       	ldi	r29, 0x02	; 2
     88a:	d8 0f       	add	r29, r24
     88c:	10 82       	st	Z, r1
	uint8_t k = b;
     88e:	cd 2f       	mov	r28, r29
	while(args[++k] != ' ');
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	8c 0f       	add	r24, r28
     894:	e8 2f       	mov	r30, r24
     896:	f0 e0       	ldi	r31, 0x00	; 0
     898:	eb 51       	subi	r30, 0x1B	; 27
     89a:	fe 4f       	sbci	r31, 0xFE	; 254
     89c:	90 81       	ld	r25, Z
     89e:	90 32       	cpi	r25, 0x20	; 32
     8a0:	11 f0       	breq	.+4      	; 0x8a6 <display_sensors+0x3a>
     8a2:	c8 2f       	mov	r28, r24
     8a4:	f5 cf       	rjmp	.-22     	; 0x890 <display_sensors+0x24>
	args[k++] = '\0';
     8a6:	10 82       	st	Z, r1
	set_cursor_pos(FRONT_POS);
     8a8:	86 e0       	ldi	r24, 0x06	; 6
     8aa:	0e 94 91 06 	call	0xd22	; 0xd22 <set_cursor_pos>
	write_lcd_string(args);
     8ae:	85 ee       	ldi	r24, 0xE5	; 229
     8b0:	91 e0       	ldi	r25, 0x01	; 1
     8b2:	0e 94 76 06 	call	0xcec	; 0xcec <write_lcd_string>
	set_cursor_pos(BACK_POS);
     8b6:	85 e1       	ldi	r24, 0x15	; 21
     8b8:	0e 94 91 06 	call	0xd22	; 0xd22 <set_cursor_pos>
	write_lcd_string(args+b);
     8bc:	8d 2f       	mov	r24, r29
     8be:	90 e0       	ldi	r25, 0x00	; 0
     8c0:	8b 51       	subi	r24, 0x1B	; 27
     8c2:	9e 4f       	sbci	r25, 0xFE	; 254
     8c4:	0e 94 76 06 	call	0xcec	; 0xcec <write_lcd_string>
	set_cursor_pos(CR_POS);
     8c8:	8f e1       	ldi	r24, 0x1F	; 31
     8ca:	0e 94 91 06 	call	0xd22	; 0xd22 <set_cursor_pos>
	write_lcd_char((args[k] == '0') ? 'R' : '_');
     8ce:	ce 5f       	subi	r28, 0xFE	; 254
     8d0:	d0 e0       	ldi	r29, 0x00	; 0
     8d2:	fe 01       	movw	r30, r28
     8d4:	eb 51       	subi	r30, 0x1B	; 27
     8d6:	fe 4f       	sbci	r31, 0xFE	; 254
     8d8:	80 81       	ld	r24, Z
     8da:	80 33       	cpi	r24, 0x30	; 48
     8dc:	11 f0       	breq	.+4      	; 0x8e2 <display_sensors+0x76>
     8de:	8f e5       	ldi	r24, 0x5F	; 95
     8e0:	01 c0       	rjmp	.+2      	; 0x8e4 <display_sensors+0x78>
     8e2:	82 e5       	ldi	r24, 0x52	; 82
     8e4:	0e 94 6d 06 	call	0xcda	; 0xcda <write_lcd_char>
	set_cursor_pos(CL_POS);
     8e8:	8e e1       	ldi	r24, 0x1E	; 30
     8ea:	0e 94 91 06 	call	0xd22	; 0xd22 <set_cursor_pos>
	write_lcd_char((args[k+1] == '0') ? 'L' : '_');
     8ee:	fe 01       	movw	r30, r28
     8f0:	ea 51       	subi	r30, 0x1A	; 26
     8f2:	fe 4f       	sbci	r31, 0xFE	; 254
     8f4:	80 81       	ld	r24, Z
     8f6:	80 33       	cpi	r24, 0x30	; 48
     8f8:	11 f0       	breq	.+4      	; 0x8fe <display_sensors+0x92>
     8fa:	8f e5       	ldi	r24, 0x5F	; 95
     8fc:	01 c0       	rjmp	.+2      	; 0x900 <__stack+0x1>
     8fe:	8c e4       	ldi	r24, 0x4C	; 76
     900:	0e 94 6d 06 	call	0xcda	; 0xcda <write_lcd_char>
	set_cursor_pos(PIR_POS);
     904:	8f e0       	ldi	r24, 0x0F	; 15
     906:	0e 94 91 06 	call	0xd22	; 0xd22 <set_cursor_pos>
	write_lcd_char((args[k+3] == '0') ? 'X' : '_');
     90a:	c8 51       	subi	r28, 0x18	; 24
     90c:	de 4f       	sbci	r29, 0xFE	; 254
     90e:	88 81       	ld	r24, Y
     910:	80 33       	cpi	r24, 0x30	; 48
     912:	11 f0       	breq	.+4      	; 0x918 <__stack+0x19>
     914:	8f e5       	ldi	r24, 0x5F	; 95
     916:	01 c0       	rjmp	.+2      	; 0x91a <__stack+0x1b>
     918:	88 e5       	ldi	r24, 0x58	; 88
}
     91a:	df 91       	pop	r29
     91c:	cf 91       	pop	r28
	set_cursor_pos(CR_POS);
	write_lcd_char((args[k] == '0') ? 'R' : '_');
	set_cursor_pos(CL_POS);
	write_lcd_char((args[k+1] == '0') ? 'L' : '_');
	set_cursor_pos(PIR_POS);
	write_lcd_char((args[k+3] == '0') ? 'X' : '_');
     91e:	0c 94 6d 06 	jmp	0xcda	; 0xcda <write_lcd_char>

00000922 <__vector_18>:
}

ISR(USART_RX_vect){
     922:	1f 92       	push	r1
     924:	0f 92       	push	r0
     926:	0f b6       	in	r0, 0x3f	; 63
     928:	0f 92       	push	r0
     92a:	11 24       	eor	r1, r1
     92c:	2f 93       	push	r18
     92e:	3f 93       	push	r19
     930:	4f 93       	push	r20
     932:	5f 93       	push	r21
     934:	6f 93       	push	r22
     936:	7f 93       	push	r23
     938:	8f 93       	push	r24
     93a:	9f 93       	push	r25
     93c:	af 93       	push	r26
     93e:	bf 93       	push	r27
     940:	ef 93       	push	r30
     942:	ff 93       	push	r31
	uart_linebuf[uart_bufind] = UDR0;
     944:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <uart_bufind>
     948:	f0 e0       	ldi	r31, 0x00	; 0
     94a:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     94e:	e3 54       	subi	r30, 0x43	; 67
     950:	fe 4f       	sbci	r31, 0xFE	; 254
     952:	80 83       	st	Z, r24
	if(uart_linebuf[uart_bufind] == '\n'){
     954:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <uart_bufind>
     958:	f0 e0       	ldi	r31, 0x00	; 0
     95a:	e3 54       	subi	r30, 0x43	; 67
     95c:	fe 4f       	sbci	r31, 0xFE	; 254
     95e:	80 81       	ld	r24, Z
     960:	8a 30       	cpi	r24, 0x0A	; 10
     962:	89 f4       	brne	.+34     	; 0x986 <__vector_18+0x64>
		uart_linebuf[uart_bufind] = '\0';
     964:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <uart_bufind>
     968:	f0 e0       	ldi	r31, 0x00	; 0
     96a:	e3 54       	subi	r30, 0x43	; 67
     96c:	fe 4f       	sbci	r31, 0xFE	; 254
     96e:	10 82       	st	Z, r1
		//Do something
		perform_command(uart_linebuf[0], uart_linebuf[1], uart_linebuf+2);
     970:	60 91 be 01 	lds	r22, 0x01BE	; 0x8001be <uart_linebuf+0x1>
     974:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <uart_linebuf>
     978:	4f eb       	ldi	r20, 0xBF	; 191
     97a:	51 e0       	ldi	r21, 0x01	; 1
     97c:	0e 94 e6 03 	call	0x7cc	; 0x7cc <perform_command>
		//Done something
		uart_bufind = 0;
     980:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <uart_bufind>
     984:	05 c0       	rjmp	.+10     	; 0x990 <__vector_18+0x6e>
	} else{
		uart_bufind++;
     986:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <uart_bufind>
     98a:	8f 5f       	subi	r24, 0xFF	; 255
     98c:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <uart_bufind>
	}
}
     990:	ff 91       	pop	r31
     992:	ef 91       	pop	r30
     994:	bf 91       	pop	r27
     996:	af 91       	pop	r26
     998:	9f 91       	pop	r25
     99a:	8f 91       	pop	r24
     99c:	7f 91       	pop	r23
     99e:	6f 91       	pop	r22
     9a0:	5f 91       	pop	r21
     9a2:	4f 91       	pop	r20
     9a4:	3f 91       	pop	r19
     9a6:	2f 91       	pop	r18
     9a8:	0f 90       	pop	r0
     9aa:	0f be       	out	0x3f, r0	; 63
     9ac:	0f 90       	pop	r0
     9ae:	1f 90       	pop	r1
     9b0:	18 95       	reti

000009b2 <btn_init>:

void btn_init(){
	BTN_DDR &= ~((1<<HONKBTN)|(1<<DEADMANBTN)|(1<<EXTRABTN));
     9b2:	8a b1       	in	r24, 0x0a	; 10
     9b4:	83 7e       	andi	r24, 0xE3	; 227
     9b6:	8a b9       	out	0x0a, r24	; 10
	BTN_PORT |= (1<<HONKBTN)|(1<<DEADMANBTN)|(1<<EXTRABTN);
     9b8:	8b b1       	in	r24, 0x0b	; 11
     9ba:	8c 61       	ori	r24, 0x1C	; 28
     9bc:	8b b9       	out	0x0b, r24	; 11
	EICRA = (2<<ISC00)|(2<<ISC10);
     9be:	8a e0       	ldi	r24, 0x0A	; 10
     9c0:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
	EIMSK = 3;
     9c4:	83 e0       	ldi	r24, 0x03	; 3
     9c6:	8d bb       	out	0x1d, r24	; 29
     9c8:	08 95       	ret

000009ca <__vector_1>:
}

//Extra
ISR(INT0_vect){
     9ca:	1f 92       	push	r1
     9cc:	0f 92       	push	r0
     9ce:	0f b6       	in	r0, 0x3f	; 63
     9d0:	0f 92       	push	r0
     9d2:	11 24       	eor	r1, r1
}
     9d4:	0f 90       	pop	r0
     9d6:	0f be       	out	0x3f, r0	; 63
     9d8:	0f 90       	pop	r0
     9da:	1f 90       	pop	r1
     9dc:	18 95       	reti

000009de <__vector_2>:

//Honk
ISR(INT1_vect){
     9de:	1f 92       	push	r1
     9e0:	0f 92       	push	r0
     9e2:	0f b6       	in	r0, 0x3f	; 63
     9e4:	0f 92       	push	r0
     9e6:	11 24       	eor	r1, r1
     9e8:	2f 93       	push	r18
     9ea:	3f 93       	push	r19
     9ec:	4f 93       	push	r20
     9ee:	5f 93       	push	r21
     9f0:	6f 93       	push	r22
     9f2:	7f 93       	push	r23
     9f4:	8f 93       	push	r24
     9f6:	9f 93       	push	r25
     9f8:	af 93       	push	r26
     9fa:	bf 93       	push	r27
     9fc:	ef 93       	push	r30
     9fe:	ff 93       	push	r31
	if(!(BTN_PIN & 1<<DEADMANBTN)){
     a00:	4c 99       	sbic	0x09, 4	; 9
     a02:	03 c0       	rjmp	.+6      	; 0xa0a <__vector_2+0x2c>
		uart_send_line("02m");
     a04:	8b e4       	ldi	r24, 0x4B	; 75
     a06:	91 e0       	ldi	r25, 0x01	; 1
     a08:	02 c0       	rjmp	.+4      	; 0xa0e <__vector_2+0x30>
	} else{
		uart_send_line("32");
     a0a:	8f e4       	ldi	r24, 0x4F	; 79
     a0c:	91 e0       	ldi	r25, 0x01	; 1
     a0e:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <uart_send_line>
	}
}
     a12:	ff 91       	pop	r31
     a14:	ef 91       	pop	r30
     a16:	bf 91       	pop	r27
     a18:	af 91       	pop	r26
     a1a:	9f 91       	pop	r25
     a1c:	8f 91       	pop	r24
     a1e:	7f 91       	pop	r23
     a20:	6f 91       	pop	r22
     a22:	5f 91       	pop	r21
     a24:	4f 91       	pop	r20
     a26:	3f 91       	pop	r19
     a28:	2f 91       	pop	r18
     a2a:	0f 90       	pop	r0
     a2c:	0f be       	out	0x3f, r0	; 63
     a2e:	0f 90       	pop	r0
     a30:	1f 90       	pop	r1
     a32:	18 95       	reti

00000a34 <led_init>:

void led_init(){
	LED_DDR |= (1<<LEDG)|(1<<LEDR1)|(1<<LEDR2);
     a34:	8a b1       	in	r24, 0x0a	; 10
     a36:	80 6e       	ori	r24, 0xE0	; 224
     a38:	8a b9       	out	0x0a, r24	; 10
	LED_PORT &= ~((1<<LEDG)|(1<<LEDR1));
     a3a:	8b b1       	in	r24, 0x0b	; 11
     a3c:	8f 79       	andi	r24, 0x9F	; 159
     a3e:	8b b9       	out	0x0b, r24	; 11
	LED_PORT |= 1<<LEDR2;
     a40:	5f 9a       	sbi	0x0b, 7	; 11
     a42:	08 95       	ret

00000a44 <main>:
volatile char sensor_buf[16];
volatile bool sensors_received = false;


int main(void)
{
     a44:	cf 93       	push	r28
     a46:	df 93       	push	r29
     a48:	cd b7       	in	r28, 0x3d	; 61
     a4a:	de b7       	in	r29, 0x3e	; 62
     a4c:	2f 97       	sbiw	r28, 0x0f	; 15
     a4e:	0f b6       	in	r0, 0x3f	; 63
     a50:	f8 94       	cli
     a52:	de bf       	out	0x3e, r29	; 62
     a54:	0f be       	out	0x3f, r0	; 63
     a56:	cd bf       	out	0x3d, r28	; 61
	int16_t last_x = 0;
	int16_t last_y = 0;
	char itoabuf[15] = "03";
     a58:	83 e0       	ldi	r24, 0x03	; 3
     a5a:	ee e0       	ldi	r30, 0x0E	; 14
     a5c:	f1 e0       	ldi	r31, 0x01	; 1
     a5e:	9e 01       	movw	r18, r28
     a60:	2f 5f       	subi	r18, 0xFF	; 255
     a62:	3f 4f       	sbci	r19, 0xFF	; 255
     a64:	69 01       	movw	r12, r18
     a66:	d9 01       	movw	r26, r18
     a68:	01 90       	ld	r0, Z+
     a6a:	0d 92       	st	X+, r0
     a6c:	8a 95       	dec	r24
     a6e:	e1 f7       	brne	.-8      	; 0xa68 <main+0x24>
     a70:	fe 01       	movw	r30, r28
     a72:	34 96       	adiw	r30, 0x04	; 4
     a74:	8c e0       	ldi	r24, 0x0C	; 12
     a76:	df 01       	movw	r26, r30
     a78:	1d 92       	st	X+, r1
     a7a:	8a 95       	dec	r24
     a7c:	e9 f7       	brne	.-6      	; 0xa78 <main+0x34>
	
	spi_init();
     a7e:	0e 94 b2 06 	call	0xd64	; 0xd64 <spi_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a82:	bf ef       	ldi	r27, 0xFF	; 255
     a84:	e0 e7       	ldi	r30, 0x70	; 112
     a86:	f2 e0       	ldi	r31, 0x02	; 2
     a88:	b1 50       	subi	r27, 0x01	; 1
     a8a:	e0 40       	sbci	r30, 0x00	; 0
     a8c:	f0 40       	sbci	r31, 0x00	; 0
     a8e:	e1 f7       	brne	.-8      	; 0xa88 <main+0x44>
     a90:	00 c0       	rjmp	.+0      	; 0xa92 <main+0x4e>
     a92:	00 00       	nop
	_delay_ms(100);
	lcd_init();
     a94:	0e 94 51 06 	call	0xca2	; 0xca2 <lcd_init>
	adc_init();
     a98:	0e 94 1f 06 	call	0xc3e	; 0xc3e <adc_init>
	uart_init();
     a9c:	0e 94 14 06 	call	0xc28	; 0xc28 <uart_init>
	uart_flush();
     aa0:	0e 94 0c 06 	call	0xc18	; 0xc18 <uart_flush>
	led_init();
     aa4:	0e 94 1a 05 	call	0xa34	; 0xa34 <led_init>
	btn_init();
     aa8:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <btn_init>
	Summer_Init();
     aac:	0e 94 8c 07 	call	0xf18	; 0xf18 <Summer_Init>
	timer_init();
     ab0:	0e 94 73 03 	call	0x6e6	; 0x6e6 <timer_init>
	print_lcd_static();
     ab4:	0e 94 1e 03 	call	0x63c	; 0x63c <print_lcd_static>
	stdout = &uartstdout;
     ab8:	80 e0       	ldi	r24, 0x00	; 0
     aba:	91 e0       	ldi	r25, 0x01	; 1
     abc:	90 93 f8 01 	sts	0x01F8, r25	; 0x8001f8 <__iob+0x3>
     ac0:	80 93 f7 01 	sts	0x01F7, r24	; 0x8001f7 <__iob+0x2>
	sei();
     ac4:	78 94       	sei


int main(void)
{
	int16_t last_x = 0;
	int16_t last_y = 0;
     ac6:	81 2c       	mov	r8, r1
     ac8:	91 2c       	mov	r9, r1
volatile bool sensors_received = false;


int main(void)
{
	int16_t last_x = 0;
     aca:	a1 2c       	mov	r10, r1
     acc:	b1 2c       	mov	r11, r1
		if(!(BTN_PIN & 1<<DEADMANBTN)){
			if(!(LED_PORT & (1<<LEDG))){
				uart_send_line("041");
				LED_PORT |= 1<<LEDG;
			}
			int16_t adjusted_x = 511 - read_avg_adc(1, 25);
     ace:	44 24       	eor	r4, r4
     ad0:	4a 94       	dec	r4
     ad2:	55 24       	eor	r5, r5
     ad4:	53 94       	inc	r5
			int16_t adjusted_y = 507 - read_avg_adc(2, 25); 
     ad6:	2b ef       	ldi	r18, 0xFB	; 251
     ad8:	62 2e       	mov	r6, r18
     ada:	77 24       	eor	r7, r7
     adc:	73 94       	inc	r7
			}
			else if(adjusted_y < -127) adjusted_y = -127;
			if(adjusted_x != last_x || adjusted_y != last_y){
				itoa(adjusted_x-adjusted_y, itoabuf+2, 10);
				uint8_t len = strlen(itoabuf);
				itoabuf[len++] = ' ';
     ade:	30 e2       	ldi	r19, 0x20	; 32
     ae0:	33 2e       	mov	r3, r19
	stdout = &uartstdout;
	sei();
  
    while (1) 
    {
		if(!message_displaying) display_next_message();
     ae2:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <message_displaying>
     ae6:	81 11       	cpse	r24, r1
     ae8:	02 c0       	rjmp	.+4      	; 0xaee <main+0xaa>
     aea:	0e 94 12 04 	call	0x824	; 0x824 <display_next_message>
		if(sensors_received){
     aee:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <__data_end>
     af2:	88 23       	and	r24, r24
     af4:	21 f0       	breq	.+8      	; 0xafe <main+0xba>
			 display_sensors();
     af6:	0e 94 36 04 	call	0x86c	; 0x86c <display_sensors>
			 sensors_received = false;
     afa:	10 92 60 01 	sts	0x0160, r1	; 0x800160 <__data_end>
		}
		if(!(BTN_PIN & 1<<DEADMANBTN)){
     afe:	4c 99       	sbic	0x09, 4	; 9
     b00:	60 c0       	rjmp	.+192    	; 0xbc2 <main+0x17e>
			if(!(LED_PORT & (1<<LEDG))){
     b02:	5d 99       	sbic	0x0b, 5	; 11
     b04:	05 c0       	rjmp	.+10     	; 0xb10 <main+0xcc>
				uart_send_line("041");
     b06:	82 e5       	ldi	r24, 0x52	; 82
     b08:	91 e0       	ldi	r25, 0x01	; 1
     b0a:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <uart_send_line>
				LED_PORT |= 1<<LEDG;
     b0e:	5d 9a       	sbi	0x0b, 5	; 11
			}
			int16_t adjusted_x = 511 - read_avg_adc(1, 25);
     b10:	69 e1       	ldi	r22, 0x19	; 25
     b12:	70 e0       	ldi	r23, 0x00	; 0
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	0e 94 2b 06 	call	0xc56	; 0xc56 <read_avg_adc>
     b1a:	82 01       	movw	r16, r4
     b1c:	08 1b       	sub	r16, r24
     b1e:	19 0b       	sbc	r17, r25
			int16_t adjusted_y = 507 - read_avg_adc(2, 25); 
     b20:	69 e1       	ldi	r22, 0x19	; 25
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	82 e0       	ldi	r24, 0x02	; 2
     b26:	0e 94 2b 06 	call	0xc56	; 0xc56 <read_avg_adc>
     b2a:	73 01       	movw	r14, r6
     b2c:	e8 1a       	sub	r14, r24
     b2e:	f9 0a       	sbc	r15, r25
     b30:	01 38       	cpi	r16, 0x81	; 129
     b32:	2f ef       	ldi	r18, 0xFF	; 255
     b34:	12 07       	cpc	r17, r18
     b36:	14 f4       	brge	.+4      	; 0xb3c <main+0xf8>
     b38:	01 e8       	ldi	r16, 0x81	; 129
     b3a:	1f ef       	ldi	r17, 0xFF	; 255
     b3c:	00 38       	cpi	r16, 0x80	; 128
     b3e:	11 05       	cpc	r17, r1
     b40:	14 f0       	brlt	.+4      	; 0xb46 <main+0x102>
     b42:	0f e7       	ldi	r16, 0x7F	; 127
     b44:	10 e0       	ldi	r17, 0x00	; 0
     b46:	c7 01       	movw	r24, r14
     b48:	31 e8       	ldi	r19, 0x81	; 129
     b4a:	e3 16       	cp	r14, r19
     b4c:	3f ef       	ldi	r19, 0xFF	; 255
     b4e:	f3 06       	cpc	r15, r19
     b50:	14 f4       	brge	.+4      	; 0xb56 <main+0x112>
     b52:	81 e8       	ldi	r24, 0x81	; 129
     b54:	9f ef       	ldi	r25, 0xFF	; 255
     b56:	7c 01       	movw	r14, r24
     b58:	80 e8       	ldi	r24, 0x80	; 128
     b5a:	e8 16       	cp	r14, r24
     b5c:	f1 04       	cpc	r15, r1
     b5e:	1c f0       	brlt	.+6      	; 0xb66 <main+0x122>
     b60:	8f e7       	ldi	r24, 0x7F	; 127
     b62:	e8 2e       	mov	r14, r24
     b64:	f1 2c       	mov	r15, r1
			else if(adjusted_x < -127) adjusted_x = -127;
			if(adjusted_y > 127) {
				adjusted_y = 127;
			}
			else if(adjusted_y < -127) adjusted_y = -127;
			if(adjusted_x != last_x || adjusted_y != last_y){
     b66:	a0 16       	cp	r10, r16
     b68:	b1 06       	cpc	r11, r17
     b6a:	19 f4       	brne	.+6      	; 0xb72 <main+0x12e>
     b6c:	8e 14       	cp	r8, r14
     b6e:	9f 04       	cpc	r9, r15
     b70:	79 f1       	breq	.+94     	; 0xbd0 <main+0x18c>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     b72:	4a e0       	ldi	r20, 0x0A	; 10
     b74:	be 01       	movw	r22, r28
     b76:	6d 5f       	subi	r22, 0xFD	; 253
     b78:	7f 4f       	sbci	r23, 0xFF	; 255
     b7a:	c8 01       	movw	r24, r16
     b7c:	8e 19       	sub	r24, r14
     b7e:	9f 09       	sbc	r25, r15
     b80:	0e 94 80 0b 	call	0x1700	; 0x1700 <__itoa_ncheck>
				itoa(adjusted_x-adjusted_y, itoabuf+2, 10);
				uint8_t len = strlen(itoabuf);
     b84:	f6 01       	movw	r30, r12
     b86:	01 90       	ld	r0, Z+
     b88:	00 20       	and	r0, r0
     b8a:	e9 f7       	brne	.-6      	; 0xb86 <main+0x142>
     b8c:	31 97       	sbiw	r30, 0x01	; 1
     b8e:	ec 19       	sub	r30, r12
     b90:	fd 09       	sbc	r31, r13
				itoabuf[len++] = ' ';
     b92:	81 e0       	ldi	r24, 0x01	; 1
     b94:	8e 0f       	add	r24, r30
     b96:	d6 01       	movw	r26, r12
     b98:	ae 0f       	add	r26, r30
     b9a:	b1 1d       	adc	r27, r1
     b9c:	fd 01       	movw	r30, r26
     b9e:	30 82       	st	Z, r3
				itoabuf[len] = '\0';
     ba0:	b6 01       	movw	r22, r12
     ba2:	68 0f       	add	r22, r24
     ba4:	71 1d       	adc	r23, r1
     ba6:	fb 01       	movw	r30, r22
     ba8:	10 82       	st	Z, r1
     baa:	4a e0       	ldi	r20, 0x0A	; 10
     bac:	c7 01       	movw	r24, r14
     bae:	80 0f       	add	r24, r16
     bb0:	91 1f       	adc	r25, r17
     bb2:	0e 94 80 0b 	call	0x1700	; 0x1700 <__itoa_ncheck>
				itoa(adjusted_x+adjusted_y, itoabuf+len, 10);
				uart_send_line(itoabuf);
     bb6:	c6 01       	movw	r24, r12
     bb8:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <uart_send_line>
     bbc:	47 01       	movw	r8, r14
     bbe:	58 01       	movw	r10, r16
     bc0:	07 c0       	rjmp	.+14     	; 0xbd0 <main+0x18c>
			}
			last_x = adjusted_x;
			last_y = adjusted_y;
		} else{
			if(LED_PORT & (1<<LEDG)){
     bc2:	5d 9b       	sbis	0x0b, 5	; 11
     bc4:	05 c0       	rjmp	.+10     	; 0xbd0 <main+0x18c>
				uart_send_line("040");
     bc6:	86 e5       	ldi	r24, 0x56	; 86
     bc8:	91 e0       	ldi	r25, 0x01	; 1
     bca:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <uart_send_line>
				LED_PORT &= ~(1<<LEDG);
     bce:	5d 98       	cbi	0x0b, 5	; 11
     bd0:	ff ef       	ldi	r31, 0xFF	; 255
     bd2:	20 e7       	ldi	r18, 0x70	; 112
     bd4:	32 e0       	ldi	r19, 0x02	; 2
     bd6:	f1 50       	subi	r31, 0x01	; 1
     bd8:	20 40       	sbci	r18, 0x00	; 0
     bda:	30 40       	sbci	r19, 0x00	; 0
     bdc:	e1 f7       	brne	.-8      	; 0xbd6 <main+0x192>
     bde:	00 c0       	rjmp	.+0      	; 0xbe0 <main+0x19c>
     be0:	00 00       	nop
     be2:	7f cf       	rjmp	.-258    	; 0xae2 <main+0x9e>

00000be4 <uart_send_byte>:

bool uart_receive_byte(uint8_t* buffer){
	if(!( UCSR0A & (1<<RXC0))) return false;
	*buffer = UDR0;
	return true;
}
     be4:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     be8:	95 ff       	sbrs	r25, 5
     bea:	fc cf       	rjmp	.-8      	; 0xbe4 <uart_send_byte>
     bec:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     bf0:	08 95       	ret

00000bf2 <uart_send_line>:
     bf2:	fc 01       	movw	r30, r24
     bf4:	91 91       	ld	r25, Z+
     bf6:	99 23       	and	r25, r25
     bf8:	39 f0       	breq	.+14     	; 0xc08 <uart_send_line+0x16>
     bfa:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     bfe:	85 ff       	sbrs	r24, 5
     c00:	fc cf       	rjmp	.-8      	; 0xbfa <uart_send_line+0x8>
     c02:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     c06:	f6 cf       	rjmp	.-20     	; 0xbf4 <uart_send_line+0x2>
     c08:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     c0c:	85 ff       	sbrs	r24, 5
     c0e:	fc cf       	rjmp	.-8      	; 0xc08 <uart_send_line+0x16>
     c10:	8a e0       	ldi	r24, 0x0A	; 10
     c12:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     c16:	08 95       	ret

00000c18 <uart_flush>:

void uart_flush(){
	uint8_t dummy;
	while ( UCSR0A & (1<<RXC0) ) dummy = UDR0;
     c18:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     c1c:	87 ff       	sbrs	r24, 7
     c1e:	03 c0       	rjmp	.+6      	; 0xc26 <uart_flush+0xe>
     c20:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     c24:	f9 cf       	rjmp	.-14     	; 0xc18 <uart_flush>
}
     c26:	08 95       	ret

00000c28 <uart_init>:

void uart_init(){
	UBRR0 = 0;		//0==500000 baud rate.  12==38400 baud rate
     c28:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
     c2c:	10 92 c4 00 	sts	0x00C4, r1	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UCSR0B = (1<<RXEN0)|(1<<TXEN0)|(1<<RXCIE0);
     c30:	88 e9       	ldi	r24, 0x98	; 152
     c32:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	/* Set frame format: 8data, 1stop bit */
	UCSR0C = (0<<USBS0)|(3<<UCSZ00);
     c36:	86 e0       	ldi	r24, 0x06	; 6
     c38:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
     c3c:	08 95       	ret

00000c3e <adc_init>:
	//Start conversion
	ADCSRA |= 1<<ADSC;
	//Wait for completion and return result
	while( ADCSRA & 1<<ADSC);
	return ADC;
}
     c3e:	87 b1       	in	r24, 0x07	; 7
     c40:	88 7f       	andi	r24, 0xF8	; 248
     c42:	87 b9       	out	0x07, r24	; 7
     c44:	86 e8       	ldi	r24, 0x86	; 134
     c46:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     c4a:	88 e3       	ldi	r24, 0x38	; 56
     c4c:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7f807e>
     c50:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
     c54:	08 95       	ret

00000c56 <read_avg_adc>:
/* the average ADC-value from ADCH and ADCL	from the given amount		*/
/* of iterations														*/
/* @param port The port to read from (0-3)								*/
/* @param iterations The amount of iterations to take average from		*/
/************************************************************************/
uint16_t read_avg_adc(uint8_t port, uint16_t iterations){
     c56:	9b 01       	movw	r18, r22
	//Choose port and reference voltage
	ADMUX = port|(1<<REFS0);
     c58:	80 64       	ori	r24, 0x40	; 64
     c5a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	uint32_t sum = 0;
	//Start given amount of conversions and add up results
	for (uint8_t i = 0; i < iterations; i++){
     c5e:	40 e0       	ldi	r20, 0x00	; 0
/* @param iterations The amount of iterations to take average from		*/
/************************************************************************/
uint16_t read_avg_adc(uint8_t port, uint16_t iterations){
	//Choose port and reference voltage
	ADMUX = port|(1<<REFS0);
	uint32_t sum = 0;
     c60:	60 e0       	ldi	r22, 0x00	; 0
     c62:	70 e0       	ldi	r23, 0x00	; 0
     c64:	cb 01       	movw	r24, r22
	//Start given amount of conversions and add up results
	for (uint8_t i = 0; i < iterations; i++){
     c66:	e4 2f       	mov	r30, r20
     c68:	f0 e0       	ldi	r31, 0x00	; 0
     c6a:	e2 17       	cp	r30, r18
     c6c:	f3 07       	cpc	r31, r19
     c6e:	98 f4       	brcc	.+38     	; 0xc96 <read_avg_adc+0x40>
		ADCSRA |= 1<<ADSC;
     c70:	50 91 7a 00 	lds	r21, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     c74:	50 64       	ori	r21, 0x40	; 64
     c76:	50 93 7a 00 	sts	0x007A, r21	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
		while( ADCSRA & 1<<ADSC);
     c7a:	50 91 7a 00 	lds	r21, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     c7e:	56 fd       	sbrc	r21, 6
     c80:	fc cf       	rjmp	.-8      	; 0xc7a <read_avg_adc+0x24>
		sum += ADC;
     c82:	e0 91 78 00 	lds	r30, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     c86:	f0 91 79 00 	lds	r31, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     c8a:	6e 0f       	add	r22, r30
     c8c:	7f 1f       	adc	r23, r31
     c8e:	81 1d       	adc	r24, r1
     c90:	91 1d       	adc	r25, r1
uint16_t read_avg_adc(uint8_t port, uint16_t iterations){
	//Choose port and reference voltage
	ADMUX = port|(1<<REFS0);
	uint32_t sum = 0;
	//Start given amount of conversions and add up results
	for (uint8_t i = 0; i < iterations; i++){
     c92:	4f 5f       	subi	r20, 0xFF	; 255
     c94:	e8 cf       	rjmp	.-48     	; 0xc66 <read_avg_adc+0x10>
		ADCSRA |= 1<<ADSC;
		while( ADCSRA & 1<<ADSC);
		sum += ADC;
	}
	//Return truncated average
	return (uint16_t)(sum/iterations);
     c96:	40 e0       	ldi	r20, 0x00	; 0
     c98:	50 e0       	ldi	r21, 0x00	; 0
     c9a:	0e 94 38 0b 	call	0x1670	; 0x1670 <__udivmodsi4>
     c9e:	c9 01       	movw	r24, r18
     ca0:	08 95       	ret

00000ca2 <lcd_init>:
     ca2:	cf 93       	push	r28
     ca4:	df 93       	push	r29
     ca6:	84 b1       	in	r24, 0x04	; 4
     ca8:	85 60       	ori	r24, 0x05	; 5
     caa:	84 b9       	out	0x04, r24	; 4
     cac:	85 b1       	in	r24, 0x05	; 5
     cae:	8a 7f       	andi	r24, 0xFA	; 250
     cb0:	85 b9       	out	0x05, r24	; 5
     cb2:	ca ee       	ldi	r28, 0xEA	; 234
     cb4:	d0 e0       	ldi	r29, 0x00	; 0
     cb6:	fe 01       	movw	r30, r28
     cb8:	84 91       	lpm	r24, Z
     cba:	0e 94 ac 06 	call	0xd58	; 0xd58 <spi_txrx>
     cbe:	87 eb       	ldi	r24, 0xB7	; 183
     cc0:	9b e0       	ldi	r25, 0x0B	; 11
     cc2:	01 97       	sbiw	r24, 0x01	; 1
     cc4:	f1 f7       	brne	.-4      	; 0xcc2 <lcd_init+0x20>
     cc6:	00 c0       	rjmp	.+0      	; 0xcc8 <lcd_init+0x26>
     cc8:	00 00       	nop
     cca:	21 96       	adiw	r28, 0x01	; 1
     ccc:	90 e0       	ldi	r25, 0x00	; 0
     cce:	c3 3f       	cpi	r28, 0xF3	; 243
     cd0:	d9 07       	cpc	r29, r25
     cd2:	89 f7       	brne	.-30     	; 0xcb6 <lcd_init+0x14>
     cd4:	df 91       	pop	r29
     cd6:	cf 91       	pop	r28
     cd8:	08 95       	ret

00000cda <write_lcd_char>:
     cda:	28 9a       	sbi	0x05, 0	; 5
     cdc:	2a 98       	cbi	0x05, 2	; 5
     cde:	0e 94 ac 06 	call	0xd58	; 0xd58 <spi_txrx>
     ce2:	80 e5       	ldi	r24, 0x50	; 80
     ce4:	8a 95       	dec	r24
     ce6:	f1 f7       	brne	.-4      	; 0xce4 <write_lcd_char+0xa>
     ce8:	28 98       	cbi	0x05, 0	; 5
     cea:	08 95       	ret

00000cec <write_lcd_string>:
     cec:	1f 93       	push	r17
     cee:	cf 93       	push	r28
     cf0:	df 93       	push	r29
     cf2:	ec 01       	movw	r28, r24
     cf4:	28 9a       	sbi	0x05, 0	; 5
     cf6:	2a 98       	cbi	0x05, 2	; 5
     cf8:	80 e0       	ldi	r24, 0x00	; 0
     cfa:	11 e0       	ldi	r17, 0x01	; 1
     cfc:	18 0f       	add	r17, r24
     cfe:	fe 01       	movw	r30, r28
     d00:	e8 0f       	add	r30, r24
     d02:	f1 1d       	adc	r31, r1
     d04:	80 81       	ld	r24, Z
     d06:	88 23       	and	r24, r24
     d08:	39 f0       	breq	.+14     	; 0xd18 <write_lcd_string+0x2c>
     d0a:	0e 94 ac 06 	call	0xd58	; 0xd58 <spi_txrx>
     d0e:	80 e5       	ldi	r24, 0x50	; 80
     d10:	8a 95       	dec	r24
     d12:	f1 f7       	brne	.-4      	; 0xd10 <write_lcd_string+0x24>
     d14:	81 2f       	mov	r24, r17
     d16:	f1 cf       	rjmp	.-30     	; 0xcfa <write_lcd_string+0xe>
     d18:	28 98       	cbi	0x05, 0	; 5
     d1a:	df 91       	pop	r29
     d1c:	cf 91       	pop	r28
     d1e:	1f 91       	pop	r17
     d20:	08 95       	ret

00000d22 <set_cursor_pos>:
/************************************************************************/
/* Sets the LCD cursors position.										*/
/* @param pos The position to set to									*/
/************************************************************************/
void set_cursor_pos(uint8_t pos){
	PORTB &= ~(1<<CSB);   //Clear CSB
     d22:	2a 98       	cbi	0x05, 2	; 5
	spi_txrx(pos|0x80);
     d24:	80 68       	ori	r24, 0x80	; 128
     d26:	0e 94 ac 06 	call	0xd58	; 0xd58 <spi_txrx>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     d2a:	80 e5       	ldi	r24, 0x50	; 80
     d2c:	8a 95       	dec	r24
     d2e:	f1 f7       	brne	.-4      	; 0xd2c <set_cursor_pos+0xa>
     d30:	08 95       	ret

00000d32 <clear_line>:

/************************************************************************/
/* Clears the given line on the LCD                                     */
/* @param linenum The line to clear (0-2)								*/
/************************************************************************/
void clear_line(uint8_t linenum){
     d32:	cf 93       	push	r28
	set_cursor_pos(linenum * 16);
     d34:	82 95       	swap	r24
     d36:	80 7f       	andi	r24, 0xF0	; 240
     d38:	0e 94 91 06 	call	0xd22	; 0xd22 <set_cursor_pos>
	PORTB |= 1<<RS;
     d3c:	28 9a       	sbi	0x05, 0	; 5
	PORTB &= ~(1<<CSB);
     d3e:	2a 98       	cbi	0x05, 2	; 5
     d40:	c0 e1       	ldi	r28, 0x10	; 16
	for (uint8_t i = 0; i < 16; i++){
		spi_txrx(' ');
     d42:	80 e2       	ldi	r24, 0x20	; 32
     d44:	0e 94 ac 06 	call	0xd58	; 0xd58 <spi_txrx>
     d48:	80 e5       	ldi	r24, 0x50	; 80
     d4a:	8a 95       	dec	r24
     d4c:	f1 f7       	brne	.-4      	; 0xd4a <clear_line+0x18>
     d4e:	c1 50       	subi	r28, 0x01	; 1
/************************************************************************/
void clear_line(uint8_t linenum){
	set_cursor_pos(linenum * 16);
	PORTB |= 1<<RS;
	PORTB &= ~(1<<CSB);
	for (uint8_t i = 0; i < 16; i++){
     d50:	c1 f7       	brne	.-16     	; 0xd42 <clear_line+0x10>
		spi_txrx(' ');
		_delay_us(30);
	}
	PORTB &= ~(1<<RS);
     d52:	28 98       	cbi	0x05, 0	; 5
}
     d54:	cf 91       	pop	r28
     d56:	08 95       	ret

00000d58 <spi_txrx>:
/* Starts a SPI communication with a given data in SPI buffer			*/
/* and receives incoming data                                           */
/* @param data The data to send											*/
/************************************************************************/
uint8_t spi_txrx(uint8_t data){
	SPDR = data;
     d58:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));
     d5a:	0d b4       	in	r0, 0x2d	; 45
     d5c:	07 fe       	sbrs	r0, 7
     d5e:	fd cf       	rjmp	.-6      	; 0xd5a <spi_txrx+0x2>
	return SPDR;
     d60:	8e b5       	in	r24, 0x2e	; 46
}
     d62:	08 95       	ret

00000d64 <spi_init>:
/************************************************************************/
/* Initiates the MCU SPI as master with 16 as prescaler factor           */
/************************************************************************/
void spi_init(){
	// Set MOSI and SCK as out
	DDRB |= (1<<MOSI) | (1<<SCK) | (1<<SS);
     d64:	84 b1       	in	r24, 0x04	; 4
     d66:	8c 62       	ori	r24, 0x2C	; 44
     d68:	84 b9       	out	0x04, r24	; 4
	DDRB &= ~(1<<MISO);
     d6a:	24 98       	cbi	0x04, 4	; 4
	//Enable SPI in master mode with fck/4 as clock
	SPCR = (1<<SPE) | (1<<MSTR);
     d6c:	80 e5       	ldi	r24, 0x50	; 80
     d6e:	8c bd       	out	0x2c, r24	; 44
     d70:	08 95       	ret

00000d72 <Summer_PlayNote>:
static volatile uint16_t note_time = 0; // The timer cycles left for current note
static volatile uint8_t cur_melody;     // The index of the current melody
static volatile uint8_t current_note;   // The index of the curent note

// Plays a single note on the buzzer
void Summer_PlayNote(uint8_t note){
     d72:	cf 92       	push	r12
     d74:	df 92       	push	r13
     d76:	ef 92       	push	r14
     d78:	ff 92       	push	r15
     d7a:	cf 93       	push	r28
     d7c:	df 93       	push	r29
     d7e:	d8 2f       	mov	r29, r24
    if(GET_PITCH_EXP(note) == -1){  // Stop buzzer if note is a rest
     d80:	68 2f       	mov	r22, r24
     d82:	70 e0       	ldi	r23, 0x00	; 0
     d84:	6f 71       	andi	r22, 0x1F	; 31
#ifdef SUMMER_USE_SW
        rest = true;
#else
        TCCR1A &= ~(1<<COM1A0);
     d86:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
static volatile uint8_t cur_melody;     // The index of the current melody
static volatile uint8_t current_note;   // The index of the curent note

// Plays a single note on the buzzer
void Summer_PlayNote(uint8_t note){
    if(GET_PITCH_EXP(note) == -1){  // Stop buzzer if note is a rest
     d8a:	61 15       	cp	r22, r1
     d8c:	71 05       	cpc	r23, r1
     d8e:	21 f4       	brne	.+8      	; 0xd98 <Summer_PlayNote+0x26>
#ifdef SUMMER_USE_SW
        rest = true;
#else
        TCCR1A &= ~(1<<COM1A0);
     d90:	8f 7b       	andi	r24, 0xBF	; 191
     d92:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
     d96:	21 c0       	rjmp	.+66     	; 0xdda <Summer_PlayNote+0x68>
#endif
    } else{                         // Start buzzer and set correct frequency
#ifdef SUMMER_USE_SW
        rest = false;
#else
        TCCR1A |= (1<<COM1A0);
     d98:	80 64       	ori	r24, 0x40	; 64
     d9a:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
#endif
        OCR1A = LOWC_OCR / (pow(ROOT12_2,GET_PITCH_EXP(note)));
     d9e:	61 50       	subi	r22, 0x01	; 1
     da0:	71 09       	sbc	r23, r1
     da2:	07 2e       	mov	r0, r23
     da4:	00 0c       	add	r0, r0
     da6:	88 0b       	sbc	r24, r24
     da8:	99 0b       	sbc	r25, r25
     daa:	0e 94 4d 08 	call	0x109a	; 0x109a <__floatsisf>
     dae:	9b 01       	movw	r18, r22
     db0:	ac 01       	movw	r20, r24
     db2:	6d e7       	ldi	r22, 0x7D	; 125
     db4:	7c e9       	ldi	r23, 0x9C	; 156
     db6:	87 e8       	ldi	r24, 0x87	; 135
     db8:	9f e3       	ldi	r25, 0x3F	; 63
     dba:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <pow>
     dbe:	9b 01       	movw	r18, r22
     dc0:	ac 01       	movw	r20, r24
     dc2:	60 e0       	ldi	r22, 0x00	; 0
     dc4:	70 e6       	ldi	r23, 0x60	; 96
     dc6:	80 e7       	ldi	r24, 0x70	; 112
     dc8:	96 e4       	ldi	r25, 0x46	; 70
     dca:	0e 94 aa 07 	call	0xf54	; 0xf54 <__divsf3>
     dce:	0e 94 1c 08 	call	0x1038	; 0x1038 <__fixunssfsi>
     dd2:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     dd6:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
    }
    // cycles needed = frequency / (bar time) / (note length divisor)
    note_time = ((F_CPU/(OCR1A + 1))/(bpms[cur_melody]/(240.0)))/GET_DURATION_DIV(note);
     dda:	20 91 88 00 	lds	r18, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
     dde:	30 91 89 00 	lds	r19, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     de2:	c0 91 6a 01 	lds	r28, 0x016A	; 0x80016a <cur_melody>
     de6:	2f 5f       	subi	r18, 0xFF	; 255
     de8:	3f 4f       	sbci	r19, 0xFF	; 255
     dea:	40 e0       	ldi	r20, 0x00	; 0
     dec:	50 e0       	ldi	r21, 0x00	; 0
     dee:	60 e0       	ldi	r22, 0x00	; 0
     df0:	72 e1       	ldi	r23, 0x12	; 18
     df2:	8a e7       	ldi	r24, 0x7A	; 122
     df4:	90 e0       	ldi	r25, 0x00	; 0
     df6:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <__divmodsi4>
     dfa:	ca 01       	movw	r24, r20
     dfc:	b9 01       	movw	r22, r18
     dfe:	0e 94 4d 08 	call	0x109a	; 0x109a <__floatsisf>
     e02:	6b 01       	movw	r12, r22
     e04:	7c 01       	movw	r14, r24
     e06:	ec 2f       	mov	r30, r28
     e08:	f0 e0       	ldi	r31, 0x00	; 0
     e0a:	e6 5a       	subi	r30, 0xA6	; 166
     e0c:	fe 4f       	sbci	r31, 0xFE	; 254
     e0e:	60 81       	ld	r22, Z
     e10:	70 e0       	ldi	r23, 0x00	; 0
     e12:	80 e0       	ldi	r24, 0x00	; 0
     e14:	90 e0       	ldi	r25, 0x00	; 0
     e16:	0e 94 4d 08 	call	0x109a	; 0x109a <__floatsisf>
     e1a:	20 e0       	ldi	r18, 0x00	; 0
     e1c:	30 e0       	ldi	r19, 0x00	; 0
     e1e:	40 e7       	ldi	r20, 0x70	; 112
     e20:	53 e4       	ldi	r21, 0x43	; 67
     e22:	0e 94 aa 07 	call	0xf54	; 0xf54 <__divsf3>
     e26:	9b 01       	movw	r18, r22
     e28:	ac 01       	movw	r20, r24
     e2a:	c7 01       	movw	r24, r14
     e2c:	b6 01       	movw	r22, r12
     e2e:	0e 94 aa 07 	call	0xf54	; 0xf54 <__divsf3>
     e32:	6b 01       	movw	r12, r22
     e34:	7c 01       	movw	r14, r24
     e36:	d2 95       	swap	r29
     e38:	d6 95       	lsr	r29
     e3a:	d7 70       	andi	r29, 0x07	; 7
     e3c:	61 e0       	ldi	r22, 0x01	; 1
     e3e:	70 e0       	ldi	r23, 0x00	; 0
     e40:	02 c0       	rjmp	.+4      	; 0xe46 <Summer_PlayNote+0xd4>
     e42:	66 0f       	add	r22, r22
     e44:	77 1f       	adc	r23, r23
     e46:	da 95       	dec	r29
     e48:	e2 f7       	brpl	.-8      	; 0xe42 <Summer_PlayNote+0xd0>
     e4a:	07 2e       	mov	r0, r23
     e4c:	00 0c       	add	r0, r0
     e4e:	88 0b       	sbc	r24, r24
     e50:	99 0b       	sbc	r25, r25
     e52:	0e 94 4d 08 	call	0x109a	; 0x109a <__floatsisf>
     e56:	9b 01       	movw	r18, r22
     e58:	ac 01       	movw	r20, r24
     e5a:	c7 01       	movw	r24, r14
     e5c:	b6 01       	movw	r22, r12
     e5e:	0e 94 aa 07 	call	0xf54	; 0xf54 <__divsf3>
     e62:	0e 94 1c 08 	call	0x1038	; 0x1038 <__fixunssfsi>
     e66:	70 93 6c 01 	sts	0x016C, r23	; 0x80016c <note_time+0x1>
     e6a:	60 93 6b 01 	sts	0x016B, r22	; 0x80016b <note_time>
}
     e6e:	df 91       	pop	r29
     e70:	cf 91       	pop	r28
     e72:	ff 90       	pop	r15
     e74:	ef 90       	pop	r14
     e76:	df 90       	pop	r13
     e78:	cf 90       	pop	r12
     e7a:	08 95       	ret

00000e7c <__vector_11>:

// Interrupt vector to play next note after the current notes length is passed
// Stops the melody when it encounters a 0xFF
ISR(TIMER1_COMPA_vect){
     e7c:	1f 92       	push	r1
     e7e:	0f 92       	push	r0
     e80:	0f b6       	in	r0, 0x3f	; 63
     e82:	0f 92       	push	r0
     e84:	11 24       	eor	r1, r1
     e86:	2f 93       	push	r18
     e88:	3f 93       	push	r19
     e8a:	4f 93       	push	r20
     e8c:	5f 93       	push	r21
     e8e:	6f 93       	push	r22
     e90:	7f 93       	push	r23
     e92:	8f 93       	push	r24
     e94:	9f 93       	push	r25
     e96:	af 93       	push	r26
     e98:	bf 93       	push	r27
     e9a:	ef 93       	push	r30
     e9c:	ff 93       	push	r31
    if(rest)
        SW_SUMMER_PORT &= ~(1<<SUMMER_PIN);
    else
        SW_SUMMER_PORT ^= (1<<SUMMER_PIN);
#endif
    note_time--; 
     e9e:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <note_time>
     ea2:	90 91 6c 01 	lds	r25, 0x016C	; 0x80016c <note_time+0x1>
     ea6:	01 97       	sbiw	r24, 0x01	; 1
     ea8:	90 93 6c 01 	sts	0x016C, r25	; 0x80016c <note_time+0x1>
     eac:	80 93 6b 01 	sts	0x016B, r24	; 0x80016b <note_time>
    if (note_time == 0){
     eb0:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <note_time>
     eb4:	90 91 6c 01 	lds	r25, 0x016C	; 0x80016c <note_time+0x1>
     eb8:	89 2b       	or	r24, r25
     eba:	e9 f4       	brne	.+58     	; 0xef6 <__vector_11+0x7a>
        current_note++;
     ebc:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <current_note>
     ec0:	8f 5f       	subi	r24, 0xFF	; 255
     ec2:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <current_note>
        // Read next note from program memory
        uint8_t note = pgm_read_byte(&(melodies[cur_melody][current_note]));
     ec6:	e0 91 6a 01 	lds	r30, 0x016A	; 0x80016a <cur_melody>
     eca:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <current_note>
     ece:	f0 e0       	ldi	r31, 0x00	; 0
     ed0:	fe 2f       	mov	r31, r30
     ed2:	ee 27       	eor	r30, r30
     ed4:	e8 0f       	add	r30, r24
     ed6:	f1 1d       	adc	r31, r1
     ed8:	ed 50       	subi	r30, 0x0D	; 13
     eda:	ff 4f       	sbci	r31, 0xFF	; 255
     edc:	84 91       	lpm	r24, Z
        if(note == 0x00){   // Stop buzzer if 0xFF
     ede:	81 11       	cpse	r24, r1
     ee0:	08 c0       	rjmp	.+16     	; 0xef2 <__vector_11+0x76>
            TIMSK1 = 0;
     ee2:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
            TCCR1B &= ~(1<<CS10);
     ee6:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     eea:	8e 7f       	andi	r24, 0xFE	; 254
     eec:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     ef0:	02 c0       	rjmp	.+4      	; 0xef6 <__vector_11+0x7a>
#ifdef SUMMER_USE_SW
            SW_SUMMER_PORT &= ~(1<<SUMMER_PIN);
#endif
        } else
            Summer_PlayNote(note);
     ef2:	0e 94 b9 06 	call	0xd72	; 0xd72 <Summer_PlayNote>
    }
}
     ef6:	ff 91       	pop	r31
     ef8:	ef 91       	pop	r30
     efa:	bf 91       	pop	r27
     efc:	af 91       	pop	r26
     efe:	9f 91       	pop	r25
     f00:	8f 91       	pop	r24
     f02:	7f 91       	pop	r23
     f04:	6f 91       	pop	r22
     f06:	5f 91       	pop	r21
     f08:	4f 91       	pop	r20
     f0a:	3f 91       	pop	r19
     f0c:	2f 91       	pop	r18
     f0e:	0f 90       	pop	r0
     f10:	0f be       	out	0x3f, r0	; 63
     f12:	0f 90       	pop	r0
     f14:	1f 90       	pop	r1
     f16:	18 95       	reti

00000f18 <Summer_Init>:

// ------------- PUBLIC -------------

// Initializes the summer
void Summer_Init(void){
    SUMMER_DDR |= (1<<SUMMER_PIN);
     f18:	21 9a       	sbi	0x04, 1	; 4
    // Start timer
#ifdef SUMMER_USE_SW
    TCCR1A = 0;
#else
    TCCR1A = (1<<COM1A0);
     f1a:	80 e4       	ldi	r24, 0x40	; 64
     f1c:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
#endif
    TCCR1B = (1<<WGM12);
     f20:	88 e0       	ldi	r24, 0x08	; 8
     f22:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     f26:	08 95       	ret

00000f28 <Summer_PlayMelody>:
}

// Plays a specified melody on the buzzer
void Summer_PlayMelody(uint8_t melody){
    cur_melody = melody;
     f28:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <cur_melody>
    current_note = 0;
     f2c:	10 92 69 01 	sts	0x0169, r1	; 0x800169 <current_note>
    Summer_PlayNote(pgm_read_byte(&(melodies[melody][0])));
     f30:	e8 2f       	mov	r30, r24
     f32:	f0 e0       	ldi	r31, 0x00	; 0
     f34:	fe 2f       	mov	r31, r30
     f36:	ee 27       	eor	r30, r30
     f38:	ed 50       	subi	r30, 0x0D	; 13
     f3a:	ff 4f       	sbci	r31, 0xFF	; 255
     f3c:	84 91       	lpm	r24, Z
     f3e:	0e 94 b9 06 	call	0xd72	; 0xd72 <Summer_PlayNote>
    TIMSK1 = (1<<OCIE1A);
     f42:	82 e0       	ldi	r24, 0x02	; 2
     f44:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
    TCCR1B |= (1<<CS10);
     f48:	e1 e8       	ldi	r30, 0x81	; 129
     f4a:	f0 e0       	ldi	r31, 0x00	; 0
     f4c:	80 81       	ld	r24, Z
     f4e:	81 60       	ori	r24, 0x01	; 1
     f50:	80 83       	st	Z, r24
     f52:	08 95       	ret

00000f54 <__divsf3>:
     f54:	0e 94 be 07 	call	0xf7c	; 0xf7c <__divsf3x>
     f58:	0c 94 9f 08 	jmp	0x113e	; 0x113e <__fp_round>
     f5c:	0e 94 98 08 	call	0x1130	; 0x1130 <__fp_pscB>
     f60:	58 f0       	brcs	.+22     	; 0xf78 <__divsf3+0x24>
     f62:	0e 94 91 08 	call	0x1122	; 0x1122 <__fp_pscA>
     f66:	40 f0       	brcs	.+16     	; 0xf78 <__divsf3+0x24>
     f68:	29 f4       	brne	.+10     	; 0xf74 <__divsf3+0x20>
     f6a:	5f 3f       	cpi	r21, 0xFF	; 255
     f6c:	29 f0       	breq	.+10     	; 0xf78 <__divsf3+0x24>
     f6e:	0c 94 88 08 	jmp	0x1110	; 0x1110 <__fp_inf>
     f72:	51 11       	cpse	r21, r1
     f74:	0c 94 d3 08 	jmp	0x11a6	; 0x11a6 <__fp_szero>
     f78:	0c 94 8e 08 	jmp	0x111c	; 0x111c <__fp_nan>

00000f7c <__divsf3x>:
     f7c:	0e 94 b0 08 	call	0x1160	; 0x1160 <__fp_split3>
     f80:	68 f3       	brcs	.-38     	; 0xf5c <__divsf3+0x8>

00000f82 <__divsf3_pse>:
     f82:	99 23       	and	r25, r25
     f84:	b1 f3       	breq	.-20     	; 0xf72 <__divsf3+0x1e>
     f86:	55 23       	and	r21, r21
     f88:	91 f3       	breq	.-28     	; 0xf6e <__divsf3+0x1a>
     f8a:	95 1b       	sub	r25, r21
     f8c:	55 0b       	sbc	r21, r21
     f8e:	bb 27       	eor	r27, r27
     f90:	aa 27       	eor	r26, r26
     f92:	62 17       	cp	r22, r18
     f94:	73 07       	cpc	r23, r19
     f96:	84 07       	cpc	r24, r20
     f98:	38 f0       	brcs	.+14     	; 0xfa8 <__divsf3_pse+0x26>
     f9a:	9f 5f       	subi	r25, 0xFF	; 255
     f9c:	5f 4f       	sbci	r21, 0xFF	; 255
     f9e:	22 0f       	add	r18, r18
     fa0:	33 1f       	adc	r19, r19
     fa2:	44 1f       	adc	r20, r20
     fa4:	aa 1f       	adc	r26, r26
     fa6:	a9 f3       	breq	.-22     	; 0xf92 <__divsf3_pse+0x10>
     fa8:	35 d0       	rcall	.+106    	; 0x1014 <__divsf3_pse+0x92>
     faa:	0e 2e       	mov	r0, r30
     fac:	3a f0       	brmi	.+14     	; 0xfbc <__divsf3_pse+0x3a>
     fae:	e0 e8       	ldi	r30, 0x80	; 128
     fb0:	32 d0       	rcall	.+100    	; 0x1016 <__divsf3_pse+0x94>
     fb2:	91 50       	subi	r25, 0x01	; 1
     fb4:	50 40       	sbci	r21, 0x00	; 0
     fb6:	e6 95       	lsr	r30
     fb8:	00 1c       	adc	r0, r0
     fba:	ca f7       	brpl	.-14     	; 0xfae <__divsf3_pse+0x2c>
     fbc:	2b d0       	rcall	.+86     	; 0x1014 <__divsf3_pse+0x92>
     fbe:	fe 2f       	mov	r31, r30
     fc0:	29 d0       	rcall	.+82     	; 0x1014 <__divsf3_pse+0x92>
     fc2:	66 0f       	add	r22, r22
     fc4:	77 1f       	adc	r23, r23
     fc6:	88 1f       	adc	r24, r24
     fc8:	bb 1f       	adc	r27, r27
     fca:	26 17       	cp	r18, r22
     fcc:	37 07       	cpc	r19, r23
     fce:	48 07       	cpc	r20, r24
     fd0:	ab 07       	cpc	r26, r27
     fd2:	b0 e8       	ldi	r27, 0x80	; 128
     fd4:	09 f0       	breq	.+2      	; 0xfd8 <__divsf3_pse+0x56>
     fd6:	bb 0b       	sbc	r27, r27
     fd8:	80 2d       	mov	r24, r0
     fda:	bf 01       	movw	r22, r30
     fdc:	ff 27       	eor	r31, r31
     fde:	93 58       	subi	r25, 0x83	; 131
     fe0:	5f 4f       	sbci	r21, 0xFF	; 255
     fe2:	3a f0       	brmi	.+14     	; 0xff2 <__divsf3_pse+0x70>
     fe4:	9e 3f       	cpi	r25, 0xFE	; 254
     fe6:	51 05       	cpc	r21, r1
     fe8:	78 f0       	brcs	.+30     	; 0x1008 <__divsf3_pse+0x86>
     fea:	0c 94 88 08 	jmp	0x1110	; 0x1110 <__fp_inf>
     fee:	0c 94 d3 08 	jmp	0x11a6	; 0x11a6 <__fp_szero>
     ff2:	5f 3f       	cpi	r21, 0xFF	; 255
     ff4:	e4 f3       	brlt	.-8      	; 0xfee <__divsf3_pse+0x6c>
     ff6:	98 3e       	cpi	r25, 0xE8	; 232
     ff8:	d4 f3       	brlt	.-12     	; 0xfee <__divsf3_pse+0x6c>
     ffa:	86 95       	lsr	r24
     ffc:	77 95       	ror	r23
     ffe:	67 95       	ror	r22
    1000:	b7 95       	ror	r27
    1002:	f7 95       	ror	r31
    1004:	9f 5f       	subi	r25, 0xFF	; 255
    1006:	c9 f7       	brne	.-14     	; 0xffa <__divsf3_pse+0x78>
    1008:	88 0f       	add	r24, r24
    100a:	91 1d       	adc	r25, r1
    100c:	96 95       	lsr	r25
    100e:	87 95       	ror	r24
    1010:	97 f9       	bld	r25, 7
    1012:	08 95       	ret
    1014:	e1 e0       	ldi	r30, 0x01	; 1
    1016:	66 0f       	add	r22, r22
    1018:	77 1f       	adc	r23, r23
    101a:	88 1f       	adc	r24, r24
    101c:	bb 1f       	adc	r27, r27
    101e:	62 17       	cp	r22, r18
    1020:	73 07       	cpc	r23, r19
    1022:	84 07       	cpc	r24, r20
    1024:	ba 07       	cpc	r27, r26
    1026:	20 f0       	brcs	.+8      	; 0x1030 <__divsf3_pse+0xae>
    1028:	62 1b       	sub	r22, r18
    102a:	73 0b       	sbc	r23, r19
    102c:	84 0b       	sbc	r24, r20
    102e:	ba 0b       	sbc	r27, r26
    1030:	ee 1f       	adc	r30, r30
    1032:	88 f7       	brcc	.-30     	; 0x1016 <__divsf3_pse+0x94>
    1034:	e0 95       	com	r30
    1036:	08 95       	ret

00001038 <__fixunssfsi>:
    1038:	0e 94 b8 08 	call	0x1170	; 0x1170 <__fp_splitA>
    103c:	88 f0       	brcs	.+34     	; 0x1060 <__fixunssfsi+0x28>
    103e:	9f 57       	subi	r25, 0x7F	; 127
    1040:	98 f0       	brcs	.+38     	; 0x1068 <__fixunssfsi+0x30>
    1042:	b9 2f       	mov	r27, r25
    1044:	99 27       	eor	r25, r25
    1046:	b7 51       	subi	r27, 0x17	; 23
    1048:	b0 f0       	brcs	.+44     	; 0x1076 <__fixunssfsi+0x3e>
    104a:	e1 f0       	breq	.+56     	; 0x1084 <__fixunssfsi+0x4c>
    104c:	66 0f       	add	r22, r22
    104e:	77 1f       	adc	r23, r23
    1050:	88 1f       	adc	r24, r24
    1052:	99 1f       	adc	r25, r25
    1054:	1a f0       	brmi	.+6      	; 0x105c <__fixunssfsi+0x24>
    1056:	ba 95       	dec	r27
    1058:	c9 f7       	brne	.-14     	; 0x104c <__fixunssfsi+0x14>
    105a:	14 c0       	rjmp	.+40     	; 0x1084 <__fixunssfsi+0x4c>
    105c:	b1 30       	cpi	r27, 0x01	; 1
    105e:	91 f0       	breq	.+36     	; 0x1084 <__fixunssfsi+0x4c>
    1060:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <__fp_zero>
    1064:	b1 e0       	ldi	r27, 0x01	; 1
    1066:	08 95       	ret
    1068:	0c 94 d2 08 	jmp	0x11a4	; 0x11a4 <__fp_zero>
    106c:	67 2f       	mov	r22, r23
    106e:	78 2f       	mov	r23, r24
    1070:	88 27       	eor	r24, r24
    1072:	b8 5f       	subi	r27, 0xF8	; 248
    1074:	39 f0       	breq	.+14     	; 0x1084 <__fixunssfsi+0x4c>
    1076:	b9 3f       	cpi	r27, 0xF9	; 249
    1078:	cc f3       	brlt	.-14     	; 0x106c <__fixunssfsi+0x34>
    107a:	86 95       	lsr	r24
    107c:	77 95       	ror	r23
    107e:	67 95       	ror	r22
    1080:	b3 95       	inc	r27
    1082:	d9 f7       	brne	.-10     	; 0x107a <__fixunssfsi+0x42>
    1084:	3e f4       	brtc	.+14     	; 0x1094 <__fixunssfsi+0x5c>
    1086:	90 95       	com	r25
    1088:	80 95       	com	r24
    108a:	70 95       	com	r23
    108c:	61 95       	neg	r22
    108e:	7f 4f       	sbci	r23, 0xFF	; 255
    1090:	8f 4f       	sbci	r24, 0xFF	; 255
    1092:	9f 4f       	sbci	r25, 0xFF	; 255
    1094:	08 95       	ret

00001096 <__floatunsisf>:
    1096:	e8 94       	clt
    1098:	09 c0       	rjmp	.+18     	; 0x10ac <__floatsisf+0x12>

0000109a <__floatsisf>:
    109a:	97 fb       	bst	r25, 7
    109c:	3e f4       	brtc	.+14     	; 0x10ac <__floatsisf+0x12>
    109e:	90 95       	com	r25
    10a0:	80 95       	com	r24
    10a2:	70 95       	com	r23
    10a4:	61 95       	neg	r22
    10a6:	7f 4f       	sbci	r23, 0xFF	; 255
    10a8:	8f 4f       	sbci	r24, 0xFF	; 255
    10aa:	9f 4f       	sbci	r25, 0xFF	; 255
    10ac:	99 23       	and	r25, r25
    10ae:	a9 f0       	breq	.+42     	; 0x10da <__floatsisf+0x40>
    10b0:	f9 2f       	mov	r31, r25
    10b2:	96 e9       	ldi	r25, 0x96	; 150
    10b4:	bb 27       	eor	r27, r27
    10b6:	93 95       	inc	r25
    10b8:	f6 95       	lsr	r31
    10ba:	87 95       	ror	r24
    10bc:	77 95       	ror	r23
    10be:	67 95       	ror	r22
    10c0:	b7 95       	ror	r27
    10c2:	f1 11       	cpse	r31, r1
    10c4:	f8 cf       	rjmp	.-16     	; 0x10b6 <__floatsisf+0x1c>
    10c6:	fa f4       	brpl	.+62     	; 0x1106 <__floatsisf+0x6c>
    10c8:	bb 0f       	add	r27, r27
    10ca:	11 f4       	brne	.+4      	; 0x10d0 <__floatsisf+0x36>
    10cc:	60 ff       	sbrs	r22, 0
    10ce:	1b c0       	rjmp	.+54     	; 0x1106 <__floatsisf+0x6c>
    10d0:	6f 5f       	subi	r22, 0xFF	; 255
    10d2:	7f 4f       	sbci	r23, 0xFF	; 255
    10d4:	8f 4f       	sbci	r24, 0xFF	; 255
    10d6:	9f 4f       	sbci	r25, 0xFF	; 255
    10d8:	16 c0       	rjmp	.+44     	; 0x1106 <__floatsisf+0x6c>
    10da:	88 23       	and	r24, r24
    10dc:	11 f0       	breq	.+4      	; 0x10e2 <__floatsisf+0x48>
    10de:	96 e9       	ldi	r25, 0x96	; 150
    10e0:	11 c0       	rjmp	.+34     	; 0x1104 <__floatsisf+0x6a>
    10e2:	77 23       	and	r23, r23
    10e4:	21 f0       	breq	.+8      	; 0x10ee <__floatsisf+0x54>
    10e6:	9e e8       	ldi	r25, 0x8E	; 142
    10e8:	87 2f       	mov	r24, r23
    10ea:	76 2f       	mov	r23, r22
    10ec:	05 c0       	rjmp	.+10     	; 0x10f8 <__floatsisf+0x5e>
    10ee:	66 23       	and	r22, r22
    10f0:	71 f0       	breq	.+28     	; 0x110e <__floatsisf+0x74>
    10f2:	96 e8       	ldi	r25, 0x86	; 134
    10f4:	86 2f       	mov	r24, r22
    10f6:	70 e0       	ldi	r23, 0x00	; 0
    10f8:	60 e0       	ldi	r22, 0x00	; 0
    10fa:	2a f0       	brmi	.+10     	; 0x1106 <__floatsisf+0x6c>
    10fc:	9a 95       	dec	r25
    10fe:	66 0f       	add	r22, r22
    1100:	77 1f       	adc	r23, r23
    1102:	88 1f       	adc	r24, r24
    1104:	da f7       	brpl	.-10     	; 0x10fc <__floatsisf+0x62>
    1106:	88 0f       	add	r24, r24
    1108:	96 95       	lsr	r25
    110a:	87 95       	ror	r24
    110c:	97 f9       	bld	r25, 7
    110e:	08 95       	ret

00001110 <__fp_inf>:
    1110:	97 f9       	bld	r25, 7
    1112:	9f 67       	ori	r25, 0x7F	; 127
    1114:	80 e8       	ldi	r24, 0x80	; 128
    1116:	70 e0       	ldi	r23, 0x00	; 0
    1118:	60 e0       	ldi	r22, 0x00	; 0
    111a:	08 95       	ret

0000111c <__fp_nan>:
    111c:	9f ef       	ldi	r25, 0xFF	; 255
    111e:	80 ec       	ldi	r24, 0xC0	; 192
    1120:	08 95       	ret

00001122 <__fp_pscA>:
    1122:	00 24       	eor	r0, r0
    1124:	0a 94       	dec	r0
    1126:	16 16       	cp	r1, r22
    1128:	17 06       	cpc	r1, r23
    112a:	18 06       	cpc	r1, r24
    112c:	09 06       	cpc	r0, r25
    112e:	08 95       	ret

00001130 <__fp_pscB>:
    1130:	00 24       	eor	r0, r0
    1132:	0a 94       	dec	r0
    1134:	12 16       	cp	r1, r18
    1136:	13 06       	cpc	r1, r19
    1138:	14 06       	cpc	r1, r20
    113a:	05 06       	cpc	r0, r21
    113c:	08 95       	ret

0000113e <__fp_round>:
    113e:	09 2e       	mov	r0, r25
    1140:	03 94       	inc	r0
    1142:	00 0c       	add	r0, r0
    1144:	11 f4       	brne	.+4      	; 0x114a <__fp_round+0xc>
    1146:	88 23       	and	r24, r24
    1148:	52 f0       	brmi	.+20     	; 0x115e <__fp_round+0x20>
    114a:	bb 0f       	add	r27, r27
    114c:	40 f4       	brcc	.+16     	; 0x115e <__fp_round+0x20>
    114e:	bf 2b       	or	r27, r31
    1150:	11 f4       	brne	.+4      	; 0x1156 <__fp_round+0x18>
    1152:	60 ff       	sbrs	r22, 0
    1154:	04 c0       	rjmp	.+8      	; 0x115e <__fp_round+0x20>
    1156:	6f 5f       	subi	r22, 0xFF	; 255
    1158:	7f 4f       	sbci	r23, 0xFF	; 255
    115a:	8f 4f       	sbci	r24, 0xFF	; 255
    115c:	9f 4f       	sbci	r25, 0xFF	; 255
    115e:	08 95       	ret

00001160 <__fp_split3>:
    1160:	57 fd       	sbrc	r21, 7
    1162:	90 58       	subi	r25, 0x80	; 128
    1164:	44 0f       	add	r20, r20
    1166:	55 1f       	adc	r21, r21
    1168:	59 f0       	breq	.+22     	; 0x1180 <__fp_splitA+0x10>
    116a:	5f 3f       	cpi	r21, 0xFF	; 255
    116c:	71 f0       	breq	.+28     	; 0x118a <__fp_splitA+0x1a>
    116e:	47 95       	ror	r20

00001170 <__fp_splitA>:
    1170:	88 0f       	add	r24, r24
    1172:	97 fb       	bst	r25, 7
    1174:	99 1f       	adc	r25, r25
    1176:	61 f0       	breq	.+24     	; 0x1190 <__fp_splitA+0x20>
    1178:	9f 3f       	cpi	r25, 0xFF	; 255
    117a:	79 f0       	breq	.+30     	; 0x119a <__fp_splitA+0x2a>
    117c:	87 95       	ror	r24
    117e:	08 95       	ret
    1180:	12 16       	cp	r1, r18
    1182:	13 06       	cpc	r1, r19
    1184:	14 06       	cpc	r1, r20
    1186:	55 1f       	adc	r21, r21
    1188:	f2 cf       	rjmp	.-28     	; 0x116e <__fp_split3+0xe>
    118a:	46 95       	lsr	r20
    118c:	f1 df       	rcall	.-30     	; 0x1170 <__fp_splitA>
    118e:	08 c0       	rjmp	.+16     	; 0x11a0 <__fp_splitA+0x30>
    1190:	16 16       	cp	r1, r22
    1192:	17 06       	cpc	r1, r23
    1194:	18 06       	cpc	r1, r24
    1196:	99 1f       	adc	r25, r25
    1198:	f1 cf       	rjmp	.-30     	; 0x117c <__fp_splitA+0xc>
    119a:	86 95       	lsr	r24
    119c:	71 05       	cpc	r23, r1
    119e:	61 05       	cpc	r22, r1
    11a0:	08 94       	sec
    11a2:	08 95       	ret

000011a4 <__fp_zero>:
    11a4:	e8 94       	clt

000011a6 <__fp_szero>:
    11a6:	bb 27       	eor	r27, r27
    11a8:	66 27       	eor	r22, r22
    11aa:	77 27       	eor	r23, r23
    11ac:	cb 01       	movw	r24, r22
    11ae:	97 f9       	bld	r25, 7
    11b0:	08 95       	ret

000011b2 <pow>:
    11b2:	fa 01       	movw	r30, r20
    11b4:	ee 0f       	add	r30, r30
    11b6:	ff 1f       	adc	r31, r31
    11b8:	30 96       	adiw	r30, 0x00	; 0
    11ba:	21 05       	cpc	r18, r1
    11bc:	31 05       	cpc	r19, r1
    11be:	a1 f1       	breq	.+104    	; 0x1228 <pow+0x76>
    11c0:	61 15       	cp	r22, r1
    11c2:	71 05       	cpc	r23, r1
    11c4:	61 f4       	brne	.+24     	; 0x11de <pow+0x2c>
    11c6:	80 38       	cpi	r24, 0x80	; 128
    11c8:	bf e3       	ldi	r27, 0x3F	; 63
    11ca:	9b 07       	cpc	r25, r27
    11cc:	49 f1       	breq	.+82     	; 0x1220 <pow+0x6e>
    11ce:	68 94       	set
    11d0:	90 38       	cpi	r25, 0x80	; 128
    11d2:	81 05       	cpc	r24, r1
    11d4:	61 f0       	breq	.+24     	; 0x11ee <pow+0x3c>
    11d6:	80 38       	cpi	r24, 0x80	; 128
    11d8:	bf ef       	ldi	r27, 0xFF	; 255
    11da:	9b 07       	cpc	r25, r27
    11dc:	41 f0       	breq	.+16     	; 0x11ee <pow+0x3c>
    11de:	99 23       	and	r25, r25
    11e0:	4a f5       	brpl	.+82     	; 0x1234 <pow+0x82>
    11e2:	ff 3f       	cpi	r31, 0xFF	; 255
    11e4:	e1 05       	cpc	r30, r1
    11e6:	31 05       	cpc	r19, r1
    11e8:	21 05       	cpc	r18, r1
    11ea:	19 f1       	breq	.+70     	; 0x1232 <pow+0x80>
    11ec:	e8 94       	clt
    11ee:	08 94       	sec
    11f0:	e7 95       	ror	r30
    11f2:	d9 01       	movw	r26, r18
    11f4:	aa 23       	and	r26, r26
    11f6:	29 f4       	brne	.+10     	; 0x1202 <pow+0x50>
    11f8:	ab 2f       	mov	r26, r27
    11fa:	be 2f       	mov	r27, r30
    11fc:	f8 5f       	subi	r31, 0xF8	; 248
    11fe:	d0 f3       	brcs	.-12     	; 0x11f4 <pow+0x42>
    1200:	10 c0       	rjmp	.+32     	; 0x1222 <pow+0x70>
    1202:	ff 5f       	subi	r31, 0xFF	; 255
    1204:	70 f4       	brcc	.+28     	; 0x1222 <pow+0x70>
    1206:	a6 95       	lsr	r26
    1208:	e0 f7       	brcc	.-8      	; 0x1202 <pow+0x50>
    120a:	f7 39       	cpi	r31, 0x97	; 151
    120c:	50 f0       	brcs	.+20     	; 0x1222 <pow+0x70>
    120e:	19 f0       	breq	.+6      	; 0x1216 <pow+0x64>
    1210:	ff 3a       	cpi	r31, 0xAF	; 175
    1212:	38 f4       	brcc	.+14     	; 0x1222 <pow+0x70>
    1214:	9f 77       	andi	r25, 0x7F	; 127
    1216:	9f 93       	push	r25
    1218:	0d d0       	rcall	.+26     	; 0x1234 <pow+0x82>
    121a:	0f 90       	pop	r0
    121c:	07 fc       	sbrc	r0, 7
    121e:	90 58       	subi	r25, 0x80	; 128
    1220:	08 95       	ret
    1222:	46 f0       	brts	.+16     	; 0x1234 <pow+0x82>
    1224:	0c 94 8e 08 	jmp	0x111c	; 0x111c <__fp_nan>
    1228:	60 e0       	ldi	r22, 0x00	; 0
    122a:	70 e0       	ldi	r23, 0x00	; 0
    122c:	80 e8       	ldi	r24, 0x80	; 128
    122e:	9f e3       	ldi	r25, 0x3F	; 63
    1230:	08 95       	ret
    1232:	4f e7       	ldi	r20, 0x7F	; 127
    1234:	9f 77       	andi	r25, 0x7F	; 127
    1236:	5f 93       	push	r21
    1238:	4f 93       	push	r20
    123a:	3f 93       	push	r19
    123c:	2f 93       	push	r18
    123e:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <log>
    1242:	2f 91       	pop	r18
    1244:	3f 91       	pop	r19
    1246:	4f 91       	pop	r20
    1248:	5f 91       	pop	r21
    124a:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <__mulsf3>
    124e:	0c 94 31 09 	jmp	0x1262	; 0x1262 <exp>
    1252:	29 f4       	brne	.+10     	; 0x125e <pow+0xac>
    1254:	16 f0       	brts	.+4      	; 0x125a <pow+0xa8>
    1256:	0c 94 88 08 	jmp	0x1110	; 0x1110 <__fp_inf>
    125a:	0c 94 d2 08 	jmp	0x11a4	; 0x11a4 <__fp_zero>
    125e:	0c 94 8e 08 	jmp	0x111c	; 0x111c <__fp_nan>

00001262 <exp>:
    1262:	0e 94 b8 08 	call	0x1170	; 0x1170 <__fp_splitA>
    1266:	a8 f3       	brcs	.-22     	; 0x1252 <pow+0xa0>
    1268:	96 38       	cpi	r25, 0x86	; 134
    126a:	a0 f7       	brcc	.-24     	; 0x1254 <pow+0xa2>
    126c:	07 f8       	bld	r0, 7
    126e:	0f 92       	push	r0
    1270:	e8 94       	clt
    1272:	2b e3       	ldi	r18, 0x3B	; 59
    1274:	3a ea       	ldi	r19, 0xAA	; 170
    1276:	48 eb       	ldi	r20, 0xB8	; 184
    1278:	5f e7       	ldi	r21, 0x7F	; 127
    127a:	0e 94 66 0a 	call	0x14cc	; 0x14cc <__mulsf3_pse>
    127e:	0f 92       	push	r0
    1280:	0f 92       	push	r0
    1282:	0f 92       	push	r0
    1284:	4d b7       	in	r20, 0x3d	; 61
    1286:	5e b7       	in	r21, 0x3e	; 62
    1288:	0f 92       	push	r0
    128a:	0e 94 1c 0a 	call	0x1438	; 0x1438 <modf>
    128e:	e8 e6       	ldi	r30, 0x68	; 104
    1290:	f0 e0       	ldi	r31, 0x00	; 0
    1292:	0e 94 63 09 	call	0x12c6	; 0x12c6 <__fp_powser>
    1296:	4f 91       	pop	r20
    1298:	5f 91       	pop	r21
    129a:	ef 91       	pop	r30
    129c:	ff 91       	pop	r31
    129e:	e5 95       	asr	r30
    12a0:	ee 1f       	adc	r30, r30
    12a2:	ff 1f       	adc	r31, r31
    12a4:	49 f0       	breq	.+18     	; 0x12b8 <exp+0x56>
    12a6:	fe 57       	subi	r31, 0x7E	; 126
    12a8:	e0 68       	ori	r30, 0x80	; 128
    12aa:	44 27       	eor	r20, r20
    12ac:	ee 0f       	add	r30, r30
    12ae:	44 1f       	adc	r20, r20
    12b0:	fa 95       	dec	r31
    12b2:	e1 f7       	brne	.-8      	; 0x12ac <exp+0x4a>
    12b4:	41 95       	neg	r20
    12b6:	55 0b       	sbc	r21, r21
    12b8:	0e 94 96 09 	call	0x132c	; 0x132c <ldexp>
    12bc:	0f 90       	pop	r0
    12be:	07 fe       	sbrs	r0, 7
    12c0:	0c 94 8a 09 	jmp	0x1314	; 0x1314 <inverse>
    12c4:	08 95       	ret

000012c6 <__fp_powser>:
    12c6:	df 93       	push	r29
    12c8:	cf 93       	push	r28
    12ca:	1f 93       	push	r17
    12cc:	0f 93       	push	r16
    12ce:	ff 92       	push	r15
    12d0:	ef 92       	push	r14
    12d2:	df 92       	push	r13
    12d4:	7b 01       	movw	r14, r22
    12d6:	8c 01       	movw	r16, r24
    12d8:	68 94       	set
    12da:	06 c0       	rjmp	.+12     	; 0x12e8 <__fp_powser+0x22>
    12dc:	da 2e       	mov	r13, r26
    12de:	ef 01       	movw	r28, r30
    12e0:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <__mulsf3x>
    12e4:	fe 01       	movw	r30, r28
    12e6:	e8 94       	clt
    12e8:	a5 91       	lpm	r26, Z+
    12ea:	25 91       	lpm	r18, Z+
    12ec:	35 91       	lpm	r19, Z+
    12ee:	45 91       	lpm	r20, Z+
    12f0:	55 91       	lpm	r21, Z+
    12f2:	a6 f3       	brts	.-24     	; 0x12dc <__fp_powser+0x16>
    12f4:	ef 01       	movw	r28, r30
    12f6:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <__addsf3x>
    12fa:	fe 01       	movw	r30, r28
    12fc:	97 01       	movw	r18, r14
    12fe:	a8 01       	movw	r20, r16
    1300:	da 94       	dec	r13
    1302:	69 f7       	brne	.-38     	; 0x12de <__fp_powser+0x18>
    1304:	df 90       	pop	r13
    1306:	ef 90       	pop	r14
    1308:	ff 90       	pop	r15
    130a:	0f 91       	pop	r16
    130c:	1f 91       	pop	r17
    130e:	cf 91       	pop	r28
    1310:	df 91       	pop	r29
    1312:	08 95       	ret

00001314 <inverse>:
    1314:	9b 01       	movw	r18, r22
    1316:	ac 01       	movw	r20, r24
    1318:	60 e0       	ldi	r22, 0x00	; 0
    131a:	70 e0       	ldi	r23, 0x00	; 0
    131c:	80 e8       	ldi	r24, 0x80	; 128
    131e:	9f e3       	ldi	r25, 0x3F	; 63
    1320:	0c 94 aa 07 	jmp	0xf54	; 0xf54 <__divsf3>
    1324:	0c 94 88 08 	jmp	0x1110	; 0x1110 <__fp_inf>
    1328:	0c 94 2a 0b 	jmp	0x1654	; 0x1654 <__fp_mpack>

0000132c <ldexp>:
    132c:	0e 94 b8 08 	call	0x1170	; 0x1170 <__fp_splitA>
    1330:	d8 f3       	brcs	.-10     	; 0x1328 <inverse+0x14>
    1332:	99 23       	and	r25, r25
    1334:	c9 f3       	breq	.-14     	; 0x1328 <inverse+0x14>
    1336:	94 0f       	add	r25, r20
    1338:	51 1d       	adc	r21, r1
    133a:	a3 f3       	brvs	.-24     	; 0x1324 <inverse+0x10>
    133c:	91 50       	subi	r25, 0x01	; 1
    133e:	50 40       	sbci	r21, 0x00	; 0
    1340:	94 f0       	brlt	.+36     	; 0x1366 <ldexp+0x3a>
    1342:	59 f0       	breq	.+22     	; 0x135a <ldexp+0x2e>
    1344:	88 23       	and	r24, r24
    1346:	32 f0       	brmi	.+12     	; 0x1354 <ldexp+0x28>
    1348:	66 0f       	add	r22, r22
    134a:	77 1f       	adc	r23, r23
    134c:	88 1f       	adc	r24, r24
    134e:	91 50       	subi	r25, 0x01	; 1
    1350:	50 40       	sbci	r21, 0x00	; 0
    1352:	c1 f7       	brne	.-16     	; 0x1344 <ldexp+0x18>
    1354:	9e 3f       	cpi	r25, 0xFE	; 254
    1356:	51 05       	cpc	r21, r1
    1358:	2c f7       	brge	.-54     	; 0x1324 <inverse+0x10>
    135a:	88 0f       	add	r24, r24
    135c:	91 1d       	adc	r25, r1
    135e:	96 95       	lsr	r25
    1360:	87 95       	ror	r24
    1362:	97 f9       	bld	r25, 7
    1364:	08 95       	ret
    1366:	5f 3f       	cpi	r21, 0xFF	; 255
    1368:	ac f0       	brlt	.+42     	; 0x1394 <ldexp+0x68>
    136a:	98 3e       	cpi	r25, 0xE8	; 232
    136c:	9c f0       	brlt	.+38     	; 0x1394 <ldexp+0x68>
    136e:	bb 27       	eor	r27, r27
    1370:	86 95       	lsr	r24
    1372:	77 95       	ror	r23
    1374:	67 95       	ror	r22
    1376:	b7 95       	ror	r27
    1378:	08 f4       	brcc	.+2      	; 0x137c <ldexp+0x50>
    137a:	b1 60       	ori	r27, 0x01	; 1
    137c:	93 95       	inc	r25
    137e:	c1 f7       	brne	.-16     	; 0x1370 <ldexp+0x44>
    1380:	bb 0f       	add	r27, r27
    1382:	58 f7       	brcc	.-42     	; 0x135a <ldexp+0x2e>
    1384:	11 f4       	brne	.+4      	; 0x138a <ldexp+0x5e>
    1386:	60 ff       	sbrs	r22, 0
    1388:	e8 cf       	rjmp	.-48     	; 0x135a <ldexp+0x2e>
    138a:	6f 5f       	subi	r22, 0xFF	; 255
    138c:	7f 4f       	sbci	r23, 0xFF	; 255
    138e:	8f 4f       	sbci	r24, 0xFF	; 255
    1390:	9f 4f       	sbci	r25, 0xFF	; 255
    1392:	e3 cf       	rjmp	.-58     	; 0x135a <ldexp+0x2e>
    1394:	0c 94 d3 08 	jmp	0x11a6	; 0x11a6 <__fp_szero>
    1398:	16 f0       	brts	.+4      	; 0x139e <ldexp+0x72>
    139a:	0c 94 2a 0b 	jmp	0x1654	; 0x1654 <__fp_mpack>
    139e:	0c 94 8e 08 	jmp	0x111c	; 0x111c <__fp_nan>
    13a2:	68 94       	set
    13a4:	0c 94 88 08 	jmp	0x1110	; 0x1110 <__fp_inf>

000013a8 <log>:
    13a8:	0e 94 b8 08 	call	0x1170	; 0x1170 <__fp_splitA>
    13ac:	a8 f3       	brcs	.-22     	; 0x1398 <ldexp+0x6c>
    13ae:	99 23       	and	r25, r25
    13b0:	c1 f3       	breq	.-16     	; 0x13a2 <ldexp+0x76>
    13b2:	ae f3       	brts	.-22     	; 0x139e <ldexp+0x72>
    13b4:	df 93       	push	r29
    13b6:	cf 93       	push	r28
    13b8:	1f 93       	push	r17
    13ba:	0f 93       	push	r16
    13bc:	ff 92       	push	r15
    13be:	c9 2f       	mov	r28, r25
    13c0:	dd 27       	eor	r29, r29
    13c2:	88 23       	and	r24, r24
    13c4:	2a f0       	brmi	.+10     	; 0x13d0 <log+0x28>
    13c6:	21 97       	sbiw	r28, 0x01	; 1
    13c8:	66 0f       	add	r22, r22
    13ca:	77 1f       	adc	r23, r23
    13cc:	88 1f       	adc	r24, r24
    13ce:	da f7       	brpl	.-10     	; 0x13c6 <log+0x1e>
    13d0:	20 e0       	ldi	r18, 0x00	; 0
    13d2:	30 e0       	ldi	r19, 0x00	; 0
    13d4:	40 e8       	ldi	r20, 0x80	; 128
    13d6:	5f eb       	ldi	r21, 0xBF	; 191
    13d8:	9f e3       	ldi	r25, 0x3F	; 63
    13da:	88 39       	cpi	r24, 0x98	; 152
    13dc:	20 f0       	brcs	.+8      	; 0x13e6 <log+0x3e>
    13de:	80 3e       	cpi	r24, 0xE0	; 224
    13e0:	38 f0       	brcs	.+14     	; 0x13f0 <log+0x48>
    13e2:	21 96       	adiw	r28, 0x01	; 1
    13e4:	8f 77       	andi	r24, 0x7F	; 127
    13e6:	0e 94 be 0a 	call	0x157c	; 0x157c <__addsf3>
    13ea:	e0 e9       	ldi	r30, 0x90	; 144
    13ec:	f0 e0       	ldi	r31, 0x00	; 0
    13ee:	04 c0       	rjmp	.+8      	; 0x13f8 <log+0x50>
    13f0:	0e 94 be 0a 	call	0x157c	; 0x157c <__addsf3>
    13f4:	ed eb       	ldi	r30, 0xBD	; 189
    13f6:	f0 e0       	ldi	r31, 0x00	; 0
    13f8:	0e 94 63 09 	call	0x12c6	; 0x12c6 <__fp_powser>
    13fc:	8b 01       	movw	r16, r22
    13fe:	be 01       	movw	r22, r28
    1400:	ec 01       	movw	r28, r24
    1402:	fb 2e       	mov	r15, r27
    1404:	6f 57       	subi	r22, 0x7F	; 127
    1406:	71 09       	sbc	r23, r1
    1408:	75 95       	asr	r23
    140a:	77 1f       	adc	r23, r23
    140c:	88 0b       	sbc	r24, r24
    140e:	99 0b       	sbc	r25, r25
    1410:	0e 94 4d 08 	call	0x109a	; 0x109a <__floatsisf>
    1414:	28 e1       	ldi	r18, 0x18	; 24
    1416:	32 e7       	ldi	r19, 0x72	; 114
    1418:	41 e3       	ldi	r20, 0x31	; 49
    141a:	5f e3       	ldi	r21, 0x3F	; 63
    141c:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <__mulsf3x>
    1420:	af 2d       	mov	r26, r15
    1422:	98 01       	movw	r18, r16
    1424:	ae 01       	movw	r20, r28
    1426:	ff 90       	pop	r15
    1428:	0f 91       	pop	r16
    142a:	1f 91       	pop	r17
    142c:	cf 91       	pop	r28
    142e:	df 91       	pop	r29
    1430:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <__addsf3x>
    1434:	0c 94 9f 08 	jmp	0x113e	; 0x113e <__fp_round>

00001438 <modf>:
    1438:	fa 01       	movw	r30, r20
    143a:	dc 01       	movw	r26, r24
    143c:	aa 0f       	add	r26, r26
    143e:	bb 1f       	adc	r27, r27
    1440:	9b 01       	movw	r18, r22
    1442:	ac 01       	movw	r20, r24
    1444:	bf 57       	subi	r27, 0x7F	; 127
    1446:	28 f4       	brcc	.+10     	; 0x1452 <modf+0x1a>
    1448:	22 27       	eor	r18, r18
    144a:	33 27       	eor	r19, r19
    144c:	44 27       	eor	r20, r20
    144e:	50 78       	andi	r21, 0x80	; 128
    1450:	20 c0       	rjmp	.+64     	; 0x1492 <modf+0x5a>
    1452:	b7 51       	subi	r27, 0x17	; 23
    1454:	90 f4       	brcc	.+36     	; 0x147a <modf+0x42>
    1456:	ab 2f       	mov	r26, r27
    1458:	00 24       	eor	r0, r0
    145a:	46 95       	lsr	r20
    145c:	37 95       	ror	r19
    145e:	27 95       	ror	r18
    1460:	01 1c       	adc	r0, r1
    1462:	a3 95       	inc	r26
    1464:	d2 f3       	brmi	.-12     	; 0x145a <modf+0x22>
    1466:	00 20       	and	r0, r0
    1468:	71 f0       	breq	.+28     	; 0x1486 <modf+0x4e>
    146a:	22 0f       	add	r18, r18
    146c:	33 1f       	adc	r19, r19
    146e:	44 1f       	adc	r20, r20
    1470:	b3 95       	inc	r27
    1472:	da f3       	brmi	.-10     	; 0x146a <modf+0x32>
    1474:	0e d0       	rcall	.+28     	; 0x1492 <modf+0x5a>
    1476:	0c 94 bd 0a 	jmp	0x157a	; 0x157a <__subsf3>
    147a:	61 30       	cpi	r22, 0x01	; 1
    147c:	71 05       	cpc	r23, r1
    147e:	a0 e8       	ldi	r26, 0x80	; 128
    1480:	8a 07       	cpc	r24, r26
    1482:	b9 46       	sbci	r27, 0x69	; 105
    1484:	30 f4       	brcc	.+12     	; 0x1492 <modf+0x5a>
    1486:	9b 01       	movw	r18, r22
    1488:	ac 01       	movw	r20, r24
    148a:	66 27       	eor	r22, r22
    148c:	77 27       	eor	r23, r23
    148e:	88 27       	eor	r24, r24
    1490:	90 78       	andi	r25, 0x80	; 128
    1492:	30 96       	adiw	r30, 0x00	; 0
    1494:	21 f0       	breq	.+8      	; 0x149e <modf+0x66>
    1496:	20 83       	st	Z, r18
    1498:	31 83       	std	Z+1, r19	; 0x01
    149a:	42 83       	std	Z+2, r20	; 0x02
    149c:	53 83       	std	Z+3, r21	; 0x03
    149e:	08 95       	ret

000014a0 <__mulsf3>:
    14a0:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <__mulsf3x>
    14a4:	0c 94 9f 08 	jmp	0x113e	; 0x113e <__fp_round>
    14a8:	0e 94 91 08 	call	0x1122	; 0x1122 <__fp_pscA>
    14ac:	38 f0       	brcs	.+14     	; 0x14bc <__mulsf3+0x1c>
    14ae:	0e 94 98 08 	call	0x1130	; 0x1130 <__fp_pscB>
    14b2:	20 f0       	brcs	.+8      	; 0x14bc <__mulsf3+0x1c>
    14b4:	95 23       	and	r25, r21
    14b6:	11 f0       	breq	.+4      	; 0x14bc <__mulsf3+0x1c>
    14b8:	0c 94 88 08 	jmp	0x1110	; 0x1110 <__fp_inf>
    14bc:	0c 94 8e 08 	jmp	0x111c	; 0x111c <__fp_nan>
    14c0:	11 24       	eor	r1, r1
    14c2:	0c 94 d3 08 	jmp	0x11a6	; 0x11a6 <__fp_szero>

000014c6 <__mulsf3x>:
    14c6:	0e 94 b0 08 	call	0x1160	; 0x1160 <__fp_split3>
    14ca:	70 f3       	brcs	.-36     	; 0x14a8 <__mulsf3+0x8>

000014cc <__mulsf3_pse>:
    14cc:	95 9f       	mul	r25, r21
    14ce:	c1 f3       	breq	.-16     	; 0x14c0 <__mulsf3+0x20>
    14d0:	95 0f       	add	r25, r21
    14d2:	50 e0       	ldi	r21, 0x00	; 0
    14d4:	55 1f       	adc	r21, r21
    14d6:	62 9f       	mul	r22, r18
    14d8:	f0 01       	movw	r30, r0
    14da:	72 9f       	mul	r23, r18
    14dc:	bb 27       	eor	r27, r27
    14de:	f0 0d       	add	r31, r0
    14e0:	b1 1d       	adc	r27, r1
    14e2:	63 9f       	mul	r22, r19
    14e4:	aa 27       	eor	r26, r26
    14e6:	f0 0d       	add	r31, r0
    14e8:	b1 1d       	adc	r27, r1
    14ea:	aa 1f       	adc	r26, r26
    14ec:	64 9f       	mul	r22, r20
    14ee:	66 27       	eor	r22, r22
    14f0:	b0 0d       	add	r27, r0
    14f2:	a1 1d       	adc	r26, r1
    14f4:	66 1f       	adc	r22, r22
    14f6:	82 9f       	mul	r24, r18
    14f8:	22 27       	eor	r18, r18
    14fa:	b0 0d       	add	r27, r0
    14fc:	a1 1d       	adc	r26, r1
    14fe:	62 1f       	adc	r22, r18
    1500:	73 9f       	mul	r23, r19
    1502:	b0 0d       	add	r27, r0
    1504:	a1 1d       	adc	r26, r1
    1506:	62 1f       	adc	r22, r18
    1508:	83 9f       	mul	r24, r19
    150a:	a0 0d       	add	r26, r0
    150c:	61 1d       	adc	r22, r1
    150e:	22 1f       	adc	r18, r18
    1510:	74 9f       	mul	r23, r20
    1512:	33 27       	eor	r19, r19
    1514:	a0 0d       	add	r26, r0
    1516:	61 1d       	adc	r22, r1
    1518:	23 1f       	adc	r18, r19
    151a:	84 9f       	mul	r24, r20
    151c:	60 0d       	add	r22, r0
    151e:	21 1d       	adc	r18, r1
    1520:	82 2f       	mov	r24, r18
    1522:	76 2f       	mov	r23, r22
    1524:	6a 2f       	mov	r22, r26
    1526:	11 24       	eor	r1, r1
    1528:	9f 57       	subi	r25, 0x7F	; 127
    152a:	50 40       	sbci	r21, 0x00	; 0
    152c:	9a f0       	brmi	.+38     	; 0x1554 <__mulsf3_pse+0x88>
    152e:	f1 f0       	breq	.+60     	; 0x156c <__mulsf3_pse+0xa0>
    1530:	88 23       	and	r24, r24
    1532:	4a f0       	brmi	.+18     	; 0x1546 <__mulsf3_pse+0x7a>
    1534:	ee 0f       	add	r30, r30
    1536:	ff 1f       	adc	r31, r31
    1538:	bb 1f       	adc	r27, r27
    153a:	66 1f       	adc	r22, r22
    153c:	77 1f       	adc	r23, r23
    153e:	88 1f       	adc	r24, r24
    1540:	91 50       	subi	r25, 0x01	; 1
    1542:	50 40       	sbci	r21, 0x00	; 0
    1544:	a9 f7       	brne	.-22     	; 0x1530 <__mulsf3_pse+0x64>
    1546:	9e 3f       	cpi	r25, 0xFE	; 254
    1548:	51 05       	cpc	r21, r1
    154a:	80 f0       	brcs	.+32     	; 0x156c <__mulsf3_pse+0xa0>
    154c:	0c 94 88 08 	jmp	0x1110	; 0x1110 <__fp_inf>
    1550:	0c 94 d3 08 	jmp	0x11a6	; 0x11a6 <__fp_szero>
    1554:	5f 3f       	cpi	r21, 0xFF	; 255
    1556:	e4 f3       	brlt	.-8      	; 0x1550 <__mulsf3_pse+0x84>
    1558:	98 3e       	cpi	r25, 0xE8	; 232
    155a:	d4 f3       	brlt	.-12     	; 0x1550 <__mulsf3_pse+0x84>
    155c:	86 95       	lsr	r24
    155e:	77 95       	ror	r23
    1560:	67 95       	ror	r22
    1562:	b7 95       	ror	r27
    1564:	f7 95       	ror	r31
    1566:	e7 95       	ror	r30
    1568:	9f 5f       	subi	r25, 0xFF	; 255
    156a:	c1 f7       	brne	.-16     	; 0x155c <__mulsf3_pse+0x90>
    156c:	fe 2b       	or	r31, r30
    156e:	88 0f       	add	r24, r24
    1570:	91 1d       	adc	r25, r1
    1572:	96 95       	lsr	r25
    1574:	87 95       	ror	r24
    1576:	97 f9       	bld	r25, 7
    1578:	08 95       	ret

0000157a <__subsf3>:
    157a:	50 58       	subi	r21, 0x80	; 128

0000157c <__addsf3>:
    157c:	bb 27       	eor	r27, r27
    157e:	aa 27       	eor	r26, r26
    1580:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <__addsf3x>
    1584:	0c 94 9f 08 	jmp	0x113e	; 0x113e <__fp_round>
    1588:	0e 94 91 08 	call	0x1122	; 0x1122 <__fp_pscA>
    158c:	38 f0       	brcs	.+14     	; 0x159c <__addsf3+0x20>
    158e:	0e 94 98 08 	call	0x1130	; 0x1130 <__fp_pscB>
    1592:	20 f0       	brcs	.+8      	; 0x159c <__addsf3+0x20>
    1594:	39 f4       	brne	.+14     	; 0x15a4 <__addsf3+0x28>
    1596:	9f 3f       	cpi	r25, 0xFF	; 255
    1598:	19 f4       	brne	.+6      	; 0x15a0 <__addsf3+0x24>
    159a:	26 f4       	brtc	.+8      	; 0x15a4 <__addsf3+0x28>
    159c:	0c 94 8e 08 	jmp	0x111c	; 0x111c <__fp_nan>
    15a0:	0e f4       	brtc	.+2      	; 0x15a4 <__addsf3+0x28>
    15a2:	e0 95       	com	r30
    15a4:	e7 fb       	bst	r30, 7
    15a6:	0c 94 88 08 	jmp	0x1110	; 0x1110 <__fp_inf>

000015aa <__addsf3x>:
    15aa:	e9 2f       	mov	r30, r25
    15ac:	0e 94 b0 08 	call	0x1160	; 0x1160 <__fp_split3>
    15b0:	58 f3       	brcs	.-42     	; 0x1588 <__addsf3+0xc>
    15b2:	ba 17       	cp	r27, r26
    15b4:	62 07       	cpc	r22, r18
    15b6:	73 07       	cpc	r23, r19
    15b8:	84 07       	cpc	r24, r20
    15ba:	95 07       	cpc	r25, r21
    15bc:	20 f0       	brcs	.+8      	; 0x15c6 <__addsf3x+0x1c>
    15be:	79 f4       	brne	.+30     	; 0x15de <__addsf3x+0x34>
    15c0:	a6 f5       	brtc	.+104    	; 0x162a <__addsf3x+0x80>
    15c2:	0c 94 d2 08 	jmp	0x11a4	; 0x11a4 <__fp_zero>
    15c6:	0e f4       	brtc	.+2      	; 0x15ca <__addsf3x+0x20>
    15c8:	e0 95       	com	r30
    15ca:	0b 2e       	mov	r0, r27
    15cc:	ba 2f       	mov	r27, r26
    15ce:	a0 2d       	mov	r26, r0
    15d0:	0b 01       	movw	r0, r22
    15d2:	b9 01       	movw	r22, r18
    15d4:	90 01       	movw	r18, r0
    15d6:	0c 01       	movw	r0, r24
    15d8:	ca 01       	movw	r24, r20
    15da:	a0 01       	movw	r20, r0
    15dc:	11 24       	eor	r1, r1
    15de:	ff 27       	eor	r31, r31
    15e0:	59 1b       	sub	r21, r25
    15e2:	99 f0       	breq	.+38     	; 0x160a <__addsf3x+0x60>
    15e4:	59 3f       	cpi	r21, 0xF9	; 249
    15e6:	50 f4       	brcc	.+20     	; 0x15fc <__addsf3x+0x52>
    15e8:	50 3e       	cpi	r21, 0xE0	; 224
    15ea:	68 f1       	brcs	.+90     	; 0x1646 <__addsf3x+0x9c>
    15ec:	1a 16       	cp	r1, r26
    15ee:	f0 40       	sbci	r31, 0x00	; 0
    15f0:	a2 2f       	mov	r26, r18
    15f2:	23 2f       	mov	r18, r19
    15f4:	34 2f       	mov	r19, r20
    15f6:	44 27       	eor	r20, r20
    15f8:	58 5f       	subi	r21, 0xF8	; 248
    15fa:	f3 cf       	rjmp	.-26     	; 0x15e2 <__addsf3x+0x38>
    15fc:	46 95       	lsr	r20
    15fe:	37 95       	ror	r19
    1600:	27 95       	ror	r18
    1602:	a7 95       	ror	r26
    1604:	f0 40       	sbci	r31, 0x00	; 0
    1606:	53 95       	inc	r21
    1608:	c9 f7       	brne	.-14     	; 0x15fc <__addsf3x+0x52>
    160a:	7e f4       	brtc	.+30     	; 0x162a <__addsf3x+0x80>
    160c:	1f 16       	cp	r1, r31
    160e:	ba 0b       	sbc	r27, r26
    1610:	62 0b       	sbc	r22, r18
    1612:	73 0b       	sbc	r23, r19
    1614:	84 0b       	sbc	r24, r20
    1616:	ba f0       	brmi	.+46     	; 0x1646 <__addsf3x+0x9c>
    1618:	91 50       	subi	r25, 0x01	; 1
    161a:	a1 f0       	breq	.+40     	; 0x1644 <__addsf3x+0x9a>
    161c:	ff 0f       	add	r31, r31
    161e:	bb 1f       	adc	r27, r27
    1620:	66 1f       	adc	r22, r22
    1622:	77 1f       	adc	r23, r23
    1624:	88 1f       	adc	r24, r24
    1626:	c2 f7       	brpl	.-16     	; 0x1618 <__addsf3x+0x6e>
    1628:	0e c0       	rjmp	.+28     	; 0x1646 <__addsf3x+0x9c>
    162a:	ba 0f       	add	r27, r26
    162c:	62 1f       	adc	r22, r18
    162e:	73 1f       	adc	r23, r19
    1630:	84 1f       	adc	r24, r20
    1632:	48 f4       	brcc	.+18     	; 0x1646 <__addsf3x+0x9c>
    1634:	87 95       	ror	r24
    1636:	77 95       	ror	r23
    1638:	67 95       	ror	r22
    163a:	b7 95       	ror	r27
    163c:	f7 95       	ror	r31
    163e:	9e 3f       	cpi	r25, 0xFE	; 254
    1640:	08 f0       	brcs	.+2      	; 0x1644 <__addsf3x+0x9a>
    1642:	b0 cf       	rjmp	.-160    	; 0x15a4 <__addsf3+0x28>
    1644:	93 95       	inc	r25
    1646:	88 0f       	add	r24, r24
    1648:	08 f0       	brcs	.+2      	; 0x164c <__addsf3x+0xa2>
    164a:	99 27       	eor	r25, r25
    164c:	ee 0f       	add	r30, r30
    164e:	97 95       	ror	r25
    1650:	87 95       	ror	r24
    1652:	08 95       	ret

00001654 <__fp_mpack>:
    1654:	9f 3f       	cpi	r25, 0xFF	; 255
    1656:	31 f0       	breq	.+12     	; 0x1664 <__fp_mpack_finite+0xc>

00001658 <__fp_mpack_finite>:
    1658:	91 50       	subi	r25, 0x01	; 1
    165a:	20 f4       	brcc	.+8      	; 0x1664 <__fp_mpack_finite+0xc>
    165c:	87 95       	ror	r24
    165e:	77 95       	ror	r23
    1660:	67 95       	ror	r22
    1662:	b7 95       	ror	r27
    1664:	88 0f       	add	r24, r24
    1666:	91 1d       	adc	r25, r1
    1668:	96 95       	lsr	r25
    166a:	87 95       	ror	r24
    166c:	97 f9       	bld	r25, 7
    166e:	08 95       	ret

00001670 <__udivmodsi4>:
    1670:	a1 e2       	ldi	r26, 0x21	; 33
    1672:	1a 2e       	mov	r1, r26
    1674:	aa 1b       	sub	r26, r26
    1676:	bb 1b       	sub	r27, r27
    1678:	fd 01       	movw	r30, r26
    167a:	0d c0       	rjmp	.+26     	; 0x1696 <__udivmodsi4_ep>

0000167c <__udivmodsi4_loop>:
    167c:	aa 1f       	adc	r26, r26
    167e:	bb 1f       	adc	r27, r27
    1680:	ee 1f       	adc	r30, r30
    1682:	ff 1f       	adc	r31, r31
    1684:	a2 17       	cp	r26, r18
    1686:	b3 07       	cpc	r27, r19
    1688:	e4 07       	cpc	r30, r20
    168a:	f5 07       	cpc	r31, r21
    168c:	20 f0       	brcs	.+8      	; 0x1696 <__udivmodsi4_ep>
    168e:	a2 1b       	sub	r26, r18
    1690:	b3 0b       	sbc	r27, r19
    1692:	e4 0b       	sbc	r30, r20
    1694:	f5 0b       	sbc	r31, r21

00001696 <__udivmodsi4_ep>:
    1696:	66 1f       	adc	r22, r22
    1698:	77 1f       	adc	r23, r23
    169a:	88 1f       	adc	r24, r24
    169c:	99 1f       	adc	r25, r25
    169e:	1a 94       	dec	r1
    16a0:	69 f7       	brne	.-38     	; 0x167c <__udivmodsi4_loop>
    16a2:	60 95       	com	r22
    16a4:	70 95       	com	r23
    16a6:	80 95       	com	r24
    16a8:	90 95       	com	r25
    16aa:	9b 01       	movw	r18, r22
    16ac:	ac 01       	movw	r20, r24
    16ae:	bd 01       	movw	r22, r26
    16b0:	cf 01       	movw	r24, r30
    16b2:	08 95       	ret

000016b4 <__divmodsi4>:
    16b4:	05 2e       	mov	r0, r21
    16b6:	97 fb       	bst	r25, 7
    16b8:	1e f4       	brtc	.+6      	; 0x16c0 <__divmodsi4+0xc>
    16ba:	00 94       	com	r0
    16bc:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <__negsi2>
    16c0:	57 fd       	sbrc	r21, 7
    16c2:	07 d0       	rcall	.+14     	; 0x16d2 <__divmodsi4_neg2>
    16c4:	0e 94 38 0b 	call	0x1670	; 0x1670 <__udivmodsi4>
    16c8:	07 fc       	sbrc	r0, 7
    16ca:	03 d0       	rcall	.+6      	; 0x16d2 <__divmodsi4_neg2>
    16cc:	4e f4       	brtc	.+18     	; 0x16e0 <__divmodsi4_exit>
    16ce:	0c 94 71 0b 	jmp	0x16e2	; 0x16e2 <__negsi2>

000016d2 <__divmodsi4_neg2>:
    16d2:	50 95       	com	r21
    16d4:	40 95       	com	r20
    16d6:	30 95       	com	r19
    16d8:	21 95       	neg	r18
    16da:	3f 4f       	sbci	r19, 0xFF	; 255
    16dc:	4f 4f       	sbci	r20, 0xFF	; 255
    16de:	5f 4f       	sbci	r21, 0xFF	; 255

000016e0 <__divmodsi4_exit>:
    16e0:	08 95       	ret

000016e2 <__negsi2>:
    16e2:	90 95       	com	r25
    16e4:	80 95       	com	r24
    16e6:	70 95       	com	r23
    16e8:	61 95       	neg	r22
    16ea:	7f 4f       	sbci	r23, 0xFF	; 255
    16ec:	8f 4f       	sbci	r24, 0xFF	; 255
    16ee:	9f 4f       	sbci	r25, 0xFF	; 255
    16f0:	08 95       	ret

000016f2 <strcpy>:
    16f2:	fb 01       	movw	r30, r22
    16f4:	dc 01       	movw	r26, r24
    16f6:	01 90       	ld	r0, Z+
    16f8:	0d 92       	st	X+, r0
    16fa:	00 20       	and	r0, r0
    16fc:	e1 f7       	brne	.-8      	; 0x16f6 <strcpy+0x4>
    16fe:	08 95       	ret

00001700 <__itoa_ncheck>:
    1700:	bb 27       	eor	r27, r27
    1702:	4a 30       	cpi	r20, 0x0A	; 10
    1704:	31 f4       	brne	.+12     	; 0x1712 <__itoa_ncheck+0x12>
    1706:	99 23       	and	r25, r25
    1708:	22 f4       	brpl	.+8      	; 0x1712 <__itoa_ncheck+0x12>
    170a:	bd e2       	ldi	r27, 0x2D	; 45
    170c:	90 95       	com	r25
    170e:	81 95       	neg	r24
    1710:	9f 4f       	sbci	r25, 0xFF	; 255
    1712:	0c 94 8c 0b 	jmp	0x1718	; 0x1718 <__utoa_common>

00001716 <__utoa_ncheck>:
    1716:	bb 27       	eor	r27, r27

00001718 <__utoa_common>:
    1718:	fb 01       	movw	r30, r22
    171a:	55 27       	eor	r21, r21
    171c:	aa 27       	eor	r26, r26
    171e:	88 0f       	add	r24, r24
    1720:	99 1f       	adc	r25, r25
    1722:	aa 1f       	adc	r26, r26
    1724:	a4 17       	cp	r26, r20
    1726:	10 f0       	brcs	.+4      	; 0x172c <__utoa_common+0x14>
    1728:	a4 1b       	sub	r26, r20
    172a:	83 95       	inc	r24
    172c:	50 51       	subi	r21, 0x10	; 16
    172e:	b9 f7       	brne	.-18     	; 0x171e <__utoa_common+0x6>
    1730:	a0 5d       	subi	r26, 0xD0	; 208
    1732:	aa 33       	cpi	r26, 0x3A	; 58
    1734:	08 f0       	brcs	.+2      	; 0x1738 <__utoa_common+0x20>
    1736:	a9 5d       	subi	r26, 0xD9	; 217
    1738:	a1 93       	st	Z+, r26
    173a:	00 97       	sbiw	r24, 0x00	; 0
    173c:	79 f7       	brne	.-34     	; 0x171c <__utoa_common+0x4>
    173e:	b1 11       	cpse	r27, r1
    1740:	b1 93       	st	Z+, r27
    1742:	11 92       	st	Z+, r1
    1744:	cb 01       	movw	r24, r22
    1746:	0c 94 a5 0b 	jmp	0x174a	; 0x174a <strrev>

0000174a <strrev>:
    174a:	dc 01       	movw	r26, r24
    174c:	fc 01       	movw	r30, r24
    174e:	67 2f       	mov	r22, r23
    1750:	71 91       	ld	r23, Z+
    1752:	77 23       	and	r23, r23
    1754:	e1 f7       	brne	.-8      	; 0x174e <strrev+0x4>
    1756:	32 97       	sbiw	r30, 0x02	; 2
    1758:	04 c0       	rjmp	.+8      	; 0x1762 <strrev+0x18>
    175a:	7c 91       	ld	r23, X
    175c:	6d 93       	st	X+, r22
    175e:	70 83       	st	Z, r23
    1760:	62 91       	ld	r22, -Z
    1762:	ae 17       	cp	r26, r30
    1764:	bf 07       	cpc	r27, r31
    1766:	c8 f3       	brcs	.-14     	; 0x175a <strrev+0x10>
    1768:	08 95       	ret

0000176a <_exit>:
    176a:	f8 94       	cli

0000176c <__stop_program>:
    176c:	ff cf       	rjmp	.-2      	; 0x176c <__stop_program>
